// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.9
// source: os_res_data.proto

package resdata

import (
	_ "git.woa.com/bingo/bingo/codegenerator/option"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "osgame/model/osserver/proto/osproto"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EPlayerCamp int32

const (
	EPlayerCamp_PlayerCamp1               EPlayerCamp = 0
	EPlayerCamp_PlayerCamp2               EPlayerCamp = 1
	EPlayerCamp_PlayerCampPlayerOnlyCount EPlayerCamp = 2
	EPlayerCamp_PlayerCamp3               EPlayerCamp = 2
	EPlayerCamp_PlayerCampCount           EPlayerCamp = 3
	EPlayerCamp_PlayerCampNull            EPlayerCamp = 3
)

// Enum value maps for EPlayerCamp.
var (
	EPlayerCamp_name = map[int32]string{
		0: "PlayerCamp1",
		1: "PlayerCamp2",
		2: "PlayerCampPlayerOnlyCount",
		// Duplicate value: 2: "PlayerCamp3",
		3: "PlayerCampCount",
		// Duplicate value: 3: "PlayerCampNull",
	}
	EPlayerCamp_value = map[string]int32{
		"PlayerCamp1":               0,
		"PlayerCamp2":               1,
		"PlayerCampPlayerOnlyCount": 2,
		"PlayerCamp3":               2,
		"PlayerCampCount":           3,
		"PlayerCampNull":            3,
	}
)

func (x EPlayerCamp) Enum() *EPlayerCamp {
	p := new(EPlayerCamp)
	*p = x
	return p
}

func (x EPlayerCamp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPlayerCamp) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[0].Descriptor()
}

func (EPlayerCamp) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[0]
}

func (x EPlayerCamp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPlayerCamp.Descriptor instead.
func (EPlayerCamp) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{0}
}

//*用UE的枚举风格，这个是旧的不要参照这个风格*
type COM_ROOM_MEMBEM_TYPE int32

const (
	COM_ROOM_MEMBEM_TYPE_COM_ROOM_MEMBEM_TYPE__reserved__ COM_ROOM_MEMBEM_TYPE = 0
	COM_ROOM_MEMBEM_TYPE_COM_ROOM_MEMBER_TNULL            COM_ROOM_MEMBEM_TYPE = 0
	COM_ROOM_MEMBEM_TYPE_COM_ROOM_MEMBER_TACNT            COM_ROOM_MEMBEM_TYPE = 1
	COM_ROOM_MEMBEM_TYPE_COM_ROOM_MEMBER_TNPC             COM_ROOM_MEMBEM_TYPE = 2
)

// Enum value maps for COM_ROOM_MEMBEM_TYPE.
var (
	COM_ROOM_MEMBEM_TYPE_name = map[int32]string{
		0: "COM_ROOM_MEMBEM_TYPE__reserved__",
		// Duplicate value: 0: "COM_ROOM_MEMBER_TNULL",
		1: "COM_ROOM_MEMBER_TACNT",
		2: "COM_ROOM_MEMBER_TNPC",
	}
	COM_ROOM_MEMBEM_TYPE_value = map[string]int32{
		"COM_ROOM_MEMBEM_TYPE__reserved__": 0,
		"COM_ROOM_MEMBER_TNULL":            0,
		"COM_ROOM_MEMBER_TACNT":            1,
		"COM_ROOM_MEMBER_TNPC":             2,
	}
)

func (x COM_ROOM_MEMBEM_TYPE) Enum() *COM_ROOM_MEMBEM_TYPE {
	p := new(COM_ROOM_MEMBEM_TYPE)
	*p = x
	return p
}

func (x COM_ROOM_MEMBEM_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (COM_ROOM_MEMBEM_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[1].Descriptor()
}

func (COM_ROOM_MEMBEM_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[1]
}

func (x COM_ROOM_MEMBEM_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use COM_ROOM_MEMBEM_TYPE.Descriptor instead.
func (COM_ROOM_MEMBEM_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{1}
}

type RES_BATTLE_CAMP_TYPE int32

const (
	RES_BATTLE_CAMP_TYPE_RES_BATTLE_CAMP_TYPE__reserved__ RES_BATTLE_CAMP_TYPE = 0
	RES_BATTLE_CAMP_TYPE_RES_BATTLE_CAMP_BLUE             RES_BATTLE_CAMP_TYPE = 1
	RES_BATTLE_CAMP_TYPE_RES_BATTLE_CAMP_RED              RES_BATTLE_CAMP_TYPE = 2
	RES_BATTLE_CAMP_TYPE_RES_BATTLE_CAMP_ALL              RES_BATTLE_CAMP_TYPE = 3
)

// Enum value maps for RES_BATTLE_CAMP_TYPE.
var (
	RES_BATTLE_CAMP_TYPE_name = map[int32]string{
		0: "RES_BATTLE_CAMP_TYPE__reserved__",
		1: "RES_BATTLE_CAMP_BLUE",
		2: "RES_BATTLE_CAMP_RED",
		3: "RES_BATTLE_CAMP_ALL",
	}
	RES_BATTLE_CAMP_TYPE_value = map[string]int32{
		"RES_BATTLE_CAMP_TYPE__reserved__": 0,
		"RES_BATTLE_CAMP_BLUE":             1,
		"RES_BATTLE_CAMP_RED":              2,
		"RES_BATTLE_CAMP_ALL":              3,
	}
)

func (x RES_BATTLE_CAMP_TYPE) Enum() *RES_BATTLE_CAMP_TYPE {
	p := new(RES_BATTLE_CAMP_TYPE)
	*p = x
	return p
}

func (x RES_BATTLE_CAMP_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_BATTLE_CAMP_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[2].Descriptor()
}

func (RES_BATTLE_CAMP_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[2]
}

func (x RES_BATTLE_CAMP_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_BATTLE_CAMP_TYPE.Descriptor instead.
func (RES_BATTLE_CAMP_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{2}
}

type EGetWay int32

const (
	EGetWay_Null                     EGetWay = 0
	EGetWay_GETWAY_SHOP              EGetWay = 1
	EGetWay_GETWAY_BATTLEPASS        EGetWay = 2
	EGetWay_GETWAY_SIGNIN            EGetWay = 3
	EGetWay_GETWAY_OPERATIONACTIVITY EGetWay = 4
	EGetWay_BADGETASKS               EGetWay = 5
	EGetWay_HEROPAGE                 EGetWay = 6
)

// Enum value maps for EGetWay.
var (
	EGetWay_name = map[int32]string{
		0: "Null",
		1: "GETWAY_SHOP",
		2: "GETWAY_BATTLEPASS",
		3: "GETWAY_SIGNIN",
		4: "GETWAY_OPERATIONACTIVITY",
		5: "BADGETASKS",
		6: "HEROPAGE",
	}
	EGetWay_value = map[string]int32{
		"Null":                     0,
		"GETWAY_SHOP":              1,
		"GETWAY_BATTLEPASS":        2,
		"GETWAY_SIGNIN":            3,
		"GETWAY_OPERATIONACTIVITY": 4,
		"BADGETASKS":               5,
		"HEROPAGE":                 6,
	}
)

func (x EGetWay) Enum() *EGetWay {
	p := new(EGetWay)
	*p = x
	return p
}

func (x EGetWay) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGetWay) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[3].Descriptor()
}

func (EGetWay) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[3]
}

func (x EGetWay) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EGetWay.Descriptor instead.
func (EGetWay) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{3}
}

// COM_GAME_BIG_TYPE_THEME 历史战绩大主题 leegoxia
type COM_GAME_BIG_TYPE_THEME int32

const (
	COM_GAME_BIG_TYPE_THEME_COM_GAME_BIG_TYPE_THEME_NULL         COM_GAME_BIG_TYPE_THEME = 0
	COM_GAME_BIG_TYPE_THEME_COM_GAME_BIG_TYPE_THEME_KINGS_WARSIM COM_GAME_BIG_TYPE_THEME = 1
	COM_GAME_BIG_TYPE_THEME_COM_GAME_BIG_TYPE_THEME_CHESS        COM_GAME_BIG_TYPE_THEME = 2
	COM_GAME_BIG_TYPE_THEME_COM_GAME_BIG_TYPE_THEME_TUTORIAL     COM_GAME_BIG_TYPE_THEME = 5
	COM_GAME_BIG_TYPE_THEME_COM_GAME_BIG_TYPE_THEME_CUSTOM       COM_GAME_BIG_TYPE_THEME = 6
	COM_GAME_BIG_TYPE_THEME_COM_GAME_BIG_TYPE_THEME_RECRUIT      COM_GAME_BIG_TYPE_THEME = 7
)

// Enum value maps for COM_GAME_BIG_TYPE_THEME.
var (
	COM_GAME_BIG_TYPE_THEME_name = map[int32]string{
		0: "COM_GAME_BIG_TYPE_THEME_NULL",
		1: "COM_GAME_BIG_TYPE_THEME_KINGS_WARSIM",
		2: "COM_GAME_BIG_TYPE_THEME_CHESS",
		5: "COM_GAME_BIG_TYPE_THEME_TUTORIAL",
		6: "COM_GAME_BIG_TYPE_THEME_CUSTOM",
		7: "COM_GAME_BIG_TYPE_THEME_RECRUIT",
	}
	COM_GAME_BIG_TYPE_THEME_value = map[string]int32{
		"COM_GAME_BIG_TYPE_THEME_NULL":         0,
		"COM_GAME_BIG_TYPE_THEME_KINGS_WARSIM": 1,
		"COM_GAME_BIG_TYPE_THEME_CHESS":        2,
		"COM_GAME_BIG_TYPE_THEME_TUTORIAL":     5,
		"COM_GAME_BIG_TYPE_THEME_CUSTOM":       6,
		"COM_GAME_BIG_TYPE_THEME_RECRUIT":      7,
	}
)

func (x COM_GAME_BIG_TYPE_THEME) Enum() *COM_GAME_BIG_TYPE_THEME {
	p := new(COM_GAME_BIG_TYPE_THEME)
	*p = x
	return p
}

func (x COM_GAME_BIG_TYPE_THEME) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (COM_GAME_BIG_TYPE_THEME) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[4].Descriptor()
}

func (COM_GAME_BIG_TYPE_THEME) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[4]
}

func (x COM_GAME_BIG_TYPE_THEME) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use COM_GAME_BIG_TYPE_THEME.Descriptor instead.
func (COM_GAME_BIG_TYPE_THEME) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{4}
}

type COM_GAME_TYPE int32

const (
	COM_GAME_TYPE_COM_GAME_TYPE_NULL COM_GAME_TYPE = 0
	// 1-99是排位模式
	COM_GAME_TYPE_COM_GAME_TYPE_RANK_BEGIN        COM_GAME_TYPE = 1
	COM_GAME_TYPE_COM_GAME_TYPE_RANK_CHESS        COM_GAME_TYPE = 2
	COM_GAME_TYPE_COM_GAME_TYPE_RANK_KINGS_WARSIM COM_GAME_TYPE = 3
	COM_GAME_TYPE_COM_GAME_TYPE_RANK_LAST         COM_GAME_TYPE = 4
	COM_GAME_TYPE_COM_GAME_TYPE_RANK_END          COM_GAME_TYPE = 98 // 排位模式结束
	// 100-200是娱乐模式
	COM_GAME_TYPE_COM_GAME_TYPE_CASUAL_BEGIN            COM_GAME_TYPE = 99 // 休闲模式开始（casual=休闲）
	COM_GAME_TYPE_COM_GAME_TYPE_MATCH_CHESS             COM_GAME_TYPE = 100
	COM_GAME_TYPE_COM_GAME_TYPE_MATCH_KINGS_WARSIM      COM_GAME_TYPE = 101
	COM_GAME_TYPE_COM_GAME_TYPE_TUTORIAL                COM_GAME_TYPE = 102
	COM_GAME_TYPE_COM_GAME_TYPE_LAST_SEASON_MATCH_CHESS COM_GAME_TYPE = 103
	COM_GAME_TYPE_COM_GAME_TYPE_AREA_ROOM_CHESS         COM_GAME_TYPE = 104
	COM_GAME_TYPE_COM_GAME_TYPE_AREA_ROOM_KINGS_WARSIM  COM_GAME_TYPE = 105
	COM_GAME_TYPE_COM_GAME_TYPE_MATCH_CAMP              COM_GAME_TYPE = 106
	COM_GAME_TYPE_COM_GAME_TYPE_MATCH_HUNDREDWAR        COM_GAME_TYPE = 107
	COM_GAME_TYPE_COM_GAME_TYPE_RECRUIT                 COM_GAME_TYPE = 108
	COM_GAME_TYPE_COM_GAME_TYPE_CASUAL_LAST             COM_GAME_TYPE = 109
	COM_GAME_TYPE_COM_GAME_TYPE_CASUAL_END              COM_GAME_TYPE = 198 // 休闲模式结束（casual=休闲）
)

// Enum value maps for COM_GAME_TYPE.
var (
	COM_GAME_TYPE_name = map[int32]string{
		0:   "COM_GAME_TYPE_NULL",
		1:   "COM_GAME_TYPE_RANK_BEGIN",
		2:   "COM_GAME_TYPE_RANK_CHESS",
		3:   "COM_GAME_TYPE_RANK_KINGS_WARSIM",
		4:   "COM_GAME_TYPE_RANK_LAST",
		98:  "COM_GAME_TYPE_RANK_END",
		99:  "COM_GAME_TYPE_CASUAL_BEGIN",
		100: "COM_GAME_TYPE_MATCH_CHESS",
		101: "COM_GAME_TYPE_MATCH_KINGS_WARSIM",
		102: "COM_GAME_TYPE_TUTORIAL",
		103: "COM_GAME_TYPE_LAST_SEASON_MATCH_CHESS",
		104: "COM_GAME_TYPE_AREA_ROOM_CHESS",
		105: "COM_GAME_TYPE_AREA_ROOM_KINGS_WARSIM",
		106: "COM_GAME_TYPE_MATCH_CAMP",
		107: "COM_GAME_TYPE_MATCH_HUNDREDWAR",
		108: "COM_GAME_TYPE_RECRUIT",
		109: "COM_GAME_TYPE_CASUAL_LAST",
		198: "COM_GAME_TYPE_CASUAL_END",
	}
	COM_GAME_TYPE_value = map[string]int32{
		"COM_GAME_TYPE_NULL":                    0,
		"COM_GAME_TYPE_RANK_BEGIN":              1,
		"COM_GAME_TYPE_RANK_CHESS":              2,
		"COM_GAME_TYPE_RANK_KINGS_WARSIM":       3,
		"COM_GAME_TYPE_RANK_LAST":               4,
		"COM_GAME_TYPE_RANK_END":                98,
		"COM_GAME_TYPE_CASUAL_BEGIN":            99,
		"COM_GAME_TYPE_MATCH_CHESS":             100,
		"COM_GAME_TYPE_MATCH_KINGS_WARSIM":      101,
		"COM_GAME_TYPE_TUTORIAL":                102,
		"COM_GAME_TYPE_LAST_SEASON_MATCH_CHESS": 103,
		"COM_GAME_TYPE_AREA_ROOM_CHESS":         104,
		"COM_GAME_TYPE_AREA_ROOM_KINGS_WARSIM":  105,
		"COM_GAME_TYPE_MATCH_CAMP":              106,
		"COM_GAME_TYPE_MATCH_HUNDREDWAR":        107,
		"COM_GAME_TYPE_RECRUIT":                 108,
		"COM_GAME_TYPE_CASUAL_LAST":             109,
		"COM_GAME_TYPE_CASUAL_END":              198,
	}
)

func (x COM_GAME_TYPE) Enum() *COM_GAME_TYPE {
	p := new(COM_GAME_TYPE)
	*p = x
	return p
}

func (x COM_GAME_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (COM_GAME_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[5].Descriptor()
}

func (COM_GAME_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[5]
}

func (x COM_GAME_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use COM_GAME_TYPE.Descriptor instead.
func (COM_GAME_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{5}
}

type COM_GAMETYPE_GROUP int32

const (
	COM_GAMETYPE_GROUP_GAMETYPE_GROUP_NULL     COM_GAMETYPE_GROUP = 0
	COM_GAMETYPE_GROUP_GAMETYPE_GROUP_CLASSIC  COM_GAMETYPE_GROUP = 1
	COM_GAMETYPE_GROUP_GAMETYPE_GROUP_STANDARD COM_GAMETYPE_GROUP = 2
	COM_GAMETYPE_GROUP_GAMETYPE_GROUP_MAX      COM_GAMETYPE_GROUP = 3
)

// Enum value maps for COM_GAMETYPE_GROUP.
var (
	COM_GAMETYPE_GROUP_name = map[int32]string{
		0: "GAMETYPE_GROUP_NULL",
		1: "GAMETYPE_GROUP_CLASSIC",
		2: "GAMETYPE_GROUP_STANDARD",
		3: "GAMETYPE_GROUP_MAX",
	}
	COM_GAMETYPE_GROUP_value = map[string]int32{
		"GAMETYPE_GROUP_NULL":     0,
		"GAMETYPE_GROUP_CLASSIC":  1,
		"GAMETYPE_GROUP_STANDARD": 2,
		"GAMETYPE_GROUP_MAX":      3,
	}
)

func (x COM_GAMETYPE_GROUP) Enum() *COM_GAMETYPE_GROUP {
	p := new(COM_GAMETYPE_GROUP)
	*p = x
	return p
}

func (x COM_GAMETYPE_GROUP) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (COM_GAMETYPE_GROUP) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[6].Descriptor()
}

func (COM_GAMETYPE_GROUP) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[6]
}

func (x COM_GAMETYPE_GROUP) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use COM_GAMETYPE_GROUP.Descriptor instead.
func (COM_GAMETYPE_GROUP) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{6}
}

type EPvpRankType int32

const (
	EPvpRankType_PVP_RANK_TYPE_NONE     EPvpRankType = 0
	EPvpRankType_PVP_RANK_TYPE_BRONZE   EPvpRankType = 1
	EPvpRankType_PVP_RANK_TYPE_SILVER   EPvpRankType = 2
	EPvpRankType_PVP_RANK_TYPE_GOLD     EPvpRankType = 3
	EPvpRankType_PVP_RANK_TYPE_PLATINUM EPvpRankType = 4
	EPvpRankType_PVP_RANK_TYPE_DIAMOND  EPvpRankType = 5
	EPvpRankType_PVP_RANK_TYPE_STARYAO  EPvpRankType = 6
	EPvpRankType_PVP_RANK_TYPE_KING     EPvpRankType = 7
	EPvpRankType_PVP_RANK_TYPE_MAX      EPvpRankType = 8
)

// Enum value maps for EPvpRankType.
var (
	EPvpRankType_name = map[int32]string{
		0: "PVP_RANK_TYPE_NONE",
		1: "PVP_RANK_TYPE_BRONZE",
		2: "PVP_RANK_TYPE_SILVER",
		3: "PVP_RANK_TYPE_GOLD",
		4: "PVP_RANK_TYPE_PLATINUM",
		5: "PVP_RANK_TYPE_DIAMOND",
		6: "PVP_RANK_TYPE_STARYAO",
		7: "PVP_RANK_TYPE_KING",
		8: "PVP_RANK_TYPE_MAX",
	}
	EPvpRankType_value = map[string]int32{
		"PVP_RANK_TYPE_NONE":     0,
		"PVP_RANK_TYPE_BRONZE":   1,
		"PVP_RANK_TYPE_SILVER":   2,
		"PVP_RANK_TYPE_GOLD":     3,
		"PVP_RANK_TYPE_PLATINUM": 4,
		"PVP_RANK_TYPE_DIAMOND":  5,
		"PVP_RANK_TYPE_STARYAO":  6,
		"PVP_RANK_TYPE_KING":     7,
		"PVP_RANK_TYPE_MAX":      8,
	}
)

func (x EPvpRankType) Enum() *EPvpRankType {
	p := new(EPvpRankType)
	*p = x
	return p
}

func (x EPvpRankType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPvpRankType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[7].Descriptor()
}

func (EPvpRankType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[7]
}

func (x EPvpRankType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPvpRankType.Descriptor instead.
func (EPvpRankType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{7}
}

type RES_SYSTEM_UI_TYPE int32

const (
	RES_SYSTEM_UI_TYPE_RES_SYSTEM_UI_TYPE_NONE           RES_SYSTEM_UI_TYPE = 0
	RES_SYSTEM_UI_TYPE_RES_SYSTEM_UI_TYPE_QISHOU         RES_SYSTEM_UI_TYPE = 1
	RES_SYSTEM_UI_TYPE_RES_SYSTEM_UI_TYPE_GERENXINXI     RES_SYSTEM_UI_TYPE = 2
	RES_SYSTEM_UI_TYPE_RES_SYSTEM_UI_TYPE_SHOP           RES_SYSTEM_UI_TYPE = 3
	RES_SYSTEM_UI_TYPE_RES_SYSTEM_UI_TYPE_DATING         RES_SYSTEM_UI_TYPE = 4
	RES_SYSTEM_UI_TYPE_RES_SYSTEM_UI_TYPE_MatchWaiting   RES_SYSTEM_UI_TYPE = 5
	RES_SYSTEM_UI_TYPE_RES_SYSTEM_UI_TYPE_Loading        RES_SYSTEM_UI_TYPE = 6
	RES_SYSTEM_UI_TYPE_RES_SYSTEM_UI_TYPE_ChooseLord     RES_SYSTEM_UI_TYPE = 7
	RES_SYSTEM_UI_TYPE_RES_SYSTEM_UI_TYPE_Data           RES_SYSTEM_UI_TYPE = 8
	RES_SYSTEM_UI_TYPE_RES_SYSTEM_UI_TYPE_LORDGET        RES_SYSTEM_UI_TYPE = 9
	RES_SYSTEM_UI_TYPE_RES_SYSTEM_UI_TYPE_HERO_COLLECT   RES_SYSTEM_UI_TYPE = 10
	RES_SYSTEM_UI_TYPE_RES_SYSTEM_UI_TYPE_SetName        RES_SYSTEM_UI_TYPE = 11
	RES_SYSTEM_UI_TYPE_RES_SYSTEM_UI_TYPE_NoviceGuidance RES_SYSTEM_UI_TYPE = 12
	RES_SYSTEM_UI_TYPE_RES_SYSTEM_UI_TYPE_Personal       RES_SYSTEM_UI_TYPE = 13
	RES_SYSTEM_UI_TYPE_RES_SYSTEM_UI_TYPE_CareerLord     RES_SYSTEM_UI_TYPE = 14
	RES_SYSTEM_UI_TYPE_RES_SYSTEM_UI_TYPE_GameplayCenter RES_SYSTEM_UI_TYPE = 15
	RES_SYSTEM_UI_TYPE_RES_SYSTEM_UI_TYPE_BattlePass     RES_SYSTEM_UI_TYPE = 16
)

// Enum value maps for RES_SYSTEM_UI_TYPE.
var (
	RES_SYSTEM_UI_TYPE_name = map[int32]string{
		0:  "RES_SYSTEM_UI_TYPE_NONE",
		1:  "RES_SYSTEM_UI_TYPE_QISHOU",
		2:  "RES_SYSTEM_UI_TYPE_GERENXINXI",
		3:  "RES_SYSTEM_UI_TYPE_SHOP",
		4:  "RES_SYSTEM_UI_TYPE_DATING",
		5:  "RES_SYSTEM_UI_TYPE_MatchWaiting",
		6:  "RES_SYSTEM_UI_TYPE_Loading",
		7:  "RES_SYSTEM_UI_TYPE_ChooseLord",
		8:  "RES_SYSTEM_UI_TYPE_Data",
		9:  "RES_SYSTEM_UI_TYPE_LORDGET",
		10: "RES_SYSTEM_UI_TYPE_HERO_COLLECT",
		11: "RES_SYSTEM_UI_TYPE_SetName",
		12: "RES_SYSTEM_UI_TYPE_NoviceGuidance",
		13: "RES_SYSTEM_UI_TYPE_Personal",
		14: "RES_SYSTEM_UI_TYPE_CareerLord",
		15: "RES_SYSTEM_UI_TYPE_GameplayCenter",
		16: "RES_SYSTEM_UI_TYPE_BattlePass",
	}
	RES_SYSTEM_UI_TYPE_value = map[string]int32{
		"RES_SYSTEM_UI_TYPE_NONE":           0,
		"RES_SYSTEM_UI_TYPE_QISHOU":         1,
		"RES_SYSTEM_UI_TYPE_GERENXINXI":     2,
		"RES_SYSTEM_UI_TYPE_SHOP":           3,
		"RES_SYSTEM_UI_TYPE_DATING":         4,
		"RES_SYSTEM_UI_TYPE_MatchWaiting":   5,
		"RES_SYSTEM_UI_TYPE_Loading":        6,
		"RES_SYSTEM_UI_TYPE_ChooseLord":     7,
		"RES_SYSTEM_UI_TYPE_Data":           8,
		"RES_SYSTEM_UI_TYPE_LORDGET":        9,
		"RES_SYSTEM_UI_TYPE_HERO_COLLECT":   10,
		"RES_SYSTEM_UI_TYPE_SetName":        11,
		"RES_SYSTEM_UI_TYPE_NoviceGuidance": 12,
		"RES_SYSTEM_UI_TYPE_Personal":       13,
		"RES_SYSTEM_UI_TYPE_CareerLord":     14,
		"RES_SYSTEM_UI_TYPE_GameplayCenter": 15,
		"RES_SYSTEM_UI_TYPE_BattlePass":     16,
	}
)

func (x RES_SYSTEM_UI_TYPE) Enum() *RES_SYSTEM_UI_TYPE {
	p := new(RES_SYSTEM_UI_TYPE)
	*p = x
	return p
}

func (x RES_SYSTEM_UI_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_SYSTEM_UI_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[8].Descriptor()
}

func (RES_SYSTEM_UI_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[8]
}

func (x RES_SYSTEM_UI_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_SYSTEM_UI_TYPE.Descriptor instead.
func (RES_SYSTEM_UI_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{8}
}

type EPvpRankSettlementType int32

const (
	EPvpRankSettlementType_PVP_RANK_SETTLEMENT_TYPE_NONE EPvpRankSettlementType = 0
	EPvpRankSettlementType_PVP_RANK_TYPE_BRONZE1         EPvpRankSettlementType = 1
	EPvpRankSettlementType_PVP_RANK_TYPE_BRONZE2         EPvpRankSettlementType = 2
	EPvpRankSettlementType_PVP_RANK_TYPE_BRONZE3         EPvpRankSettlementType = 3
	EPvpRankSettlementType_PVP_RANK_TYPE_BRONZE4         EPvpRankSettlementType = 4
	EPvpRankSettlementType_PVP_RANK_TYPE_BRONZE5         EPvpRankSettlementType = 5
	EPvpRankSettlementType_PVP_RANK_TYPE_SILVER1         EPvpRankSettlementType = 6
	EPvpRankSettlementType_PVP_RANK_TYPE_SILVER2         EPvpRankSettlementType = 7
	EPvpRankSettlementType_PVP_RANK_TYPE_SILVER3         EPvpRankSettlementType = 8
	EPvpRankSettlementType_PVP_RANK_TYPE_SILVER4         EPvpRankSettlementType = 9
	EPvpRankSettlementType_PVP_RANK_TYPE_SILVER5         EPvpRankSettlementType = 10
	EPvpRankSettlementType_PVP_RANK_TYPE_GOLD1           EPvpRankSettlementType = 11
	EPvpRankSettlementType_PVP_RANK_TYPE_GOLD2           EPvpRankSettlementType = 12
	EPvpRankSettlementType_PVP_RANK_TYPE_GOLD3           EPvpRankSettlementType = 13
	EPvpRankSettlementType_PVP_RANK_TYPE_GOLD4           EPvpRankSettlementType = 14
	EPvpRankSettlementType_PVP_RANK_TYPE_GOLD5           EPvpRankSettlementType = 15
	EPvpRankSettlementType_PVP_RANK_TYPE_PLATINUM1       EPvpRankSettlementType = 16
	EPvpRankSettlementType_PVP_RANK_TYPE_PLATINUM2       EPvpRankSettlementType = 17
	EPvpRankSettlementType_PVP_RANK_TYPE_PLATINUM3       EPvpRankSettlementType = 18
	EPvpRankSettlementType_PVP_RANK_TYPE_PLATINUM4       EPvpRankSettlementType = 19
	EPvpRankSettlementType_PVP_RANK_TYPE_PLATINUM5       EPvpRankSettlementType = 20
	EPvpRankSettlementType_PVP_RANK_TYPE_DIAMOND1        EPvpRankSettlementType = 21
	EPvpRankSettlementType_PVP_RANK_TYPE_DIAMOND2        EPvpRankSettlementType = 22
	EPvpRankSettlementType_PVP_RANK_TYPE_DIAMOND3        EPvpRankSettlementType = 23
	EPvpRankSettlementType_PVP_RANK_TYPE_DIAMOND4        EPvpRankSettlementType = 24
	EPvpRankSettlementType_PVP_RANK_TYPE_DIAMOND5        EPvpRankSettlementType = 25
	EPvpRankSettlementType_PVP_RANK_TYPE_STARYAO1        EPvpRankSettlementType = 26
	EPvpRankSettlementType_PVP_RANK_TYPE_STARYAO2        EPvpRankSettlementType = 27
	EPvpRankSettlementType_PVP_RANK_TYPE_STARYAO3        EPvpRankSettlementType = 28
	EPvpRankSettlementType_PVP_RANK_TYPE_STARYAO4        EPvpRankSettlementType = 29
	EPvpRankSettlementType_PVP_RANK_TYPE_STARYAO5        EPvpRankSettlementType = 30
	EPvpRankSettlementType_PVP_RANK_TYPE_MostKing        EPvpRankSettlementType = 31
	EPvpRankSettlementType_PVP_RANK_TYPE_HonorMostKing   EPvpRankSettlementType = 32
)

// Enum value maps for EPvpRankSettlementType.
var (
	EPvpRankSettlementType_name = map[int32]string{
		0:  "PVP_RANK_SETTLEMENT_TYPE_NONE",
		1:  "PVP_RANK_TYPE_BRONZE1",
		2:  "PVP_RANK_TYPE_BRONZE2",
		3:  "PVP_RANK_TYPE_BRONZE3",
		4:  "PVP_RANK_TYPE_BRONZE4",
		5:  "PVP_RANK_TYPE_BRONZE5",
		6:  "PVP_RANK_TYPE_SILVER1",
		7:  "PVP_RANK_TYPE_SILVER2",
		8:  "PVP_RANK_TYPE_SILVER3",
		9:  "PVP_RANK_TYPE_SILVER4",
		10: "PVP_RANK_TYPE_SILVER5",
		11: "PVP_RANK_TYPE_GOLD1",
		12: "PVP_RANK_TYPE_GOLD2",
		13: "PVP_RANK_TYPE_GOLD3",
		14: "PVP_RANK_TYPE_GOLD4",
		15: "PVP_RANK_TYPE_GOLD5",
		16: "PVP_RANK_TYPE_PLATINUM1",
		17: "PVP_RANK_TYPE_PLATINUM2",
		18: "PVP_RANK_TYPE_PLATINUM3",
		19: "PVP_RANK_TYPE_PLATINUM4",
		20: "PVP_RANK_TYPE_PLATINUM5",
		21: "PVP_RANK_TYPE_DIAMOND1",
		22: "PVP_RANK_TYPE_DIAMOND2",
		23: "PVP_RANK_TYPE_DIAMOND3",
		24: "PVP_RANK_TYPE_DIAMOND4",
		25: "PVP_RANK_TYPE_DIAMOND5",
		26: "PVP_RANK_TYPE_STARYAO1",
		27: "PVP_RANK_TYPE_STARYAO2",
		28: "PVP_RANK_TYPE_STARYAO3",
		29: "PVP_RANK_TYPE_STARYAO4",
		30: "PVP_RANK_TYPE_STARYAO5",
		31: "PVP_RANK_TYPE_MostKing",
		32: "PVP_RANK_TYPE_HonorMostKing",
	}
	EPvpRankSettlementType_value = map[string]int32{
		"PVP_RANK_SETTLEMENT_TYPE_NONE": 0,
		"PVP_RANK_TYPE_BRONZE1":         1,
		"PVP_RANK_TYPE_BRONZE2":         2,
		"PVP_RANK_TYPE_BRONZE3":         3,
		"PVP_RANK_TYPE_BRONZE4":         4,
		"PVP_RANK_TYPE_BRONZE5":         5,
		"PVP_RANK_TYPE_SILVER1":         6,
		"PVP_RANK_TYPE_SILVER2":         7,
		"PVP_RANK_TYPE_SILVER3":         8,
		"PVP_RANK_TYPE_SILVER4":         9,
		"PVP_RANK_TYPE_SILVER5":         10,
		"PVP_RANK_TYPE_GOLD1":           11,
		"PVP_RANK_TYPE_GOLD2":           12,
		"PVP_RANK_TYPE_GOLD3":           13,
		"PVP_RANK_TYPE_GOLD4":           14,
		"PVP_RANK_TYPE_GOLD5":           15,
		"PVP_RANK_TYPE_PLATINUM1":       16,
		"PVP_RANK_TYPE_PLATINUM2":       17,
		"PVP_RANK_TYPE_PLATINUM3":       18,
		"PVP_RANK_TYPE_PLATINUM4":       19,
		"PVP_RANK_TYPE_PLATINUM5":       20,
		"PVP_RANK_TYPE_DIAMOND1":        21,
		"PVP_RANK_TYPE_DIAMOND2":        22,
		"PVP_RANK_TYPE_DIAMOND3":        23,
		"PVP_RANK_TYPE_DIAMOND4":        24,
		"PVP_RANK_TYPE_DIAMOND5":        25,
		"PVP_RANK_TYPE_STARYAO1":        26,
		"PVP_RANK_TYPE_STARYAO2":        27,
		"PVP_RANK_TYPE_STARYAO3":        28,
		"PVP_RANK_TYPE_STARYAO4":        29,
		"PVP_RANK_TYPE_STARYAO5":        30,
		"PVP_RANK_TYPE_MostKing":        31,
		"PVP_RANK_TYPE_HonorMostKing":   32,
	}
)

func (x EPvpRankSettlementType) Enum() *EPvpRankSettlementType {
	p := new(EPvpRankSettlementType)
	*p = x
	return p
}

func (x EPvpRankSettlementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPvpRankSettlementType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[9].Descriptor()
}

func (EPvpRankSettlementType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[9]
}

func (x EPvpRankSettlementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPvpRankSettlementType.Descriptor instead.
func (EPvpRankSettlementType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{9}
}

type ESeasonRankAwardType int32

const (
	ESeasonRankAwardType_RES_SEASON_RANK_AWARD_TYPE_NONE ESeasonRankAwardType = 0
	ESeasonRankAwardType_RES_SEASON_RANK_AWARD_WEEK      ESeasonRankAwardType = 1
	ESeasonRankAwardType_RES_SEASON_RANK_AWARD_WEEK_PLUS ESeasonRankAwardType = 2
	ESeasonRankAwardType_RES_SEASON_RANK_AWARD_SETTLE    ESeasonRankAwardType = 3
)

// Enum value maps for ESeasonRankAwardType.
var (
	ESeasonRankAwardType_name = map[int32]string{
		0: "RES_SEASON_RANK_AWARD_TYPE_NONE",
		1: "RES_SEASON_RANK_AWARD_WEEK",
		2: "RES_SEASON_RANK_AWARD_WEEK_PLUS",
		3: "RES_SEASON_RANK_AWARD_SETTLE",
	}
	ESeasonRankAwardType_value = map[string]int32{
		"RES_SEASON_RANK_AWARD_TYPE_NONE": 0,
		"RES_SEASON_RANK_AWARD_WEEK":      1,
		"RES_SEASON_RANK_AWARD_WEEK_PLUS": 2,
		"RES_SEASON_RANK_AWARD_SETTLE":    3,
	}
)

func (x ESeasonRankAwardType) Enum() *ESeasonRankAwardType {
	p := new(ESeasonRankAwardType)
	*p = x
	return p
}

func (x ESeasonRankAwardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESeasonRankAwardType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[10].Descriptor()
}

func (ESeasonRankAwardType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[10]
}

func (x ESeasonRankAwardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ESeasonRankAwardType.Descriptor instead.
func (ESeasonRankAwardType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{10}
}

type EEloSegmentProtectType int32

const (
	EEloSegmentProtectType_RES_ELO_SEGMENT_PROTECT_NONE         EEloSegmentProtectType = 0
	EEloSegmentProtectType_RES_ELO_SEGMENT_PROTECT_SEGMENT      EEloSegmentProtectType = 1
	EEloSegmentProtectType_RES_ELO_SEGMENT_PROTECT_NO_DEDUCTION EEloSegmentProtectType = 2
)

// Enum value maps for EEloSegmentProtectType.
var (
	EEloSegmentProtectType_name = map[int32]string{
		0: "RES_ELO_SEGMENT_PROTECT_NONE",
		1: "RES_ELO_SEGMENT_PROTECT_SEGMENT",
		2: "RES_ELO_SEGMENT_PROTECT_NO_DEDUCTION",
	}
	EEloSegmentProtectType_value = map[string]int32{
		"RES_ELO_SEGMENT_PROTECT_NONE":         0,
		"RES_ELO_SEGMENT_PROTECT_SEGMENT":      1,
		"RES_ELO_SEGMENT_PROTECT_NO_DEDUCTION": 2,
	}
)

func (x EEloSegmentProtectType) Enum() *EEloSegmentProtectType {
	p := new(EEloSegmentProtectType)
	*p = x
	return p
}

func (x EEloSegmentProtectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EEloSegmentProtectType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[11].Descriptor()
}

func (EEloSegmentProtectType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[11]
}

func (x EEloSegmentProtectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EEloSegmentProtectType.Descriptor instead.
func (EEloSegmentProtectType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{11}
}

type ConstSeasonType int32

const (
	ConstSeasonType_ConstSeasonType_NONE ConstSeasonType = 0
	ConstSeasonType_ConstSeasonType_INIT ConstSeasonType = 1
)

// Enum value maps for ConstSeasonType.
var (
	ConstSeasonType_name = map[int32]string{
		0: "ConstSeasonType_NONE",
		1: "ConstSeasonType_INIT",
	}
	ConstSeasonType_value = map[string]int32{
		"ConstSeasonType_NONE": 0,
		"ConstSeasonType_INIT": 1,
	}
)

func (x ConstSeasonType) Enum() *ConstSeasonType {
	p := new(ConstSeasonType)
	*p = x
	return p
}

func (x ConstSeasonType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConstSeasonType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[12].Descriptor()
}

func (ConstSeasonType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[12]
}

func (x ConstSeasonType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConstSeasonType.Descriptor instead.
func (ConstSeasonType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{12}
}

type COM_GAMEITEM_TYPE int32

const (
	COM_GAMEITEM_TYPE_COM_GAMEITEM_TYPE__reserved__ COM_GAMEITEM_TYPE = 0
	COM_GAMEITEM_TYPE_COM_GAMEITEM_DROP             COM_GAMEITEM_TYPE = 1
	COM_GAMEITEM_TYPE_COM_GAMEITEM_MONEY            COM_GAMEITEM_TYPE = 2
	COM_GAMEITEM_TYPE_COM_GAMEITEM_PROP             COM_GAMEITEM_TYPE = 3
	COM_GAMEITEM_TYPE_COM_GAMEITEM_HEADIMG          COM_GAMEITEM_TYPE = 4
	COM_GAMEITEM_TYPE_COM_GAMEITEM_HEAD             COM_GAMEITEM_TYPE = 5
	COM_GAMEITEM_TYPE_COM_GAMEITEM_TOKENEXP         COM_GAMEITEM_TYPE = 6
	COM_GAMEITEM_TYPE_COM_GAMEITEM_LORDSKIN         COM_GAMEITEM_TYPE = 7
	COM_GAMEITEM_TYPE_COM_GAMEITEM_ACHIEVEEXP       COM_GAMEITEM_TYPE = 9
	COM_GAMEITEM_TYPE_COM_GAMEITEM_LORD             COM_GAMEITEM_TYPE = 10
	COM_GAMEITEM_TYPE_COM_GAMEITEM_ACNTEXP          COM_GAMEITEM_TYPE = 11
	COM_GAMEITEM_TYPE_COM_GAMEITEM_CHESSBOARD       COM_GAMEITEM_TYPE = 12
	COM_GAMEITEM_TYPE_COM_GAMEITEM_COUPONS          COM_GAMEITEM_TYPE = 14
	COM_GAMEITEM_TYPE_COM_GAMEITEM_EMOJI            COM_GAMEITEM_TYPE = 15
	COM_GAMEITEM_TYPE_COM_GAMEITEM_SPECIALEFT       COM_GAMEITEM_TYPE = 16
	COM_GAMEITEM_TYPE_COM_GAMEITEM_CHESSBOARDPART   COM_GAMEITEM_TYPE = 17
	COM_GAMEITEM_TYPE_COM_GAMEITEM_CHESSDECORATE    COM_GAMEITEM_TYPE = 18
	COM_GAMEITEM_TYPE_COM_GAMEITEM_LORDPROFICIENCY  COM_GAMEITEM_TYPE = 19
	COM_GAMEITEM_TYPE_COM_GAMEITEM_RECRUITSCORE     COM_GAMEITEM_TYPE = 20
)

// Enum value maps for COM_GAMEITEM_TYPE.
var (
	COM_GAMEITEM_TYPE_name = map[int32]string{
		0:  "COM_GAMEITEM_TYPE__reserved__",
		1:  "COM_GAMEITEM_DROP",
		2:  "COM_GAMEITEM_MONEY",
		3:  "COM_GAMEITEM_PROP",
		4:  "COM_GAMEITEM_HEADIMG",
		5:  "COM_GAMEITEM_HEAD",
		6:  "COM_GAMEITEM_TOKENEXP",
		7:  "COM_GAMEITEM_LORDSKIN",
		9:  "COM_GAMEITEM_ACHIEVEEXP",
		10: "COM_GAMEITEM_LORD",
		11: "COM_GAMEITEM_ACNTEXP",
		12: "COM_GAMEITEM_CHESSBOARD",
		14: "COM_GAMEITEM_COUPONS",
		15: "COM_GAMEITEM_EMOJI",
		16: "COM_GAMEITEM_SPECIALEFT",
		17: "COM_GAMEITEM_CHESSBOARDPART",
		18: "COM_GAMEITEM_CHESSDECORATE",
		19: "COM_GAMEITEM_LORDPROFICIENCY",
		20: "COM_GAMEITEM_RECRUITSCORE",
	}
	COM_GAMEITEM_TYPE_value = map[string]int32{
		"COM_GAMEITEM_TYPE__reserved__": 0,
		"COM_GAMEITEM_DROP":             1,
		"COM_GAMEITEM_MONEY":            2,
		"COM_GAMEITEM_PROP":             3,
		"COM_GAMEITEM_HEADIMG":          4,
		"COM_GAMEITEM_HEAD":             5,
		"COM_GAMEITEM_TOKENEXP":         6,
		"COM_GAMEITEM_LORDSKIN":         7,
		"COM_GAMEITEM_ACHIEVEEXP":       9,
		"COM_GAMEITEM_LORD":             10,
		"COM_GAMEITEM_ACNTEXP":          11,
		"COM_GAMEITEM_CHESSBOARD":       12,
		"COM_GAMEITEM_COUPONS":          14,
		"COM_GAMEITEM_EMOJI":            15,
		"COM_GAMEITEM_SPECIALEFT":       16,
		"COM_GAMEITEM_CHESSBOARDPART":   17,
		"COM_GAMEITEM_CHESSDECORATE":    18,
		"COM_GAMEITEM_LORDPROFICIENCY":  19,
		"COM_GAMEITEM_RECRUITSCORE":     20,
	}
)

func (x COM_GAMEITEM_TYPE) Enum() *COM_GAMEITEM_TYPE {
	p := new(COM_GAMEITEM_TYPE)
	*p = x
	return p
}

func (x COM_GAMEITEM_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (COM_GAMEITEM_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[13].Descriptor()
}

func (COM_GAMEITEM_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[13]
}

func (x COM_GAMEITEM_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use COM_GAMEITEM_TYPE.Descriptor instead.
func (COM_GAMEITEM_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{13}
}

type COM_GAMEMONEY_SUBTYPE int32

const (
	COM_GAMEMONEY_SUBTYPE_COM_GAMEMONEY_TYPE_INVALID           COM_GAMEMONEY_SUBTYPE = 0
	COM_GAMEMONEY_SUBTYPE_COM_GAMEMONEY_TYPE_DIAMOND           COM_GAMEMONEY_SUBTYPE = 1
	COM_GAMEMONEY_SUBTYPE_COM_GAMEMONEY_TYPE_COUNTERFEIT       COM_GAMEMONEY_SUBTYPE = 2
	COM_GAMEMONEY_SUBTYPE_COM_GAMEMONEY_TYPE_SEASONCOIN        COM_GAMEMONEY_SUBTYPE = 3
	COM_GAMEMONEY_SUBTYPE_COM_GAMEMONEY_TYPE_LORDFRAG          COM_GAMEMONEY_SUBTYPE = 4
	COM_GAMEMONEY_SUBTYPE_COM_GAMEMONEY_TYPE_SKINCOIN          COM_GAMEMONEY_SUBTYPE = 5
	COM_GAMEMONEY_SUBTYPE_COM_GAMEMONEY_TYPE_TOKENEXP          COM_GAMEMONEY_SUBTYPE = 7
	COM_GAMEMONEY_SUBTYPE_COM_GAMEMONEY_TYPE_EXCHANGECOIN      COM_GAMEMONEY_SUBTYPE = 8 // 兑换币
	COM_GAMEMONEY_SUBTYPE_COM_GAMEMONEY_TYPE_CHESSDECORATEFRAG COM_GAMEMONEY_SUBTYPE = 9 // 棋子配饰碎片
	COM_GAMEMONEY_SUBTYPE_COM_GAMEMONEY_TYPE_MAX               COM_GAMEMONEY_SUBTYPE = 10
)

// Enum value maps for COM_GAMEMONEY_SUBTYPE.
var (
	COM_GAMEMONEY_SUBTYPE_name = map[int32]string{
		0:  "COM_GAMEMONEY_TYPE_INVALID",
		1:  "COM_GAMEMONEY_TYPE_DIAMOND",
		2:  "COM_GAMEMONEY_TYPE_COUNTERFEIT",
		3:  "COM_GAMEMONEY_TYPE_SEASONCOIN",
		4:  "COM_GAMEMONEY_TYPE_LORDFRAG",
		5:  "COM_GAMEMONEY_TYPE_SKINCOIN",
		7:  "COM_GAMEMONEY_TYPE_TOKENEXP",
		8:  "COM_GAMEMONEY_TYPE_EXCHANGECOIN",
		9:  "COM_GAMEMONEY_TYPE_CHESSDECORATEFRAG",
		10: "COM_GAMEMONEY_TYPE_MAX",
	}
	COM_GAMEMONEY_SUBTYPE_value = map[string]int32{
		"COM_GAMEMONEY_TYPE_INVALID":           0,
		"COM_GAMEMONEY_TYPE_DIAMOND":           1,
		"COM_GAMEMONEY_TYPE_COUNTERFEIT":       2,
		"COM_GAMEMONEY_TYPE_SEASONCOIN":        3,
		"COM_GAMEMONEY_TYPE_LORDFRAG":          4,
		"COM_GAMEMONEY_TYPE_SKINCOIN":          5,
		"COM_GAMEMONEY_TYPE_TOKENEXP":          7,
		"COM_GAMEMONEY_TYPE_EXCHANGECOIN":      8,
		"COM_GAMEMONEY_TYPE_CHESSDECORATEFRAG": 9,
		"COM_GAMEMONEY_TYPE_MAX":               10,
	}
)

func (x COM_GAMEMONEY_SUBTYPE) Enum() *COM_GAMEMONEY_SUBTYPE {
	p := new(COM_GAMEMONEY_SUBTYPE)
	*p = x
	return p
}

func (x COM_GAMEMONEY_SUBTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (COM_GAMEMONEY_SUBTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[14].Descriptor()
}

func (COM_GAMEMONEY_SUBTYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[14]
}

func (x COM_GAMEMONEY_SUBTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use COM_GAMEMONEY_SUBTYPE.Descriptor instead.
func (COM_GAMEMONEY_SUBTYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{14}
}

type COM_CHESSDECORATE_SUBTYPE int32

const (
	COM_CHESSDECORATE_SUBTYPE_COM_CHESSDECORATE_TYPE_INVALID          COM_CHESSDECORATE_SUBTYPE = 0
	COM_CHESSDECORATE_SUBTYPE_COM_CHESSDECORATE_TYPE_FRAME            COM_CHESSDECORATE_SUBTYPE = 1
	COM_CHESSDECORATE_SUBTYPE_COM_CHESSDECORATE_TYPE_VOICE            COM_CHESSDECORATE_SUBTYPE = 2
	COM_CHESSDECORATE_SUBTYPE_COM_CHESSDECORATE_TYPE_CARDEFFECT       COM_CHESSDECORATE_SUBTYPE = 3
	COM_CHESSDECORATE_SUBTYPE_COM_CHESSDECORATE_TYPE_CARDANIMATION    COM_CHESSDECORATE_SUBTYPE = 4
	COM_CHESSDECORATE_SUBTYPE_COM_CHESSDECORATE_TYPE_KILLEFFECT       COM_CHESSDECORATE_SUBTYPE = 5
	COM_CHESSDECORATE_SUBTYPE_COM_CHESSDECORATE_TYPE_LENGENDARYEFFECT COM_CHESSDECORATE_SUBTYPE = 6
)

// Enum value maps for COM_CHESSDECORATE_SUBTYPE.
var (
	COM_CHESSDECORATE_SUBTYPE_name = map[int32]string{
		0: "COM_CHESSDECORATE_TYPE_INVALID",
		1: "COM_CHESSDECORATE_TYPE_FRAME",
		2: "COM_CHESSDECORATE_TYPE_VOICE",
		3: "COM_CHESSDECORATE_TYPE_CARDEFFECT",
		4: "COM_CHESSDECORATE_TYPE_CARDANIMATION",
		5: "COM_CHESSDECORATE_TYPE_KILLEFFECT",
		6: "COM_CHESSDECORATE_TYPE_LENGENDARYEFFECT",
	}
	COM_CHESSDECORATE_SUBTYPE_value = map[string]int32{
		"COM_CHESSDECORATE_TYPE_INVALID":          0,
		"COM_CHESSDECORATE_TYPE_FRAME":            1,
		"COM_CHESSDECORATE_TYPE_VOICE":            2,
		"COM_CHESSDECORATE_TYPE_CARDEFFECT":       3,
		"COM_CHESSDECORATE_TYPE_CARDANIMATION":    4,
		"COM_CHESSDECORATE_TYPE_KILLEFFECT":       5,
		"COM_CHESSDECORATE_TYPE_LENGENDARYEFFECT": 6,
	}
)

func (x COM_CHESSDECORATE_SUBTYPE) Enum() *COM_CHESSDECORATE_SUBTYPE {
	p := new(COM_CHESSDECORATE_SUBTYPE)
	*p = x
	return p
}

func (x COM_CHESSDECORATE_SUBTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (COM_CHESSDECORATE_SUBTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[15].Descriptor()
}

func (COM_CHESSDECORATE_SUBTYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[15]
}

func (x COM_CHESSDECORATE_SUBTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use COM_CHESSDECORATE_SUBTYPE.Descriptor instead.
func (COM_CHESSDECORATE_SUBTYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{15}
}

type Project8InBattleHeroAdditionNumType int32

const (
	// 定义这个枚举应该保持连续
	Project8InBattleHeroAdditionNumType_Project8InBattleHeroAdditionNumType_Default     Project8InBattleHeroAdditionNumType = 0
	Project8InBattleHeroAdditionNumType_Project8InBattleHeroAdditionNumType_LordSkill   Project8InBattleHeroAdditionNumType = 1
	Project8InBattleHeroAdditionNumType_Project8InBattleHeroAdditionNumType_Equip       Project8InBattleHeroAdditionNumType = 2
	Project8InBattleHeroAdditionNumType_Project8InBattleHeroAdditionNumType_Practice    Project8InBattleHeroAdditionNumType = 3
	Project8InBattleHeroAdditionNumType_Project8InBattleHeroAdditionNumType_BalanceTest Project8InBattleHeroAdditionNumType = 4
)

// Enum value maps for Project8InBattleHeroAdditionNumType.
var (
	Project8InBattleHeroAdditionNumType_name = map[int32]string{
		0: "Project8InBattleHeroAdditionNumType_Default",
		1: "Project8InBattleHeroAdditionNumType_LordSkill",
		2: "Project8InBattleHeroAdditionNumType_Equip",
		3: "Project8InBattleHeroAdditionNumType_Practice",
		4: "Project8InBattleHeroAdditionNumType_BalanceTest",
	}
	Project8InBattleHeroAdditionNumType_value = map[string]int32{
		"Project8InBattleHeroAdditionNumType_Default":     0,
		"Project8InBattleHeroAdditionNumType_LordSkill":   1,
		"Project8InBattleHeroAdditionNumType_Equip":       2,
		"Project8InBattleHeroAdditionNumType_Practice":    3,
		"Project8InBattleHeroAdditionNumType_BalanceTest": 4,
	}
)

func (x Project8InBattleHeroAdditionNumType) Enum() *Project8InBattleHeroAdditionNumType {
	p := new(Project8InBattleHeroAdditionNumType)
	*p = x
	return p
}

func (x Project8InBattleHeroAdditionNumType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Project8InBattleHeroAdditionNumType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[16].Descriptor()
}

func (Project8InBattleHeroAdditionNumType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[16]
}

func (x Project8InBattleHeroAdditionNumType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Project8InBattleHeroAdditionNumType.Descriptor instead.
func (Project8InBattleHeroAdditionNumType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{16}
}

type EMailID int32

const (
	EMailID_EMailID__reserved__          EMailID = 0
	EMailID_ETestMailID                  EMailID = 1
	EMailID_ERemainingAwardMailID        EMailID = 2
	EMailID_EPropExpireAutoSaleMailID    EMailID = 3
	EMailID_EPropExpireSeasonAwardMailID EMailID = 4
	EMailID_EExpireTokenAwardMailID      EMailID = 6
	EMailID_EExpireChessTaskAwardMailID  EMailID = 7
	EMailID_EInSeasonRankPrizeBronze     EMailID = 8
	EMailID_EInSeasonRankPrizeSilver     EMailID = 9
	EMailID_EInSeasonRankPrizeGold       EMailID = 10
	EMailID_EInSeasonRankPrizePlatinum   EMailID = 11
	EMailID_EInSeasonRankPrizeDiamond    EMailID = 12
	EMailID_EInSeasonRankPrizeStaryao    EMailID = 13
	EMailID_EInSeasonRankPrizeKing       EMailID = 14
	EMailID_EWXGameCenterLogin           EMailID = 15
	EMailID_EQQGameCenterLogin           EMailID = 16
)

// Enum value maps for EMailID.
var (
	EMailID_name = map[int32]string{
		0:  "EMailID__reserved__",
		1:  "ETestMailID",
		2:  "ERemainingAwardMailID",
		3:  "EPropExpireAutoSaleMailID",
		4:  "EPropExpireSeasonAwardMailID",
		6:  "EExpireTokenAwardMailID",
		7:  "EExpireChessTaskAwardMailID",
		8:  "EInSeasonRankPrizeBronze",
		9:  "EInSeasonRankPrizeSilver",
		10: "EInSeasonRankPrizeGold",
		11: "EInSeasonRankPrizePlatinum",
		12: "EInSeasonRankPrizeDiamond",
		13: "EInSeasonRankPrizeStaryao",
		14: "EInSeasonRankPrizeKing",
		15: "EWXGameCenterLogin",
		16: "EQQGameCenterLogin",
	}
	EMailID_value = map[string]int32{
		"EMailID__reserved__":          0,
		"ETestMailID":                  1,
		"ERemainingAwardMailID":        2,
		"EPropExpireAutoSaleMailID":    3,
		"EPropExpireSeasonAwardMailID": 4,
		"EExpireTokenAwardMailID":      6,
		"EExpireChessTaskAwardMailID":  7,
		"EInSeasonRankPrizeBronze":     8,
		"EInSeasonRankPrizeSilver":     9,
		"EInSeasonRankPrizeGold":       10,
		"EInSeasonRankPrizePlatinum":   11,
		"EInSeasonRankPrizeDiamond":    12,
		"EInSeasonRankPrizeStaryao":    13,
		"EInSeasonRankPrizeKing":       14,
		"EWXGameCenterLogin":           15,
		"EQQGameCenterLogin":           16,
	}
)

func (x EMailID) Enum() *EMailID {
	p := new(EMailID)
	*p = x
	return p
}

func (x EMailID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMailID) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[17].Descriptor()
}

func (EMailID) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[17]
}

func (x EMailID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMailID.Descriptor instead.
func (EMailID) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{17}
}

type ERhythmRating int32

const (
	ERhythmRating_RHYTHM_MISS     ERhythmRating = 0
	ERhythmRating_RHYTHM_COOL     ERhythmRating = 1
	ERhythmRating_RHYTHM_GOOD     ERhythmRating = 2
	ERhythmRating_RHYTHM_NICE     ERhythmRating = 3
	ERhythmRating_RHYTHM_PERFECT  ERhythmRating = 4
	ERhythmRating_RHYTHM_SPERFECT ERhythmRating = 5
	ERhythmRating_RHYTHM_OPCOUNT  ERhythmRating = 6 // ERhythmRating类型总数
)

// Enum value maps for ERhythmRating.
var (
	ERhythmRating_name = map[int32]string{
		0: "RHYTHM_MISS",
		1: "RHYTHM_COOL",
		2: "RHYTHM_GOOD",
		3: "RHYTHM_NICE",
		4: "RHYTHM_PERFECT",
		5: "RHYTHM_SPERFECT",
		6: "RHYTHM_OPCOUNT",
	}
	ERhythmRating_value = map[string]int32{
		"RHYTHM_MISS":     0,
		"RHYTHM_COOL":     1,
		"RHYTHM_GOOD":     2,
		"RHYTHM_NICE":     3,
		"RHYTHM_PERFECT":  4,
		"RHYTHM_SPERFECT": 5,
		"RHYTHM_OPCOUNT":  6,
	}
)

func (x ERhythmRating) Enum() *ERhythmRating {
	p := new(ERhythmRating)
	*p = x
	return p
}

func (x ERhythmRating) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERhythmRating) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[18].Descriptor()
}

func (ERhythmRating) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[18]
}

func (x ERhythmRating) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ERhythmRating.Descriptor instead.
func (ERhythmRating) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{18}
}

type ERhythmPVPMode int32

const (
	ERhythmPVPMode_RHYTHM_PVPMODE_RANK ERhythmPVPMode = 0
	ERhythmPVPMode_RHYTHM_PVPMODE_FUN  ERhythmPVPMode = 1
)

// Enum value maps for ERhythmPVPMode.
var (
	ERhythmPVPMode_name = map[int32]string{
		0: "RHYTHM_PVPMODE_RANK",
		1: "RHYTHM_PVPMODE_FUN",
	}
	ERhythmPVPMode_value = map[string]int32{
		"RHYTHM_PVPMODE_RANK": 0,
		"RHYTHM_PVPMODE_FUN":  1,
	}
)

func (x ERhythmPVPMode) Enum() *ERhythmPVPMode {
	p := new(ERhythmPVPMode)
	*p = x
	return p
}

func (x ERhythmPVPMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERhythmPVPMode) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[19].Descriptor()
}

func (ERhythmPVPMode) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[19]
}

func (x ERhythmPVPMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ERhythmPVPMode.Descriptor instead.
func (ERhythmPVPMode) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{19}
}

type EGender int32

const (
	EGender_EGender__reserved__ EGender = 0
	// EGender_Male = 1[(resdata.keyword_alias) = "男性"];
	// EGender_Female = 2[(resdata.keyword_alias) = "女性"];
	EGender_EGender_Male   EGender = 1 // 这里的keyword_alias局外没有在用，先注释掉，否则和局内冲突
	EGender_EGender_Female EGender = 2
)

// Enum value maps for EGender.
var (
	EGender_name = map[int32]string{
		0: "EGender__reserved__",
		1: "EGender_Male",
		2: "EGender_Female",
	}
	EGender_value = map[string]int32{
		"EGender__reserved__": 0,
		"EGender_Male":        1,
		"EGender_Female":      2,
	}
)

func (x EGender) Enum() *EGender {
	p := new(EGender)
	*p = x
	return p
}

func (x EGender) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGender) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[20].Descriptor()
}

func (EGender) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[20]
}

func (x EGender) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EGender.Descriptor instead.
func (EGender) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{20}
}

type EGameRankType int32

const (
	EGameRankType_RANKTYPE_TOP  EGameRankType = 0
	EGameRankType_RANKTYPE_END  EGameRankType = 1
	EGameRankType_RANKTYPE_IN   EGameRankType = 2
	EGameRankType_RANKTYPE_LAST EGameRankType = 3
)

// Enum value maps for EGameRankType.
var (
	EGameRankType_name = map[int32]string{
		0: "RANKTYPE_TOP",
		1: "RANKTYPE_END",
		2: "RANKTYPE_IN",
		3: "RANKTYPE_LAST",
	}
	EGameRankType_value = map[string]int32{
		"RANKTYPE_TOP":  0,
		"RANKTYPE_END":  1,
		"RANKTYPE_IN":   2,
		"RANKTYPE_LAST": 3,
	}
)

func (x EGameRankType) Enum() *EGameRankType {
	p := new(EGameRankType)
	*p = x
	return p
}

func (x EGameRankType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGameRankType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[21].Descriptor()
}

func (EGameRankType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[21]
}

func (x EGameRankType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EGameRankType.Descriptor instead.
func (EGameRankType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{21}
}

type ECondType int32

const (
	ECondType_COND_TYPE_STATEFUL_BEGIN                          ECondType = 0
	ECondType_COND_TYPE_STATEFUL_COSTMONEY                      ECondType = 2
	ECondType_COND_TYPE_STATEFUL_FINISHRANKCHESS                ECondType = 3
	ECondType_COND_TYPE_STATEFUL_RANKCHESSTOPN                  ECondType = 4
	ECondType_COND_TYPE_STATEFUL_SEASONGAMETYPETOPN             ECondType = 5
	ECondType_COND_TYPE_STATEFUL_RANKCHESSRANK                  ECondType = 6
	ECondType_COND_TYPE_STATEFUL_ACNTLOGIN                      ECondType = 8
	ECondType_COND_TYPE_STATEFUL_ADDAWARD                       ECondType = 9
	ECondType_COND_TYPE_STATEFUL_ADDFRIEND                      ECondType = 10
	ECondType_COND_TYPE_STATEFUL_RANKWINROUND                   ECondType = 11
	ECondType_COND_TYPE_STATEFUL_RANKUPGRADECNT                 ECondType = 13
	ECondType_COND_TYPE_STATEFUL_RANKSETTLELEVEL                ECondType = 14
	ECondType_COND_TYPE_STATEFUL_REFRESHSHOP                    ECondType = 15
	ECondType_COND_TYPE_STATEFUL_LORDDAMAGE                     ECondType = 16
	ECondType_COND_TYPE_STATEFUL_RANKSKILLOUTCOIN               ECondType = 17
	ECondType_COND_TYPE_STATEFUL_RANKSKILLINCOIN                ECondType = 18
	ECondType_COND_TYPE_STATEFUL_TOKENEQUIPGAIN                 ECondType = 19
	ECondType_COND_TYPE_STATEFUL_TOKENEQUIPGAINSUM              ECondType = 20
	ECondType_COND_TYPE_STATEFUL_FINALEQUIPGAIN                 ECondType = 21
	ECondType_COND_TYPE_STATEFUL_ROUNDREFRESHSHOPMAX            ECondType = 23
	ECondType_COND_TYPE_STATEFUL_RANKTOTALCONSUMECOIN           ECondType = 24
	ECondType_COND_TYPE_STATEFUL_RANKUPGRADELVLCOIN             ECondType = 25
	ECondType_COND_TYPE_STATEFUL_RANKREFRESHCOIN                ECondType = 26
	ECondType_COND_TYPE_STATEFUL_RANKHIGHESTCOIN                ECondType = 27
	ECondType_COND_TYPE_STATEFUL_RANKKILLENEMYCOIN              ECondType = 28
	ECondType_COND_TYPE_STATEFUL_RANKINTERESTCOIN               ECondType = 29
	ECondType_COND_TYPE_STATEFUL_RANKSTREAKWINCOIN              ECondType = 30
	ECondType_COND_TYPE_STATEFUL_RANKSTREAKLOSECOIN             ECondType = 31
	ECondType_COND_TYPE_STATEFUL_RANKLORDAWARDCOIN              ECondType = 32
	ECondType_COND_TYPE_STATEFUL_RANKSETTLEFETTERCNT            ECondType = 33
	ECondType_COND_TYPE_STATEFUL_RANKSETTLEFETTERLVL            ECondType = 34
	ECondType_COND_TYPE_STATEFUL_RANKSETTLEFETTERQUALITY        ECondType = 35
	ECondType_COND_TYPE_STATEFUL_RANKROUNDFETTERCNT             ECondType = 36
	ECondType_COND_TYPE_STATEFUL_RANKROUNDFETTERLVL             ECondType = 37
	ECondType_COND_TYPE_STATEFUL_RANKROUNDFETTERQUALITY         ECondType = 38
	ECondType_COND_TYPE_STATEFUL_RANKBATTLEFETTERCNT            ECondType = 39
	ECondType_COND_TYPE_STATEFUL_RANKBATTLEFETTERLVL            ECondType = 40
	ECondType_COND_TYPE_STATEFUL_RANKBATTLEFETTERQUALITY        ECondType = 41
	ECondType_COND_TYPE_STATEFUL_REFRESHSHOPSUM                 ECondType = 42
	ECondType_COND_TYPE_STATEFUL_LORDDAMAGESUM                  ECondType = 43
	ECondType_COND_TYPE_STATEFUL_RANKTOTALCONSUMECOINSUM        ECondType = 45
	ECondType_COND_TYPE_STATEFUL_RANKREFRESHCOINSUM             ECondType = 46
	ECondType_COND_TYPE_STATEFUL_RANKWINROUNDSUM                ECondType = 47
	ECondType_COND_TYPE_STATEFUL_RANKTOTALROUNDSUM              ECondType = 48
	ECondType_COND_TYPE_STATEFUL_RANKUPGRADECNTSUM              ECondType = 49
	ECondType_COND_TYPE_STATEFUL_FINALEQUIPGAINSUM              ECondType = 50
	ECondType_COND_TYPE_STATEFUL_RANKUPGRADELVLCOINSUM          ECondType = 51
	ECondType_COND_TYPE_STATEFUL_RANKSTREAKWINCOINSUM           ECondType = 52
	ECondType_COND_TYPE_STATEFUL_RANKSTREAKLOSECOINSUM          ECondType = 53
	ECondType_COND_TYPE_STATEFUL_RANKLORDAWARDCOINSUM           ECondType = 54
	ECondType_COND_TYPE_STATEFUL_RANKLORDSKILLCNT               ECondType = 55
	ECondType_COND_TYPE_STATEFUL_RANKPLAYERLASTDAMAGE           ECondType = 56
	ECondType_COND_TYPE_STATEFUL_RANKAUCTIONCOIN                ECondType = 57
	ECondType_COND_TYPE_STATEFUL_RANKSINGLEAUCTIONCOIN          ECondType = 58
	ECondType_COND_TYPE_STATEFUL_RANKCONTINUOUSWINROUND         ECondType = 59
	ECondType_COND_TYPE_STATEFUL_RANKCONTINUOUSLOSEROUND        ECondType = 60
	ECondType_COND_TYPE_STATEFUL_RANKAUCTIONCOUNT               ECondType = 61
	ECondType_COND_TYPE_STATEFUL_RANKAUCTIONRANDOMCOUNT         ECondType = 62
	ECondType_COND_TYPE_STATEFUL_RANKAUCTIONJOINCOUNT           ECondType = 63
	ECondType_COND_TYPE_STATEFUL_RANKAUCTIONSUCCCOUNT           ECondType = 64
	ECondType_COND_TYPE_STATEFUL_RANKCHGCARDS                   ECondType = 65
	ECondType_COND_TYPE_STATEFUL_RANKCHGCARDSBETTERHERO         ECondType = 66
	ECondType_COND_TYPE_STATEFUL_RANKALIVEROUNDCOUNT            ECondType = 67
	ECondType_COND_TYPE_STATEFUL_CHESS_TOTALHURT                ECondType = 68
	ECondType_COND_TYPE_STATEFUL_CHESS_TOTALHURTED              ECondType = 69
	ECondType_COND_TYPE_STATEFUL_CHESS_TOTALRECOVER             ECondType = 70
	ECondType_COND_TYPE_STATEFUL_SEAONRANKTOPN                  ECondType = 71
	ECondType_COND_TYPE_STATEFUL_CHESS_3STARCOUNT               ECondType = 72
	ECondType_COND_TYPE_STATEFUL_CHESS_DEFEATCOUNT              ECondType = 73
	ECondType_COND_TYPE_STATEFUL_CHESS_MAXHURT                  ECondType = 74
	ECondType_COND_TYPE_STATEFUL_CHESS_MAXHURTED                ECondType = 75
	ECondType_COND_TYPE_STATEFUL_CHESS_MAXRECOVER               ECondType = 76
	ECondType_COND_TYPE_STATEFUL_CHESS_BATTLECOUNT              ECondType = 77
	ECondType_COND_TYPE_STATEFUL_BATTLE_FETTERRANK              ECondType = 78
	ECondType_COND_TYPE_STATEFUL_BATTLE_QUALITYRANK             ECondType = 79
	ECondType_COND_TYPE_STATEFUL_BATTLE_STARRANK                ECondType = 80
	ECondType_COND_TYPE_STATEFUL_BATTLE_FETTERCNT               ECondType = 81
	ECondType_COND_TYPE_STATEFUL_BATTLE_MULTICHESS_WARCNT       ECondType = 82
	ECondType_COND_TYPE_STATEFUL_BATTLE_MULTICHESS_RANK         ECondType = 83
	ECondType_COND_TYPE_STATEFUL_BEATPLAYERCOUNT                ECondType = 85
	ECondType_COND_TYPE_STATEFUL_RANKHEROEOSSAMESTAR            ECondType = 86
	ECondType_COND_TYPE_STATEFUL_LORDPROFICIENCYGET             ECondType = 87
	ECondType_COND_TYPE_STATEFUL_QUALITYSTARHEROGET             ECondType = 88
	ECondType_COND_TYPE_STATEFUL_CHESS_ROUNDDAMAGE              ECondType = 89
	ECondType_COND_TYPE_STATEFUL_CHESS_SETTLEQUALITY            ECondType = 90
	ECondType_COND_TYPE_STATEFUL_CHESSGROUPONSTAGE              ECondType = 91
	ECondType_COND_TYPE_STATEFUL_ROUNDBUYEXP                    ECondType = 92
	ECondType_COND_TYPE_STATEFUL_ROUNDCOINGET                   ECondType = 93
	ECondType_COND_TYPE_STATEFUL_CHESSGROUPDAMAGE               ECondType = 94
	ECondType_COND_TYPE_STATEFUL_CHESSGROUPHURTED               ECondType = 95
	ECondType_COND_TYPE_STATEFUL_SPECIFIEDLORDSEXIST            ECondType = 96
	ECondType_COND_TYPE_STATEFUL_CHESSHURTED_PERROUND           ECondType = 97
	ECondType_COND_TYPE_STATEFUL_CHESSCONTROL_PERROUND          ECondType = 98
	ECondType_COND_TYPE_STATEFUL_CHESSHEAL_PERROUND             ECondType = 99
	ECondType_COND_TYPE_STATEFUL_RANKTOTALGETCOIN               ECondType = 100
	ECondType_COND_TYPE_STATEFUL_TOPNINROUNDCNT                 ECondType = 103
	ECondType_COND_TYPE_STATEFUL_RANKDIFFERENTLORD              ECondType = 104
	ECondType_COND_TYPE_STATEFUL_RANKTOPNUSELORD                ECondType = 105
	ECondType_COND_TYPE_STATEFUL_STARXHEROSETTLETOPN            ECondType = 106
	ECondType_COND_TYPE_STATEFUL_QUALITYHEROSETTLETOPN          ECondType = 107
	ECondType_COND_TYPE_STATEFUL_QUALITYSTARHEROSETTLE          ECondType = 108
	ECondType_COND_TYPE_STATEFUL_CHESSMAXHP                     ECondType = 109
	ECondType_COND_TYPE_STATEFUL_CHESSMAXAD                     ECondType = 110
	ECondType_COND_TYPE_STATEFUL_CHESSMAXAP                     ECondType = 111
	ECondType_COND_TYPE_STATEFUL_CHESSMAXCRITHIT                ECondType = 112
	ECondType_COND_TYPE_STATEFUL_CHESSGROUPHEALING              ECondType = 113
	ECondType_COND_TYPE_STATEFUL_CHESSGROUPBEATCOUNT            ECondType = 114
	ECondType_COND_TYPE_STATEFUL_ROUNDPLAYERDAMAGE              ECondType = 115
	ECondType_COND_TYPE_STATEFUL_PLAYERDAMAGECOUNT              ECondType = 116
	ECondType_COND_TYPE_STATEFUL_SPECIFIEDLORDDAMAGE            ECondType = 117
	ECondType_COND_TYPE_STATEFUL_CHESSCONTROLENEMYTIME          ECondType = 118
	ECondType_COND_TYPE_STATEFUL_USEPROPTOSPECIFIEDLORD         ECondType = 119
	ECondType_COND_TYPE_STATEFUL_RANKUSEPROPCOUNT               ECondType = 121
	ECondType_COND_TYPE_STATEFUL_RANKUSEQUICKMSGCOUNTSUM        ECondType = 122
	ECondType_COND_TYPE_STATEFUL_CHESSBEATCOUNT                 ECondType = 123
	ECondType_COND_TYPE_STATEFUL_CHESSROUNDBEATCOUNT            ECondType = 124
	ECondType_COND_TYPE_STATEFUL_SPECIFIEDLORDBATTLE            ECondType = 125
	ECondType_COND_TYPE_STATEFUL_QUICKMSGCOUNT                  ECondType = 126
	ECondType_COND_TYPE_STATEFUL_RANKTALENTQUALITY              ECondType = 127
	ECondType_COND_TYPE_STATEFUL_RANKTALENTID                   ECondType = 128
	ECondType_COND_TYPE_STATEFUL_LORDTALENTSETTLETOPN           ECondType = 129
	ECondType_COND_TYPE_STATEFUL_LORDTALENTSUM                  ECondType = 130
	ECondType_COND_TYPE_STATEFUL_TALENTQUALITYSUM               ECondType = 131
	ECondType_COND_TYPE_STATEFUL_BATTLEWITHGUILDMEM             ECondType = 132
	ECondType_COND_TYPE_STATEFUL_MAXGUILDACTIVEVALUE            ECondType = 133
	ECondType_COND_TYPE_STATEFUL_HEROEQUIPWEAR_INROUND          ECondType = 134
	ECondType_COND_TYPE_STATEFUL_EXCHANGEHERO_INROUND           ECondType = 135
	ECondType_COND_TYPE_STATEFUL_END                            ECondType = 136
	ECondType_COND_TYPE_STATELESS_BEGIN                         ECondType = 2000
	ECondType_COND_TYPE_STATELESS_TOTALBATTLECNT                ECondType = 2001
	ECondType_COND_TYPE_STATELESS_DAILYLOGIN                    ECondType = 2002
	ECondType_COND_TYPE_STATELESS_FIRSTWINERCNT                 ECondType = 2003
	ECondType_COND_TYPE_STATELESS_ACNTLEVEL                     ECondType = 2004
	ECondType_COND_TYPE_STATELESS_ACNTLOGIN                     ECondType = 2006
	ECondType_COND_TYPE_STATELESS_FRIENDHAVE                    ECondType = 2007
	ECondType_COND_TYPE_STATELESS_LORDHAVE                      ECondType = 2008
	ECondType_COND_TYPE_STATELESS_LORDSKINHAVE                  ECondType = 2009
	ECondType_COND_TYPE_STATELESS_SEASONCOMPOSE3STAR            ECondType = 2010
	ECondType_COND_TYPE_STATELESS_SEASONAVGRANK                 ECondType = 2011
	ECondType_COND_TYPE_STATELESS_SEASONWINROUND                ECondType = 2012
	ECondType_COND_TYPE_STATELESS_SEASONCHESSBUY                ECondType = 2013
	ECondType_COND_TYPE_STATELESS_SEASONLORDBATTLECNT           ECondType = 2014
	ECondType_COND_TYPE_STATELESS_SEASONLORDBATTLETOP4          ECondType = 2015
	ECondType_COND_TYPE_STATELESS_SEASONLORDBATTLETOP1          ECondType = 2016
	ECondType_COND_TYPE_STATELESS_PROPHAVE                      ECondType = 2017
	ECondType_COND_TYPE_STATELESS_COSTMONEY                     ECondType = 2018
	ECondType_COND_TYPE_STATELESS_FINISHRANKCHESS               ECondType = 2019
	ECondType_COND_TYPE_STATELESS_RANKCHESSTOPN                 ECondType = 2020
	ECondType_COND_TYPE_STATELESS_SEASONGAMETYPETOPN            ECondType = 2021
	ECondType_COND_TYPE_STATELESS_RANKCHESSRANK                 ECondType = 2022
	ECondType_COND_TYPE_STATELESS_ADDAWARD                      ECondType = 2023
	ECondType_COND_TYPE_STATELESS_REGISTERDAY                   ECondType = 2024
	ECondType_COND_TYPE_STATELESS_TOKENAWARDLEVEL               ECondType = 2025
	ECondType_COND_TYPE_STATELESS_TOKENLEVEL                    ECondType = 2026
	ECondType_COND_TYPE_STATELESS_CHESS_BATTLECOUNT             ECondType = 2027
	ECondType_COND_TYPE_STATELESS_CHESS_3STARCOUNT              ECondType = 2028
	ECondType_COND_TYPE_STATELESS_CHESS_DEFEATCOUNT             ECondType = 2029
	ECondType_COND_TYPE_STATELESS_CHESS_MAXHURT                 ECondType = 2030
	ECondType_COND_TYPE_STATELESS_CHESS_MAXHURTED               ECondType = 2031
	ECondType_COND_TYPE_STATELESS_CHESS_MAXRECOVER              ECondType = 2032
	ECondType_COND_TYPE_STATELESS_BEATPLAYERCOUNT               ECondType = 2035
	ECondType_COND_TYPE_STATELESS_SPECIFIEDLORDSGET             ECondType = 2036
	ECondType_COND_TYPE_STATELESS_NEWBIE_ABILITY                ECondType = 2037
	ECondType_COND_TYPE_STATELESS_NEWBIE_FINISHGUIDE            ECondType = 2038
	ECondType_COND_TYPE_STATELESS_NEWBIE_STEPTIME               ECondType = 2039
	ECondType_COND_TYPE_STATELESS_HISTORY_PVPRANKNO             ECondType = 2040
	ECondType_COND_TYPE_STATELESS_HISTORY_WINRATE               ECondType = 2041
	ECondType_COND_TYPE_STATELESS_HISTORY_INTEREST              ECondType = 2042
	ECondType_COND_TYPE_STATELESS_HISTORY_STARHEROCNT           ECondType = 2043
	ECondType_COND_TYPE_STATELESS_HISTORY_BATTLEPOSCHG          ECondType = 2044
	ECondType_COND_TYPE_STATELESS_HISTORY_LEVELUP               ECondType = 2045
	ECondType_COND_TYPE_STATELESS_HISTORY_COINBIGGERAFTERLVLUP  ECondType = 2046
	ECondType_COND_TYPE_STATELESS_HISTORY_COINSMALLERAFTERLVLUP ECondType = 2047
	ECondType_COND_TYPE_STATELESS_HISTORY_REFRESHCNT            ECondType = 2048
	ECondType_COND_TYPE_STATELESS_HISTORY_TRIGEXTRABUY          ECondType = 2049
	ECondType_COND_TYPE_STATELESS_HISTORY_CARDBUY               ECondType = 2050
	ECondType_COND_TYPE_STATELESS_HISTORY_CARDLOCK              ECondType = 2051
	ECondType_COND_TYPE_STATELESS_HISTORY_INTRODUCECLICK        ECondType = 2052
	ECondType_COND_TYPE_STATELESS_HISTORY_TAKEOFFEQUIP          ECondType = 2053
	ECondType_COND_TYPE_STATELESS_HISTORY_WATCHPLAYER           ECondType = 2054
	ECondType_COND_TYPE_STATELESS_HISTORY_WATCHFORMATION        ECondType = 2055
	ECondType_COND_TYPE_STATELESS_HISTORY_AWARDCHOOSE           ECondType = 2056
	ECondType_COND_TYPE_STATELESS_HISTORY_WEAREQUIP             ECondType = 2057
	ECondType_COND_TYPE_STATELESS_HISTORY_WEARSYNTEQUIP         ECondType = 2058
	ECondType_COND_TYPE_STATELESS_TOTAL_BATTLECOINGET           ECondType = 2059
	ECondType_COND_TYPE_STATELESS_TOTAL_BATTLEEXPGET            ECondType = 2060
	ECondType_COND_TYPE_STATELESS_TOTAL_BATTLETOKENGET          ECondType = 2061
	ECondType_COND_TYPE_STATELESS_GOODSBUY                      ECondType = 2062
	ECondType_COND_TYPE_STATELESS_QUALITYITEMHAVE               ECondType = 2063
	ECondType_COND_TYPE_STATELESS_TOTAL_HERODAMAGE              ECondType = 2064
	ECondType_COND_TYPE_STATELESS_TOTAL_INTERESTCOIN            ECondType = 2065
	ECondType_COND_TYPE_STATELESS_TOTAL_FINEQUIPCNT             ECondType = 2067
	ECondType_COND_TYPE_STATELESS_RESGISTERCHANNEL              ECondType = 2068
	ECondType_COND_TYPE_STATELESS_WORLDCHATCNT                  ECondType = 2069
	ECondType_COND_TYPE_STATELESS_SEASONMAXRANK                 ECondType = 2070
	ECondType_COND_TYPE_STATELESS_ACHIEVEEXP                    ECondType = 2071
	ECondType_COND_TYPE_STATELESS_TOKENTASKFIN                  ECondType = 2072
	ECondType_COND_TYPE_STATELESS_SCARCEITEMHAVE                ECondType = 2073
	ECondType_COND_TYPE_STATELESS_CHESSBOARDHAVE                ECondType = 2074
	ECondType_COND_TYPE_STATELESS_PROFICIENCYLORDHAVE           ECondType = 2075
	ECondType_COND_TYPE_STATELESS_BATTLEWITHFRIEND              ECondType = 2076
	ECondType_COND_TYPE_STATELESS_USELORDBATTLECNT              ECondType = 2077
	ECondType_COND_TYPE_STATELESS_RANKDIFFPRETWOSETS            ECondType = 2078
	ECondType_COND_TYPE_STATELESS_HERODRAWCOUNTSUM              ECondType = 2079
	ECondType_COND_TYPE_STATELESS_USEACTIVESKILLCOUNT           ECondType = 2080
	ECondType_COND_TYPE_STATELESS_CHESSKILLCOUNTSUM             ECondType = 2081
	ECondType_COND_TYPE_STATELESS_PLAYERDAMAGESUM               ECondType = 2082
	ECondType_COND_TYPE_STATELESS_RANKUSEPROPSUM                ECondType = 2083
	ECondType_COND_TYPE_STATELESS_RANKUSEQUICKMSGSUM            ECondType = 2084
	ECondType_COND_TYPE_STATELESS_POPULATIONATTAINSUM           ECondType = 2085
	ECondType_COND_TYPE_STATELESS_GUILDACTIVEVALUESUM           ECondType = 2086
	ECondType_COND_TYPE_STATELESS_JOINGUILD                     ECondType = 2087
	ECondType_COND_TYPE_STATELESS_HISTORY_BATTLETIME            ECondType = 2088
	ECondType_COND_TYPE_STATELESS_JOINGUILD_DAY                 ECondType = 2089
	ECondType_COND_TYPE_STATELESS_CHESSDECORATENUM              ECondType = 2090
	ECondType_COND_TYPE_STATELESS_CHESSDECORATEFULL             ECondType = 2091
	ECondType_COND_TYPE_STATELESS_LORD_PROFICIENCYLV            ECondType = 2092
	ECondType_COND_TYPE_STATELESS_ADD_SPECIALEFT                ECondType = 2093
	ECondType_COND_TYPE_STATELESS_RECRUITSCORE                  ECondType = 2094
	ECondType_COND_TYPE_STATELESS_RECRUITCLOSE                  ECondType = 2095
	ECondType_COND_TYPE_STATELESS_NEWBIETASKFIN                 ECondType = 2096
	ECondType_COND_TYPE_STATELESS_END                           ECondType = 2097
)

// Enum value maps for ECondType.
var (
	ECondType_name = map[int32]string{
		0:    "COND_TYPE_STATEFUL_BEGIN",
		2:    "COND_TYPE_STATEFUL_COSTMONEY",
		3:    "COND_TYPE_STATEFUL_FINISHRANKCHESS",
		4:    "COND_TYPE_STATEFUL_RANKCHESSTOPN",
		5:    "COND_TYPE_STATEFUL_SEASONGAMETYPETOPN",
		6:    "COND_TYPE_STATEFUL_RANKCHESSRANK",
		8:    "COND_TYPE_STATEFUL_ACNTLOGIN",
		9:    "COND_TYPE_STATEFUL_ADDAWARD",
		10:   "COND_TYPE_STATEFUL_ADDFRIEND",
		11:   "COND_TYPE_STATEFUL_RANKWINROUND",
		13:   "COND_TYPE_STATEFUL_RANKUPGRADECNT",
		14:   "COND_TYPE_STATEFUL_RANKSETTLELEVEL",
		15:   "COND_TYPE_STATEFUL_REFRESHSHOP",
		16:   "COND_TYPE_STATEFUL_LORDDAMAGE",
		17:   "COND_TYPE_STATEFUL_RANKSKILLOUTCOIN",
		18:   "COND_TYPE_STATEFUL_RANKSKILLINCOIN",
		19:   "COND_TYPE_STATEFUL_TOKENEQUIPGAIN",
		20:   "COND_TYPE_STATEFUL_TOKENEQUIPGAINSUM",
		21:   "COND_TYPE_STATEFUL_FINALEQUIPGAIN",
		23:   "COND_TYPE_STATEFUL_ROUNDREFRESHSHOPMAX",
		24:   "COND_TYPE_STATEFUL_RANKTOTALCONSUMECOIN",
		25:   "COND_TYPE_STATEFUL_RANKUPGRADELVLCOIN",
		26:   "COND_TYPE_STATEFUL_RANKREFRESHCOIN",
		27:   "COND_TYPE_STATEFUL_RANKHIGHESTCOIN",
		28:   "COND_TYPE_STATEFUL_RANKKILLENEMYCOIN",
		29:   "COND_TYPE_STATEFUL_RANKINTERESTCOIN",
		30:   "COND_TYPE_STATEFUL_RANKSTREAKWINCOIN",
		31:   "COND_TYPE_STATEFUL_RANKSTREAKLOSECOIN",
		32:   "COND_TYPE_STATEFUL_RANKLORDAWARDCOIN",
		33:   "COND_TYPE_STATEFUL_RANKSETTLEFETTERCNT",
		34:   "COND_TYPE_STATEFUL_RANKSETTLEFETTERLVL",
		35:   "COND_TYPE_STATEFUL_RANKSETTLEFETTERQUALITY",
		36:   "COND_TYPE_STATEFUL_RANKROUNDFETTERCNT",
		37:   "COND_TYPE_STATEFUL_RANKROUNDFETTERLVL",
		38:   "COND_TYPE_STATEFUL_RANKROUNDFETTERQUALITY",
		39:   "COND_TYPE_STATEFUL_RANKBATTLEFETTERCNT",
		40:   "COND_TYPE_STATEFUL_RANKBATTLEFETTERLVL",
		41:   "COND_TYPE_STATEFUL_RANKBATTLEFETTERQUALITY",
		42:   "COND_TYPE_STATEFUL_REFRESHSHOPSUM",
		43:   "COND_TYPE_STATEFUL_LORDDAMAGESUM",
		45:   "COND_TYPE_STATEFUL_RANKTOTALCONSUMECOINSUM",
		46:   "COND_TYPE_STATEFUL_RANKREFRESHCOINSUM",
		47:   "COND_TYPE_STATEFUL_RANKWINROUNDSUM",
		48:   "COND_TYPE_STATEFUL_RANKTOTALROUNDSUM",
		49:   "COND_TYPE_STATEFUL_RANKUPGRADECNTSUM",
		50:   "COND_TYPE_STATEFUL_FINALEQUIPGAINSUM",
		51:   "COND_TYPE_STATEFUL_RANKUPGRADELVLCOINSUM",
		52:   "COND_TYPE_STATEFUL_RANKSTREAKWINCOINSUM",
		53:   "COND_TYPE_STATEFUL_RANKSTREAKLOSECOINSUM",
		54:   "COND_TYPE_STATEFUL_RANKLORDAWARDCOINSUM",
		55:   "COND_TYPE_STATEFUL_RANKLORDSKILLCNT",
		56:   "COND_TYPE_STATEFUL_RANKPLAYERLASTDAMAGE",
		57:   "COND_TYPE_STATEFUL_RANKAUCTIONCOIN",
		58:   "COND_TYPE_STATEFUL_RANKSINGLEAUCTIONCOIN",
		59:   "COND_TYPE_STATEFUL_RANKCONTINUOUSWINROUND",
		60:   "COND_TYPE_STATEFUL_RANKCONTINUOUSLOSEROUND",
		61:   "COND_TYPE_STATEFUL_RANKAUCTIONCOUNT",
		62:   "COND_TYPE_STATEFUL_RANKAUCTIONRANDOMCOUNT",
		63:   "COND_TYPE_STATEFUL_RANKAUCTIONJOINCOUNT",
		64:   "COND_TYPE_STATEFUL_RANKAUCTIONSUCCCOUNT",
		65:   "COND_TYPE_STATEFUL_RANKCHGCARDS",
		66:   "COND_TYPE_STATEFUL_RANKCHGCARDSBETTERHERO",
		67:   "COND_TYPE_STATEFUL_RANKALIVEROUNDCOUNT",
		68:   "COND_TYPE_STATEFUL_CHESS_TOTALHURT",
		69:   "COND_TYPE_STATEFUL_CHESS_TOTALHURTED",
		70:   "COND_TYPE_STATEFUL_CHESS_TOTALRECOVER",
		71:   "COND_TYPE_STATEFUL_SEAONRANKTOPN",
		72:   "COND_TYPE_STATEFUL_CHESS_3STARCOUNT",
		73:   "COND_TYPE_STATEFUL_CHESS_DEFEATCOUNT",
		74:   "COND_TYPE_STATEFUL_CHESS_MAXHURT",
		75:   "COND_TYPE_STATEFUL_CHESS_MAXHURTED",
		76:   "COND_TYPE_STATEFUL_CHESS_MAXRECOVER",
		77:   "COND_TYPE_STATEFUL_CHESS_BATTLECOUNT",
		78:   "COND_TYPE_STATEFUL_BATTLE_FETTERRANK",
		79:   "COND_TYPE_STATEFUL_BATTLE_QUALITYRANK",
		80:   "COND_TYPE_STATEFUL_BATTLE_STARRANK",
		81:   "COND_TYPE_STATEFUL_BATTLE_FETTERCNT",
		82:   "COND_TYPE_STATEFUL_BATTLE_MULTICHESS_WARCNT",
		83:   "COND_TYPE_STATEFUL_BATTLE_MULTICHESS_RANK",
		85:   "COND_TYPE_STATEFUL_BEATPLAYERCOUNT",
		86:   "COND_TYPE_STATEFUL_RANKHEROEOSSAMESTAR",
		87:   "COND_TYPE_STATEFUL_LORDPROFICIENCYGET",
		88:   "COND_TYPE_STATEFUL_QUALITYSTARHEROGET",
		89:   "COND_TYPE_STATEFUL_CHESS_ROUNDDAMAGE",
		90:   "COND_TYPE_STATEFUL_CHESS_SETTLEQUALITY",
		91:   "COND_TYPE_STATEFUL_CHESSGROUPONSTAGE",
		92:   "COND_TYPE_STATEFUL_ROUNDBUYEXP",
		93:   "COND_TYPE_STATEFUL_ROUNDCOINGET",
		94:   "COND_TYPE_STATEFUL_CHESSGROUPDAMAGE",
		95:   "COND_TYPE_STATEFUL_CHESSGROUPHURTED",
		96:   "COND_TYPE_STATEFUL_SPECIFIEDLORDSEXIST",
		97:   "COND_TYPE_STATEFUL_CHESSHURTED_PERROUND",
		98:   "COND_TYPE_STATEFUL_CHESSCONTROL_PERROUND",
		99:   "COND_TYPE_STATEFUL_CHESSHEAL_PERROUND",
		100:  "COND_TYPE_STATEFUL_RANKTOTALGETCOIN",
		103:  "COND_TYPE_STATEFUL_TOPNINROUNDCNT",
		104:  "COND_TYPE_STATEFUL_RANKDIFFERENTLORD",
		105:  "COND_TYPE_STATEFUL_RANKTOPNUSELORD",
		106:  "COND_TYPE_STATEFUL_STARXHEROSETTLETOPN",
		107:  "COND_TYPE_STATEFUL_QUALITYHEROSETTLETOPN",
		108:  "COND_TYPE_STATEFUL_QUALITYSTARHEROSETTLE",
		109:  "COND_TYPE_STATEFUL_CHESSMAXHP",
		110:  "COND_TYPE_STATEFUL_CHESSMAXAD",
		111:  "COND_TYPE_STATEFUL_CHESSMAXAP",
		112:  "COND_TYPE_STATEFUL_CHESSMAXCRITHIT",
		113:  "COND_TYPE_STATEFUL_CHESSGROUPHEALING",
		114:  "COND_TYPE_STATEFUL_CHESSGROUPBEATCOUNT",
		115:  "COND_TYPE_STATEFUL_ROUNDPLAYERDAMAGE",
		116:  "COND_TYPE_STATEFUL_PLAYERDAMAGECOUNT",
		117:  "COND_TYPE_STATEFUL_SPECIFIEDLORDDAMAGE",
		118:  "COND_TYPE_STATEFUL_CHESSCONTROLENEMYTIME",
		119:  "COND_TYPE_STATEFUL_USEPROPTOSPECIFIEDLORD",
		121:  "COND_TYPE_STATEFUL_RANKUSEPROPCOUNT",
		122:  "COND_TYPE_STATEFUL_RANKUSEQUICKMSGCOUNTSUM",
		123:  "COND_TYPE_STATEFUL_CHESSBEATCOUNT",
		124:  "COND_TYPE_STATEFUL_CHESSROUNDBEATCOUNT",
		125:  "COND_TYPE_STATEFUL_SPECIFIEDLORDBATTLE",
		126:  "COND_TYPE_STATEFUL_QUICKMSGCOUNT",
		127:  "COND_TYPE_STATEFUL_RANKTALENTQUALITY",
		128:  "COND_TYPE_STATEFUL_RANKTALENTID",
		129:  "COND_TYPE_STATEFUL_LORDTALENTSETTLETOPN",
		130:  "COND_TYPE_STATEFUL_LORDTALENTSUM",
		131:  "COND_TYPE_STATEFUL_TALENTQUALITYSUM",
		132:  "COND_TYPE_STATEFUL_BATTLEWITHGUILDMEM",
		133:  "COND_TYPE_STATEFUL_MAXGUILDACTIVEVALUE",
		134:  "COND_TYPE_STATEFUL_HEROEQUIPWEAR_INROUND",
		135:  "COND_TYPE_STATEFUL_EXCHANGEHERO_INROUND",
		136:  "COND_TYPE_STATEFUL_END",
		2000: "COND_TYPE_STATELESS_BEGIN",
		2001: "COND_TYPE_STATELESS_TOTALBATTLECNT",
		2002: "COND_TYPE_STATELESS_DAILYLOGIN",
		2003: "COND_TYPE_STATELESS_FIRSTWINERCNT",
		2004: "COND_TYPE_STATELESS_ACNTLEVEL",
		2006: "COND_TYPE_STATELESS_ACNTLOGIN",
		2007: "COND_TYPE_STATELESS_FRIENDHAVE",
		2008: "COND_TYPE_STATELESS_LORDHAVE",
		2009: "COND_TYPE_STATELESS_LORDSKINHAVE",
		2010: "COND_TYPE_STATELESS_SEASONCOMPOSE3STAR",
		2011: "COND_TYPE_STATELESS_SEASONAVGRANK",
		2012: "COND_TYPE_STATELESS_SEASONWINROUND",
		2013: "COND_TYPE_STATELESS_SEASONCHESSBUY",
		2014: "COND_TYPE_STATELESS_SEASONLORDBATTLECNT",
		2015: "COND_TYPE_STATELESS_SEASONLORDBATTLETOP4",
		2016: "COND_TYPE_STATELESS_SEASONLORDBATTLETOP1",
		2017: "COND_TYPE_STATELESS_PROPHAVE",
		2018: "COND_TYPE_STATELESS_COSTMONEY",
		2019: "COND_TYPE_STATELESS_FINISHRANKCHESS",
		2020: "COND_TYPE_STATELESS_RANKCHESSTOPN",
		2021: "COND_TYPE_STATELESS_SEASONGAMETYPETOPN",
		2022: "COND_TYPE_STATELESS_RANKCHESSRANK",
		2023: "COND_TYPE_STATELESS_ADDAWARD",
		2024: "COND_TYPE_STATELESS_REGISTERDAY",
		2025: "COND_TYPE_STATELESS_TOKENAWARDLEVEL",
		2026: "COND_TYPE_STATELESS_TOKENLEVEL",
		2027: "COND_TYPE_STATELESS_CHESS_BATTLECOUNT",
		2028: "COND_TYPE_STATELESS_CHESS_3STARCOUNT",
		2029: "COND_TYPE_STATELESS_CHESS_DEFEATCOUNT",
		2030: "COND_TYPE_STATELESS_CHESS_MAXHURT",
		2031: "COND_TYPE_STATELESS_CHESS_MAXHURTED",
		2032: "COND_TYPE_STATELESS_CHESS_MAXRECOVER",
		2035: "COND_TYPE_STATELESS_BEATPLAYERCOUNT",
		2036: "COND_TYPE_STATELESS_SPECIFIEDLORDSGET",
		2037: "COND_TYPE_STATELESS_NEWBIE_ABILITY",
		2038: "COND_TYPE_STATELESS_NEWBIE_FINISHGUIDE",
		2039: "COND_TYPE_STATELESS_NEWBIE_STEPTIME",
		2040: "COND_TYPE_STATELESS_HISTORY_PVPRANKNO",
		2041: "COND_TYPE_STATELESS_HISTORY_WINRATE",
		2042: "COND_TYPE_STATELESS_HISTORY_INTEREST",
		2043: "COND_TYPE_STATELESS_HISTORY_STARHEROCNT",
		2044: "COND_TYPE_STATELESS_HISTORY_BATTLEPOSCHG",
		2045: "COND_TYPE_STATELESS_HISTORY_LEVELUP",
		2046: "COND_TYPE_STATELESS_HISTORY_COINBIGGERAFTERLVLUP",
		2047: "COND_TYPE_STATELESS_HISTORY_COINSMALLERAFTERLVLUP",
		2048: "COND_TYPE_STATELESS_HISTORY_REFRESHCNT",
		2049: "COND_TYPE_STATELESS_HISTORY_TRIGEXTRABUY",
		2050: "COND_TYPE_STATELESS_HISTORY_CARDBUY",
		2051: "COND_TYPE_STATELESS_HISTORY_CARDLOCK",
		2052: "COND_TYPE_STATELESS_HISTORY_INTRODUCECLICK",
		2053: "COND_TYPE_STATELESS_HISTORY_TAKEOFFEQUIP",
		2054: "COND_TYPE_STATELESS_HISTORY_WATCHPLAYER",
		2055: "COND_TYPE_STATELESS_HISTORY_WATCHFORMATION",
		2056: "COND_TYPE_STATELESS_HISTORY_AWARDCHOOSE",
		2057: "COND_TYPE_STATELESS_HISTORY_WEAREQUIP",
		2058: "COND_TYPE_STATELESS_HISTORY_WEARSYNTEQUIP",
		2059: "COND_TYPE_STATELESS_TOTAL_BATTLECOINGET",
		2060: "COND_TYPE_STATELESS_TOTAL_BATTLEEXPGET",
		2061: "COND_TYPE_STATELESS_TOTAL_BATTLETOKENGET",
		2062: "COND_TYPE_STATELESS_GOODSBUY",
		2063: "COND_TYPE_STATELESS_QUALITYITEMHAVE",
		2064: "COND_TYPE_STATELESS_TOTAL_HERODAMAGE",
		2065: "COND_TYPE_STATELESS_TOTAL_INTERESTCOIN",
		2067: "COND_TYPE_STATELESS_TOTAL_FINEQUIPCNT",
		2068: "COND_TYPE_STATELESS_RESGISTERCHANNEL",
		2069: "COND_TYPE_STATELESS_WORLDCHATCNT",
		2070: "COND_TYPE_STATELESS_SEASONMAXRANK",
		2071: "COND_TYPE_STATELESS_ACHIEVEEXP",
		2072: "COND_TYPE_STATELESS_TOKENTASKFIN",
		2073: "COND_TYPE_STATELESS_SCARCEITEMHAVE",
		2074: "COND_TYPE_STATELESS_CHESSBOARDHAVE",
		2075: "COND_TYPE_STATELESS_PROFICIENCYLORDHAVE",
		2076: "COND_TYPE_STATELESS_BATTLEWITHFRIEND",
		2077: "COND_TYPE_STATELESS_USELORDBATTLECNT",
		2078: "COND_TYPE_STATELESS_RANKDIFFPRETWOSETS",
		2079: "COND_TYPE_STATELESS_HERODRAWCOUNTSUM",
		2080: "COND_TYPE_STATELESS_USEACTIVESKILLCOUNT",
		2081: "COND_TYPE_STATELESS_CHESSKILLCOUNTSUM",
		2082: "COND_TYPE_STATELESS_PLAYERDAMAGESUM",
		2083: "COND_TYPE_STATELESS_RANKUSEPROPSUM",
		2084: "COND_TYPE_STATELESS_RANKUSEQUICKMSGSUM",
		2085: "COND_TYPE_STATELESS_POPULATIONATTAINSUM",
		2086: "COND_TYPE_STATELESS_GUILDACTIVEVALUESUM",
		2087: "COND_TYPE_STATELESS_JOINGUILD",
		2088: "COND_TYPE_STATELESS_HISTORY_BATTLETIME",
		2089: "COND_TYPE_STATELESS_JOINGUILD_DAY",
		2090: "COND_TYPE_STATELESS_CHESSDECORATENUM",
		2091: "COND_TYPE_STATELESS_CHESSDECORATEFULL",
		2092: "COND_TYPE_STATELESS_LORD_PROFICIENCYLV",
		2093: "COND_TYPE_STATELESS_ADD_SPECIALEFT",
		2094: "COND_TYPE_STATELESS_RECRUITSCORE",
		2095: "COND_TYPE_STATELESS_RECRUITCLOSE",
		2096: "COND_TYPE_STATELESS_NEWBIETASKFIN",
		2097: "COND_TYPE_STATELESS_END",
	}
	ECondType_value = map[string]int32{
		"COND_TYPE_STATEFUL_BEGIN":                          0,
		"COND_TYPE_STATEFUL_COSTMONEY":                      2,
		"COND_TYPE_STATEFUL_FINISHRANKCHESS":                3,
		"COND_TYPE_STATEFUL_RANKCHESSTOPN":                  4,
		"COND_TYPE_STATEFUL_SEASONGAMETYPETOPN":             5,
		"COND_TYPE_STATEFUL_RANKCHESSRANK":                  6,
		"COND_TYPE_STATEFUL_ACNTLOGIN":                      8,
		"COND_TYPE_STATEFUL_ADDAWARD":                       9,
		"COND_TYPE_STATEFUL_ADDFRIEND":                      10,
		"COND_TYPE_STATEFUL_RANKWINROUND":                   11,
		"COND_TYPE_STATEFUL_RANKUPGRADECNT":                 13,
		"COND_TYPE_STATEFUL_RANKSETTLELEVEL":                14,
		"COND_TYPE_STATEFUL_REFRESHSHOP":                    15,
		"COND_TYPE_STATEFUL_LORDDAMAGE":                     16,
		"COND_TYPE_STATEFUL_RANKSKILLOUTCOIN":               17,
		"COND_TYPE_STATEFUL_RANKSKILLINCOIN":                18,
		"COND_TYPE_STATEFUL_TOKENEQUIPGAIN":                 19,
		"COND_TYPE_STATEFUL_TOKENEQUIPGAINSUM":              20,
		"COND_TYPE_STATEFUL_FINALEQUIPGAIN":                 21,
		"COND_TYPE_STATEFUL_ROUNDREFRESHSHOPMAX":            23,
		"COND_TYPE_STATEFUL_RANKTOTALCONSUMECOIN":           24,
		"COND_TYPE_STATEFUL_RANKUPGRADELVLCOIN":             25,
		"COND_TYPE_STATEFUL_RANKREFRESHCOIN":                26,
		"COND_TYPE_STATEFUL_RANKHIGHESTCOIN":                27,
		"COND_TYPE_STATEFUL_RANKKILLENEMYCOIN":              28,
		"COND_TYPE_STATEFUL_RANKINTERESTCOIN":               29,
		"COND_TYPE_STATEFUL_RANKSTREAKWINCOIN":              30,
		"COND_TYPE_STATEFUL_RANKSTREAKLOSECOIN":             31,
		"COND_TYPE_STATEFUL_RANKLORDAWARDCOIN":              32,
		"COND_TYPE_STATEFUL_RANKSETTLEFETTERCNT":            33,
		"COND_TYPE_STATEFUL_RANKSETTLEFETTERLVL":            34,
		"COND_TYPE_STATEFUL_RANKSETTLEFETTERQUALITY":        35,
		"COND_TYPE_STATEFUL_RANKROUNDFETTERCNT":             36,
		"COND_TYPE_STATEFUL_RANKROUNDFETTERLVL":             37,
		"COND_TYPE_STATEFUL_RANKROUNDFETTERQUALITY":         38,
		"COND_TYPE_STATEFUL_RANKBATTLEFETTERCNT":            39,
		"COND_TYPE_STATEFUL_RANKBATTLEFETTERLVL":            40,
		"COND_TYPE_STATEFUL_RANKBATTLEFETTERQUALITY":        41,
		"COND_TYPE_STATEFUL_REFRESHSHOPSUM":                 42,
		"COND_TYPE_STATEFUL_LORDDAMAGESUM":                  43,
		"COND_TYPE_STATEFUL_RANKTOTALCONSUMECOINSUM":        45,
		"COND_TYPE_STATEFUL_RANKREFRESHCOINSUM":             46,
		"COND_TYPE_STATEFUL_RANKWINROUNDSUM":                47,
		"COND_TYPE_STATEFUL_RANKTOTALROUNDSUM":              48,
		"COND_TYPE_STATEFUL_RANKUPGRADECNTSUM":              49,
		"COND_TYPE_STATEFUL_FINALEQUIPGAINSUM":              50,
		"COND_TYPE_STATEFUL_RANKUPGRADELVLCOINSUM":          51,
		"COND_TYPE_STATEFUL_RANKSTREAKWINCOINSUM":           52,
		"COND_TYPE_STATEFUL_RANKSTREAKLOSECOINSUM":          53,
		"COND_TYPE_STATEFUL_RANKLORDAWARDCOINSUM":           54,
		"COND_TYPE_STATEFUL_RANKLORDSKILLCNT":               55,
		"COND_TYPE_STATEFUL_RANKPLAYERLASTDAMAGE":           56,
		"COND_TYPE_STATEFUL_RANKAUCTIONCOIN":                57,
		"COND_TYPE_STATEFUL_RANKSINGLEAUCTIONCOIN":          58,
		"COND_TYPE_STATEFUL_RANKCONTINUOUSWINROUND":         59,
		"COND_TYPE_STATEFUL_RANKCONTINUOUSLOSEROUND":        60,
		"COND_TYPE_STATEFUL_RANKAUCTIONCOUNT":               61,
		"COND_TYPE_STATEFUL_RANKAUCTIONRANDOMCOUNT":         62,
		"COND_TYPE_STATEFUL_RANKAUCTIONJOINCOUNT":           63,
		"COND_TYPE_STATEFUL_RANKAUCTIONSUCCCOUNT":           64,
		"COND_TYPE_STATEFUL_RANKCHGCARDS":                   65,
		"COND_TYPE_STATEFUL_RANKCHGCARDSBETTERHERO":         66,
		"COND_TYPE_STATEFUL_RANKALIVEROUNDCOUNT":            67,
		"COND_TYPE_STATEFUL_CHESS_TOTALHURT":                68,
		"COND_TYPE_STATEFUL_CHESS_TOTALHURTED":              69,
		"COND_TYPE_STATEFUL_CHESS_TOTALRECOVER":             70,
		"COND_TYPE_STATEFUL_SEAONRANKTOPN":                  71,
		"COND_TYPE_STATEFUL_CHESS_3STARCOUNT":               72,
		"COND_TYPE_STATEFUL_CHESS_DEFEATCOUNT":              73,
		"COND_TYPE_STATEFUL_CHESS_MAXHURT":                  74,
		"COND_TYPE_STATEFUL_CHESS_MAXHURTED":                75,
		"COND_TYPE_STATEFUL_CHESS_MAXRECOVER":               76,
		"COND_TYPE_STATEFUL_CHESS_BATTLECOUNT":              77,
		"COND_TYPE_STATEFUL_BATTLE_FETTERRANK":              78,
		"COND_TYPE_STATEFUL_BATTLE_QUALITYRANK":             79,
		"COND_TYPE_STATEFUL_BATTLE_STARRANK":                80,
		"COND_TYPE_STATEFUL_BATTLE_FETTERCNT":               81,
		"COND_TYPE_STATEFUL_BATTLE_MULTICHESS_WARCNT":       82,
		"COND_TYPE_STATEFUL_BATTLE_MULTICHESS_RANK":         83,
		"COND_TYPE_STATEFUL_BEATPLAYERCOUNT":                85,
		"COND_TYPE_STATEFUL_RANKHEROEOSSAMESTAR":            86,
		"COND_TYPE_STATEFUL_LORDPROFICIENCYGET":             87,
		"COND_TYPE_STATEFUL_QUALITYSTARHEROGET":             88,
		"COND_TYPE_STATEFUL_CHESS_ROUNDDAMAGE":              89,
		"COND_TYPE_STATEFUL_CHESS_SETTLEQUALITY":            90,
		"COND_TYPE_STATEFUL_CHESSGROUPONSTAGE":              91,
		"COND_TYPE_STATEFUL_ROUNDBUYEXP":                    92,
		"COND_TYPE_STATEFUL_ROUNDCOINGET":                   93,
		"COND_TYPE_STATEFUL_CHESSGROUPDAMAGE":               94,
		"COND_TYPE_STATEFUL_CHESSGROUPHURTED":               95,
		"COND_TYPE_STATEFUL_SPECIFIEDLORDSEXIST":            96,
		"COND_TYPE_STATEFUL_CHESSHURTED_PERROUND":           97,
		"COND_TYPE_STATEFUL_CHESSCONTROL_PERROUND":          98,
		"COND_TYPE_STATEFUL_CHESSHEAL_PERROUND":             99,
		"COND_TYPE_STATEFUL_RANKTOTALGETCOIN":               100,
		"COND_TYPE_STATEFUL_TOPNINROUNDCNT":                 103,
		"COND_TYPE_STATEFUL_RANKDIFFERENTLORD":              104,
		"COND_TYPE_STATEFUL_RANKTOPNUSELORD":                105,
		"COND_TYPE_STATEFUL_STARXHEROSETTLETOPN":            106,
		"COND_TYPE_STATEFUL_QUALITYHEROSETTLETOPN":          107,
		"COND_TYPE_STATEFUL_QUALITYSTARHEROSETTLE":          108,
		"COND_TYPE_STATEFUL_CHESSMAXHP":                     109,
		"COND_TYPE_STATEFUL_CHESSMAXAD":                     110,
		"COND_TYPE_STATEFUL_CHESSMAXAP":                     111,
		"COND_TYPE_STATEFUL_CHESSMAXCRITHIT":                112,
		"COND_TYPE_STATEFUL_CHESSGROUPHEALING":              113,
		"COND_TYPE_STATEFUL_CHESSGROUPBEATCOUNT":            114,
		"COND_TYPE_STATEFUL_ROUNDPLAYERDAMAGE":              115,
		"COND_TYPE_STATEFUL_PLAYERDAMAGECOUNT":              116,
		"COND_TYPE_STATEFUL_SPECIFIEDLORDDAMAGE":            117,
		"COND_TYPE_STATEFUL_CHESSCONTROLENEMYTIME":          118,
		"COND_TYPE_STATEFUL_USEPROPTOSPECIFIEDLORD":         119,
		"COND_TYPE_STATEFUL_RANKUSEPROPCOUNT":               121,
		"COND_TYPE_STATEFUL_RANKUSEQUICKMSGCOUNTSUM":        122,
		"COND_TYPE_STATEFUL_CHESSBEATCOUNT":                 123,
		"COND_TYPE_STATEFUL_CHESSROUNDBEATCOUNT":            124,
		"COND_TYPE_STATEFUL_SPECIFIEDLORDBATTLE":            125,
		"COND_TYPE_STATEFUL_QUICKMSGCOUNT":                  126,
		"COND_TYPE_STATEFUL_RANKTALENTQUALITY":              127,
		"COND_TYPE_STATEFUL_RANKTALENTID":                   128,
		"COND_TYPE_STATEFUL_LORDTALENTSETTLETOPN":           129,
		"COND_TYPE_STATEFUL_LORDTALENTSUM":                  130,
		"COND_TYPE_STATEFUL_TALENTQUALITYSUM":               131,
		"COND_TYPE_STATEFUL_BATTLEWITHGUILDMEM":             132,
		"COND_TYPE_STATEFUL_MAXGUILDACTIVEVALUE":            133,
		"COND_TYPE_STATEFUL_HEROEQUIPWEAR_INROUND":          134,
		"COND_TYPE_STATEFUL_EXCHANGEHERO_INROUND":           135,
		"COND_TYPE_STATEFUL_END":                            136,
		"COND_TYPE_STATELESS_BEGIN":                         2000,
		"COND_TYPE_STATELESS_TOTALBATTLECNT":                2001,
		"COND_TYPE_STATELESS_DAILYLOGIN":                    2002,
		"COND_TYPE_STATELESS_FIRSTWINERCNT":                 2003,
		"COND_TYPE_STATELESS_ACNTLEVEL":                     2004,
		"COND_TYPE_STATELESS_ACNTLOGIN":                     2006,
		"COND_TYPE_STATELESS_FRIENDHAVE":                    2007,
		"COND_TYPE_STATELESS_LORDHAVE":                      2008,
		"COND_TYPE_STATELESS_LORDSKINHAVE":                  2009,
		"COND_TYPE_STATELESS_SEASONCOMPOSE3STAR":            2010,
		"COND_TYPE_STATELESS_SEASONAVGRANK":                 2011,
		"COND_TYPE_STATELESS_SEASONWINROUND":                2012,
		"COND_TYPE_STATELESS_SEASONCHESSBUY":                2013,
		"COND_TYPE_STATELESS_SEASONLORDBATTLECNT":           2014,
		"COND_TYPE_STATELESS_SEASONLORDBATTLETOP4":          2015,
		"COND_TYPE_STATELESS_SEASONLORDBATTLETOP1":          2016,
		"COND_TYPE_STATELESS_PROPHAVE":                      2017,
		"COND_TYPE_STATELESS_COSTMONEY":                     2018,
		"COND_TYPE_STATELESS_FINISHRANKCHESS":               2019,
		"COND_TYPE_STATELESS_RANKCHESSTOPN":                 2020,
		"COND_TYPE_STATELESS_SEASONGAMETYPETOPN":            2021,
		"COND_TYPE_STATELESS_RANKCHESSRANK":                 2022,
		"COND_TYPE_STATELESS_ADDAWARD":                      2023,
		"COND_TYPE_STATELESS_REGISTERDAY":                   2024,
		"COND_TYPE_STATELESS_TOKENAWARDLEVEL":               2025,
		"COND_TYPE_STATELESS_TOKENLEVEL":                    2026,
		"COND_TYPE_STATELESS_CHESS_BATTLECOUNT":             2027,
		"COND_TYPE_STATELESS_CHESS_3STARCOUNT":              2028,
		"COND_TYPE_STATELESS_CHESS_DEFEATCOUNT":             2029,
		"COND_TYPE_STATELESS_CHESS_MAXHURT":                 2030,
		"COND_TYPE_STATELESS_CHESS_MAXHURTED":               2031,
		"COND_TYPE_STATELESS_CHESS_MAXRECOVER":              2032,
		"COND_TYPE_STATELESS_BEATPLAYERCOUNT":               2035,
		"COND_TYPE_STATELESS_SPECIFIEDLORDSGET":             2036,
		"COND_TYPE_STATELESS_NEWBIE_ABILITY":                2037,
		"COND_TYPE_STATELESS_NEWBIE_FINISHGUIDE":            2038,
		"COND_TYPE_STATELESS_NEWBIE_STEPTIME":               2039,
		"COND_TYPE_STATELESS_HISTORY_PVPRANKNO":             2040,
		"COND_TYPE_STATELESS_HISTORY_WINRATE":               2041,
		"COND_TYPE_STATELESS_HISTORY_INTEREST":              2042,
		"COND_TYPE_STATELESS_HISTORY_STARHEROCNT":           2043,
		"COND_TYPE_STATELESS_HISTORY_BATTLEPOSCHG":          2044,
		"COND_TYPE_STATELESS_HISTORY_LEVELUP":               2045,
		"COND_TYPE_STATELESS_HISTORY_COINBIGGERAFTERLVLUP":  2046,
		"COND_TYPE_STATELESS_HISTORY_COINSMALLERAFTERLVLUP": 2047,
		"COND_TYPE_STATELESS_HISTORY_REFRESHCNT":            2048,
		"COND_TYPE_STATELESS_HISTORY_TRIGEXTRABUY":          2049,
		"COND_TYPE_STATELESS_HISTORY_CARDBUY":               2050,
		"COND_TYPE_STATELESS_HISTORY_CARDLOCK":              2051,
		"COND_TYPE_STATELESS_HISTORY_INTRODUCECLICK":        2052,
		"COND_TYPE_STATELESS_HISTORY_TAKEOFFEQUIP":          2053,
		"COND_TYPE_STATELESS_HISTORY_WATCHPLAYER":           2054,
		"COND_TYPE_STATELESS_HISTORY_WATCHFORMATION":        2055,
		"COND_TYPE_STATELESS_HISTORY_AWARDCHOOSE":           2056,
		"COND_TYPE_STATELESS_HISTORY_WEAREQUIP":             2057,
		"COND_TYPE_STATELESS_HISTORY_WEARSYNTEQUIP":         2058,
		"COND_TYPE_STATELESS_TOTAL_BATTLECOINGET":           2059,
		"COND_TYPE_STATELESS_TOTAL_BATTLEEXPGET":            2060,
		"COND_TYPE_STATELESS_TOTAL_BATTLETOKENGET":          2061,
		"COND_TYPE_STATELESS_GOODSBUY":                      2062,
		"COND_TYPE_STATELESS_QUALITYITEMHAVE":               2063,
		"COND_TYPE_STATELESS_TOTAL_HERODAMAGE":              2064,
		"COND_TYPE_STATELESS_TOTAL_INTERESTCOIN":            2065,
		"COND_TYPE_STATELESS_TOTAL_FINEQUIPCNT":             2067,
		"COND_TYPE_STATELESS_RESGISTERCHANNEL":              2068,
		"COND_TYPE_STATELESS_WORLDCHATCNT":                  2069,
		"COND_TYPE_STATELESS_SEASONMAXRANK":                 2070,
		"COND_TYPE_STATELESS_ACHIEVEEXP":                    2071,
		"COND_TYPE_STATELESS_TOKENTASKFIN":                  2072,
		"COND_TYPE_STATELESS_SCARCEITEMHAVE":                2073,
		"COND_TYPE_STATELESS_CHESSBOARDHAVE":                2074,
		"COND_TYPE_STATELESS_PROFICIENCYLORDHAVE":           2075,
		"COND_TYPE_STATELESS_BATTLEWITHFRIEND":              2076,
		"COND_TYPE_STATELESS_USELORDBATTLECNT":              2077,
		"COND_TYPE_STATELESS_RANKDIFFPRETWOSETS":            2078,
		"COND_TYPE_STATELESS_HERODRAWCOUNTSUM":              2079,
		"COND_TYPE_STATELESS_USEACTIVESKILLCOUNT":           2080,
		"COND_TYPE_STATELESS_CHESSKILLCOUNTSUM":             2081,
		"COND_TYPE_STATELESS_PLAYERDAMAGESUM":               2082,
		"COND_TYPE_STATELESS_RANKUSEPROPSUM":                2083,
		"COND_TYPE_STATELESS_RANKUSEQUICKMSGSUM":            2084,
		"COND_TYPE_STATELESS_POPULATIONATTAINSUM":           2085,
		"COND_TYPE_STATELESS_GUILDACTIVEVALUESUM":           2086,
		"COND_TYPE_STATELESS_JOINGUILD":                     2087,
		"COND_TYPE_STATELESS_HISTORY_BATTLETIME":            2088,
		"COND_TYPE_STATELESS_JOINGUILD_DAY":                 2089,
		"COND_TYPE_STATELESS_CHESSDECORATENUM":              2090,
		"COND_TYPE_STATELESS_CHESSDECORATEFULL":             2091,
		"COND_TYPE_STATELESS_LORD_PROFICIENCYLV":            2092,
		"COND_TYPE_STATELESS_ADD_SPECIALEFT":                2093,
		"COND_TYPE_STATELESS_RECRUITSCORE":                  2094,
		"COND_TYPE_STATELESS_RECRUITCLOSE":                  2095,
		"COND_TYPE_STATELESS_NEWBIETASKFIN":                 2096,
		"COND_TYPE_STATELESS_END":                           2097,
	}
)

func (x ECondType) Enum() *ECondType {
	p := new(ECondType)
	*p = x
	return p
}

func (x ECondType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECondType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[22].Descriptor()
}

func (ECondType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[22]
}

func (x ECondType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ECondType.Descriptor instead.
func (ECondType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{22}
}

type RES_SYSTEM_TYPE int32

const (
	RES_SYSTEM_TYPE_UNLOCK_BASE                 RES_SYSTEM_TYPE = 0
	RES_SYSTEM_TYPE_UNLOCK_TOKEN                RES_SYSTEM_TYPE = 1
	RES_SYSTEM_TYPE_UNLOCK_LORD                 RES_SYSTEM_TYPE = 2
	RES_SYSTEM_TYPE_UNLOCK_HERO                 RES_SYSTEM_TYPE = 3
	RES_SYSTEM_TYPE_UNLOCK_LINEUP               RES_SYSTEM_TYPE = 4
	RES_SYSTEM_TYPE_UNLOCK_WEAL                 RES_SYSTEM_TYPE = 5
	RES_SYSTEM_TYPE_UNLOCK_RANK                 RES_SYSTEM_TYPE = 6
	RES_SYSTEM_TYPE_UNLOCK_FRIEND               RES_SYSTEM_TYPE = 7
	RES_SYSTEM_TYPE_UNLOCK_PACKAGE              RES_SYSTEM_TYPE = 8
	RES_SYSTEM_TYPE_UNLOCK_CHAT                 RES_SYSTEM_TYPE = 9
	RES_SYSTEM_TYPE_UNLOCK_ACHIEVE              RES_SYSTEM_TYPE = 10
	RES_SYSTEM_TYPE_UNLOCK_PERSONALISE          RES_SYSTEM_TYPE = 11
	RES_SYSTEM_TYPE_UNLOCK_COUPONS              RES_SYSTEM_TYPE = 12
	RES_SYSTEM_TYPE_UNLOCK_MAIL                 RES_SYSTEM_TYPE = 13
	RES_SYSTEM_TYPE_UNLOCK_NEWBIE               RES_SYSTEM_TYPE = 14
	RES_SYSTEM_TYPE_UNLOCK_PVP                  RES_SYSTEM_TYPE = 15
	RES_SYSTEM_TYPE_UNLOCK_GM                   RES_SYSTEM_TYPE = 16
	RES_SYSTEM_TYPE_UNLOCK_NAME                 RES_SYSTEM_TYPE = 17
	RES_SYSTEM_TYPE_UNLOCK_SHOP                 RES_SYSTEM_TYPE = 18
	RES_SYSTEM_TYPE_UNLOCK_HOMEPAGE             RES_SYSTEM_TYPE = 19
	RES_SYSTEM_TYPE_UNLOCK_GUILD                RES_SYSTEM_TYPE = 20
	RES_SYSTEM_TYPE_UNLOCK_SEASON_TRAVEL        RES_SYSTEM_TYPE = 21
	RES_SYSTEM_TYPE_UNLOCK_SEASON_RANK_AWARD    RES_SYSTEM_TYPE = 22
	RES_SYSTEM_TYPE_UNLOCK_GROWTH_PATH          RES_SYSTEM_TYPE = 23
	RES_SYSTEM_TYPE_UNLOCK_IN_SEASON_RANK_AWARD RES_SYSTEM_TYPE = 24
	RES_SYSTEM_TYPE_UNLOCK_SHARE                RES_SYSTEM_TYPE = 25
	RES_SYSTEM_TYPE_UNLOCK_RECRUIT              RES_SYSTEM_TYPE = 26
	RES_SYSTEM_TYPE_UNLOCK_LAST                 RES_SYSTEM_TYPE = 27
)

// Enum value maps for RES_SYSTEM_TYPE.
var (
	RES_SYSTEM_TYPE_name = map[int32]string{
		0:  "UNLOCK_BASE",
		1:  "UNLOCK_TOKEN",
		2:  "UNLOCK_LORD",
		3:  "UNLOCK_HERO",
		4:  "UNLOCK_LINEUP",
		5:  "UNLOCK_WEAL",
		6:  "UNLOCK_RANK",
		7:  "UNLOCK_FRIEND",
		8:  "UNLOCK_PACKAGE",
		9:  "UNLOCK_CHAT",
		10: "UNLOCK_ACHIEVE",
		11: "UNLOCK_PERSONALISE",
		12: "UNLOCK_COUPONS",
		13: "UNLOCK_MAIL",
		14: "UNLOCK_NEWBIE",
		15: "UNLOCK_PVP",
		16: "UNLOCK_GM",
		17: "UNLOCK_NAME",
		18: "UNLOCK_SHOP",
		19: "UNLOCK_HOMEPAGE",
		20: "UNLOCK_GUILD",
		21: "UNLOCK_SEASON_TRAVEL",
		22: "UNLOCK_SEASON_RANK_AWARD",
		23: "UNLOCK_GROWTH_PATH",
		24: "UNLOCK_IN_SEASON_RANK_AWARD",
		25: "UNLOCK_SHARE",
		26: "UNLOCK_RECRUIT",
		27: "UNLOCK_LAST",
	}
	RES_SYSTEM_TYPE_value = map[string]int32{
		"UNLOCK_BASE":                 0,
		"UNLOCK_TOKEN":                1,
		"UNLOCK_LORD":                 2,
		"UNLOCK_HERO":                 3,
		"UNLOCK_LINEUP":               4,
		"UNLOCK_WEAL":                 5,
		"UNLOCK_RANK":                 6,
		"UNLOCK_FRIEND":               7,
		"UNLOCK_PACKAGE":              8,
		"UNLOCK_CHAT":                 9,
		"UNLOCK_ACHIEVE":              10,
		"UNLOCK_PERSONALISE":          11,
		"UNLOCK_COUPONS":              12,
		"UNLOCK_MAIL":                 13,
		"UNLOCK_NEWBIE":               14,
		"UNLOCK_PVP":                  15,
		"UNLOCK_GM":                   16,
		"UNLOCK_NAME":                 17,
		"UNLOCK_SHOP":                 18,
		"UNLOCK_HOMEPAGE":             19,
		"UNLOCK_GUILD":                20,
		"UNLOCK_SEASON_TRAVEL":        21,
		"UNLOCK_SEASON_RANK_AWARD":    22,
		"UNLOCK_GROWTH_PATH":          23,
		"UNLOCK_IN_SEASON_RANK_AWARD": 24,
		"UNLOCK_SHARE":                25,
		"UNLOCK_RECRUIT":              26,
		"UNLOCK_LAST":                 27,
	}
)

func (x RES_SYSTEM_TYPE) Enum() *RES_SYSTEM_TYPE {
	p := new(RES_SYSTEM_TYPE)
	*p = x
	return p
}

func (x RES_SYSTEM_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_SYSTEM_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[23].Descriptor()
}

func (RES_SYSTEM_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[23]
}

func (x RES_SYSTEM_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_SYSTEM_TYPE.Descriptor instead.
func (RES_SYSTEM_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{23}
}

type COM_LIFE_TYPE int32

const (
	COM_LIFE_TYPE_LIFETYPE_FOREVER COM_LIFE_TYPE = 0
	COM_LIFE_TYPE_LIFETYPE_FIXTIME COM_LIFE_TYPE = 1
	COM_LIFE_TYPE_LIFETYPE_ADDTIME COM_LIFE_TYPE = 2
	COM_LIFE_TYPE_LIFETYPE_SEASON  COM_LIFE_TYPE = 3
)

// Enum value maps for COM_LIFE_TYPE.
var (
	COM_LIFE_TYPE_name = map[int32]string{
		0: "LIFETYPE_FOREVER",
		1: "LIFETYPE_FIXTIME",
		2: "LIFETYPE_ADDTIME",
		3: "LIFETYPE_SEASON",
	}
	COM_LIFE_TYPE_value = map[string]int32{
		"LIFETYPE_FOREVER": 0,
		"LIFETYPE_FIXTIME": 1,
		"LIFETYPE_ADDTIME": 2,
		"LIFETYPE_SEASON":  3,
	}
)

func (x COM_LIFE_TYPE) Enum() *COM_LIFE_TYPE {
	p := new(COM_LIFE_TYPE)
	*p = x
	return p
}

func (x COM_LIFE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (COM_LIFE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[24].Descriptor()
}

func (COM_LIFE_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[24]
}

func (x COM_LIFE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use COM_LIFE_TYPE.Descriptor instead.
func (COM_LIFE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{24}
}

type ETokenType int32

const (
	ETokenType_TOKEN_TYPE_NORMAL ETokenType = 0
	ETokenType_TOKEN_TYPE_HIGH   ETokenType = 1
	ETokenType_TOKEN_TYPE_DELUXE ETokenType = 2
)

// Enum value maps for ETokenType.
var (
	ETokenType_name = map[int32]string{
		0: "TOKEN_TYPE_NORMAL",
		1: "TOKEN_TYPE_HIGH",
		2: "TOKEN_TYPE_DELUXE",
	}
	ETokenType_value = map[string]int32{
		"TOKEN_TYPE_NORMAL": 0,
		"TOKEN_TYPE_HIGH":   1,
		"TOKEN_TYPE_DELUXE": 2,
	}
)

func (x ETokenType) Enum() *ETokenType {
	p := new(ETokenType)
	*p = x
	return p
}

func (x ETokenType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETokenType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[25].Descriptor()
}

func (ETokenType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[25]
}

func (x ETokenType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ETokenType.Descriptor instead.
func (ETokenType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{25}
}

type HeroModeType int32

const (
	HeroModeType_HeroModeType_None             HeroModeType = 0
	HeroModeType_HeroModeType_MulanQing        HeroModeType = 1
	HeroModeType_HeroModeType_MulanZhong       HeroModeType = 2
	HeroModeType_HeroModeType_LightLixin       HeroModeType = 3
	HeroModeType_HeroModeType_DarkLixin        HeroModeType = 4
	HeroModeType_HeroModeType_ZhuBaJieDefault  HeroModeType = 5
	HeroModeType_HeroModeType_ZhuBaJieTarget   HeroModeType = 6
	HeroModeType_HeroModeType_SunWuKongDefault HeroModeType = 7
	HeroModeType_HeroModeType_SunWuKongTarget  HeroModeType = 8
)

// Enum value maps for HeroModeType.
var (
	HeroModeType_name = map[int32]string{
		0: "HeroModeType_None",
		1: "HeroModeType_MulanQing",
		2: "HeroModeType_MulanZhong",
		3: "HeroModeType_LightLixin",
		4: "HeroModeType_DarkLixin",
		5: "HeroModeType_ZhuBaJieDefault",
		6: "HeroModeType_ZhuBaJieTarget",
		7: "HeroModeType_SunWuKongDefault",
		8: "HeroModeType_SunWuKongTarget",
	}
	HeroModeType_value = map[string]int32{
		"HeroModeType_None":             0,
		"HeroModeType_MulanQing":        1,
		"HeroModeType_MulanZhong":       2,
		"HeroModeType_LightLixin":       3,
		"HeroModeType_DarkLixin":        4,
		"HeroModeType_ZhuBaJieDefault":  5,
		"HeroModeType_ZhuBaJieTarget":   6,
		"HeroModeType_SunWuKongDefault": 7,
		"HeroModeType_SunWuKongTarget":  8,
	}
)

func (x HeroModeType) Enum() *HeroModeType {
	p := new(HeroModeType)
	*p = x
	return p
}

func (x HeroModeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HeroModeType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[26].Descriptor()
}

func (HeroModeType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[26]
}

func (x HeroModeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HeroModeType.Descriptor instead.
func (HeroModeType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{26}
}

type RelativeModeType int32

const (
	RelativeModeType_RelativeModeType_None           RelativeModeType = 0
	RelativeModeType_RelativeModeType_YuanSuShi_Huo  RelativeModeType = 1
	RelativeModeType_RelativeModeType_YuanSuShi_Lei  RelativeModeType = 2
	RelativeModeType_RelativeModeType_YuanSuShi_Shui RelativeModeType = 3
	RelativeModeType_RelativeModeType_YuanSuShi_Mu   RelativeModeType = 4
)

// Enum value maps for RelativeModeType.
var (
	RelativeModeType_name = map[int32]string{
		0: "RelativeModeType_None",
		1: "RelativeModeType_YuanSuShi_Huo",
		2: "RelativeModeType_YuanSuShi_Lei",
		3: "RelativeModeType_YuanSuShi_Shui",
		4: "RelativeModeType_YuanSuShi_Mu",
	}
	RelativeModeType_value = map[string]int32{
		"RelativeModeType_None":           0,
		"RelativeModeType_YuanSuShi_Huo":  1,
		"RelativeModeType_YuanSuShi_Lei":  2,
		"RelativeModeType_YuanSuShi_Shui": 3,
		"RelativeModeType_YuanSuShi_Mu":   4,
	}
)

func (x RelativeModeType) Enum() *RelativeModeType {
	p := new(RelativeModeType)
	*p = x
	return p
}

func (x RelativeModeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RelativeModeType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[27].Descriptor()
}

func (RelativeModeType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[27]
}

func (x RelativeModeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RelativeModeType.Descriptor instead.
func (RelativeModeType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{27}
}

type RES_RELATIVE_ID int32

const (
	RES_RELATIVE_ID_RES_RELATIVE_ID_NULL RES_RELATIVE_ID = 0
	//标准S1
	RES_RELATIVE_ID_RES_RELATIVE_ID_STANDARD_S1_QUEEN       RES_RELATIVE_ID = 1
	RES_RELATIVE_ID_RES_RELATIVE_ID_STANDARD_S1_KING        RES_RELATIVE_ID = 2
	RES_RELATIVE_ID_RES_RELATIVE_ID_STANDARD_S1_ELEMENT     RES_RELATIVE_ID = 3
	RES_RELATIVE_ID_RES_RELATIVE_ID_STANDARD_S1_MASTER      RES_RELATIVE_ID = 4
	RES_RELATIVE_ID_RES_RELATIVE_ID_STANDARD_S1_HERCULES    RES_RELATIVE_ID = 5
	RES_RELATIVE_ID_RES_RELATIVE_ID_STANDARD_S1_SOLDIER     RES_RELATIVE_ID = 6
	RES_RELATIVE_ID_RES_RELATIVE_ID_STANDARD_S1_ASSASSIN    RES_RELATIVE_ID = 7
	RES_RELATIVE_ID_RES_RELATIVE_ID_STANDARD_S1_ARMORER     RES_RELATIVE_ID = 8
	RES_RELATIVE_ID_RES_RELATIVE_ID_STANDARD_S1_ARCHER      RES_RELATIVE_ID = 9
	RES_RELATIVE_ID_RES_RELATIVE_ID_STANDARD_S1_CUREAID     RES_RELATIVE_ID = 10
	RES_RELATIVE_ID_RES_RELATIVE_ID_STANDARD_S1_SHIELD      RES_RELATIVE_ID = 11
	RES_RELATIVE_ID_RES_RELATIVE_ID_STANDARD_S1_MECHANISM   RES_RELATIVE_ID = 12
	RES_RELATIVE_ID_RES_RELATIVE_ID_STANDARD_S1_SWORDMAN    RES_RELATIVE_ID = 13
	RES_RELATIVE_ID_RES_RELATIVE_ID_STANDARD_S1_DANCINGGIRL RES_RELATIVE_ID = 14
	RES_RELATIVE_ID_RES_RELATIVE_ID_STANDARD_S1_BOMBER      RES_RELATIVE_ID = 15
	RES_RELATIVE_ID_RES_RELATIVE_ID_STANDARD_S1_YUANSU2     RES_RELATIVE_ID = 16
	RES_RELATIVE_ID_RES_RELATIVE_ID_STANDARD_S1_GUN         RES_RELATIVE_ID = 17
	RES_RELATIVE_ID_RES_RELATIVE_ID_STANDARD_S1_MARKSMAN    RES_RELATIVE_ID = 18
	RES_RELATIVE_ID_RES_RELATIVE_ID_STANDARD_S1_HEALER      RES_RELATIVE_ID = 19
	RES_RELATIVE_ID_RES_RELATIVE_ID_STANDARD_S1_SWORDER     RES_RELATIVE_ID = 20
	RES_RELATIVE_ID_RES_RELATIVE_ID_STANDARD_S1_MAGIC       RES_RELATIVE_ID = 21
	RES_RELATIVE_ID_RES_RELATIVE_ID_STANDARD_S1_RULER       RES_RELATIVE_ID = 22
	RES_RELATIVE_ID_RES_RELATIVE_ID_STANDARD_S1_DANCER      RES_RELATIVE_ID = 23
	RES_RELATIVE_ID_RES_RELATIVE_ID_STANDARD_S1_YINYANGJIA  RES_RELATIVE_ID = 24
	RES_RELATIVE_ID_RES_RELATIVE_ID_STANDARD_S1_CHANGCHENG  RES_RELATIVE_ID = 25
	RES_RELATIVE_ID_RES_RELATIVE_ID_STANDARD_S1_CHANGAN     RES_RELATIVE_ID = 26
	RES_RELATIVE_ID_RES_RELATIVE_ID_STANDARD_S1_XUANYONG    RES_RELATIVE_ID = 27
	RES_RELATIVE_ID_RES_RELATIVE_ID_STANDARD_S1_HAIDU       RES_RELATIVE_ID = 28
	RES_RELATIVE_ID_RES_RELATIVE_ID_STANDARD_S1_YAOTIAN     RES_RELATIVE_ID = 29
	RES_RELATIVE_ID_RES_RELATIVE_ID_STANDARD_S1_JIXIA       RES_RELATIVE_ID = 30
	RES_RELATIVE_ID_RES_RELATIVE_ID_STANDARD_S1_FUSANG      RES_RELATIVE_ID = 31
	RES_RELATIVE_ID_RES_RELATIVE_ID_STANDARD_S1_MOZHONG     RES_RELATIVE_ID = 32
	RES_RELATIVE_ID_RES_RELATIVE_ID_STANDARD_S1_SANXIANZHE  RES_RELATIVE_ID = 33
	RES_RELATIVE_ID_RES_RELATIVE_ID_STANDARD_S1_SIMEI       RES_RELATIVE_ID = 34
	RES_RELATIVE_ID_RES_RELATIVE_ID_STANDARD_S1_XUANYONG2   RES_RELATIVE_ID = 35
	RES_RELATIVE_ID_RES_RELATIVE_ID_STANDARD_S1_YAOTIAN2    RES_RELATIVE_ID = 36
	RES_RELATIVE_ID_RES_RELATIVE_ID_STANDARD_S1_CHANGAN2    RES_RELATIVE_ID = 37
	RES_RELATIVE_ID_RES_RELATIVE_ID_STANDARD_S1_TEAMOFSTAR  RES_RELATIVE_ID = 38
	RES_RELATIVE_ID_RES_RELATIVE_ID_STANDARD_S1_RILUO       RES_RELATIVE_ID = 39
	RES_RELATIVE_ID_RES_RELATIVE_ID_STANDARD_S1_YUNMENGZE   RES_RELATIVE_ID = 40
	RES_RELATIVE_ID_RES_RELATIVE_ID_STANDARD_S1_SANFEN      RES_RELATIVE_ID = 41
	RES_RELATIVE_ID_RES_RELATIVE_ID_STANDARD_S1_WUSHUANG    RES_RELATIVE_ID = 42
	//经典S1
	RES_RELATIVE_ID_RES_RELATIVE_ID_CLASSIC_S1_1  RES_RELATIVE_ID = 101
	RES_RELATIVE_ID_RES_RELATIVE_ID_CLASSIC_S1_2  RES_RELATIVE_ID = 102
	RES_RELATIVE_ID_RES_RELATIVE_ID_CLASSIC_S1_3  RES_RELATIVE_ID = 103
	RES_RELATIVE_ID_RES_RELATIVE_ID_CLASSIC_S1_4  RES_RELATIVE_ID = 104
	RES_RELATIVE_ID_RES_RELATIVE_ID_CLASSIC_S1_5  RES_RELATIVE_ID = 105
	RES_RELATIVE_ID_RES_RELATIVE_ID_CLASSIC_S1_6  RES_RELATIVE_ID = 106
	RES_RELATIVE_ID_RES_RELATIVE_ID_CLASSIC_S1_7  RES_RELATIVE_ID = 107
	RES_RELATIVE_ID_RES_RELATIVE_ID_CLASSIC_S1_8  RES_RELATIVE_ID = 108
	RES_RELATIVE_ID_RES_RELATIVE_ID_CLASSIC_S1_9  RES_RELATIVE_ID = 109
	RES_RELATIVE_ID_RES_RELATIVE_ID_CLASSIC_S1_10 RES_RELATIVE_ID = 110
	RES_RELATIVE_ID_RES_RELATIVE_ID_CLASSIC_S1_11 RES_RELATIVE_ID = 111
	RES_RELATIVE_ID_RES_RELATIVE_ID_CLASSIC_S1_12 RES_RELATIVE_ID = 112
	RES_RELATIVE_ID_RES_RELATIVE_ID_CLASSIC_S1_13 RES_RELATIVE_ID = 113
	RES_RELATIVE_ID_RES_RELATIVE_ID_CLASSIC_S1_14 RES_RELATIVE_ID = 114
	RES_RELATIVE_ID_RES_RELATIVE_ID_CLASSIC_S1_15 RES_RELATIVE_ID = 115
	RES_RELATIVE_ID_RES_RELATIVE_ID_CLASSIC_S1_16 RES_RELATIVE_ID = 116
	RES_RELATIVE_ID_RES_RELATIVE_ID_CLASSIC_S1_17 RES_RELATIVE_ID = 117
	RES_RELATIVE_ID_RES_RELATIVE_ID_CLASSIC_S1_18 RES_RELATIVE_ID = 118
	RES_RELATIVE_ID_RES_RELATIVE_ID_CLASSIC_S1_19 RES_RELATIVE_ID = 119
)

// Enum value maps for RES_RELATIVE_ID.
var (
	RES_RELATIVE_ID_name = map[int32]string{
		0:   "RES_RELATIVE_ID_NULL",
		1:   "RES_RELATIVE_ID_STANDARD_S1_QUEEN",
		2:   "RES_RELATIVE_ID_STANDARD_S1_KING",
		3:   "RES_RELATIVE_ID_STANDARD_S1_ELEMENT",
		4:   "RES_RELATIVE_ID_STANDARD_S1_MASTER",
		5:   "RES_RELATIVE_ID_STANDARD_S1_HERCULES",
		6:   "RES_RELATIVE_ID_STANDARD_S1_SOLDIER",
		7:   "RES_RELATIVE_ID_STANDARD_S1_ASSASSIN",
		8:   "RES_RELATIVE_ID_STANDARD_S1_ARMORER",
		9:   "RES_RELATIVE_ID_STANDARD_S1_ARCHER",
		10:  "RES_RELATIVE_ID_STANDARD_S1_CUREAID",
		11:  "RES_RELATIVE_ID_STANDARD_S1_SHIELD",
		12:  "RES_RELATIVE_ID_STANDARD_S1_MECHANISM",
		13:  "RES_RELATIVE_ID_STANDARD_S1_SWORDMAN",
		14:  "RES_RELATIVE_ID_STANDARD_S1_DANCINGGIRL",
		15:  "RES_RELATIVE_ID_STANDARD_S1_BOMBER",
		16:  "RES_RELATIVE_ID_STANDARD_S1_YUANSU2",
		17:  "RES_RELATIVE_ID_STANDARD_S1_GUN",
		18:  "RES_RELATIVE_ID_STANDARD_S1_MARKSMAN",
		19:  "RES_RELATIVE_ID_STANDARD_S1_HEALER",
		20:  "RES_RELATIVE_ID_STANDARD_S1_SWORDER",
		21:  "RES_RELATIVE_ID_STANDARD_S1_MAGIC",
		22:  "RES_RELATIVE_ID_STANDARD_S1_RULER",
		23:  "RES_RELATIVE_ID_STANDARD_S1_DANCER",
		24:  "RES_RELATIVE_ID_STANDARD_S1_YINYANGJIA",
		25:  "RES_RELATIVE_ID_STANDARD_S1_CHANGCHENG",
		26:  "RES_RELATIVE_ID_STANDARD_S1_CHANGAN",
		27:  "RES_RELATIVE_ID_STANDARD_S1_XUANYONG",
		28:  "RES_RELATIVE_ID_STANDARD_S1_HAIDU",
		29:  "RES_RELATIVE_ID_STANDARD_S1_YAOTIAN",
		30:  "RES_RELATIVE_ID_STANDARD_S1_JIXIA",
		31:  "RES_RELATIVE_ID_STANDARD_S1_FUSANG",
		32:  "RES_RELATIVE_ID_STANDARD_S1_MOZHONG",
		33:  "RES_RELATIVE_ID_STANDARD_S1_SANXIANZHE",
		34:  "RES_RELATIVE_ID_STANDARD_S1_SIMEI",
		35:  "RES_RELATIVE_ID_STANDARD_S1_XUANYONG2",
		36:  "RES_RELATIVE_ID_STANDARD_S1_YAOTIAN2",
		37:  "RES_RELATIVE_ID_STANDARD_S1_CHANGAN2",
		38:  "RES_RELATIVE_ID_STANDARD_S1_TEAMOFSTAR",
		39:  "RES_RELATIVE_ID_STANDARD_S1_RILUO",
		40:  "RES_RELATIVE_ID_STANDARD_S1_YUNMENGZE",
		41:  "RES_RELATIVE_ID_STANDARD_S1_SANFEN",
		42:  "RES_RELATIVE_ID_STANDARD_S1_WUSHUANG",
		101: "RES_RELATIVE_ID_CLASSIC_S1_1",
		102: "RES_RELATIVE_ID_CLASSIC_S1_2",
		103: "RES_RELATIVE_ID_CLASSIC_S1_3",
		104: "RES_RELATIVE_ID_CLASSIC_S1_4",
		105: "RES_RELATIVE_ID_CLASSIC_S1_5",
		106: "RES_RELATIVE_ID_CLASSIC_S1_6",
		107: "RES_RELATIVE_ID_CLASSIC_S1_7",
		108: "RES_RELATIVE_ID_CLASSIC_S1_8",
		109: "RES_RELATIVE_ID_CLASSIC_S1_9",
		110: "RES_RELATIVE_ID_CLASSIC_S1_10",
		111: "RES_RELATIVE_ID_CLASSIC_S1_11",
		112: "RES_RELATIVE_ID_CLASSIC_S1_12",
		113: "RES_RELATIVE_ID_CLASSIC_S1_13",
		114: "RES_RELATIVE_ID_CLASSIC_S1_14",
		115: "RES_RELATIVE_ID_CLASSIC_S1_15",
		116: "RES_RELATIVE_ID_CLASSIC_S1_16",
		117: "RES_RELATIVE_ID_CLASSIC_S1_17",
		118: "RES_RELATIVE_ID_CLASSIC_S1_18",
		119: "RES_RELATIVE_ID_CLASSIC_S1_19",
	}
	RES_RELATIVE_ID_value = map[string]int32{
		"RES_RELATIVE_ID_NULL":                    0,
		"RES_RELATIVE_ID_STANDARD_S1_QUEEN":       1,
		"RES_RELATIVE_ID_STANDARD_S1_KING":        2,
		"RES_RELATIVE_ID_STANDARD_S1_ELEMENT":     3,
		"RES_RELATIVE_ID_STANDARD_S1_MASTER":      4,
		"RES_RELATIVE_ID_STANDARD_S1_HERCULES":    5,
		"RES_RELATIVE_ID_STANDARD_S1_SOLDIER":     6,
		"RES_RELATIVE_ID_STANDARD_S1_ASSASSIN":    7,
		"RES_RELATIVE_ID_STANDARD_S1_ARMORER":     8,
		"RES_RELATIVE_ID_STANDARD_S1_ARCHER":      9,
		"RES_RELATIVE_ID_STANDARD_S1_CUREAID":     10,
		"RES_RELATIVE_ID_STANDARD_S1_SHIELD":      11,
		"RES_RELATIVE_ID_STANDARD_S1_MECHANISM":   12,
		"RES_RELATIVE_ID_STANDARD_S1_SWORDMAN":    13,
		"RES_RELATIVE_ID_STANDARD_S1_DANCINGGIRL": 14,
		"RES_RELATIVE_ID_STANDARD_S1_BOMBER":      15,
		"RES_RELATIVE_ID_STANDARD_S1_YUANSU2":     16,
		"RES_RELATIVE_ID_STANDARD_S1_GUN":         17,
		"RES_RELATIVE_ID_STANDARD_S1_MARKSMAN":    18,
		"RES_RELATIVE_ID_STANDARD_S1_HEALER":      19,
		"RES_RELATIVE_ID_STANDARD_S1_SWORDER":     20,
		"RES_RELATIVE_ID_STANDARD_S1_MAGIC":       21,
		"RES_RELATIVE_ID_STANDARD_S1_RULER":       22,
		"RES_RELATIVE_ID_STANDARD_S1_DANCER":      23,
		"RES_RELATIVE_ID_STANDARD_S1_YINYANGJIA":  24,
		"RES_RELATIVE_ID_STANDARD_S1_CHANGCHENG":  25,
		"RES_RELATIVE_ID_STANDARD_S1_CHANGAN":     26,
		"RES_RELATIVE_ID_STANDARD_S1_XUANYONG":    27,
		"RES_RELATIVE_ID_STANDARD_S1_HAIDU":       28,
		"RES_RELATIVE_ID_STANDARD_S1_YAOTIAN":     29,
		"RES_RELATIVE_ID_STANDARD_S1_JIXIA":       30,
		"RES_RELATIVE_ID_STANDARD_S1_FUSANG":      31,
		"RES_RELATIVE_ID_STANDARD_S1_MOZHONG":     32,
		"RES_RELATIVE_ID_STANDARD_S1_SANXIANZHE":  33,
		"RES_RELATIVE_ID_STANDARD_S1_SIMEI":       34,
		"RES_RELATIVE_ID_STANDARD_S1_XUANYONG2":   35,
		"RES_RELATIVE_ID_STANDARD_S1_YAOTIAN2":    36,
		"RES_RELATIVE_ID_STANDARD_S1_CHANGAN2":    37,
		"RES_RELATIVE_ID_STANDARD_S1_TEAMOFSTAR":  38,
		"RES_RELATIVE_ID_STANDARD_S1_RILUO":       39,
		"RES_RELATIVE_ID_STANDARD_S1_YUNMENGZE":   40,
		"RES_RELATIVE_ID_STANDARD_S1_SANFEN":      41,
		"RES_RELATIVE_ID_STANDARD_S1_WUSHUANG":    42,
		"RES_RELATIVE_ID_CLASSIC_S1_1":            101,
		"RES_RELATIVE_ID_CLASSIC_S1_2":            102,
		"RES_RELATIVE_ID_CLASSIC_S1_3":            103,
		"RES_RELATIVE_ID_CLASSIC_S1_4":            104,
		"RES_RELATIVE_ID_CLASSIC_S1_5":            105,
		"RES_RELATIVE_ID_CLASSIC_S1_6":            106,
		"RES_RELATIVE_ID_CLASSIC_S1_7":            107,
		"RES_RELATIVE_ID_CLASSIC_S1_8":            108,
		"RES_RELATIVE_ID_CLASSIC_S1_9":            109,
		"RES_RELATIVE_ID_CLASSIC_S1_10":           110,
		"RES_RELATIVE_ID_CLASSIC_S1_11":           111,
		"RES_RELATIVE_ID_CLASSIC_S1_12":           112,
		"RES_RELATIVE_ID_CLASSIC_S1_13":           113,
		"RES_RELATIVE_ID_CLASSIC_S1_14":           114,
		"RES_RELATIVE_ID_CLASSIC_S1_15":           115,
		"RES_RELATIVE_ID_CLASSIC_S1_16":           116,
		"RES_RELATIVE_ID_CLASSIC_S1_17":           117,
		"RES_RELATIVE_ID_CLASSIC_S1_18":           118,
		"RES_RELATIVE_ID_CLASSIC_S1_19":           119,
	}
)

func (x RES_RELATIVE_ID) Enum() *RES_RELATIVE_ID {
	p := new(RES_RELATIVE_ID)
	*p = x
	return p
}

func (x RES_RELATIVE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_RELATIVE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[28].Descriptor()
}

func (RES_RELATIVE_ID) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[28]
}

func (x RES_RELATIVE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_RELATIVE_ID.Descriptor instead.
func (RES_RELATIVE_ID) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{28}
}

type RES_RELATIVE_TYPE int32

const (
	RES_RELATIVE_TYPE_RES_RELATIVE_TYPE_NULL   RES_RELATIVE_TYPE = 0
	RES_RELATIVE_TYPE_RES_RELATIVE_TYPE_CAREER RES_RELATIVE_TYPE = 1
	RES_RELATIVE_TYPE_RES_RELATIVE_TYPE_CAMP   RES_RELATIVE_TYPE = 2
)

// Enum value maps for RES_RELATIVE_TYPE.
var (
	RES_RELATIVE_TYPE_name = map[int32]string{
		0: "RES_RELATIVE_TYPE_NULL",
		1: "RES_RELATIVE_TYPE_CAREER",
		2: "RES_RELATIVE_TYPE_CAMP",
	}
	RES_RELATIVE_TYPE_value = map[string]int32{
		"RES_RELATIVE_TYPE_NULL":   0,
		"RES_RELATIVE_TYPE_CAREER": 1,
		"RES_RELATIVE_TYPE_CAMP":   2,
	}
)

func (x RES_RELATIVE_TYPE) Enum() *RES_RELATIVE_TYPE {
	p := new(RES_RELATIVE_TYPE)
	*p = x
	return p
}

func (x RES_RELATIVE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_RELATIVE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[29].Descriptor()
}

func (RES_RELATIVE_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[29]
}

func (x RES_RELATIVE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_RELATIVE_TYPE.Descriptor instead.
func (RES_RELATIVE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{29}
}

type RES_EQUIP_QUALITY_TYPE int32

const (
	RES_EQUIP_QUALITY_TYPE_QUALITY_NULL   RES_EQUIP_QUALITY_TYPE = 0
	RES_EQUIP_QUALITY_TYPE_QUALITY_WHITE  RES_EQUIP_QUALITY_TYPE = 1
	RES_EQUIP_QUALITY_TYPE_QUALITY_GREEN  RES_EQUIP_QUALITY_TYPE = 2
	RES_EQUIP_QUALITY_TYPE_QUALITY_BLUE   RES_EQUIP_QUALITY_TYPE = 3
	RES_EQUIP_QUALITY_TYPE_QUALITY_PURPLE RES_EQUIP_QUALITY_TYPE = 4
)

// Enum value maps for RES_EQUIP_QUALITY_TYPE.
var (
	RES_EQUIP_QUALITY_TYPE_name = map[int32]string{
		0: "QUALITY_NULL",
		1: "QUALITY_WHITE",
		2: "QUALITY_GREEN",
		3: "QUALITY_BLUE",
		4: "QUALITY_PURPLE",
	}
	RES_EQUIP_QUALITY_TYPE_value = map[string]int32{
		"QUALITY_NULL":   0,
		"QUALITY_WHITE":  1,
		"QUALITY_GREEN":  2,
		"QUALITY_BLUE":   3,
		"QUALITY_PURPLE": 4,
	}
)

func (x RES_EQUIP_QUALITY_TYPE) Enum() *RES_EQUIP_QUALITY_TYPE {
	p := new(RES_EQUIP_QUALITY_TYPE)
	*p = x
	return p
}

func (x RES_EQUIP_QUALITY_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_EQUIP_QUALITY_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[30].Descriptor()
}

func (RES_EQUIP_QUALITY_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[30]
}

func (x RES_EQUIP_QUALITY_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_EQUIP_QUALITY_TYPE.Descriptor instead.
func (RES_EQUIP_QUALITY_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{30}
}

type EWealType int32

const (
	EWealType_EWealType__reserved__ EWealType = 0
	EWealType_WEAL_TASK             EWealType = 1
	EWealType_WEAL_EXCHANGE         EWealType = 2
	EWealType_WEAL_MAX              EWealType = 3
)

// Enum value maps for EWealType.
var (
	EWealType_name = map[int32]string{
		0: "EWealType__reserved__",
		1: "WEAL_TASK",
		2: "WEAL_EXCHANGE",
		3: "WEAL_MAX",
	}
	EWealType_value = map[string]int32{
		"EWealType__reserved__": 0,
		"WEAL_TASK":             1,
		"WEAL_EXCHANGE":         2,
		"WEAL_MAX":              3,
	}
)

func (x EWealType) Enum() *EWealType {
	p := new(EWealType)
	*p = x
	return p
}

func (x EWealType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EWealType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[31].Descriptor()
}

func (EWealType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[31]
}

func (x EWealType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EWealType.Descriptor instead.
func (EWealType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{31}
}

type Legacy int32

const (
	Legacy_cs_res_data__reserved__ Legacy = 0
	Legacy_MAX_PATH_LEN            Legacy = 128
	Legacy_MAX_ACTOR_NAME          Legacy = 32
	Legacy_MAX_DISTRICT_NAME_LEN   Legacy = 64
	Legacy_RES_MAX_ICON_LEN        Legacy = 128  // 最大图标路径长度
	Legacy_RES_MAX_HERO_DESC_LEN   Legacy = 1024 // 英雄描述长度
	//####服务器--开始####
	Legacy_MAX_DISTRICT_SHORTNAME_LEN       Legacy = 32
	Legacy_RES_MAX_MAINLINE_LEVEL_PARAM_NUM Legacy = 3
	Legacy_RES_COMMON_TIME_LEN              Legacy = 32  // 通用时间长度
	Legacy_RES_MAX_DEFINITE_REWARD_NUM      Legacy = 4   // 固定奖励最大个数
	Legacy_RES_MAX_GLOBAL_TXT_VAL_LEN       Legacy = 512 // 全局文本配置项的文本项长度
	Legacy_RES_PLAT_OPENID_LEN              Legacy = 64
	Legacy_RES_COMMON_NAME_LEN              Legacy = 64
	Legacy_RES_COMMON_DESC_LEN              Legacy = 256
	Legacy_RES_MAX_MATCH_AI_ID_NUM          Legacy = 5   // 最大匹配AI分布数
	Legacy_RES_MAX_ITEM_DESC_LEN            Legacy = 256 // 最大物品描述长度
	Legacy_RES_MAX_ITEM_SIMPDESC_LEN        Legacy = 128 // 最大物品简要描述长度
	Legacy_RES_MAX_JUMP_LINK_NUM            Legacy = 5   // 最大跳转道具获取地
	Legacy_RES_MAX_ITEMEFT_PARAM_NUM        Legacy = 8   // 最大物品效果参数
	Legacy_RES_MAX_DROPITEM_NUM             Legacy = 6   // 最大掉落集合数
	Legacy_RES_MAX_OBTAIN_PROP_WAY_NUM      Legacy = 6   //最大获取道具方式参数
	Legacy_RES_MAX_MAIL_AWARD_NUM           Legacy = 5   // 最大邮件奖励个数
	Legacy_RES_MAIL_TITLE_LEN               Legacy = 256
	Legacy_RES_MAIL_BODY_LEN                Legacy = 1024
	Legacy_RES_MAX_UNLOCKCOND_NUM           Legacy = 3 // 最大解锁条件数
	Legacy_RES_MAX_AICHKCOND_NUM            Legacy = 3 // AI策略最大条件数
	Legacy_RES_MAX_AICHKSCORE_NUM           Legacy = 5 // AI策略最大评分数
	Legacy_RES_MAX_EXP_BUF_GAMETYPE         Legacy = 8 // 一条经验加成记录最多对多少种玩法生效
	Legacy_RES_MAX_DAILY_OPENTIME_NUM       Legacy = 3 // 每日开放时段最大个数
	Legacy_RES_WEEKLY_OPENTIME_NUM          Legacy = 7 // 每日开放时段最大个数
	//####赛季-开始####
	Legacy_RES_SEASON_MAX_THEME_COUNT Legacy = 5 // 单赛季最大的主题数
	Legacy_RES_MAX_PVP_PLAYER_NUM     Legacy = 8 // 最大PVP人数
	//####条件--开始####
	Legacy_RES_MAX_CONDITION_PARAMCNT Legacy = 5 // 条件参数最大数量
	//####战令--开始####
	Legacy_RES_MAX_TOKEN_LEVEL_AWARD_NUM      Legacy = 2  // 战令等级奖励的最大数量
	Legacy_RES_MAX_TOKEN_DAILY_TASK_POOL_NUM  Legacy = 4  // 战令任务刷新中每日任务池的数量上限
	Legacy_RES_MAX_TOKEN_WEEKLY_TASK_POOL_NUM Legacy = 4  // 战令任务刷新中每周任务池的数量上限
	Legacy_RES_MAX_TOKEN_HANGUP_VALUE_NUM     Legacy = 50 // 最大
	Legacy_RES_MAX_CHESS_TASKSTAGE_CNT        Legacy = 5  // 棋子最大任务阶段数量
	Legacy_RES_MAX_CHESS_HERO_MAX_RELATIVE    Legacy = 3  //旗子最大羁绊数
	Legacy_RES_MAX_CHESS_HERO_SKILL_COUNT     Legacy = 5  // 棋子技能最大个数
	Legacy_RES_MAX_PRE_EQUIP_COUNT            Legacy = 2  // 装备合成所需的装备数
	Legacy_RES_MAX_GETWAY_COUNT               Legacy = 3  //获取路径最大值
	//####布阵--开始####
	Legacy_RES_MAX_LORD_NUM                                       Legacy = 5  // 赛季预设阵容中一个阵容最多多少个领主
	Legacy_RES_MAX_LINEUP_HERO_NUM                                Legacy = 10 // 赛季预设阵容中一个阵容最多多少个英雄
	Legacy_RES_MAX_LINEUP_HERO_EQUIP_NUM                          Legacy = 3  // 赛季预设阵容中一个英雄最多多少件装备
	Legacy_RES_MAX_LINEUP_PREFERRED_EQUIP                         Legacy = 5  // 预设阵容优先装备最大数量
	Legacy_RES_MAX_FETTER_LAYER_COUNT                             Legacy = 5  // 最大的羁绊层数
	Legacy_RES_MAX_FUNC_PER_SKILL                                 Legacy = 4  // 技能效果最大数量
	Legacy_RES_MAX_CHARTS_FUNC                                    Legacy = 5  // 排行榜最大功能数量
	Legacy_RES_LORD_DETAILS_ITEMS_COUNT                           Legacy = 6  // 领主资料项长度
	Legacy_RES_LORD_FILE_ITEMS_COUNT                              Legacy = 4  // 领主档案项长度
	Legacy_RES_LORD_LEVEL_EXP_COUNT                               Legacy = 5  // 领主可配置等级经验配置长度
	Legacy_RES_LORD_LEVEL_EXP_GATHERER_COUNT                      Legacy = 3  // 领主经验获取条件最大配置数量
	Legacy_RES_LORD_LEVEL_EXP_GATHERER_PARAM_COUNT                Legacy = 3  // 领主经验获取条件参数最大数量
	Legacy_RES_LORD_Q_A_COUNT                                     Legacy = 40 // 领主问题数量
	Legacy_STR_32                                                 Legacy = 32
	Legacy_STR_64                                                 Legacy = 64
	Legacy_STR_128                                                Legacy = 128
	Legacy_STR_256                                                Legacy = 256
	Legacy_MAX_HERO_STORY_URL_LEN                                 Legacy = 256
	Legacy_MAX_URL_LEN                                            Legacy = 256
	Legacy_MAX_DIALOG_CONTENT_LEN                                 Legacy = 1024
	Legacy_MAX_EnergyType_NAME                                    Legacy = 32
	Legacy_MAX_HERO_SKILLNUM                                      Legacy = 6
	Legacy_MAX_MONSTER_SKILLNUM                                   Legacy = 10
	Legacy_MAX_ORGAN_SKILLNUM                                     Legacy = 3
	Legacy_RES_MAX_CHESS_DROP_EQUIP_RANDOM_COUNT                  Legacy = 3
	Legacy_RES_MAX_CHESS_NEW_DROP_EQUIP_COUNT                     Legacy = 5
	Legacy_MAX_SKILL_EFFECT_NUM                                   Legacy = 2
	Legacy_RES_MAX_RANDOMSKILLPASSIVE_LEN                         Legacy = 20
	Legacy_RES_MAX_TAILSMAN_BUFFLIB_LEN                           Legacy = 70
	Legacy_RES_MAX_SHENFUPICK_FILTERCONDITION_NUM                 Legacy = 2
	Legacy_RES_MAX_CONDITION_PER_PASSIVESKILL                     Legacy = 2
	Legacy_RES_MAX_PARAM_PER_SKILLFUNC                            Legacy = 18
	Legacy_RES_MAX_EXTRAPARAM_PER_SKILLFUNC                       Legacy = 1
	Legacy_RES_SKILL_DYNAMIC_INDICATOR_COMMON_PARAM_COUNT         Legacy = 10
	Legacy_RES_SKILL_DYNAMIC_INDICATOR_STATE_PARAM_COUNT          Legacy = 5
	Legacy_RES_SKILL_DYNAMIC_INDICATOR_STATE_COUNT                Legacy = 2
	Legacy_RES_MAX_PARAM_PER_ENERGYTYPE                           Legacy = 10
	Legacy_RES_MAX_PARAM_PER_WHEELTYPE                            Legacy = 5
	Legacy_RES_MAX_PARAM_PER_SKILLFUNC_MUTEXTI_ID                 Legacy = 4
	Legacy_RES_MAX_PARAM_PER_SKILLFUNC_OVERRIDE_ID                Legacy = 4
	Legacy_RES_MAX_PARAM_PER_SKILLFUNC_PASSIVE                    Legacy = 9
	Legacy_RES_MAX_PARAM_RANGEAPPOINTTYPE                         Legacy = 2
	Legacy_RES_MAX_SOLDIER_TYPE_NUM_PER_WAVE                      Legacy = 5 // 单波兵线中，士兵种类最大数量
	Legacy_RES_MAX_BRANCH_NUM_PER_WAVE                            Legacy = 5 // 分支路线
	Legacy_MAX_CODE_NAME                                          Legacy = 16
	Legacy_RES_MAX_ITEM_NAME_LEN                                  Legacy = 64   // 最大物品名称长度
	Legacy_RES_MAX_SYMBOL_FUNCEFT_NUM                             Legacy = 3    // 最大符文属性数
	Legacy_RES_MAX_SYMBOL_PVEEFT_NUM                              Legacy = 8    // 最大符文属性数
	Legacy_RES_MAX_HERO_TIPS_LEN                                  Legacy = 4096 // 局内小技巧长度
	Legacy_RES_MAX_HERO_RELATION_NUM                              Legacy = 3    // 英雄最大羁绊关系数
	Legacy_RES_MAX_ITEMSRC_CNT                                    Legacy = 10   // 物品来源最大数量
	Legacy_RES_MAX_SKILL_DESC_LEN                                 Legacy = 1024 // 技能描述长度
	Legacy_RES_MAX_SKILL_DESC_LEN_EX                              Legacy = 2048 // 技能描述扩展长度
	Legacy_RES_MAX_SKILLBUFF_DESC_LEN                             Legacy = 256  // 技能描述长度
	Legacy_RES_MAX_SKILL_UP_TIP_LEN                               Legacy = 256  // 技能升级提示长度
	Legacy_RES_MAX_RONGYU_DESC_LEN                                Legacy = 512  // 最大荣誉描述长度
	Legacy_RES_MAX_RANDOM_REWARD_PER_PVE_LEVEL                    Legacy = 5    // PVE关卡最多可配置多少随机奖励
	Legacy_RES_MAX_LEVEL_BUFF_COUNT                               Legacy = 4    // PVE关卡最大数量
	Legacy_RES_MAX_LEVEL_COMPENSATE_CNT                           Legacy = 5    // 关卡收益补偿最大组数
	Legacy_RES_MAX_MONSTER_DEAD_DROP_SHENFU_CNT                   Legacy = 5    // 怪物死亡最大掉落神符数
	Legacy_MAX_HERO_ATTEND_BATTLE_NUM                             Legacy = 5    // 一个关卡最多几个英雄参战
	Legacy_RES_MAX_STAR_NUM_PER_LEVEL                             Legacy = 3    // 一个关卡最多可以获得几星
	Legacy_RES_MAX_STAR_CONDITION_COUNT                           Legacy = 3    // 一个星级评价最多有几个条件
	Legacy_RES_MAX_DESC_LEN                                       Legacy = 256  // 游戏中中文字符串长度
	Legacy_RES_TEXT_CONFIG_MAX_LEN                                Legacy = 1024 // 99号表文本配置切页字符长度
	Legacy_RES_MAX_TEXT_LEN                                       Legacy = 2048 // 游戏中文本区域最大长度
	Legacy_RES_MAX_STAR_CONDITION_KEY_CNT                         Legacy = 4    // 单个星级条件最大有几个Key
	Legacy_RES_MAX_STAR_CONDITION_VALUE_CNT                       Legacy = 2    // 单个星级条件最大有几个Value
	Legacy_RES_TEXT_KEY_LEN                                       Legacy = 64
	Legacy_RES_MAX_INCOME_ALLOC_COUNT                             Legacy = 5   // 收益分配组数
	Legacy_RES_MAX_INCOME_RULE_COUNT                              Legacy = 4   // 收益规则个数
	Legacy_RES_MAX_ADVENTURE_DIFFICULTY_NUM                       Legacy = 4   // 闯关难度个数
	Legacy_RES_MAX_CHAPTER_DESC_LEN                               Legacy = 256 // 章节描述最大长度
	Legacy_RES_MAX_PVE_REVIVE_NUM                                 Legacy = 3   // PVE最大复活次数
	Legacy_RES_MAX_UNLOCKSKILL_PASSNUM                            Legacy = 3   // 召唤师技能被动技能数
	Legacy_RES_MAX_HEROSKIN_NAME_LEN                              Legacy = 64  // 英雄皮肤名称
	Legacy_RES_MAX_HEROSKIN_PARTSHARE_DESC_LEN                    Legacy = 128 // 部件分享描述
	Legacy_RES_MAX_HEROSKIN_DESC_LEN                              Legacy = 256 // 英雄皮肤描述
	Legacy_RES_MAX_SKIN_ATTR                                      Legacy = 2   // 英雄皮肤属性
	Legacy_RES_MAX_SKIN_FEATURE                                   Legacy = 16  // 英雄皮肤特性最大个数
	Legacy_RES_MAX_NAME_LEN                                       Legacy = 64  // 最大名字长度
	Legacy_RES_MAX_SKIN_SHAREPIC_LEN                              Legacy = 64  // 最大皮肤分享名字长度
	Legacy_RES_MAX_SKIN_FEATURE_ICON_PATH_LEN                     Legacy = 32  // 皮肤特性图片最大长度
	Legacy_RES_MAX_SKIN_FEATURE_DESC_LEN                          Legacy = 128 // 皮肤特性描述最大长度
	Legacy_RES_MAX_SKIN_VIDEO_URL_LEN                             Legacy = 128 // 皮肤跳转URL
	Legacy_RES_MAX_BATTLE_EFFECT_PREVIEW_URL_LEN                  Legacy = 128 // 局内效果预览URL
	Legacy_RES_SHOP_ITEM_TIME_LEN                                 Legacy = 16  // 商店上下架时间长度
	Legacy_RES_HEROSKIN_SHOP_TIME_LEN                             Legacy = 16  // 英雄皮肤相关时间长度
	Legacy_RES_INCOME_CHANGERATE_LEN                              Legacy = 5   // 收益改变比例组数
	Legacy_RES_MAX_HERO_JOBFEATURE_LEN                            Legacy = 2   // 英雄最大职业描述个数
	Legacy_RES_MAX_SKIN_PROMOTION_NUM                             Legacy = 5   // 最大的皮肤促销数量
	Legacy_RES_MAX_HERO_WAKE_DESC                                 Legacy = 512 // 英雄觉醒描述
	Legacy_RES_MAX_HERO_ATTACK_RANGE_LEN                          Legacy = 16  // 攻击范围描述长度
	Legacy_RES_EQUIP_IN_BATTLE_NAME_LEN_MAX                       Legacy = 64  // 局内装备名称长度
	Legacy_RES_EQUIP_IN_BATTLE_DESC_LEN_MAX                       Legacy = 256 // 局内装备描述长度
	Legacy_RES_EQUIP_IN_BATTLE_BUFF_DESC_LEN_MAX                  Legacy = 512 // 局内装备BUFF描述长度
	Legacy_RES_EQUIP_IN_BATTLE_MUTEX_EQUIP_COUNT                  Legacy = 10  // 互斥装备组装备最大个数
	Legacy_RES_HERO_EQUIP_PRICE_TYPE_COUNT                        Legacy = 16  // 装备价值计算分类最大个数
	Legacy_RES_EQUIP_IN_BATTLE_REQUIRED_ID_LEN_MAX                Legacy = 64  // 局内装备必要装备ID字符串最大长度
	Legacy_RES_EQUIP_ID_BELONG_LEVEL_LEN_MAX                      Legacy = 256 // 专属关卡的装备ID字符串最大长度
	Legacy_RES_EQUIP_ID_FORBID_LEVEL_LEN_MAX                      Legacy = 256 // 屏蔽关卡的装备ID字符串最大长度
	Legacy_RES_EQUIP_ID_PREEQUIP_LEN_MAX                          Legacy = 256 // 前置装备ID字符串最大长度
	Legacy_RES_EQUIP_ID_FORBID_LEVEL_SHOP_LEN_MAX                 Legacy = 256 // 屏蔽关卡的商店装备ID字符串最大长度
	Legacy_RES_EQUIP_PRICE_RAISE_LEN_MAX                          Legacy = 256 // 装备价格递增字符串最大长度
	Legacy_RES_EQUIP_IN_BATTLE_PASSIVE_SKILL_COUNT_MAX            Legacy = 4   // 局内装备被动技能最大数量
	Legacy_RES_EQUIP_IN_BATTLE_ACTIVE_SKILL_COUNT_MAX             Legacy = 2   // 局内装备主动技能最大数量
	Legacy_RES_EQUIP_ADDITION_RELATIVE_MAX_NUM                    Legacy = 2   // 装备附加羁绊上限
	Legacy_RES_EQUIP_IN_BATTLE_EFFECT_COMBINE_COUNT_MAX           Legacy = 3   // 局内装备效果组合最大数量
	Legacy_RES_EQUIP_IN_BATTLE_RECOMMEND_COUNT_MAX                Legacy = 12  // 局内装备推荐最大数量
	Legacy_RES_EQUIP_IN_BATTLE_PASSIVE_RMV_SKILLFUNC_CNT          Legacy = 3   // 局内装备被动拔除技能效果个数
	Legacy_RES_MAX_UNUSE_SKILLCNT                                 Legacy = 5
	Legacy_RES_MAX_PICK_RULE_PARAM_NUM                            Legacy = 4    // PICK规则补充参数个数
	Legacy_RES_MAX_FLOAT_TEXT_LEN                                 Legacy = 64   // 局内飘字长度
	Legacy_RES_MAX_GAME_MATCH_LEN                                 Legacy = 256  // 比赛名称长度
	Legacy_RES_MAX_VOICE_INTERACTION_CONDITION_NUM                Legacy = 10   // 交互语音最大条件数
	Legacy_RES_MAX_SKILL_PROPERTY_DESCRIPTION_NAME                Legacy = 32   // 技能描述属性类型名的长度
	Legacy_RES_MAX_SKILL_PROPERTY_DESCRIPTION_LEN                 Legacy = 5    // 技能描述属性类型的个数
	Legacy_RES_MAX_SKILL_PROPERTY_DESCRIPTION_VALUE               Legacy = 32   // 技能描述属性数值的长度
	Legacy_RES_MAX_PLAYERS_ONECAMP_LIMIT                          Legacy = 10   // 单局单阵营最大玩家数量
	Legacy_RES_MAX_SPEED_ADJUST_STEP_CNT                          Legacy = 8    // 速度调校最大分段数量
	Legacy_RES_MAX_DEVICE_NAME_LEN                                Legacy = 64   // 设备名长度
	Legacy_RES_MAX_DEVICE_FUNC_LEN                                Legacy = 12   // 设备功能开关总数
	Legacy_RES_MAX_DEVICE_FUNC_DEFAULT_VALUE                      Legacy = 10   // 设备功能开关默认值
	Legacy_RES_DEVICE_CONF_DEFAULT_VALUE                          Legacy = 100  // 设备默认档位默认值
	Legacy_RES_MAX_DEVICE_UI_CONFIG_CHAR_LEN                      Legacy = 30   // 战斗UI适配配置字符最大长度
	Legacy_RES_MAX_HERO_JOB_BUFF_ATTR_CNT                         Legacy = 3    // 英雄职业属性
	Legacy_RES_MAX_HERO_JOB_BUFF_CNT                              Legacy = 2    // 英雄职业Buff个数
	Legacy_RES_COMMON_KEY_VALUE_ARG_NUM                           Legacy = 3    // 通用的KeyValue定义中参数最大个数
	Legacy_RES_MAX_SKILLMARK_LAYEREFFECT_CNT                      Legacy = 12   // 技能印记特效最大个数
	Legacy_RES_MAX_ENERGY_STATE                                   Legacy = 2    // 能量状态最大个数
	Legacy_RES_MAX_BANK_SOURCE_LEN                                Legacy = 128  // Bank资源最大长度
	Legacy_RES_MAX_HERO_EXTRA_BRANCHROAD_CNT                      Legacy = 2    // 英雄额外推荐分路种类
	Legacy_RES_MAX_POOL_CHAIN_LEN                                 Legacy = 4    // 内存池最大长度
	Legacy_RES_MAX_BATTLE_ROYALE_EVALUATE_POINT_LIMIT_NUM         Legacy = 5    // 6种评价SSS SS S A B C的5个分界线数值
	Legacy_RES_BATTLE_ROYALE_GRADE_NAME_LEN                       Legacy = 64   // 逃杀段位名称长度
	Legacy_RES_BATTLE_PROJ8_NAME_LEN                              Legacy = 64   // proj8局内成就名称
	Legacy_RES_BATTLE_PROJ8_DESC_LEN                              Legacy = 128  // proj8局内成就描述
	Legacy_RES_BATTLE_PROJ8_COND_NUM                              Legacy = 2    // proj8局内成就条件个数
	Legacy_RES_MAX_ACTION_NAME_LEN                                Legacy = 64   // 动作包名称长度
	Legacy_RES_MAX_ACTION_DESC_LEN                                Legacy = 512  // 动作包描述长度
	Legacy_RES_MAX_DIGIT_FLOAT_INTERVAL                           Legacy = 10   // 局内数字飘字区间
	Legacy_RES_MAX_PVE_AI_LEVEL_NUM                               Legacy = 4    // PVE难度个数
	Legacy_RES_MAX_PVE_REVIVE_COUPONS_NUM                         Legacy = 5    // PVE复活点券
	Legacy_RES_MAX_PVE_LVEVL_MEMORY_PIECE_LEN                     Legacy = 128  // PVE地图记忆碎片掉落
	Legacy_RES_MAX_PRELOAD_ACTOR_LIST_STRING_LEN                  Legacy = 1024 // 预加载单位数据串最大长度
	Legacy_RES_MAX_DYING_HP_REDUCE_RATE_NUM                       Legacy = 6    // 濒死掉血速度个数
	Legacy_RES_MAX_SERIES_SKIN_SYSTEM_BROADCAST_TEXT_LEN          Legacy = 512  // 系列皮肤播报文本最大长度
	Legacy_RES_MAX_SERIES_SKIN_SYSTEM_BROADCAST_KILL_TEXT_ARR_LEN Legacy = 5    // 系列皮肤播击杀播报数组长度
	Legacy_RES_MAX_BATTLE_INTERACTION_PARAMETER_NUM               Legacy = 5    // 局内战斗互动事件最大参数
	Legacy_RES_MAX_KILL_ACTION_PARAMETER_NUM                      Legacy = 3    // 技能效果击杀表现最大参数
	Legacy_RES_MAX_PRESET_CHESS_PER_COMBINE                       Legacy = 10   // 单条预设棋子最多包含多少实体
	Legacy_RES_MAX_CHESS_MOVE_TEST_PER_COMBINE                    Legacy = 20   // 单条棋子移动测试最多包含多少实体
	Legacy_RES_MAX_CHESS_CHESS_CAMP_MAXNUM                        Legacy = 5    // 自走棋阵营列数
	Legacy_RES_MAX_CHESS_CARD_QUALITY_NUM                         Legacy = 5    // 自走棋最大品质
	Legacy_RES_MAX_CHESS_CARD_PICK_NUM                            Legacy = 5    // 自走棋抽卡最大个数
	Legacy_RES_MAX_CHESS_CARD_NUM_PER_QUALITY                     Legacy = 20   // 自走棋每个品质最大卡片数
	Legacy_RES_MAX_CHESS_EFFECT_INFO_EFFECT_NUM                   Legacy = 3    // 自走棋组合效果每组效果数量
	Legacy_RES_MAX_CHESS_EFFECT_INFO_PREEFFECT_NUM                Legacy = 1    // 自走棋前置组合效果每组效果数量
	Legacy_RES_MAX_CHESS_HERO_COMBO_NUM                           Legacy = 6    // 自走棋连招技能最大数量
	Legacy_RES_MAX_CHESS_FORMATION_COUNT                          Legacy = 10   // 自走棋快速阵型同位置最大数量
	Legacy_RES_MAX_CHESS_RESET_PASSIVE_SKILL_NUM                  Legacy = 2    // 自走棋重置被动技能最大数量
	Legacy_RES_MAX_CHESS_PRE_CLEAR_SKILL_COMBINE_NUM              Legacy = 2    // 自走棋前置清除技能效果组合最大数量
	Legacy_RES_MAX_CHESS_POST_CLEAR_SKILL_COMBINE_NUM             Legacy = 3    // 自走棋后置清除技能效果组合最大数量
	Legacy_RES_MAX_CHESS_RECOMEND_EQUIP_COUNT                     Legacy = 20   // 自走棋棋子推荐装备个数
	Legacy_RES_SCENESKIN_PROPS_MAX_NUM                            Legacy = 5    // 自走棋地图属性最大数量
	Legacy_RES_MAX_CHESS_POSITION_ROW_COUNT                       Legacy = 4
	Legacy_RES_MAX_CHESS_TALENT_PARAM_NUM                         Legacy = 2   // 模拟战天赋自定义参数个数
	Legacy_RES_MAX_CHESS_TALENT_REBUILD_NUM                       Legacy = 6   // 模拟战天赋重铸个数
	Legacy_RES_MAX_CHESS_TALENT_POSCFG_NUM                        Legacy = 5   // 模拟战天赋位置最大随机个数
	Legacy_RES_MAX_CHESS_TALENT_QUALITY_NUM                       Legacy = 7   // 模拟战天赋品质最大等级
	Legacy_RES_MAX_CHESS_TALENT_CP_HERO_NUM                       Legacy = 6   // 模拟战天赋CP最大英雄个数
	Legacy_RES_MAX_CHESS_TALENT_POSITION_NUM                      Legacy = 5   // 模拟战天赋最大位置个数
	Legacy_RES_MAX_NUMEN_INTERACT_LEN                             Legacy = 6   // 模拟战宠物交互表演个数
	Legacy_RES_MAX_CHESS_TALENT_FIX_LEVEL_DROP_NUM                Legacy = 2   // 模拟战天赋固定等级掉落个数
	Legacy_RES_MAX_CHESS_TALENT_CONDITION_PARAM_NUM               Legacy = 6   // 模拟战天赋达成条件参数个数
	Legacy_RES_MAX_CHESS_TALENT_PROMOTE_PARAM_NUM                 Legacy = 6   // 模拟战天赋加成参数个数
	Legacy_RES_MAX_CHESS_PREPARE_PHASE_MMR_DURATION_NUM           Legacy = 7   // 模拟战摆放阶段段位时长数组长度
	Legacy_RES_MAX_CHESS_SUB_PROC_PARAMS_NUM                      Legacy = 5   // 模拟战子环节参数数量
	Legacy_RES_MAX_CHESS_MMR_AI_BATTLE_SCORE_NUM                  Legacy = 7   // 模拟战AI段位战斗力数组长度
	Legacy_RES_MAX_CHESS_SOLO_AI_BATTLE_SCORE_NUM                 Legacy = 3   // 模拟战AI单机战斗力数组长度
	Legacy_RES_MAX_CHESS_EXCEED_BATTLE_SCORE_NUM                  Legacy = 5   // 模拟战AI超战力数组长度
	Legacy_RES_MAX_CHESS_RANK_GOLD_NUM                            Legacy = 8   // 模拟战排名金币数量
	Legacy_RES_MAX_PERFEFT_HEROBIND_CNT                           Legacy = 20  // 局内特效绑定英雄最大数
	Legacy_RES_MAX_HIGHLIGHT_LABEL_LEN                            Legacy = 32  // 高光标签的最大长度
	Legacy_RES_MAX_HIGHLIGHT_DESC_LEN                             Legacy = 128 // 高光说明的最大长度
	Legacy_RES_MAX_HIGHLIGHT_HERO_NUM                             Legacy = 5   // 高光作用英雄最大数量
	Legacy_RES_MAX_HIGHLIGHT_FILTER_HERO_NUM                      Legacy = 5   // 高光过滤英雄最大数量
	Legacy_PROJECT8_MAX_ROUND_STATE_COUNT                         Legacy = 5   // 同一回合最大状态数量
	Legacy_PROJECT8_MAX_OVER_TIME_BUFF_COUNT                      Legacy = 2   // 加时赛BUFF最大数量
	Legacy_RES_EQUIP_IN_BATTLE_LEVEL_MAX                          Legacy = 3   // 局内装备等级最大值
	Legacy_RES_CHESS_RECOMMEND_MAX_HERO_COUNT                     Legacy = 9   // 推荐阵容最大英雄数
	Legacy_RES_UGC_FINAL_DIFFICULTY                               Legacy = 255 // 终章难度
	Legacy_RES_MAX_NEWBIE_GUIDE_TRIGGER_TIME_PARAM_NUM            Legacy = 4
	Legacy_RES_MAX_NEWBIE_GUIDE_TRIGGER_CONDITION_PARAM_NUM       Legacy = 3
	Legacy_RES_MAX_NEWBIE_TRIGGER_TIME_NUM                        Legacy = 2
	Legacy_RES_MAX_NEWBIE_TRIGGER_CONDITION_NUM                   Legacy = 2
	Legacy_RES_MAX_NEWBIE_TRIGGER_SKIP_CONDITION_NUM              Legacy = 2
	Legacy_RES_MAX_NEWBIE_ACTION_PARAM_NUM                        Legacy = 10
	Legacy_RES_MAX_NEWBIE_UI_DEPTH_NUM                            Legacy = 5
	Legacy_CHESS_COMBINE_MAX_CNT                                  Legacy = 99 // 单次合成棋子最大数量，废弃
	Legacy_CHESS_RESOLVE_MAX_CNT                                  Legacy = 99 // 单次分解的棋子最大数量，废弃
	Legacy_FREE_GROUP_MAX_CNT                                     Legacy = 5  // 限免组别最大数量
	Legacy_GIFT_STRATEGY_MAX_CNT                                  Legacy = 10 // 礼包保底策略最大数量
	Legacy_LORDRECENTRESULTS_HISTORYSEASON_MAX_CNT                Legacy = 3  // 棋手战绩结算历史赛季的最大数量
	Legacy_RES_MAX_LANGUAGE_CNT                                   Legacy = 10 // 最大语言种类
)

// Enum value maps for Legacy.
var (
	Legacy_name = map[int32]string{
		0:   "cs_res_data__reserved__",
		128: "MAX_PATH_LEN",
		32:  "MAX_ACTOR_NAME",
		64:  "MAX_DISTRICT_NAME_LEN",
		// Duplicate value: 128: "RES_MAX_ICON_LEN",
		1024: "RES_MAX_HERO_DESC_LEN",
		// Duplicate value: 32: "MAX_DISTRICT_SHORTNAME_LEN",
		3: "RES_MAX_MAINLINE_LEVEL_PARAM_NUM",
		// Duplicate value: 32: "RES_COMMON_TIME_LEN",
		4:   "RES_MAX_DEFINITE_REWARD_NUM",
		512: "RES_MAX_GLOBAL_TXT_VAL_LEN",
		// Duplicate value: 64: "RES_PLAT_OPENID_LEN",
		// Duplicate value: 64: "RES_COMMON_NAME_LEN",
		256: "RES_COMMON_DESC_LEN",
		5:   "RES_MAX_MATCH_AI_ID_NUM",
		// Duplicate value: 256: "RES_MAX_ITEM_DESC_LEN",
		// Duplicate value: 128: "RES_MAX_ITEM_SIMPDESC_LEN",
		// Duplicate value: 5: "RES_MAX_JUMP_LINK_NUM",
		8: "RES_MAX_ITEMEFT_PARAM_NUM",
		6: "RES_MAX_DROPITEM_NUM",
		// Duplicate value: 6: "RES_MAX_OBTAIN_PROP_WAY_NUM",
		// Duplicate value: 5: "RES_MAX_MAIL_AWARD_NUM",
		// Duplicate value: 256: "RES_MAIL_TITLE_LEN",
		// Duplicate value: 1024: "RES_MAIL_BODY_LEN",
		// Duplicate value: 3: "RES_MAX_UNLOCKCOND_NUM",
		// Duplicate value: 3: "RES_MAX_AICHKCOND_NUM",
		// Duplicate value: 5: "RES_MAX_AICHKSCORE_NUM",
		// Duplicate value: 8: "RES_MAX_EXP_BUF_GAMETYPE",
		// Duplicate value: 3: "RES_MAX_DAILY_OPENTIME_NUM",
		7: "RES_WEEKLY_OPENTIME_NUM",
		// Duplicate value: 5: "RES_SEASON_MAX_THEME_COUNT",
		// Duplicate value: 8: "RES_MAX_PVP_PLAYER_NUM",
		// Duplicate value: 5: "RES_MAX_CONDITION_PARAMCNT",
		2: "RES_MAX_TOKEN_LEVEL_AWARD_NUM",
		// Duplicate value: 4: "RES_MAX_TOKEN_DAILY_TASK_POOL_NUM",
		// Duplicate value: 4: "RES_MAX_TOKEN_WEEKLY_TASK_POOL_NUM",
		50: "RES_MAX_TOKEN_HANGUP_VALUE_NUM",
		// Duplicate value: 5: "RES_MAX_CHESS_TASKSTAGE_CNT",
		// Duplicate value: 3: "RES_MAX_CHESS_HERO_MAX_RELATIVE",
		// Duplicate value: 5: "RES_MAX_CHESS_HERO_SKILL_COUNT",
		// Duplicate value: 2: "RES_MAX_PRE_EQUIP_COUNT",
		// Duplicate value: 3: "RES_MAX_GETWAY_COUNT",
		// Duplicate value: 5: "RES_MAX_LORD_NUM",
		10: "RES_MAX_LINEUP_HERO_NUM",
		// Duplicate value: 3: "RES_MAX_LINEUP_HERO_EQUIP_NUM",
		// Duplicate value: 5: "RES_MAX_LINEUP_PREFERRED_EQUIP",
		// Duplicate value: 5: "RES_MAX_FETTER_LAYER_COUNT",
		// Duplicate value: 4: "RES_MAX_FUNC_PER_SKILL",
		// Duplicate value: 5: "RES_MAX_CHARTS_FUNC",
		// Duplicate value: 6: "RES_LORD_DETAILS_ITEMS_COUNT",
		// Duplicate value: 4: "RES_LORD_FILE_ITEMS_COUNT",
		// Duplicate value: 5: "RES_LORD_LEVEL_EXP_COUNT",
		// Duplicate value: 3: "RES_LORD_LEVEL_EXP_GATHERER_COUNT",
		// Duplicate value: 3: "RES_LORD_LEVEL_EXP_GATHERER_PARAM_COUNT",
		40: "RES_LORD_Q_A_COUNT",
		// Duplicate value: 32: "STR_32",
		// Duplicate value: 64: "STR_64",
		// Duplicate value: 128: "STR_128",
		// Duplicate value: 256: "STR_256",
		// Duplicate value: 256: "MAX_HERO_STORY_URL_LEN",
		// Duplicate value: 256: "MAX_URL_LEN",
		// Duplicate value: 1024: "MAX_DIALOG_CONTENT_LEN",
		// Duplicate value: 32: "MAX_EnergyType_NAME",
		// Duplicate value: 6: "MAX_HERO_SKILLNUM",
		// Duplicate value: 10: "MAX_MONSTER_SKILLNUM",
		// Duplicate value: 3: "MAX_ORGAN_SKILLNUM",
		// Duplicate value: 3: "RES_MAX_CHESS_DROP_EQUIP_RANDOM_COUNT",
		// Duplicate value: 5: "RES_MAX_CHESS_NEW_DROP_EQUIP_COUNT",
		// Duplicate value: 2: "MAX_SKILL_EFFECT_NUM",
		20: "RES_MAX_RANDOMSKILLPASSIVE_LEN",
		70: "RES_MAX_TAILSMAN_BUFFLIB_LEN",
		// Duplicate value: 2: "RES_MAX_SHENFUPICK_FILTERCONDITION_NUM",
		// Duplicate value: 2: "RES_MAX_CONDITION_PER_PASSIVESKILL",
		18: "RES_MAX_PARAM_PER_SKILLFUNC",
		1:  "RES_MAX_EXTRAPARAM_PER_SKILLFUNC",
		// Duplicate value: 10: "RES_SKILL_DYNAMIC_INDICATOR_COMMON_PARAM_COUNT",
		// Duplicate value: 5: "RES_SKILL_DYNAMIC_INDICATOR_STATE_PARAM_COUNT",
		// Duplicate value: 2: "RES_SKILL_DYNAMIC_INDICATOR_STATE_COUNT",
		// Duplicate value: 10: "RES_MAX_PARAM_PER_ENERGYTYPE",
		// Duplicate value: 5: "RES_MAX_PARAM_PER_WHEELTYPE",
		// Duplicate value: 4: "RES_MAX_PARAM_PER_SKILLFUNC_MUTEXTI_ID",
		// Duplicate value: 4: "RES_MAX_PARAM_PER_SKILLFUNC_OVERRIDE_ID",
		9: "RES_MAX_PARAM_PER_SKILLFUNC_PASSIVE",
		// Duplicate value: 2: "RES_MAX_PARAM_RANGEAPPOINTTYPE",
		// Duplicate value: 5: "RES_MAX_SOLDIER_TYPE_NUM_PER_WAVE",
		// Duplicate value: 5: "RES_MAX_BRANCH_NUM_PER_WAVE",
		16: "MAX_CODE_NAME",
		// Duplicate value: 64: "RES_MAX_ITEM_NAME_LEN",
		// Duplicate value: 3: "RES_MAX_SYMBOL_FUNCEFT_NUM",
		// Duplicate value: 8: "RES_MAX_SYMBOL_PVEEFT_NUM",
		4096: "RES_MAX_HERO_TIPS_LEN",
		// Duplicate value: 3: "RES_MAX_HERO_RELATION_NUM",
		// Duplicate value: 10: "RES_MAX_ITEMSRC_CNT",
		// Duplicate value: 1024: "RES_MAX_SKILL_DESC_LEN",
		2048: "RES_MAX_SKILL_DESC_LEN_EX",
		// Duplicate value: 256: "RES_MAX_SKILLBUFF_DESC_LEN",
		// Duplicate value: 256: "RES_MAX_SKILL_UP_TIP_LEN",
		// Duplicate value: 512: "RES_MAX_RONGYU_DESC_LEN",
		// Duplicate value: 5: "RES_MAX_RANDOM_REWARD_PER_PVE_LEVEL",
		// Duplicate value: 4: "RES_MAX_LEVEL_BUFF_COUNT",
		// Duplicate value: 5: "RES_MAX_LEVEL_COMPENSATE_CNT",
		// Duplicate value: 5: "RES_MAX_MONSTER_DEAD_DROP_SHENFU_CNT",
		// Duplicate value: 5: "MAX_HERO_ATTEND_BATTLE_NUM",
		// Duplicate value: 3: "RES_MAX_STAR_NUM_PER_LEVEL",
		// Duplicate value: 3: "RES_MAX_STAR_CONDITION_COUNT",
		// Duplicate value: 256: "RES_MAX_DESC_LEN",
		// Duplicate value: 1024: "RES_TEXT_CONFIG_MAX_LEN",
		// Duplicate value: 2048: "RES_MAX_TEXT_LEN",
		// Duplicate value: 4: "RES_MAX_STAR_CONDITION_KEY_CNT",
		// Duplicate value: 2: "RES_MAX_STAR_CONDITION_VALUE_CNT",
		// Duplicate value: 64: "RES_TEXT_KEY_LEN",
		// Duplicate value: 5: "RES_MAX_INCOME_ALLOC_COUNT",
		// Duplicate value: 4: "RES_MAX_INCOME_RULE_COUNT",
		// Duplicate value: 4: "RES_MAX_ADVENTURE_DIFFICULTY_NUM",
		// Duplicate value: 256: "RES_MAX_CHAPTER_DESC_LEN",
		// Duplicate value: 3: "RES_MAX_PVE_REVIVE_NUM",
		// Duplicate value: 3: "RES_MAX_UNLOCKSKILL_PASSNUM",
		// Duplicate value: 64: "RES_MAX_HEROSKIN_NAME_LEN",
		// Duplicate value: 128: "RES_MAX_HEROSKIN_PARTSHARE_DESC_LEN",
		// Duplicate value: 256: "RES_MAX_HEROSKIN_DESC_LEN",
		// Duplicate value: 2: "RES_MAX_SKIN_ATTR",
		// Duplicate value: 16: "RES_MAX_SKIN_FEATURE",
		// Duplicate value: 64: "RES_MAX_NAME_LEN",
		// Duplicate value: 64: "RES_MAX_SKIN_SHAREPIC_LEN",
		// Duplicate value: 32: "RES_MAX_SKIN_FEATURE_ICON_PATH_LEN",
		// Duplicate value: 128: "RES_MAX_SKIN_FEATURE_DESC_LEN",
		// Duplicate value: 128: "RES_MAX_SKIN_VIDEO_URL_LEN",
		// Duplicate value: 128: "RES_MAX_BATTLE_EFFECT_PREVIEW_URL_LEN",
		// Duplicate value: 16: "RES_SHOP_ITEM_TIME_LEN",
		// Duplicate value: 16: "RES_HEROSKIN_SHOP_TIME_LEN",
		// Duplicate value: 5: "RES_INCOME_CHANGERATE_LEN",
		// Duplicate value: 2: "RES_MAX_HERO_JOBFEATURE_LEN",
		// Duplicate value: 5: "RES_MAX_SKIN_PROMOTION_NUM",
		// Duplicate value: 512: "RES_MAX_HERO_WAKE_DESC",
		// Duplicate value: 16: "RES_MAX_HERO_ATTACK_RANGE_LEN",
		// Duplicate value: 64: "RES_EQUIP_IN_BATTLE_NAME_LEN_MAX",
		// Duplicate value: 256: "RES_EQUIP_IN_BATTLE_DESC_LEN_MAX",
		// Duplicate value: 512: "RES_EQUIP_IN_BATTLE_BUFF_DESC_LEN_MAX",
		// Duplicate value: 10: "RES_EQUIP_IN_BATTLE_MUTEX_EQUIP_COUNT",
		// Duplicate value: 16: "RES_HERO_EQUIP_PRICE_TYPE_COUNT",
		// Duplicate value: 64: "RES_EQUIP_IN_BATTLE_REQUIRED_ID_LEN_MAX",
		// Duplicate value: 256: "RES_EQUIP_ID_BELONG_LEVEL_LEN_MAX",
		// Duplicate value: 256: "RES_EQUIP_ID_FORBID_LEVEL_LEN_MAX",
		// Duplicate value: 256: "RES_EQUIP_ID_PREEQUIP_LEN_MAX",
		// Duplicate value: 256: "RES_EQUIP_ID_FORBID_LEVEL_SHOP_LEN_MAX",
		// Duplicate value: 256: "RES_EQUIP_PRICE_RAISE_LEN_MAX",
		// Duplicate value: 4: "RES_EQUIP_IN_BATTLE_PASSIVE_SKILL_COUNT_MAX",
		// Duplicate value: 2: "RES_EQUIP_IN_BATTLE_ACTIVE_SKILL_COUNT_MAX",
		// Duplicate value: 2: "RES_EQUIP_ADDITION_RELATIVE_MAX_NUM",
		// Duplicate value: 3: "RES_EQUIP_IN_BATTLE_EFFECT_COMBINE_COUNT_MAX",
		12: "RES_EQUIP_IN_BATTLE_RECOMMEND_COUNT_MAX",
		// Duplicate value: 3: "RES_EQUIP_IN_BATTLE_PASSIVE_RMV_SKILLFUNC_CNT",
		// Duplicate value: 5: "RES_MAX_UNUSE_SKILLCNT",
		// Duplicate value: 4: "RES_MAX_PICK_RULE_PARAM_NUM",
		// Duplicate value: 64: "RES_MAX_FLOAT_TEXT_LEN",
		// Duplicate value: 256: "RES_MAX_GAME_MATCH_LEN",
		// Duplicate value: 10: "RES_MAX_VOICE_INTERACTION_CONDITION_NUM",
		// Duplicate value: 32: "RES_MAX_SKILL_PROPERTY_DESCRIPTION_NAME",
		// Duplicate value: 5: "RES_MAX_SKILL_PROPERTY_DESCRIPTION_LEN",
		// Duplicate value: 32: "RES_MAX_SKILL_PROPERTY_DESCRIPTION_VALUE",
		// Duplicate value: 10: "RES_MAX_PLAYERS_ONECAMP_LIMIT",
		// Duplicate value: 8: "RES_MAX_SPEED_ADJUST_STEP_CNT",
		// Duplicate value: 64: "RES_MAX_DEVICE_NAME_LEN",
		// Duplicate value: 12: "RES_MAX_DEVICE_FUNC_LEN",
		// Duplicate value: 10: "RES_MAX_DEVICE_FUNC_DEFAULT_VALUE",
		100: "RES_DEVICE_CONF_DEFAULT_VALUE",
		30:  "RES_MAX_DEVICE_UI_CONFIG_CHAR_LEN",
		// Duplicate value: 3: "RES_MAX_HERO_JOB_BUFF_ATTR_CNT",
		// Duplicate value: 2: "RES_MAX_HERO_JOB_BUFF_CNT",
		// Duplicate value: 3: "RES_COMMON_KEY_VALUE_ARG_NUM",
		// Duplicate value: 12: "RES_MAX_SKILLMARK_LAYEREFFECT_CNT",
		// Duplicate value: 2: "RES_MAX_ENERGY_STATE",
		// Duplicate value: 128: "RES_MAX_BANK_SOURCE_LEN",
		// Duplicate value: 2: "RES_MAX_HERO_EXTRA_BRANCHROAD_CNT",
		// Duplicate value: 4: "RES_MAX_POOL_CHAIN_LEN",
		// Duplicate value: 5: "RES_MAX_BATTLE_ROYALE_EVALUATE_POINT_LIMIT_NUM",
		// Duplicate value: 64: "RES_BATTLE_ROYALE_GRADE_NAME_LEN",
		// Duplicate value: 64: "RES_BATTLE_PROJ8_NAME_LEN",
		// Duplicate value: 128: "RES_BATTLE_PROJ8_DESC_LEN",
		// Duplicate value: 2: "RES_BATTLE_PROJ8_COND_NUM",
		// Duplicate value: 64: "RES_MAX_ACTION_NAME_LEN",
		// Duplicate value: 512: "RES_MAX_ACTION_DESC_LEN",
		// Duplicate value: 10: "RES_MAX_DIGIT_FLOAT_INTERVAL",
		// Duplicate value: 4: "RES_MAX_PVE_AI_LEVEL_NUM",
		// Duplicate value: 5: "RES_MAX_PVE_REVIVE_COUPONS_NUM",
		// Duplicate value: 128: "RES_MAX_PVE_LVEVL_MEMORY_PIECE_LEN",
		// Duplicate value: 1024: "RES_MAX_PRELOAD_ACTOR_LIST_STRING_LEN",
		// Duplicate value: 6: "RES_MAX_DYING_HP_REDUCE_RATE_NUM",
		// Duplicate value: 512: "RES_MAX_SERIES_SKIN_SYSTEM_BROADCAST_TEXT_LEN",
		// Duplicate value: 5: "RES_MAX_SERIES_SKIN_SYSTEM_BROADCAST_KILL_TEXT_ARR_LEN",
		// Duplicate value: 5: "RES_MAX_BATTLE_INTERACTION_PARAMETER_NUM",
		// Duplicate value: 3: "RES_MAX_KILL_ACTION_PARAMETER_NUM",
		// Duplicate value: 10: "RES_MAX_PRESET_CHESS_PER_COMBINE",
		// Duplicate value: 20: "RES_MAX_CHESS_MOVE_TEST_PER_COMBINE",
		// Duplicate value: 5: "RES_MAX_CHESS_CHESS_CAMP_MAXNUM",
		// Duplicate value: 5: "RES_MAX_CHESS_CARD_QUALITY_NUM",
		// Duplicate value: 5: "RES_MAX_CHESS_CARD_PICK_NUM",
		// Duplicate value: 20: "RES_MAX_CHESS_CARD_NUM_PER_QUALITY",
		// Duplicate value: 3: "RES_MAX_CHESS_EFFECT_INFO_EFFECT_NUM",
		// Duplicate value: 1: "RES_MAX_CHESS_EFFECT_INFO_PREEFFECT_NUM",
		// Duplicate value: 6: "RES_MAX_CHESS_HERO_COMBO_NUM",
		// Duplicate value: 10: "RES_MAX_CHESS_FORMATION_COUNT",
		// Duplicate value: 2: "RES_MAX_CHESS_RESET_PASSIVE_SKILL_NUM",
		// Duplicate value: 2: "RES_MAX_CHESS_PRE_CLEAR_SKILL_COMBINE_NUM",
		// Duplicate value: 3: "RES_MAX_CHESS_POST_CLEAR_SKILL_COMBINE_NUM",
		// Duplicate value: 20: "RES_MAX_CHESS_RECOMEND_EQUIP_COUNT",
		// Duplicate value: 5: "RES_SCENESKIN_PROPS_MAX_NUM",
		// Duplicate value: 4: "RES_MAX_CHESS_POSITION_ROW_COUNT",
		// Duplicate value: 2: "RES_MAX_CHESS_TALENT_PARAM_NUM",
		// Duplicate value: 6: "RES_MAX_CHESS_TALENT_REBUILD_NUM",
		// Duplicate value: 5: "RES_MAX_CHESS_TALENT_POSCFG_NUM",
		// Duplicate value: 7: "RES_MAX_CHESS_TALENT_QUALITY_NUM",
		// Duplicate value: 6: "RES_MAX_CHESS_TALENT_CP_HERO_NUM",
		// Duplicate value: 5: "RES_MAX_CHESS_TALENT_POSITION_NUM",
		// Duplicate value: 6: "RES_MAX_NUMEN_INTERACT_LEN",
		// Duplicate value: 2: "RES_MAX_CHESS_TALENT_FIX_LEVEL_DROP_NUM",
		// Duplicate value: 6: "RES_MAX_CHESS_TALENT_CONDITION_PARAM_NUM",
		// Duplicate value: 6: "RES_MAX_CHESS_TALENT_PROMOTE_PARAM_NUM",
		// Duplicate value: 7: "RES_MAX_CHESS_PREPARE_PHASE_MMR_DURATION_NUM",
		// Duplicate value: 5: "RES_MAX_CHESS_SUB_PROC_PARAMS_NUM",
		// Duplicate value: 7: "RES_MAX_CHESS_MMR_AI_BATTLE_SCORE_NUM",
		// Duplicate value: 3: "RES_MAX_CHESS_SOLO_AI_BATTLE_SCORE_NUM",
		// Duplicate value: 5: "RES_MAX_CHESS_EXCEED_BATTLE_SCORE_NUM",
		// Duplicate value: 8: "RES_MAX_CHESS_RANK_GOLD_NUM",
		// Duplicate value: 20: "RES_MAX_PERFEFT_HEROBIND_CNT",
		// Duplicate value: 32: "RES_MAX_HIGHLIGHT_LABEL_LEN",
		// Duplicate value: 128: "RES_MAX_HIGHLIGHT_DESC_LEN",
		// Duplicate value: 5: "RES_MAX_HIGHLIGHT_HERO_NUM",
		// Duplicate value: 5: "RES_MAX_HIGHLIGHT_FILTER_HERO_NUM",
		// Duplicate value: 5: "PROJECT8_MAX_ROUND_STATE_COUNT",
		// Duplicate value: 2: "PROJECT8_MAX_OVER_TIME_BUFF_COUNT",
		// Duplicate value: 3: "RES_EQUIP_IN_BATTLE_LEVEL_MAX",
		// Duplicate value: 9: "RES_CHESS_RECOMMEND_MAX_HERO_COUNT",
		255: "RES_UGC_FINAL_DIFFICULTY",
		// Duplicate value: 4: "RES_MAX_NEWBIE_GUIDE_TRIGGER_TIME_PARAM_NUM",
		// Duplicate value: 3: "RES_MAX_NEWBIE_GUIDE_TRIGGER_CONDITION_PARAM_NUM",
		// Duplicate value: 2: "RES_MAX_NEWBIE_TRIGGER_TIME_NUM",
		// Duplicate value: 2: "RES_MAX_NEWBIE_TRIGGER_CONDITION_NUM",
		// Duplicate value: 2: "RES_MAX_NEWBIE_TRIGGER_SKIP_CONDITION_NUM",
		// Duplicate value: 10: "RES_MAX_NEWBIE_ACTION_PARAM_NUM",
		// Duplicate value: 5: "RES_MAX_NEWBIE_UI_DEPTH_NUM",
		99: "CHESS_COMBINE_MAX_CNT",
		// Duplicate value: 99: "CHESS_RESOLVE_MAX_CNT",
		// Duplicate value: 5: "FREE_GROUP_MAX_CNT",
		// Duplicate value: 10: "GIFT_STRATEGY_MAX_CNT",
		// Duplicate value: 3: "LORDRECENTRESULTS_HISTORYSEASON_MAX_CNT",
		// Duplicate value: 10: "RES_MAX_LANGUAGE_CNT",
	}
	Legacy_value = map[string]int32{
		"cs_res_data__reserved__":                                0,
		"MAX_PATH_LEN":                                           128,
		"MAX_ACTOR_NAME":                                         32,
		"MAX_DISTRICT_NAME_LEN":                                  64,
		"RES_MAX_ICON_LEN":                                       128,
		"RES_MAX_HERO_DESC_LEN":                                  1024,
		"MAX_DISTRICT_SHORTNAME_LEN":                             32,
		"RES_MAX_MAINLINE_LEVEL_PARAM_NUM":                       3,
		"RES_COMMON_TIME_LEN":                                    32,
		"RES_MAX_DEFINITE_REWARD_NUM":                            4,
		"RES_MAX_GLOBAL_TXT_VAL_LEN":                             512,
		"RES_PLAT_OPENID_LEN":                                    64,
		"RES_COMMON_NAME_LEN":                                    64,
		"RES_COMMON_DESC_LEN":                                    256,
		"RES_MAX_MATCH_AI_ID_NUM":                                5,
		"RES_MAX_ITEM_DESC_LEN":                                  256,
		"RES_MAX_ITEM_SIMPDESC_LEN":                              128,
		"RES_MAX_JUMP_LINK_NUM":                                  5,
		"RES_MAX_ITEMEFT_PARAM_NUM":                              8,
		"RES_MAX_DROPITEM_NUM":                                   6,
		"RES_MAX_OBTAIN_PROP_WAY_NUM":                            6,
		"RES_MAX_MAIL_AWARD_NUM":                                 5,
		"RES_MAIL_TITLE_LEN":                                     256,
		"RES_MAIL_BODY_LEN":                                      1024,
		"RES_MAX_UNLOCKCOND_NUM":                                 3,
		"RES_MAX_AICHKCOND_NUM":                                  3,
		"RES_MAX_AICHKSCORE_NUM":                                 5,
		"RES_MAX_EXP_BUF_GAMETYPE":                               8,
		"RES_MAX_DAILY_OPENTIME_NUM":                             3,
		"RES_WEEKLY_OPENTIME_NUM":                                7,
		"RES_SEASON_MAX_THEME_COUNT":                             5,
		"RES_MAX_PVP_PLAYER_NUM":                                 8,
		"RES_MAX_CONDITION_PARAMCNT":                             5,
		"RES_MAX_TOKEN_LEVEL_AWARD_NUM":                          2,
		"RES_MAX_TOKEN_DAILY_TASK_POOL_NUM":                      4,
		"RES_MAX_TOKEN_WEEKLY_TASK_POOL_NUM":                     4,
		"RES_MAX_TOKEN_HANGUP_VALUE_NUM":                         50,
		"RES_MAX_CHESS_TASKSTAGE_CNT":                            5,
		"RES_MAX_CHESS_HERO_MAX_RELATIVE":                        3,
		"RES_MAX_CHESS_HERO_SKILL_COUNT":                         5,
		"RES_MAX_PRE_EQUIP_COUNT":                                2,
		"RES_MAX_GETWAY_COUNT":                                   3,
		"RES_MAX_LORD_NUM":                                       5,
		"RES_MAX_LINEUP_HERO_NUM":                                10,
		"RES_MAX_LINEUP_HERO_EQUIP_NUM":                          3,
		"RES_MAX_LINEUP_PREFERRED_EQUIP":                         5,
		"RES_MAX_FETTER_LAYER_COUNT":                             5,
		"RES_MAX_FUNC_PER_SKILL":                                 4,
		"RES_MAX_CHARTS_FUNC":                                    5,
		"RES_LORD_DETAILS_ITEMS_COUNT":                           6,
		"RES_LORD_FILE_ITEMS_COUNT":                              4,
		"RES_LORD_LEVEL_EXP_COUNT":                               5,
		"RES_LORD_LEVEL_EXP_GATHERER_COUNT":                      3,
		"RES_LORD_LEVEL_EXP_GATHERER_PARAM_COUNT":                3,
		"RES_LORD_Q_A_COUNT":                                     40,
		"STR_32":                                                 32,
		"STR_64":                                                 64,
		"STR_128":                                                128,
		"STR_256":                                                256,
		"MAX_HERO_STORY_URL_LEN":                                 256,
		"MAX_URL_LEN":                                            256,
		"MAX_DIALOG_CONTENT_LEN":                                 1024,
		"MAX_EnergyType_NAME":                                    32,
		"MAX_HERO_SKILLNUM":                                      6,
		"MAX_MONSTER_SKILLNUM":                                   10,
		"MAX_ORGAN_SKILLNUM":                                     3,
		"RES_MAX_CHESS_DROP_EQUIP_RANDOM_COUNT":                  3,
		"RES_MAX_CHESS_NEW_DROP_EQUIP_COUNT":                     5,
		"MAX_SKILL_EFFECT_NUM":                                   2,
		"RES_MAX_RANDOMSKILLPASSIVE_LEN":                         20,
		"RES_MAX_TAILSMAN_BUFFLIB_LEN":                           70,
		"RES_MAX_SHENFUPICK_FILTERCONDITION_NUM":                 2,
		"RES_MAX_CONDITION_PER_PASSIVESKILL":                     2,
		"RES_MAX_PARAM_PER_SKILLFUNC":                            18,
		"RES_MAX_EXTRAPARAM_PER_SKILLFUNC":                       1,
		"RES_SKILL_DYNAMIC_INDICATOR_COMMON_PARAM_COUNT":         10,
		"RES_SKILL_DYNAMIC_INDICATOR_STATE_PARAM_COUNT":          5,
		"RES_SKILL_DYNAMIC_INDICATOR_STATE_COUNT":                2,
		"RES_MAX_PARAM_PER_ENERGYTYPE":                           10,
		"RES_MAX_PARAM_PER_WHEELTYPE":                            5,
		"RES_MAX_PARAM_PER_SKILLFUNC_MUTEXTI_ID":                 4,
		"RES_MAX_PARAM_PER_SKILLFUNC_OVERRIDE_ID":                4,
		"RES_MAX_PARAM_PER_SKILLFUNC_PASSIVE":                    9,
		"RES_MAX_PARAM_RANGEAPPOINTTYPE":                         2,
		"RES_MAX_SOLDIER_TYPE_NUM_PER_WAVE":                      5,
		"RES_MAX_BRANCH_NUM_PER_WAVE":                            5,
		"MAX_CODE_NAME":                                          16,
		"RES_MAX_ITEM_NAME_LEN":                                  64,
		"RES_MAX_SYMBOL_FUNCEFT_NUM":                             3,
		"RES_MAX_SYMBOL_PVEEFT_NUM":                              8,
		"RES_MAX_HERO_TIPS_LEN":                                  4096,
		"RES_MAX_HERO_RELATION_NUM":                              3,
		"RES_MAX_ITEMSRC_CNT":                                    10,
		"RES_MAX_SKILL_DESC_LEN":                                 1024,
		"RES_MAX_SKILL_DESC_LEN_EX":                              2048,
		"RES_MAX_SKILLBUFF_DESC_LEN":                             256,
		"RES_MAX_SKILL_UP_TIP_LEN":                               256,
		"RES_MAX_RONGYU_DESC_LEN":                                512,
		"RES_MAX_RANDOM_REWARD_PER_PVE_LEVEL":                    5,
		"RES_MAX_LEVEL_BUFF_COUNT":                               4,
		"RES_MAX_LEVEL_COMPENSATE_CNT":                           5,
		"RES_MAX_MONSTER_DEAD_DROP_SHENFU_CNT":                   5,
		"MAX_HERO_ATTEND_BATTLE_NUM":                             5,
		"RES_MAX_STAR_NUM_PER_LEVEL":                             3,
		"RES_MAX_STAR_CONDITION_COUNT":                           3,
		"RES_MAX_DESC_LEN":                                       256,
		"RES_TEXT_CONFIG_MAX_LEN":                                1024,
		"RES_MAX_TEXT_LEN":                                       2048,
		"RES_MAX_STAR_CONDITION_KEY_CNT":                         4,
		"RES_MAX_STAR_CONDITION_VALUE_CNT":                       2,
		"RES_TEXT_KEY_LEN":                                       64,
		"RES_MAX_INCOME_ALLOC_COUNT":                             5,
		"RES_MAX_INCOME_RULE_COUNT":                              4,
		"RES_MAX_ADVENTURE_DIFFICULTY_NUM":                       4,
		"RES_MAX_CHAPTER_DESC_LEN":                               256,
		"RES_MAX_PVE_REVIVE_NUM":                                 3,
		"RES_MAX_UNLOCKSKILL_PASSNUM":                            3,
		"RES_MAX_HEROSKIN_NAME_LEN":                              64,
		"RES_MAX_HEROSKIN_PARTSHARE_DESC_LEN":                    128,
		"RES_MAX_HEROSKIN_DESC_LEN":                              256,
		"RES_MAX_SKIN_ATTR":                                      2,
		"RES_MAX_SKIN_FEATURE":                                   16,
		"RES_MAX_NAME_LEN":                                       64,
		"RES_MAX_SKIN_SHAREPIC_LEN":                              64,
		"RES_MAX_SKIN_FEATURE_ICON_PATH_LEN":                     32,
		"RES_MAX_SKIN_FEATURE_DESC_LEN":                          128,
		"RES_MAX_SKIN_VIDEO_URL_LEN":                             128,
		"RES_MAX_BATTLE_EFFECT_PREVIEW_URL_LEN":                  128,
		"RES_SHOP_ITEM_TIME_LEN":                                 16,
		"RES_HEROSKIN_SHOP_TIME_LEN":                             16,
		"RES_INCOME_CHANGERATE_LEN":                              5,
		"RES_MAX_HERO_JOBFEATURE_LEN":                            2,
		"RES_MAX_SKIN_PROMOTION_NUM":                             5,
		"RES_MAX_HERO_WAKE_DESC":                                 512,
		"RES_MAX_HERO_ATTACK_RANGE_LEN":                          16,
		"RES_EQUIP_IN_BATTLE_NAME_LEN_MAX":                       64,
		"RES_EQUIP_IN_BATTLE_DESC_LEN_MAX":                       256,
		"RES_EQUIP_IN_BATTLE_BUFF_DESC_LEN_MAX":                  512,
		"RES_EQUIP_IN_BATTLE_MUTEX_EQUIP_COUNT":                  10,
		"RES_HERO_EQUIP_PRICE_TYPE_COUNT":                        16,
		"RES_EQUIP_IN_BATTLE_REQUIRED_ID_LEN_MAX":                64,
		"RES_EQUIP_ID_BELONG_LEVEL_LEN_MAX":                      256,
		"RES_EQUIP_ID_FORBID_LEVEL_LEN_MAX":                      256,
		"RES_EQUIP_ID_PREEQUIP_LEN_MAX":                          256,
		"RES_EQUIP_ID_FORBID_LEVEL_SHOP_LEN_MAX":                 256,
		"RES_EQUIP_PRICE_RAISE_LEN_MAX":                          256,
		"RES_EQUIP_IN_BATTLE_PASSIVE_SKILL_COUNT_MAX":            4,
		"RES_EQUIP_IN_BATTLE_ACTIVE_SKILL_COUNT_MAX":             2,
		"RES_EQUIP_ADDITION_RELATIVE_MAX_NUM":                    2,
		"RES_EQUIP_IN_BATTLE_EFFECT_COMBINE_COUNT_MAX":           3,
		"RES_EQUIP_IN_BATTLE_RECOMMEND_COUNT_MAX":                12,
		"RES_EQUIP_IN_BATTLE_PASSIVE_RMV_SKILLFUNC_CNT":          3,
		"RES_MAX_UNUSE_SKILLCNT":                                 5,
		"RES_MAX_PICK_RULE_PARAM_NUM":                            4,
		"RES_MAX_FLOAT_TEXT_LEN":                                 64,
		"RES_MAX_GAME_MATCH_LEN":                                 256,
		"RES_MAX_VOICE_INTERACTION_CONDITION_NUM":                10,
		"RES_MAX_SKILL_PROPERTY_DESCRIPTION_NAME":                32,
		"RES_MAX_SKILL_PROPERTY_DESCRIPTION_LEN":                 5,
		"RES_MAX_SKILL_PROPERTY_DESCRIPTION_VALUE":               32,
		"RES_MAX_PLAYERS_ONECAMP_LIMIT":                          10,
		"RES_MAX_SPEED_ADJUST_STEP_CNT":                          8,
		"RES_MAX_DEVICE_NAME_LEN":                                64,
		"RES_MAX_DEVICE_FUNC_LEN":                                12,
		"RES_MAX_DEVICE_FUNC_DEFAULT_VALUE":                      10,
		"RES_DEVICE_CONF_DEFAULT_VALUE":                          100,
		"RES_MAX_DEVICE_UI_CONFIG_CHAR_LEN":                      30,
		"RES_MAX_HERO_JOB_BUFF_ATTR_CNT":                         3,
		"RES_MAX_HERO_JOB_BUFF_CNT":                              2,
		"RES_COMMON_KEY_VALUE_ARG_NUM":                           3,
		"RES_MAX_SKILLMARK_LAYEREFFECT_CNT":                      12,
		"RES_MAX_ENERGY_STATE":                                   2,
		"RES_MAX_BANK_SOURCE_LEN":                                128,
		"RES_MAX_HERO_EXTRA_BRANCHROAD_CNT":                      2,
		"RES_MAX_POOL_CHAIN_LEN":                                 4,
		"RES_MAX_BATTLE_ROYALE_EVALUATE_POINT_LIMIT_NUM":         5,
		"RES_BATTLE_ROYALE_GRADE_NAME_LEN":                       64,
		"RES_BATTLE_PROJ8_NAME_LEN":                              64,
		"RES_BATTLE_PROJ8_DESC_LEN":                              128,
		"RES_BATTLE_PROJ8_COND_NUM":                              2,
		"RES_MAX_ACTION_NAME_LEN":                                64,
		"RES_MAX_ACTION_DESC_LEN":                                512,
		"RES_MAX_DIGIT_FLOAT_INTERVAL":                           10,
		"RES_MAX_PVE_AI_LEVEL_NUM":                               4,
		"RES_MAX_PVE_REVIVE_COUPONS_NUM":                         5,
		"RES_MAX_PVE_LVEVL_MEMORY_PIECE_LEN":                     128,
		"RES_MAX_PRELOAD_ACTOR_LIST_STRING_LEN":                  1024,
		"RES_MAX_DYING_HP_REDUCE_RATE_NUM":                       6,
		"RES_MAX_SERIES_SKIN_SYSTEM_BROADCAST_TEXT_LEN":          512,
		"RES_MAX_SERIES_SKIN_SYSTEM_BROADCAST_KILL_TEXT_ARR_LEN": 5,
		"RES_MAX_BATTLE_INTERACTION_PARAMETER_NUM":               5,
		"RES_MAX_KILL_ACTION_PARAMETER_NUM":                      3,
		"RES_MAX_PRESET_CHESS_PER_COMBINE":                       10,
		"RES_MAX_CHESS_MOVE_TEST_PER_COMBINE":                    20,
		"RES_MAX_CHESS_CHESS_CAMP_MAXNUM":                        5,
		"RES_MAX_CHESS_CARD_QUALITY_NUM":                         5,
		"RES_MAX_CHESS_CARD_PICK_NUM":                            5,
		"RES_MAX_CHESS_CARD_NUM_PER_QUALITY":                     20,
		"RES_MAX_CHESS_EFFECT_INFO_EFFECT_NUM":                   3,
		"RES_MAX_CHESS_EFFECT_INFO_PREEFFECT_NUM":                1,
		"RES_MAX_CHESS_HERO_COMBO_NUM":                           6,
		"RES_MAX_CHESS_FORMATION_COUNT":                          10,
		"RES_MAX_CHESS_RESET_PASSIVE_SKILL_NUM":                  2,
		"RES_MAX_CHESS_PRE_CLEAR_SKILL_COMBINE_NUM":              2,
		"RES_MAX_CHESS_POST_CLEAR_SKILL_COMBINE_NUM":             3,
		"RES_MAX_CHESS_RECOMEND_EQUIP_COUNT":                     20,
		"RES_SCENESKIN_PROPS_MAX_NUM":                            5,
		"RES_MAX_CHESS_POSITION_ROW_COUNT":                       4,
		"RES_MAX_CHESS_TALENT_PARAM_NUM":                         2,
		"RES_MAX_CHESS_TALENT_REBUILD_NUM":                       6,
		"RES_MAX_CHESS_TALENT_POSCFG_NUM":                        5,
		"RES_MAX_CHESS_TALENT_QUALITY_NUM":                       7,
		"RES_MAX_CHESS_TALENT_CP_HERO_NUM":                       6,
		"RES_MAX_CHESS_TALENT_POSITION_NUM":                      5,
		"RES_MAX_NUMEN_INTERACT_LEN":                             6,
		"RES_MAX_CHESS_TALENT_FIX_LEVEL_DROP_NUM":                2,
		"RES_MAX_CHESS_TALENT_CONDITION_PARAM_NUM":               6,
		"RES_MAX_CHESS_TALENT_PROMOTE_PARAM_NUM":                 6,
		"RES_MAX_CHESS_PREPARE_PHASE_MMR_DURATION_NUM":           7,
		"RES_MAX_CHESS_SUB_PROC_PARAMS_NUM":                      5,
		"RES_MAX_CHESS_MMR_AI_BATTLE_SCORE_NUM":                  7,
		"RES_MAX_CHESS_SOLO_AI_BATTLE_SCORE_NUM":                 3,
		"RES_MAX_CHESS_EXCEED_BATTLE_SCORE_NUM":                  5,
		"RES_MAX_CHESS_RANK_GOLD_NUM":                            8,
		"RES_MAX_PERFEFT_HEROBIND_CNT":                           20,
		"RES_MAX_HIGHLIGHT_LABEL_LEN":                            32,
		"RES_MAX_HIGHLIGHT_DESC_LEN":                             128,
		"RES_MAX_HIGHLIGHT_HERO_NUM":                             5,
		"RES_MAX_HIGHLIGHT_FILTER_HERO_NUM":                      5,
		"PROJECT8_MAX_ROUND_STATE_COUNT":                         5,
		"PROJECT8_MAX_OVER_TIME_BUFF_COUNT":                      2,
		"RES_EQUIP_IN_BATTLE_LEVEL_MAX":                          3,
		"RES_CHESS_RECOMMEND_MAX_HERO_COUNT":                     9,
		"RES_UGC_FINAL_DIFFICULTY":                               255,
		"RES_MAX_NEWBIE_GUIDE_TRIGGER_TIME_PARAM_NUM":            4,
		"RES_MAX_NEWBIE_GUIDE_TRIGGER_CONDITION_PARAM_NUM":       3,
		"RES_MAX_NEWBIE_TRIGGER_TIME_NUM":                        2,
		"RES_MAX_NEWBIE_TRIGGER_CONDITION_NUM":                   2,
		"RES_MAX_NEWBIE_TRIGGER_SKIP_CONDITION_NUM":              2,
		"RES_MAX_NEWBIE_ACTION_PARAM_NUM":                        10,
		"RES_MAX_NEWBIE_UI_DEPTH_NUM":                            5,
		"CHESS_COMBINE_MAX_CNT":                                  99,
		"CHESS_RESOLVE_MAX_CNT":                                  99,
		"FREE_GROUP_MAX_CNT":                                     5,
		"GIFT_STRATEGY_MAX_CNT":                                  10,
		"LORDRECENTRESULTS_HISTORYSEASON_MAX_CNT":                3,
		"RES_MAX_LANGUAGE_CNT":                                   10,
	}
)

func (x Legacy) Enum() *Legacy {
	p := new(Legacy)
	*p = x
	return p
}

func (x Legacy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Legacy) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[32].Descriptor()
}

func (Legacy) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[32]
}

func (x Legacy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Legacy.Descriptor instead.
func (Legacy) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{32}
}

type RES_COMMON_CONST int32

const (
	RES_COMMON_CONST_RES_COMMON_CONST__reserved__   RES_COMMON_CONST = 0
	RES_COMMON_CONST_BLOOD_BIG_HURT_RATIO           RES_COMMON_CONST = 1
	RES_COMMON_CONST_MAIL_DEFAULT_BGURL             RES_COMMON_CONST = 2
	RES_COMMON_CONST_PLAYER_CHGNAME_CHAR_MIX        RES_COMMON_CONST = 3
	RES_COMMON_CONST_PLAYER_CHGNAME_TIME_LIMIT      RES_COMMON_CONST = 4
	RES_COMMON_CONST_PLAYER_CHGNAME_COST            RES_COMMON_CONST = 5
	RES_COMMON_CONST_CROSS_DAY_REFRESH_HOURMIN      RES_COMMON_CONST = 6
	RES_COMMON_CONST_CROSS_WEEK_REFRESH_WEEKHOURMIN RES_COMMON_CONST = 7
	RES_COMMON_CONST_LOCKSTEP_HEART_BEAT_FREQ       RES_COMMON_CONST = 8
	RES_COMMON_CONST_PROP_NEW_GET_TIME              RES_COMMON_CONST = 9
	RES_COMMON_CONST_TOKEN_EXP_GET_TIME             RES_COMMON_CONST = 10
	RES_COMMON_CONST_LINEUP_MAX_NUM_PER_SEASON      RES_COMMON_CONST = 11
	RES_COMMON_CONST_ACNT_BORN_INITHEAD_ID          RES_COMMON_CONST = 12
	RES_COMMON_CONST_ACNT_BORN_INITHEADIMG_ID       RES_COMMON_CONST = 13
	RES_COMMON_CONST_ROOM_INVITE_CD                 RES_COMMON_CONST = 15
	RES_COMMON_CONST_ACNT_BORN_INIT_LORD            RES_COMMON_CONST = 16
	RES_COMMON_CONST_ACNT_BORN_INIT_LORDSKIN        RES_COMMON_CONST = 17
	RES_COMMON_CONST_ACNT_BORN_INIT_DROP            RES_COMMON_CONST = 18
	RES_COMMON_CONST_ACNT_NEWBIE_AWARD_DROP         RES_COMMON_CONST = 19
	RES_COMMON_CONST_PKG_ITEM_MAX_NUM               RES_COMMON_CONST = 20
	RES_COMMON_CONST_PVP_GOLD_LIMIT_ID              RES_COMMON_CONST = 21
	RES_COMMON_CONST_PVP_RANK_KING_SINGLE_SCORE     RES_COMMON_CONST = 22
	RES_COMMON_CONST_ROOM_INVITE_TIMEOUT_SECOND     RES_COMMON_CONST = 23
	RES_COMMON_CONST_PVP_AWARD_MIN_BATTLE_ROUND     RES_COMMON_CONST = 24
	RES_COMMON_CONST_CHESS_UPGRADE_KILL_PRICE_ADD   RES_COMMON_CONST = 25
	RES_COMMON_CONST_AREAROOM_AI_SHOW_GROUP         RES_COMMON_CONST = 26
	RES_COMMON_CONST_COUPONS_GMALL_ACTIONID         RES_COMMON_CONST = 27
	RES_COMMON_CONST_AI_C_HERO_ADDITIVE_PARAM       RES_COMMON_CONST = 28
	RES_COMMON_CONST_AI_SUB_C_HERO_ADDITIVE_PARAM   RES_COMMON_CONST = 29
	RES_COMMON_CONST_PRIVACY_GUIDE                  RES_COMMON_CONST = 30
	RES_COMMON_CONST_PRIVACY_GUIDE_CHILDREN         RES_COMMON_CONST = 31
	RES_COMMON_CONST_CONTRACT_SOFTWARE              RES_COMMON_CONST = 32
	RES_COMMON_CONST_CROSS_MONTH_REFRESH_HOURMIN    RES_COMMON_CONST = 33
	RES_COMMON_CONST_BUY_CARD_AGE                   RES_COMMON_CONST = 34
	RES_COMMON_CONST_BUY_EXP_AGE                    RES_COMMON_CONST = 35
	RES_COMMON_CONST_REFRESH_STORE_AGE              RES_COMMON_CONST = 36
	RES_COMMON_CONST_START_DRAG_HERO_AGE            RES_COMMON_CONST = 37
	RES_COMMON_CONST_END_DRAG_HERO_AGE              RES_COMMON_CONST = 38
	RES_COMMON_CONST_LORD_TELEPORT                  RES_COMMON_CONST = 39
	RES_COMMON_CONST_HERO_LEVEL_UP_3                RES_COMMON_CONST = 40
	RES_COMMON_CONST_LORD_LEVEL_UP                  RES_COMMON_CONST = 41
	RES_COMMON_CONST_LORD_SKILL_LEVEL_UP            RES_COMMON_CONST = 42
	RES_COMMON_CONST_STORE_SAME_HERO                RES_COMMON_CONST = 43
	RES_COMMON_CONST_HERO_SOUL_LEVEL_CHANGE         RES_COMMON_CONST = 44
	RES_COMMON_CONST_WARM_AI_TRANSITION_PHASE_PARAM RES_COMMON_CONST = 45
	RES_COMMON_CONST_THIRD_PARTY_INFO_SHARELIST     RES_COMMON_CONST = 46
	RES_COMMON_CONST_PRIVACY_HELPER                 RES_COMMON_CONST = 47
	RES_COMMON_CONST_UNREGISTERMAILSENDER           RES_COMMON_CONST = 48
	RES_COMMON_CONST_SHOWSTATE_SETLIMIT_CNT         RES_COMMON_CONST = 49
	RES_COMMON_CONST_OB_LOCKSTEP_HEART_BEAT_FREQ    RES_COMMON_CONST = 50
	RES_COMMON_CONST_OB_CONTROLLER_SHOW_TIME        RES_COMMON_CONST = 51
	RES_COMMON_CONST_RAND_NAME_FILL_BLACK_NUM       RES_COMMON_CONST = 52
	RES_COMMON_CONST_NEWBIE_FREE_PARAM              RES_COMMON_CONST = 53
	RES_COMMON_CONST_SCENE_HIDE_AGE                 RES_COMMON_CONST = 54
	RES_COMMON_CONST_HUNDRED_INITIAL_SCALE          RES_COMMON_CONST = 55
	RES_COMMON_CONST_SHOP_PROP_SROLL_TIME           RES_COMMON_CONST = 56
	RES_COMMON_CONST_LORD_SELECT_ORDER_PARAM        RES_COMMON_CONST = 57
	RES_COMMON_CONST_ROOM_CHAT_MSG_MAXCOUNT         RES_COMMON_CONST = 58
	RES_COMMON_CONST_ROOM_CHAT_MSG_LIFE_TIME        RES_COMMON_CONST = 59
	RES_COMMON_CONST_WALL_HIT_TIME_BY_SKILL         RES_COMMON_CONST = 60
	RES_COMMON_CONST_MATCH_REROLL_LIMIT_COUNT       RES_COMMON_CONST = 61
	RES_COMMON_CONST_GUARANTEED_SUPPLEMENTARY_LORD  RES_COMMON_CONST = 62
	RES_COMMON_CONST_LORD_CHOOSE_RANDOM_REWARD      RES_COMMON_CONST = 63
	RES_COMMON_CONST_LOADING_LEAST_TIME             RES_COMMON_CONST = 64
	RES_COMMON_CONST_WX_GameCenter_REWARD           RES_COMMON_CONST = 65
	RES_COMMON_CONST_QQ_GameCenter_REWARD           RES_COMMON_CONST = 66
	RES_COMMON_CONST_AUCTION_PHASE_TIME             RES_COMMON_CONST = 67
	RES_COMMON_CONST_AUCTION_PERFORM_TIME           RES_COMMON_CONST = 68
)

// Enum value maps for RES_COMMON_CONST.
var (
	RES_COMMON_CONST_name = map[int32]string{
		0:  "RES_COMMON_CONST__reserved__",
		1:  "BLOOD_BIG_HURT_RATIO",
		2:  "MAIL_DEFAULT_BGURL",
		3:  "PLAYER_CHGNAME_CHAR_MIX",
		4:  "PLAYER_CHGNAME_TIME_LIMIT",
		5:  "PLAYER_CHGNAME_COST",
		6:  "CROSS_DAY_REFRESH_HOURMIN",
		7:  "CROSS_WEEK_REFRESH_WEEKHOURMIN",
		8:  "LOCKSTEP_HEART_BEAT_FREQ",
		9:  "PROP_NEW_GET_TIME",
		10: "TOKEN_EXP_GET_TIME",
		11: "LINEUP_MAX_NUM_PER_SEASON",
		12: "ACNT_BORN_INITHEAD_ID",
		13: "ACNT_BORN_INITHEADIMG_ID",
		15: "ROOM_INVITE_CD",
		16: "ACNT_BORN_INIT_LORD",
		17: "ACNT_BORN_INIT_LORDSKIN",
		18: "ACNT_BORN_INIT_DROP",
		19: "ACNT_NEWBIE_AWARD_DROP",
		20: "PKG_ITEM_MAX_NUM",
		21: "PVP_GOLD_LIMIT_ID",
		22: "PVP_RANK_KING_SINGLE_SCORE",
		23: "ROOM_INVITE_TIMEOUT_SECOND",
		24: "PVP_AWARD_MIN_BATTLE_ROUND",
		25: "CHESS_UPGRADE_KILL_PRICE_ADD",
		26: "AREAROOM_AI_SHOW_GROUP",
		27: "COUPONS_GMALL_ACTIONID",
		28: "AI_C_HERO_ADDITIVE_PARAM",
		29: "AI_SUB_C_HERO_ADDITIVE_PARAM",
		30: "PRIVACY_GUIDE",
		31: "PRIVACY_GUIDE_CHILDREN",
		32: "CONTRACT_SOFTWARE",
		33: "CROSS_MONTH_REFRESH_HOURMIN",
		34: "BUY_CARD_AGE",
		35: "BUY_EXP_AGE",
		36: "REFRESH_STORE_AGE",
		37: "START_DRAG_HERO_AGE",
		38: "END_DRAG_HERO_AGE",
		39: "LORD_TELEPORT",
		40: "HERO_LEVEL_UP_3",
		41: "LORD_LEVEL_UP",
		42: "LORD_SKILL_LEVEL_UP",
		43: "STORE_SAME_HERO",
		44: "HERO_SOUL_LEVEL_CHANGE",
		45: "WARM_AI_TRANSITION_PHASE_PARAM",
		46: "THIRD_PARTY_INFO_SHARELIST",
		47: "PRIVACY_HELPER",
		48: "UNREGISTERMAILSENDER",
		49: "SHOWSTATE_SETLIMIT_CNT",
		50: "OB_LOCKSTEP_HEART_BEAT_FREQ",
		51: "OB_CONTROLLER_SHOW_TIME",
		52: "RAND_NAME_FILL_BLACK_NUM",
		53: "NEWBIE_FREE_PARAM",
		54: "SCENE_HIDE_AGE",
		55: "HUNDRED_INITIAL_SCALE",
		56: "SHOP_PROP_SROLL_TIME",
		57: "LORD_SELECT_ORDER_PARAM",
		58: "ROOM_CHAT_MSG_MAXCOUNT",
		59: "ROOM_CHAT_MSG_LIFE_TIME",
		60: "WALL_HIT_TIME_BY_SKILL",
		61: "MATCH_REROLL_LIMIT_COUNT",
		62: "GUARANTEED_SUPPLEMENTARY_LORD",
		63: "LORD_CHOOSE_RANDOM_REWARD",
		64: "LOADING_LEAST_TIME",
		65: "WX_GameCenter_REWARD",
		66: "QQ_GameCenter_REWARD",
		67: "AUCTION_PHASE_TIME",
		68: "AUCTION_PERFORM_TIME",
	}
	RES_COMMON_CONST_value = map[string]int32{
		"RES_COMMON_CONST__reserved__":   0,
		"BLOOD_BIG_HURT_RATIO":           1,
		"MAIL_DEFAULT_BGURL":             2,
		"PLAYER_CHGNAME_CHAR_MIX":        3,
		"PLAYER_CHGNAME_TIME_LIMIT":      4,
		"PLAYER_CHGNAME_COST":            5,
		"CROSS_DAY_REFRESH_HOURMIN":      6,
		"CROSS_WEEK_REFRESH_WEEKHOURMIN": 7,
		"LOCKSTEP_HEART_BEAT_FREQ":       8,
		"PROP_NEW_GET_TIME":              9,
		"TOKEN_EXP_GET_TIME":             10,
		"LINEUP_MAX_NUM_PER_SEASON":      11,
		"ACNT_BORN_INITHEAD_ID":          12,
		"ACNT_BORN_INITHEADIMG_ID":       13,
		"ROOM_INVITE_CD":                 15,
		"ACNT_BORN_INIT_LORD":            16,
		"ACNT_BORN_INIT_LORDSKIN":        17,
		"ACNT_BORN_INIT_DROP":            18,
		"ACNT_NEWBIE_AWARD_DROP":         19,
		"PKG_ITEM_MAX_NUM":               20,
		"PVP_GOLD_LIMIT_ID":              21,
		"PVP_RANK_KING_SINGLE_SCORE":     22,
		"ROOM_INVITE_TIMEOUT_SECOND":     23,
		"PVP_AWARD_MIN_BATTLE_ROUND":     24,
		"CHESS_UPGRADE_KILL_PRICE_ADD":   25,
		"AREAROOM_AI_SHOW_GROUP":         26,
		"COUPONS_GMALL_ACTIONID":         27,
		"AI_C_HERO_ADDITIVE_PARAM":       28,
		"AI_SUB_C_HERO_ADDITIVE_PARAM":   29,
		"PRIVACY_GUIDE":                  30,
		"PRIVACY_GUIDE_CHILDREN":         31,
		"CONTRACT_SOFTWARE":              32,
		"CROSS_MONTH_REFRESH_HOURMIN":    33,
		"BUY_CARD_AGE":                   34,
		"BUY_EXP_AGE":                    35,
		"REFRESH_STORE_AGE":              36,
		"START_DRAG_HERO_AGE":            37,
		"END_DRAG_HERO_AGE":              38,
		"LORD_TELEPORT":                  39,
		"HERO_LEVEL_UP_3":                40,
		"LORD_LEVEL_UP":                  41,
		"LORD_SKILL_LEVEL_UP":            42,
		"STORE_SAME_HERO":                43,
		"HERO_SOUL_LEVEL_CHANGE":         44,
		"WARM_AI_TRANSITION_PHASE_PARAM": 45,
		"THIRD_PARTY_INFO_SHARELIST":     46,
		"PRIVACY_HELPER":                 47,
		"UNREGISTERMAILSENDER":           48,
		"SHOWSTATE_SETLIMIT_CNT":         49,
		"OB_LOCKSTEP_HEART_BEAT_FREQ":    50,
		"OB_CONTROLLER_SHOW_TIME":        51,
		"RAND_NAME_FILL_BLACK_NUM":       52,
		"NEWBIE_FREE_PARAM":              53,
		"SCENE_HIDE_AGE":                 54,
		"HUNDRED_INITIAL_SCALE":          55,
		"SHOP_PROP_SROLL_TIME":           56,
		"LORD_SELECT_ORDER_PARAM":        57,
		"ROOM_CHAT_MSG_MAXCOUNT":         58,
		"ROOM_CHAT_MSG_LIFE_TIME":        59,
		"WALL_HIT_TIME_BY_SKILL":         60,
		"MATCH_REROLL_LIMIT_COUNT":       61,
		"GUARANTEED_SUPPLEMENTARY_LORD":  62,
		"LORD_CHOOSE_RANDOM_REWARD":      63,
		"LOADING_LEAST_TIME":             64,
		"WX_GameCenter_REWARD":           65,
		"QQ_GameCenter_REWARD":           66,
		"AUCTION_PHASE_TIME":             67,
		"AUCTION_PERFORM_TIME":           68,
	}
)

func (x RES_COMMON_CONST) Enum() *RES_COMMON_CONST {
	p := new(RES_COMMON_CONST)
	*p = x
	return p
}

func (x RES_COMMON_CONST) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_COMMON_CONST) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[33].Descriptor()
}

func (RES_COMMON_CONST) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[33]
}

func (x RES_COMMON_CONST) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_COMMON_CONST.Descriptor instead.
func (RES_COMMON_CONST) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{33}
}

//一定要连续
type RES_AUDIO_MISC_CONST int32

const (
	RES_AUDIO_MISC_CONST_RES_AUDIO_MISC_CONST__reserved__ RES_AUDIO_MISC_CONST = 0
	RES_AUDIO_MISC_CONST_INGAME_HERO_DRAG_DOWN_STONE      RES_AUDIO_MISC_CONST = 1
	RES_AUDIO_MISC_CONST_INGAME_HERO_PICK                 RES_AUDIO_MISC_CONST = 2
	RES_AUDIO_MISC_CONST_UPGRADE_POPULATION               RES_AUDIO_MISC_CONST = 3
	RES_AUDIO_MISC_CONST_INGAME_ROUND_PREPARE             RES_AUDIO_MISC_CONST = 4
	RES_AUDIO_MISC_CONST_CHESS_BATTLE_V_DEFAULT           RES_AUDIO_MISC_CONST = 5
	RES_AUDIO_MISC_CONST_CHESS_BATTLE_D_DEFAULT           RES_AUDIO_MISC_CONST = 6
	RES_AUDIO_MISC_CONST_CHESS_BATTLE_DEFAULT             RES_AUDIO_MISC_CONST = 7
	RES_AUDIO_MISC_CONST_CHESS_RELATIVE_ACTIVE            RES_AUDIO_MISC_CONST = 8
	RES_AUDIO_MISC_CONST_STONE_CHANGE                     RES_AUDIO_MISC_CONST = 9
	RES_AUDIO_MISC_CONST_STONE_CHANGE_DOWN                RES_AUDIO_MISC_CONST = 10
	RES_AUDIO_MISC_CONST_CHESS_HERO_SELL                  RES_AUDIO_MISC_CONST = 11
	RES_AUDIO_MISC_CONST_INGAME_SWITCH_OTHERPLAYER        RES_AUDIO_MISC_CONST = 12
	RES_AUDIO_MISC_CONST_CHESS_ROUND_V_DEFAULT            RES_AUDIO_MISC_CONST = 13
	RES_AUDIO_MISC_CONST_CHESS_ROUND_SHUTDOWN             RES_AUDIO_MISC_CONST = 15
	RES_AUDIO_MISC_CONST_CHESS_ROUND_D_DEFAULT            RES_AUDIO_MISC_CONST = 16
	RES_AUDIO_MISC_CONST_CHESS_DEFEAT                     RES_AUDIO_MISC_CONST = 17
	RES_AUDIO_MISC_CONST_INGAME_KILL_MINE                 RES_AUDIO_MISC_CONST = 18
	RES_AUDIO_MISC_CONST_INGAME_KILL_ENERMY               RES_AUDIO_MISC_CONST = 19
	RES_AUDIO_MISC_CONST_INGAME_HERO_DRAG_DOWN_GROUND     RES_AUDIO_MISC_CONST = 20
	RES_AUDIO_MISC_CONST_RES_AUDIO_MISC_CONST__max        RES_AUDIO_MISC_CONST = 21
)

// Enum value maps for RES_AUDIO_MISC_CONST.
var (
	RES_AUDIO_MISC_CONST_name = map[int32]string{
		0:  "RES_AUDIO_MISC_CONST__reserved__",
		1:  "INGAME_HERO_DRAG_DOWN_STONE",
		2:  "INGAME_HERO_PICK",
		3:  "UPGRADE_POPULATION",
		4:  "INGAME_ROUND_PREPARE",
		5:  "CHESS_BATTLE_V_DEFAULT",
		6:  "CHESS_BATTLE_D_DEFAULT",
		7:  "CHESS_BATTLE_DEFAULT",
		8:  "CHESS_RELATIVE_ACTIVE",
		9:  "STONE_CHANGE",
		10: "STONE_CHANGE_DOWN",
		11: "CHESS_HERO_SELL",
		12: "INGAME_SWITCH_OTHERPLAYER",
		13: "CHESS_ROUND_V_DEFAULT",
		15: "CHESS_ROUND_SHUTDOWN",
		16: "CHESS_ROUND_D_DEFAULT",
		17: "CHESS_DEFEAT",
		18: "INGAME_KILL_MINE",
		19: "INGAME_KILL_ENERMY",
		20: "INGAME_HERO_DRAG_DOWN_GROUND",
		21: "RES_AUDIO_MISC_CONST__max",
	}
	RES_AUDIO_MISC_CONST_value = map[string]int32{
		"RES_AUDIO_MISC_CONST__reserved__": 0,
		"INGAME_HERO_DRAG_DOWN_STONE":      1,
		"INGAME_HERO_PICK":                 2,
		"UPGRADE_POPULATION":               3,
		"INGAME_ROUND_PREPARE":             4,
		"CHESS_BATTLE_V_DEFAULT":           5,
		"CHESS_BATTLE_D_DEFAULT":           6,
		"CHESS_BATTLE_DEFAULT":             7,
		"CHESS_RELATIVE_ACTIVE":            8,
		"STONE_CHANGE":                     9,
		"STONE_CHANGE_DOWN":                10,
		"CHESS_HERO_SELL":                  11,
		"INGAME_SWITCH_OTHERPLAYER":        12,
		"CHESS_ROUND_V_DEFAULT":            13,
		"CHESS_ROUND_SHUTDOWN":             15,
		"CHESS_ROUND_D_DEFAULT":            16,
		"CHESS_DEFEAT":                     17,
		"INGAME_KILL_MINE":                 18,
		"INGAME_KILL_ENERMY":               19,
		"INGAME_HERO_DRAG_DOWN_GROUND":     20,
		"RES_AUDIO_MISC_CONST__max":        21,
	}
)

func (x RES_AUDIO_MISC_CONST) Enum() *RES_AUDIO_MISC_CONST {
	p := new(RES_AUDIO_MISC_CONST)
	*p = x
	return p
}

func (x RES_AUDIO_MISC_CONST) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_AUDIO_MISC_CONST) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[34].Descriptor()
}

func (RES_AUDIO_MISC_CONST) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[34]
}

func (x RES_AUDIO_MISC_CONST) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_AUDIO_MISC_CONST.Descriptor instead.
func (RES_AUDIO_MISC_CONST) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{34}
}

type PLAYMOD_TYPE int32

const (
	PLAYMOD_TYPE_PLAYMOD_None                      PLAYMOD_TYPE = 0
	PLAYMOD_TYPE_PLAYMOD_STANDARD_S1               PLAYMOD_TYPE = 1
	PLAYMOD_TYPE_PLAYMOD_STANDARD_S1_TUTORIAL      PLAYMOD_TYPE = 2
	PLAYMOD_TYPE_PLAYMOD_CLASSICAL_S1              PLAYMOD_TYPE = 3
	PLAYMOD_TYPE_PLAYMOD_STANDARD_S2               PLAYMOD_TYPE = 4
	PLAYMOD_TYPE_PLAYMOD_STANDARD_S1_BALANCE_TEST  PLAYMOD_TYPE = 5
	PLAYMOD_TYPE_PLAYMOD_CLASSICAL_S1_BALANCE_TEST PLAYMOD_TYPE = 6
	PLAYMOD_TYPE_PLAYMOD_STANDARD_S1_PRACTICE      PLAYMOD_TYPE = 7
	PLAYMOD_TYPE_PLAYMOD_CLASSICAL_S1_PRACTICE     PLAYMOD_TYPE = 8
	PLAYMOD_TYPE_PLAYMOD_STANDARD_S1_RECRUIT       PLAYMOD_TYPE = 9
)

// Enum value maps for PLAYMOD_TYPE.
var (
	PLAYMOD_TYPE_name = map[int32]string{
		0: "PLAYMOD_None",
		1: "PLAYMOD_STANDARD_S1",
		2: "PLAYMOD_STANDARD_S1_TUTORIAL",
		3: "PLAYMOD_CLASSICAL_S1",
		4: "PLAYMOD_STANDARD_S2",
		5: "PLAYMOD_STANDARD_S1_BALANCE_TEST",
		6: "PLAYMOD_CLASSICAL_S1_BALANCE_TEST",
		7: "PLAYMOD_STANDARD_S1_PRACTICE",
		8: "PLAYMOD_CLASSICAL_S1_PRACTICE",
		9: "PLAYMOD_STANDARD_S1_RECRUIT",
	}
	PLAYMOD_TYPE_value = map[string]int32{
		"PLAYMOD_None":                      0,
		"PLAYMOD_STANDARD_S1":               1,
		"PLAYMOD_STANDARD_S1_TUTORIAL":      2,
		"PLAYMOD_CLASSICAL_S1":              3,
		"PLAYMOD_STANDARD_S2":               4,
		"PLAYMOD_STANDARD_S1_BALANCE_TEST":  5,
		"PLAYMOD_CLASSICAL_S1_BALANCE_TEST": 6,
		"PLAYMOD_STANDARD_S1_PRACTICE":      7,
		"PLAYMOD_CLASSICAL_S1_PRACTICE":     8,
		"PLAYMOD_STANDARD_S1_RECRUIT":       9,
	}
)

func (x PLAYMOD_TYPE) Enum() *PLAYMOD_TYPE {
	p := new(PLAYMOD_TYPE)
	*p = x
	return p
}

func (x PLAYMOD_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PLAYMOD_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[35].Descriptor()
}

func (PLAYMOD_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[35]
}

func (x PLAYMOD_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PLAYMOD_TYPE.Descriptor instead.
func (PLAYMOD_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{35}
}

type GAMELANGUAGE_TYPE int32

const (
	GAMELANGUAGE_TYPE_GAMELANGUAGE_TYPE_None  GAMELANGUAGE_TYPE = 0
	GAMELANGUAGE_TYPE_GAMELANGUAGE_TYPE_zh_cn GAMELANGUAGE_TYPE = 1
	GAMELANGUAGE_TYPE_GAMELANGUAGE_TYPE_zh_hk GAMELANGUAGE_TYPE = 2
	GAMELANGUAGE_TYPE_GAMELANGUAGE_TYPE_en_us GAMELANGUAGE_TYPE = 3
	GAMELANGUAGE_TYPE_GAMELANGUAGE_TYPE_de_at GAMELANGUAGE_TYPE = 4
	GAMELANGUAGE_TYPE_GAMELANGUAGE_TYPE_ja_jp GAMELANGUAGE_TYPE = 5
	GAMELANGUAGE_TYPE_GAMELANGUAGE_TYPE_th    GAMELANGUAGE_TYPE = 6
)

// Enum value maps for GAMELANGUAGE_TYPE.
var (
	GAMELANGUAGE_TYPE_name = map[int32]string{
		0: "GAMELANGUAGE_TYPE_None",
		1: "GAMELANGUAGE_TYPE_zh_cn",
		2: "GAMELANGUAGE_TYPE_zh_hk",
		3: "GAMELANGUAGE_TYPE_en_us",
		4: "GAMELANGUAGE_TYPE_de_at",
		5: "GAMELANGUAGE_TYPE_ja_jp",
		6: "GAMELANGUAGE_TYPE_th",
	}
	GAMELANGUAGE_TYPE_value = map[string]int32{
		"GAMELANGUAGE_TYPE_None":  0,
		"GAMELANGUAGE_TYPE_zh_cn": 1,
		"GAMELANGUAGE_TYPE_zh_hk": 2,
		"GAMELANGUAGE_TYPE_en_us": 3,
		"GAMELANGUAGE_TYPE_de_at": 4,
		"GAMELANGUAGE_TYPE_ja_jp": 5,
		"GAMELANGUAGE_TYPE_th":    6,
	}
)

func (x GAMELANGUAGE_TYPE) Enum() *GAMELANGUAGE_TYPE {
	p := new(GAMELANGUAGE_TYPE)
	*p = x
	return p
}

func (x GAMELANGUAGE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GAMELANGUAGE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[36].Descriptor()
}

func (GAMELANGUAGE_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[36]
}

func (x GAMELANGUAGE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GAMELANGUAGE_TYPE.Descriptor instead.
func (GAMELANGUAGE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{36}
}

type AgeAuthentication_Method int32

const (
	AgeAuthentication_Method_AgeAuthentication_Method_None     AgeAuthentication_Method = 0
	AgeAuthentication_Method_AgeAuthentication_Method_Inpute   AgeAuthentication_Method = 1
	AgeAuthentication_Method_AgeAuthentication_Method_Optional AgeAuthentication_Method = 2
)

// Enum value maps for AgeAuthentication_Method.
var (
	AgeAuthentication_Method_name = map[int32]string{
		0: "AgeAuthentication_Method_None",
		1: "AgeAuthentication_Method_Inpute",
		2: "AgeAuthentication_Method_Optional",
	}
	AgeAuthentication_Method_value = map[string]int32{
		"AgeAuthentication_Method_None":     0,
		"AgeAuthentication_Method_Inpute":   1,
		"AgeAuthentication_Method_Optional": 2,
	}
)

func (x AgeAuthentication_Method) Enum() *AgeAuthentication_Method {
	p := new(AgeAuthentication_Method)
	*p = x
	return p
}

func (x AgeAuthentication_Method) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AgeAuthentication_Method) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[37].Descriptor()
}

func (AgeAuthentication_Method) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[37]
}

func (x AgeAuthentication_Method) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AgeAuthentication_Method.Descriptor instead.
func (AgeAuthentication_Method) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{37}
}

type ParentsAuthentication_Method int32

const (
	ParentsAuthentication_Method_ParentsAgeAuthentication_Method_None  ParentsAuthentication_Method = 0
	ParentsAuthentication_Method_ParentsAgeAuthentication_Method_Self  ParentsAuthentication_Method = 1
	ParentsAuthentication_Method_ParentsAgeAuthentication_Method_Card  ParentsAuthentication_Method = 2
	ParentsAuthentication_Method_ParentsAgeAuthentication_Method_eMail ParentsAuthentication_Method = 3
)

// Enum value maps for ParentsAuthentication_Method.
var (
	ParentsAuthentication_Method_name = map[int32]string{
		0: "ParentsAgeAuthentication_Method_None",
		1: "ParentsAgeAuthentication_Method_Self",
		2: "ParentsAgeAuthentication_Method_Card",
		3: "ParentsAgeAuthentication_Method_eMail",
	}
	ParentsAuthentication_Method_value = map[string]int32{
		"ParentsAgeAuthentication_Method_None":  0,
		"ParentsAgeAuthentication_Method_Self":  1,
		"ParentsAgeAuthentication_Method_Card":  2,
		"ParentsAgeAuthentication_Method_eMail": 3,
	}
)

func (x ParentsAuthentication_Method) Enum() *ParentsAuthentication_Method {
	p := new(ParentsAuthentication_Method)
	*p = x
	return p
}

func (x ParentsAuthentication_Method) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParentsAuthentication_Method) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[38].Descriptor()
}

func (ParentsAuthentication_Method) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[38]
}

func (x ParentsAuthentication_Method) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParentsAuthentication_Method.Descriptor instead.
func (ParentsAuthentication_Method) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{38}
}

type RES_PROP_TYPE int32

const (
	RES_PROP_TYPE_RES_PROP_NORMAL                  RES_PROP_TYPE = 0
	RES_PROP_TYPE_RES_PROP_EXPCARD                 RES_PROP_TYPE = 1
	RES_PROP_TYPE_RES_PROP_CURRENCYCARD            RES_PROP_TYPE = 2
	RES_PROP_TYPE_RES_PROP_LIMITEDTIME_LORD        RES_PROP_TYPE = 3
	RES_PROP_TYPE_RES_PROP_LIMITEDTIME_LORDSKIN    RES_PROP_TYPE = 4
	RES_PROP_TYPE_RES_PROP_NORMAL_GIFT_BAG         RES_PROP_TYPE = 5
	RES_PROP_TYPE_RES_PROP_OPTIONAL_GIFT_BAG       RES_PROP_TYPE = 6
	RES_PROP_TYPE_RES_PROP_ITEM_ADDITIVE_NUM_CARD  RES_PROP_TYPE = 7
	RES_PROP_TYPE_RES_PROP_ITEM_ADDITIVE_TIME_CARD RES_PROP_TYPE = 8
	RES_PROP_TYPE_RES_PROP_INTERACTIVE             RES_PROP_TYPE = 9
	RES_PROP_TYPE_RES_PROP_GUARANTEEDGIFT          RES_PROP_TYPE = 10
	RES_PROP_TYPE_RES_PROP_TOKEN_COMPENSATE        RES_PROP_TYPE = 11
	RES_PROP_TYPE_RES_PROP_CHESSTASK_COMPENSATE    RES_PROP_TYPE = 12
	RES_PROP_TYPE_RES_PROP_NAME_CHANGE_CARD        RES_PROP_TYPE = 13
)

// Enum value maps for RES_PROP_TYPE.
var (
	RES_PROP_TYPE_name = map[int32]string{
		0:  "RES_PROP_NORMAL",
		1:  "RES_PROP_EXPCARD",
		2:  "RES_PROP_CURRENCYCARD",
		3:  "RES_PROP_LIMITEDTIME_LORD",
		4:  "RES_PROP_LIMITEDTIME_LORDSKIN",
		5:  "RES_PROP_NORMAL_GIFT_BAG",
		6:  "RES_PROP_OPTIONAL_GIFT_BAG",
		7:  "RES_PROP_ITEM_ADDITIVE_NUM_CARD",
		8:  "RES_PROP_ITEM_ADDITIVE_TIME_CARD",
		9:  "RES_PROP_INTERACTIVE",
		10: "RES_PROP_GUARANTEEDGIFT",
		11: "RES_PROP_TOKEN_COMPENSATE",
		12: "RES_PROP_CHESSTASK_COMPENSATE",
		13: "RES_PROP_NAME_CHANGE_CARD",
	}
	RES_PROP_TYPE_value = map[string]int32{
		"RES_PROP_NORMAL":                  0,
		"RES_PROP_EXPCARD":                 1,
		"RES_PROP_CURRENCYCARD":            2,
		"RES_PROP_LIMITEDTIME_LORD":        3,
		"RES_PROP_LIMITEDTIME_LORDSKIN":    4,
		"RES_PROP_NORMAL_GIFT_BAG":         5,
		"RES_PROP_OPTIONAL_GIFT_BAG":       6,
		"RES_PROP_ITEM_ADDITIVE_NUM_CARD":  7,
		"RES_PROP_ITEM_ADDITIVE_TIME_CARD": 8,
		"RES_PROP_INTERACTIVE":             9,
		"RES_PROP_GUARANTEEDGIFT":          10,
		"RES_PROP_TOKEN_COMPENSATE":        11,
		"RES_PROP_CHESSTASK_COMPENSATE":    12,
		"RES_PROP_NAME_CHANGE_CARD":        13,
	}
)

func (x RES_PROP_TYPE) Enum() *RES_PROP_TYPE {
	p := new(RES_PROP_TYPE)
	*p = x
	return p
}

func (x RES_PROP_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_PROP_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[39].Descriptor()
}

func (RES_PROP_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[39]
}

func (x RES_PROP_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_PROP_TYPE.Descriptor instead.
func (RES_PROP_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{39}
}

type RES_PROP_TIMEOUT_PROCESSTYPE int32

const (
	RES_PROP_TIMEOUT_PROCESSTYPE_PROCESSTYPE_INVALID  RES_PROP_TIMEOUT_PROCESSTYPE = 0
	RES_PROP_TIMEOUT_PROCESSTYPE_PROCESSTYPE_DESTROY  RES_PROP_TIMEOUT_PROCESSTYPE = 1
	RES_PROP_TIMEOUT_PROCESSTYPE_PROCESSTYPE_HANDSALE RES_PROP_TIMEOUT_PROCESSTYPE = 2
	RES_PROP_TIMEOUT_PROCESSTYPE_PROCESSTYPE_AUTOSALE RES_PROP_TIMEOUT_PROCESSTYPE = 3
	RES_PROP_TIMEOUT_PROCESSTYPE_PROCESSTYPE_LAST     RES_PROP_TIMEOUT_PROCESSTYPE = 4
)

// Enum value maps for RES_PROP_TIMEOUT_PROCESSTYPE.
var (
	RES_PROP_TIMEOUT_PROCESSTYPE_name = map[int32]string{
		0: "PROCESSTYPE_INVALID",
		1: "PROCESSTYPE_DESTROY",
		2: "PROCESSTYPE_HANDSALE",
		3: "PROCESSTYPE_AUTOSALE",
		4: "PROCESSTYPE_LAST",
	}
	RES_PROP_TIMEOUT_PROCESSTYPE_value = map[string]int32{
		"PROCESSTYPE_INVALID":  0,
		"PROCESSTYPE_DESTROY":  1,
		"PROCESSTYPE_HANDSALE": 2,
		"PROCESSTYPE_AUTOSALE": 3,
		"PROCESSTYPE_LAST":     4,
	}
)

func (x RES_PROP_TIMEOUT_PROCESSTYPE) Enum() *RES_PROP_TIMEOUT_PROCESSTYPE {
	p := new(RES_PROP_TIMEOUT_PROCESSTYPE)
	*p = x
	return p
}

func (x RES_PROP_TIMEOUT_PROCESSTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_PROP_TIMEOUT_PROCESSTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[40].Descriptor()
}

func (RES_PROP_TIMEOUT_PROCESSTYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[40]
}

func (x RES_PROP_TIMEOUT_PROCESSTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_PROP_TIMEOUT_PROCESSTYPE.Descriptor instead.
func (RES_PROP_TIMEOUT_PROCESSTYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{40}
}

type RES_PROP_OVERLIMIT_TYPE int32

const (
	RES_PROP_OVERLIMIT_TYPE_OVERLIMIT_INVALID   RES_PROP_OVERLIMIT_TYPE = 0
	RES_PROP_OVERLIMIT_TYPE_OVERLIMIT_UNABLEGET RES_PROP_OVERLIMIT_TYPE = 1
	RES_PROP_OVERLIMIT_TYPE_OVERLIMIT_NEWGRID   RES_PROP_OVERLIMIT_TYPE = 2
	RES_PROP_OVERLIMIT_TYPE_OVERLIMIT_LAST      RES_PROP_OVERLIMIT_TYPE = 3
)

// Enum value maps for RES_PROP_OVERLIMIT_TYPE.
var (
	RES_PROP_OVERLIMIT_TYPE_name = map[int32]string{
		0: "OVERLIMIT_INVALID",
		1: "OVERLIMIT_UNABLEGET",
		2: "OVERLIMIT_NEWGRID",
		3: "OVERLIMIT_LAST",
	}
	RES_PROP_OVERLIMIT_TYPE_value = map[string]int32{
		"OVERLIMIT_INVALID":   0,
		"OVERLIMIT_UNABLEGET": 1,
		"OVERLIMIT_NEWGRID":   2,
		"OVERLIMIT_LAST":      3,
	}
)

func (x RES_PROP_OVERLIMIT_TYPE) Enum() *RES_PROP_OVERLIMIT_TYPE {
	p := new(RES_PROP_OVERLIMIT_TYPE)
	*p = x
	return p
}

func (x RES_PROP_OVERLIMIT_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_PROP_OVERLIMIT_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[41].Descriptor()
}

func (RES_PROP_OVERLIMIT_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[41]
}

func (x RES_PROP_OVERLIMIT_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_PROP_OVERLIMIT_TYPE.Descriptor instead.
func (RES_PROP_OVERLIMIT_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{41}
}

type RES_PROP_VALIDTIME_TYPE int32

const (
	RES_PROP_VALIDTIME_TYPE_VALIDTIME_INVALID      RES_PROP_VALIDTIME_TYPE = 0
	RES_PROP_VALIDTIME_TYPE_VALIDTIME_ALWAYS       RES_PROP_VALIDTIME_TYPE = 1
	RES_PROP_VALIDTIME_TYPE_VALIDTIME_FIXEDTIME    RES_PROP_VALIDTIME_TYPE = 2
	RES_PROP_VALIDTIME_TYPE_VALIDTIME_NONFIXEDTIME RES_PROP_VALIDTIME_TYPE = 3
	RES_PROP_VALIDTIME_TYPE_VALIDTIME_LAST         RES_PROP_VALIDTIME_TYPE = 4
)

// Enum value maps for RES_PROP_VALIDTIME_TYPE.
var (
	RES_PROP_VALIDTIME_TYPE_name = map[int32]string{
		0: "VALIDTIME_INVALID",
		1: "VALIDTIME_ALWAYS",
		2: "VALIDTIME_FIXEDTIME",
		3: "VALIDTIME_NONFIXEDTIME",
		4: "VALIDTIME_LAST",
	}
	RES_PROP_VALIDTIME_TYPE_value = map[string]int32{
		"VALIDTIME_INVALID":      0,
		"VALIDTIME_ALWAYS":       1,
		"VALIDTIME_FIXEDTIME":    2,
		"VALIDTIME_NONFIXEDTIME": 3,
		"VALIDTIME_LAST":         4,
	}
)

func (x RES_PROP_VALIDTIME_TYPE) Enum() *RES_PROP_VALIDTIME_TYPE {
	p := new(RES_PROP_VALIDTIME_TYPE)
	*p = x
	return p
}

func (x RES_PROP_VALIDTIME_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_PROP_VALIDTIME_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[42].Descriptor()
}

func (RES_PROP_VALIDTIME_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[42]
}

func (x RES_PROP_VALIDTIME_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_PROP_VALIDTIME_TYPE.Descriptor instead.
func (RES_PROP_VALIDTIME_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{42}
}

type RES_SCARCE_LEVEL_TYPE int32

const (
	RES_SCARCE_LEVEL_TYPE_SCARCE_LEVEL_Normal RES_SCARCE_LEVEL_TYPE = 0
	RES_SCARCE_LEVEL_TYPE_SCARCE_LEVEL_MEDIUM RES_SCARCE_LEVEL_TYPE = 1
	RES_SCARCE_LEVEL_TYPE_SCARCE_LEVEL_HIEGHT RES_SCARCE_LEVEL_TYPE = 2
	RES_SCARCE_LEVEL_TYPE_SCARCE_LEVEL_MAX    RES_SCARCE_LEVEL_TYPE = 3
)

// Enum value maps for RES_SCARCE_LEVEL_TYPE.
var (
	RES_SCARCE_LEVEL_TYPE_name = map[int32]string{
		0: "SCARCE_LEVEL_Normal",
		1: "SCARCE_LEVEL_MEDIUM",
		2: "SCARCE_LEVEL_HIEGHT",
		3: "SCARCE_LEVEL_MAX",
	}
	RES_SCARCE_LEVEL_TYPE_value = map[string]int32{
		"SCARCE_LEVEL_Normal": 0,
		"SCARCE_LEVEL_MEDIUM": 1,
		"SCARCE_LEVEL_HIEGHT": 2,
		"SCARCE_LEVEL_MAX":    3,
	}
)

func (x RES_SCARCE_LEVEL_TYPE) Enum() *RES_SCARCE_LEVEL_TYPE {
	p := new(RES_SCARCE_LEVEL_TYPE)
	*p = x
	return p
}

func (x RES_SCARCE_LEVEL_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_SCARCE_LEVEL_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[43].Descriptor()
}

func (RES_SCARCE_LEVEL_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[43]
}

func (x RES_SCARCE_LEVEL_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_SCARCE_LEVEL_TYPE.Descriptor instead.
func (RES_SCARCE_LEVEL_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{43}
}

type RES_PROP_QUALITY_TYPE int32

const (
	RES_PROP_QUALITY_TYPE_PROP_INVALID RES_PROP_QUALITY_TYPE = 0
	RES_PROP_QUALITY_TYPE_PROP_GREEN   RES_PROP_QUALITY_TYPE = 1
	RES_PROP_QUALITY_TYPE_PROP_BLUE    RES_PROP_QUALITY_TYPE = 2
	RES_PROP_QUALITY_TYPE_PROP_PURPLE  RES_PROP_QUALITY_TYPE = 3
	RES_PROP_QUALITY_TYPE_PROP_ORANGE  RES_PROP_QUALITY_TYPE = 4
	RES_PROP_QUALITY_TYPE_PROP_LAST    RES_PROP_QUALITY_TYPE = 5
)

// Enum value maps for RES_PROP_QUALITY_TYPE.
var (
	RES_PROP_QUALITY_TYPE_name = map[int32]string{
		0: "PROP_INVALID",
		1: "PROP_GREEN",
		2: "PROP_BLUE",
		3: "PROP_PURPLE",
		4: "PROP_ORANGE",
		5: "PROP_LAST",
	}
	RES_PROP_QUALITY_TYPE_value = map[string]int32{
		"PROP_INVALID": 0,
		"PROP_GREEN":   1,
		"PROP_BLUE":    2,
		"PROP_PURPLE":  3,
		"PROP_ORANGE":  4,
		"PROP_LAST":    5,
	}
)

func (x RES_PROP_QUALITY_TYPE) Enum() *RES_PROP_QUALITY_TYPE {
	p := new(RES_PROP_QUALITY_TYPE)
	*p = x
	return p
}

func (x RES_PROP_QUALITY_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_PROP_QUALITY_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[44].Descriptor()
}

func (RES_PROP_QUALITY_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[44]
}

func (x RES_PROP_QUALITY_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_PROP_QUALITY_TYPE.Descriptor instead.
func (RES_PROP_QUALITY_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{44}
}

type RES_CHESS_HERO_QUALITY_TYPE int32

const (
	RES_CHESS_HERO_QUALITY_TYPE_HERO_QUALITY_INVALID RES_CHESS_HERO_QUALITY_TYPE = 0
	RES_CHESS_HERO_QUALITY_TYPE_HERO_QUALITY_WHITE   RES_CHESS_HERO_QUALITY_TYPE = 1
	RES_CHESS_HERO_QUALITY_TYPE_HERO_QUALITY_GREEN   RES_CHESS_HERO_QUALITY_TYPE = 2
	RES_CHESS_HERO_QUALITY_TYPE_HERO_QUALITY_BLUE    RES_CHESS_HERO_QUALITY_TYPE = 3
	RES_CHESS_HERO_QUALITY_TYPE_HERO_QUALITY_PURPLE  RES_CHESS_HERO_QUALITY_TYPE = 4
	RES_CHESS_HERO_QUALITY_TYPE_HERO_QUALITY_ORANGE  RES_CHESS_HERO_QUALITY_TYPE = 5
)

// Enum value maps for RES_CHESS_HERO_QUALITY_TYPE.
var (
	RES_CHESS_HERO_QUALITY_TYPE_name = map[int32]string{
		0: "HERO_QUALITY_INVALID",
		1: "HERO_QUALITY_WHITE",
		2: "HERO_QUALITY_GREEN",
		3: "HERO_QUALITY_BLUE",
		4: "HERO_QUALITY_PURPLE",
		5: "HERO_QUALITY_ORANGE",
	}
	RES_CHESS_HERO_QUALITY_TYPE_value = map[string]int32{
		"HERO_QUALITY_INVALID": 0,
		"HERO_QUALITY_WHITE":   1,
		"HERO_QUALITY_GREEN":   2,
		"HERO_QUALITY_BLUE":    3,
		"HERO_QUALITY_PURPLE":  4,
		"HERO_QUALITY_ORANGE":  5,
	}
)

func (x RES_CHESS_HERO_QUALITY_TYPE) Enum() *RES_CHESS_HERO_QUALITY_TYPE {
	p := new(RES_CHESS_HERO_QUALITY_TYPE)
	*p = x
	return p
}

func (x RES_CHESS_HERO_QUALITY_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_CHESS_HERO_QUALITY_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[45].Descriptor()
}

func (RES_CHESS_HERO_QUALITY_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[45]
}

func (x RES_CHESS_HERO_QUALITY_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_CHESS_HERO_QUALITY_TYPE.Descriptor instead.
func (RES_CHESS_HERO_QUALITY_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{45}
}

type RES_PROP_USE_TYPE int32

const (
	RES_PROP_USE_TYPE_USETYPE_UNUSABLE RES_PROP_USE_TYPE = 0
	RES_PROP_USE_TYPE_USETYPE_PACKUSE  RES_PROP_USE_TYPE = 1
	RES_PROP_USE_TYPE_USETYPE_AUTOUSE  RES_PROP_USE_TYPE = 2
	RES_PROP_USE_TYPE_USETYPE_LAST     RES_PROP_USE_TYPE = 3
)

// Enum value maps for RES_PROP_USE_TYPE.
var (
	RES_PROP_USE_TYPE_name = map[int32]string{
		0: "USETYPE_UNUSABLE",
		1: "USETYPE_PACKUSE",
		2: "USETYPE_AUTOUSE",
		3: "USETYPE_LAST",
	}
	RES_PROP_USE_TYPE_value = map[string]int32{
		"USETYPE_UNUSABLE": 0,
		"USETYPE_PACKUSE":  1,
		"USETYPE_AUTOUSE":  2,
		"USETYPE_LAST":     3,
	}
)

func (x RES_PROP_USE_TYPE) Enum() *RES_PROP_USE_TYPE {
	p := new(RES_PROP_USE_TYPE)
	*p = x
	return p
}

func (x RES_PROP_USE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_PROP_USE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[46].Descriptor()
}

func (RES_PROP_USE_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[46]
}

func (x RES_PROP_USE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_PROP_USE_TYPE.Descriptor instead.
func (RES_PROP_USE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{46}
}

type EAITYPE int32

const (
	EAITYPE_AITYPE_INVALID   EAITYPE = 0 // 无效类型 这个值一定要保留为0，不能修改.
	EAITYPE_AITYPE_CLIENT_AI EAITYPE = 1
	EAITYPE_AITYPE_SERVER_AI EAITYPE = 2
)

// Enum value maps for EAITYPE.
var (
	EAITYPE_name = map[int32]string{
		0: "AITYPE_INVALID",
		1: "AITYPE_CLIENT_AI",
		2: "AITYPE_SERVER_AI",
	}
	EAITYPE_value = map[string]int32{
		"AITYPE_INVALID":   0,
		"AITYPE_CLIENT_AI": 1,
		"AITYPE_SERVER_AI": 2,
	}
)

func (x EAITYPE) Enum() *EAITYPE {
	p := new(EAITYPE)
	*p = x
	return p
}

func (x EAITYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAITYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[47].Descriptor()
}

func (EAITYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[47]
}

func (x EAITYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EAITYPE.Descriptor instead.
func (EAITYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{47}
}

type RES_HEADIMG_TYPE int32

const (
	RES_HEADIMG_TYPE_IMGTYPE__reserved__ RES_HEADIMG_TYPE = 0
	RES_HEADIMG_TYPE_IMGTYPE_RANK        RES_HEADIMG_TYPE = 1
	RES_HEADIMG_TYPE_IMGTYPE_ACTIVITY    RES_HEADIMG_TYPE = 2
)

// Enum value maps for RES_HEADIMG_TYPE.
var (
	RES_HEADIMG_TYPE_name = map[int32]string{
		0: "IMGTYPE__reserved__",
		1: "IMGTYPE_RANK",
		2: "IMGTYPE_ACTIVITY",
	}
	RES_HEADIMG_TYPE_value = map[string]int32{
		"IMGTYPE__reserved__": 0,
		"IMGTYPE_RANK":        1,
		"IMGTYPE_ACTIVITY":    2,
	}
)

func (x RES_HEADIMG_TYPE) Enum() *RES_HEADIMG_TYPE {
	p := new(RES_HEADIMG_TYPE)
	*p = x
	return p
}

func (x RES_HEADIMG_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_HEADIMG_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[48].Descriptor()
}

func (RES_HEADIMG_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[48]
}

func (x RES_HEADIMG_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_HEADIMG_TYPE.Descriptor instead.
func (RES_HEADIMG_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{48}
}

type RES_HEAD_TYPE int32

const (
	RES_HEAD_TYPE_HEADTYPE__reserved__ RES_HEAD_TYPE = 0
	RES_HEAD_TYPE_HEADTYPE_LORD        RES_HEAD_TYPE = 1
	RES_HEAD_TYPE_HEADTYPE_PLATFORM    RES_HEAD_TYPE = 2
)

// Enum value maps for RES_HEAD_TYPE.
var (
	RES_HEAD_TYPE_name = map[int32]string{
		0: "HEADTYPE__reserved__",
		1: "HEADTYPE_LORD",
		2: "HEADTYPE_PLATFORM",
	}
	RES_HEAD_TYPE_value = map[string]int32{
		"HEADTYPE__reserved__": 0,
		"HEADTYPE_LORD":        1,
		"HEADTYPE_PLATFORM":    2,
	}
)

func (x RES_HEAD_TYPE) Enum() *RES_HEAD_TYPE {
	p := new(RES_HEAD_TYPE)
	*p = x
	return p
}

func (x RES_HEAD_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_HEAD_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[49].Descriptor()
}

func (RES_HEAD_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[49]
}

func (x RES_HEAD_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_HEAD_TYPE.Descriptor instead.
func (RES_HEAD_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{49}
}

type EBGMSwitchTimeType int32

const (
	EBGMSwitchTimeType_EBGMSwitchTimeType_None         EBGMSwitchTimeType = 0
	EBGMSwitchTimeType_EBGMSwitchTimeType_UISateChange EBGMSwitchTimeType = 1
	EBGMSwitchTimeType_EBGMSwitchTimeType_BGMEvent     EBGMSwitchTimeType = 2
)

// Enum value maps for EBGMSwitchTimeType.
var (
	EBGMSwitchTimeType_name = map[int32]string{
		0: "EBGMSwitchTimeType_None",
		1: "EBGMSwitchTimeType_UISateChange",
		2: "EBGMSwitchTimeType_BGMEvent",
	}
	EBGMSwitchTimeType_value = map[string]int32{
		"EBGMSwitchTimeType_None":         0,
		"EBGMSwitchTimeType_UISateChange": 1,
		"EBGMSwitchTimeType_BGMEvent":     2,
	}
)

func (x EBGMSwitchTimeType) Enum() *EBGMSwitchTimeType {
	p := new(EBGMSwitchTimeType)
	*p = x
	return p
}

func (x EBGMSwitchTimeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBGMSwitchTimeType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[50].Descriptor()
}

func (EBGMSwitchTimeType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[50]
}

func (x EBGMSwitchTimeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EBGMSwitchTimeType.Descriptor instead.
func (EBGMSwitchTimeType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{50}
}

type EBGMSwitchEventType int32

const (
	EBGMSwitchEventType_EBGMSwitchEventType_None          EBGMSwitchEventType = 0
	EBGMSwitchEventType_EBGMSwitchEventType_InGameLoading EBGMSwitchEventType = 1
	EBGMSwitchEventType_EBGMSwitchEventType_Settle        EBGMSwitchEventType = 2
	EBGMSwitchEventType_EBGMSwitchEventType_LordChoose    EBGMSwitchEventType = 3
)

// Enum value maps for EBGMSwitchEventType.
var (
	EBGMSwitchEventType_name = map[int32]string{
		0: "EBGMSwitchEventType_None",
		1: "EBGMSwitchEventType_InGameLoading",
		2: "EBGMSwitchEventType_Settle",
		3: "EBGMSwitchEventType_LordChoose",
	}
	EBGMSwitchEventType_value = map[string]int32{
		"EBGMSwitchEventType_None":          0,
		"EBGMSwitchEventType_InGameLoading": 1,
		"EBGMSwitchEventType_Settle":        2,
		"EBGMSwitchEventType_LordChoose":    3,
	}
)

func (x EBGMSwitchEventType) Enum() *EBGMSwitchEventType {
	p := new(EBGMSwitchEventType)
	*p = x
	return p
}

func (x EBGMSwitchEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBGMSwitchEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[51].Descriptor()
}

func (EBGMSwitchEventType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[51]
}

func (x EBGMSwitchEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EBGMSwitchEventType.Descriptor instead.
func (EBGMSwitchEventType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{51}
}

type RES_LIMITCYCLE_TYPE int32

const (
	RES_LIMITCYCLE_TYPE_RES_LIMITCYCLE_TYPE__reserved__ RES_LIMITCYCLE_TYPE = 0
	RES_LIMITCYCLE_TYPE_RES_LIMITCYCLE_DAY              RES_LIMITCYCLE_TYPE = 1
	RES_LIMITCYCLE_TYPE_RES_LIMITCYCLE_WEEK             RES_LIMITCYCLE_TYPE = 2
)

// Enum value maps for RES_LIMITCYCLE_TYPE.
var (
	RES_LIMITCYCLE_TYPE_name = map[int32]string{
		0: "RES_LIMITCYCLE_TYPE__reserved__",
		1: "RES_LIMITCYCLE_DAY",
		2: "RES_LIMITCYCLE_WEEK",
	}
	RES_LIMITCYCLE_TYPE_value = map[string]int32{
		"RES_LIMITCYCLE_TYPE__reserved__": 0,
		"RES_LIMITCYCLE_DAY":              1,
		"RES_LIMITCYCLE_WEEK":             2,
	}
)

func (x RES_LIMITCYCLE_TYPE) Enum() *RES_LIMITCYCLE_TYPE {
	p := new(RES_LIMITCYCLE_TYPE)
	*p = x
	return p
}

func (x RES_LIMITCYCLE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_LIMITCYCLE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[52].Descriptor()
}

func (RES_LIMITCYCLE_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[52]
}

func (x RES_LIMITCYCLE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_LIMITCYCLE_TYPE.Descriptor instead.
func (RES_LIMITCYCLE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{52}
}

type SeasonGameRecordStatisticType int32

const (
	SeasonGameRecordStatisticType_SeasonGameRecordStatisticType_GameType SeasonGameRecordStatisticType = 0
	SeasonGameRecordStatisticType_SeasonGameRecordStatisticType_Lord     SeasonGameRecordStatisticType = 1
)

// Enum value maps for SeasonGameRecordStatisticType.
var (
	SeasonGameRecordStatisticType_name = map[int32]string{
		0: "SeasonGameRecordStatisticType_GameType",
		1: "SeasonGameRecordStatisticType_Lord",
	}
	SeasonGameRecordStatisticType_value = map[string]int32{
		"SeasonGameRecordStatisticType_GameType": 0,
		"SeasonGameRecordStatisticType_Lord":     1,
	}
)

func (x SeasonGameRecordStatisticType) Enum() *SeasonGameRecordStatisticType {
	p := new(SeasonGameRecordStatisticType)
	*p = x
	return p
}

func (x SeasonGameRecordStatisticType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SeasonGameRecordStatisticType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[53].Descriptor()
}

func (SeasonGameRecordStatisticType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[53]
}

func (x SeasonGameRecordStatisticType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SeasonGameRecordStatisticType.Descriptor instead.
func (SeasonGameRecordStatisticType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{53}
}

//####邮件--开始####
type COM_GAMETYPE_OPEN_METHOD int32

const (
	COM_GAMETYPE_OPEN_METHOD_GTOM_Invalid   COM_GAMETYPE_OPEN_METHOD = 0
	COM_GAMETYPE_OPEN_METHOD_GTOM_MatchRoom COM_GAMETYPE_OPEN_METHOD = 1
	COM_GAMETYPE_OPEN_METHOD_GTOM_AreaRoom  COM_GAMETYPE_OPEN_METHOD = 2
	COM_GAMETYPE_OPEN_METHOD_GTOM_LocalRoom COM_GAMETYPE_OPEN_METHOD = 3
	COM_GAMETYPE_OPEN_METHOD_GTOM_Max       COM_GAMETYPE_OPEN_METHOD = 4
)

// Enum value maps for COM_GAMETYPE_OPEN_METHOD.
var (
	COM_GAMETYPE_OPEN_METHOD_name = map[int32]string{
		0: "GTOM_Invalid",
		1: "GTOM_MatchRoom",
		2: "GTOM_AreaRoom",
		3: "GTOM_LocalRoom",
		4: "GTOM_Max",
	}
	COM_GAMETYPE_OPEN_METHOD_value = map[string]int32{
		"GTOM_Invalid":   0,
		"GTOM_MatchRoom": 1,
		"GTOM_AreaRoom":  2,
		"GTOM_LocalRoom": 3,
		"GTOM_Max":       4,
	}
)

func (x COM_GAMETYPE_OPEN_METHOD) Enum() *COM_GAMETYPE_OPEN_METHOD {
	p := new(COM_GAMETYPE_OPEN_METHOD)
	*p = x
	return p
}

func (x COM_GAMETYPE_OPEN_METHOD) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (COM_GAMETYPE_OPEN_METHOD) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[54].Descriptor()
}

func (COM_GAMETYPE_OPEN_METHOD) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[54]
}

func (x COM_GAMETYPE_OPEN_METHOD) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use COM_GAMETYPE_OPEN_METHOD.Descriptor instead.
func (COM_GAMETYPE_OPEN_METHOD) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{54}
}

// COM_SEASON_PLAYER_TYPE 赛季玩家类型.
type COM_SEASON_PLAYER_TYPE int32

const (
	COM_SEASON_PLAYER_TYPE_CSPT_MIN         COM_SEASON_PLAYER_TYPE = 0
	COM_SEASON_PLAYER_TYPE_CSPT_COMPETITION COM_SEASON_PLAYER_TYPE = 1
	COM_SEASON_PLAYER_TYPE_CSPT_SOCIAL      COM_SEASON_PLAYER_TYPE = 2
	COM_SEASON_PLAYER_TYPE_CSPT_COLLECT     COM_SEASON_PLAYER_TYPE = 3
	//CSPT_ENTERTAINMENT = 4 [(resdata.keyword_alias) = "赛季娱乐类型玩家"];
	COM_SEASON_PLAYER_TYPE_CSPT_MAX COM_SEASON_PLAYER_TYPE = 4
)

// Enum value maps for COM_SEASON_PLAYER_TYPE.
var (
	COM_SEASON_PLAYER_TYPE_name = map[int32]string{
		0: "CSPT_MIN",
		1: "CSPT_COMPETITION",
		2: "CSPT_SOCIAL",
		3: "CSPT_COLLECT",
		4: "CSPT_MAX",
	}
	COM_SEASON_PLAYER_TYPE_value = map[string]int32{
		"CSPT_MIN":         0,
		"CSPT_COMPETITION": 1,
		"CSPT_SOCIAL":      2,
		"CSPT_COLLECT":     3,
		"CSPT_MAX":         4,
	}
)

func (x COM_SEASON_PLAYER_TYPE) Enum() *COM_SEASON_PLAYER_TYPE {
	p := new(COM_SEASON_PLAYER_TYPE)
	*p = x
	return p
}

func (x COM_SEASON_PLAYER_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (COM_SEASON_PLAYER_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[55].Descriptor()
}

func (COM_SEASON_PLAYER_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[55]
}

func (x COM_SEASON_PLAYER_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use COM_SEASON_PLAYER_TYPE.Descriptor instead.
func (COM_SEASON_PLAYER_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{55}
}

// COM_SEASON_PLAYER_CONDITION 赛季玩家条件.
type COM_SEASON_PLAYER_CONDITION int32

const (
	COM_SEASON_PLAYER_CONDITION_CSPC_INVALID                COM_SEASON_PLAYER_CONDITION = 0
	COM_SEASON_PLAYER_CONDITION_CSPC_USE_COLOR_FETTER       COM_SEASON_PLAYER_CONDITION = 1 // 未实现
	COM_SEASON_PLAYER_CONDITION_CSPC_USE_FETTER             COM_SEASON_PLAYER_CONDITION = 2
	COM_SEASON_PLAYER_CONDITION_CSPC_LORD_TOP1              COM_SEASON_PLAYER_CONDITION = 3
	COM_SEASON_PLAYER_CONDITION_CSPC_LORD_TOP4              COM_SEASON_PLAYER_CONDITION = 4
	COM_SEASON_PLAYER_CONDITION_CSPC_LORD_FIRST_TOP1_TIME   COM_SEASON_PLAYER_CONDITION = 5
	COM_SEASON_PLAYER_CONDITION_CSPC_FIRST_KING_RANK_TIME   COM_SEASON_PLAYER_CONDITION = 6
	COM_SEASON_PLAYER_CONDITION_CSPC_RANK_CONTINUOUSLY_TOP4 COM_SEASON_PLAYER_CONDITION = 7
	COM_SEASON_PLAYER_CONDITION_CSPC_THUMBUP_CNT            COM_SEASON_PLAYER_CONDITION = 8 // 未实现
	COM_SEASON_PLAYER_CONDITION_CSPC_ADD_FRIEND_CNT         COM_SEASON_PLAYER_CONDITION = 9
	COM_SEASON_PLAYER_CONDITION_CSPC_OWN_LORD_SKIN_CNT      COM_SEASON_PLAYER_CONDITION = 10
	COM_SEASON_PLAYER_CONDITION_CSPC_OWN_CHESSBORD_CNT      COM_SEASON_PLAYER_CONDITION = 11
	COM_SEASON_PLAYER_CONDITION_CSPC_TEAM_PLAYER_CNT        COM_SEASON_PLAYER_CONDITION = 12
	COM_SEASON_PLAYER_CONDITION_CSPC_BE_DISCOVERED_CNT      COM_SEASON_PLAYER_CONDITION = 13
	COM_SEASON_PLAYER_CONDITION_CSPC_REACH_MAX_TOKEN        COM_SEASON_PLAYER_CONDITION = 14
	COM_SEASON_PLAYER_CONDITION_CSPC_BADGES_CNT             COM_SEASON_PLAYER_CONDITION = 15 // 未实现
)

// Enum value maps for COM_SEASON_PLAYER_CONDITION.
var (
	COM_SEASON_PLAYER_CONDITION_name = map[int32]string{
		0:  "CSPC_INVALID",
		1:  "CSPC_USE_COLOR_FETTER",
		2:  "CSPC_USE_FETTER",
		3:  "CSPC_LORD_TOP1",
		4:  "CSPC_LORD_TOP4",
		5:  "CSPC_LORD_FIRST_TOP1_TIME",
		6:  "CSPC_FIRST_KING_RANK_TIME",
		7:  "CSPC_RANK_CONTINUOUSLY_TOP4",
		8:  "CSPC_THUMBUP_CNT",
		9:  "CSPC_ADD_FRIEND_CNT",
		10: "CSPC_OWN_LORD_SKIN_CNT",
		11: "CSPC_OWN_CHESSBORD_CNT",
		12: "CSPC_TEAM_PLAYER_CNT",
		13: "CSPC_BE_DISCOVERED_CNT",
		14: "CSPC_REACH_MAX_TOKEN",
		15: "CSPC_BADGES_CNT",
	}
	COM_SEASON_PLAYER_CONDITION_value = map[string]int32{
		"CSPC_INVALID":                0,
		"CSPC_USE_COLOR_FETTER":       1,
		"CSPC_USE_FETTER":             2,
		"CSPC_LORD_TOP1":              3,
		"CSPC_LORD_TOP4":              4,
		"CSPC_LORD_FIRST_TOP1_TIME":   5,
		"CSPC_FIRST_KING_RANK_TIME":   6,
		"CSPC_RANK_CONTINUOUSLY_TOP4": 7,
		"CSPC_THUMBUP_CNT":            8,
		"CSPC_ADD_FRIEND_CNT":         9,
		"CSPC_OWN_LORD_SKIN_CNT":      10,
		"CSPC_OWN_CHESSBORD_CNT":      11,
		"CSPC_TEAM_PLAYER_CNT":        12,
		"CSPC_BE_DISCOVERED_CNT":      13,
		"CSPC_REACH_MAX_TOKEN":        14,
		"CSPC_BADGES_CNT":             15,
	}
)

func (x COM_SEASON_PLAYER_CONDITION) Enum() *COM_SEASON_PLAYER_CONDITION {
	p := new(COM_SEASON_PLAYER_CONDITION)
	*p = x
	return p
}

func (x COM_SEASON_PLAYER_CONDITION) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (COM_SEASON_PLAYER_CONDITION) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[56].Descriptor()
}

func (COM_SEASON_PLAYER_CONDITION) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[56]
}

func (x COM_SEASON_PLAYER_CONDITION) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use COM_SEASON_PLAYER_CONDITION.Descriptor instead.
func (COM_SEASON_PLAYER_CONDITION) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{56}
}

//####邮件--开始####
type ResMailType int32

const (
	ResMailType_ResMailType__reserved__ ResMailType = 0
	ResMailType_ResMailTypeSystem       ResMailType = 1
	ResMailType_ResMailTypeFriend       ResMailType = 2
	ResMailType_ResMailTypeMax          ResMailType = 3
)

// Enum value maps for ResMailType.
var (
	ResMailType_name = map[int32]string{
		0: "ResMailType__reserved__",
		1: "ResMailTypeSystem",
		2: "ResMailTypeFriend",
		3: "ResMailTypeMax",
	}
	ResMailType_value = map[string]int32{
		"ResMailType__reserved__": 0,
		"ResMailTypeSystem":       1,
		"ResMailTypeFriend":       2,
		"ResMailTypeMax":          3,
	}
)

func (x ResMailType) Enum() *ResMailType {
	p := new(ResMailType)
	*p = x
	return p
}

func (x ResMailType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResMailType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[57].Descriptor()
}

func (ResMailType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[57]
}

func (x ResMailType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResMailType.Descriptor instead.
func (ResMailType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{57}
}

type TALK_MSG_USE_TYPE int32

const (
	TALK_MSG_USE_TYPE_USE_TYPE_NULL                    TALK_MSG_USE_TYPE = 0
	TALK_MSG_USE_TYPE_USE_TYPE_IN_GAME                 TALK_MSG_USE_TYPE = 1
	TALK_MSG_USE_TYPE_USE_TYPE_LORD_CHOOSE_CONFIRM     TALK_MSG_USE_TYPE = 2
	TALK_MSG_USE_TYPE_USE_TYPE_LORD_CHOOSE_NOT_CONFIRM TALK_MSG_USE_TYPE = 3
	TALK_MSG_USE_TYPE_USE_TYPE_AUCTION                 TALK_MSG_USE_TYPE = 4
)

// Enum value maps for TALK_MSG_USE_TYPE.
var (
	TALK_MSG_USE_TYPE_name = map[int32]string{
		0: "USE_TYPE_NULL",
		1: "USE_TYPE_IN_GAME",
		2: "USE_TYPE_LORD_CHOOSE_CONFIRM",
		3: "USE_TYPE_LORD_CHOOSE_NOT_CONFIRM",
		4: "USE_TYPE_AUCTION",
	}
	TALK_MSG_USE_TYPE_value = map[string]int32{
		"USE_TYPE_NULL":                    0,
		"USE_TYPE_IN_GAME":                 1,
		"USE_TYPE_LORD_CHOOSE_CONFIRM":     2,
		"USE_TYPE_LORD_CHOOSE_NOT_CONFIRM": 3,
		"USE_TYPE_AUCTION":                 4,
	}
)

func (x TALK_MSG_USE_TYPE) Enum() *TALK_MSG_USE_TYPE {
	p := new(TALK_MSG_USE_TYPE)
	*p = x
	return p
}

func (x TALK_MSG_USE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TALK_MSG_USE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[58].Descriptor()
}

func (TALK_MSG_USE_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[58]
}

func (x TALK_MSG_USE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TALK_MSG_USE_TYPE.Descriptor instead.
func (TALK_MSG_USE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{58}
}

type TALK_TYPE int32

const (
	TALK_TYPE_TALK_TYPE_None          TALK_TYPE = 0
	TALK_TYPE_TALK_TYPE_World         TALK_TYPE = 1
	TALK_TYPE_TALK_TYPE_City          TALK_TYPE = 2
	TALK_TYPE_TALK_TYPE_Private       TALK_TYPE = 3
	TALK_TYPE_TALK_TYPE_Recruit       TALK_TYPE = 4
	TALK_TYPE_TALK_TYPE_Room          TALK_TYPE = 5
	TALK_TYPE_TALK_TYPE_RoomInside    TALK_TYPE = 6
	TALK_TYPE_TALK_TYPE_PrivateInside TALK_TYPE = 7
)

// Enum value maps for TALK_TYPE.
var (
	TALK_TYPE_name = map[int32]string{
		0: "TALK_TYPE_None",
		1: "TALK_TYPE_World",
		2: "TALK_TYPE_City",
		3: "TALK_TYPE_Private",
		4: "TALK_TYPE_Recruit",
		5: "TALK_TYPE_Room",
		6: "TALK_TYPE_RoomInside",
		7: "TALK_TYPE_PrivateInside",
	}
	TALK_TYPE_value = map[string]int32{
		"TALK_TYPE_None":          0,
		"TALK_TYPE_World":         1,
		"TALK_TYPE_City":          2,
		"TALK_TYPE_Private":       3,
		"TALK_TYPE_Recruit":       4,
		"TALK_TYPE_Room":          5,
		"TALK_TYPE_RoomInside":    6,
		"TALK_TYPE_PrivateInside": 7,
	}
)

func (x TALK_TYPE) Enum() *TALK_TYPE {
	p := new(TALK_TYPE)
	*p = x
	return p
}

func (x TALK_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TALK_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[59].Descriptor()
}

func (TALK_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[59]
}

func (x TALK_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TALK_TYPE.Descriptor instead.
func (TALK_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{59}
}

//####解锁条件--开始##
type RES_SYSLOCK_TYPE int32

const (
	RES_SYSLOCK_TYPE_LOCKTYPE_HIDE RES_SYSLOCK_TYPE = 0
	RES_SYSLOCK_TYPE_LOCKTYPE_GREY RES_SYSLOCK_TYPE = 1
)

// Enum value maps for RES_SYSLOCK_TYPE.
var (
	RES_SYSLOCK_TYPE_name = map[int32]string{
		0: "LOCKTYPE_HIDE",
		1: "LOCKTYPE_GREY",
	}
	RES_SYSLOCK_TYPE_value = map[string]int32{
		"LOCKTYPE_HIDE": 0,
		"LOCKTYPE_GREY": 1,
	}
)

func (x RES_SYSLOCK_TYPE) Enum() *RES_SYSLOCK_TYPE {
	p := new(RES_SYSLOCK_TYPE)
	*p = x
	return p
}

func (x RES_SYSLOCK_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_SYSLOCK_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[60].Descriptor()
}

func (RES_SYSLOCK_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[60]
}

func (x RES_SYSLOCK_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_SYSLOCK_TYPE.Descriptor instead.
func (RES_SYSLOCK_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{60}
}

type COM_TOKEN_REFRESH_TYPE int32

const (
	COM_TOKEN_REFRESH_TYPE_COM_TOKEN_REFRESH_NULL   COM_TOKEN_REFRESH_TYPE = 0
	COM_TOKEN_REFRESH_TYPE_COM_TOKEN_REFRESH_DAILY  COM_TOKEN_REFRESH_TYPE = 1
	COM_TOKEN_REFRESH_TYPE_COM_TOKEN_REFRESH_WEEKLY COM_TOKEN_REFRESH_TYPE = 2
)

// Enum value maps for COM_TOKEN_REFRESH_TYPE.
var (
	COM_TOKEN_REFRESH_TYPE_name = map[int32]string{
		0: "COM_TOKEN_REFRESH_NULL",
		1: "COM_TOKEN_REFRESH_DAILY",
		2: "COM_TOKEN_REFRESH_WEEKLY",
	}
	COM_TOKEN_REFRESH_TYPE_value = map[string]int32{
		"COM_TOKEN_REFRESH_NULL":   0,
		"COM_TOKEN_REFRESH_DAILY":  1,
		"COM_TOKEN_REFRESH_WEEKLY": 2,
	}
)

func (x COM_TOKEN_REFRESH_TYPE) Enum() *COM_TOKEN_REFRESH_TYPE {
	p := new(COM_TOKEN_REFRESH_TYPE)
	*p = x
	return p
}

func (x COM_TOKEN_REFRESH_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (COM_TOKEN_REFRESH_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[61].Descriptor()
}

func (COM_TOKEN_REFRESH_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[61]
}

func (x COM_TOKEN_REFRESH_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use COM_TOKEN_REFRESH_TYPE.Descriptor instead.
func (COM_TOKEN_REFRESH_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{61}
}

type COM_SYSTEM_TYPE int32

const (
	COM_SYSTEM_TYPE_COM_SYSTEM_TYPE_NULL COM_SYSTEM_TYPE = 0
	COM_SYSTEM_TYPE_COM_SYSTEM_TYPE_RANK COM_SYSTEM_TYPE = 1
)

// Enum value maps for COM_SYSTEM_TYPE.
var (
	COM_SYSTEM_TYPE_name = map[int32]string{
		0: "COM_SYSTEM_TYPE_NULL",
		1: "COM_SYSTEM_TYPE_RANK",
	}
	COM_SYSTEM_TYPE_value = map[string]int32{
		"COM_SYSTEM_TYPE_NULL": 0,
		"COM_SYSTEM_TYPE_RANK": 1,
	}
)

func (x COM_SYSTEM_TYPE) Enum() *COM_SYSTEM_TYPE {
	p := new(COM_SYSTEM_TYPE)
	*p = x
	return p
}

func (x COM_SYSTEM_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (COM_SYSTEM_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[62].Descriptor()
}

func (COM_SYSTEM_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[62]
}

func (x COM_SYSTEM_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use COM_SYSTEM_TYPE.Descriptor instead.
func (COM_SYSTEM_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{62}
}

type SCORE_CORRECTION_TYPE int32

const (
	SCORE_CORRECTION_TYPE_SCORE_CORRECTION_NULL       SCORE_CORRECTION_TYPE = 0
	SCORE_CORRECTION_TYPE_SCORE_CORRECTION_RANKPLACE  SCORE_CORRECTION_TYPE = 1
	SCORE_CORRECTION_TYPE_SCORE_CORRECTION_DAILYFIRST SCORE_CORRECTION_TYPE = 2
)

// Enum value maps for SCORE_CORRECTION_TYPE.
var (
	SCORE_CORRECTION_TYPE_name = map[int32]string{
		0: "SCORE_CORRECTION_NULL",
		1: "SCORE_CORRECTION_RANKPLACE",
		2: "SCORE_CORRECTION_DAILYFIRST",
	}
	SCORE_CORRECTION_TYPE_value = map[string]int32{
		"SCORE_CORRECTION_NULL":       0,
		"SCORE_CORRECTION_RANKPLACE":  1,
		"SCORE_CORRECTION_DAILYFIRST": 2,
	}
)

func (x SCORE_CORRECTION_TYPE) Enum() *SCORE_CORRECTION_TYPE {
	p := new(SCORE_CORRECTION_TYPE)
	*p = x
	return p
}

func (x SCORE_CORRECTION_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SCORE_CORRECTION_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[63].Descriptor()
}

func (SCORE_CORRECTION_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[63]
}

func (x SCORE_CORRECTION_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SCORE_CORRECTION_TYPE.Descriptor instead.
func (SCORE_CORRECTION_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{63}
}

type RES_RANK_CONST_TYPE int32

const (
	RES_RANK_CONST_TYPE_INVITE_FRIEND_CHANGE_TIME               RES_RANK_CONST_TYPE = 0
	RES_RANK_CONST_TYPE_BUBBLE_CHANGE_TIME                      RES_RANK_CONST_TYPE = 1
	RES_RANK_CONST_TYPE_BUBBLE_SHOW_TIME                        RES_RANK_CONST_TYPE = 2
	RES_RANK_CONST_TYPE_LORD_CHOOSE_RECODE_CHAT_COOL_TIME       RES_RANK_CONST_TYPE = 3
	RES_RANK_CONST_TYPE_LORD_CHOOSE_WORD_CHAT_COOL_TIME         RES_RANK_CONST_TYPE = 4
	RES_RANK_CONST_TYPE_LORD_CHOOSE_CHAT_BUBBLE_SHOW_TIME       RES_RANK_CONST_TYPE = 5
	RES_RANK_CONST_TYPE_LORD_CHOOSE_CHAT_STRONG_ENEMY_COOL_TIME RES_RANK_CONST_TYPE = 6
)

// Enum value maps for RES_RANK_CONST_TYPE.
var (
	RES_RANK_CONST_TYPE_name = map[int32]string{
		0: "INVITE_FRIEND_CHANGE_TIME",
		1: "BUBBLE_CHANGE_TIME",
		2: "BUBBLE_SHOW_TIME",
		3: "LORD_CHOOSE_RECODE_CHAT_COOL_TIME",
		4: "LORD_CHOOSE_WORD_CHAT_COOL_TIME",
		5: "LORD_CHOOSE_CHAT_BUBBLE_SHOW_TIME",
		6: "LORD_CHOOSE_CHAT_STRONG_ENEMY_COOL_TIME",
	}
	RES_RANK_CONST_TYPE_value = map[string]int32{
		"INVITE_FRIEND_CHANGE_TIME":               0,
		"BUBBLE_CHANGE_TIME":                      1,
		"BUBBLE_SHOW_TIME":                        2,
		"LORD_CHOOSE_RECODE_CHAT_COOL_TIME":       3,
		"LORD_CHOOSE_WORD_CHAT_COOL_TIME":         4,
		"LORD_CHOOSE_CHAT_BUBBLE_SHOW_TIME":       5,
		"LORD_CHOOSE_CHAT_STRONG_ENEMY_COOL_TIME": 6,
	}
)

func (x RES_RANK_CONST_TYPE) Enum() *RES_RANK_CONST_TYPE {
	p := new(RES_RANK_CONST_TYPE)
	*p = x
	return p
}

func (x RES_RANK_CONST_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_RANK_CONST_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[64].Descriptor()
}

func (RES_RANK_CONST_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[64]
}

func (x RES_RANK_CONST_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_RANK_CONST_TYPE.Descriptor instead.
func (RES_RANK_CONST_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{64}
}

type ActorType int32

const (
	ActorType_ActorTypeInvalid               ActorType = 0
	ActorType_ActorTypeHero                  ActorType = 1
	ActorType_ActorTypeLord                  ActorType = 2
	ActorType_ActorTypeBullet                ActorType = 3
	ActorType_ActorTypeInteractItem          ActorType = 4
	ActorType_ActorTypeSummon                ActorType = 5
	ActorType_ActorTypeMonster               ActorType = 6
	ActorType_ActorTypeMixTreasure           ActorType = 7
	ActorType_ActorTypeCoinTreasure          ActorType = 8
	ActorType_ActorTypeExclusiveEquip        ActorType = 9
	ActorType_ActorTypeExclusiveRelative     ActorType = 10
	ActorType_ActorTypeMagicCircle           ActorType = 11
	ActorType_ActorTypeAttachmentHero        ActorType = 12
	ActorType_ActorTypeBuilding1             ActorType = 13
	ActorType_ActorTypeBuilding2             ActorType = 14
	ActorType_ActorTypeLordSpecialBattleHero ActorType = 15
	ActorType_ActorTypeLordSpecialTreasure   ActorType = 16
	ActorType_ActorTypeHeroTreasure          ActorType = 17
	ActorType_ActorTypeRelativeTreasure      ActorType = 18
	ActorType_ActorTypeEquipTreasure         ActorType = 19
	ActorType_ActorTypeMassiveTreasure       ActorType = 20
	ActorType_ActorTypeMax                   ActorType = 21
)

// Enum value maps for ActorType.
var (
	ActorType_name = map[int32]string{
		0:  "ActorTypeInvalid",
		1:  "ActorTypeHero",
		2:  "ActorTypeLord",
		3:  "ActorTypeBullet",
		4:  "ActorTypeInteractItem",
		5:  "ActorTypeSummon",
		6:  "ActorTypeMonster",
		7:  "ActorTypeMixTreasure",
		8:  "ActorTypeCoinTreasure",
		9:  "ActorTypeExclusiveEquip",
		10: "ActorTypeExclusiveRelative",
		11: "ActorTypeMagicCircle",
		12: "ActorTypeAttachmentHero",
		13: "ActorTypeBuilding1",
		14: "ActorTypeBuilding2",
		15: "ActorTypeLordSpecialBattleHero",
		16: "ActorTypeLordSpecialTreasure",
		17: "ActorTypeHeroTreasure",
		18: "ActorTypeRelativeTreasure",
		19: "ActorTypeEquipTreasure",
		20: "ActorTypeMassiveTreasure",
		21: "ActorTypeMax",
	}
	ActorType_value = map[string]int32{
		"ActorTypeInvalid":               0,
		"ActorTypeHero":                  1,
		"ActorTypeLord":                  2,
		"ActorTypeBullet":                3,
		"ActorTypeInteractItem":          4,
		"ActorTypeSummon":                5,
		"ActorTypeMonster":               6,
		"ActorTypeMixTreasure":           7,
		"ActorTypeCoinTreasure":          8,
		"ActorTypeExclusiveEquip":        9,
		"ActorTypeExclusiveRelative":     10,
		"ActorTypeMagicCircle":           11,
		"ActorTypeAttachmentHero":        12,
		"ActorTypeBuilding1":             13,
		"ActorTypeBuilding2":             14,
		"ActorTypeLordSpecialBattleHero": 15,
		"ActorTypeLordSpecialTreasure":   16,
		"ActorTypeHeroTreasure":          17,
		"ActorTypeRelativeTreasure":      18,
		"ActorTypeEquipTreasure":         19,
		"ActorTypeMassiveTreasure":       20,
		"ActorTypeMax":                   21,
	}
)

func (x ActorType) Enum() *ActorType {
	p := new(ActorType)
	*p = x
	return p
}

func (x ActorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActorType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[65].Descriptor()
}

func (ActorType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[65]
}

func (x ActorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActorType.Descriptor instead.
func (ActorType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{65}
}

type SortRule int32

const (
	SortRule_AIAttrTypeNone          SortRule = 0
	SortRule_SortRuleFromLeftToRight SortRule = 1
	SortRule_SortRuleFromRightToLeft SortRule = 2
)

// Enum value maps for SortRule.
var (
	SortRule_name = map[int32]string{
		0: "AIAttrTypeNone",
		1: "SortRuleFromLeftToRight",
		2: "SortRuleFromRightToLeft",
	}
	SortRule_value = map[string]int32{
		"AIAttrTypeNone":          0,
		"SortRuleFromLeftToRight": 1,
		"SortRuleFromRightToLeft": 2,
	}
)

func (x SortRule) Enum() *SortRule {
	p := new(SortRule)
	*p = x
	return p
}

func (x SortRule) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortRule) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[66].Descriptor()
}

func (SortRule) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[66]
}

func (x SortRule) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortRule.Descriptor instead.
func (SortRule) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{66}
}

type AIAttrType int32

const (
	AIAttrType_AIAttrType_None      AIAttrType = 0
	AIAttrType_AIAttrType_AD        AIAttrType = 1
	AIAttrType_AIAttrType_AP        AIAttrType = 2
	AIAttrType_AIAttrType_ADCrit    AIAttrType = 3
	AIAttrType_AIAttrType_ADDefense AIAttrType = 4
	AIAttrType_AIAttrType_APDefense AIAttrType = 5
	AIAttrType_AIAttrType_Power     AIAttrType = 6
	AIAttrType_AIAttrType_ADHp      AIAttrType = 7
	AIAttrType_AIAttrType_APHp      AIAttrType = 8
	AIAttrType_AIAttrType_ADSpeed   AIAttrType = 9
	AIAttrType_AIAttrType_HP        AIAttrType = 10
)

// Enum value maps for AIAttrType.
var (
	AIAttrType_name = map[int32]string{
		0:  "AIAttrType_None",
		1:  "AIAttrType_AD",
		2:  "AIAttrType_AP",
		3:  "AIAttrType_ADCrit",
		4:  "AIAttrType_ADDefense",
		5:  "AIAttrType_APDefense",
		6:  "AIAttrType_Power",
		7:  "AIAttrType_ADHp",
		8:  "AIAttrType_APHp",
		9:  "AIAttrType_ADSpeed",
		10: "AIAttrType_HP",
	}
	AIAttrType_value = map[string]int32{
		"AIAttrType_None":      0,
		"AIAttrType_AD":        1,
		"AIAttrType_AP":        2,
		"AIAttrType_ADCrit":    3,
		"AIAttrType_ADDefense": 4,
		"AIAttrType_APDefense": 5,
		"AIAttrType_Power":     6,
		"AIAttrType_ADHp":      7,
		"AIAttrType_APHp":      8,
		"AIAttrType_ADSpeed":   9,
		"AIAttrType_HP":        10,
	}
)

func (x AIAttrType) Enum() *AIAttrType {
	p := new(AIAttrType)
	*p = x
	return p
}

func (x AIAttrType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AIAttrType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[67].Descriptor()
}

func (AIAttrType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[67]
}

func (x AIAttrType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AIAttrType.Descriptor instead.
func (AIAttrType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{67}
}

type AICommunicationType int32

const (
	AICommunicationType_AICommunicationType_None     AICommunicationType = 0
	AICommunicationType_AICommunicationType_Positive AICommunicationType = 1
	AICommunicationType_AICommunicationType_Normal   AICommunicationType = 2
	AICommunicationType_AICommunicationType_Negative AICommunicationType = 3
	AICommunicationType_AICommunicationType_All      AICommunicationType = 4
)

// Enum value maps for AICommunicationType.
var (
	AICommunicationType_name = map[int32]string{
		0: "AICommunicationType_None",
		1: "AICommunicationType_Positive",
		2: "AICommunicationType_Normal",
		3: "AICommunicationType_Negative",
		4: "AICommunicationType_All",
	}
	AICommunicationType_value = map[string]int32{
		"AICommunicationType_None":     0,
		"AICommunicationType_Positive": 1,
		"AICommunicationType_Normal":   2,
		"AICommunicationType_Negative": 3,
		"AICommunicationType_All":      4,
	}
)

func (x AICommunicationType) Enum() *AICommunicationType {
	p := new(AICommunicationType)
	*p = x
	return p
}

func (x AICommunicationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AICommunicationType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[68].Descriptor()
}

func (AICommunicationType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[68]
}

func (x AICommunicationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AICommunicationType.Descriptor instead.
func (AICommunicationType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{68}
}

type AIRestartBuffShopType int32

const (
	AIRestartBuffShopType_AIRestartBuffShopType_None              AIRestartBuffShopType = 0
	AIRestartBuffShopType_AIRestartBuffShopType_TargetHP          AIRestartBuffShopType = 1
	AIRestartBuffShopType_AIRestartBuffShopType_ContinusLoseCount AIRestartBuffShopType = 2
	AIRestartBuffShopType_AIRestartBuffShopType_TargetRound       AIRestartBuffShopType = 3
)

// Enum value maps for AIRestartBuffShopType.
var (
	AIRestartBuffShopType_name = map[int32]string{
		0: "AIRestartBuffShopType_None",
		1: "AIRestartBuffShopType_TargetHP",
		2: "AIRestartBuffShopType_ContinusLoseCount",
		3: "AIRestartBuffShopType_TargetRound",
	}
	AIRestartBuffShopType_value = map[string]int32{
		"AIRestartBuffShopType_None":              0,
		"AIRestartBuffShopType_TargetHP":          1,
		"AIRestartBuffShopType_ContinusLoseCount": 2,
		"AIRestartBuffShopType_TargetRound":       3,
	}
)

func (x AIRestartBuffShopType) Enum() *AIRestartBuffShopType {
	p := new(AIRestartBuffShopType)
	*p = x
	return p
}

func (x AIRestartBuffShopType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AIRestartBuffShopType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[69].Descriptor()
}

func (AIRestartBuffShopType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[69]
}

func (x AIRestartBuffShopType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AIRestartBuffShopType.Descriptor instead.
func (AIRestartBuffShopType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{69}
}

type AICommunicationTrigger int32

const (
	AICommunicationTrigger_AICommunicationTrigger_None         AICommunicationTrigger = 0
	AICommunicationTrigger_AICommunicationTrigger_Auction      AICommunicationTrigger = 1
	AICommunicationTrigger_AICommunicationTrigger_BattleWin    AICommunicationTrigger = 2
	AICommunicationTrigger_AICommunicationTrigger_BattleFail   AICommunicationTrigger = 3
	AICommunicationTrigger_AICommunicationTrigger_PreparePhase AICommunicationTrigger = 4
	AICommunicationTrigger_AICommunicationTrigger_BattlePhase  AICommunicationTrigger = 5
)

// Enum value maps for AICommunicationTrigger.
var (
	AICommunicationTrigger_name = map[int32]string{
		0: "AICommunicationTrigger_None",
		1: "AICommunicationTrigger_Auction",
		2: "AICommunicationTrigger_BattleWin",
		3: "AICommunicationTrigger_BattleFail",
		4: "AICommunicationTrigger_PreparePhase",
		5: "AICommunicationTrigger_BattlePhase",
	}
	AICommunicationTrigger_value = map[string]int32{
		"AICommunicationTrigger_None":         0,
		"AICommunicationTrigger_Auction":      1,
		"AICommunicationTrigger_BattleWin":    2,
		"AICommunicationTrigger_BattleFail":   3,
		"AICommunicationTrigger_PreparePhase": 4,
		"AICommunicationTrigger_BattlePhase":  5,
	}
)

func (x AICommunicationTrigger) Enum() *AICommunicationTrigger {
	p := new(AICommunicationTrigger)
	*p = x
	return p
}

func (x AICommunicationTrigger) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AICommunicationTrigger) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[70].Descriptor()
}

func (AICommunicationTrigger) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[70]
}

func (x AICommunicationTrigger) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AICommunicationTrigger.Descriptor instead.
func (AICommunicationTrigger) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{70}
}

type RES_PROJECT8_EQUIP_CONTAINER_TYPE int32

const (
	RES_PROJECT8_EQUIP_CONTAINER_TYPE_RES_PROJECT8_EQUIP_CONTAINER_COMMON    RES_PROJECT8_EQUIP_CONTAINER_TYPE = 0
	RES_PROJECT8_EQUIP_CONTAINER_TYPE_RES_PROJECT8_EQUIP_CONTAINER_INVISIBLE RES_PROJECT8_EQUIP_CONTAINER_TYPE = 1
	RES_PROJECT8_EQUIP_CONTAINER_TYPE_RES_PROJECT8_EQUIP_CONTAINER_COUNT     RES_PROJECT8_EQUIP_CONTAINER_TYPE = 2
)

// Enum value maps for RES_PROJECT8_EQUIP_CONTAINER_TYPE.
var (
	RES_PROJECT8_EQUIP_CONTAINER_TYPE_name = map[int32]string{
		0: "RES_PROJECT8_EQUIP_CONTAINER_COMMON",
		1: "RES_PROJECT8_EQUIP_CONTAINER_INVISIBLE",
		2: "RES_PROJECT8_EQUIP_CONTAINER_COUNT",
	}
	RES_PROJECT8_EQUIP_CONTAINER_TYPE_value = map[string]int32{
		"RES_PROJECT8_EQUIP_CONTAINER_COMMON":    0,
		"RES_PROJECT8_EQUIP_CONTAINER_INVISIBLE": 1,
		"RES_PROJECT8_EQUIP_CONTAINER_COUNT":     2,
	}
)

func (x RES_PROJECT8_EQUIP_CONTAINER_TYPE) Enum() *RES_PROJECT8_EQUIP_CONTAINER_TYPE {
	p := new(RES_PROJECT8_EQUIP_CONTAINER_TYPE)
	*p = x
	return p
}

func (x RES_PROJECT8_EQUIP_CONTAINER_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_PROJECT8_EQUIP_CONTAINER_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[71].Descriptor()
}

func (RES_PROJECT8_EQUIP_CONTAINER_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[71]
}

func (x RES_PROJECT8_EQUIP_CONTAINER_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_PROJECT8_EQUIP_CONTAINER_TYPE.Descriptor instead.
func (RES_PROJECT8_EQUIP_CONTAINER_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{71}
}

type RES_PROJECT8_EQUIP_FUNC_TYPE int32

const (
	RES_PROJECT8_EQUIP_FUNC_TYPE_RES_PROJECT8_EQUIP_FUNC_TYPE_DEFAULT        RES_PROJECT8_EQUIP_FUNC_TYPE = 0
	RES_PROJECT8_EQUIP_FUNC_TYPE_RES_PROJECT8_EQUIP_FUNC_TYPE_REMOVER        RES_PROJECT8_EQUIP_FUNC_TYPE = 1
	RES_PROJECT8_EQUIP_FUNC_TYPE_RES_PROJECT8_EQUIP_FUNC_TYPE_INVISIBLE      RES_PROJECT8_EQUIP_FUNC_TYPE = 2
	RES_PROJECT8_EQUIP_FUNC_TYPE_RES_PROJECT8_EQUIP_FUNC_TYPE_HUANHUALINGPAI RES_PROJECT8_EQUIP_FUNC_TYPE = 3
	RES_PROJECT8_EQUIP_FUNC_TYPE_RES_PROJECT8_EQUIP_FUNC_TYPE_POPULATION     RES_PROJECT8_EQUIP_FUNC_TYPE = 4
	RES_PROJECT8_EQUIP_FUNC_TYPE_RES_PROJECT8_EQUIP_FUNC_TYPE_HAIDU          RES_PROJECT8_EQUIP_FUNC_TYPE = 5
	RES_PROJECT8_EQUIP_FUNC_TYPE_RES_PROJECT8_EQUIP_FUNC_TYPE_TOKEN          RES_PROJECT8_EQUIP_FUNC_TYPE = 6
	RES_PROJECT8_EQUIP_FUNC_TYPE_RES_PROJECT8_EQUIP_FUNC_TYPE_TEAM_OF_STAR   RES_PROJECT8_EQUIP_FUNC_TYPE = 7
)

// Enum value maps for RES_PROJECT8_EQUIP_FUNC_TYPE.
var (
	RES_PROJECT8_EQUIP_FUNC_TYPE_name = map[int32]string{
		0: "RES_PROJECT8_EQUIP_FUNC_TYPE_DEFAULT",
		1: "RES_PROJECT8_EQUIP_FUNC_TYPE_REMOVER",
		2: "RES_PROJECT8_EQUIP_FUNC_TYPE_INVISIBLE",
		3: "RES_PROJECT8_EQUIP_FUNC_TYPE_HUANHUALINGPAI",
		4: "RES_PROJECT8_EQUIP_FUNC_TYPE_POPULATION",
		5: "RES_PROJECT8_EQUIP_FUNC_TYPE_HAIDU",
		6: "RES_PROJECT8_EQUIP_FUNC_TYPE_TOKEN",
		7: "RES_PROJECT8_EQUIP_FUNC_TYPE_TEAM_OF_STAR",
	}
	RES_PROJECT8_EQUIP_FUNC_TYPE_value = map[string]int32{
		"RES_PROJECT8_EQUIP_FUNC_TYPE_DEFAULT":        0,
		"RES_PROJECT8_EQUIP_FUNC_TYPE_REMOVER":        1,
		"RES_PROJECT8_EQUIP_FUNC_TYPE_INVISIBLE":      2,
		"RES_PROJECT8_EQUIP_FUNC_TYPE_HUANHUALINGPAI": 3,
		"RES_PROJECT8_EQUIP_FUNC_TYPE_POPULATION":     4,
		"RES_PROJECT8_EQUIP_FUNC_TYPE_HAIDU":          5,
		"RES_PROJECT8_EQUIP_FUNC_TYPE_TOKEN":          6,
		"RES_PROJECT8_EQUIP_FUNC_TYPE_TEAM_OF_STAR":   7,
	}
)

func (x RES_PROJECT8_EQUIP_FUNC_TYPE) Enum() *RES_PROJECT8_EQUIP_FUNC_TYPE {
	p := new(RES_PROJECT8_EQUIP_FUNC_TYPE)
	*p = x
	return p
}

func (x RES_PROJECT8_EQUIP_FUNC_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_PROJECT8_EQUIP_FUNC_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[72].Descriptor()
}

func (RES_PROJECT8_EQUIP_FUNC_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[72]
}

func (x RES_PROJECT8_EQUIP_FUNC_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_PROJECT8_EQUIP_FUNC_TYPE.Descriptor instead.
func (RES_PROJECT8_EQUIP_FUNC_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{72}
}

type RES_PROJECT8_EQUIP_UPGRADE_TYPE int32

const (
	RES_PROJECT8_EQUIP_UPGRADE_TYPE_RES_PROJECT8_EQUIP_UPGRADE_TYPE_DEFAULT RES_PROJECT8_EQUIP_UPGRADE_TYPE = 0
	RES_PROJECT8_EQUIP_UPGRADE_TYPE_RES_PROJECT8_EQUIP_UPGRADE_TYPE_FREE    RES_PROJECT8_EQUIP_UPGRADE_TYPE = 1
	RES_PROJECT8_EQUIP_UPGRADE_TYPE_RES_PROJECT8_EQUIP_UPGRADE_TYPE_EQUIP   RES_PROJECT8_EQUIP_UPGRADE_TYPE = 2
	RES_PROJECT8_EQUIP_UPGRADE_TYPE_RES_PROJECT8_EQUIP_UPGRADE_TYPE_COIN    RES_PROJECT8_EQUIP_UPGRADE_TYPE = 3
)

// Enum value maps for RES_PROJECT8_EQUIP_UPGRADE_TYPE.
var (
	RES_PROJECT8_EQUIP_UPGRADE_TYPE_name = map[int32]string{
		0: "RES_PROJECT8_EQUIP_UPGRADE_TYPE_DEFAULT",
		1: "RES_PROJECT8_EQUIP_UPGRADE_TYPE_FREE",
		2: "RES_PROJECT8_EQUIP_UPGRADE_TYPE_EQUIP",
		3: "RES_PROJECT8_EQUIP_UPGRADE_TYPE_COIN",
	}
	RES_PROJECT8_EQUIP_UPGRADE_TYPE_value = map[string]int32{
		"RES_PROJECT8_EQUIP_UPGRADE_TYPE_DEFAULT": 0,
		"RES_PROJECT8_EQUIP_UPGRADE_TYPE_FREE":    1,
		"RES_PROJECT8_EQUIP_UPGRADE_TYPE_EQUIP":   2,
		"RES_PROJECT8_EQUIP_UPGRADE_TYPE_COIN":    3,
	}
)

func (x RES_PROJECT8_EQUIP_UPGRADE_TYPE) Enum() *RES_PROJECT8_EQUIP_UPGRADE_TYPE {
	p := new(RES_PROJECT8_EQUIP_UPGRADE_TYPE)
	*p = x
	return p
}

func (x RES_PROJECT8_EQUIP_UPGRADE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_PROJECT8_EQUIP_UPGRADE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[73].Descriptor()
}

func (RES_PROJECT8_EQUIP_UPGRADE_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[73]
}

func (x RES_PROJECT8_EQUIP_UPGRADE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_PROJECT8_EQUIP_UPGRADE_TYPE.Descriptor instead.
func (RES_PROJECT8_EQUIP_UPGRADE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{73}
}

type RES_PROJECT8_EQUIP_GRID_FUNC_TYPE int32

const (
	RES_PROJECT8_EQUIP_GRID_FUNC_TYPE_RES_PROJECT8_EQUIP_GRID_FUNC_TYPE_DEFAULT RES_PROJECT8_EQUIP_GRID_FUNC_TYPE = 0
	RES_PROJECT8_EQUIP_GRID_FUNC_TYPE_RES_PROJECT8_EQUIP_GRID_FUNC_TYPE_HAIDU   RES_PROJECT8_EQUIP_GRID_FUNC_TYPE = 1
	RES_PROJECT8_EQUIP_GRID_FUNC_TYPE_RES_PROJECT8_EQUIP_GRID_FUNC_TYPE_CORE    RES_PROJECT8_EQUIP_GRID_FUNC_TYPE = 2
	RES_PROJECT8_EQUIP_GRID_FUNC_TYPE_RES_PROJECT8_EQUIP_GRID_FUNC_TYPE_MAXTYPE RES_PROJECT8_EQUIP_GRID_FUNC_TYPE = 3
)

// Enum value maps for RES_PROJECT8_EQUIP_GRID_FUNC_TYPE.
var (
	RES_PROJECT8_EQUIP_GRID_FUNC_TYPE_name = map[int32]string{
		0: "RES_PROJECT8_EQUIP_GRID_FUNC_TYPE_DEFAULT",
		1: "RES_PROJECT8_EQUIP_GRID_FUNC_TYPE_HAIDU",
		2: "RES_PROJECT8_EQUIP_GRID_FUNC_TYPE_CORE",
		3: "RES_PROJECT8_EQUIP_GRID_FUNC_TYPE_MAXTYPE",
	}
	RES_PROJECT8_EQUIP_GRID_FUNC_TYPE_value = map[string]int32{
		"RES_PROJECT8_EQUIP_GRID_FUNC_TYPE_DEFAULT": 0,
		"RES_PROJECT8_EQUIP_GRID_FUNC_TYPE_HAIDU":   1,
		"RES_PROJECT8_EQUIP_GRID_FUNC_TYPE_CORE":    2,
		"RES_PROJECT8_EQUIP_GRID_FUNC_TYPE_MAXTYPE": 3,
	}
)

func (x RES_PROJECT8_EQUIP_GRID_FUNC_TYPE) Enum() *RES_PROJECT8_EQUIP_GRID_FUNC_TYPE {
	p := new(RES_PROJECT8_EQUIP_GRID_FUNC_TYPE)
	*p = x
	return p
}

func (x RES_PROJECT8_EQUIP_GRID_FUNC_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_PROJECT8_EQUIP_GRID_FUNC_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[74].Descriptor()
}

func (RES_PROJECT8_EQUIP_GRID_FUNC_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[74]
}

func (x RES_PROJECT8_EQUIP_GRID_FUNC_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_PROJECT8_EQUIP_GRID_FUNC_TYPE.Descriptor instead.
func (RES_PROJECT8_EQUIP_GRID_FUNC_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{74}
}

type RES_PROJECT8_EQUIP_GRID_MASK_TYPE int32

const (
	RES_PROJECT8_EQUIP_GRID_MASK_TYPE_RES_PROJECT8_EQUIP_GRID_MASK_TYPE_NONE    RES_PROJECT8_EQUIP_GRID_MASK_TYPE = 0
	RES_PROJECT8_EQUIP_GRID_MASK_TYPE_RES_PROJECT8_EQUIP_GRID_MASK_TYPE_DEFAULT RES_PROJECT8_EQUIP_GRID_MASK_TYPE = 1
	RES_PROJECT8_EQUIP_GRID_MASK_TYPE_RES_PROJECT8_EQUIP_GRID_MASK_TYPE_HAIDU   RES_PROJECT8_EQUIP_GRID_MASK_TYPE = 2
	RES_PROJECT8_EQUIP_GRID_MASK_TYPE_RES_PROJECT8_EQUIP_GRID_MASK_TYPE_CORE    RES_PROJECT8_EQUIP_GRID_MASK_TYPE = 4
)

// Enum value maps for RES_PROJECT8_EQUIP_GRID_MASK_TYPE.
var (
	RES_PROJECT8_EQUIP_GRID_MASK_TYPE_name = map[int32]string{
		0: "RES_PROJECT8_EQUIP_GRID_MASK_TYPE_NONE",
		1: "RES_PROJECT8_EQUIP_GRID_MASK_TYPE_DEFAULT",
		2: "RES_PROJECT8_EQUIP_GRID_MASK_TYPE_HAIDU",
		4: "RES_PROJECT8_EQUIP_GRID_MASK_TYPE_CORE",
	}
	RES_PROJECT8_EQUIP_GRID_MASK_TYPE_value = map[string]int32{
		"RES_PROJECT8_EQUIP_GRID_MASK_TYPE_NONE":    0,
		"RES_PROJECT8_EQUIP_GRID_MASK_TYPE_DEFAULT": 1,
		"RES_PROJECT8_EQUIP_GRID_MASK_TYPE_HAIDU":   2,
		"RES_PROJECT8_EQUIP_GRID_MASK_TYPE_CORE":    4,
	}
)

func (x RES_PROJECT8_EQUIP_GRID_MASK_TYPE) Enum() *RES_PROJECT8_EQUIP_GRID_MASK_TYPE {
	p := new(RES_PROJECT8_EQUIP_GRID_MASK_TYPE)
	*p = x
	return p
}

func (x RES_PROJECT8_EQUIP_GRID_MASK_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_PROJECT8_EQUIP_GRID_MASK_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[75].Descriptor()
}

func (RES_PROJECT8_EQUIP_GRID_MASK_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[75]
}

func (x RES_PROJECT8_EQUIP_GRID_MASK_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_PROJECT8_EQUIP_GRID_MASK_TYPE.Descriptor instead.
func (RES_PROJECT8_EQUIP_GRID_MASK_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{75}
}

type RES_PROJECT8_BUFF_CREATE_PHASE int32

const (
	RES_PROJECT8_BUFF_CREATE_PHASE_RES_PROJECT8_BUFF_CREATE_PHASE_RELATIVE RES_PROJECT8_BUFF_CREATE_PHASE = 0
	RES_PROJECT8_BUFF_CREATE_PHASE_RES_PROJECT8_BUFF_CREATE_PHASE_BATTLE   RES_PROJECT8_BUFF_CREATE_PHASE = 1
	RES_PROJECT8_BUFF_CREATE_PHASE_RES_PROJECT8_BUFF_CREATE_PHASE_ANY      RES_PROJECT8_BUFF_CREATE_PHASE = 2
)

// Enum value maps for RES_PROJECT8_BUFF_CREATE_PHASE.
var (
	RES_PROJECT8_BUFF_CREATE_PHASE_name = map[int32]string{
		0: "RES_PROJECT8_BUFF_CREATE_PHASE_RELATIVE",
		1: "RES_PROJECT8_BUFF_CREATE_PHASE_BATTLE",
		2: "RES_PROJECT8_BUFF_CREATE_PHASE_ANY",
	}
	RES_PROJECT8_BUFF_CREATE_PHASE_value = map[string]int32{
		"RES_PROJECT8_BUFF_CREATE_PHASE_RELATIVE": 0,
		"RES_PROJECT8_BUFF_CREATE_PHASE_BATTLE":   1,
		"RES_PROJECT8_BUFF_CREATE_PHASE_ANY":      2,
	}
)

func (x RES_PROJECT8_BUFF_CREATE_PHASE) Enum() *RES_PROJECT8_BUFF_CREATE_PHASE {
	p := new(RES_PROJECT8_BUFF_CREATE_PHASE)
	*p = x
	return p
}

func (x RES_PROJECT8_BUFF_CREATE_PHASE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_PROJECT8_BUFF_CREATE_PHASE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[76].Descriptor()
}

func (RES_PROJECT8_BUFF_CREATE_PHASE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[76]
}

func (x RES_PROJECT8_BUFF_CREATE_PHASE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_PROJECT8_BUFF_CREATE_PHASE.Descriptor instead.
func (RES_PROJECT8_BUFF_CREATE_PHASE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{76}
}

type COM_LINEUP_GAMETYPE int32

const (
	COM_LINEUP_GAMETYPE_COM_LINEUP_GAMETYPE_Standard COM_LINEUP_GAMETYPE = 0
	COM_LINEUP_GAMETYPE_COM_LINEUP_GAMETYPE_Classic  COM_LINEUP_GAMETYPE = 1
)

// Enum value maps for COM_LINEUP_GAMETYPE.
var (
	COM_LINEUP_GAMETYPE_name = map[int32]string{
		0: "COM_LINEUP_GAMETYPE_Standard",
		1: "COM_LINEUP_GAMETYPE_Classic",
	}
	COM_LINEUP_GAMETYPE_value = map[string]int32{
		"COM_LINEUP_GAMETYPE_Standard": 0,
		"COM_LINEUP_GAMETYPE_Classic":  1,
	}
)

func (x COM_LINEUP_GAMETYPE) Enum() *COM_LINEUP_GAMETYPE {
	p := new(COM_LINEUP_GAMETYPE)
	*p = x
	return p
}

func (x COM_LINEUP_GAMETYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (COM_LINEUP_GAMETYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[77].Descriptor()
}

func (COM_LINEUP_GAMETYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[77]
}

func (x COM_LINEUP_GAMETYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use COM_LINEUP_GAMETYPE.Descriptor instead.
func (COM_LINEUP_GAMETYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{77}
}

type LINE_UP_TYPE int32

const (
	LINE_UP_TYPE_LINE_UP_TYPE_EDITABLE_PRESENT LINE_UP_TYPE = 0
	LINE_UP_TYPE_LINE_UP_TYPE_PRACTICE_ONLY    LINE_UP_TYPE = 1
	LINE_UP_TYPE_LINE_UP_TYPE_RECRUIT_ONLY     LINE_UP_TYPE = 2
	LINE_UP_TYPE_LINE_UP_TYPE_H5               LINE_UP_TYPE = 3
)

// Enum value maps for LINE_UP_TYPE.
var (
	LINE_UP_TYPE_name = map[int32]string{
		0: "LINE_UP_TYPE_EDITABLE_PRESENT",
		1: "LINE_UP_TYPE_PRACTICE_ONLY",
		2: "LINE_UP_TYPE_RECRUIT_ONLY",
		3: "LINE_UP_TYPE_H5",
	}
	LINE_UP_TYPE_value = map[string]int32{
		"LINE_UP_TYPE_EDITABLE_PRESENT": 0,
		"LINE_UP_TYPE_PRACTICE_ONLY":    1,
		"LINE_UP_TYPE_RECRUIT_ONLY":     2,
		"LINE_UP_TYPE_H5":               3,
	}
)

func (x LINE_UP_TYPE) Enum() *LINE_UP_TYPE {
	p := new(LINE_UP_TYPE)
	*p = x
	return p
}

func (x LINE_UP_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LINE_UP_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[78].Descriptor()
}

func (LINE_UP_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[78]
}

func (x LINE_UP_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LINE_UP_TYPE.Descriptor instead.
func (LINE_UP_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{78}
}

type LINE_UP_RECOMMEND_STATE_BIT int32

const (
	LINE_UP_RECOMMEND_STATE_BIT_LINE_UP_RECOMMEND_STATE_BIT_NONE                LINE_UP_RECOMMEND_STATE_BIT = 0
	LINE_UP_RECOMMEND_STATE_BIT_LINE_UP_RECOMMEND_STATE_BIT_POP_RECOMMEND_DESC  LINE_UP_RECOMMEND_STATE_BIT = 1
	LINE_UP_RECOMMEND_STATE_BIT_LINE_UP_RECOMMEND_STATE_BIT_POP_RECOMMEND_PANEL LINE_UP_RECOMMEND_STATE_BIT = 2
	LINE_UP_RECOMMEND_STATE_BIT_LINE_UP_RECOMMEND_STATE_BIT_LOCK_OTHER          LINE_UP_RECOMMEND_STATE_BIT = 4
	LINE_UP_RECOMMEND_STATE_BIT_LINE_UP_RECOMMEND_STATE_BIT_SINK_TO_TAIL        LINE_UP_RECOMMEND_STATE_BIT = 8
)

// Enum value maps for LINE_UP_RECOMMEND_STATE_BIT.
var (
	LINE_UP_RECOMMEND_STATE_BIT_name = map[int32]string{
		0: "LINE_UP_RECOMMEND_STATE_BIT_NONE",
		1: "LINE_UP_RECOMMEND_STATE_BIT_POP_RECOMMEND_DESC",
		2: "LINE_UP_RECOMMEND_STATE_BIT_POP_RECOMMEND_PANEL",
		4: "LINE_UP_RECOMMEND_STATE_BIT_LOCK_OTHER",
		8: "LINE_UP_RECOMMEND_STATE_BIT_SINK_TO_TAIL",
	}
	LINE_UP_RECOMMEND_STATE_BIT_value = map[string]int32{
		"LINE_UP_RECOMMEND_STATE_BIT_NONE":                0,
		"LINE_UP_RECOMMEND_STATE_BIT_POP_RECOMMEND_DESC":  1,
		"LINE_UP_RECOMMEND_STATE_BIT_POP_RECOMMEND_PANEL": 2,
		"LINE_UP_RECOMMEND_STATE_BIT_LOCK_OTHER":          4,
		"LINE_UP_RECOMMEND_STATE_BIT_SINK_TO_TAIL":        8,
	}
)

func (x LINE_UP_RECOMMEND_STATE_BIT) Enum() *LINE_UP_RECOMMEND_STATE_BIT {
	p := new(LINE_UP_RECOMMEND_STATE_BIT)
	*p = x
	return p
}

func (x LINE_UP_RECOMMEND_STATE_BIT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LINE_UP_RECOMMEND_STATE_BIT) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[79].Descriptor()
}

func (LINE_UP_RECOMMEND_STATE_BIT) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[79]
}

func (x LINE_UP_RECOMMEND_STATE_BIT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LINE_UP_RECOMMEND_STATE_BIT.Descriptor instead.
func (LINE_UP_RECOMMEND_STATE_BIT) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{79}
}

// 自走棋回合状态bit
type RoundStateBit int32

const (
	RoundStateBit_ROUND_STATE_BIT_NULL          RoundStateBit = 0
	RoundStateBit_ROUND_STATE_BIT_BEGIN         RoundStateBit = 1
	RoundStateBit_ROUND_STATE_BIT_BATTLE        RoundStateBit = 2
	RoundStateBit_ROUND_STATE_BIT_EXCHANGE_CARD RoundStateBit = 4
	RoundStateBit_ROUND_STATE_BIT_AUCTION       RoundStateBit = 8
	RoundStateBit_ROUND_STATE_BIT_LORD_REWARD   RoundStateBit = 16
	RoundStateBit_ROUND_STATE_BIT_CHOOSE_LORD   RoundStateBit = 32
	RoundStateBit_ROUND_STATE_BIT_BOSS_BATTLE   RoundStateBit = 64
	RoundStateBit_ROUND_STATE_BIT_GRAB_AWARD    RoundStateBit = 128
	RoundStateBit_ROUND_STATE_BIT_NORMAL_BATTLE RoundStateBit = 66
	RoundStateBit_ROUND_STATE_BIT_MAX           RoundStateBit = 9
)

// Enum value maps for RoundStateBit.
var (
	RoundStateBit_name = map[int32]string{
		0:   "ROUND_STATE_BIT_NULL",
		1:   "ROUND_STATE_BIT_BEGIN",
		2:   "ROUND_STATE_BIT_BATTLE",
		4:   "ROUND_STATE_BIT_EXCHANGE_CARD",
		8:   "ROUND_STATE_BIT_AUCTION",
		16:  "ROUND_STATE_BIT_LORD_REWARD",
		32:  "ROUND_STATE_BIT_CHOOSE_LORD",
		64:  "ROUND_STATE_BIT_BOSS_BATTLE",
		128: "ROUND_STATE_BIT_GRAB_AWARD",
		66:  "ROUND_STATE_BIT_NORMAL_BATTLE",
		9:   "ROUND_STATE_BIT_MAX",
	}
	RoundStateBit_value = map[string]int32{
		"ROUND_STATE_BIT_NULL":          0,
		"ROUND_STATE_BIT_BEGIN":         1,
		"ROUND_STATE_BIT_BATTLE":        2,
		"ROUND_STATE_BIT_EXCHANGE_CARD": 4,
		"ROUND_STATE_BIT_AUCTION":       8,
		"ROUND_STATE_BIT_LORD_REWARD":   16,
		"ROUND_STATE_BIT_CHOOSE_LORD":   32,
		"ROUND_STATE_BIT_BOSS_BATTLE":   64,
		"ROUND_STATE_BIT_GRAB_AWARD":    128,
		"ROUND_STATE_BIT_NORMAL_BATTLE": 66,
		"ROUND_STATE_BIT_MAX":           9,
	}
)

func (x RoundStateBit) Enum() *RoundStateBit {
	p := new(RoundStateBit)
	*p = x
	return p
}

func (x RoundStateBit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoundStateBit) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[80].Descriptor()
}

func (RoundStateBit) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[80]
}

func (x RoundStateBit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoundStateBit.Descriptor instead.
func (RoundStateBit) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{80}
}

// 自走棋交互方式
type LordSkillInteraction int32

const (
	LordSkillInteraction_LordSkillInteraction_Passive         LordSkillInteraction = 0
	LordSkillInteraction_LordSkillInteraction_Immediate       LordSkillInteraction = 1
	LordSkillInteraction_LordSkillInteraction_SelectObject    LordSkillInteraction = 2
	LordSkillInteraction_LordSkillInteraction_SelectPosition  LordSkillInteraction = 4
	LordSkillInteraction_LordSkillInteraction_SelectCardStack LordSkillInteraction = 8
	LordSkillInteraction_LordSkillInteraction_SelectAny       LordSkillInteraction = 14
	LordSkillInteraction_LordSkillInteraction_Choice          LordSkillInteraction = 15
)

// Enum value maps for LordSkillInteraction.
var (
	LordSkillInteraction_name = map[int32]string{
		0:  "LordSkillInteraction_Passive",
		1:  "LordSkillInteraction_Immediate",
		2:  "LordSkillInteraction_SelectObject",
		4:  "LordSkillInteraction_SelectPosition",
		8:  "LordSkillInteraction_SelectCardStack",
		14: "LordSkillInteraction_SelectAny",
		15: "LordSkillInteraction_Choice",
	}
	LordSkillInteraction_value = map[string]int32{
		"LordSkillInteraction_Passive":         0,
		"LordSkillInteraction_Immediate":       1,
		"LordSkillInteraction_SelectObject":    2,
		"LordSkillInteraction_SelectPosition":  4,
		"LordSkillInteraction_SelectCardStack": 8,
		"LordSkillInteraction_SelectAny":       14,
		"LordSkillInteraction_Choice":          15,
	}
)

func (x LordSkillInteraction) Enum() *LordSkillInteraction {
	p := new(LordSkillInteraction)
	*p = x
	return p
}

func (x LordSkillInteraction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LordSkillInteraction) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[81].Descriptor()
}

func (LordSkillInteraction) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[81]
}

func (x LordSkillInteraction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LordSkillInteraction.Descriptor instead.
func (LordSkillInteraction) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{81}
}

// 自走棋领主技能消耗类型
type LordSkillCostType int32

const (
	LordSkillCostType_LordSkillCostType_Gold   LordSkillCostType = 0
	LordSkillCostType_LordSkillCostType_Health LordSkillCostType = 1
)

// Enum value maps for LordSkillCostType.
var (
	LordSkillCostType_name = map[int32]string{
		0: "LordSkillCostType_Gold",
		1: "LordSkillCostType_Health",
	}
	LordSkillCostType_value = map[string]int32{
		"LordSkillCostType_Gold":   0,
		"LordSkillCostType_Health": 1,
	}
)

func (x LordSkillCostType) Enum() *LordSkillCostType {
	p := new(LordSkillCostType)
	*p = x
	return p
}

func (x LordSkillCostType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LordSkillCostType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[82].Descriptor()
}

func (LordSkillCostType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[82]
}

func (x LordSkillCostType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LordSkillCostType.Descriptor instead.
func (LordSkillCostType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{82}
}

// 自走棋交互参数
type LordSkillInteractionParam int32

const (
	LordSkillInteractionParam_LordSkillInteractionParam_None                   LordSkillInteractionParam = 0
	LordSkillInteractionParam_LordSkillInteractionParam_HostPrepareObject      LordSkillInteractionParam = 1
	LordSkillInteractionParam_LordSkillInteractionParam_HostInbattleObject     LordSkillInteractionParam = 2
	LordSkillInteractionParam_LordSkillInteractionParam_GuestObject            LordSkillInteractionParam = 4
	LordSkillInteractionParam_LordSkillInteractionParam_Star1Object            LordSkillInteractionParam = 8
	LordSkillInteractionParam_LordSkillInteractionParam_Star2Object            LordSkillInteractionParam = 16
	LordSkillInteractionParam_LordSkillInteractionParam_Star3Object            LordSkillInteractionParam = 32
	LordSkillInteractionParam_LordSkillInteractionParam_HostInbattleHero       LordSkillInteractionParam = 64
	LordSkillInteractionParam_LordSkillInteractionParam_AnyHostObject          LordSkillInteractionParam = 3
	LordSkillInteractionParam_LordSkillInteractionParam_AnyObject              LordSkillInteractionParam = 7
	LordSkillInteractionParam_LordSkillInteractionParam_HostPrepareStar1Object LordSkillInteractionParam = 9
	LordSkillInteractionParam_LordSkillInteractionParam_HostPrepareStar2Object LordSkillInteractionParam = 17
	LordSkillInteractionParam_LordSkillInteractionParam_HostPrepareStar3Object LordSkillInteractionParam = 33
	LordSkillInteractionParam_LordSkillInteractionParam_HostGrid               LordSkillInteractionParam = 1
	LordSkillInteractionParam_LordSkillInteractionParam_HostRow                LordSkillInteractionParam = 2
	LordSkillInteractionParam_LordSkillInteractionParam_OppositeGrid           LordSkillInteractionParam = 4
	LordSkillInteractionParam_LordSkillInteractionParam_OppositeRow            LordSkillInteractionParam = 8
)

// Enum value maps for LordSkillInteractionParam.
var (
	LordSkillInteractionParam_name = map[int32]string{
		0:  "LordSkillInteractionParam_None",
		1:  "LordSkillInteractionParam_HostPrepareObject",
		2:  "LordSkillInteractionParam_HostInbattleObject",
		4:  "LordSkillInteractionParam_GuestObject",
		8:  "LordSkillInteractionParam_Star1Object",
		16: "LordSkillInteractionParam_Star2Object",
		32: "LordSkillInteractionParam_Star3Object",
		64: "LordSkillInteractionParam_HostInbattleHero",
		3:  "LordSkillInteractionParam_AnyHostObject",
		7:  "LordSkillInteractionParam_AnyObject",
		9:  "LordSkillInteractionParam_HostPrepareStar1Object",
		17: "LordSkillInteractionParam_HostPrepareStar2Object",
		33: "LordSkillInteractionParam_HostPrepareStar3Object",
		// Duplicate value: 1: "LordSkillInteractionParam_HostGrid",
		// Duplicate value: 2: "LordSkillInteractionParam_HostRow",
		// Duplicate value: 4: "LordSkillInteractionParam_OppositeGrid",
		// Duplicate value: 8: "LordSkillInteractionParam_OppositeRow",
	}
	LordSkillInteractionParam_value = map[string]int32{
		"LordSkillInteractionParam_None":                   0,
		"LordSkillInteractionParam_HostPrepareObject":      1,
		"LordSkillInteractionParam_HostInbattleObject":     2,
		"LordSkillInteractionParam_GuestObject":            4,
		"LordSkillInteractionParam_Star1Object":            8,
		"LordSkillInteractionParam_Star2Object":            16,
		"LordSkillInteractionParam_Star3Object":            32,
		"LordSkillInteractionParam_HostInbattleHero":       64,
		"LordSkillInteractionParam_AnyHostObject":          3,
		"LordSkillInteractionParam_AnyObject":              7,
		"LordSkillInteractionParam_HostPrepareStar1Object": 9,
		"LordSkillInteractionParam_HostPrepareStar2Object": 17,
		"LordSkillInteractionParam_HostPrepareStar3Object": 33,
		"LordSkillInteractionParam_HostGrid":               1,
		"LordSkillInteractionParam_HostRow":                2,
		"LordSkillInteractionParam_OppositeGrid":           4,
		"LordSkillInteractionParam_OppositeRow":            8,
	}
)

func (x LordSkillInteractionParam) Enum() *LordSkillInteractionParam {
	p := new(LordSkillInteractionParam)
	*p = x
	return p
}

func (x LordSkillInteractionParam) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LordSkillInteractionParam) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[83].Descriptor()
}

func (LordSkillInteractionParam) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[83]
}

func (x LordSkillInteractionParam) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LordSkillInteractionParam.Descriptor instead.
func (LordSkillInteractionParam) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{83}
}

type ELordSkillInstType int32

const (
	ELordSkillInstType_LORD_SKILL_INST_TYPE_NOT_DEFINE    ELordSkillInstType = 0
	ELordSkillInstType_LORD_SKILL_INST_TYPE_DEFAULT       ELordSkillInstType = 1
	ELordSkillInstType_LORD_SKILL_INST_TYPE_LvBu          ELordSkillInstType = 2
	ELordSkillInstType_LORD_SKILL_INST_TYPE_DaQiao        ELordSkillInstType = 3
	ELordSkillInstType_LORD_SKILL_INST_TYPE_DaJi          ELordSkillInstType = 4
	ELordSkillInstType_LORD_SKILL_INST_TYPE_ChangE        ELordSkillInstType = 5
	ELordSkillInstType_LORD_SKILL_INST_TYPE_ZhuangZhou    ELordSkillInstType = 6
	ELordSkillInstType_LORD_SKILL_INST_TYPE_NewbieYao     ELordSkillInstType = 7
	ELordSkillInstType_LORD_SKILL_INST_TYPE_WangZhaoJun   ELordSkillInstType = 8
	ELordSkillInstType_LORD_SKILL_INST_TYPE_LiBai         ELordSkillInstType = 9
	ELordSkillInstType_LORD_SKILL_INST_TYPE_Yao           ELordSkillInstType = 10
	ELordSkillInstType_LORD_SKILL_INST_TYPE_DiaoChan      ELordSkillInstType = 11
	ELordSkillInstType_LORD_SKILL_INST_TYPE_DongFangJing  ELordSkillInstType = 12
	ELordSkillInstType_LORD_SKILL_INST_TYPE_GongSunLi     ELordSkillInstType = 13
	ELordSkillInstType_LORD_SKILL_INST_TYPE_MaKeBoLuo     ELordSkillInstType = 14
	ELordSkillInstType_LORD_SKILL_INST_TYPE_YangYuHuan    ELordSkillInstType = 15
	ELordSkillInstType_LORD_SKILL_INST_TYPE_AI1           ELordSkillInstType = 16
	ELordSkillInstType_LORD_SKILL_INST_TYPE_SunBin        ELordSkillInstType = 17
	ELordSkillInstType_LORD_SKILL_INST_TYPE_SunShangXiang ELordSkillInstType = 18 // 孙尚香
)

// Enum value maps for ELordSkillInstType.
var (
	ELordSkillInstType_name = map[int32]string{
		0:  "LORD_SKILL_INST_TYPE_NOT_DEFINE",
		1:  "LORD_SKILL_INST_TYPE_DEFAULT",
		2:  "LORD_SKILL_INST_TYPE_LvBu",
		3:  "LORD_SKILL_INST_TYPE_DaQiao",
		4:  "LORD_SKILL_INST_TYPE_DaJi",
		5:  "LORD_SKILL_INST_TYPE_ChangE",
		6:  "LORD_SKILL_INST_TYPE_ZhuangZhou",
		7:  "LORD_SKILL_INST_TYPE_NewbieYao",
		8:  "LORD_SKILL_INST_TYPE_WangZhaoJun",
		9:  "LORD_SKILL_INST_TYPE_LiBai",
		10: "LORD_SKILL_INST_TYPE_Yao",
		11: "LORD_SKILL_INST_TYPE_DiaoChan",
		12: "LORD_SKILL_INST_TYPE_DongFangJing",
		13: "LORD_SKILL_INST_TYPE_GongSunLi",
		14: "LORD_SKILL_INST_TYPE_MaKeBoLuo",
		15: "LORD_SKILL_INST_TYPE_YangYuHuan",
		16: "LORD_SKILL_INST_TYPE_AI1",
		17: "LORD_SKILL_INST_TYPE_SunBin",
		18: "LORD_SKILL_INST_TYPE_SunShangXiang",
	}
	ELordSkillInstType_value = map[string]int32{
		"LORD_SKILL_INST_TYPE_NOT_DEFINE":    0,
		"LORD_SKILL_INST_TYPE_DEFAULT":       1,
		"LORD_SKILL_INST_TYPE_LvBu":          2,
		"LORD_SKILL_INST_TYPE_DaQiao":        3,
		"LORD_SKILL_INST_TYPE_DaJi":          4,
		"LORD_SKILL_INST_TYPE_ChangE":        5,
		"LORD_SKILL_INST_TYPE_ZhuangZhou":    6,
		"LORD_SKILL_INST_TYPE_NewbieYao":     7,
		"LORD_SKILL_INST_TYPE_WangZhaoJun":   8,
		"LORD_SKILL_INST_TYPE_LiBai":         9,
		"LORD_SKILL_INST_TYPE_Yao":           10,
		"LORD_SKILL_INST_TYPE_DiaoChan":      11,
		"LORD_SKILL_INST_TYPE_DongFangJing":  12,
		"LORD_SKILL_INST_TYPE_GongSunLi":     13,
		"LORD_SKILL_INST_TYPE_MaKeBoLuo":     14,
		"LORD_SKILL_INST_TYPE_YangYuHuan":    15,
		"LORD_SKILL_INST_TYPE_AI1":           16,
		"LORD_SKILL_INST_TYPE_SunBin":        17,
		"LORD_SKILL_INST_TYPE_SunShangXiang": 18,
	}
)

func (x ELordSkillInstType) Enum() *ELordSkillInstType {
	p := new(ELordSkillInstType)
	*p = x
	return p
}

func (x ELordSkillInstType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ELordSkillInstType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[84].Descriptor()
}

func (ELordSkillInstType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[84]
}

func (x ELordSkillInstType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ELordSkillInstType.Descriptor instead.
func (ELordSkillInstType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{84}
}

type ELordSkillPhaseParam int32

const (
	ELordSkillPhaseParam_LORD_SKILL_PHASE_PARAM_NULL               ELordSkillPhaseParam = 0
	ELordSkillPhaseParam_LORD_SKILL_PHASE_PARAM_POST_PREPARE_MATCH ELordSkillPhaseParam = 1
)

// Enum value maps for ELordSkillPhaseParam.
var (
	ELordSkillPhaseParam_name = map[int32]string{
		0: "LORD_SKILL_PHASE_PARAM_NULL",
		1: "LORD_SKILL_PHASE_PARAM_POST_PREPARE_MATCH",
	}
	ELordSkillPhaseParam_value = map[string]int32{
		"LORD_SKILL_PHASE_PARAM_NULL":               0,
		"LORD_SKILL_PHASE_PARAM_POST_PREPARE_MATCH": 1,
	}
)

func (x ELordSkillPhaseParam) Enum() *ELordSkillPhaseParam {
	p := new(ELordSkillPhaseParam)
	*p = x
	return p
}

func (x ELordSkillPhaseParam) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ELordSkillPhaseParam) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[85].Descriptor()
}

func (ELordSkillPhaseParam) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[85]
}

func (x ELordSkillPhaseParam) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ELordSkillPhaseParam.Descriptor instead.
func (ELordSkillPhaseParam) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{85}
}

type ELordSkillLevelExpGatherConditionCondType int32

const (
	ELordSkillLevelExpGatherConditionCondType_LORD_SKILL_EXP_GATHER_COND_TYPE_NONE         ELordSkillLevelExpGatherConditionCondType = 0
	ELordSkillLevelExpGatherConditionCondType_LORD_SKILL_EXP_GATHER_COND_TYPE_KILL_ENEMY   ELordSkillLevelExpGatherConditionCondType = 1
	ELordSkillLevelExpGatherConditionCondType_LORD_SKILL_EXP_GATHER_COND_TYPE_LORD_LEVELUP ELordSkillLevelExpGatherConditionCondType = 2
	ELordSkillLevelExpGatherConditionCondType_LORD_SKILL_EXP_GATHER_COND_TYPE_ROUND_START  ELordSkillLevelExpGatherConditionCondType = 3
	ELordSkillLevelExpGatherConditionCondType_LORD_SKILL_EXP_GATHER_COND_TYPE_NEWBIE       ELordSkillLevelExpGatherConditionCondType = 4
	ELordSkillLevelExpGatherConditionCondType_LORD_SKILL_EXP_GATHER_COND_TYPE_EMPTY        ELordSkillLevelExpGatherConditionCondType = 5
)

// Enum value maps for ELordSkillLevelExpGatherConditionCondType.
var (
	ELordSkillLevelExpGatherConditionCondType_name = map[int32]string{
		0: "LORD_SKILL_EXP_GATHER_COND_TYPE_NONE",
		1: "LORD_SKILL_EXP_GATHER_COND_TYPE_KILL_ENEMY",
		2: "LORD_SKILL_EXP_GATHER_COND_TYPE_LORD_LEVELUP",
		3: "LORD_SKILL_EXP_GATHER_COND_TYPE_ROUND_START",
		4: "LORD_SKILL_EXP_GATHER_COND_TYPE_NEWBIE",
		5: "LORD_SKILL_EXP_GATHER_COND_TYPE_EMPTY",
	}
	ELordSkillLevelExpGatherConditionCondType_value = map[string]int32{
		"LORD_SKILL_EXP_GATHER_COND_TYPE_NONE":         0,
		"LORD_SKILL_EXP_GATHER_COND_TYPE_KILL_ENEMY":   1,
		"LORD_SKILL_EXP_GATHER_COND_TYPE_LORD_LEVELUP": 2,
		"LORD_SKILL_EXP_GATHER_COND_TYPE_ROUND_START":  3,
		"LORD_SKILL_EXP_GATHER_COND_TYPE_NEWBIE":       4,
		"LORD_SKILL_EXP_GATHER_COND_TYPE_EMPTY":        5,
	}
)

func (x ELordSkillLevelExpGatherConditionCondType) Enum() *ELordSkillLevelExpGatherConditionCondType {
	p := new(ELordSkillLevelExpGatherConditionCondType)
	*p = x
	return p
}

func (x ELordSkillLevelExpGatherConditionCondType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ELordSkillLevelExpGatherConditionCondType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[86].Descriptor()
}

func (ELordSkillLevelExpGatherConditionCondType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[86]
}

func (x ELordSkillLevelExpGatherConditionCondType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ELordSkillLevelExpGatherConditionCondType.Descriptor instead.
func (ELordSkillLevelExpGatherConditionCondType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{86}
}

// Lord的羁绊相关音效配置
type ELordJiBanType int32

const (
	ELordJiBanType_LordJiBanType_Meet  ELordJiBanType = 0
	ELordJiBanType_LordJiBanType_RuXue ELordJiBanType = 1
	ELordJiBanType_LordJiBanType_Kill  ELordJiBanType = 2
)

// Enum value maps for ELordJiBanType.
var (
	ELordJiBanType_name = map[int32]string{
		0: "LordJiBanType_Meet",
		1: "LordJiBanType_RuXue",
		2: "LordJiBanType_Kill",
	}
	ELordJiBanType_value = map[string]int32{
		"LordJiBanType_Meet":  0,
		"LordJiBanType_RuXue": 1,
		"LordJiBanType_Kill":  2,
	}
)

func (x ELordJiBanType) Enum() *ELordJiBanType {
	p := new(ELordJiBanType)
	*p = x
	return p
}

func (x ELordJiBanType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ELordJiBanType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[87].Descriptor()
}

func (ELordJiBanType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[87]
}

func (x ELordJiBanType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ELordJiBanType.Descriptor instead.
func (ELordJiBanType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{87}
}

type ELordProficiencyUnLockType int32

const (
	ELordProficiencyUnLockType_LORD_PROFICIENCY_UNLOCK_TYPE_NULL     ELordProficiencyUnLockType = 0
	ELordProficiencyUnLockType_LORD_PROFICIENCY_UNLOCK_TYPE_LORDFILE ELordProficiencyUnLockType = 1
)

// Enum value maps for ELordProficiencyUnLockType.
var (
	ELordProficiencyUnLockType_name = map[int32]string{
		0: "LORD_PROFICIENCY_UNLOCK_TYPE_NULL",
		1: "LORD_PROFICIENCY_UNLOCK_TYPE_LORDFILE",
	}
	ELordProficiencyUnLockType_value = map[string]int32{
		"LORD_PROFICIENCY_UNLOCK_TYPE_NULL":     0,
		"LORD_PROFICIENCY_UNLOCK_TYPE_LORDFILE": 1,
	}
)

func (x ELordProficiencyUnLockType) Enum() *ELordProficiencyUnLockType {
	p := new(ELordProficiencyUnLockType)
	*p = x
	return p
}

func (x ELordProficiencyUnLockType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ELordProficiencyUnLockType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[88].Descriptor()
}

func (ELordProficiencyUnLockType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[88]
}

func (x ELordProficiencyUnLockType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ELordProficiencyUnLockType.Descriptor instead.
func (ELordProficiencyUnLockType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{88}
}

// 棋盘摆件类型
type EChessBoardPartType int32

const (
	EChessBoardPartType_BOARDPART_INVALID    EChessBoardPartType = 0
	EChessBoardPartType_BOARDPART_BIGTHING   EChessBoardPartType = 1
	EChessBoardPartType_BOARDPART_SMALLTHING EChessBoardPartType = 2
	EChessBoardPartType_BOARDPART_STICKERS   EChessBoardPartType = 3
	EChessBoardPartType_BOARDPART_BACKGROUND EChessBoardPartType = 4
	EChessBoardPartType_BOARDPART_MAX        EChessBoardPartType = 5
)

// Enum value maps for EChessBoardPartType.
var (
	EChessBoardPartType_name = map[int32]string{
		0: "BOARDPART_INVALID",
		1: "BOARDPART_BIGTHING",
		2: "BOARDPART_SMALLTHING",
		3: "BOARDPART_STICKERS",
		4: "BOARDPART_BACKGROUND",
		5: "BOARDPART_MAX",
	}
	EChessBoardPartType_value = map[string]int32{
		"BOARDPART_INVALID":    0,
		"BOARDPART_BIGTHING":   1,
		"BOARDPART_SMALLTHING": 2,
		"BOARDPART_STICKERS":   3,
		"BOARDPART_BACKGROUND": 4,
		"BOARDPART_MAX":        5,
	}
)

func (x EChessBoardPartType) Enum() *EChessBoardPartType {
	p := new(EChessBoardPartType)
	*p = x
	return p
}

func (x EChessBoardPartType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EChessBoardPartType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[89].Descriptor()
}

func (EChessBoardPartType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[89]
}

func (x EChessBoardPartType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EChessBoardPartType.Descriptor instead.
func (EChessBoardPartType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{89}
}

// 棋盘区域分类
type EChessBoardAreaType int32

const (
	EChessBoardAreaType_BOARDAREA_INVALID          EChessBoardAreaType = 0
	EChessBoardAreaType_BOARDAREA_COMMANDDESK      EChessBoardAreaType = 1
	EChessBoardAreaType_BOARDAREA_LEFT_DECORATING  EChessBoardAreaType = 2
	EChessBoardAreaType_BOARDAREA_RIGHT_DECORATING EChessBoardAreaType = 3
	EChessBoardAreaType_BOARDAREA_BATTLEAREA       EChessBoardAreaType = 4
	EChessBoardAreaType_BOARDAREA_BACKGROUNDAREA   EChessBoardAreaType = 5
	EChessBoardAreaType_BOARDAREA_MAX              EChessBoardAreaType = 6
)

// Enum value maps for EChessBoardAreaType.
var (
	EChessBoardAreaType_name = map[int32]string{
		0: "BOARDAREA_INVALID",
		1: "BOARDAREA_COMMANDDESK",
		2: "BOARDAREA_LEFT_DECORATING",
		3: "BOARDAREA_RIGHT_DECORATING",
		4: "BOARDAREA_BATTLEAREA",
		5: "BOARDAREA_BACKGROUNDAREA",
		6: "BOARDAREA_MAX",
	}
	EChessBoardAreaType_value = map[string]int32{
		"BOARDAREA_INVALID":          0,
		"BOARDAREA_COMMANDDESK":      1,
		"BOARDAREA_LEFT_DECORATING":  2,
		"BOARDAREA_RIGHT_DECORATING": 3,
		"BOARDAREA_BATTLEAREA":       4,
		"BOARDAREA_BACKGROUNDAREA":   5,
		"BOARDAREA_MAX":              6,
	}
)

func (x EChessBoardAreaType) Enum() *EChessBoardAreaType {
	p := new(EChessBoardAreaType)
	*p = x
	return p
}

func (x EChessBoardAreaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EChessBoardAreaType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[90].Descriptor()
}

func (EChessBoardAreaType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[90]
}

func (x EChessBoardAreaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EChessBoardAreaType.Descriptor instead.
func (EChessBoardAreaType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{90}
}

// 特效类型
type ESpecialEftType int32

const (
	ESpecialEftType_EFTTYPE_INVALID ESpecialEftType = 0
	ESpecialEftType_EFTTYPE_COMMON  ESpecialEftType = 1
	ESpecialEftType_EFTTYPE_LORD    ESpecialEftType = 2
	ESpecialEftType_EFTTYPE_SKIN    ESpecialEftType = 3
	ESpecialEftType_EFTTYPE_LAST    ESpecialEftType = 4
)

// Enum value maps for ESpecialEftType.
var (
	ESpecialEftType_name = map[int32]string{
		0: "EFTTYPE_INVALID",
		1: "EFTTYPE_COMMON",
		2: "EFTTYPE_LORD",
		3: "EFTTYPE_SKIN",
		4: "EFTTYPE_LAST",
	}
	ESpecialEftType_value = map[string]int32{
		"EFTTYPE_INVALID": 0,
		"EFTTYPE_COMMON":  1,
		"EFTTYPE_LORD":    2,
		"EFTTYPE_SKIN":    3,
		"EFTTYPE_LAST":    4,
	}
)

func (x ESpecialEftType) Enum() *ESpecialEftType {
	p := new(ESpecialEftType)
	*p = x
	return p
}

func (x ESpecialEftType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESpecialEftType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[91].Descriptor()
}

func (ESpecialEftType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[91]
}

func (x ESpecialEftType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ESpecialEftType.Descriptor instead.
func (ESpecialEftType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{91}
}

// 特效分类
type ESpecialEftClass int32

const (
	ESpecialEftClass_EFTCLASS_INVALID   ESpecialEftClass = 0
	ESpecialEftClass_EFTCLASS_WIN       ESpecialEftClass = 1
	ESpecialEftClass_EFTCLASS_ATTACK    ESpecialEftClass = 2
	ESpecialEftClass_EFTCLASS_TRANSFORM ESpecialEftClass = 3
	ESpecialEftClass_EFTCLASS_LAST      ESpecialEftClass = 4
)

// Enum value maps for ESpecialEftClass.
var (
	ESpecialEftClass_name = map[int32]string{
		0: "EFTCLASS_INVALID",
		1: "EFTCLASS_WIN",
		2: "EFTCLASS_ATTACK",
		3: "EFTCLASS_TRANSFORM",
		4: "EFTCLASS_LAST",
	}
	ESpecialEftClass_value = map[string]int32{
		"EFTCLASS_INVALID":   0,
		"EFTCLASS_WIN":       1,
		"EFTCLASS_ATTACK":    2,
		"EFTCLASS_TRANSFORM": 3,
		"EFTCLASS_LAST":      4,
	}
)

func (x ESpecialEftClass) Enum() *ESpecialEftClass {
	p := new(ESpecialEftClass)
	*p = x
	return p
}

func (x ESpecialEftClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESpecialEftClass) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[92].Descriptor()
}

func (ESpecialEftClass) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[92]
}

func (x ESpecialEftClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ESpecialEftClass.Descriptor instead.
func (ESpecialEftClass) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{92}
}

// 表情自动使用的类型
type EEmojiAutoUseType int32

const (
	EEmojiAutoUseType_EMOJIUSE_INVALID         EEmojiAutoUseType = 0
	EEmojiAutoUseType_EMOJIUSE_STARTGAME       EEmojiAutoUseType = 1
	EEmojiAutoUseType_EMOJIUSE_BUMBERONE       EEmojiAutoUseType = 2
	EEmojiAutoUseType_EMOJIUSE_SYNTHESIS3STARS EEmojiAutoUseType = 3
	EEmojiAutoUseType_EMOJIUSE_ENDWINSTREAK    EEmojiAutoUseType = 4
	EEmojiAutoUseType_EMOJIUSE_WINSTREAK       EEmojiAutoUseType = 5
	EEmojiAutoUseType_EMOJIUSE_WIN             EEmojiAutoUseType = 6
	EEmojiAutoUseType_EMOJIUSE_LAST            EEmojiAutoUseType = 7
)

// Enum value maps for EEmojiAutoUseType.
var (
	EEmojiAutoUseType_name = map[int32]string{
		0: "EMOJIUSE_INVALID",
		1: "EMOJIUSE_STARTGAME",
		2: "EMOJIUSE_BUMBERONE",
		3: "EMOJIUSE_SYNTHESIS3STARS",
		4: "EMOJIUSE_ENDWINSTREAK",
		5: "EMOJIUSE_WINSTREAK",
		6: "EMOJIUSE_WIN",
		7: "EMOJIUSE_LAST",
	}
	EEmojiAutoUseType_value = map[string]int32{
		"EMOJIUSE_INVALID":         0,
		"EMOJIUSE_STARTGAME":       1,
		"EMOJIUSE_BUMBERONE":       2,
		"EMOJIUSE_SYNTHESIS3STARS": 3,
		"EMOJIUSE_ENDWINSTREAK":    4,
		"EMOJIUSE_WINSTREAK":       5,
		"EMOJIUSE_WIN":             6,
		"EMOJIUSE_LAST":            7,
	}
)

func (x EEmojiAutoUseType) Enum() *EEmojiAutoUseType {
	p := new(EEmojiAutoUseType)
	*p = x
	return p
}

func (x EEmojiAutoUseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EEmojiAutoUseType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[93].Descriptor()
}

func (EEmojiAutoUseType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[93]
}

func (x EEmojiAutoUseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EEmojiAutoUseType.Descriptor instead.
func (EEmojiAutoUseType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{93}
}

type EChessSeasonRefreshType int32

const (
	EChessSeasonRefreshType_CHESS_REFRESH_SEASON  EChessSeasonRefreshType = 0 // 随赛季刷新
	EChessSeasonRefreshType_CHESS_REFRESH_FOREVER EChessSeasonRefreshType = 1 // 永久不刷新
)

// Enum value maps for EChessSeasonRefreshType.
var (
	EChessSeasonRefreshType_name = map[int32]string{
		0: "CHESS_REFRESH_SEASON",
		1: "CHESS_REFRESH_FOREVER",
	}
	EChessSeasonRefreshType_value = map[string]int32{
		"CHESS_REFRESH_SEASON":  0,
		"CHESS_REFRESH_FOREVER": 1,
	}
)

func (x EChessSeasonRefreshType) Enum() *EChessSeasonRefreshType {
	p := new(EChessSeasonRefreshType)
	*p = x
	return p
}

func (x EChessSeasonRefreshType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EChessSeasonRefreshType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[94].Descriptor()
}

func (EChessSeasonRefreshType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[94]
}

func (x EChessSeasonRefreshType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EChessSeasonRefreshType.Descriptor instead.
func (EChessSeasonRefreshType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{94}
}

type EWealCycleType int32

const (
	EWealCycleType_CYCLE_NONE EWealCycleType = 0
	EWealCycleType_CYCLE_DAY  EWealCycleType = 1
	EWealCycleType_CYCLE_WEEK EWealCycleType = 2
)

// Enum value maps for EWealCycleType.
var (
	EWealCycleType_name = map[int32]string{
		0: "CYCLE_NONE",
		1: "CYCLE_DAY",
		2: "CYCLE_WEEK",
	}
	EWealCycleType_value = map[string]int32{
		"CYCLE_NONE": 0,
		"CYCLE_DAY":  1,
		"CYCLE_WEEK": 2,
	}
)

func (x EWealCycleType) Enum() *EWealCycleType {
	p := new(EWealCycleType)
	*p = x
	return p
}

func (x EWealCycleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EWealCycleType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[95].Descriptor()
}

func (EWealCycleType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[95]
}

func (x EWealCycleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EWealCycleType.Descriptor instead.
func (EWealCycleType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{95}
}

// -------------------------成就----------------------------
type EAchieveLevel int32

const (
	EAchieveLevel_Ordinary EAchieveLevel = 0
	EAchieveLevel_Rare     EAchieveLevel = 1
)

// Enum value maps for EAchieveLevel.
var (
	EAchieveLevel_name = map[int32]string{
		0: "Ordinary",
		1: "Rare",
	}
	EAchieveLevel_value = map[string]int32{
		"Ordinary": 0,
		"Rare":     1,
	}
)

func (x EAchieveLevel) Enum() *EAchieveLevel {
	p := new(EAchieveLevel)
	*p = x
	return p
}

func (x EAchieveLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAchieveLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[96].Descriptor()
}

func (EAchieveLevel) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[96]
}

func (x EAchieveLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EAchieveLevel.Descriptor instead.
func (EAchieveLevel) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{96}
}

// -------------------------排行榜----------------------------
type EChartsFunction int32

const (
	EChartsFunction_FUNC_INVALID    EChartsFunction = 0
	EChartsFunction_FUNC_ADD_FRIEND EChartsFunction = 1
	EChartsFunction_FUNC_CHAT       EChartsFunction = 2
	EChartsFunction_FUNC_LIKE       EChartsFunction = 3
)

// Enum value maps for EChartsFunction.
var (
	EChartsFunction_name = map[int32]string{
		0: "FUNC_INVALID",
		1: "FUNC_ADD_FRIEND",
		2: "FUNC_CHAT",
		3: "FUNC_LIKE",
	}
	EChartsFunction_value = map[string]int32{
		"FUNC_INVALID":    0,
		"FUNC_ADD_FRIEND": 1,
		"FUNC_CHAT":       2,
		"FUNC_LIKE":       3,
	}
)

func (x EChartsFunction) Enum() *EChartsFunction {
	p := new(EChartsFunction)
	*p = x
	return p
}

func (x EChartsFunction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EChartsFunction) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[97].Descriptor()
}

func (EChartsFunction) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[97]
}

func (x EChartsFunction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EChartsFunction.Descriptor instead.
func (EChartsFunction) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{97}
}

// 排行榜结算类型
type ERanklistSettleType int32

const (
	ERanklistSettleType_RANKLISTSETTLETYPE_NO    ERanklistSettleType = 0
	ERanklistSettleType_RANKLISTSETTLETYPE_DAY   ERanklistSettleType = 1
	ERanklistSettleType_RANKLISTSETTLETYPE_WEEK  ERanklistSettleType = 2
	ERanklistSettleType_RANKLISTSETTLETYPE_MONTH ERanklistSettleType = 3
	ERanklistSettleType_RANKLISTSETTLETYPE_MAX   ERanklistSettleType = 4
)

// Enum value maps for ERanklistSettleType.
var (
	ERanklistSettleType_name = map[int32]string{
		0: "RANKLISTSETTLETYPE_NO",
		1: "RANKLISTSETTLETYPE_DAY",
		2: "RANKLISTSETTLETYPE_WEEK",
		3: "RANKLISTSETTLETYPE_MONTH",
		4: "RANKLISTSETTLETYPE_MAX",
	}
	ERanklistSettleType_value = map[string]int32{
		"RANKLISTSETTLETYPE_NO":    0,
		"RANKLISTSETTLETYPE_DAY":   1,
		"RANKLISTSETTLETYPE_WEEK":  2,
		"RANKLISTSETTLETYPE_MONTH": 3,
		"RANKLISTSETTLETYPE_MAX":   4,
	}
)

func (x ERanklistSettleType) Enum() *ERanklistSettleType {
	p := new(ERanklistSettleType)
	*p = x
	return p
}

func (x ERanklistSettleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERanklistSettleType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[98].Descriptor()
}

func (ERanklistSettleType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[98]
}

func (x ERanklistSettleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ERanklistSettleType.Descriptor instead.
func (ERanklistSettleType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{98}
}

// 排行榜类型
type ERanklistType int32

const (
	ERanklistType_RANKLISTTYPE_INVALID   ERanklistType = 0
	ERanklistType_RANKLISTTYPE_LORDPOWER ERanklistType = 1
	ERanklistType_RANKLISTTYPE_SEASON    ERanklistType = 2
	ERanklistType_RANKLISTTYPE_MAX       ERanklistType = 3
)

// Enum value maps for ERanklistType.
var (
	ERanklistType_name = map[int32]string{
		0: "RANKLISTTYPE_INVALID",
		1: "RANKLISTTYPE_LORDPOWER",
		2: "RANKLISTTYPE_SEASON",
		3: "RANKLISTTYPE_MAX",
	}
	ERanklistType_value = map[string]int32{
		"RANKLISTTYPE_INVALID":   0,
		"RANKLISTTYPE_LORDPOWER": 1,
		"RANKLISTTYPE_SEASON":    2,
		"RANKLISTTYPE_MAX":       3,
	}
)

func (x ERanklistType) Enum() *ERanklistType {
	p := new(ERanklistType)
	*p = x
	return p
}

func (x ERanklistType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERanklistType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[99].Descriptor()
}

func (ERanklistType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[99]
}

func (x ERanklistType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ERanklistType.Descriptor instead.
func (ERanklistType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{99}
}

// 排行榜子类型
type ERanklistSubTypeLordPower int32

const (
	ERanklistSubTypeLordPower_LORDPOWER_INVALID  ERanklistSubTypeLordPower = 0
	ERanklistSubTypeLordPower_LORDPOWER_LOW      ERanklistSubTypeLordPower = 1 // 区
	ERanklistSubTypeLordPower_LORDPOWER_MID      ERanklistSubTypeLordPower = 2 // 市
	ERanklistSubTypeLordPower_LORDPOWER_HIGH     ERanklistSubTypeLordPower = 3 // 省
	ERanklistSubTypeLordPower_LORDPOWER_NATIONAL ERanklistSubTypeLordPower = 4 // 国
	ERanklistSubTypeLordPower_LORDPOWER_MAX      ERanklistSubTypeLordPower = 5
)

// Enum value maps for ERanklistSubTypeLordPower.
var (
	ERanklistSubTypeLordPower_name = map[int32]string{
		0: "LORDPOWER_INVALID",
		1: "LORDPOWER_LOW",
		2: "LORDPOWER_MID",
		3: "LORDPOWER_HIGH",
		4: "LORDPOWER_NATIONAL",
		5: "LORDPOWER_MAX",
	}
	ERanklistSubTypeLordPower_value = map[string]int32{
		"LORDPOWER_INVALID":  0,
		"LORDPOWER_LOW":      1,
		"LORDPOWER_MID":      2,
		"LORDPOWER_HIGH":     3,
		"LORDPOWER_NATIONAL": 4,
		"LORDPOWER_MAX":      5,
	}
)

func (x ERanklistSubTypeLordPower) Enum() *ERanklistSubTypeLordPower {
	p := new(ERanklistSubTypeLordPower)
	*p = x
	return p
}

func (x ERanklistSubTypeLordPower) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERanklistSubTypeLordPower) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[100].Descriptor()
}

func (ERanklistSubTypeLordPower) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[100]
}

func (x ERanklistSubTypeLordPower) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ERanklistSubTypeLordPower.Descriptor instead.
func (ERanklistSubTypeLordPower) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{100}
}

// 排行榜类型
type ERankListSubTypeSeason int32

const (
	ERankListSubTypeSeason_SEASON_NULL       ERankListSubTypeSeason = 0
	ERankListSubTypeSeason_SEASON_RANK       ERankListSubTypeSeason = 1
	ERankListSubTypeSeason_SEASON_WEEKLY     ERankListSubTypeSeason = 2
	ERankListSubTypeSeason_SEASON_TOP        ERankListSubTypeSeason = 3
	ERankListSubTypeSeason_SEASON_TOP_WEEKLY ERankListSubTypeSeason = 4
	ERankListSubTypeSeason_SEASON_LORD       ERankListSubTypeSeason = 5
	ERankListSubTypeSeason_SEASON_MAX        ERankListSubTypeSeason = 6
)

// Enum value maps for ERankListSubTypeSeason.
var (
	ERankListSubTypeSeason_name = map[int32]string{
		0: "SEASON_NULL",
		1: "SEASON_RANK",
		2: "SEASON_WEEKLY",
		3: "SEASON_TOP",
		4: "SEASON_TOP_WEEKLY",
		5: "SEASON_LORD",
		6: "SEASON_MAX",
	}
	ERankListSubTypeSeason_value = map[string]int32{
		"SEASON_NULL":       0,
		"SEASON_RANK":       1,
		"SEASON_WEEKLY":     2,
		"SEASON_TOP":        3,
		"SEASON_TOP_WEEKLY": 4,
		"SEASON_LORD":       5,
		"SEASON_MAX":        6,
	}
)

func (x ERankListSubTypeSeason) Enum() *ERankListSubTypeSeason {
	p := new(ERankListSubTypeSeason)
	*p = x
	return p
}

func (x ERankListSubTypeSeason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERankListSubTypeSeason) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[101].Descriptor()
}

func (ERankListSubTypeSeason) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[101]
}

func (x ERankListSubTypeSeason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ERankListSubTypeSeason.Descriptor instead.
func (ERankListSubTypeSeason) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{101}
}

type COM_CLT_LOG_LEVEL int32

const (
	COM_CLT_LOG_LEVEL_COM_CLT_LOG_LEVEL_NONE    COM_CLT_LOG_LEVEL = 0
	COM_CLT_LOG_LEVEL_COM_CLT_LOG_LEVEL_DEBUG   COM_CLT_LOG_LEVEL = 1
	COM_CLT_LOG_LEVEL_COM_CLT_LOG_LEVEL_INFO    COM_CLT_LOG_LEVEL = 2
	COM_CLT_LOG_LEVEL_COM_CLT_LOG_LEVEL_WARNING COM_CLT_LOG_LEVEL = 3
	COM_CLT_LOG_LEVEL_COM_CLT_LOG_LEVEL_ERROR   COM_CLT_LOG_LEVEL = 4
	COM_CLT_LOG_LEVEL_COM_CLT_LOG_LEVEL_FATAL   COM_CLT_LOG_LEVEL = 5
)

// Enum value maps for COM_CLT_LOG_LEVEL.
var (
	COM_CLT_LOG_LEVEL_name = map[int32]string{
		0: "COM_CLT_LOG_LEVEL_NONE",
		1: "COM_CLT_LOG_LEVEL_DEBUG",
		2: "COM_CLT_LOG_LEVEL_INFO",
		3: "COM_CLT_LOG_LEVEL_WARNING",
		4: "COM_CLT_LOG_LEVEL_ERROR",
		5: "COM_CLT_LOG_LEVEL_FATAL",
	}
	COM_CLT_LOG_LEVEL_value = map[string]int32{
		"COM_CLT_LOG_LEVEL_NONE":    0,
		"COM_CLT_LOG_LEVEL_DEBUG":   1,
		"COM_CLT_LOG_LEVEL_INFO":    2,
		"COM_CLT_LOG_LEVEL_WARNING": 3,
		"COM_CLT_LOG_LEVEL_ERROR":   4,
		"COM_CLT_LOG_LEVEL_FATAL":   5,
	}
)

func (x COM_CLT_LOG_LEVEL) Enum() *COM_CLT_LOG_LEVEL {
	p := new(COM_CLT_LOG_LEVEL)
	*p = x
	return p
}

func (x COM_CLT_LOG_LEVEL) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (COM_CLT_LOG_LEVEL) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[102].Descriptor()
}

func (COM_CLT_LOG_LEVEL) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[102]
}

func (x COM_CLT_LOG_LEVEL) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use COM_CLT_LOG_LEVEL.Descriptor instead.
func (COM_CLT_LOG_LEVEL) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{102}
}

type EDynamicGuidePlayerTagType int32

const (
	EDynamicGuidePlayerTagType_EDynamicGuidePlayerTagType_None                   EDynamicGuidePlayerTagType = 0
	EDynamicGuidePlayerTagType_EDynamicGuidePlayerTagType_Ability                EDynamicGuidePlayerTagType = 1
	EDynamicGuidePlayerTagType_EDynamicGuidePlayerTagType_RankScore              EDynamicGuidePlayerTagType = 2
	EDynamicGuidePlayerTagType_EDynamicGuidePlayerTagType_NotUseLordSkill        EDynamicGuidePlayerTagType = 3
	EDynamicGuidePlayerTagType_EDynamicGuidePlayerTagType_NotUpgradeLordSkill    EDynamicGuidePlayerTagType = 4
	EDynamicGuidePlayerTagType_EDynamicGuidePlayerTagType_NotFinishGuideStepTLog EDynamicGuidePlayerTagType = 5
	EDynamicGuidePlayerTagType_EDynamicGuidePlayerTagType_MinFinishedGameCnt     EDynamicGuidePlayerTagType = 6
	EDynamicGuidePlayerTagType_EDynamicGuidePlayerTagType_RecruitStepScore       EDynamicGuidePlayerTagType = 7
	EDynamicGuidePlayerTagType_EDynamicGuidePlayerTagType_Max                    EDynamicGuidePlayerTagType = 8
)

// Enum value maps for EDynamicGuidePlayerTagType.
var (
	EDynamicGuidePlayerTagType_name = map[int32]string{
		0: "EDynamicGuidePlayerTagType_None",
		1: "EDynamicGuidePlayerTagType_Ability",
		2: "EDynamicGuidePlayerTagType_RankScore",
		3: "EDynamicGuidePlayerTagType_NotUseLordSkill",
		4: "EDynamicGuidePlayerTagType_NotUpgradeLordSkill",
		5: "EDynamicGuidePlayerTagType_NotFinishGuideStepTLog",
		6: "EDynamicGuidePlayerTagType_MinFinishedGameCnt",
		7: "EDynamicGuidePlayerTagType_RecruitStepScore",
		8: "EDynamicGuidePlayerTagType_Max",
	}
	EDynamicGuidePlayerTagType_value = map[string]int32{
		"EDynamicGuidePlayerTagType_None":                   0,
		"EDynamicGuidePlayerTagType_Ability":                1,
		"EDynamicGuidePlayerTagType_RankScore":              2,
		"EDynamicGuidePlayerTagType_NotUseLordSkill":        3,
		"EDynamicGuidePlayerTagType_NotUpgradeLordSkill":    4,
		"EDynamicGuidePlayerTagType_NotFinishGuideStepTLog": 5,
		"EDynamicGuidePlayerTagType_MinFinishedGameCnt":     6,
		"EDynamicGuidePlayerTagType_RecruitStepScore":       7,
		"EDynamicGuidePlayerTagType_Max":                    8,
	}
)

func (x EDynamicGuidePlayerTagType) Enum() *EDynamicGuidePlayerTagType {
	p := new(EDynamicGuidePlayerTagType)
	*p = x
	return p
}

func (x EDynamicGuidePlayerTagType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDynamicGuidePlayerTagType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[103].Descriptor()
}

func (EDynamicGuidePlayerTagType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[103]
}

func (x EDynamicGuidePlayerTagType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EDynamicGuidePlayerTagType.Descriptor instead.
func (EDynamicGuidePlayerTagType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{103}
}

type EDynamicGuideThresholdType int32

const (
	EDynamicGuideThresholdType_EDynamicGuideThresholdType_None                 EDynamicGuideThresholdType = 0
	EDynamicGuideThresholdType_EDynamicGuideThresholdType_Hp                   EDynamicGuideThresholdType = 1
	EDynamicGuideThresholdType_EDynamicGuideThresholdType_Level                EDynamicGuideThresholdType = 2
	EDynamicGuideThresholdType_EDynamicGuideThresholdType_CardPoolLevel        EDynamicGuideThresholdType = 3
	EDynamicGuideThresholdType_EDynamicGuideThresholdType_Coin                 EDynamicGuideThresholdType = 4
	EDynamicGuideThresholdType_EDynamicGuideThresholdType_ContinueLose         EDynamicGuideThresholdType = 5
	EDynamicGuideThresholdType_EDynamicGuideThresholdType_SlotAndBattleHeroNum EDynamicGuideThresholdType = 6
	EDynamicGuideThresholdType_EDynamicGuideThresholdType_TotalRelativeLevel   EDynamicGuideThresholdType = 7
	EDynamicGuideThresholdType_EDynamicGuideThresholdType_BackpackEquipNum     EDynamicGuideThresholdType = 8
	EDynamicGuideThresholdType_EDynamicGuideThresholdType_TotoalCoin           EDynamicGuideThresholdType = 9
	EDynamicGuideThresholdType_EDynamicGuideThresholdType_SlotHeroNum          EDynamicGuideThresholdType = 10
	EDynamicGuideThresholdType_EDynamicGuideThresholdType_BattleHeroNum        EDynamicGuideThresholdType = 11
	EDynamicGuideThresholdType_EDynamicGuideThresholdType_UseSkillCnt          EDynamicGuideThresholdType = 12
	EDynamicGuideThresholdType_EDynamicGuideThresholdType_SkillLevel           EDynamicGuideThresholdType = 13
	EDynamicGuideThresholdType_EDynamicGuideThresholdType_Exp4NextLevel        EDynamicGuideThresholdType = 14
	EDynamicGuideThresholdType_EDynamicGuideThresholdType_MaxPopulation        EDynamicGuideThresholdType = 15
)

// Enum value maps for EDynamicGuideThresholdType.
var (
	EDynamicGuideThresholdType_name = map[int32]string{
		0:  "EDynamicGuideThresholdType_None",
		1:  "EDynamicGuideThresholdType_Hp",
		2:  "EDynamicGuideThresholdType_Level",
		3:  "EDynamicGuideThresholdType_CardPoolLevel",
		4:  "EDynamicGuideThresholdType_Coin",
		5:  "EDynamicGuideThresholdType_ContinueLose",
		6:  "EDynamicGuideThresholdType_SlotAndBattleHeroNum",
		7:  "EDynamicGuideThresholdType_TotalRelativeLevel",
		8:  "EDynamicGuideThresholdType_BackpackEquipNum",
		9:  "EDynamicGuideThresholdType_TotoalCoin",
		10: "EDynamicGuideThresholdType_SlotHeroNum",
		11: "EDynamicGuideThresholdType_BattleHeroNum",
		12: "EDynamicGuideThresholdType_UseSkillCnt",
		13: "EDynamicGuideThresholdType_SkillLevel",
		14: "EDynamicGuideThresholdType_Exp4NextLevel",
		15: "EDynamicGuideThresholdType_MaxPopulation",
	}
	EDynamicGuideThresholdType_value = map[string]int32{
		"EDynamicGuideThresholdType_None":                 0,
		"EDynamicGuideThresholdType_Hp":                   1,
		"EDynamicGuideThresholdType_Level":                2,
		"EDynamicGuideThresholdType_CardPoolLevel":        3,
		"EDynamicGuideThresholdType_Coin":                 4,
		"EDynamicGuideThresholdType_ContinueLose":         5,
		"EDynamicGuideThresholdType_SlotAndBattleHeroNum": 6,
		"EDynamicGuideThresholdType_TotalRelativeLevel":   7,
		"EDynamicGuideThresholdType_BackpackEquipNum":     8,
		"EDynamicGuideThresholdType_TotoalCoin":           9,
		"EDynamicGuideThresholdType_SlotHeroNum":          10,
		"EDynamicGuideThresholdType_BattleHeroNum":        11,
		"EDynamicGuideThresholdType_UseSkillCnt":          12,
		"EDynamicGuideThresholdType_SkillLevel":           13,
		"EDynamicGuideThresholdType_Exp4NextLevel":        14,
		"EDynamicGuideThresholdType_MaxPopulation":        15,
	}
)

func (x EDynamicGuideThresholdType) Enum() *EDynamicGuideThresholdType {
	p := new(EDynamicGuideThresholdType)
	*p = x
	return p
}

func (x EDynamicGuideThresholdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDynamicGuideThresholdType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[104].Descriptor()
}

func (EDynamicGuideThresholdType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[104]
}

func (x EDynamicGuideThresholdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EDynamicGuideThresholdType.Descriptor instead.
func (EDynamicGuideThresholdType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{104}
}

type EDynamicGuideTipCloseConditionType int32

const (
	EDynamicGuideTipCloseConditionType_EDynamicGuideTipCloseConditionType_None             EDynamicGuideTipCloseConditionType = 0
	EDynamicGuideTipCloseConditionType_EDynamicGuideTipCloseConditionType_Timer            EDynamicGuideTipCloseConditionType = 1
	EDynamicGuideTipCloseConditionType_EDynamicGuideTipCloseConditionType_Event            EDynamicGuideTipCloseConditionType = 2
	EDynamicGuideTipCloseConditionType_EDynamicGuideTipCloseConditionType_PlayerDataChange EDynamicGuideTipCloseConditionType = 3
)

// Enum value maps for EDynamicGuideTipCloseConditionType.
var (
	EDynamicGuideTipCloseConditionType_name = map[int32]string{
		0: "EDynamicGuideTipCloseConditionType_None",
		1: "EDynamicGuideTipCloseConditionType_Timer",
		2: "EDynamicGuideTipCloseConditionType_Event",
		3: "EDynamicGuideTipCloseConditionType_PlayerDataChange",
	}
	EDynamicGuideTipCloseConditionType_value = map[string]int32{
		"EDynamicGuideTipCloseConditionType_None":             0,
		"EDynamicGuideTipCloseConditionType_Timer":            1,
		"EDynamicGuideTipCloseConditionType_Event":            2,
		"EDynamicGuideTipCloseConditionType_PlayerDataChange": 3,
	}
)

func (x EDynamicGuideTipCloseConditionType) Enum() *EDynamicGuideTipCloseConditionType {
	p := new(EDynamicGuideTipCloseConditionType)
	*p = x
	return p
}

func (x EDynamicGuideTipCloseConditionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDynamicGuideTipCloseConditionType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[105].Descriptor()
}

func (EDynamicGuideTipCloseConditionType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[105]
}

func (x EDynamicGuideTipCloseConditionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EDynamicGuideTipCloseConditionType.Descriptor instead.
func (EDynamicGuideTipCloseConditionType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{105}
}

type EDynamicGuideTipUIEventRspResult int32

const (
	EDynamicGuideTipUIEventRspResult_EDynamicGuideTipUIEventRspResult_None       EDynamicGuideTipUIEventRspResult = 0
	EDynamicGuideTipUIEventRspResult_EDynamicGuideTipUIEventRspResult_CloseGuide EDynamicGuideTipUIEventRspResult = 1
)

// Enum value maps for EDynamicGuideTipUIEventRspResult.
var (
	EDynamicGuideTipUIEventRspResult_name = map[int32]string{
		0: "EDynamicGuideTipUIEventRspResult_None",
		1: "EDynamicGuideTipUIEventRspResult_CloseGuide",
	}
	EDynamicGuideTipUIEventRspResult_value = map[string]int32{
		"EDynamicGuideTipUIEventRspResult_None":       0,
		"EDynamicGuideTipUIEventRspResult_CloseGuide": 1,
	}
)

func (x EDynamicGuideTipUIEventRspResult) Enum() *EDynamicGuideTipUIEventRspResult {
	p := new(EDynamicGuideTipUIEventRspResult)
	*p = x
	return p
}

func (x EDynamicGuideTipUIEventRspResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDynamicGuideTipUIEventRspResult) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[106].Descriptor()
}

func (EDynamicGuideTipUIEventRspResult) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[106]
}

func (x EDynamicGuideTipUIEventRspResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EDynamicGuideTipUIEventRspResult.Descriptor instead.
func (EDynamicGuideTipUIEventRspResult) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{106}
}

type EDynamicGuideTipPreOperateType int32

const (
	EDynamicGuideTipPreOperateType_EDynamicGuideTipPreOperateType_None       EDynamicGuideTipPreOperateType = 0
	EDynamicGuideTipPreOperateType_EDynamicGuideTipPreOperateType_SetSideBar EDynamicGuideTipPreOperateType = 1
)

// Enum value maps for EDynamicGuideTipPreOperateType.
var (
	EDynamicGuideTipPreOperateType_name = map[int32]string{
		0: "EDynamicGuideTipPreOperateType_None",
		1: "EDynamicGuideTipPreOperateType_SetSideBar",
	}
	EDynamicGuideTipPreOperateType_value = map[string]int32{
		"EDynamicGuideTipPreOperateType_None":       0,
		"EDynamicGuideTipPreOperateType_SetSideBar": 1,
	}
)

func (x EDynamicGuideTipPreOperateType) Enum() *EDynamicGuideTipPreOperateType {
	p := new(EDynamicGuideTipPreOperateType)
	*p = x
	return p
}

func (x EDynamicGuideTipPreOperateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDynamicGuideTipPreOperateType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[107].Descriptor()
}

func (EDynamicGuideTipPreOperateType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[107]
}

func (x EDynamicGuideTipPreOperateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EDynamicGuideTipPreOperateType.Descriptor instead.
func (EDynamicGuideTipPreOperateType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{107}
}

type ENBHelpUnlockTriggerTimeType int32

const (
	ENBHelpUnlockTriggerTimeType_ENBHelpUnlockTriggerTimeType_None            ENBHelpUnlockTriggerTimeType = 0
	ENBHelpUnlockTriggerTimeType_ENBHelpUnlockTriggerTimeType_Lord            ENBHelpUnlockTriggerTimeType = 1
	ENBHelpUnlockTriggerTimeType_ENBHelpUnlockTriggerTimeType_EnterRound      ENBHelpUnlockTriggerTimeType = 2
	ENBHelpUnlockTriggerTimeType_ENBHelpUnlockTriggerTimeType_EnterRoundState ENBHelpUnlockTriggerTimeType = 3
	ENBHelpUnlockTriggerTimeType_ENBHelpUnlockTriggerTimeType_PvpBattle       ENBHelpUnlockTriggerTimeType = 4
	ENBHelpUnlockTriggerTimeType_ENBHelpUnlockTriggerTimeType_GetEquip        ENBHelpUnlockTriggerTimeType = 5
	ENBHelpUnlockTriggerTimeType_ENBHelpUnlockTriggerTimeType_DropTalent      ENBHelpUnlockTriggerTimeType = 6
)

// Enum value maps for ENBHelpUnlockTriggerTimeType.
var (
	ENBHelpUnlockTriggerTimeType_name = map[int32]string{
		0: "ENBHelpUnlockTriggerTimeType_None",
		1: "ENBHelpUnlockTriggerTimeType_Lord",
		2: "ENBHelpUnlockTriggerTimeType_EnterRound",
		3: "ENBHelpUnlockTriggerTimeType_EnterRoundState",
		4: "ENBHelpUnlockTriggerTimeType_PvpBattle",
		5: "ENBHelpUnlockTriggerTimeType_GetEquip",
		6: "ENBHelpUnlockTriggerTimeType_DropTalent",
	}
	ENBHelpUnlockTriggerTimeType_value = map[string]int32{
		"ENBHelpUnlockTriggerTimeType_None":            0,
		"ENBHelpUnlockTriggerTimeType_Lord":            1,
		"ENBHelpUnlockTriggerTimeType_EnterRound":      2,
		"ENBHelpUnlockTriggerTimeType_EnterRoundState": 3,
		"ENBHelpUnlockTriggerTimeType_PvpBattle":       4,
		"ENBHelpUnlockTriggerTimeType_GetEquip":        5,
		"ENBHelpUnlockTriggerTimeType_DropTalent":      6,
	}
)

func (x ENBHelpUnlockTriggerTimeType) Enum() *ENBHelpUnlockTriggerTimeType {
	p := new(ENBHelpUnlockTriggerTimeType)
	*p = x
	return p
}

func (x ENBHelpUnlockTriggerTimeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ENBHelpUnlockTriggerTimeType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[108].Descriptor()
}

func (ENBHelpUnlockTriggerTimeType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[108]
}

func (x ENBHelpUnlockTriggerTimeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ENBHelpUnlockTriggerTimeType.Descriptor instead.
func (ENBHelpUnlockTriggerTimeType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{108}
}

type ENBUINameHintUnlockType int32

const (
	ENBUINameHintUnlockType_ENBUINameHintUnlockType_None          ENBUINameHintUnlockType = 0
	ENBUINameHintUnlockType_ENBUINameHintUnlockType_Default       ENBUINameHintUnlockType = 1
	ENBUINameHintUnlockType_ENBUINameHintUnlockType_FinishCount   ENBUINameHintUnlockType = 2
	ENBUINameHintUnlockType_ENBUINameHintUnlockType_FinishSpecify ENBUINameHintUnlockType = 3
)

// Enum value maps for ENBUINameHintUnlockType.
var (
	ENBUINameHintUnlockType_name = map[int32]string{
		0: "ENBUINameHintUnlockType_None",
		1: "ENBUINameHintUnlockType_Default",
		2: "ENBUINameHintUnlockType_FinishCount",
		3: "ENBUINameHintUnlockType_FinishSpecify",
	}
	ENBUINameHintUnlockType_value = map[string]int32{
		"ENBUINameHintUnlockType_None":          0,
		"ENBUINameHintUnlockType_Default":       1,
		"ENBUINameHintUnlockType_FinishCount":   2,
		"ENBUINameHintUnlockType_FinishSpecify": 3,
	}
)

func (x ENBUINameHintUnlockType) Enum() *ENBUINameHintUnlockType {
	p := new(ENBUINameHintUnlockType)
	*p = x
	return p
}

func (x ENBUINameHintUnlockType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ENBUINameHintUnlockType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[109].Descriptor()
}

func (ENBUINameHintUnlockType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[109]
}

func (x ENBUINameHintUnlockType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ENBUINameHintUnlockType.Descriptor instead.
func (ENBUINameHintUnlockType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{109}
}

type ENBUINameHintFinishType int32

const (
	ENBUINameHintFinishType_ENBUINameHintFinishType_None         ENBUINameHintFinishType = 0
	ENBUINameHintFinishType_ENBUINameHintFinishType_Click        ENBUINameHintFinishType = 1
	ENBUINameHintFinishType_ENBUINameHintFinishType_OpenUILayer  ENBUINameHintFinishType = 2
	ENBUINameHintFinishType_ENBUINameHintFinishType_SendQuickMsg ENBUINameHintFinishType = 3
)

// Enum value maps for ENBUINameHintFinishType.
var (
	ENBUINameHintFinishType_name = map[int32]string{
		0: "ENBUINameHintFinishType_None",
		1: "ENBUINameHintFinishType_Click",
		2: "ENBUINameHintFinishType_OpenUILayer",
		3: "ENBUINameHintFinishType_SendQuickMsg",
	}
	ENBUINameHintFinishType_value = map[string]int32{
		"ENBUINameHintFinishType_None":         0,
		"ENBUINameHintFinishType_Click":        1,
		"ENBUINameHintFinishType_OpenUILayer":  2,
		"ENBUINameHintFinishType_SendQuickMsg": 3,
	}
)

func (x ENBUINameHintFinishType) Enum() *ENBUINameHintFinishType {
	p := new(ENBUINameHintFinishType)
	*p = x
	return p
}

func (x ENBUINameHintFinishType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ENBUINameHintFinishType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[110].Descriptor()
}

func (ENBUINameHintFinishType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[110]
}

func (x ENBUINameHintFinishType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ENBUINameHintFinishType.Descriptor instead.
func (ENBUINameHintFinishType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{110}
}

type ENBUINameHintDirType int32

const (
	ENBUINameHintDirType_ENBUINameHintDirType_None  ENBUINameHintDirType = 0
	ENBUINameHintDirType_ENBUINameHintDirType_Right ENBUINameHintDirType = 1
	ENBUINameHintDirType_ENBUINameHintDirType_Left  ENBUINameHintDirType = 2
	ENBUINameHintDirType_ENBUINameHintDirType_Top   ENBUINameHintDirType = 3
	ENBUINameHintDirType_ENBUINameHintDirType_Down  ENBUINameHintDirType = 4
)

// Enum value maps for ENBUINameHintDirType.
var (
	ENBUINameHintDirType_name = map[int32]string{
		0: "ENBUINameHintDirType_None",
		1: "ENBUINameHintDirType_Right",
		2: "ENBUINameHintDirType_Left",
		3: "ENBUINameHintDirType_Top",
		4: "ENBUINameHintDirType_Down",
	}
	ENBUINameHintDirType_value = map[string]int32{
		"ENBUINameHintDirType_None":  0,
		"ENBUINameHintDirType_Right": 1,
		"ENBUINameHintDirType_Left":  2,
		"ENBUINameHintDirType_Top":   3,
		"ENBUINameHintDirType_Down":  4,
	}
)

func (x ENBUINameHintDirType) Enum() *ENBUINameHintDirType {
	p := new(ENBUINameHintDirType)
	*p = x
	return p
}

func (x ENBUINameHintDirType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ENBUINameHintDirType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[111].Descriptor()
}

func (ENBUINameHintDirType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[111]
}

func (x ENBUINameHintDirType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ENBUINameHintDirType.Descriptor instead.
func (ENBUINameHintDirType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{111}
}

type EWarmAIAllocMode int32

const (
	EWarmAIAllocMode_WarmAINormal      EWarmAIAllocMode = 0
	EWarmAIAllocMode_WarmAIAllClientAI EWarmAIAllocMode = 1
	EWarmAIAllocMode_WarmAIAllServerAI EWarmAIAllocMode = 2
)

// Enum value maps for EWarmAIAllocMode.
var (
	EWarmAIAllocMode_name = map[int32]string{
		0: "WarmAINormal",
		1: "WarmAIAllClientAI",
		2: "WarmAIAllServerAI",
	}
	EWarmAIAllocMode_value = map[string]int32{
		"WarmAINormal":      0,
		"WarmAIAllClientAI": 1,
		"WarmAIAllServerAI": 2,
	}
)

func (x EWarmAIAllocMode) Enum() *EWarmAIAllocMode {
	p := new(EWarmAIAllocMode)
	*p = x
	return p
}

func (x EWarmAIAllocMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EWarmAIAllocMode) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[112].Descriptor()
}

func (EWarmAIAllocMode) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[112]
}

func (x EWarmAIAllocMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EWarmAIAllocMode.Descriptor instead.
func (EWarmAIAllocMode) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{112}
}

type EPVPLordUseType int32

const (
	EPVPLordUseType_USE_TOP EPVPLordUseType = 0
	EPVPLordUseType_USE_IN  EPVPLordUseType = 1
)

// Enum value maps for EPVPLordUseType.
var (
	EPVPLordUseType_name = map[int32]string{
		0: "USE_TOP",
		1: "USE_IN",
	}
	EPVPLordUseType_value = map[string]int32{
		"USE_TOP": 0,
		"USE_IN":  1,
	}
)

func (x EPVPLordUseType) Enum() *EPVPLordUseType {
	p := new(EPVPLordUseType)
	*p = x
	return p
}

func (x EPVPLordUseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPVPLordUseType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[113].Descriptor()
}

func (EPVPLordUseType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[113]
}

func (x EPVPLordUseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPVPLordUseType.Descriptor instead.
func (EPVPLordUseType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{113}
}

type EAIStrategyChkType int32

const (
	EAIStrategyChkType_CHECK_TOP EAIStrategyChkType = 0
	EAIStrategyChkType_CHECK_IN  EAIStrategyChkType = 1
)

// Enum value maps for EAIStrategyChkType.
var (
	EAIStrategyChkType_name = map[int32]string{
		0: "CHECK_TOP",
		1: "CHECK_IN",
	}
	EAIStrategyChkType_value = map[string]int32{
		"CHECK_TOP": 0,
		"CHECK_IN":  1,
	}
)

func (x EAIStrategyChkType) Enum() *EAIStrategyChkType {
	p := new(EAIStrategyChkType)
	*p = x
	return p
}

func (x EAIStrategyChkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAIStrategyChkType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[114].Descriptor()
}

func (EAIStrategyChkType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[114]
}

func (x EAIStrategyChkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EAIStrategyChkType.Descriptor instead.
func (EAIStrategyChkType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{114}
}

// 行为树AI额外标记的枚举
type EClientAIExtraFlag int32

const (
	EClientAIExtraFlag_AIFlagAuctionNoBidding  EClientAIExtraFlag = 0
	EClientAIExtraFlag_AIFlagLineupBigRelative EClientAIExtraFlag = 1
	EClientAIExtraFlag_AIFlagMax               EClientAIExtraFlag = 32 // 不能大于等于32
)

// Enum value maps for EClientAIExtraFlag.
var (
	EClientAIExtraFlag_name = map[int32]string{
		0:  "AIFlagAuctionNoBidding",
		1:  "AIFlagLineupBigRelative",
		32: "AIFlagMax",
	}
	EClientAIExtraFlag_value = map[string]int32{
		"AIFlagAuctionNoBidding":  0,
		"AIFlagLineupBigRelative": 1,
		"AIFlagMax":               32,
	}
)

func (x EClientAIExtraFlag) Enum() *EClientAIExtraFlag {
	p := new(EClientAIExtraFlag)
	*p = x
	return p
}

func (x EClientAIExtraFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EClientAIExtraFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[115].Descriptor()
}

func (EClientAIExtraFlag) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[115]
}

func (x EClientAIExtraFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EClientAIExtraFlag.Descriptor instead.
func (EClientAIExtraFlag) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{115}
}

type ENewbieTaskType int32

const (
	ENewbieTaskType_TASK_COMMON   ENewbieTaskType = 0
	ENewbieTaskType_TASK_PROGRESS ENewbieTaskType = 1
)

// Enum value maps for ENewbieTaskType.
var (
	ENewbieTaskType_name = map[int32]string{
		0: "TASK_COMMON",
		1: "TASK_PROGRESS",
	}
	ENewbieTaskType_value = map[string]int32{
		"TASK_COMMON":   0,
		"TASK_PROGRESS": 1,
	}
)

func (x ENewbieTaskType) Enum() *ENewbieTaskType {
	p := new(ENewbieTaskType)
	*p = x
	return p
}

func (x ENewbieTaskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ENewbieTaskType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[116].Descriptor()
}

func (ENewbieTaskType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[116]
}

func (x ENewbieTaskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ENewbieTaskType.Descriptor instead.
func (ENewbieTaskType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{116}
}

type ECardPackType int32

const (
	ECardPackType_CARD_TYPE_DIAMOND ECardPackType = 0
	ECardPackType_CARD_TYPE_COUPONS ECardPackType = 1
)

// Enum value maps for ECardPackType.
var (
	ECardPackType_name = map[int32]string{
		0: "CARD_TYPE_DIAMOND",
		1: "CARD_TYPE_COUPONS",
	}
	ECardPackType_value = map[string]int32{
		"CARD_TYPE_DIAMOND": 0,
		"CARD_TYPE_COUPONS": 1,
	}
)

func (x ECardPackType) Enum() *ECardPackType {
	p := new(ECardPackType)
	*p = x
	return p
}

func (x ECardPackType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECardPackType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[117].Descriptor()
}

func (ECardPackType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[117]
}

func (x ECardPackType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ECardPackType.Descriptor instead.
func (ECardPackType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{117}
}

// -------------------------抽卡----------------------------
// -------------------------帮助----------------------------
type EnumHelpSystemIDName int32

const (
	EnumHelpSystemIDName_INVALID              EnumHelpSystemIDName = 0
	EnumHelpSystemIDName_BATTLEPASS           EnumHelpSystemIDName = 1
	EnumHelpSystemIDName_HEROCOLLECT          EnumHelpSystemIDName = 2
	EnumHelpSystemIDName_NEWBIRACTITY         EnumHelpSystemIDName = 3
	EnumHelpSystemIDName_EXCHANGEWEAL         EnumHelpSystemIDName = 4
	EnumHelpSystemIDName_GLORYTITLE           EnumHelpSystemIDName = 5
	EnumHelpSystemIDName_GAME_CENTER          EnumHelpSystemIDName = 6
	EnumHelpSystemIDName_SETTING_INSIDE       EnumHelpSystemIDName = 7
	EnumHelpSystemIDName_GUILD                EnumHelpSystemIDName = 8
	EnumHelpSystemIDName_ACHIEVEMian          EnumHelpSystemIDName = 9
	EnumHelpSystemIDName_GAMESEASONTRIP       EnumHelpSystemIDName = 10
	EnumHelpSystemIDName_GAMESEASONAWARD      EnumHelpSystemIDName = 11
	EnumHelpSystemIDName_GUILDOUT             EnumHelpSystemIDName = 12
	EnumHelpSystemIDName_ROUNDHELP_INSIDE     EnumHelpSystemIDName = 13
	EnumHelpSystemIDName_GAME_ATLAS           EnumHelpSystemIDName = 14
	EnumHelpSystemIDName_GAMEHISTORICALSEASON EnumHelpSystemIDName = 15
	EnumHelpSystemIDName_GAMEMARKKING         EnumHelpSystemIDName = 16
	EnumHelpSystemIDName_DEPOSIT_CARDS_RULE   EnumHelpSystemIDName = 17
	EnumHelpSystemIDName_PERSONALIZATION      EnumHelpSystemIDName = 18
	EnumHelpSystemIDName_LINE_UP_RECOMMEND    EnumHelpSystemIDName = 19
)

// Enum value maps for EnumHelpSystemIDName.
var (
	EnumHelpSystemIDName_name = map[int32]string{
		0:  "INVALID",
		1:  "BATTLEPASS",
		2:  "HEROCOLLECT",
		3:  "NEWBIRACTITY",
		4:  "EXCHANGEWEAL",
		5:  "GLORYTITLE",
		6:  "GAME_CENTER",
		7:  "SETTING_INSIDE",
		8:  "GUILD",
		9:  "ACHIEVEMian",
		10: "GAMESEASONTRIP",
		11: "GAMESEASONAWARD",
		12: "GUILDOUT",
		13: "ROUNDHELP_INSIDE",
		14: "GAME_ATLAS",
		15: "GAMEHISTORICALSEASON",
		16: "GAMEMARKKING",
		17: "DEPOSIT_CARDS_RULE",
		18: "PERSONALIZATION",
		19: "LINE_UP_RECOMMEND",
	}
	EnumHelpSystemIDName_value = map[string]int32{
		"INVALID":              0,
		"BATTLEPASS":           1,
		"HEROCOLLECT":          2,
		"NEWBIRACTITY":         3,
		"EXCHANGEWEAL":         4,
		"GLORYTITLE":           5,
		"GAME_CENTER":          6,
		"SETTING_INSIDE":       7,
		"GUILD":                8,
		"ACHIEVEMian":          9,
		"GAMESEASONTRIP":       10,
		"GAMESEASONAWARD":      11,
		"GUILDOUT":             12,
		"ROUNDHELP_INSIDE":     13,
		"GAME_ATLAS":           14,
		"GAMEHISTORICALSEASON": 15,
		"GAMEMARKKING":         16,
		"DEPOSIT_CARDS_RULE":   17,
		"PERSONALIZATION":      18,
		"LINE_UP_RECOMMEND":    19,
	}
)

func (x EnumHelpSystemIDName) Enum() *EnumHelpSystemIDName {
	p := new(EnumHelpSystemIDName)
	*p = x
	return p
}

func (x EnumHelpSystemIDName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumHelpSystemIDName) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[118].Descriptor()
}

func (EnumHelpSystemIDName) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[118]
}

func (x EnumHelpSystemIDName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumHelpSystemIDName.Descriptor instead.
func (EnumHelpSystemIDName) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{118}
}

// -------------------------新手引导----------------------------
type NB_TRIGGER_TYPE int32

const (
	NB_TRIGGER_TYPE_Invalid              NB_TRIGGER_TYPE = 0
	NB_TRIGGER_TYPE_EnterHall            NB_TRIGGER_TYPE = 1
	NB_TRIGGER_TYPE_NewbieGuideComplete  NB_TRIGGER_TYPE = 2
	NB_TRIGGER_TYPE_NewbieBattleComplete NB_TRIGGER_TYPE = 3
	NB_TRIGGER_TYPE_SystemUnlockAnimEnd  NB_TRIGGER_TYPE = 4
	NB_TRIGGER_TYPE_InPVPChooseLord      NB_TRIGGER_TYPE = 5
	NB_TRIGGER_TYPE_LuaEventTrigger      NB_TRIGGER_TYPE = 6
)

// Enum value maps for NB_TRIGGER_TYPE.
var (
	NB_TRIGGER_TYPE_name = map[int32]string{
		0: "Invalid",
		1: "EnterHall",
		2: "NewbieGuideComplete",
		3: "NewbieBattleComplete",
		4: "SystemUnlockAnimEnd",
		5: "InPVPChooseLord",
		6: "LuaEventTrigger",
	}
	NB_TRIGGER_TYPE_value = map[string]int32{
		"Invalid":              0,
		"EnterHall":            1,
		"NewbieGuideComplete":  2,
		"NewbieBattleComplete": 3,
		"SystemUnlockAnimEnd":  4,
		"InPVPChooseLord":      5,
		"LuaEventTrigger":      6,
	}
)

func (x NB_TRIGGER_TYPE) Enum() *NB_TRIGGER_TYPE {
	p := new(NB_TRIGGER_TYPE)
	*p = x
	return p
}

func (x NB_TRIGGER_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NB_TRIGGER_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[119].Descriptor()
}

func (NB_TRIGGER_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[119]
}

func (x NB_TRIGGER_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NB_TRIGGER_TYPE.Descriptor instead.
func (NB_TRIGGER_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{119}
}

type NB_CONDITION_TYPE int32

const (
	NB_CONDITION_TYPE_NB_CONDITION_INVALID  NB_CONDITION_TYPE = 0
	NB_CONDITION_TYPE_NewbieGuideStat       NB_CONDITION_TYPE = 1
	NB_CONDITION_TYPE_BattleTimes           NB_CONDITION_TYPE = 2
	NB_CONDITION_TYPE_FirstArrivedRank      NB_CONDITION_TYPE = 3
	NB_CONDITION_TYPE_TrainingBookletFinish NB_CONDITION_TYPE = 4
	NB_CONDITION_TYPE_AchieveFinish         NB_CONDITION_TYPE = 5
	NB_CONDITION_TYPE_CharacterLevelAttain  NB_CONDITION_TYPE = 6
)

// Enum value maps for NB_CONDITION_TYPE.
var (
	NB_CONDITION_TYPE_name = map[int32]string{
		0: "NB_CONDITION_INVALID",
		1: "NewbieGuideStat",
		2: "BattleTimes",
		3: "FirstArrivedRank",
		4: "TrainingBookletFinish",
		5: "AchieveFinish",
		6: "CharacterLevelAttain",
	}
	NB_CONDITION_TYPE_value = map[string]int32{
		"NB_CONDITION_INVALID":  0,
		"NewbieGuideStat":       1,
		"BattleTimes":           2,
		"FirstArrivedRank":      3,
		"TrainingBookletFinish": 4,
		"AchieveFinish":         5,
		"CharacterLevelAttain":  6,
	}
)

func (x NB_CONDITION_TYPE) Enum() *NB_CONDITION_TYPE {
	p := new(NB_CONDITION_TYPE)
	*p = x
	return p
}

func (x NB_CONDITION_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NB_CONDITION_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[120].Descriptor()
}

func (NB_CONDITION_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[120]
}

func (x NB_CONDITION_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NB_CONDITION_TYPE.Descriptor instead.
func (NB_CONDITION_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{120}
}

type NB_SAVE_TYPE int32

const (
	NB_SAVE_TYPE_Server    NB_SAVE_TYPE = 0
	NB_SAVE_TYPE_GameLife  NB_SAVE_TYPE = 1
	NB_SAVE_TYPE_LevelLife NB_SAVE_TYPE = 2
	NB_SAVE_TYPE_DontSave  NB_SAVE_TYPE = 3
)

// Enum value maps for NB_SAVE_TYPE.
var (
	NB_SAVE_TYPE_name = map[int32]string{
		0: "Server",
		1: "GameLife",
		2: "LevelLife",
		3: "DontSave",
	}
	NB_SAVE_TYPE_value = map[string]int32{
		"Server":    0,
		"GameLife":  1,
		"LevelLife": 2,
		"DontSave":  3,
	}
)

func (x NB_SAVE_TYPE) Enum() *NB_SAVE_TYPE {
	p := new(NB_SAVE_TYPE)
	*p = x
	return p
}

func (x NB_SAVE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NB_SAVE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[121].Descriptor()
}

func (NB_SAVE_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[121]
}

func (x NB_SAVE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NB_SAVE_TYPE.Descriptor instead.
func (NB_SAVE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{121}
}

type NB_INTRODUCER_DIR int32

const (
	NB_INTRODUCER_DIR_Left  NB_INTRODUCER_DIR = 0
	NB_INTRODUCER_DIR_Right NB_INTRODUCER_DIR = 1
)

// Enum value maps for NB_INTRODUCER_DIR.
var (
	NB_INTRODUCER_DIR_name = map[int32]string{
		0: "Left",
		1: "Right",
	}
	NB_INTRODUCER_DIR_value = map[string]int32{
		"Left":  0,
		"Right": 1,
	}
)

func (x NB_INTRODUCER_DIR) Enum() *NB_INTRODUCER_DIR {
	p := new(NB_INTRODUCER_DIR)
	*p = x
	return p
}

func (x NB_INTRODUCER_DIR) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NB_INTRODUCER_DIR) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[122].Descriptor()
}

func (NB_INTRODUCER_DIR) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[122]
}

func (x NB_INTRODUCER_DIR) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NB_INTRODUCER_DIR.Descriptor instead.
func (NB_INTRODUCER_DIR) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{122}
}

// 提示对齐方式
type TutorialTipAlignType int32

const (
	TutorialTipAlignType_TutorialTipAlignType_Right        TutorialTipAlignType = 0
	TutorialTipAlignType_TutorialTipAlignType_Left         TutorialTipAlignType = 1
	TutorialTipAlignType_TutorialTipAlignType_Top          TutorialTipAlignType = 2
	TutorialTipAlignType_TutorialTipAlignType_Down         TutorialTipAlignType = 3
	TutorialTipAlignType_TutorialTipAlignType_CombineEquip TutorialTipAlignType = 4
	TutorialTipAlignType_TutorialTipAlignType_Fetter       TutorialTipAlignType = 5
)

// Enum value maps for TutorialTipAlignType.
var (
	TutorialTipAlignType_name = map[int32]string{
		0: "TutorialTipAlignType_Right",
		1: "TutorialTipAlignType_Left",
		2: "TutorialTipAlignType_Top",
		3: "TutorialTipAlignType_Down",
		4: "TutorialTipAlignType_CombineEquip",
		5: "TutorialTipAlignType_Fetter",
	}
	TutorialTipAlignType_value = map[string]int32{
		"TutorialTipAlignType_Right":        0,
		"TutorialTipAlignType_Left":         1,
		"TutorialTipAlignType_Top":          2,
		"TutorialTipAlignType_Down":         3,
		"TutorialTipAlignType_CombineEquip": 4,
		"TutorialTipAlignType_Fetter":       5,
	}
)

func (x TutorialTipAlignType) Enum() *TutorialTipAlignType {
	p := new(TutorialTipAlignType)
	*p = x
	return p
}

func (x TutorialTipAlignType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TutorialTipAlignType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[123].Descriptor()
}

func (TutorialTipAlignType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[123]
}

func (x TutorialTipAlignType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TutorialTipAlignType.Descriptor instead.
func (TutorialTipAlignType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{123}
}

// 教学手指类型
type TutorialFingureType int32

const (
	TutorialFingureType_TutorialFingureType_None            TutorialFingureType = 0
	TutorialFingureType_TutorialFingureType_Rect            TutorialFingureType = 1
	TutorialFingureType_TutorialFingureType_DragEquip       TutorialFingureType = 2
	TutorialFingureType_TutorialFingureType_Cycle           TutorialFingureType = 3
	TutorialFingureType_TutorialFingureType_CycleBig        TutorialFingureType = 4
	TutorialFingureType_TutorialFingureType_CommonClick     TutorialFingureType = 5
	TutorialFingureType_TutorialFingureType_CommonDrag      TutorialFingureType = 6
	TutorialFingureType_TutorialFingureType_CommonLongPress TutorialFingureType = 7
)

// Enum value maps for TutorialFingureType.
var (
	TutorialFingureType_name = map[int32]string{
		0: "TutorialFingureType_None",
		1: "TutorialFingureType_Rect",
		2: "TutorialFingureType_DragEquip",
		3: "TutorialFingureType_Cycle",
		4: "TutorialFingureType_CycleBig",
		5: "TutorialFingureType_CommonClick",
		6: "TutorialFingureType_CommonDrag",
		7: "TutorialFingureType_CommonLongPress",
	}
	TutorialFingureType_value = map[string]int32{
		"TutorialFingureType_None":            0,
		"TutorialFingureType_Rect":            1,
		"TutorialFingureType_DragEquip":       2,
		"TutorialFingureType_Cycle":           3,
		"TutorialFingureType_CycleBig":        4,
		"TutorialFingureType_CommonClick":     5,
		"TutorialFingureType_CommonDrag":      6,
		"TutorialFingureType_CommonLongPress": 7,
	}
)

func (x TutorialFingureType) Enum() *TutorialFingureType {
	p := new(TutorialFingureType)
	*p = x
	return p
}

func (x TutorialFingureType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TutorialFingureType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[124].Descriptor()
}

func (TutorialFingureType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[124]
}

func (x TutorialFingureType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TutorialFingureType.Descriptor instead.
func (TutorialFingureType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{124}
}

// 教学手指方向类型
type TutorialFingureDirType int32

const (
	TutorialFingureDirType_TutorialFingureDirType_None     TutorialFingureDirType = 0
	TutorialFingureDirType_TutorialFingureDirType_Down     TutorialFingureDirType = 1
	TutorialFingureDirType_TutorialFingureDirType_LeftUp   TutorialFingureDirType = 2
	TutorialFingureDirType_TutorialFingureDirType_RightUp  TutorialFingureDirType = 3
	TutorialFingureDirType_TutorialFingureDirType_LeftDown TutorialFingureDirType = 4
	TutorialFingureDirType_TutorialFingureDirType_Up       TutorialFingureDirType = 5
)

// Enum value maps for TutorialFingureDirType.
var (
	TutorialFingureDirType_name = map[int32]string{
		0: "TutorialFingureDirType_None",
		1: "TutorialFingureDirType_Down",
		2: "TutorialFingureDirType_LeftUp",
		3: "TutorialFingureDirType_RightUp",
		4: "TutorialFingureDirType_LeftDown",
		5: "TutorialFingureDirType_Up",
	}
	TutorialFingureDirType_value = map[string]int32{
		"TutorialFingureDirType_None":     0,
		"TutorialFingureDirType_Down":     1,
		"TutorialFingureDirType_LeftUp":   2,
		"TutorialFingureDirType_RightUp":  3,
		"TutorialFingureDirType_LeftDown": 4,
		"TutorialFingureDirType_Up":       5,
	}
)

func (x TutorialFingureDirType) Enum() *TutorialFingureDirType {
	p := new(TutorialFingureDirType)
	*p = x
	return p
}

func (x TutorialFingureDirType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TutorialFingureDirType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[125].Descriptor()
}

func (TutorialFingureDirType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[125]
}

func (x TutorialFingureDirType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TutorialFingureDirType.Descriptor instead.
func (TutorialFingureDirType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{125}
}

type ENBGuideTlogType int32

const (
	ENBGuideTlogType_ENBGuideTlogType_None                   ENBGuideTlogType = 0
	ENBGuideTlogType_ENBGuideTlogType_Custom                 ENBGuideTlogType = 1
	ENBGuideTlogType_ENBGuideTlogType_GameStart              ENBGuideTlogType = 2
	ENBGuideTlogType_ENBGuideTlogType_GameEnd                ENBGuideTlogType = 3
	ENBGuideTlogType_ENBGuideTlogType_RoundPreparePhaseStart ENBGuideTlogType = 4
	ENBGuideTlogType_ENBGuideTlogType_RoundPreparePhaseEnd   ENBGuideTlogType = 5
	ENBGuideTlogType_ENBGuideTlogType_CountTime              ENBGuideTlogType = 6
	ENBGuideTlogType_ENBGuideTlogType_CountFingureInput      ENBGuideTlogType = 7
	ENBGuideTlogType_ENBGuideTlogType_ChessCoordDiff         ENBGuideTlogType = 8
	ENBGuideTlogType_ENBGuideTlogType_LevelRoundTime         ENBGuideTlogType = 9  // 关卡ID 回合ID 回合时长
	ENBGuideTlogType_ENBGuideTlogType_LevelSkip              ENBGuideTlogType = 10 // 关卡ID 回合ID 距离关卡开始时间
	ENBGuideTlogType_ENBGuideTlogType_LevelRecover           ENBGuideTlogType = 11 // 关卡ID 回合ID
)

// Enum value maps for ENBGuideTlogType.
var (
	ENBGuideTlogType_name = map[int32]string{
		0:  "ENBGuideTlogType_None",
		1:  "ENBGuideTlogType_Custom",
		2:  "ENBGuideTlogType_GameStart",
		3:  "ENBGuideTlogType_GameEnd",
		4:  "ENBGuideTlogType_RoundPreparePhaseStart",
		5:  "ENBGuideTlogType_RoundPreparePhaseEnd",
		6:  "ENBGuideTlogType_CountTime",
		7:  "ENBGuideTlogType_CountFingureInput",
		8:  "ENBGuideTlogType_ChessCoordDiff",
		9:  "ENBGuideTlogType_LevelRoundTime",
		10: "ENBGuideTlogType_LevelSkip",
		11: "ENBGuideTlogType_LevelRecover",
	}
	ENBGuideTlogType_value = map[string]int32{
		"ENBGuideTlogType_None":                   0,
		"ENBGuideTlogType_Custom":                 1,
		"ENBGuideTlogType_GameStart":              2,
		"ENBGuideTlogType_GameEnd":                3,
		"ENBGuideTlogType_RoundPreparePhaseStart": 4,
		"ENBGuideTlogType_RoundPreparePhaseEnd":   5,
		"ENBGuideTlogType_CountTime":              6,
		"ENBGuideTlogType_CountFingureInput":      7,
		"ENBGuideTlogType_ChessCoordDiff":         8,
		"ENBGuideTlogType_LevelRoundTime":         9,
		"ENBGuideTlogType_LevelSkip":              10,
		"ENBGuideTlogType_LevelRecover":           11,
	}
)

func (x ENBGuideTlogType) Enum() *ENBGuideTlogType {
	p := new(ENBGuideTlogType)
	*p = x
	return p
}

func (x ENBGuideTlogType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ENBGuideTlogType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[126].Descriptor()
}

func (ENBGuideTlogType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[126]
}

func (x ENBGuideTlogType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ENBGuideTlogType.Descriptor instead.
func (ENBGuideTlogType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{126}
}

type ENBGuideFinType int32

const (
	ENBGuideFinType_ENBGuideFinType_None    ENBGuideFinType = 0
	ENBGuideFinType_ENBGuideTlogType_NORMAL ENBGuideFinType = 1
	ENBGuideFinType_ENBGuideTlogType_SKIP   ENBGuideFinType = 2
)

// Enum value maps for ENBGuideFinType.
var (
	ENBGuideFinType_name = map[int32]string{
		0: "ENBGuideFinType_None",
		1: "ENBGuideTlogType_NORMAL",
		2: "ENBGuideTlogType_SKIP",
	}
	ENBGuideFinType_value = map[string]int32{
		"ENBGuideFinType_None":    0,
		"ENBGuideTlogType_NORMAL": 1,
		"ENBGuideTlogType_SKIP":   2,
	}
)

func (x ENBGuideFinType) Enum() *ENBGuideFinType {
	p := new(ENBGuideFinType)
	*p = x
	return p
}

func (x ENBGuideFinType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ENBGuideFinType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[127].Descriptor()
}

func (ENBGuideFinType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[127]
}

func (x ENBGuideFinType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ENBGuideFinType.Descriptor instead.
func (ENBGuideFinType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{127}
}

type NB_ADDTIONAL_TYPE int32

const (
	NB_ADDTIONAL_TYPE_NB_ADDTIONAL_NULL                 NB_ADDTIONAL_TYPE = 0
	NB_ADDTIONAL_TYPE_NB_ADDTIONAL_SETNAME_BEFORE       NB_ADDTIONAL_TYPE = 1
	NB_ADDTIONAL_TYPE_NB_ADDTIONAL_SETNAME_ING          NB_ADDTIONAL_TYPE = 2
	NB_ADDTIONAL_TYPE_NB_ADDTIONAL_SETNAME_AFTER        NB_ADDTIONAL_TYPE = 3
	NB_ADDTIONAL_TYPE_NB_ADDTIONAL_SELECT               NB_ADDTIONAL_TYPE = 4
	NB_ADDTIONAL_TYPE_NB_ADDTIONAL_SELECT_PIC           NB_ADDTIONAL_TYPE = 5
	NB_ADDTIONAL_TYPE_NB_ADDTIONAL_ENTERBATTLE          NB_ADDTIONAL_TYPE = 6
	NB_ADDTIONAL_TYPE_NB_ADDTIONAL_EXITBATTLE           NB_ADDTIONAL_TYPE = 7
	NB_ADDTIONAL_TYPE_NB_ADDTIONAL_CHOOSELORD_1         NB_ADDTIONAL_TYPE = 8
	NB_ADDTIONAL_TYPE_NB_ADDTIONAL_CHOOSELORD_2         NB_ADDTIONAL_TYPE = 9
	NB_ADDTIONAL_TYPE_NB_ADDTIONAL_CHOOSELORD_3         NB_ADDTIONAL_TYPE = 10
	NB_ADDTIONAL_TYPE_NB_ADDTIONAL_REPEATED_SELECT      NB_ADDTIONAL_TYPE = 11
	NB_ADDTIONAL_TYPE_NB_ADDTIONAL_REPEATED_ENTERBATTLE NB_ADDTIONAL_TYPE = 12
	NB_ADDTIONAL_TYPE_NB_ADDTIONAL_BANPICK_1            NB_ADDTIONAL_TYPE = 13
	NB_ADDTIONAL_TYPE_NB_ADDTIONAL_BANPICK_2            NB_ADDTIONAL_TYPE = 14
	NB_ADDTIONAL_TYPE_NB_ADDTIONAL_BANPICK_3            NB_ADDTIONAL_TYPE = 15
)

// Enum value maps for NB_ADDTIONAL_TYPE.
var (
	NB_ADDTIONAL_TYPE_name = map[int32]string{
		0:  "NB_ADDTIONAL_NULL",
		1:  "NB_ADDTIONAL_SETNAME_BEFORE",
		2:  "NB_ADDTIONAL_SETNAME_ING",
		3:  "NB_ADDTIONAL_SETNAME_AFTER",
		4:  "NB_ADDTIONAL_SELECT",
		5:  "NB_ADDTIONAL_SELECT_PIC",
		6:  "NB_ADDTIONAL_ENTERBATTLE",
		7:  "NB_ADDTIONAL_EXITBATTLE",
		8:  "NB_ADDTIONAL_CHOOSELORD_1",
		9:  "NB_ADDTIONAL_CHOOSELORD_2",
		10: "NB_ADDTIONAL_CHOOSELORD_3",
		11: "NB_ADDTIONAL_REPEATED_SELECT",
		12: "NB_ADDTIONAL_REPEATED_ENTERBATTLE",
		13: "NB_ADDTIONAL_BANPICK_1",
		14: "NB_ADDTIONAL_BANPICK_2",
		15: "NB_ADDTIONAL_BANPICK_3",
	}
	NB_ADDTIONAL_TYPE_value = map[string]int32{
		"NB_ADDTIONAL_NULL":                 0,
		"NB_ADDTIONAL_SETNAME_BEFORE":       1,
		"NB_ADDTIONAL_SETNAME_ING":          2,
		"NB_ADDTIONAL_SETNAME_AFTER":        3,
		"NB_ADDTIONAL_SELECT":               4,
		"NB_ADDTIONAL_SELECT_PIC":           5,
		"NB_ADDTIONAL_ENTERBATTLE":          6,
		"NB_ADDTIONAL_EXITBATTLE":           7,
		"NB_ADDTIONAL_CHOOSELORD_1":         8,
		"NB_ADDTIONAL_CHOOSELORD_2":         9,
		"NB_ADDTIONAL_CHOOSELORD_3":         10,
		"NB_ADDTIONAL_REPEATED_SELECT":      11,
		"NB_ADDTIONAL_REPEATED_ENTERBATTLE": 12,
		"NB_ADDTIONAL_BANPICK_1":            13,
		"NB_ADDTIONAL_BANPICK_2":            14,
		"NB_ADDTIONAL_BANPICK_3":            15,
	}
)

func (x NB_ADDTIONAL_TYPE) Enum() *NB_ADDTIONAL_TYPE {
	p := new(NB_ADDTIONAL_TYPE)
	*p = x
	return p
}

func (x NB_ADDTIONAL_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NB_ADDTIONAL_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[128].Descriptor()
}

func (NB_ADDTIONAL_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[128]
}

func (x NB_ADDTIONAL_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NB_ADDTIONAL_TYPE.Descriptor instead.
func (NB_ADDTIONAL_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{128}
}

type RES_NEWBIE_CONST_TYPE int32

const (
	RES_NEWBIE_CONST_TYPE_RES_NEWBIE_CONST_TYPE_OPEN_NEWBIE_BATTLE        RES_NEWBIE_CONST_TYPE = 0
	RES_NEWBIE_CONST_TYPE_RES_NEWBIE_CONST_TYPE_OPEN_DYNAMIC_GUIDE        RES_NEWBIE_CONST_TYPE = 1
	RES_NEWBIE_CONST_TYPE_RES_NEWBIE_CONST_TYPE_PLAYER_TAG_DATA_SEASONID  RES_NEWBIE_CONST_TYPE = 2
	RES_NEWBIE_CONST_TYPE_RES_NEWBIE_CONST_TYPE_PLAYER_TAG_DATA_GAME_TYPE RES_NEWBIE_CONST_TYPE = 3
	RES_NEWBIE_CONST_TYPE_RES_NEWBIE_CONST_TYPE_OPEN_RULE_TIPS            RES_NEWBIE_CONST_TYPE = 4
	RES_NEWBIE_CONST_TYPE_RES_NEWBIE_CONST_TYPE_OPEN_RECRUIT_TASK         RES_NEWBIE_CONST_TYPE = 5
	RES_NEWBIE_CONST_TYPE_RES_NEWBIE_CONST_TYPE_OPEN_UINAME_HINT          RES_NEWBIE_CONST_TYPE = 6
)

// Enum value maps for RES_NEWBIE_CONST_TYPE.
var (
	RES_NEWBIE_CONST_TYPE_name = map[int32]string{
		0: "RES_NEWBIE_CONST_TYPE_OPEN_NEWBIE_BATTLE",
		1: "RES_NEWBIE_CONST_TYPE_OPEN_DYNAMIC_GUIDE",
		2: "RES_NEWBIE_CONST_TYPE_PLAYER_TAG_DATA_SEASONID",
		3: "RES_NEWBIE_CONST_TYPE_PLAYER_TAG_DATA_GAME_TYPE",
		4: "RES_NEWBIE_CONST_TYPE_OPEN_RULE_TIPS",
		5: "RES_NEWBIE_CONST_TYPE_OPEN_RECRUIT_TASK",
		6: "RES_NEWBIE_CONST_TYPE_OPEN_UINAME_HINT",
	}
	RES_NEWBIE_CONST_TYPE_value = map[string]int32{
		"RES_NEWBIE_CONST_TYPE_OPEN_NEWBIE_BATTLE":        0,
		"RES_NEWBIE_CONST_TYPE_OPEN_DYNAMIC_GUIDE":        1,
		"RES_NEWBIE_CONST_TYPE_PLAYER_TAG_DATA_SEASONID":  2,
		"RES_NEWBIE_CONST_TYPE_PLAYER_TAG_DATA_GAME_TYPE": 3,
		"RES_NEWBIE_CONST_TYPE_OPEN_RULE_TIPS":            4,
		"RES_NEWBIE_CONST_TYPE_OPEN_RECRUIT_TASK":         5,
		"RES_NEWBIE_CONST_TYPE_OPEN_UINAME_HINT":          6,
	}
)

func (x RES_NEWBIE_CONST_TYPE) Enum() *RES_NEWBIE_CONST_TYPE {
	p := new(RES_NEWBIE_CONST_TYPE)
	*p = x
	return p
}

func (x RES_NEWBIE_CONST_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_NEWBIE_CONST_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[129].Descriptor()
}

func (RES_NEWBIE_CONST_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[129]
}

func (x RES_NEWBIE_CONST_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_NEWBIE_CONST_TYPE.Descriptor instead.
func (RES_NEWBIE_CONST_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{129}
}

type RES_TALENT_TYPE int32

const (
	RES_TALENT_TYPE_RES_TALENT_TYPE_INVALID  RES_TALENT_TYPE = 0
	RES_TALENT_TYPE_RES_TALENT_TYPE_GENERAL  RES_TALENT_TYPE = 1
	RES_TALENT_TYPE_RES_TALENT_TYPE_RELATIVE RES_TALENT_TYPE = 2
	RES_TALENT_TYPE_RES_TALENT_TYPE_SKILL    RES_TALENT_TYPE = 3
)

// Enum value maps for RES_TALENT_TYPE.
var (
	RES_TALENT_TYPE_name = map[int32]string{
		0: "RES_TALENT_TYPE_INVALID",
		1: "RES_TALENT_TYPE_GENERAL",
		2: "RES_TALENT_TYPE_RELATIVE",
		3: "RES_TALENT_TYPE_SKILL",
	}
	RES_TALENT_TYPE_value = map[string]int32{
		"RES_TALENT_TYPE_INVALID":  0,
		"RES_TALENT_TYPE_GENERAL":  1,
		"RES_TALENT_TYPE_RELATIVE": 2,
		"RES_TALENT_TYPE_SKILL":    3,
	}
)

func (x RES_TALENT_TYPE) Enum() *RES_TALENT_TYPE {
	p := new(RES_TALENT_TYPE)
	*p = x
	return p
}

func (x RES_TALENT_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_TALENT_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[130].Descriptor()
}

func (RES_TALENT_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[130]
}

func (x RES_TALENT_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_TALENT_TYPE.Descriptor instead.
func (RES_TALENT_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{130}
}

type RES_TALENT_SKILL_INS_TYPE int32

const (
	RES_TALENT_SKILL_INS_TYPE_RES_TALENT_SKILL_INS_INVALID          RES_TALENT_SKILL_INS_TYPE = 0
	RES_TALENT_SKILL_INS_TYPE_RES_TALENT_SKILL_INS_Bloodlust        RES_TALENT_SKILL_INS_TYPE = 101
	RES_TALENT_SKILL_INS_TYPE_RES_TALENT_SKILL_INS_FailureExp       RES_TALENT_SKILL_INS_TYPE = 102
	RES_TALENT_SKILL_INS_TYPE_RES_TALENT_SKILL_INS_MysteriousEnergy RES_TALENT_SKILL_INS_TYPE = 103
	RES_TALENT_SKILL_INS_TYPE_RES_TALENT_SKILL_INS_ExcellentTalents RES_TALENT_SKILL_INS_TYPE = 104
	RES_TALENT_SKILL_INS_TYPE_RES_TALENT_SKILL_INS_Resell           RES_TALENT_SKILL_INS_TYPE = 105
	RES_TALENT_SKILL_INS_TYPE_RES_TALENT_SKILL_INS_Thundercracker   RES_TALENT_SKILL_INS_TYPE = 106
	RES_TALENT_SKILL_INS_TYPE_RES_TALENT_SKILL_INS_BloodyShadow     RES_TALENT_SKILL_INS_TYPE = 107
	RES_TALENT_SKILL_INS_TYPE_RES_TALENT_SKILL_INS_WerewolfBlood    RES_TALENT_SKILL_INS_TYPE = 108
	RES_TALENT_SKILL_INS_TYPE_RES_TALENT_SKILL_INS_WinterArrived    RES_TALENT_SKILL_INS_TYPE = 109
	RES_TALENT_SKILL_INS_TYPE_RES_TALENT_SKILL_INS_ManIsNature      RES_TALENT_SKILL_INS_TYPE = 110
)

// Enum value maps for RES_TALENT_SKILL_INS_TYPE.
var (
	RES_TALENT_SKILL_INS_TYPE_name = map[int32]string{
		0:   "RES_TALENT_SKILL_INS_INVALID",
		101: "RES_TALENT_SKILL_INS_Bloodlust",
		102: "RES_TALENT_SKILL_INS_FailureExp",
		103: "RES_TALENT_SKILL_INS_MysteriousEnergy",
		104: "RES_TALENT_SKILL_INS_ExcellentTalents",
		105: "RES_TALENT_SKILL_INS_Resell",
		106: "RES_TALENT_SKILL_INS_Thundercracker",
		107: "RES_TALENT_SKILL_INS_BloodyShadow",
		108: "RES_TALENT_SKILL_INS_WerewolfBlood",
		109: "RES_TALENT_SKILL_INS_WinterArrived",
		110: "RES_TALENT_SKILL_INS_ManIsNature",
	}
	RES_TALENT_SKILL_INS_TYPE_value = map[string]int32{
		"RES_TALENT_SKILL_INS_INVALID":          0,
		"RES_TALENT_SKILL_INS_Bloodlust":        101,
		"RES_TALENT_SKILL_INS_FailureExp":       102,
		"RES_TALENT_SKILL_INS_MysteriousEnergy": 103,
		"RES_TALENT_SKILL_INS_ExcellentTalents": 104,
		"RES_TALENT_SKILL_INS_Resell":           105,
		"RES_TALENT_SKILL_INS_Thundercracker":   106,
		"RES_TALENT_SKILL_INS_BloodyShadow":     107,
		"RES_TALENT_SKILL_INS_WerewolfBlood":    108,
		"RES_TALENT_SKILL_INS_WinterArrived":    109,
		"RES_TALENT_SKILL_INS_ManIsNature":      110,
	}
)

func (x RES_TALENT_SKILL_INS_TYPE) Enum() *RES_TALENT_SKILL_INS_TYPE {
	p := new(RES_TALENT_SKILL_INS_TYPE)
	*p = x
	return p
}

func (x RES_TALENT_SKILL_INS_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_TALENT_SKILL_INS_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[131].Descriptor()
}

func (RES_TALENT_SKILL_INS_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[131]
}

func (x RES_TALENT_SKILL_INS_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_TALENT_SKILL_INS_TYPE.Descriptor instead.
func (RES_TALENT_SKILL_INS_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{131}
}

type RES_TALENT_WEIGHT_CHECK_TYPE int32

const (
	RES_TALENT_WEIGHT_CHECK_TYPE_RES_TALENT_WEIGHT_CHECK_INVALID  RES_TALENT_WEIGHT_CHECK_TYPE = 0
	RES_TALENT_WEIGHT_CHECK_TYPE_RES_TALENT_WEIGHT_CHECK_HERO     RES_TALENT_WEIGHT_CHECK_TYPE = 1
	RES_TALENT_WEIGHT_CHECK_TYPE_RES_TALENT_WEIGHT_CHECK_UNLOCK   RES_TALENT_WEIGHT_CHECK_TYPE = 2
	RES_TALENT_WEIGHT_CHECK_TYPE_RES_TALENT_WEIGHT_CHECK_RELATIVE RES_TALENT_WEIGHT_CHECK_TYPE = 3
)

// Enum value maps for RES_TALENT_WEIGHT_CHECK_TYPE.
var (
	RES_TALENT_WEIGHT_CHECK_TYPE_name = map[int32]string{
		0: "RES_TALENT_WEIGHT_CHECK_INVALID",
		1: "RES_TALENT_WEIGHT_CHECK_HERO",
		2: "RES_TALENT_WEIGHT_CHECK_UNLOCK",
		3: "RES_TALENT_WEIGHT_CHECK_RELATIVE",
	}
	RES_TALENT_WEIGHT_CHECK_TYPE_value = map[string]int32{
		"RES_TALENT_WEIGHT_CHECK_INVALID":  0,
		"RES_TALENT_WEIGHT_CHECK_HERO":     1,
		"RES_TALENT_WEIGHT_CHECK_UNLOCK":   2,
		"RES_TALENT_WEIGHT_CHECK_RELATIVE": 3,
	}
)

func (x RES_TALENT_WEIGHT_CHECK_TYPE) Enum() *RES_TALENT_WEIGHT_CHECK_TYPE {
	p := new(RES_TALENT_WEIGHT_CHECK_TYPE)
	*p = x
	return p
}

func (x RES_TALENT_WEIGHT_CHECK_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_TALENT_WEIGHT_CHECK_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[132].Descriptor()
}

func (RES_TALENT_WEIGHT_CHECK_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[132]
}

func (x RES_TALENT_WEIGHT_CHECK_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_TALENT_WEIGHT_CHECK_TYPE.Descriptor instead.
func (RES_TALENT_WEIGHT_CHECK_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{132}
}

type RES_TALENT_UNLOCK_TYPE int32

const (
	RES_TALENT_UNLOCK_TYPE_RES_TALENT_UNLOCK_INVALID       RES_TALENT_UNLOCK_TYPE = 0
	RES_TALENT_UNLOCK_TYPE_RES_TALENT_UNLOCK_HERO_TYPE     RES_TALENT_UNLOCK_TYPE = 1
	RES_TALENT_UNLOCK_TYPE_RES_TALENT_UNLOCK_RELATIVE_TYPE RES_TALENT_UNLOCK_TYPE = 2
)

// Enum value maps for RES_TALENT_UNLOCK_TYPE.
var (
	RES_TALENT_UNLOCK_TYPE_name = map[int32]string{
		0: "RES_TALENT_UNLOCK_INVALID",
		1: "RES_TALENT_UNLOCK_HERO_TYPE",
		2: "RES_TALENT_UNLOCK_RELATIVE_TYPE",
	}
	RES_TALENT_UNLOCK_TYPE_value = map[string]int32{
		"RES_TALENT_UNLOCK_INVALID":       0,
		"RES_TALENT_UNLOCK_HERO_TYPE":     1,
		"RES_TALENT_UNLOCK_RELATIVE_TYPE": 2,
	}
)

func (x RES_TALENT_UNLOCK_TYPE) Enum() *RES_TALENT_UNLOCK_TYPE {
	p := new(RES_TALENT_UNLOCK_TYPE)
	*p = x
	return p
}

func (x RES_TALENT_UNLOCK_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_TALENT_UNLOCK_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[133].Descriptor()
}

func (RES_TALENT_UNLOCK_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[133]
}

func (x RES_TALENT_UNLOCK_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_TALENT_UNLOCK_TYPE.Descriptor instead.
func (RES_TALENT_UNLOCK_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{133}
}

type RES_TALENT_ADDBUFF_TYPE int32

const (
	RES_TALENT_ADDBUFF_TYPE_RES_TALENT_ADDBUFF_INVALID                 RES_TALENT_ADDBUFF_TYPE = 0
	RES_TALENT_ADDBUFF_TYPE_RES_TALENT_ADDBUFF_MY_ALLHEROS_TYPE        RES_TALENT_ADDBUFF_TYPE = 1
	RES_TALENT_ADDBUFF_TYPE_RES_TALENT_ADDBUFF_ENEMY_ALLHEROS_TYPE     RES_TALENT_ADDBUFF_TYPE = 2
	RES_TALENT_ADDBUFF_TYPE_RES_TALENT_ADDBUFF_MY_PARTHERO_TYPE        RES_TALENT_ADDBUFF_TYPE = 3
	RES_TALENT_ADDBUFF_TYPE_RES_TALENT_ADDBUFF_ENEMY_PARTHERO_TYPE     RES_TALENT_ADDBUFF_TYPE = 4
	RES_TALENT_ADDBUFF_TYPE_RES_TALENT_ADDBUFF_MY_PARTRELATIVE_TYPE    RES_TALENT_ADDBUFF_TYPE = 5
	RES_TALENT_ADDBUFF_TYPE_RES_TALENT_ADDBUFF_ENEMY_PARTRELATIVE_TYPE RES_TALENT_ADDBUFF_TYPE = 6
	RES_TALENT_ADDBUFF_TYPE_RES_TALENT_ADDBUFF_ALL_ALLHEROS_TYPE       RES_TALENT_ADDBUFF_TYPE = 7
)

// Enum value maps for RES_TALENT_ADDBUFF_TYPE.
var (
	RES_TALENT_ADDBUFF_TYPE_name = map[int32]string{
		0: "RES_TALENT_ADDBUFF_INVALID",
		1: "RES_TALENT_ADDBUFF_MY_ALLHEROS_TYPE",
		2: "RES_TALENT_ADDBUFF_ENEMY_ALLHEROS_TYPE",
		3: "RES_TALENT_ADDBUFF_MY_PARTHERO_TYPE",
		4: "RES_TALENT_ADDBUFF_ENEMY_PARTHERO_TYPE",
		5: "RES_TALENT_ADDBUFF_MY_PARTRELATIVE_TYPE",
		6: "RES_TALENT_ADDBUFF_ENEMY_PARTRELATIVE_TYPE",
		7: "RES_TALENT_ADDBUFF_ALL_ALLHEROS_TYPE",
	}
	RES_TALENT_ADDBUFF_TYPE_value = map[string]int32{
		"RES_TALENT_ADDBUFF_INVALID":                 0,
		"RES_TALENT_ADDBUFF_MY_ALLHEROS_TYPE":        1,
		"RES_TALENT_ADDBUFF_ENEMY_ALLHEROS_TYPE":     2,
		"RES_TALENT_ADDBUFF_MY_PARTHERO_TYPE":        3,
		"RES_TALENT_ADDBUFF_ENEMY_PARTHERO_TYPE":     4,
		"RES_TALENT_ADDBUFF_MY_PARTRELATIVE_TYPE":    5,
		"RES_TALENT_ADDBUFF_ENEMY_PARTRELATIVE_TYPE": 6,
		"RES_TALENT_ADDBUFF_ALL_ALLHEROS_TYPE":       7,
	}
)

func (x RES_TALENT_ADDBUFF_TYPE) Enum() *RES_TALENT_ADDBUFF_TYPE {
	p := new(RES_TALENT_ADDBUFF_TYPE)
	*p = x
	return p
}

func (x RES_TALENT_ADDBUFF_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_TALENT_ADDBUFF_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[134].Descriptor()
}

func (RES_TALENT_ADDBUFF_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[134]
}

func (x RES_TALENT_ADDBUFF_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_TALENT_ADDBUFF_TYPE.Descriptor instead.
func (RES_TALENT_ADDBUFF_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{134}
}

type PlayerTalentAIType int32

const (
	PlayerTalentAIType_PlayerTalentAIType_Common               PlayerTalentAIType = 0 // 通用天赋，不用处理
	PlayerTalentAIType_PlayerTalentAIType_DropHeros            PlayerTalentAIType = 1 // 参数1 羁绊ID
	PlayerTalentAIType_PlayerTalentAIType_DropToken            PlayerTalentAIType = 2 // 参数1 令牌ID
	PlayerTalentAIType_PlayerTalentAIType_DropQualityHeros     PlayerTalentAIType = 3 // 参数1 费用
	PlayerTalentAIType_PlayerTalentAIType_ImmediateRecoverHP   PlayerTalentAIType = 4 // 参数1 回血量
	PlayerTalentAIType_PlayerTalentAIType_PhysicsDamage        PlayerTalentAIType = 5
	PlayerTalentAIType_PlayerTalentAIType_MagicDamage          PlayerTalentAIType = 6
	PlayerTalentAIType_PlayerTalentAIType_BuffQualityHeros     PlayerTalentAIType = 7 // 参数1，起始费用；参数2，终止费用
	PlayerTalentAIType_PlayerTalentAIType_EnSureCHeroInQuality PlayerTalentAIType = 8 // 参数1，起始费用；参数2，终止费用
)

// Enum value maps for PlayerTalentAIType.
var (
	PlayerTalentAIType_name = map[int32]string{
		0: "PlayerTalentAIType_Common",
		1: "PlayerTalentAIType_DropHeros",
		2: "PlayerTalentAIType_DropToken",
		3: "PlayerTalentAIType_DropQualityHeros",
		4: "PlayerTalentAIType_ImmediateRecoverHP",
		5: "PlayerTalentAIType_PhysicsDamage",
		6: "PlayerTalentAIType_MagicDamage",
		7: "PlayerTalentAIType_BuffQualityHeros",
		8: "PlayerTalentAIType_EnSureCHeroInQuality",
	}
	PlayerTalentAIType_value = map[string]int32{
		"PlayerTalentAIType_Common":               0,
		"PlayerTalentAIType_DropHeros":            1,
		"PlayerTalentAIType_DropToken":            2,
		"PlayerTalentAIType_DropQualityHeros":     3,
		"PlayerTalentAIType_ImmediateRecoverHP":   4,
		"PlayerTalentAIType_PhysicsDamage":        5,
		"PlayerTalentAIType_MagicDamage":          6,
		"PlayerTalentAIType_BuffQualityHeros":     7,
		"PlayerTalentAIType_EnSureCHeroInQuality": 8,
	}
)

func (x PlayerTalentAIType) Enum() *PlayerTalentAIType {
	p := new(PlayerTalentAIType)
	*p = x
	return p
}

func (x PlayerTalentAIType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerTalentAIType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[135].Descriptor()
}

func (PlayerTalentAIType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[135]
}

func (x PlayerTalentAIType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerTalentAIType.Descriptor instead.
func (PlayerTalentAIType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{135}
}

type RES_TALENT_FUNC_TYPE int32

const (
	RES_TALENT_FUNC_TYPE_RES_TALENT_FUNC_TYPE_NULL     RES_TALENT_FUNC_TYPE = 0
	RES_TALENT_FUNC_TYPE_RES_TALENT_FUNC_TYPE_DAMAGE   RES_TALENT_FUNC_TYPE = 1
	RES_TALENT_FUNC_TYPE_RES_TALENT_FUNC_TYPE_DEFENCE  RES_TALENT_FUNC_TYPE = 2
	RES_TALENT_FUNC_TYPE_RES_TALENT_FUNC_TYPE_ENERGY   RES_TALENT_FUNC_TYPE = 3
	RES_TALENT_FUNC_TYPE_RES_TALENT_FUNC_TYPE_FIGHT    RES_TALENT_FUNC_TYPE = 4
	RES_TALENT_FUNC_TYPE_RES_TALENT_FUNC_TYPE_RESOURCE RES_TALENT_FUNC_TYPE = 5
	RES_TALENT_FUNC_TYPE_RES_TALENT_FUNC_TYPE_MANAGE   RES_TALENT_FUNC_TYPE = 6
)

// Enum value maps for RES_TALENT_FUNC_TYPE.
var (
	RES_TALENT_FUNC_TYPE_name = map[int32]string{
		0: "RES_TALENT_FUNC_TYPE_NULL",
		1: "RES_TALENT_FUNC_TYPE_DAMAGE",
		2: "RES_TALENT_FUNC_TYPE_DEFENCE",
		3: "RES_TALENT_FUNC_TYPE_ENERGY",
		4: "RES_TALENT_FUNC_TYPE_FIGHT",
		5: "RES_TALENT_FUNC_TYPE_RESOURCE",
		6: "RES_TALENT_FUNC_TYPE_MANAGE",
	}
	RES_TALENT_FUNC_TYPE_value = map[string]int32{
		"RES_TALENT_FUNC_TYPE_NULL":     0,
		"RES_TALENT_FUNC_TYPE_DAMAGE":   1,
		"RES_TALENT_FUNC_TYPE_DEFENCE":  2,
		"RES_TALENT_FUNC_TYPE_ENERGY":   3,
		"RES_TALENT_FUNC_TYPE_FIGHT":    4,
		"RES_TALENT_FUNC_TYPE_RESOURCE": 5,
		"RES_TALENT_FUNC_TYPE_MANAGE":   6,
	}
)

func (x RES_TALENT_FUNC_TYPE) Enum() *RES_TALENT_FUNC_TYPE {
	p := new(RES_TALENT_FUNC_TYPE)
	*p = x
	return p
}

func (x RES_TALENT_FUNC_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_TALENT_FUNC_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[136].Descriptor()
}

func (RES_TALENT_FUNC_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[136]
}

func (x RES_TALENT_FUNC_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_TALENT_FUNC_TYPE.Descriptor instead.
func (RES_TALENT_FUNC_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{136}
}

//技能指示器类型
type TalentSkilIndicateType int32

const (
	TalentSkilIndicateType_TalentSkilIndicateType_Rectangle TalentSkilIndicateType = 0
)

// Enum value maps for TalentSkilIndicateType.
var (
	TalentSkilIndicateType_name = map[int32]string{
		0: "TalentSkilIndicateType_Rectangle",
	}
	TalentSkilIndicateType_value = map[string]int32{
		"TalentSkilIndicateType_Rectangle": 0,
	}
)

func (x TalentSkilIndicateType) Enum() *TalentSkilIndicateType {
	p := new(TalentSkilIndicateType)
	*p = x
	return p
}

func (x TalentSkilIndicateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TalentSkilIndicateType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[137].Descriptor()
}

func (TalentSkilIndicateType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[137]
}

func (x TalentSkilIndicateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TalentSkilIndicateType.Descriptor instead.
func (TalentSkilIndicateType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{137}
}

type PlayerTalentTriggerSkillDirection int32

const (
	PlayerTalentTriggerSkillDirection_PlayerTalentTriggerSkillDirection_None     PlayerTalentTriggerSkillDirection = 0
	PlayerTalentTriggerSkillDirection_PlayerTalentTriggerSkillDirection_Forward  PlayerTalentTriggerSkillDirection = 1
	PlayerTalentTriggerSkillDirection_PlayerTalentTriggerSkillDirection_Opposite PlayerTalentTriggerSkillDirection = 2
)

// Enum value maps for PlayerTalentTriggerSkillDirection.
var (
	PlayerTalentTriggerSkillDirection_name = map[int32]string{
		0: "PlayerTalentTriggerSkillDirection_None",
		1: "PlayerTalentTriggerSkillDirection_Forward",
		2: "PlayerTalentTriggerSkillDirection_Opposite",
	}
	PlayerTalentTriggerSkillDirection_value = map[string]int32{
		"PlayerTalentTriggerSkillDirection_None":     0,
		"PlayerTalentTriggerSkillDirection_Forward":  1,
		"PlayerTalentTriggerSkillDirection_Opposite": 2,
	}
)

func (x PlayerTalentTriggerSkillDirection) Enum() *PlayerTalentTriggerSkillDirection {
	p := new(PlayerTalentTriggerSkillDirection)
	*p = x
	return p
}

func (x PlayerTalentTriggerSkillDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerTalentTriggerSkillDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[138].Descriptor()
}

func (PlayerTalentTriggerSkillDirection) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[138]
}

func (x PlayerTalentTriggerSkillDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerTalentTriggerSkillDirection.Descriptor instead.
func (PlayerTalentTriggerSkillDirection) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{138}
}

type RES_FORMATION_ATTACK_RANGE_TYPE int32

const (
	RES_FORMATION_ATTACK_RANGE_TYPE_RES_FORMATION_ATTACK_RANGE_TYPE_NULL           RES_FORMATION_ATTACK_RANGE_TYPE = 0
	RES_FORMATION_ATTACK_RANGE_TYPE_RES_FORMATION_ATTACK_RANGE_TYPE_FRONT_BACK_ROW RES_FORMATION_ATTACK_RANGE_TYPE = 1
)

// Enum value maps for RES_FORMATION_ATTACK_RANGE_TYPE.
var (
	RES_FORMATION_ATTACK_RANGE_TYPE_name = map[int32]string{
		0: "RES_FORMATION_ATTACK_RANGE_TYPE_NULL",
		1: "RES_FORMATION_ATTACK_RANGE_TYPE_FRONT_BACK_ROW",
	}
	RES_FORMATION_ATTACK_RANGE_TYPE_value = map[string]int32{
		"RES_FORMATION_ATTACK_RANGE_TYPE_NULL":           0,
		"RES_FORMATION_ATTACK_RANGE_TYPE_FRONT_BACK_ROW": 1,
	}
)

func (x RES_FORMATION_ATTACK_RANGE_TYPE) Enum() *RES_FORMATION_ATTACK_RANGE_TYPE {
	p := new(RES_FORMATION_ATTACK_RANGE_TYPE)
	*p = x
	return p
}

func (x RES_FORMATION_ATTACK_RANGE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_FORMATION_ATTACK_RANGE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[139].Descriptor()
}

func (RES_FORMATION_ATTACK_RANGE_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[139]
}

func (x RES_FORMATION_ATTACK_RANGE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_FORMATION_ATTACK_RANGE_TYPE.Descriptor instead.
func (RES_FORMATION_ATTACK_RANGE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{139}
}

type AIFormationType int32

const (
	AIFormationType_AIFormationType_None   AIFormationType = 0
	AIFormationType_AIFormationType_Newbie AIFormationType = 1
)

// Enum value maps for AIFormationType.
var (
	AIFormationType_name = map[int32]string{
		0: "AIFormationType_None",
		1: "AIFormationType_Newbie",
	}
	AIFormationType_value = map[string]int32{
		"AIFormationType_None":   0,
		"AIFormationType_Newbie": 1,
	}
)

func (x AIFormationType) Enum() *AIFormationType {
	p := new(AIFormationType)
	*p = x
	return p
}

func (x AIFormationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AIFormationType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[140].Descriptor()
}

func (AIFormationType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[140]
}

func (x AIFormationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AIFormationType.Descriptor instead.
func (AIFormationType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{140}
}

type EQUIP_TYPE int32

const (
	EQUIP_TYPE_EQUIP_TYPE_NONE         EQUIP_TYPE = 0
	EQUIP_TYPE_EQUIP_TYPE_PHY          EQUIP_TYPE = 1
	EQUIP_TYPE_EQUIP_TYPE_MGC          EQUIP_TYPE = 2
	EQUIP_TYPE_EQUIP_TYPE_COM          EQUIP_TYPE = 3
	EQUIP_TYPE_EQUIP_TYPE_UNLOAD_EQUIP EQUIP_TYPE = 4
	EQUIP_TYPE_EQUIP_TYPE_TOKEN        EQUIP_TYPE = 5
	EQUIP_TYPE_EQUIP_TYPE_UPGRADE_CORE EQUIP_TYPE = 6
	EQUIP_TYPE_EQUIP_TYPE_DEFENSE      EQUIP_TYPE = 7
)

// Enum value maps for EQUIP_TYPE.
var (
	EQUIP_TYPE_name = map[int32]string{
		0: "EQUIP_TYPE_NONE",
		1: "EQUIP_TYPE_PHY",
		2: "EQUIP_TYPE_MGC",
		3: "EQUIP_TYPE_COM",
		4: "EQUIP_TYPE_UNLOAD_EQUIP",
		5: "EQUIP_TYPE_TOKEN",
		6: "EQUIP_TYPE_UPGRADE_CORE",
		7: "EQUIP_TYPE_DEFENSE",
	}
	EQUIP_TYPE_value = map[string]int32{
		"EQUIP_TYPE_NONE":         0,
		"EQUIP_TYPE_PHY":          1,
		"EQUIP_TYPE_MGC":          2,
		"EQUIP_TYPE_COM":          3,
		"EQUIP_TYPE_UNLOAD_EQUIP": 4,
		"EQUIP_TYPE_TOKEN":        5,
		"EQUIP_TYPE_UPGRADE_CORE": 6,
		"EQUIP_TYPE_DEFENSE":      7,
	}
)

func (x EQUIP_TYPE) Enum() *EQUIP_TYPE {
	p := new(EQUIP_TYPE)
	*p = x
	return p
}

func (x EQUIP_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EQUIP_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[141].Descriptor()
}

func (EQUIP_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[141]
}

func (x EQUIP_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EQUIP_TYPE.Descriptor instead.
func (EQUIP_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{141}
}

type EQUIP_USE_TYPE int32

const (
	EQUIP_USE_TYPE_EQUIP_USE_TYPE_NONE      EQUIP_USE_TYPE = 0
	EQUIP_USE_TYPE_EQUIP_USE_TYPE_PRE_EQUIP EQUIP_USE_TYPE = 1
	EQUIP_USE_TYPE_EQUIP_USE_TYPE_FINAL     EQUIP_USE_TYPE = 2
	EQUIP_USE_TYPE_EQUIP_USE_TYPE_SPECIAL   EQUIP_USE_TYPE = 3
)

// Enum value maps for EQUIP_USE_TYPE.
var (
	EQUIP_USE_TYPE_name = map[int32]string{
		0: "EQUIP_USE_TYPE_NONE",
		1: "EQUIP_USE_TYPE_PRE_EQUIP",
		2: "EQUIP_USE_TYPE_FINAL",
		3: "EQUIP_USE_TYPE_SPECIAL",
	}
	EQUIP_USE_TYPE_value = map[string]int32{
		"EQUIP_USE_TYPE_NONE":      0,
		"EQUIP_USE_TYPE_PRE_EQUIP": 1,
		"EQUIP_USE_TYPE_FINAL":     2,
		"EQUIP_USE_TYPE_SPECIAL":   3,
	}
)

func (x EQUIP_USE_TYPE) Enum() *EQUIP_USE_TYPE {
	p := new(EQUIP_USE_TYPE)
	*p = x
	return p
}

func (x EQUIP_USE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EQUIP_USE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[142].Descriptor()
}

func (EQUIP_USE_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[142]
}

func (x EQUIP_USE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EQUIP_USE_TYPE.Descriptor instead.
func (EQUIP_USE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{142}
}

type AINormalConstKey int32

const (
	AINormalConstKey_AINormalConstKey_None                            AINormalConstKey = 0
	AINormalConstKey_AINormalConstKey_BossAwardTimeStart              AINormalConstKey = 1
	AINormalConstKey_AINormalConstKey_BossAwardTimeEnd                AINormalConstKey = 2
	AINormalConstKey_AINormalConstKey_ChooseHpTalentValue             AINormalConstKey = 3
	AINormalConstKey_AINormalConstKey_JudgePhyOrMagicLowestPopulation AINormalConstKey = 4
	AINormalConstKey_AINormalConstKey_LeftAndRightEquipID1            AINormalConstKey = 5
	AINormalConstKey_AINormalConstKey_LeftAndRightEquipID2            AINormalConstKey = 6
	AINormalConstKey_AINormalConstKey_NaoNaoCamp1                     AINormalConstKey = 7
	AINormalConstKey_AINormalConstKey_NaoNaoCamp2                     AINormalConstKey = 8
	AINormalConstKey_AINormalConstKey_NaoNaoCamp3                     AINormalConstKey = 9
	AINormalConstKey_AINormalConstKey_QiaoJieJieTeleportTwoEnhanceID  AINormalConstKey = 10
	AINormalConstKey_AINormalConstKey_BaiGeUseTwoEnhanceID            AINormalConstKey = 11
	AINormalConstKey_AINormalConstKey_BaiGePermanentRemoveEnhanceID   AINormalConstKey = 12
	AINormalConstKey_AINormalConstKey_BaiGeRemoveSameQualityEnhanceID AINormalConstKey = 13
	AINormalConstKey_AINormalConstKey_MinShiYinWinSkillID             AINormalConstKey = 14
	AINormalConstKey_AINormalConstKey_MinShiYinLoseSkillID            AINormalConstKey = 15
	AINormalConstKey_AINormalConstKey_WuFengGuangZhen1                AINormalConstKey = 16
	AINormalConstKey_AINormalConstKey_WuFengGuangZhen2                AINormalConstKey = 17
	AINormalConstKey_AINormalConstKey_TwoPosSkillEnhanceID            AINormalConstKey = 18
)

// Enum value maps for AINormalConstKey.
var (
	AINormalConstKey_name = map[int32]string{
		0:  "AINormalConstKey_None",
		1:  "AINormalConstKey_BossAwardTimeStart",
		2:  "AINormalConstKey_BossAwardTimeEnd",
		3:  "AINormalConstKey_ChooseHpTalentValue",
		4:  "AINormalConstKey_JudgePhyOrMagicLowestPopulation",
		5:  "AINormalConstKey_LeftAndRightEquipID1",
		6:  "AINormalConstKey_LeftAndRightEquipID2",
		7:  "AINormalConstKey_NaoNaoCamp1",
		8:  "AINormalConstKey_NaoNaoCamp2",
		9:  "AINormalConstKey_NaoNaoCamp3",
		10: "AINormalConstKey_QiaoJieJieTeleportTwoEnhanceID",
		11: "AINormalConstKey_BaiGeUseTwoEnhanceID",
		12: "AINormalConstKey_BaiGePermanentRemoveEnhanceID",
		13: "AINormalConstKey_BaiGeRemoveSameQualityEnhanceID",
		14: "AINormalConstKey_MinShiYinWinSkillID",
		15: "AINormalConstKey_MinShiYinLoseSkillID",
		16: "AINormalConstKey_WuFengGuangZhen1",
		17: "AINormalConstKey_WuFengGuangZhen2",
		18: "AINormalConstKey_TwoPosSkillEnhanceID",
	}
	AINormalConstKey_value = map[string]int32{
		"AINormalConstKey_None":                            0,
		"AINormalConstKey_BossAwardTimeStart":              1,
		"AINormalConstKey_BossAwardTimeEnd":                2,
		"AINormalConstKey_ChooseHpTalentValue":             3,
		"AINormalConstKey_JudgePhyOrMagicLowestPopulation": 4,
		"AINormalConstKey_LeftAndRightEquipID1":            5,
		"AINormalConstKey_LeftAndRightEquipID2":            6,
		"AINormalConstKey_NaoNaoCamp1":                     7,
		"AINormalConstKey_NaoNaoCamp2":                     8,
		"AINormalConstKey_NaoNaoCamp3":                     9,
		"AINormalConstKey_QiaoJieJieTeleportTwoEnhanceID":  10,
		"AINormalConstKey_BaiGeUseTwoEnhanceID":            11,
		"AINormalConstKey_BaiGePermanentRemoveEnhanceID":   12,
		"AINormalConstKey_BaiGeRemoveSameQualityEnhanceID": 13,
		"AINormalConstKey_MinShiYinWinSkillID":             14,
		"AINormalConstKey_MinShiYinLoseSkillID":            15,
		"AINormalConstKey_WuFengGuangZhen1":                16,
		"AINormalConstKey_WuFengGuangZhen2":                17,
		"AINormalConstKey_TwoPosSkillEnhanceID":            18,
	}
)

func (x AINormalConstKey) Enum() *AINormalConstKey {
	p := new(AINormalConstKey)
	*p = x
	return p
}

func (x AINormalConstKey) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AINormalConstKey) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[143].Descriptor()
}

func (AINormalConstKey) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[143]
}

func (x AINormalConstKey) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AINormalConstKey.Descriptor instead.
func (AINormalConstKey) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{143}
}

type RES_SETTINGS_GROUP_TYPE int32

const (
	RES_SETTINGS_GROUP_TYPE_RES_SETTINGS_GROUP_TYPE_NULL     RES_SETTINGS_GROUP_TYPE = 0 //预留字段
	RES_SETTINGS_GROUP_TYPE_RES_SETTINGS_GROUP_TYPE_BASIC    RES_SETTINGS_GROUP_TYPE = 1
	RES_SETTINGS_GROUP_TYPE_RES_SETTINGS_GROUP_TYPE_SOUND    RES_SETTINGS_GROUP_TYPE = 2
	RES_SETTINGS_GROUP_TYPE_RES_SETTINGS_GROUP_TYPE_PRIVACY  RES_SETTINGS_GROUP_TYPE = 3
	RES_SETTINGS_GROUP_TYPE_RES_SETTINGS_GROUP_TYPE_GAMEPLAY RES_SETTINGS_GROUP_TYPE = 4
	RES_SETTINGS_GROUP_TYPE_RES_SETTINGS_GROUP_TYPE_HELP     RES_SETTINGS_GROUP_TYPE = 5
	RES_SETTINGS_GROUP_TYPE_RES_SETTINGS_GROUP_TYPE_DOWNLOAD RES_SETTINGS_GROUP_TYPE = 6
)

// Enum value maps for RES_SETTINGS_GROUP_TYPE.
var (
	RES_SETTINGS_GROUP_TYPE_name = map[int32]string{
		0: "RES_SETTINGS_GROUP_TYPE_NULL",
		1: "RES_SETTINGS_GROUP_TYPE_BASIC",
		2: "RES_SETTINGS_GROUP_TYPE_SOUND",
		3: "RES_SETTINGS_GROUP_TYPE_PRIVACY",
		4: "RES_SETTINGS_GROUP_TYPE_GAMEPLAY",
		5: "RES_SETTINGS_GROUP_TYPE_HELP",
		6: "RES_SETTINGS_GROUP_TYPE_DOWNLOAD",
	}
	RES_SETTINGS_GROUP_TYPE_value = map[string]int32{
		"RES_SETTINGS_GROUP_TYPE_NULL":     0,
		"RES_SETTINGS_GROUP_TYPE_BASIC":    1,
		"RES_SETTINGS_GROUP_TYPE_SOUND":    2,
		"RES_SETTINGS_GROUP_TYPE_PRIVACY":  3,
		"RES_SETTINGS_GROUP_TYPE_GAMEPLAY": 4,
		"RES_SETTINGS_GROUP_TYPE_HELP":     5,
		"RES_SETTINGS_GROUP_TYPE_DOWNLOAD": 6,
	}
)

func (x RES_SETTINGS_GROUP_TYPE) Enum() *RES_SETTINGS_GROUP_TYPE {
	p := new(RES_SETTINGS_GROUP_TYPE)
	*p = x
	return p
}

func (x RES_SETTINGS_GROUP_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_SETTINGS_GROUP_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[144].Descriptor()
}

func (RES_SETTINGS_GROUP_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[144]
}

func (x RES_SETTINGS_GROUP_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_SETTINGS_GROUP_TYPE.Descriptor instead.
func (RES_SETTINGS_GROUP_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{144}
}

type RES_SETTINGS_HELP_TYPE int32

const (
	RES_SETTINGS_HELP_TYPE_RES_SETTINGS_HELP_TYPE_NULL      RES_SETTINGS_HELP_TYPE = 0 //预留字段
	RES_SETTINGS_HELP_TYPE_RES_SETTINGS_HELP_TYPE_LEFT_TIPS RES_SETTINGS_HELP_TYPE = 1
	RES_SETTINGS_HELP_TYPE_RES_SETTINGS_HELP_TYPE_DOWN_TIPS RES_SETTINGS_HELP_TYPE = 2
	RES_SETTINGS_HELP_TYPE_RES_SETTINGS_HELP_TYPE_PICTURE   RES_SETTINGS_HELP_TYPE = 3
)

// Enum value maps for RES_SETTINGS_HELP_TYPE.
var (
	RES_SETTINGS_HELP_TYPE_name = map[int32]string{
		0: "RES_SETTINGS_HELP_TYPE_NULL",
		1: "RES_SETTINGS_HELP_TYPE_LEFT_TIPS",
		2: "RES_SETTINGS_HELP_TYPE_DOWN_TIPS",
		3: "RES_SETTINGS_HELP_TYPE_PICTURE",
	}
	RES_SETTINGS_HELP_TYPE_value = map[string]int32{
		"RES_SETTINGS_HELP_TYPE_NULL":      0,
		"RES_SETTINGS_HELP_TYPE_LEFT_TIPS": 1,
		"RES_SETTINGS_HELP_TYPE_DOWN_TIPS": 2,
		"RES_SETTINGS_HELP_TYPE_PICTURE":   3,
	}
)

func (x RES_SETTINGS_HELP_TYPE) Enum() *RES_SETTINGS_HELP_TYPE {
	p := new(RES_SETTINGS_HELP_TYPE)
	*p = x
	return p
}

func (x RES_SETTINGS_HELP_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_SETTINGS_HELP_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[145].Descriptor()
}

func (RES_SETTINGS_HELP_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[145]
}

func (x RES_SETTINGS_HELP_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_SETTINGS_HELP_TYPE.Descriptor instead.
func (RES_SETTINGS_HELP_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{145}
}

type RES_SETTINGS_STYLE_TYPE int32

const (
	RES_SETTINGS_STYLE_TYPE_RES_SETTINGS_STYLE_TYPE_NULL          RES_SETTINGS_STYLE_TYPE = 0
	RES_SETTINGS_STYLE_TYPE_RES_SETTINGS_STYLE_TYPE_SINGLE_SELECT RES_SETTINGS_STYLE_TYPE = 1
	RES_SETTINGS_STYLE_TYPE_RES_SETTINGS_STYLE_TYPE_SWITCH        RES_SETTINGS_STYLE_TYPE = 2
	RES_SETTINGS_STYLE_TYPE_RES_SETTINGS_STYLE_TYPE_SWITCH_SLIDE  RES_SETTINGS_STYLE_TYPE = 3
	RES_SETTINGS_STYLE_TYPE_RES_SETTINGS_STYLE_TYPE_MULTI_SELECT  RES_SETTINGS_STYLE_TYPE = 4
	RES_SETTINGS_STYLE_TYPE_RES_SETTINGS_STYLE_TYPE_TEXT          RES_SETTINGS_STYLE_TYPE = 5
	RES_SETTINGS_STYLE_TYPE_RES_SETTINGS_STYLE_TYPE_CHILD_SWITCH  RES_SETTINGS_STYLE_TYPE = 6
	RES_SETTINGS_STYLE_TYPE_RES_SETTINGS_STYLE_TYPE_CHILD_SLIDE   RES_SETTINGS_STYLE_TYPE = 7
	RES_SETTINGS_STYLE_TYPE_RES_SETTINGS_STYLE_TYPE_DOUBLE_SWITCH RES_SETTINGS_STYLE_TYPE = 8
	RES_SETTINGS_STYLE_TYPE_RES_SETTINGS_STYLE_TYPE_DROPDOWNLIST  RES_SETTINGS_STYLE_TYPE = 9
)

// Enum value maps for RES_SETTINGS_STYLE_TYPE.
var (
	RES_SETTINGS_STYLE_TYPE_name = map[int32]string{
		0: "RES_SETTINGS_STYLE_TYPE_NULL",
		1: "RES_SETTINGS_STYLE_TYPE_SINGLE_SELECT",
		2: "RES_SETTINGS_STYLE_TYPE_SWITCH",
		3: "RES_SETTINGS_STYLE_TYPE_SWITCH_SLIDE",
		4: "RES_SETTINGS_STYLE_TYPE_MULTI_SELECT",
		5: "RES_SETTINGS_STYLE_TYPE_TEXT",
		6: "RES_SETTINGS_STYLE_TYPE_CHILD_SWITCH",
		7: "RES_SETTINGS_STYLE_TYPE_CHILD_SLIDE",
		8: "RES_SETTINGS_STYLE_TYPE_DOUBLE_SWITCH",
		9: "RES_SETTINGS_STYLE_TYPE_DROPDOWNLIST",
	}
	RES_SETTINGS_STYLE_TYPE_value = map[string]int32{
		"RES_SETTINGS_STYLE_TYPE_NULL":          0,
		"RES_SETTINGS_STYLE_TYPE_SINGLE_SELECT": 1,
		"RES_SETTINGS_STYLE_TYPE_SWITCH":        2,
		"RES_SETTINGS_STYLE_TYPE_SWITCH_SLIDE":  3,
		"RES_SETTINGS_STYLE_TYPE_MULTI_SELECT":  4,
		"RES_SETTINGS_STYLE_TYPE_TEXT":          5,
		"RES_SETTINGS_STYLE_TYPE_CHILD_SWITCH":  6,
		"RES_SETTINGS_STYLE_TYPE_CHILD_SLIDE":   7,
		"RES_SETTINGS_STYLE_TYPE_DOUBLE_SWITCH": 8,
		"RES_SETTINGS_STYLE_TYPE_DROPDOWNLIST":  9,
	}
)

func (x RES_SETTINGS_STYLE_TYPE) Enum() *RES_SETTINGS_STYLE_TYPE {
	p := new(RES_SETTINGS_STYLE_TYPE)
	*p = x
	return p
}

func (x RES_SETTINGS_STYLE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_SETTINGS_STYLE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[146].Descriptor()
}

func (RES_SETTINGS_STYLE_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[146]
}

func (x RES_SETTINGS_STYLE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_SETTINGS_STYLE_TYPE.Descriptor instead.
func (RES_SETTINGS_STYLE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{146}
}

type RES_SETTINGS_CS_FEATURE_TYPE int32

const (
	RES_SETTINGS_CS_FEATURE_TYPE_RES_SETTINGS_CS_FEATURE_TYPE_NULL            RES_SETTINGS_CS_FEATURE_TYPE = 0
	RES_SETTINGS_CS_FEATURE_TYPE_RES_SETTINGS_CS_FEATURE_TYPE_FRIEND_OB       RES_SETTINGS_CS_FEATURE_TYPE = 1
	RES_SETTINGS_CS_FEATURE_TYPE_RES_SETTINGS_CS_FEATURE_TYPE_HUANHUATIP_OPEN RES_SETTINGS_CS_FEATURE_TYPE = 2
	RES_SETTINGS_CS_FEATURE_TYPE_RES_SETTINGS_CS_FEATURE_TYPE_RESERVE         RES_SETTINGS_CS_FEATURE_TYPE = 100 // server防止攻击
)

// Enum value maps for RES_SETTINGS_CS_FEATURE_TYPE.
var (
	RES_SETTINGS_CS_FEATURE_TYPE_name = map[int32]string{
		0:   "RES_SETTINGS_CS_FEATURE_TYPE_NULL",
		1:   "RES_SETTINGS_CS_FEATURE_TYPE_FRIEND_OB",
		2:   "RES_SETTINGS_CS_FEATURE_TYPE_HUANHUATIP_OPEN",
		100: "RES_SETTINGS_CS_FEATURE_TYPE_RESERVE",
	}
	RES_SETTINGS_CS_FEATURE_TYPE_value = map[string]int32{
		"RES_SETTINGS_CS_FEATURE_TYPE_NULL":            0,
		"RES_SETTINGS_CS_FEATURE_TYPE_FRIEND_OB":       1,
		"RES_SETTINGS_CS_FEATURE_TYPE_HUANHUATIP_OPEN": 2,
		"RES_SETTINGS_CS_FEATURE_TYPE_RESERVE":         100,
	}
)

func (x RES_SETTINGS_CS_FEATURE_TYPE) Enum() *RES_SETTINGS_CS_FEATURE_TYPE {
	p := new(RES_SETTINGS_CS_FEATURE_TYPE)
	*p = x
	return p
}

func (x RES_SETTINGS_CS_FEATURE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_SETTINGS_CS_FEATURE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[147].Descriptor()
}

func (RES_SETTINGS_CS_FEATURE_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[147]
}

func (x RES_SETTINGS_CS_FEATURE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_SETTINGS_CS_FEATURE_TYPE.Descriptor instead.
func (RES_SETTINGS_CS_FEATURE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{147}
}

type RES_SETTINGS_FEATURE_TYPE int32

const (
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_NULL                    RES_SETTINGS_FEATURE_TYPE = 0
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_DEVICE_STATUS           RES_SETTINGS_FEATURE_TYPE = 1
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_GRAPHICS_QUALITY        RES_SETTINGS_FEATURE_TYPE = 2
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_SCREEN_RESOLUTION       RES_SETTINGS_FEATURE_TYPE = 3
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_FRAME_RATE              RES_SETTINGS_FEATURE_TYPE = 4
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_SOUND                   RES_SETTINGS_FEATURE_TYPE = 5
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_TEMP_BATTLE_ZONE        RES_SETTINGS_FEATURE_TYPE = 6
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_DROP_DOWN               RES_SETTINGS_FEATURE_TYPE = 7
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_MUSIC                   RES_SETTINGS_FEATURE_TYPE = 8
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_SFX                     RES_SETTINGS_FEATURE_TYPE = 9
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_VOICE                   RES_SETTINGS_FEATURE_TYPE = 10
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_LORFPOWERSHOWTYPE       RES_SETTINGS_FEATURE_TYPE = 11
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_VIBRATION               RES_SETTINGS_FEATURE_TYPE = 12
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_MATCHCONFIRM            RES_SETTINGS_FEATURE_TYPE = 13
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_BLOOM                   RES_SETTINGS_FEATURE_TYPE = 14
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_EQUIPWEARING            RES_SETTINGS_FEATURE_TYPE = 15
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_RELATIONTIPS            RES_SETTINGS_FEATURE_TYPE = 16
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_DYNAMIC_GUIDE           RES_SETTINGS_FEATURE_TYPE = 17
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_ROCKER                  RES_SETTINGS_FEATURE_TYPE = 18
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_ACTOR_STROKE            RES_SETTINGS_FEATURE_TYPE = 19
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_ONLINE_STATE            RES_SETTINGS_FEATURE_TYPE = 20
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_HISTORY_RECORD          RES_SETTINGS_FEATURE_TYPE = 21
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_GLORY_TITLE             RES_SETTINGS_FEATURE_TYPE = 22
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_SPECTATOR_ALLOWED       RES_SETTINGS_FEATURE_TYPE = 23
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_DAMAGESTATS_POPUP       RES_SETTINGS_FEATURE_TYPE = 24
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_PREPARE_ARRANGE         RES_SETTINGS_FEATURE_TYPE = 25
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_SELLCONFIRM             RES_SETTINGS_FEATURE_TYPE = 26
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_VIGNETTE                RES_SETTINGS_FEATURE_TYPE = 27
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_ELIMINATE_ENEMY         RES_SETTINGS_FEATURE_TYPE = 28
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_PERMISSION              RES_SETTINGS_FEATURE_TYPE = 29
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_PERMISSION_MICRO        RES_SETTINGS_FEATURE_TYPE = 30
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_PERMISSION_SFX          RES_SETTINGS_FEATURE_TYPE = 31
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_PERMISSION_LOCATION     RES_SETTINGS_FEATURE_TYPE = 32
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_PERMISSION_WIFI         RES_SETTINGS_FEATURE_TYPE = 33
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_PERMISSION_MOBILE_NET   RES_SETTINGS_FEATURE_TYPE = 34
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_PERMISSION_PHOTO        RES_SETTINGS_FEATURE_TYPE = 35
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_CHARACTER_RENDER        RES_SETTINGS_FEATURE_TYPE = 36
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_EFFECT                  RES_SETTINGS_FEATURE_TYPE = 37
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_MIRROR_REFLECTION       RES_SETTINGS_FEATURE_TYPE = 38
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_REALTIME_SHADOWS        RES_SETTINGS_FEATURE_TYPE = 39
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_ANTIALIASING            RES_SETTINGS_FEATURE_TYPE = 40
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_DEPTH_OF_FIELD          RES_SETTINGS_FEATURE_TYPE = 41
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_Battle_Rule_Tips        RES_SETTINGS_FEATURE_TYPE = 42
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_NotJoin_Lobby_Rank_Show RES_SETTINGS_FEATURE_TYPE = 43
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_Close_Lobby_Rank_Show   RES_SETTINGS_FEATURE_TYPE = 44
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_SHOW_ACHIEVE            RES_SETTINGS_FEATURE_TYPE = 45
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_SCENE                   RES_SETTINGS_FEATURE_TYPE = 46
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_HERO_EQUIP              RES_SETTINGS_FEATURE_TYPE = 47
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_MNZ_AUTO_EQUIP          RES_SETTINGS_FEATURE_TYPE = 48
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_LANGUAGE                RES_SETTINGS_FEATURE_TYPE = 49
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_Show_SelfInfo_InRank    RES_SETTINGS_FEATURE_TYPE = 50
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_AUCTION_DIVIDEND_TIPS   RES_SETTINGS_FEATURE_TYPE = 51
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_AUTO_DOWNLOAD_VIA_WIFI  RES_SETTINGS_FEATURE_TYPE = 52
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_EQUIP_TO_RECOMMEND_HERO RES_SETTINGS_FEATURE_TYPE = 53
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_EQUIP_ALL_TO_WEAR       RES_SETTINGS_FEATURE_TYPE = 54
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_SKIP_AMIMATION          RES_SETTINGS_FEATURE_TYPE = 55
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_AUTO_EQUIP              RES_SETTINGS_FEATURE_TYPE = 56
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_COUNT                   RES_SETTINGS_FEATURE_TYPE = 57  // 定义一定要放在这个前面！！！
	RES_SETTINGS_FEATURE_TYPE_RES_SETTINGS_FEATURE_TYPE_RESERVE_LEN             RES_SETTINGS_FEATURE_TYPE = 100 // server防止攻击                                     // server防止攻击
)

// Enum value maps for RES_SETTINGS_FEATURE_TYPE.
var (
	RES_SETTINGS_FEATURE_TYPE_name = map[int32]string{
		0:   "RES_SETTINGS_FEATURE_TYPE_NULL",
		1:   "RES_SETTINGS_FEATURE_TYPE_DEVICE_STATUS",
		2:   "RES_SETTINGS_FEATURE_TYPE_GRAPHICS_QUALITY",
		3:   "RES_SETTINGS_FEATURE_TYPE_SCREEN_RESOLUTION",
		4:   "RES_SETTINGS_FEATURE_TYPE_FRAME_RATE",
		5:   "RES_SETTINGS_FEATURE_TYPE_SOUND",
		6:   "RES_SETTINGS_FEATURE_TYPE_TEMP_BATTLE_ZONE",
		7:   "RES_SETTINGS_FEATURE_TYPE_DROP_DOWN",
		8:   "RES_SETTINGS_FEATURE_TYPE_MUSIC",
		9:   "RES_SETTINGS_FEATURE_TYPE_SFX",
		10:  "RES_SETTINGS_FEATURE_TYPE_VOICE",
		11:  "RES_SETTINGS_FEATURE_TYPE_LORFPOWERSHOWTYPE",
		12:  "RES_SETTINGS_FEATURE_TYPE_VIBRATION",
		13:  "RES_SETTINGS_FEATURE_TYPE_MATCHCONFIRM",
		14:  "RES_SETTINGS_FEATURE_TYPE_BLOOM",
		15:  "RES_SETTINGS_FEATURE_TYPE_EQUIPWEARING",
		16:  "RES_SETTINGS_FEATURE_TYPE_RELATIONTIPS",
		17:  "RES_SETTINGS_FEATURE_TYPE_DYNAMIC_GUIDE",
		18:  "RES_SETTINGS_FEATURE_TYPE_ROCKER",
		19:  "RES_SETTINGS_FEATURE_TYPE_ACTOR_STROKE",
		20:  "RES_SETTINGS_FEATURE_TYPE_ONLINE_STATE",
		21:  "RES_SETTINGS_FEATURE_TYPE_HISTORY_RECORD",
		22:  "RES_SETTINGS_FEATURE_TYPE_GLORY_TITLE",
		23:  "RES_SETTINGS_FEATURE_TYPE_SPECTATOR_ALLOWED",
		24:  "RES_SETTINGS_FEATURE_TYPE_DAMAGESTATS_POPUP",
		25:  "RES_SETTINGS_FEATURE_TYPE_PREPARE_ARRANGE",
		26:  "RES_SETTINGS_FEATURE_TYPE_SELLCONFIRM",
		27:  "RES_SETTINGS_FEATURE_TYPE_VIGNETTE",
		28:  "RES_SETTINGS_FEATURE_TYPE_ELIMINATE_ENEMY",
		29:  "RES_SETTINGS_FEATURE_TYPE_PERMISSION",
		30:  "RES_SETTINGS_FEATURE_TYPE_PERMISSION_MICRO",
		31:  "RES_SETTINGS_FEATURE_TYPE_PERMISSION_SFX",
		32:  "RES_SETTINGS_FEATURE_TYPE_PERMISSION_LOCATION",
		33:  "RES_SETTINGS_FEATURE_TYPE_PERMISSION_WIFI",
		34:  "RES_SETTINGS_FEATURE_TYPE_PERMISSION_MOBILE_NET",
		35:  "RES_SETTINGS_FEATURE_TYPE_PERMISSION_PHOTO",
		36:  "RES_SETTINGS_FEATURE_TYPE_CHARACTER_RENDER",
		37:  "RES_SETTINGS_FEATURE_TYPE_EFFECT",
		38:  "RES_SETTINGS_FEATURE_TYPE_MIRROR_REFLECTION",
		39:  "RES_SETTINGS_FEATURE_TYPE_REALTIME_SHADOWS",
		40:  "RES_SETTINGS_FEATURE_TYPE_ANTIALIASING",
		41:  "RES_SETTINGS_FEATURE_TYPE_DEPTH_OF_FIELD",
		42:  "RES_SETTINGS_FEATURE_TYPE_Battle_Rule_Tips",
		43:  "RES_SETTINGS_FEATURE_TYPE_NotJoin_Lobby_Rank_Show",
		44:  "RES_SETTINGS_FEATURE_TYPE_Close_Lobby_Rank_Show",
		45:  "RES_SETTINGS_FEATURE_TYPE_SHOW_ACHIEVE",
		46:  "RES_SETTINGS_FEATURE_TYPE_SCENE",
		47:  "RES_SETTINGS_FEATURE_TYPE_HERO_EQUIP",
		48:  "RES_SETTINGS_FEATURE_TYPE_MNZ_AUTO_EQUIP",
		49:  "RES_SETTINGS_FEATURE_TYPE_LANGUAGE",
		50:  "RES_SETTINGS_FEATURE_TYPE_Show_SelfInfo_InRank",
		51:  "RES_SETTINGS_FEATURE_TYPE_AUCTION_DIVIDEND_TIPS",
		52:  "RES_SETTINGS_FEATURE_TYPE_AUTO_DOWNLOAD_VIA_WIFI",
		53:  "RES_SETTINGS_FEATURE_TYPE_EQUIP_TO_RECOMMEND_HERO",
		54:  "RES_SETTINGS_FEATURE_TYPE_EQUIP_ALL_TO_WEAR",
		55:  "RES_SETTINGS_FEATURE_TYPE_SKIP_AMIMATION",
		56:  "RES_SETTINGS_FEATURE_TYPE_AUTO_EQUIP",
		57:  "RES_SETTINGS_FEATURE_TYPE_COUNT",
		100: "RES_SETTINGS_FEATURE_TYPE_RESERVE_LEN",
	}
	RES_SETTINGS_FEATURE_TYPE_value = map[string]int32{
		"RES_SETTINGS_FEATURE_TYPE_NULL":                    0,
		"RES_SETTINGS_FEATURE_TYPE_DEVICE_STATUS":           1,
		"RES_SETTINGS_FEATURE_TYPE_GRAPHICS_QUALITY":        2,
		"RES_SETTINGS_FEATURE_TYPE_SCREEN_RESOLUTION":       3,
		"RES_SETTINGS_FEATURE_TYPE_FRAME_RATE":              4,
		"RES_SETTINGS_FEATURE_TYPE_SOUND":                   5,
		"RES_SETTINGS_FEATURE_TYPE_TEMP_BATTLE_ZONE":        6,
		"RES_SETTINGS_FEATURE_TYPE_DROP_DOWN":               7,
		"RES_SETTINGS_FEATURE_TYPE_MUSIC":                   8,
		"RES_SETTINGS_FEATURE_TYPE_SFX":                     9,
		"RES_SETTINGS_FEATURE_TYPE_VOICE":                   10,
		"RES_SETTINGS_FEATURE_TYPE_LORFPOWERSHOWTYPE":       11,
		"RES_SETTINGS_FEATURE_TYPE_VIBRATION":               12,
		"RES_SETTINGS_FEATURE_TYPE_MATCHCONFIRM":            13,
		"RES_SETTINGS_FEATURE_TYPE_BLOOM":                   14,
		"RES_SETTINGS_FEATURE_TYPE_EQUIPWEARING":            15,
		"RES_SETTINGS_FEATURE_TYPE_RELATIONTIPS":            16,
		"RES_SETTINGS_FEATURE_TYPE_DYNAMIC_GUIDE":           17,
		"RES_SETTINGS_FEATURE_TYPE_ROCKER":                  18,
		"RES_SETTINGS_FEATURE_TYPE_ACTOR_STROKE":            19,
		"RES_SETTINGS_FEATURE_TYPE_ONLINE_STATE":            20,
		"RES_SETTINGS_FEATURE_TYPE_HISTORY_RECORD":          21,
		"RES_SETTINGS_FEATURE_TYPE_GLORY_TITLE":             22,
		"RES_SETTINGS_FEATURE_TYPE_SPECTATOR_ALLOWED":       23,
		"RES_SETTINGS_FEATURE_TYPE_DAMAGESTATS_POPUP":       24,
		"RES_SETTINGS_FEATURE_TYPE_PREPARE_ARRANGE":         25,
		"RES_SETTINGS_FEATURE_TYPE_SELLCONFIRM":             26,
		"RES_SETTINGS_FEATURE_TYPE_VIGNETTE":                27,
		"RES_SETTINGS_FEATURE_TYPE_ELIMINATE_ENEMY":         28,
		"RES_SETTINGS_FEATURE_TYPE_PERMISSION":              29,
		"RES_SETTINGS_FEATURE_TYPE_PERMISSION_MICRO":        30,
		"RES_SETTINGS_FEATURE_TYPE_PERMISSION_SFX":          31,
		"RES_SETTINGS_FEATURE_TYPE_PERMISSION_LOCATION":     32,
		"RES_SETTINGS_FEATURE_TYPE_PERMISSION_WIFI":         33,
		"RES_SETTINGS_FEATURE_TYPE_PERMISSION_MOBILE_NET":   34,
		"RES_SETTINGS_FEATURE_TYPE_PERMISSION_PHOTO":        35,
		"RES_SETTINGS_FEATURE_TYPE_CHARACTER_RENDER":        36,
		"RES_SETTINGS_FEATURE_TYPE_EFFECT":                  37,
		"RES_SETTINGS_FEATURE_TYPE_MIRROR_REFLECTION":       38,
		"RES_SETTINGS_FEATURE_TYPE_REALTIME_SHADOWS":        39,
		"RES_SETTINGS_FEATURE_TYPE_ANTIALIASING":            40,
		"RES_SETTINGS_FEATURE_TYPE_DEPTH_OF_FIELD":          41,
		"RES_SETTINGS_FEATURE_TYPE_Battle_Rule_Tips":        42,
		"RES_SETTINGS_FEATURE_TYPE_NotJoin_Lobby_Rank_Show": 43,
		"RES_SETTINGS_FEATURE_TYPE_Close_Lobby_Rank_Show":   44,
		"RES_SETTINGS_FEATURE_TYPE_SHOW_ACHIEVE":            45,
		"RES_SETTINGS_FEATURE_TYPE_SCENE":                   46,
		"RES_SETTINGS_FEATURE_TYPE_HERO_EQUIP":              47,
		"RES_SETTINGS_FEATURE_TYPE_MNZ_AUTO_EQUIP":          48,
		"RES_SETTINGS_FEATURE_TYPE_LANGUAGE":                49,
		"RES_SETTINGS_FEATURE_TYPE_Show_SelfInfo_InRank":    50,
		"RES_SETTINGS_FEATURE_TYPE_AUCTION_DIVIDEND_TIPS":   51,
		"RES_SETTINGS_FEATURE_TYPE_AUTO_DOWNLOAD_VIA_WIFI":  52,
		"RES_SETTINGS_FEATURE_TYPE_EQUIP_TO_RECOMMEND_HERO": 53,
		"RES_SETTINGS_FEATURE_TYPE_EQUIP_ALL_TO_WEAR":       54,
		"RES_SETTINGS_FEATURE_TYPE_SKIP_AMIMATION":          55,
		"RES_SETTINGS_FEATURE_TYPE_AUTO_EQUIP":              56,
		"RES_SETTINGS_FEATURE_TYPE_COUNT":                   57,
		"RES_SETTINGS_FEATURE_TYPE_RESERVE_LEN":             100,
	}
)

func (x RES_SETTINGS_FEATURE_TYPE) Enum() *RES_SETTINGS_FEATURE_TYPE {
	p := new(RES_SETTINGS_FEATURE_TYPE)
	*p = x
	return p
}

func (x RES_SETTINGS_FEATURE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_SETTINGS_FEATURE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[148].Descriptor()
}

func (RES_SETTINGS_FEATURE_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[148]
}

func (x RES_SETTINGS_FEATURE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_SETTINGS_FEATURE_TYPE.Descriptor instead.
func (RES_SETTINGS_FEATURE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{148}
}

type RES_THANKDISPLAY_DIR_TYPE int32

const (
	RES_THANKDISPLAY_DIR_TYPE_RES_THANKDISPLAY_DIR_TYPE_NULL  RES_THANKDISPLAY_DIR_TYPE = 0
	RES_THANKDISPLAY_DIR_TYPE_RES_THANKDISPLAY_DIR_TYPE_LEFT  RES_THANKDISPLAY_DIR_TYPE = 1
	RES_THANKDISPLAY_DIR_TYPE_RES_THANKDISPLAY_DIR_TYPE_RIGHT RES_THANKDISPLAY_DIR_TYPE = 2
)

// Enum value maps for RES_THANKDISPLAY_DIR_TYPE.
var (
	RES_THANKDISPLAY_DIR_TYPE_name = map[int32]string{
		0: "RES_THANKDISPLAY_DIR_TYPE_NULL",
		1: "RES_THANKDISPLAY_DIR_TYPE_LEFT",
		2: "RES_THANKDISPLAY_DIR_TYPE_RIGHT",
	}
	RES_THANKDISPLAY_DIR_TYPE_value = map[string]int32{
		"RES_THANKDISPLAY_DIR_TYPE_NULL":  0,
		"RES_THANKDISPLAY_DIR_TYPE_LEFT":  1,
		"RES_THANKDISPLAY_DIR_TYPE_RIGHT": 2,
	}
)

func (x RES_THANKDISPLAY_DIR_TYPE) Enum() *RES_THANKDISPLAY_DIR_TYPE {
	p := new(RES_THANKDISPLAY_DIR_TYPE)
	*p = x
	return p
}

func (x RES_THANKDISPLAY_DIR_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_THANKDISPLAY_DIR_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[149].Descriptor()
}

func (RES_THANKDISPLAY_DIR_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[149]
}

func (x RES_THANKDISPLAY_DIR_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_THANKDISPLAY_DIR_TYPE.Descriptor instead.
func (RES_THANKDISPLAY_DIR_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{149}
}

type RES_FREE_TYPE int32

const (
	RES_FREE_TYPE_FREE_NULL     RES_FREE_TYPE = 0
	RES_FREE_TYPE_FREE_LORD     RES_FREE_TYPE = 1
	RES_FREE_TYPE_FREE_LORDSKIN RES_FREE_TYPE = 2
	RES_FREE_TYPE_FREE_MAX      RES_FREE_TYPE = 3
)

// Enum value maps for RES_FREE_TYPE.
var (
	RES_FREE_TYPE_name = map[int32]string{
		0: "FREE_NULL",
		1: "FREE_LORD",
		2: "FREE_LORDSKIN",
		3: "FREE_MAX",
	}
	RES_FREE_TYPE_value = map[string]int32{
		"FREE_NULL":     0,
		"FREE_LORD":     1,
		"FREE_LORDSKIN": 2,
		"FREE_MAX":      3,
	}
)

func (x RES_FREE_TYPE) Enum() *RES_FREE_TYPE {
	p := new(RES_FREE_TYPE)
	*p = x
	return p
}

func (x RES_FREE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_FREE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[150].Descriptor()
}

func (RES_FREE_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[150]
}

func (x RES_FREE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_FREE_TYPE.Descriptor instead.
func (RES_FREE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{150}
}

//  ------------------------- 战队 Begin----------------------------
type RES_GUILD_CONST int32

const (
	RES_GUILD_CONST_RES_GUILD_CONST_RESERVED                      RES_GUILD_CONST = 0
	RES_GUILD_CONST_GUILD_ACTIVE_LEAVE_CD_MIN                     RES_GUILD_CONST = 1
	RES_GUILD_CONST_GUILD_AUTO_CHANGE_LEADER_OFFLINE_DAYS         RES_GUILD_CONST = 2
	RES_GUILD_CONST_GUILD_AUTO_CHANGE_LEADER_SERVE_DAYS           RES_GUILD_CONST = 3
	RES_GUILD_CONST_GUILD_AUTO_CHANGE_LEADER_MANAGER_OFFLINE_DAYS RES_GUILD_CONST = 4
	RES_GUILD_CONST_GUILD_AUTO_CHANGE_LEADER_MEMBER_OFFLINE_DAYS  RES_GUILD_CONST = 5
	RES_GUILD_CONST_GUILD_AUTO_CHANGE_LEADER_MEMBER_JOIN_DAYS     RES_GUILD_CONST = 6
	RES_GUILD_CONST_GUILD_CREATE_MONEY_COST                       RES_GUILD_CONST = 7
	RES_GUILD_CONST_GUILD_CYCLE_TOTAL_ACTIVE_VALUE_LIMIT          RES_GUILD_CONST = 8
	RES_GUILD_CONST_GUILD_CYCLE_BATTLE_ACTIVE_VALUE_LIMIT         RES_GUILD_CONST = 9
	RES_GUILD_CONST_GUILD_BATTLE_TOTAL_PARAM                      RES_GUILD_CONST = 10
	RES_GUILD_CONST_GUILD_BATTLE_TOP4_PARAM                       RES_GUILD_CONST = 11
	RES_GUILD_CONST_GUILD_BATTLE_TOP1_PARAM                       RES_GUILD_CONST = 12
	RES_GUILD_CONST_GUILD_DESC_MAX_NUM                            RES_GUILD_CONST = 13
	RES_GUILD_CONST_RES_GUILD_CONST_MAX_COUNT                     RES_GUILD_CONST = 14
)

// Enum value maps for RES_GUILD_CONST.
var (
	RES_GUILD_CONST_name = map[int32]string{
		0:  "RES_GUILD_CONST_RESERVED",
		1:  "GUILD_ACTIVE_LEAVE_CD_MIN",
		2:  "GUILD_AUTO_CHANGE_LEADER_OFFLINE_DAYS",
		3:  "GUILD_AUTO_CHANGE_LEADER_SERVE_DAYS",
		4:  "GUILD_AUTO_CHANGE_LEADER_MANAGER_OFFLINE_DAYS",
		5:  "GUILD_AUTO_CHANGE_LEADER_MEMBER_OFFLINE_DAYS",
		6:  "GUILD_AUTO_CHANGE_LEADER_MEMBER_JOIN_DAYS",
		7:  "GUILD_CREATE_MONEY_COST",
		8:  "GUILD_CYCLE_TOTAL_ACTIVE_VALUE_LIMIT",
		9:  "GUILD_CYCLE_BATTLE_ACTIVE_VALUE_LIMIT",
		10: "GUILD_BATTLE_TOTAL_PARAM",
		11: "GUILD_BATTLE_TOP4_PARAM",
		12: "GUILD_BATTLE_TOP1_PARAM",
		13: "GUILD_DESC_MAX_NUM",
		14: "RES_GUILD_CONST_MAX_COUNT",
	}
	RES_GUILD_CONST_value = map[string]int32{
		"RES_GUILD_CONST_RESERVED":                      0,
		"GUILD_ACTIVE_LEAVE_CD_MIN":                     1,
		"GUILD_AUTO_CHANGE_LEADER_OFFLINE_DAYS":         2,
		"GUILD_AUTO_CHANGE_LEADER_SERVE_DAYS":           3,
		"GUILD_AUTO_CHANGE_LEADER_MANAGER_OFFLINE_DAYS": 4,
		"GUILD_AUTO_CHANGE_LEADER_MEMBER_OFFLINE_DAYS":  5,
		"GUILD_AUTO_CHANGE_LEADER_MEMBER_JOIN_DAYS":     6,
		"GUILD_CREATE_MONEY_COST":                       7,
		"GUILD_CYCLE_TOTAL_ACTIVE_VALUE_LIMIT":          8,
		"GUILD_CYCLE_BATTLE_ACTIVE_VALUE_LIMIT":         9,
		"GUILD_BATTLE_TOTAL_PARAM":                      10,
		"GUILD_BATTLE_TOP4_PARAM":                       11,
		"GUILD_BATTLE_TOP1_PARAM":                       12,
		"GUILD_DESC_MAX_NUM":                            13,
		"RES_GUILD_CONST_MAX_COUNT":                     14,
	}
)

func (x RES_GUILD_CONST) Enum() *RES_GUILD_CONST {
	p := new(RES_GUILD_CONST)
	*p = x
	return p
}

func (x RES_GUILD_CONST) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_GUILD_CONST) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[151].Descriptor()
}

func (RES_GUILD_CONST) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[151]
}

func (x RES_GUILD_CONST) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_GUILD_CONST.Descriptor instead.
func (RES_GUILD_CONST) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{151}
}

type RES_GUILD_JOINLIMIT_TYPE int32

const (
	RES_GUILD_JOINLIMIT_TYPE_RES_GUILD_JOINLIMIT_TYPE_RESERVED RES_GUILD_JOINLIMIT_TYPE = 0
	RES_GUILD_JOINLIMIT_TYPE_RES_GUILD_JOINLIMIT_TYPE_LEVEL    RES_GUILD_JOINLIMIT_TYPE = 1
	RES_GUILD_JOINLIMIT_TYPE_RES_GUILD_JOINLIMIT_TYPE_RANK     RES_GUILD_JOINLIMIT_TYPE = 2
)

// Enum value maps for RES_GUILD_JOINLIMIT_TYPE.
var (
	RES_GUILD_JOINLIMIT_TYPE_name = map[int32]string{
		0: "RES_GUILD_JOINLIMIT_TYPE_RESERVED",
		1: "RES_GUILD_JOINLIMIT_TYPE_LEVEL",
		2: "RES_GUILD_JOINLIMIT_TYPE_RANK",
	}
	RES_GUILD_JOINLIMIT_TYPE_value = map[string]int32{
		"RES_GUILD_JOINLIMIT_TYPE_RESERVED": 0,
		"RES_GUILD_JOINLIMIT_TYPE_LEVEL":    1,
		"RES_GUILD_JOINLIMIT_TYPE_RANK":     2,
	}
)

func (x RES_GUILD_JOINLIMIT_TYPE) Enum() *RES_GUILD_JOINLIMIT_TYPE {
	p := new(RES_GUILD_JOINLIMIT_TYPE)
	*p = x
	return p
}

func (x RES_GUILD_JOINLIMIT_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_GUILD_JOINLIMIT_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[152].Descriptor()
}

func (RES_GUILD_JOINLIMIT_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[152]
}

func (x RES_GUILD_JOINLIMIT_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_GUILD_JOINLIMIT_TYPE.Descriptor instead.
func (RES_GUILD_JOINLIMIT_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{152}
}

type RES_GUILD_ICON_TYPE int32

const (
	RES_GUILD_ICON_TYPE_GUILD_ICON_RESERVED   RES_GUILD_ICON_TYPE = 0
	RES_GUILD_ICON_TYPE_GUILD_ICON_ICON       RES_GUILD_ICON_TYPE = 1
	RES_GUILD_ICON_TYPE_GUILD_ICON_BACKGROUND RES_GUILD_ICON_TYPE = 2
)

// Enum value maps for RES_GUILD_ICON_TYPE.
var (
	RES_GUILD_ICON_TYPE_name = map[int32]string{
		0: "GUILD_ICON_RESERVED",
		1: "GUILD_ICON_ICON",
		2: "GUILD_ICON_BACKGROUND",
	}
	RES_GUILD_ICON_TYPE_value = map[string]int32{
		"GUILD_ICON_RESERVED":   0,
		"GUILD_ICON_ICON":       1,
		"GUILD_ICON_BACKGROUND": 2,
	}
)

func (x RES_GUILD_ICON_TYPE) Enum() *RES_GUILD_ICON_TYPE {
	p := new(RES_GUILD_ICON_TYPE)
	*p = x
	return p
}

func (x RES_GUILD_ICON_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_GUILD_ICON_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[153].Descriptor()
}

func (RES_GUILD_ICON_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[153]
}

func (x RES_GUILD_ICON_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_GUILD_ICON_TYPE.Descriptor instead.
func (RES_GUILD_ICON_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{153}
}

type RES_GUILD_LOGO_COLOR_TYPE int32

const (
	RES_GUILD_LOGO_COLOR_TYPE_GUILD_COLOR_RESERVED RES_GUILD_LOGO_COLOR_TYPE = 0
	RES_GUILD_LOGO_COLOR_TYPE_COLOR_BLUE           RES_GUILD_LOGO_COLOR_TYPE = 1
	RES_GUILD_LOGO_COLOR_TYPE_COLOR_ORANGE         RES_GUILD_LOGO_COLOR_TYPE = 2
	RES_GUILD_LOGO_COLOR_TYPE_COLOR_RED            RES_GUILD_LOGO_COLOR_TYPE = 3
	RES_GUILD_LOGO_COLOR_TYPE_COLOR_PURPLE         RES_GUILD_LOGO_COLOR_TYPE = 4
	RES_GUILD_LOGO_COLOR_TYPE_COLOR_GREEN          RES_GUILD_LOGO_COLOR_TYPE = 5
	RES_GUILD_LOGO_COLOR_TYPE_COLOR_YELLOW         RES_GUILD_LOGO_COLOR_TYPE = 6
	RES_GUILD_LOGO_COLOR_TYPE_COLOR_BLACK          RES_GUILD_LOGO_COLOR_TYPE = 7
	RES_GUILD_LOGO_COLOR_TYPE_COLOR_BROWN          RES_GUILD_LOGO_COLOR_TYPE = 8
	RES_GUILD_LOGO_COLOR_TYPE_COLOR_GRAY           RES_GUILD_LOGO_COLOR_TYPE = 9
	RES_GUILD_LOGO_COLOR_TYPE_COLOR_WHITE          RES_GUILD_LOGO_COLOR_TYPE = 10
)

// Enum value maps for RES_GUILD_LOGO_COLOR_TYPE.
var (
	RES_GUILD_LOGO_COLOR_TYPE_name = map[int32]string{
		0:  "GUILD_COLOR_RESERVED",
		1:  "COLOR_BLUE",
		2:  "COLOR_ORANGE",
		3:  "COLOR_RED",
		4:  "COLOR_PURPLE",
		5:  "COLOR_GREEN",
		6:  "COLOR_YELLOW",
		7:  "COLOR_BLACK",
		8:  "COLOR_BROWN",
		9:  "COLOR_GRAY",
		10: "COLOR_WHITE",
	}
	RES_GUILD_LOGO_COLOR_TYPE_value = map[string]int32{
		"GUILD_COLOR_RESERVED": 0,
		"COLOR_BLUE":           1,
		"COLOR_ORANGE":         2,
		"COLOR_RED":            3,
		"COLOR_PURPLE":         4,
		"COLOR_GREEN":          5,
		"COLOR_YELLOW":         6,
		"COLOR_BLACK":          7,
		"COLOR_BROWN":          8,
		"COLOR_GRAY":           9,
		"COLOR_WHITE":          10,
	}
)

func (x RES_GUILD_LOGO_COLOR_TYPE) Enum() *RES_GUILD_LOGO_COLOR_TYPE {
	p := new(RES_GUILD_LOGO_COLOR_TYPE)
	*p = x
	return p
}

func (x RES_GUILD_LOGO_COLOR_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_GUILD_LOGO_COLOR_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[154].Descriptor()
}

func (RES_GUILD_LOGO_COLOR_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[154]
}

func (x RES_GUILD_LOGO_COLOR_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_GUILD_LOGO_COLOR_TYPE.Descriptor instead.
func (RES_GUILD_LOGO_COLOR_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{154}
}

//  ------------------------- 全局跳转表 Begin----------------------------
type RES_JUMP_TYPE int32

const (
	RES_JUMP_TYPE_JUMP_NULL         RES_JUMP_TYPE = 0
	RES_JUMP_TYPE_JUMP_EMBATTLE     RES_JUMP_TYPE = 1
	RES_JUMP_TYPE_JUMP_PERSONALISE  RES_JUMP_TYPE = 2
	RES_JUMP_TYPE_JUMP_LORD         RES_JUMP_TYPE = 3
	RES_JUMP_TYPE_JUMP_BATTLEPASS   RES_JUMP_TYPE = 4
	RES_JUMP_TYPE_JUMP_SHOP         RES_JUMP_TYPE = 5
	RES_JUMP_TYPE_JUMP_HERO_COLLECT RES_JUMP_TYPE = 6
	RES_JUMP_TYPE_JUMP_PVP_SETTLE   RES_JUMP_TYPE = 7
	RES_JUMP_TYPE_JUMP_Activity     RES_JUMP_TYPE = 8
	RES_JUMP_TYPE_JUMP_SEASON_TRIP  RES_JUMP_TYPE = 9
	RES_JUMP_TYPE_JUMP_PVP          RES_JUMP_TYPE = 10
	RES_JUMP_TYPE_JUMP_Friend       RES_JUMP_TYPE = 11
	RES_JUMP_TYPE_JUMP_OPEN_PACKAGE RES_JUMP_TYPE = 12
	RES_JUMP_TYPE_JUMP_MAIL         RES_JUMP_TYPE = 13
	RES_JUMP_TYPE_JUMP_ACHIEVE      RES_JUMP_TYPE = 14
	RES_JUMP_TYPE_JUMP_Grow         RES_JUMP_TYPE = 15
	RES_JUMP_TYPE_JUMP_MAX          RES_JUMP_TYPE = 16
)

// Enum value maps for RES_JUMP_TYPE.
var (
	RES_JUMP_TYPE_name = map[int32]string{
		0:  "JUMP_NULL",
		1:  "JUMP_EMBATTLE",
		2:  "JUMP_PERSONALISE",
		3:  "JUMP_LORD",
		4:  "JUMP_BATTLEPASS",
		5:  "JUMP_SHOP",
		6:  "JUMP_HERO_COLLECT",
		7:  "JUMP_PVP_SETTLE",
		8:  "JUMP_Activity",
		9:  "JUMP_SEASON_TRIP",
		10: "JUMP_PVP",
		11: "JUMP_Friend",
		12: "JUMP_OPEN_PACKAGE",
		13: "JUMP_MAIL",
		14: "JUMP_ACHIEVE",
		15: "JUMP_Grow",
		16: "JUMP_MAX",
	}
	RES_JUMP_TYPE_value = map[string]int32{
		"JUMP_NULL":         0,
		"JUMP_EMBATTLE":     1,
		"JUMP_PERSONALISE":  2,
		"JUMP_LORD":         3,
		"JUMP_BATTLEPASS":   4,
		"JUMP_SHOP":         5,
		"JUMP_HERO_COLLECT": 6,
		"JUMP_PVP_SETTLE":   7,
		"JUMP_Activity":     8,
		"JUMP_SEASON_TRIP":  9,
		"JUMP_PVP":          10,
		"JUMP_Friend":       11,
		"JUMP_OPEN_PACKAGE": 12,
		"JUMP_MAIL":         13,
		"JUMP_ACHIEVE":      14,
		"JUMP_Grow":         15,
		"JUMP_MAX":          16,
	}
)

func (x RES_JUMP_TYPE) Enum() *RES_JUMP_TYPE {
	p := new(RES_JUMP_TYPE)
	*p = x
	return p
}

func (x RES_JUMP_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_JUMP_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[155].Descriptor()
}

func (RES_JUMP_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[155]
}

func (x RES_JUMP_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_JUMP_TYPE.Descriptor instead.
func (RES_JUMP_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{155}
}

// -------------------------打野玩法 Begin----------------------------
type RES_BOSS_AWARD_VALUE_TYPE int32

const (
	RES_BOSS_AWARD_VALUE_TYPE_VALUE_NULL       RES_BOSS_AWARD_VALUE_TYPE = 0
	RES_BOSS_AWARD_VALUE_TYPE_DEAD_DROP        RES_BOSS_AWARD_VALUE_TYPE = 1
	RES_BOSS_AWARD_VALUE_TYPE_AUTO_GET         RES_BOSS_AWARD_VALUE_TYPE = 2
	RES_BOSS_AWARD_VALUE_TYPE_AWARD_AUTO_SELL  RES_BOSS_AWARD_VALUE_TYPE = 3
	RES_BOSS_AWARD_VALUE_TYPE_AWARD_SHOP_MUTEX RES_BOSS_AWARD_VALUE_TYPE = 4
	RES_BOSS_AWARD_VALUE_TYPE_AWARD_GET_TIME   RES_BOSS_AWARD_VALUE_TYPE = 5
	RES_BOSS_AWARD_VALUE_TYPE_BATTLE_TIME_ADD  RES_BOSS_AWARD_VALUE_TYPE = 6
	RES_BOSS_AWARD_VALUE_TYPE_PRESET_SHOW      RES_BOSS_AWARD_VALUE_TYPE = 7
	RES_BOSS_AWARD_VALUE_TYPE_DROP_DISTANCE    RES_BOSS_AWARD_VALUE_TYPE = 8
	RES_BOSS_AWARD_VALUE_TYPE_DROP_HPBOX_SHOW  RES_BOSS_AWARD_VALUE_TYPE = 9
)

// Enum value maps for RES_BOSS_AWARD_VALUE_TYPE.
var (
	RES_BOSS_AWARD_VALUE_TYPE_name = map[int32]string{
		0: "VALUE_NULL",
		1: "DEAD_DROP",
		2: "AUTO_GET",
		3: "AWARD_AUTO_SELL",
		4: "AWARD_SHOP_MUTEX",
		5: "AWARD_GET_TIME",
		6: "BATTLE_TIME_ADD",
		7: "PRESET_SHOW",
		8: "DROP_DISTANCE",
		9: "DROP_HPBOX_SHOW",
	}
	RES_BOSS_AWARD_VALUE_TYPE_value = map[string]int32{
		"VALUE_NULL":       0,
		"DEAD_DROP":        1,
		"AUTO_GET":         2,
		"AWARD_AUTO_SELL":  3,
		"AWARD_SHOP_MUTEX": 4,
		"AWARD_GET_TIME":   5,
		"BATTLE_TIME_ADD":  6,
		"PRESET_SHOW":      7,
		"DROP_DISTANCE":    8,
		"DROP_HPBOX_SHOW":  9,
	}
)

func (x RES_BOSS_AWARD_VALUE_TYPE) Enum() *RES_BOSS_AWARD_VALUE_TYPE {
	p := new(RES_BOSS_AWARD_VALUE_TYPE)
	*p = x
	return p
}

func (x RES_BOSS_AWARD_VALUE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_BOSS_AWARD_VALUE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[156].Descriptor()
}

func (RES_BOSS_AWARD_VALUE_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[156]
}

func (x RES_BOSS_AWARD_VALUE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_BOSS_AWARD_VALUE_TYPE.Descriptor instead.
func (RES_BOSS_AWARD_VALUE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{156}
}

type EBossAwadChooseType int32

const (
	EBossAwadChooseType_Together EBossAwadChooseType = 0
	EBossAwadChooseType_Host     EBossAwadChooseType = 1
	EBossAwadChooseType_Group    EBossAwadChooseType = 2
)

// Enum value maps for EBossAwadChooseType.
var (
	EBossAwadChooseType_name = map[int32]string{
		0: "Together",
		1: "Host",
		2: "Group",
	}
	EBossAwadChooseType_value = map[string]int32{
		"Together": 0,
		"Host":     1,
		"Group":    2,
	}
)

func (x EBossAwadChooseType) Enum() *EBossAwadChooseType {
	p := new(EBossAwadChooseType)
	*p = x
	return p
}

func (x EBossAwadChooseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBossAwadChooseType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[157].Descriptor()
}

func (EBossAwadChooseType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[157]
}

func (x EBossAwadChooseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EBossAwadChooseType.Descriptor instead.
func (EBossAwadChooseType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{157}
}

type RES_AWARD_PERFORM_TYPE int32

const (
	RES_AWARD_PERFORM_TYPE_AWARD_NULL               RES_AWARD_PERFORM_TYPE = 0
	RES_AWARD_PERFORM_TYPE_AGE_PICK_BOX             RES_AWARD_PERFORM_TYPE = 1
	RES_AWARD_PERFORM_TYPE_AGE_BOSS_PREPARE         RES_AWARD_PERFORM_TYPE = 2
	RES_AWARD_PERFORM_TYPE_AGE_BOSS_AWARD_PREPARE   RES_AWARD_PERFORM_TYPE = 3
	RES_AWARD_PERFORM_TYPE_AGE_BOSS_ENTER           RES_AWARD_PERFORM_TYPE = 4
	RES_AWARD_PERFORM_TYPE_AGE_BOSS_AWARD_ENTER     RES_AWARD_PERFORM_TYPE = 5
	RES_AWARD_PERFORM_TYPE_AGE_BOSS_LEAVE           RES_AWARD_PERFORM_TYPE = 6
	RES_AWARD_PERFORM_TYPE_BATTLE_FILED_CENTER_NAME RES_AWARD_PERFORM_TYPE = 7
	RES_AWARD_PERFORM_TYPE_BATTLE_MONSTER_POS       RES_AWARD_PERFORM_TYPE = 8
	RES_AWARD_PERFORM_TYPE_AGE_DROP_BOX             RES_AWARD_PERFORM_TYPE = 9
)

// Enum value maps for RES_AWARD_PERFORM_TYPE.
var (
	RES_AWARD_PERFORM_TYPE_name = map[int32]string{
		0: "AWARD_NULL",
		1: "AGE_PICK_BOX",
		2: "AGE_BOSS_PREPARE",
		3: "AGE_BOSS_AWARD_PREPARE",
		4: "AGE_BOSS_ENTER",
		5: "AGE_BOSS_AWARD_ENTER",
		6: "AGE_BOSS_LEAVE",
		7: "BATTLE_FILED_CENTER_NAME",
		8: "BATTLE_MONSTER_POS",
		9: "AGE_DROP_BOX",
	}
	RES_AWARD_PERFORM_TYPE_value = map[string]int32{
		"AWARD_NULL":               0,
		"AGE_PICK_BOX":             1,
		"AGE_BOSS_PREPARE":         2,
		"AGE_BOSS_AWARD_PREPARE":   3,
		"AGE_BOSS_ENTER":           4,
		"AGE_BOSS_AWARD_ENTER":     5,
		"AGE_BOSS_LEAVE":           6,
		"BATTLE_FILED_CENTER_NAME": 7,
		"BATTLE_MONSTER_POS":       8,
		"AGE_DROP_BOX":             9,
	}
)

func (x RES_AWARD_PERFORM_TYPE) Enum() *RES_AWARD_PERFORM_TYPE {
	p := new(RES_AWARD_PERFORM_TYPE)
	*p = x
	return p
}

func (x RES_AWARD_PERFORM_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_AWARD_PERFORM_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[158].Descriptor()
}

func (RES_AWARD_PERFORM_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[158]
}

func (x RES_AWARD_PERFORM_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_AWARD_PERFORM_TYPE.Descriptor instead.
func (RES_AWARD_PERFORM_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{158}
}

type RES_IEDROP_CONDITION int32

const (
	RES_IEDROP_CONDITION_CONDITION_NULL             RES_IEDROP_CONDITION = 0
	RES_IEDROP_CONDITION_ROUND_NUM                  RES_IEDROP_CONDITION = 1
	RES_IEDROP_CONDITION_LOSE_STREAK                RES_IEDROP_CONDITION = 2
	RES_IEDROP_CONDITION_HP                         RES_IEDROP_CONDITION = 3
	RES_IEDROP_CONDITION_RANK                       RES_IEDROP_CONDITION = 4
	RES_IEDROP_CONDITION_LORD                       RES_IEDROP_CONDITION = 5
	RES_IEDROP_CONDITION_RES_IEDROP_COIN            RES_IEDROP_CONDITION = 6
	RES_IEDROP_CONDITION_RES_IEDROP_UNLOCK_NEW_CARD RES_IEDROP_CONDITION = 7
	RES_IEDROP_CONDITION_CONDITION_MAX              RES_IEDROP_CONDITION = 8
)

// Enum value maps for RES_IEDROP_CONDITION.
var (
	RES_IEDROP_CONDITION_name = map[int32]string{
		0: "CONDITION_NULL",
		1: "ROUND_NUM",
		2: "LOSE_STREAK",
		3: "HP",
		4: "RANK",
		5: "LORD",
		6: "RES_IEDROP_COIN",
		7: "RES_IEDROP_UNLOCK_NEW_CARD",
		8: "CONDITION_MAX",
	}
	RES_IEDROP_CONDITION_value = map[string]int32{
		"CONDITION_NULL":             0,
		"ROUND_NUM":                  1,
		"LOSE_STREAK":                2,
		"HP":                         3,
		"RANK":                       4,
		"LORD":                       5,
		"RES_IEDROP_COIN":            6,
		"RES_IEDROP_UNLOCK_NEW_CARD": 7,
		"CONDITION_MAX":              8,
	}
)

func (x RES_IEDROP_CONDITION) Enum() *RES_IEDROP_CONDITION {
	p := new(RES_IEDROP_CONDITION)
	*p = x
	return p
}

func (x RES_IEDROP_CONDITION) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_IEDROP_CONDITION) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[159].Descriptor()
}

func (RES_IEDROP_CONDITION) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[159]
}

func (x RES_IEDROP_CONDITION) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_IEDROP_CONDITION.Descriptor instead.
func (RES_IEDROP_CONDITION) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{159}
}

// 间隔类型
type RES_IEDROP_CD_TYPE int32

const (
	RES_IEDROP_CD_TYPE_CD_NULL      RES_IEDROP_CD_TYPE = 0
	RES_IEDROP_CD_TYPE_SHOP_REFRESH RES_IEDROP_CD_TYPE = 1
	RES_IEDROP_CD_TYPE_ROUND_CHANGE RES_IEDROP_CD_TYPE = 2
)

// Enum value maps for RES_IEDROP_CD_TYPE.
var (
	RES_IEDROP_CD_TYPE_name = map[int32]string{
		0: "CD_NULL",
		1: "SHOP_REFRESH",
		2: "ROUND_CHANGE",
	}
	RES_IEDROP_CD_TYPE_value = map[string]int32{
		"CD_NULL":      0,
		"SHOP_REFRESH": 1,
		"ROUND_CHANGE": 2,
	}
)

func (x RES_IEDROP_CD_TYPE) Enum() *RES_IEDROP_CD_TYPE {
	p := new(RES_IEDROP_CD_TYPE)
	*p = x
	return p
}

func (x RES_IEDROP_CD_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_IEDROP_CD_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[160].Descriptor()
}

func (RES_IEDROP_CD_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[160]
}

func (x RES_IEDROP_CD_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_IEDROP_CD_TYPE.Descriptor instead.
func (RES_IEDROP_CD_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{160}
}

// 触发类型
type RES_IEDROP_TRIGGER_TYPE int32

const (
	RES_IEDROP_TRIGGER_TYPE_TRIGGER_NULL        RES_IEDROP_TRIGGER_TYPE = 0
	RES_IEDROP_TRIGGER_TYPE_CARD_DROP           RES_IEDROP_TRIGGER_TYPE = 1
	RES_IEDROP_TRIGGER_TYPE_STRATEGY_ACTIVED    RES_IEDROP_TRIGGER_TYPE = 2
	RES_IEDROP_TRIGGER_TYPE_ROUND_CHANGED       RES_IEDROP_TRIGGER_TYPE = 3
	RES_IEDROP_TRIGGER_TYPE_PLAYER_LEVEL        RES_IEDROP_TRIGGER_TYPE = 4
	RES_IEDROP_TRIGGER_TYPE_RANK_AND_HP_CHANGED RES_IEDROP_TRIGGER_TYPE = 5
	RES_IEDROP_TRIGGER_TYPE_WARM_OPEN           RES_IEDROP_TRIGGER_TYPE = 6
	RES_IEDROP_TRIGGER_TYPE_GOLD_CHANGED        RES_IEDROP_TRIGGER_TYPE = 7
	RES_IEDROP_TRIGGER_TYPE_LORD_SKILL_USED     RES_IEDROP_TRIGGER_TYPE = 8
	RES_IEDROP_TRIGGER_TYPE_TALENT_ACTIVED      RES_IEDROP_TRIGGER_TYPE = 9
)

// Enum value maps for RES_IEDROP_TRIGGER_TYPE.
var (
	RES_IEDROP_TRIGGER_TYPE_name = map[int32]string{
		0: "TRIGGER_NULL",
		1: "CARD_DROP",
		2: "STRATEGY_ACTIVED",
		3: "ROUND_CHANGED",
		4: "PLAYER_LEVEL",
		5: "RANK_AND_HP_CHANGED",
		6: "WARM_OPEN",
		7: "GOLD_CHANGED",
		8: "LORD_SKILL_USED",
		9: "TALENT_ACTIVED",
	}
	RES_IEDROP_TRIGGER_TYPE_value = map[string]int32{
		"TRIGGER_NULL":        0,
		"CARD_DROP":           1,
		"STRATEGY_ACTIVED":    2,
		"ROUND_CHANGED":       3,
		"PLAYER_LEVEL":        4,
		"RANK_AND_HP_CHANGED": 5,
		"WARM_OPEN":           6,
		"GOLD_CHANGED":        7,
		"LORD_SKILL_USED":     8,
		"TALENT_ACTIVED":      9,
	}
)

func (x RES_IEDROP_TRIGGER_TYPE) Enum() *RES_IEDROP_TRIGGER_TYPE {
	p := new(RES_IEDROP_TRIGGER_TYPE)
	*p = x
	return p
}

func (x RES_IEDROP_TRIGGER_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_IEDROP_TRIGGER_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[161].Descriptor()
}

func (RES_IEDROP_TRIGGER_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[161]
}

func (x RES_IEDROP_TRIGGER_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_IEDROP_TRIGGER_TYPE.Descriptor instead.
func (RES_IEDROP_TRIGGER_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{161}
}

// 移除类型
type RES_IEDROP_REMOVE_TYPE int32

const (
	RES_IEDROP_REMOVE_TYPE_REMOVE_NULL     RES_IEDROP_REMOVE_TYPE = 0
	RES_IEDROP_REMOVE_TYPE_CARD_CHANGE     RES_IEDROP_REMOVE_TYPE = 1
	RES_IEDROP_REMOVE_TYPE_STRATEGY_REMOVE RES_IEDROP_REMOVE_TYPE = 2
	RES_IEDROP_REMOVE_TYPE_WARM_CLOSE      RES_IEDROP_REMOVE_TYPE = 3
	RES_IEDROP_REMOVE_TYPE_WIN_NUM_CHANGE  RES_IEDROP_REMOVE_TYPE = 4
)

// Enum value maps for RES_IEDROP_REMOVE_TYPE.
var (
	RES_IEDROP_REMOVE_TYPE_name = map[int32]string{
		0: "REMOVE_NULL",
		1: "CARD_CHANGE",
		2: "STRATEGY_REMOVE",
		3: "WARM_CLOSE",
		4: "WIN_NUM_CHANGE",
	}
	RES_IEDROP_REMOVE_TYPE_value = map[string]int32{
		"REMOVE_NULL":     0,
		"CARD_CHANGE":     1,
		"STRATEGY_REMOVE": 2,
		"WARM_CLOSE":      3,
		"WIN_NUM_CHANGE":  4,
	}
)

func (x RES_IEDROP_REMOVE_TYPE) Enum() *RES_IEDROP_REMOVE_TYPE {
	p := new(RES_IEDROP_REMOVE_TYPE)
	*p = x
	return p
}

func (x RES_IEDROP_REMOVE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_IEDROP_REMOVE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[162].Descriptor()
}

func (RES_IEDROP_REMOVE_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[162]
}

func (x RES_IEDROP_REMOVE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_IEDROP_REMOVE_TYPE.Descriptor instead.
func (RES_IEDROP_REMOVE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{162}
}

// 效果类型
type RES_IEDROP_EFFECT_TYPE int32

const (
	RES_IEDROP_EFFECT_TYPE_EFFECT_NULL                             RES_IEDROP_EFFECT_TYPE = 0
	RES_IEDROP_EFFECT_TYPE_RAISE_WEIGHT_BY_CFG_ID                  RES_IEDROP_EFFECT_TYPE = 1
	RES_IEDROP_EFFECT_TYPE_TALENT_BY_CFG                           RES_IEDROP_EFFECT_TYPE = 2
	RES_IEDROP_EFFECT_TYPE_RAISE_WEIGHT_FOR_TARGET_FORMATION       RES_IEDROP_EFFECT_TYPE = 3
	RES_IEDROP_EFFECT_TYPE_RAISE_WEIGHT_EQUIP_FOR_TARGET_FORMATION RES_IEDROP_EFFECT_TYPE = 4
	RES_IEDROP_EFFECT_TYPE_DROP_MULTI_CARD_CHECK_CHESS             RES_IEDROP_EFFECT_TYPE = 5
	RES_IEDROP_EFFECT_TYPE_RAISE_WEIGHT_FOR_WARM                   RES_IEDROP_EFFECT_TYPE = 6
	RES_IEDROP_EFFECT_TYPE_RAISE_WEIGHT_FOR_SLOT                   RES_IEDROP_EFFECT_TYPE = 7
	RES_IEDROP_EFFECT_TYPE_GENERATE_AIRDROP                        RES_IEDROP_EFFECT_TYPE = 8
	RES_IEDROP_EFFECT_TYPE_RAISE_WEIGHT_FOR_TALENT_CP              RES_IEDROP_EFFECT_TYPE = 9
	RES_IEDROP_EFFECT_TYPE_RAISE_WEIGHT_BY_LORD_WZJ                RES_IEDROP_EFFECT_TYPE = 10
	RES_IEDROP_EFFECT_TYPE_RAISE_WEIGHT_BY_RELATIVE                RES_IEDROP_EFFECT_TYPE = 11
)

// Enum value maps for RES_IEDROP_EFFECT_TYPE.
var (
	RES_IEDROP_EFFECT_TYPE_name = map[int32]string{
		0:  "EFFECT_NULL",
		1:  "RAISE_WEIGHT_BY_CFG_ID",
		2:  "TALENT_BY_CFG",
		3:  "RAISE_WEIGHT_FOR_TARGET_FORMATION",
		4:  "RAISE_WEIGHT_EQUIP_FOR_TARGET_FORMATION",
		5:  "DROP_MULTI_CARD_CHECK_CHESS",
		6:  "RAISE_WEIGHT_FOR_WARM",
		7:  "RAISE_WEIGHT_FOR_SLOT",
		8:  "GENERATE_AIRDROP",
		9:  "RAISE_WEIGHT_FOR_TALENT_CP",
		10: "RAISE_WEIGHT_BY_LORD_WZJ",
		11: "RAISE_WEIGHT_BY_RELATIVE",
	}
	RES_IEDROP_EFFECT_TYPE_value = map[string]int32{
		"EFFECT_NULL":                             0,
		"RAISE_WEIGHT_BY_CFG_ID":                  1,
		"TALENT_BY_CFG":                           2,
		"RAISE_WEIGHT_FOR_TARGET_FORMATION":       3,
		"RAISE_WEIGHT_EQUIP_FOR_TARGET_FORMATION": 4,
		"DROP_MULTI_CARD_CHECK_CHESS":             5,
		"RAISE_WEIGHT_FOR_WARM":                   6,
		"RAISE_WEIGHT_FOR_SLOT":                   7,
		"GENERATE_AIRDROP":                        8,
		"RAISE_WEIGHT_FOR_TALENT_CP":              9,
		"RAISE_WEIGHT_BY_LORD_WZJ":                10,
		"RAISE_WEIGHT_BY_RELATIVE":                11,
	}
)

func (x RES_IEDROP_EFFECT_TYPE) Enum() *RES_IEDROP_EFFECT_TYPE {
	p := new(RES_IEDROP_EFFECT_TYPE)
	*p = x
	return p
}

func (x RES_IEDROP_EFFECT_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_IEDROP_EFFECT_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[163].Descriptor()
}

func (RES_IEDROP_EFFECT_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[163]
}

func (x RES_IEDROP_EFFECT_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_IEDROP_EFFECT_TYPE.Descriptor instead.
func (RES_IEDROP_EFFECT_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{163}
}

type RES_LOADING_SHOW_TYPE int32

const (
	RES_LOADING_SHOW_TYPE_LEVEL RES_LOADING_SHOW_TYPE = 0
)

// Enum value maps for RES_LOADING_SHOW_TYPE.
var (
	RES_LOADING_SHOW_TYPE_name = map[int32]string{
		0: "LEVEL",
	}
	RES_LOADING_SHOW_TYPE_value = map[string]int32{
		"LEVEL": 0,
	}
)

func (x RES_LOADING_SHOW_TYPE) Enum() *RES_LOADING_SHOW_TYPE {
	p := new(RES_LOADING_SHOW_TYPE)
	*p = x
	return p
}

func (x RES_LOADING_SHOW_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_LOADING_SHOW_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[164].Descriptor()
}

func (RES_LOADING_SHOW_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[164]
}

func (x RES_LOADING_SHOW_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_LOADING_SHOW_TYPE.Descriptor instead.
func (RES_LOADING_SHOW_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{164}
}

type RES_QTS_PACKAGE_TYPE int32

const (
	RES_QTS_PACKAGE_TYPE_BASIC    RES_QTS_PACKAGE_TYPE = 0
	RES_QTS_PACKAGE_TYPE_PLAY_MOD RES_QTS_PACKAGE_TYPE = 1
)

// Enum value maps for RES_QTS_PACKAGE_TYPE.
var (
	RES_QTS_PACKAGE_TYPE_name = map[int32]string{
		0: "BASIC",
		1: "PLAY_MOD",
	}
	RES_QTS_PACKAGE_TYPE_value = map[string]int32{
		"BASIC":    0,
		"PLAY_MOD": 1,
	}
)

func (x RES_QTS_PACKAGE_TYPE) Enum() *RES_QTS_PACKAGE_TYPE {
	p := new(RES_QTS_PACKAGE_TYPE)
	*p = x
	return p
}

func (x RES_QTS_PACKAGE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_QTS_PACKAGE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[165].Descriptor()
}

func (RES_QTS_PACKAGE_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[165]
}

func (x RES_QTS_PACKAGE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_QTS_PACKAGE_TYPE.Descriptor instead.
func (RES_QTS_PACKAGE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{165}
}

type ResGridType int32

const (
	ResGridType_ResGridTypeHexagon   ResGridType = 0
	ResGridType_ResGridTypeSquare    ResGridType = 1
	ResGridType_ResGridTypeRectangle ResGridType = 2
)

// Enum value maps for ResGridType.
var (
	ResGridType_name = map[int32]string{
		0: "ResGridTypeHexagon",
		1: "ResGridTypeSquare",
		2: "ResGridTypeRectangle",
	}
	ResGridType_value = map[string]int32{
		"ResGridTypeHexagon":   0,
		"ResGridTypeSquare":    1,
		"ResGridTypeRectangle": 2,
	}
)

func (x ResGridType) Enum() *ResGridType {
	p := new(ResGridType)
	*p = x
	return p
}

func (x ResGridType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResGridType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[166].Descriptor()
}

func (ResGridType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[166]
}

func (x ResGridType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResGridType.Descriptor instead.
func (ResGridType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{166}
}

type ResFormulaAPFunc int32

const (
	ResFormulaAPFunc_ResFormulaAPFuncAdd   ResFormulaAPFunc = 0
	ResFormulaAPFunc_ResFormulaAPFuncMulti ResFormulaAPFunc = 1
)

// Enum value maps for ResFormulaAPFunc.
var (
	ResFormulaAPFunc_name = map[int32]string{
		0: "ResFormulaAPFuncAdd",
		1: "ResFormulaAPFuncMulti",
	}
	ResFormulaAPFunc_value = map[string]int32{
		"ResFormulaAPFuncAdd":   0,
		"ResFormulaAPFuncMulti": 1,
	}
)

func (x ResFormulaAPFunc) Enum() *ResFormulaAPFunc {
	p := new(ResFormulaAPFunc)
	*p = x
	return p
}

func (x ResFormulaAPFunc) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResFormulaAPFunc) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[167].Descriptor()
}

func (ResFormulaAPFunc) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[167]
}

func (x ResFormulaAPFunc) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResFormulaAPFunc.Descriptor instead.
func (ResFormulaAPFunc) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{167}
}

type ResDamageMpRecoverType int32

const (
	ResDamageMpRecoverType_ResDamageMpRecoverTypeConstValue ResDamageMpRecoverType = 0
	ResDamageMpRecoverType_ResDamageMpRecoverTypeRate       ResDamageMpRecoverType = 1
)

// Enum value maps for ResDamageMpRecoverType.
var (
	ResDamageMpRecoverType_name = map[int32]string{
		0: "ResDamageMpRecoverTypeConstValue",
		1: "ResDamageMpRecoverTypeRate",
	}
	ResDamageMpRecoverType_value = map[string]int32{
		"ResDamageMpRecoverTypeConstValue": 0,
		"ResDamageMpRecoverTypeRate":       1,
	}
)

func (x ResDamageMpRecoverType) Enum() *ResDamageMpRecoverType {
	p := new(ResDamageMpRecoverType)
	*p = x
	return p
}

func (x ResDamageMpRecoverType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResDamageMpRecoverType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[168].Descriptor()
}

func (ResDamageMpRecoverType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[168]
}

func (x ResDamageMpRecoverType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResDamageMpRecoverType.Descriptor instead.
func (ResDamageMpRecoverType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{168}
}

type ResLayerType int32

const (
	ResLayerType_ResLayerType_None    ResLayerType = 0
	ResLayerType_ResLayerType_Default ResLayerType = 1
	ResLayerType_ResLayerType_Custom1 ResLayerType = 2
	ResLayerType_ResLayerType_Custom2 ResLayerType = 3
	ResLayerType_ResLayerType_Custom3 ResLayerType = 4
	ResLayerType_ResLayerType_Custom4 ResLayerType = 5
)

// Enum value maps for ResLayerType.
var (
	ResLayerType_name = map[int32]string{
		0: "ResLayerType_None",
		1: "ResLayerType_Default",
		2: "ResLayerType_Custom1",
		3: "ResLayerType_Custom2",
		4: "ResLayerType_Custom3",
		5: "ResLayerType_Custom4",
	}
	ResLayerType_value = map[string]int32{
		"ResLayerType_None":    0,
		"ResLayerType_Default": 1,
		"ResLayerType_Custom1": 2,
		"ResLayerType_Custom2": 3,
		"ResLayerType_Custom3": 4,
		"ResLayerType_Custom4": 5,
	}
)

func (x ResLayerType) Enum() *ResLayerType {
	p := new(ResLayerType)
	*p = x
	return p
}

func (x ResLayerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResLayerType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[169].Descriptor()
}

func (ResLayerType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[169]
}

func (x ResLayerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResLayerType.Descriptor instead.
func (ResLayerType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{169}
}

type ResBattleBroadcastType int32

const (
	ResBattleBroadcastType_ResBattleBroadcastType_None            ResBattleBroadcastType = 0
	ResBattleBroadcastType_ResBattleBroadcastType_ContinueKill    ResBattleBroadcastType = 1
	ResBattleBroadcastType_ResBattleBroadcastType_NumerousHarm    ResBattleBroadcastType = 2
	ResBattleBroadcastType_ResBattleBroadcastType_TakeDamage      ResBattleBroadcastType = 3
	ResBattleBroadcastType_ResBattleBroadcastType_Reat            ResBattleBroadcastType = 4
	ResBattleBroadcastType_ResBattleBroadcastType_ControlLongTime ResBattleBroadcastType = 5
	ResBattleBroadcastType_ResBattleBroadcastType_Kill            ResBattleBroadcastType = 6
)

// Enum value maps for ResBattleBroadcastType.
var (
	ResBattleBroadcastType_name = map[int32]string{
		0: "ResBattleBroadcastType_None",
		1: "ResBattleBroadcastType_ContinueKill",
		2: "ResBattleBroadcastType_NumerousHarm",
		3: "ResBattleBroadcastType_TakeDamage",
		4: "ResBattleBroadcastType_Reat",
		5: "ResBattleBroadcastType_ControlLongTime",
		6: "ResBattleBroadcastType_Kill",
	}
	ResBattleBroadcastType_value = map[string]int32{
		"ResBattleBroadcastType_None":            0,
		"ResBattleBroadcastType_ContinueKill":    1,
		"ResBattleBroadcastType_NumerousHarm":    2,
		"ResBattleBroadcastType_TakeDamage":      3,
		"ResBattleBroadcastType_Reat":            4,
		"ResBattleBroadcastType_ControlLongTime": 5,
		"ResBattleBroadcastType_Kill":            6,
	}
)

func (x ResBattleBroadcastType) Enum() *ResBattleBroadcastType {
	p := new(ResBattleBroadcastType)
	*p = x
	return p
}

func (x ResBattleBroadcastType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResBattleBroadcastType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[170].Descriptor()
}

func (ResBattleBroadcastType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[170]
}

func (x ResBattleBroadcastType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResBattleBroadcastType.Descriptor instead.
func (ResBattleBroadcastType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{170}
}

// -------------------------新手战任务----------------------------
type RECRUIT_TASKGUIDE_CONDITION_TYPE int32

const (
	RECRUIT_TASKGUIDE_CONDITION_TYPE_RECRUIT_TASKGUIDE_CONDITION_INVALID                          RECRUIT_TASKGUIDE_CONDITION_TYPE = 0
	RECRUIT_TASKGUIDE_CONDITION_TYPE_RECRUIT_TASKGUIDE_CONDITION_Rank                             RECRUIT_TASKGUIDE_CONDITION_TYPE = 1
	RECRUIT_TASKGUIDE_CONDITION_TYPE_RECRUIT_TASKGUIDE_CONDITION_Level                            RECRUIT_TASKGUIDE_CONDITION_TYPE = 2
	RECRUIT_TASKGUIDE_CONDITION_TYPE_RECRUIT_TASKGUIDE_CONDITION_RoundCompare                     RECRUIT_TASKGUIDE_CONDITION_TYPE = 3
	RECRUIT_TASKGUIDE_CONDITION_TYPE_RECRUIT_TASKGUIDE_CONDITION_HaveEquip                        RECRUIT_TASKGUIDE_CONDITION_TYPE = 4
	RECRUIT_TASKGUIDE_CONDITION_TYPE_RECRUIT_TASKGUIDE_CONDITION_CompleteTasksCnt                 RECRUIT_TASKGUIDE_CONDITION_TYPE = 5
	RECRUIT_TASKGUIDE_CONDITION_TYPE_RECRUIT_TASKGUIDE_CONDITION_SpecifiedPlayerLevel             RECRUIT_TASKGUIDE_CONDITION_TYPE = 6
	RECRUIT_TASKGUIDE_CONDITION_TYPE_RECRUIT_TASKGUIDE_CONDITION_HaveSpecifiedStarChess           RECRUIT_TASKGUIDE_CONDITION_TYPE = 7
	RECRUIT_TASKGUIDE_CONDITION_TYPE_RECRUIT_TASKGUIDE_CONDITION_UseSkillCount                    RECRUIT_TASKGUIDE_CONDITION_TYPE = 8
	RECRUIT_TASKGUIDE_CONDITION_TYPE_RECRUIT_TASKGUIDE_CONDITION_UpgradeEquipCount                RECRUIT_TASKGUIDE_CONDITION_TYPE = 9
	RECRUIT_TASKGUIDE_CONDITION_TYPE_RECRUIT_TASKGUIDE_CONDITION_WearingEquipment                 RECRUIT_TASKGUIDE_CONDITION_TYPE = 10
	RECRUIT_TASKGUIDE_CONDITION_TYPE_RECRUIT_TASKGUIDE_CONDITION_ActiveRelativeNumOfPeople        RECRUIT_TASKGUIDE_CONDITION_TYPE = 11
	RECRUIT_TASKGUIDE_CONDITION_TYPE_RECRUIT_TASKGUIDE_CONDITION_FinalRanking                     RECRUIT_TASKGUIDE_CONDITION_TYPE = 12
	RECRUIT_TASKGUIDE_CONDITION_TYPE_RECRUIT_TASKGUIDE_CONDITION_FinishSpecifiedTasks             RECRUIT_TASKGUIDE_CONDITION_TYPE = 13
	RECRUIT_TASKGUIDE_CONDITION_TYPE_RECRUIT_TASKGUIDE_CONDITION_RoundCurrencyCount               RECRUIT_TASKGUIDE_CONDITION_TYPE = 14
	RECRUIT_TASKGUIDE_CONDITION_TYPE_RECRUIT_TASKGUIDE_CONDITION_RefreshShopCnt                   RECRUIT_TASKGUIDE_CONDITION_TYPE = 15
	RECRUIT_TASKGUIDE_CONDITION_TYPE_RECRUIT_TASKGUIDE_CONDITION_UseHeroDrawCnt                   RECRUIT_TASKGUIDE_CONDITION_TYPE = 16
	RECRUIT_TASKGUIDE_CONDITION_TYPE_RECRUIT_TASKGUIDE_CONDITION_LordLimit                        RECRUIT_TASKGUIDE_CONDITION_TYPE = 17
	RECRUIT_TASKGUIDE_CONDITION_TYPE_RECRUIT_TASKGUIDE_CONDITION_RoundOverCurrencyCount           RECRUIT_TASKGUIDE_CONDITION_TYPE = 18
	RECRUIT_TASKGUIDE_CONDITION_TYPE_RECRUIT_TASKGUIDE_CONDITION_BluePrintSetCond                 RECRUIT_TASKGUIDE_CONDITION_TYPE = 19
	RECRUIT_TASKGUIDE_CONDITION_TYPE_RECRUIT_TASKGUIDE_CONDITION_HaveSpecifiedStarAndQualityChess RECRUIT_TASKGUIDE_CONDITION_TYPE = 20
)

// Enum value maps for RECRUIT_TASKGUIDE_CONDITION_TYPE.
var (
	RECRUIT_TASKGUIDE_CONDITION_TYPE_name = map[int32]string{
		0:  "RECRUIT_TASKGUIDE_CONDITION_INVALID",
		1:  "RECRUIT_TASKGUIDE_CONDITION_Rank",
		2:  "RECRUIT_TASKGUIDE_CONDITION_Level",
		3:  "RECRUIT_TASKGUIDE_CONDITION_RoundCompare",
		4:  "RECRUIT_TASKGUIDE_CONDITION_HaveEquip",
		5:  "RECRUIT_TASKGUIDE_CONDITION_CompleteTasksCnt",
		6:  "RECRUIT_TASKGUIDE_CONDITION_SpecifiedPlayerLevel",
		7:  "RECRUIT_TASKGUIDE_CONDITION_HaveSpecifiedStarChess",
		8:  "RECRUIT_TASKGUIDE_CONDITION_UseSkillCount",
		9:  "RECRUIT_TASKGUIDE_CONDITION_UpgradeEquipCount",
		10: "RECRUIT_TASKGUIDE_CONDITION_WearingEquipment",
		11: "RECRUIT_TASKGUIDE_CONDITION_ActiveRelativeNumOfPeople",
		12: "RECRUIT_TASKGUIDE_CONDITION_FinalRanking",
		13: "RECRUIT_TASKGUIDE_CONDITION_FinishSpecifiedTasks",
		14: "RECRUIT_TASKGUIDE_CONDITION_RoundCurrencyCount",
		15: "RECRUIT_TASKGUIDE_CONDITION_RefreshShopCnt",
		16: "RECRUIT_TASKGUIDE_CONDITION_UseHeroDrawCnt",
		17: "RECRUIT_TASKGUIDE_CONDITION_LordLimit",
		18: "RECRUIT_TASKGUIDE_CONDITION_RoundOverCurrencyCount",
		19: "RECRUIT_TASKGUIDE_CONDITION_BluePrintSetCond",
		20: "RECRUIT_TASKGUIDE_CONDITION_HaveSpecifiedStarAndQualityChess",
	}
	RECRUIT_TASKGUIDE_CONDITION_TYPE_value = map[string]int32{
		"RECRUIT_TASKGUIDE_CONDITION_INVALID":                          0,
		"RECRUIT_TASKGUIDE_CONDITION_Rank":                             1,
		"RECRUIT_TASKGUIDE_CONDITION_Level":                            2,
		"RECRUIT_TASKGUIDE_CONDITION_RoundCompare":                     3,
		"RECRUIT_TASKGUIDE_CONDITION_HaveEquip":                        4,
		"RECRUIT_TASKGUIDE_CONDITION_CompleteTasksCnt":                 5,
		"RECRUIT_TASKGUIDE_CONDITION_SpecifiedPlayerLevel":             6,
		"RECRUIT_TASKGUIDE_CONDITION_HaveSpecifiedStarChess":           7,
		"RECRUIT_TASKGUIDE_CONDITION_UseSkillCount":                    8,
		"RECRUIT_TASKGUIDE_CONDITION_UpgradeEquipCount":                9,
		"RECRUIT_TASKGUIDE_CONDITION_WearingEquipment":                 10,
		"RECRUIT_TASKGUIDE_CONDITION_ActiveRelativeNumOfPeople":        11,
		"RECRUIT_TASKGUIDE_CONDITION_FinalRanking":                     12,
		"RECRUIT_TASKGUIDE_CONDITION_FinishSpecifiedTasks":             13,
		"RECRUIT_TASKGUIDE_CONDITION_RoundCurrencyCount":               14,
		"RECRUIT_TASKGUIDE_CONDITION_RefreshShopCnt":                   15,
		"RECRUIT_TASKGUIDE_CONDITION_UseHeroDrawCnt":                   16,
		"RECRUIT_TASKGUIDE_CONDITION_LordLimit":                        17,
		"RECRUIT_TASKGUIDE_CONDITION_RoundOverCurrencyCount":           18,
		"RECRUIT_TASKGUIDE_CONDITION_BluePrintSetCond":                 19,
		"RECRUIT_TASKGUIDE_CONDITION_HaveSpecifiedStarAndQualityChess": 20,
	}
)

func (x RECRUIT_TASKGUIDE_CONDITION_TYPE) Enum() *RECRUIT_TASKGUIDE_CONDITION_TYPE {
	p := new(RECRUIT_TASKGUIDE_CONDITION_TYPE)
	*p = x
	return p
}

func (x RECRUIT_TASKGUIDE_CONDITION_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RECRUIT_TASKGUIDE_CONDITION_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[171].Descriptor()
}

func (RECRUIT_TASKGUIDE_CONDITION_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[171]
}

func (x RECRUIT_TASKGUIDE_CONDITION_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RECRUIT_TASKGUIDE_CONDITION_TYPE.Descriptor instead.
func (RECRUIT_TASKGUIDE_CONDITION_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{171}
}

type CLIENT_TASKTYPE int32

const (
	CLIENT_TASKTYPE_RECRUIT_TASKTYPE_INVALID CLIENT_TASKTYPE = 0
	CLIENT_TASKTYPE_TASK_RECRUITBATTLE       CLIENT_TASKTYPE = 1
	CLIENT_TASKTYPE_TASK_LORD                CLIENT_TASKTYPE = 2
	CLIENT_TASKTYPE_TASK_TUTORIAL            CLIENT_TASKTYPE = 3
	CLIENT_TASKTYPE_TASK_LAST                CLIENT_TASKTYPE = 4
)

// Enum value maps for CLIENT_TASKTYPE.
var (
	CLIENT_TASKTYPE_name = map[int32]string{
		0: "RECRUIT_TASKTYPE_INVALID",
		1: "TASK_RECRUITBATTLE",
		2: "TASK_LORD",
		3: "TASK_TUTORIAL",
		4: "TASK_LAST",
	}
	CLIENT_TASKTYPE_value = map[string]int32{
		"RECRUIT_TASKTYPE_INVALID": 0,
		"TASK_RECRUITBATTLE":       1,
		"TASK_LORD":                2,
		"TASK_TUTORIAL":            3,
		"TASK_LAST":                4,
	}
)

func (x CLIENT_TASKTYPE) Enum() *CLIENT_TASKTYPE {
	p := new(CLIENT_TASKTYPE)
	*p = x
	return p
}

func (x CLIENT_TASKTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CLIENT_TASKTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[172].Descriptor()
}

func (CLIENT_TASKTYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[172]
}

func (x CLIENT_TASKTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CLIENT_TASKTYPE.Descriptor instead.
func (CLIENT_TASKTYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{172}
}

type ResPersonaliseTypeDatabin_PersonaliseType int32

const (
	ResPersonaliseTypeDatabin_PersonaliseType_NONE         ResPersonaliseTypeDatabin_PersonaliseType = 0
	ResPersonaliseTypeDatabin_PersonaliseType_Chessboard   ResPersonaliseTypeDatabin_PersonaliseType = 1
	ResPersonaliseTypeDatabin_PersonaliseType_AttackEft    ResPersonaliseTypeDatabin_PersonaliseType = 2
	ResPersonaliseTypeDatabin_PersonaliseType_VictoryEft   ResPersonaliseTypeDatabin_PersonaliseType = 3
	ResPersonaliseTypeDatabin_PersonaliseType_TransformEft ResPersonaliseTypeDatabin_PersonaliseType = 4
	ResPersonaliseTypeDatabin_PersonaliseType_Emoji        ResPersonaliseTypeDatabin_PersonaliseType = 5
)

// Enum value maps for ResPersonaliseTypeDatabin_PersonaliseType.
var (
	ResPersonaliseTypeDatabin_PersonaliseType_name = map[int32]string{
		0: "PersonaliseType_NONE",
		1: "PersonaliseType_Chessboard",
		2: "PersonaliseType_AttackEft",
		3: "PersonaliseType_VictoryEft",
		4: "PersonaliseType_TransformEft",
		5: "PersonaliseType_Emoji",
	}
	ResPersonaliseTypeDatabin_PersonaliseType_value = map[string]int32{
		"PersonaliseType_NONE":         0,
		"PersonaliseType_Chessboard":   1,
		"PersonaliseType_AttackEft":    2,
		"PersonaliseType_VictoryEft":   3,
		"PersonaliseType_TransformEft": 4,
		"PersonaliseType_Emoji":        5,
	}
)

func (x ResPersonaliseTypeDatabin_PersonaliseType) Enum() *ResPersonaliseTypeDatabin_PersonaliseType {
	p := new(ResPersonaliseTypeDatabin_PersonaliseType)
	*p = x
	return p
}

func (x ResPersonaliseTypeDatabin_PersonaliseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResPersonaliseTypeDatabin_PersonaliseType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[173].Descriptor()
}

func (ResPersonaliseTypeDatabin_PersonaliseType) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[173]
}

func (x ResPersonaliseTypeDatabin_PersonaliseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResPersonaliseTypeDatabin_PersonaliseType.Descriptor instead.
func (ResPersonaliseTypeDatabin_PersonaliseType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{158, 0}
}

// 展示类型
type ResHomePageShowDataBin_HomePageShowName int32

const (
	ResHomePageShowDataBin_HomePageShowName_NONE        ResHomePageShowDataBin_HomePageShowName = 0
	ResHomePageShowDataBin_HomePageShowName_CLASSIC     ResHomePageShowDataBin_HomePageShowName = 1
	ResHomePageShowDataBin_HomePageShowName_ACHIEVE     ResHomePageShowDataBin_HomePageShowName = 2
	ResHomePageShowDataBin_HomePageShowName_PLAYDAYS    ResHomePageShowDataBin_HomePageShowName = 3
	ResHomePageShowDataBin_HomePageShowName_BATTLETIMES ResHomePageShowDataBin_HomePageShowName = 4
	ResHomePageShowDataBin_HomePageShowName_FIRSTTIMES  ResHomePageShowDataBin_HomePageShowName = 5
	ResHomePageShowDataBin_HomePageShowName_GOODLORD    ResHomePageShowDataBin_HomePageShowName = 6
	ResHomePageShowDataBin_HomePageShowName_GOODQUALITY ResHomePageShowDataBin_HomePageShowName = 7
	ResHomePageShowDataBin_HomePageShowName_HEROCOLLECT ResHomePageShowDataBin_HomePageShowName = 8
	ResHomePageShowDataBin_HomePageShowName_COLLECTOR   ResHomePageShowDataBin_HomePageShowName = 9
	ResHomePageShowDataBin_HomePageShowName_LORDNUM     ResHomePageShowDataBin_HomePageShowName = 10
	ResHomePageShowDataBin_HomePageShowName_SKINNUM     ResHomePageShowDataBin_HomePageShowName = 11
)

// Enum value maps for ResHomePageShowDataBin_HomePageShowName.
var (
	ResHomePageShowDataBin_HomePageShowName_name = map[int32]string{
		0:  "HomePageShowName_NONE",
		1:  "HomePageShowName_CLASSIC",
		2:  "HomePageShowName_ACHIEVE",
		3:  "HomePageShowName_PLAYDAYS",
		4:  "HomePageShowName_BATTLETIMES",
		5:  "HomePageShowName_FIRSTTIMES",
		6:  "HomePageShowName_GOODLORD",
		7:  "HomePageShowName_GOODQUALITY",
		8:  "HomePageShowName_HEROCOLLECT",
		9:  "HomePageShowName_COLLECTOR",
		10: "HomePageShowName_LORDNUM",
		11: "HomePageShowName_SKINNUM",
	}
	ResHomePageShowDataBin_HomePageShowName_value = map[string]int32{
		"HomePageShowName_NONE":        0,
		"HomePageShowName_CLASSIC":     1,
		"HomePageShowName_ACHIEVE":     2,
		"HomePageShowName_PLAYDAYS":    3,
		"HomePageShowName_BATTLETIMES": 4,
		"HomePageShowName_FIRSTTIMES":  5,
		"HomePageShowName_GOODLORD":    6,
		"HomePageShowName_GOODQUALITY": 7,
		"HomePageShowName_HEROCOLLECT": 8,
		"HomePageShowName_COLLECTOR":   9,
		"HomePageShowName_LORDNUM":     10,
		"HomePageShowName_SKINNUM":     11,
	}
)

func (x ResHomePageShowDataBin_HomePageShowName) Enum() *ResHomePageShowDataBin_HomePageShowName {
	p := new(ResHomePageShowDataBin_HomePageShowName)
	*p = x
	return p
}

func (x ResHomePageShowDataBin_HomePageShowName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResHomePageShowDataBin_HomePageShowName) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_proto_enumTypes[174].Descriptor()
}

func (ResHomePageShowDataBin_HomePageShowName) Type() protoreflect.EnumType {
	return &file_os_res_data_proto_enumTypes[174]
}

func (x ResHomePageShowDataBin_HomePageShowName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResHomePageShowDataBin_HomePageShowName.Descriptor instead.
func (ResHomePageShowDataBin_HomePageShowName) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{342, 0}
}

//####通用结构-开始####
type ResWhiteListCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GOpenID    string `protobuf:"bytes,1,opt,name=GOpenID,proto3" json:"GOpenID,omitempty"`
	DeviceUUID string `protobuf:"bytes,2,opt,name=DeviceUUID,proto3" json:"DeviceUUID,omitempty"`
}

func (x *ResWhiteListCfg) Reset() {
	*x = ResWhiteListCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResWhiteListCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResWhiteListCfg) ProtoMessage() {}

func (x *ResWhiteListCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResWhiteListCfg.ProtoReflect.Descriptor instead.
func (*ResWhiteListCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{0}
}

func (x *ResWhiteListCfg) GetGOpenID() string {
	if x != nil {
		return x.GOpenID
	}
	return ""
}

func (x *ResWhiteListCfg) GetDeviceUUID() string {
	if x != nil {
		return x.DeviceUUID
	}
	return ""
}

type ResBlackListCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GOpenID string `protobuf:"bytes,1,opt,name=GOpenID,proto3" json:"GOpenID,omitempty"`
	WorldID uint32 `protobuf:"varint,2,opt,name=WorldID,proto3" json:"WorldID,omitempty"`
}

func (x *ResBlackListCfg) Reset() {
	*x = ResBlackListCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResBlackListCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResBlackListCfg) ProtoMessage() {}

func (x *ResBlackListCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResBlackListCfg.ProtoReflect.Descriptor instead.
func (*ResBlackListCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{1}
}

func (x *ResBlackListCfg) GetGOpenID() string {
	if x != nil {
		return x.GOpenID
	}
	return ""
}

func (x *ResBlackListCfg) GetWorldID() uint32 {
	if x != nil {
		return x.WorldID
	}
	return 0
}

type WhiteListConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WhiteList *ResWhiteListCfg `protobuf:"bytes,1,opt,name=WhiteList,proto3" json:"WhiteList,omitempty"`
	BlackList *ResBlackListCfg `protobuf:"bytes,2,opt,name=BlackList,proto3" json:"BlackList,omitempty"`
}

func (x *WhiteListConf) Reset() {
	*x = WhiteListConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WhiteListConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhiteListConf) ProtoMessage() {}

func (x *WhiteListConf) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhiteListConf.ProtoReflect.Descriptor instead.
func (*WhiteListConf) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{2}
}

func (x *WhiteListConf) GetWhiteList() *ResWhiteListCfg {
	if x != nil {
		return x.WhiteList
	}
	return nil
}

func (x *WhiteListConf) GetBlackList() *ResBlackListCfg {
	if x != nil {
		return x.BlackList
	}
	return nil
}

type ResZoneRegisterCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogicWorldId         uint32 `protobuf:"varint,1,opt,name=LogicWorldId,proto3" json:"LogicWorldId,omitempty"`
	TotalRegisterNum     uint32 `protobuf:"varint,2,opt,name=TotalRegisterNum,proto3" json:"TotalRegisterNum,omitempty"`
	MaxRegisterNumPerDay uint32 `protobuf:"varint,3,opt,name=MaxRegisterNumPerDay,proto3" json:"MaxRegisterNumPerDay,omitempty"`
	FakeRegisterNum      uint32 `protobuf:"varint,4,opt,name=FakeRegisterNum,proto3" json:"FakeRegisterNum,omitempty"`
	MaxOnlineNum         uint32 `protobuf:"varint,5,opt,name=MaxOnlineNum,proto3" json:"MaxOnlineNum,omitempty"`
	WhiteListLimit       uint32 `protobuf:"varint,6,opt,name=WhiteListLimit,proto3" json:"WhiteListLimit,omitempty"`
	BelongZoneID         uint32 `protobuf:"varint,7,opt,name=BelongZoneID,proto3" json:"BelongZoneID,omitempty"`
}

func (x *ResZoneRegisterCfg) Reset() {
	*x = ResZoneRegisterCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResZoneRegisterCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResZoneRegisterCfg) ProtoMessage() {}

func (x *ResZoneRegisterCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResZoneRegisterCfg.ProtoReflect.Descriptor instead.
func (*ResZoneRegisterCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{3}
}

func (x *ResZoneRegisterCfg) GetLogicWorldId() uint32 {
	if x != nil {
		return x.LogicWorldId
	}
	return 0
}

func (x *ResZoneRegisterCfg) GetTotalRegisterNum() uint32 {
	if x != nil {
		return x.TotalRegisterNum
	}
	return 0
}

func (x *ResZoneRegisterCfg) GetMaxRegisterNumPerDay() uint32 {
	if x != nil {
		return x.MaxRegisterNumPerDay
	}
	return 0
}

func (x *ResZoneRegisterCfg) GetFakeRegisterNum() uint32 {
	if x != nil {
		return x.FakeRegisterNum
	}
	return 0
}

func (x *ResZoneRegisterCfg) GetMaxOnlineNum() uint32 {
	if x != nil {
		return x.MaxOnlineNum
	}
	return 0
}

func (x *ResZoneRegisterCfg) GetWhiteListLimit() uint32 {
	if x != nil {
		return x.WhiteListLimit
	}
	return 0
}

func (x *ResZoneRegisterCfg) GetBelongZoneID() uint32 {
	if x != nil {
		return x.BelongZoneID
	}
	return 0
}

type ResGlobalTxtInfoCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxtConfType uint32 `protobuf:"varint,1,opt,name=TxtConfType,proto3" json:"TxtConfType,omitempty"`
	TextVal     string `protobuf:"bytes,2,opt,name=TextVal,proto3" json:"TextVal,omitempty"`
}

func (x *ResGlobalTxtInfoCfg) Reset() {
	*x = ResGlobalTxtInfoCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGlobalTxtInfoCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGlobalTxtInfoCfg) ProtoMessage() {}

func (x *ResGlobalTxtInfoCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGlobalTxtInfoCfg.ProtoReflect.Descriptor instead.
func (*ResGlobalTxtInfoCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{4}
}

func (x *ResGlobalTxtInfoCfg) GetTxtConfType() uint32 {
	if x != nil {
		return x.TxtConfType
	}
	return 0
}

func (x *ResGlobalTxtInfoCfg) GetTextVal() string {
	if x != nil {
		return x.TextVal
	}
	return ""
}

type ResMatchPoolCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameType           uint32 `protobuf:"varint,1,opt,name=GameType,proto3" json:"GameType,omitempty"`
	GameTypeSubID      uint32 `protobuf:"varint,11,opt,name=GameTypeSubID,proto3" json:"GameTypeSubID,omitempty"`
	MatchMemberNum     uint32 `protobuf:"varint,2,opt,name=MatchMemberNum,proto3" json:"MatchMemberNum,omitempty"`
	MatchScoreMin      uint32 `protobuf:"varint,3,opt,name=MatchScoreMin,proto3" json:"MatchScoreMin,omitempty"`
	MatchScoreMax      uint32 `protobuf:"varint,4,opt,name=MatchScoreMax,proto3" json:"MatchScoreMax,omitempty"`
	MatchTimeoutMs     uint32 `protobuf:"varint,10,opt,name=MatchTimeoutMs,proto3" json:"MatchTimeoutMs,omitempty"`
	MatchResultConfirm uint32 `protobuf:"varint,12,opt,name=MatchResultConfirm,proto3" json:"MatchResultConfirm,omitempty"`
	MatchPageSize      uint32 `protobuf:"varint,13,opt,name=MatchPageSize,proto3" json:"MatchPageSize,omitempty"`
	AIConfirmSec       uint32 `protobuf:"varint,14,opt,name=AIConfirmSec,proto3" json:"AIConfirmSec,omitempty"`
}

func (x *ResMatchPoolCfg) Reset() {
	*x = ResMatchPoolCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResMatchPoolCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResMatchPoolCfg) ProtoMessage() {}

func (x *ResMatchPoolCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResMatchPoolCfg.ProtoReflect.Descriptor instead.
func (*ResMatchPoolCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{5}
}

func (x *ResMatchPoolCfg) GetGameType() uint32 {
	if x != nil {
		return x.GameType
	}
	return 0
}

func (x *ResMatchPoolCfg) GetGameTypeSubID() uint32 {
	if x != nil {
		return x.GameTypeSubID
	}
	return 0
}

func (x *ResMatchPoolCfg) GetMatchMemberNum() uint32 {
	if x != nil {
		return x.MatchMemberNum
	}
	return 0
}

func (x *ResMatchPoolCfg) GetMatchScoreMin() uint32 {
	if x != nil {
		return x.MatchScoreMin
	}
	return 0
}

func (x *ResMatchPoolCfg) GetMatchScoreMax() uint32 {
	if x != nil {
		return x.MatchScoreMax
	}
	return 0
}

func (x *ResMatchPoolCfg) GetMatchTimeoutMs() uint32 {
	if x != nil {
		return x.MatchTimeoutMs
	}
	return 0
}

func (x *ResMatchPoolCfg) GetMatchResultConfirm() uint32 {
	if x != nil {
		return x.MatchResultConfirm
	}
	return 0
}

func (x *ResMatchPoolCfg) GetMatchPageSize() uint32 {
	if x != nil {
		return x.MatchPageSize
	}
	return 0
}

func (x *ResMatchPoolCfg) GetAIConfirmSec() uint32 {
	if x != nil {
		return x.AIConfirmSec
	}
	return 0
}

// 不同段位对应的匹配段位范围
type ResMatchRankRangeCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameType      uint32 `protobuf:"varint,1,opt,name=GameType,proto3" json:"GameType,omitempty"`
	GameTypeSubID uint32 `protobuf:"varint,2,opt,name=GameTypeSubID,proto3" json:"GameTypeSubID,omitempty"`
	Rank          uint32 `protobuf:"varint,3,opt,name=Rank,proto3" json:"Rank,omitempty"`
	Level         uint32 `protobuf:"varint,4,opt,name=Level,proto3" json:"Level,omitempty"`
	MinRank       uint32 `protobuf:"varint,6,opt,name=MinRank,proto3" json:"MinRank,omitempty"`
	MinLevel      uint32 `protobuf:"varint,7,opt,name=MinLevel,proto3" json:"MinLevel,omitempty"`
	MaxRank       uint32 `protobuf:"varint,9,opt,name=MaxRank,proto3" json:"MaxRank,omitempty"`
	MaxLevel      uint32 `protobuf:"varint,10,opt,name=MaxLevel,proto3" json:"MaxLevel,omitempty"`
}

func (x *ResMatchRankRangeCfg) Reset() {
	*x = ResMatchRankRangeCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResMatchRankRangeCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResMatchRankRangeCfg) ProtoMessage() {}

func (x *ResMatchRankRangeCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResMatchRankRangeCfg.ProtoReflect.Descriptor instead.
func (*ResMatchRankRangeCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{6}
}

func (x *ResMatchRankRangeCfg) GetGameType() uint32 {
	if x != nil {
		return x.GameType
	}
	return 0
}

func (x *ResMatchRankRangeCfg) GetGameTypeSubID() uint32 {
	if x != nil {
		return x.GameTypeSubID
	}
	return 0
}

func (x *ResMatchRankRangeCfg) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *ResMatchRankRangeCfg) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ResMatchRankRangeCfg) GetMinRank() uint32 {
	if x != nil {
		return x.MinRank
	}
	return 0
}

func (x *ResMatchRankRangeCfg) GetMinLevel() uint32 {
	if x != nil {
		return x.MinLevel
	}
	return 0
}

func (x *ResMatchRankRangeCfg) GetMaxRank() uint32 {
	if x != nil {
		return x.MaxRank
	}
	return 0
}

func (x *ResMatchRankRangeCfg) GetMaxLevel() uint32 {
	if x != nil {
		return x.MaxLevel
	}
	return 0
}

type ResMatchAIDistribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID     uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Weight uint32 `protobuf:"varint,2,opt,name=Weight,proto3" json:"Weight,omitempty"`
}

func (x *ResMatchAIDistribution) Reset() {
	*x = ResMatchAIDistribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResMatchAIDistribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResMatchAIDistribution) ProtoMessage() {}

func (x *ResMatchAIDistribution) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResMatchAIDistribution.ProtoReflect.Descriptor instead.
func (*ResMatchAIDistribution) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{7}
}

func (x *ResMatchAIDistribution) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResMatchAIDistribution) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type ResMatchStrategyRadiusInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchRadiusBase     uint32 `protobuf:"varint,7,opt,name=MatchRadiusBase,proto3" json:"MatchRadiusBase,omitempty"`
	MatchRadiusIncrBase uint32 `protobuf:"varint,8,opt,name=MatchRadiusIncrBase,proto3" json:"MatchRadiusIncrBase,omitempty"`
	MatchRadiusIncr     uint32 `protobuf:"varint,9,opt,name=MatchRadiusIncr,proto3" json:"MatchRadiusIncr,omitempty"`
	MatchRadiusIncrMax  uint32 `protobuf:"varint,10,opt,name=MatchRadiusIncrMax,proto3" json:"MatchRadiusIncrMax,omitempty"`
}

func (x *ResMatchStrategyRadiusInfo) Reset() {
	*x = ResMatchStrategyRadiusInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResMatchStrategyRadiusInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResMatchStrategyRadiusInfo) ProtoMessage() {}

func (x *ResMatchStrategyRadiusInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResMatchStrategyRadiusInfo.ProtoReflect.Descriptor instead.
func (*ResMatchStrategyRadiusInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{8}
}

func (x *ResMatchStrategyRadiusInfo) GetMatchRadiusBase() uint32 {
	if x != nil {
		return x.MatchRadiusBase
	}
	return 0
}

func (x *ResMatchStrategyRadiusInfo) GetMatchRadiusIncrBase() uint32 {
	if x != nil {
		return x.MatchRadiusIncrBase
	}
	return 0
}

func (x *ResMatchStrategyRadiusInfo) GetMatchRadiusIncr() uint32 {
	if x != nil {
		return x.MatchRadiusIncr
	}
	return 0
}

func (x *ResMatchStrategyRadiusInfo) GetMatchRadiusIncrMax() uint32 {
	if x != nil {
		return x.MatchRadiusIncrMax
	}
	return 0
}

type ResMatchStrategyCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameType              uint32                      `protobuf:"varint,1,opt,name=GameType,proto3" json:"GameType,omitempty"`
	GameTypeSubID         uint32                      `protobuf:"varint,2,opt,name=GameTypeSubID,proto3" json:"GameTypeSubID,omitempty"`
	MatchScoreRangeMin    uint32                      `protobuf:"varint,3,opt,name=MatchScoreRangeMin,proto3" json:"MatchScoreRangeMin,omitempty"`
	MatchScoreRangeMax    uint32                      `protobuf:"varint,4,opt,name=MatchScoreRangeMax,proto3" json:"MatchScoreRangeMax,omitempty"`
	MinMemberNum          uint32                      `protobuf:"varint,5,opt,name=MinMemberNum,proto3" json:"MinMemberNum,omitempty"`
	MaxMemberNum          uint32                      `protobuf:"varint,6,opt,name=MaxMemberNum,proto3" json:"MaxMemberNum,omitempty"`
	EloRadius             *ResMatchStrategyRadiusInfo `protobuf:"bytes,7,opt,name=EloRadius,proto3" json:"EloRadius,omitempty"`
	RankRadius            *ResMatchStrategyRadiusInfo `protobuf:"bytes,8,opt,name=RankRadius,proto3" json:"RankRadius,omitempty"`
	MatchRadiusUpdateFreq uint32                      `protobuf:"varint,11,opt,name=MatchRadiusUpdateFreq,proto3" json:"MatchRadiusUpdateFreq,omitempty"`
	AITimeoutMs           uint32                      `protobuf:"varint,12,opt,name=AITimeoutMs,proto3" json:"AITimeoutMs,omitempty"`
	AIDistribution        []*ResMatchAIDistribution   `protobuf:"bytes,13,rep,name=AIDistribution,proto3" json:"AIDistribution,omitempty"`
}

func (x *ResMatchStrategyCfg) Reset() {
	*x = ResMatchStrategyCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResMatchStrategyCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResMatchStrategyCfg) ProtoMessage() {}

func (x *ResMatchStrategyCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResMatchStrategyCfg.ProtoReflect.Descriptor instead.
func (*ResMatchStrategyCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{9}
}

func (x *ResMatchStrategyCfg) GetGameType() uint32 {
	if x != nil {
		return x.GameType
	}
	return 0
}

func (x *ResMatchStrategyCfg) GetGameTypeSubID() uint32 {
	if x != nil {
		return x.GameTypeSubID
	}
	return 0
}

func (x *ResMatchStrategyCfg) GetMatchScoreRangeMin() uint32 {
	if x != nil {
		return x.MatchScoreRangeMin
	}
	return 0
}

func (x *ResMatchStrategyCfg) GetMatchScoreRangeMax() uint32 {
	if x != nil {
		return x.MatchScoreRangeMax
	}
	return 0
}

func (x *ResMatchStrategyCfg) GetMinMemberNum() uint32 {
	if x != nil {
		return x.MinMemberNum
	}
	return 0
}

func (x *ResMatchStrategyCfg) GetMaxMemberNum() uint32 {
	if x != nil {
		return x.MaxMemberNum
	}
	return 0
}

func (x *ResMatchStrategyCfg) GetEloRadius() *ResMatchStrategyRadiusInfo {
	if x != nil {
		return x.EloRadius
	}
	return nil
}

func (x *ResMatchStrategyCfg) GetRankRadius() *ResMatchStrategyRadiusInfo {
	if x != nil {
		return x.RankRadius
	}
	return nil
}

func (x *ResMatchStrategyCfg) GetMatchRadiusUpdateFreq() uint32 {
	if x != nil {
		return x.MatchRadiusUpdateFreq
	}
	return 0
}

func (x *ResMatchStrategyCfg) GetAITimeoutMs() uint32 {
	if x != nil {
		return x.AITimeoutMs
	}
	return 0
}

func (x *ResMatchStrategyCfg) GetAIDistribution() []*ResMatchAIDistribution {
	if x != nil {
		return x.AIDistribution
	}
	return nil
}

type MatchConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchStrategyCfg *ResMatchStrategyCfg `protobuf:"bytes,1,opt,name=MatchStrategyCfg,proto3" json:"MatchStrategyCfg,omitempty"`
	MatchPoolCfg     *ResMatchPoolCfg     `protobuf:"bytes,2,opt,name=MatchPoolCfg,proto3" json:"MatchPoolCfg,omitempty"`
}

func (x *MatchConf) Reset() {
	*x = MatchConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchConf) ProtoMessage() {}

func (x *MatchConf) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchConf.ProtoReflect.Descriptor instead.
func (*MatchConf) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{10}
}

func (x *MatchConf) GetMatchStrategyCfg() *ResMatchStrategyCfg {
	if x != nil {
		return x.MatchStrategyCfg
	}
	return nil
}

func (x *MatchConf) GetMatchPoolCfg() *ResMatchPoolCfg {
	if x != nil {
		return x.MatchPoolCfg
	}
	return nil
}

type ResAIShowCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                  uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Group               uint32 `protobuf:"varint,2,opt,name=Group,proto3" json:"Group,omitempty"`
	HeadID              uint32 `protobuf:"varint,3,opt,name=HeadID,proto3" json:"HeadID,omitempty"`
	HeadFrameID         uint32 `protobuf:"varint,4,opt,name=HeadFrameID,proto3" json:"HeadFrameID,omitempty"`
	IsUseProficieny     bool   `protobuf:"varint,5,opt,name=IsUseProficieny,proto3" json:"IsUseProficieny,omitempty"`
	MinLordProficienyLv uint32 `protobuf:"varint,6,opt,name=MinLordProficienyLv,proto3" json:"MinLordProficienyLv,omitempty"`
	MaxLordProficienyLv uint32 `protobuf:"varint,7,opt,name=MaxLordProficienyLv,proto3" json:"MaxLordProficienyLv,omitempty"`
	MinLordPowerScore   uint32 `protobuf:"varint,8,opt,name=MinLordPowerScore,proto3" json:"MinLordPowerScore,omitempty"`
	MaxLordPowerScore   uint32 `protobuf:"varint,9,opt,name=MaxLordPowerScore,proto3" json:"MaxLordPowerScore,omitempty"`
	MinTop1Count        uint32 `protobuf:"varint,10,opt,name=MinTop1Count,proto3" json:"MinTop1Count,omitempty"`
	MaxTop1Count        uint32 `protobuf:"varint,11,opt,name=MaxTop1Count,proto3" json:"MaxTop1Count,omitempty"`
	MinTop4Count        uint32 `protobuf:"varint,12,opt,name=MinTop4Count,proto3" json:"MinTop4Count,omitempty"`
	MaxTop4Count        uint32 `protobuf:"varint,13,opt,name=MaxTop4Count,proto3" json:"MaxTop4Count,omitempty"`
	MinGameCount        uint32 `protobuf:"varint,14,opt,name=MinGameCount,proto3" json:"MinGameCount,omitempty"`
	MaxGameCount        uint32 `protobuf:"varint,15,opt,name=MaxGameCount,proto3" json:"MaxGameCount,omitempty"`
	MinCommonUseCount   uint32 `protobuf:"varint,16,opt,name=MinCommonUseCount,proto3" json:"MinCommonUseCount,omitempty"`
	MaxCommonUsecount   uint32 `protobuf:"varint,17,opt,name=MaxCommonUsecount,proto3" json:"MaxCommonUsecount,omitempty"`
}

func (x *ResAIShowCfg) Reset() {
	*x = ResAIShowCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResAIShowCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResAIShowCfg) ProtoMessage() {}

func (x *ResAIShowCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResAIShowCfg.ProtoReflect.Descriptor instead.
func (*ResAIShowCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{11}
}

func (x *ResAIShowCfg) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResAIShowCfg) GetGroup() uint32 {
	if x != nil {
		return x.Group
	}
	return 0
}

func (x *ResAIShowCfg) GetHeadID() uint32 {
	if x != nil {
		return x.HeadID
	}
	return 0
}

func (x *ResAIShowCfg) GetHeadFrameID() uint32 {
	if x != nil {
		return x.HeadFrameID
	}
	return 0
}

func (x *ResAIShowCfg) GetIsUseProficieny() bool {
	if x != nil {
		return x.IsUseProficieny
	}
	return false
}

func (x *ResAIShowCfg) GetMinLordProficienyLv() uint32 {
	if x != nil {
		return x.MinLordProficienyLv
	}
	return 0
}

func (x *ResAIShowCfg) GetMaxLordProficienyLv() uint32 {
	if x != nil {
		return x.MaxLordProficienyLv
	}
	return 0
}

func (x *ResAIShowCfg) GetMinLordPowerScore() uint32 {
	if x != nil {
		return x.MinLordPowerScore
	}
	return 0
}

func (x *ResAIShowCfg) GetMaxLordPowerScore() uint32 {
	if x != nil {
		return x.MaxLordPowerScore
	}
	return 0
}

func (x *ResAIShowCfg) GetMinTop1Count() uint32 {
	if x != nil {
		return x.MinTop1Count
	}
	return 0
}

func (x *ResAIShowCfg) GetMaxTop1Count() uint32 {
	if x != nil {
		return x.MaxTop1Count
	}
	return 0
}

func (x *ResAIShowCfg) GetMinTop4Count() uint32 {
	if x != nil {
		return x.MinTop4Count
	}
	return 0
}

func (x *ResAIShowCfg) GetMaxTop4Count() uint32 {
	if x != nil {
		return x.MaxTop4Count
	}
	return 0
}

func (x *ResAIShowCfg) GetMinGameCount() uint32 {
	if x != nil {
		return x.MinGameCount
	}
	return 0
}

func (x *ResAIShowCfg) GetMaxGameCount() uint32 {
	if x != nil {
		return x.MaxGameCount
	}
	return 0
}

func (x *ResAIShowCfg) GetMinCommonUseCount() uint32 {
	if x != nil {
		return x.MinCommonUseCount
	}
	return 0
}

func (x *ResAIShowCfg) GetMaxCommonUsecount() uint32 {
	if x != nil {
		return x.MaxCommonUsecount
	}
	return 0
}

type ResGameItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemType uint32 `protobuf:"varint,1,opt,name=ItemType,proto3" json:"ItemType,omitempty"`
	ItemID   uint32 `protobuf:"varint,2,opt,name=ItemID,proto3" json:"ItemID,omitempty"`
	ItemCnt  uint32 `protobuf:"varint,3,opt,name=ItemCnt,proto3" json:"ItemCnt,omitempty"`
}

func (x *ResGameItem) Reset() {
	*x = ResGameItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGameItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGameItem) ProtoMessage() {}

func (x *ResGameItem) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGameItem.ProtoReflect.Descriptor instead.
func (*ResGameItem) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{12}
}

func (x *ResGameItem) GetItemType() uint32 {
	if x != nil {
		return x.ItemType
	}
	return 0
}

func (x *ResGameItem) GetItemID() uint32 {
	if x != nil {
		return x.ItemID
	}
	return 0
}

func (x *ResGameItem) GetItemCnt() uint32 {
	if x != nil {
		return x.ItemCnt
	}
	return 0
}

type ResEnableInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled       bool   `protobuf:"varint,1,opt,name=Enabled,proto3" json:"Enabled,omitempty"`
	EnableTimeStr string `protobuf:"bytes,2,opt,name=EnableTimeStr,proto3" json:"EnableTimeStr,omitempty"`
	EnableTimeGen uint32 `protobuf:"varint,3,opt,name=EnableTimeGen,proto3" json:"EnableTimeGen,omitempty"`
	DefaultShow   bool   `protobuf:"varint,4,opt,name=DefaultShow,proto3" json:"DefaultShow,omitempty"`
}

func (x *ResEnableInfo) Reset() {
	*x = ResEnableInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResEnableInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResEnableInfo) ProtoMessage() {}

func (x *ResEnableInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResEnableInfo.ProtoReflect.Descriptor instead.
func (*ResEnableInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{13}
}

func (x *ResEnableInfo) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ResEnableInfo) GetEnableTimeStr() string {
	if x != nil {
		return x.EnableTimeStr
	}
	return ""
}

func (x *ResEnableInfo) GetEnableTimeGen() uint32 {
	if x != nil {
		return x.EnableTimeGen
	}
	return 0
}

func (x *ResEnableInfo) GetDefaultShow() bool {
	if x != nil {
		return x.DefaultShow
	}
	return false
}

type ResCommonConstCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	IntParam1    uint32 `protobuf:"varint,2,opt,name=IntParam1,proto3" json:"IntParam1,omitempty"`
	IntParam2    uint32 `protobuf:"varint,3,opt,name=IntParam2,proto3" json:"IntParam2,omitempty"`
	IntParam3    uint32 `protobuf:"varint,4,opt,name=IntParam3,proto3" json:"IntParam3,omitempty"`
	StringParam1 string `protobuf:"bytes,5,opt,name=StringParam1,proto3" json:"StringParam1,omitempty"`
	StringParam2 string `protobuf:"bytes,6,opt,name=StringParam2,proto3" json:"StringParam2,omitempty"`
	StringParam3 string `protobuf:"bytes,7,opt,name=StringParam3,proto3" json:"StringParam3,omitempty"`
}

func (x *ResCommonConstCfg) Reset() {
	*x = ResCommonConstCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResCommonConstCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResCommonConstCfg) ProtoMessage() {}

func (x *ResCommonConstCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResCommonConstCfg.ProtoReflect.Descriptor instead.
func (*ResCommonConstCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{14}
}

func (x *ResCommonConstCfg) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResCommonConstCfg) GetIntParam1() uint32 {
	if x != nil {
		return x.IntParam1
	}
	return 0
}

func (x *ResCommonConstCfg) GetIntParam2() uint32 {
	if x != nil {
		return x.IntParam2
	}
	return 0
}

func (x *ResCommonConstCfg) GetIntParam3() uint32 {
	if x != nil {
		return x.IntParam3
	}
	return 0
}

func (x *ResCommonConstCfg) GetStringParam1() string {
	if x != nil {
		return x.StringParam1
	}
	return ""
}

func (x *ResCommonConstCfg) GetStringParam2() string {
	if x != nil {
		return x.StringParam2
	}
	return ""
}

func (x *ResCommonConstCfg) GetStringParam3() string {
	if x != nil {
		return x.StringParam3
	}
	return ""
}

type ResAudioMiscConstCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	EventName string `protobuf:"bytes,2,opt,name=EventName,proto3" json:"EventName,omitempty"`
	BankName  string `protobuf:"bytes,3,opt,name=BankName,proto3" json:"BankName,omitempty"`
}

func (x *ResAudioMiscConstCfg) Reset() {
	*x = ResAudioMiscConstCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResAudioMiscConstCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResAudioMiscConstCfg) ProtoMessage() {}

func (x *ResAudioMiscConstCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResAudioMiscConstCfg.ProtoReflect.Descriptor instead.
func (*ResAudioMiscConstCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{15}
}

func (x *ResAudioMiscConstCfg) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResAudioMiscConstCfg) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *ResAudioMiscConstCfg) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

type ResPlayMod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniqID            PLAYMOD_TYPE `protobuf:"varint,1,opt,name=UniqID,proto3,enum=ResData.PLAYMOD_TYPE" json:"UniqID,omitempty"`
	MainName          string       `protobuf:"bytes,3,opt,name=MainName,proto3" json:"MainName,omitempty"`
	SubName           string       `protobuf:"bytes,5,opt,name=SubName,proto3" json:"SubName,omitempty"`
	MatFoldPath       string       `protobuf:"bytes,6,opt,name=MatFoldPath,proto3" json:"MatFoldPath,omitempty"`
	MatPostfix        string       `protobuf:"bytes,7,opt,name=MatPostfix,proto3" json:"MatPostfix,omitempty"`
	ExportPreloadName string       `protobuf:"bytes,8,opt,name=ExportPreloadName,proto3" json:"ExportPreloadName,omitempty"`
	UsePreloadName    string       `protobuf:"bytes,9,opt,name=UsePreloadName,proto3" json:"UsePreloadName,omitempty"`
}

func (x *ResPlayMod) Reset() {
	*x = ResPlayMod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResPlayMod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResPlayMod) ProtoMessage() {}

func (x *ResPlayMod) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResPlayMod.ProtoReflect.Descriptor instead.
func (*ResPlayMod) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{16}
}

func (x *ResPlayMod) GetUniqID() PLAYMOD_TYPE {
	if x != nil {
		return x.UniqID
	}
	return PLAYMOD_TYPE_PLAYMOD_None
}

func (x *ResPlayMod) GetMainName() string {
	if x != nil {
		return x.MainName
	}
	return ""
}

func (x *ResPlayMod) GetSubName() string {
	if x != nil {
		return x.SubName
	}
	return ""
}

func (x *ResPlayMod) GetMatFoldPath() string {
	if x != nil {
		return x.MatFoldPath
	}
	return ""
}

func (x *ResPlayMod) GetMatPostfix() string {
	if x != nil {
		return x.MatPostfix
	}
	return ""
}

func (x *ResPlayMod) GetExportPreloadName() string {
	if x != nil {
		return x.ExportPreloadName
	}
	return ""
}

func (x *ResPlayMod) GetUsePreloadName() string {
	if x != nil {
		return x.UsePreloadName
	}
	return ""
}

type ResRandNameComb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix   string            `protobuf:"bytes,1,opt,name=Prefix,proto3" json:"Prefix,omitempty"`
	Connect  string            `protobuf:"bytes,2,opt,name=Connect,proto3" json:"Connect,omitempty"`
	Suffix   string            `protobuf:"bytes,3,opt,name=Suffix,proto3" json:"Suffix,omitempty"`
	Language GAMELANGUAGE_TYPE `protobuf:"varint,4,opt,name=Language,proto3,enum=ResData.GAMELANGUAGE_TYPE" json:"Language,omitempty"`
}

func (x *ResRandNameComb) Reset() {
	*x = ResRandNameComb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResRandNameComb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResRandNameComb) ProtoMessage() {}

func (x *ResRandNameComb) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResRandNameComb.ProtoReflect.Descriptor instead.
func (*ResRandNameComb) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{17}
}

func (x *ResRandNameComb) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *ResRandNameComb) GetConnect() string {
	if x != nil {
		return x.Connect
	}
	return ""
}

func (x *ResRandNameComb) GetSuffix() string {
	if x != nil {
		return x.Suffix
	}
	return ""
}

func (x *ResRandNameComb) GetLanguage() GAMELANGUAGE_TYPE {
	if x != nil {
		return x.Language
	}
	return GAMELANGUAGE_TYPE_GAMELANGUAGE_TYPE_None
}

type GlobalMiscConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommParam    *ResCommonConstCfg      `protobuf:"bytes,1,opt,name=CommParam,proto3" json:"CommParam,omitempty"`
	RandNameComb *ResRandNameComb        `protobuf:"bytes,3,opt,name=RandNameComb,proto3" json:"RandNameComb,omitempty"`
	AIShowCfg    *ResAIShowCfg           `protobuf:"bytes,4,opt,name=AIShowCfg,proto3" json:"AIShowCfg,omitempty"`
	LanguageCfg  *ResDistrictLanguageCfg `protobuf:"bytes,6,opt,name=LanguageCfg,proto3" json:"LanguageCfg,omitempty"`
}

func (x *GlobalMiscConf) Reset() {
	*x = GlobalMiscConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalMiscConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalMiscConf) ProtoMessage() {}

func (x *GlobalMiscConf) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalMiscConf.ProtoReflect.Descriptor instead.
func (*GlobalMiscConf) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{18}
}

func (x *GlobalMiscConf) GetCommParam() *ResCommonConstCfg {
	if x != nil {
		return x.CommParam
	}
	return nil
}

func (x *GlobalMiscConf) GetRandNameComb() *ResRandNameComb {
	if x != nil {
		return x.RandNameComb
	}
	return nil
}

func (x *GlobalMiscConf) GetAIShowCfg() *ResAIShowCfg {
	if x != nil {
		return x.AIShowCfg
	}
	return nil
}

func (x *GlobalMiscConf) GetLanguageCfg() *ResDistrictLanguageCfg {
	if x != nil {
		return x.LanguageCfg
	}
	return nil
}

// 游戏模式分组情况
type ResGameTypeGroupCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameType  COM_GAME_TYPE      `protobuf:"varint,1,opt,name=GameType,proto3,enum=ResData.COM_GAME_TYPE" json:"GameType,omitempty"`
	GameGroup COM_GAMETYPE_GROUP `protobuf:"varint,2,opt,name=GameGroup,proto3,enum=ResData.COM_GAMETYPE_GROUP" json:"GameGroup,omitempty"`
}

func (x *ResGameTypeGroupCfg) Reset() {
	*x = ResGameTypeGroupCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGameTypeGroupCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGameTypeGroupCfg) ProtoMessage() {}

func (x *ResGameTypeGroupCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGameTypeGroupCfg.ProtoReflect.Descriptor instead.
func (*ResGameTypeGroupCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{19}
}

func (x *ResGameTypeGroupCfg) GetGameType() COM_GAME_TYPE {
	if x != nil {
		return x.GameType
	}
	return COM_GAME_TYPE_COM_GAME_TYPE_NULL
}

func (x *ResGameTypeGroupCfg) GetGameGroup() COM_GAMETYPE_GROUP {
	if x != nil {
		return x.GameGroup
	}
	return COM_GAMETYPE_GROUP_GAMETYPE_GROUP_NULL
}

// 游戏类型组所属表
type ResGameTypeGrpBelongCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID  uint32        `protobuf:"varint,1,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	GameType COM_GAME_TYPE `protobuf:"varint,2,opt,name=GameType,proto3,enum=ResData.COM_GAME_TYPE" json:"GameType,omitempty"`
}

func (x *ResGameTypeGrpBelongCfg) Reset() {
	*x = ResGameTypeGrpBelongCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGameTypeGrpBelongCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGameTypeGrpBelongCfg) ProtoMessage() {}

func (x *ResGameTypeGrpBelongCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGameTypeGrpBelongCfg.ProtoReflect.Descriptor instead.
func (*ResGameTypeGrpBelongCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{20}
}

func (x *ResGameTypeGrpBelongCfg) GetGroupID() uint32 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *ResGameTypeGrpBelongCfg) GetGameType() COM_GAME_TYPE {
	if x != nil {
		return x.GameType
	}
	return COM_GAME_TYPE_COM_GAME_TYPE_NULL
}

type GameTypeConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameTypeGroup     *ResGameTypeGroupCfg     `protobuf:"bytes,1,opt,name=GameTypeGroup,proto3" json:"GameTypeGroup,omitempty"`
	GameTypeGrpBelong *ResGameTypeGrpBelongCfg `protobuf:"bytes,2,opt,name=GameTypeGrpBelong,proto3" json:"GameTypeGrpBelong,omitempty"`
}

func (x *GameTypeConf) Reset() {
	*x = GameTypeConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameTypeConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameTypeConf) ProtoMessage() {}

func (x *GameTypeConf) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameTypeConf.ProtoReflect.Descriptor instead.
func (*GameTypeConf) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{21}
}

func (x *GameTypeConf) GetGameTypeGroup() *ResGameTypeGroupCfg {
	if x != nil {
		return x.GameTypeGroup
	}
	return nil
}

func (x *GameTypeConf) GetGameTypeGrpBelong() *ResGameTypeGrpBelongCfg {
	if x != nil {
		return x.GameTypeGrpBelong
	}
	return nil
}

// 道具配置
type ResItemPropCfgDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               uint32   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name             string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	BigIcon          string   `protobuf:"bytes,3,opt,name=BigIcon,proto3" json:"BigIcon,omitempty"`
	Icon             string   `protobuf:"bytes,4,opt,name=Icon,proto3" json:"Icon,omitempty"`
	Quality          uint32   `protobuf:"varint,5,opt,name=Quality,proto3" json:"Quality,omitempty"`
	Type             uint32   `protobuf:"varint,6,opt,name=Type,proto3" json:"Type,omitempty"`
	Desc             string   `protobuf:"bytes,7,opt,name=Desc,proto3" json:"Desc,omitempty"`
	ShowTab          uint32   `protobuf:"varint,8,opt,name=ShowTab,proto3" json:"ShowTab,omitempty"`
	ShowSort         uint32   `protobuf:"varint,9,opt,name=ShowSort,proto3" json:"ShowSort,omitempty"`
	UseType          uint32   `protobuf:"varint,10,opt,name=UseType,proto3" json:"UseType,omitempty"`
	OverLimit        uint32   `protobuf:"varint,11,opt,name=OverLimit,proto3" json:"OverLimit,omitempty"`
	OverLimitGetType uint32   `protobuf:"varint,12,opt,name=OverLimitGetType,proto3" json:"OverLimitGetType,omitempty"`
	ValidTimeType    uint32   `protobuf:"varint,13,opt,name=ValidTimeType,proto3" json:"ValidTimeType,omitempty"`
	UseStartTimeStr  string   `protobuf:"bytes,14,opt,name=UseStartTimeStr,proto3" json:"UseStartTimeStr,omitempty"`
	UseEndTimeStr    string   `protobuf:"bytes,15,opt,name=UseEndTimeStr,proto3" json:"UseEndTimeStr,omitempty"`
	UseStartTimeGen  uint32   `protobuf:"varint,16,opt,name=UseStartTimeGen,proto3" json:"UseStartTimeGen,omitempty"`
	UseEndTimeGen    uint32   `protobuf:"varint,17,opt,name=UseEndTimeGen,proto3" json:"UseEndTimeGen,omitempty"`
	ValidTime        uint32   `protobuf:"varint,18,opt,name=ValidTime,proto3" json:"ValidTime,omitempty"`
	ExpireDealType   uint32   `protobuf:"varint,19,opt,name=ExpireDealType,proto3" json:"ExpireDealType,omitempty"`
	SaleCoinType     uint32   `protobuf:"varint,20,opt,name=SaleCoinType,proto3" json:"SaleCoinType,omitempty"`
	SaleCoinCnt      uint32   `protobuf:"varint,21,opt,name=SaleCoinCnt,proto3" json:"SaleCoinCnt,omitempty"`
	EftParam         []uint32 `protobuf:"varint,22,rep,packed,name=EftParam,proto3" json:"EftParam,omitempty"`
	EftParamCount    uint32   `protobuf:"varint,23,opt,name=EftParamCount,proto3" json:"EftParamCount,omitempty"`
	ClientAutoOpen   uint32   `protobuf:"varint,24,opt,name=ClientAutoOpen,proto3" json:"ClientAutoOpen,omitempty"`
	ItemVideoPath    string   `protobuf:"bytes,25,opt,name=ItemVideoPath,proto3" json:"ItemVideoPath,omitempty"`
	NotBulkUse       bool     `protobuf:"varint,26,opt,name=NotBulkUse,proto3" json:"NotBulkUse,omitempty"`
	JumpParam        string   `protobuf:"bytes,27,opt,name=JumpParam,proto3" json:"JumpParam,omitempty"`
	ScarceLevel      uint32   `protobuf:"varint,28,opt,name=ScarceLevel,proto3" json:"ScarceLevel,omitempty"`
	IsUseNow         bool     `protobuf:"varint,29,opt,name=IsUseNow,proto3" json:"IsUseNow,omitempty"`
	FlatIcon         string   `protobuf:"bytes,30,opt,name=FlatIcon,proto3" json:"FlatIcon,omitempty"`
}

func (x *ResItemPropCfgDataBin) Reset() {
	*x = ResItemPropCfgDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResItemPropCfgDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResItemPropCfgDataBin) ProtoMessage() {}

func (x *ResItemPropCfgDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResItemPropCfgDataBin.ProtoReflect.Descriptor instead.
func (*ResItemPropCfgDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{22}
}

func (x *ResItemPropCfgDataBin) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResItemPropCfgDataBin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResItemPropCfgDataBin) GetBigIcon() string {
	if x != nil {
		return x.BigIcon
	}
	return ""
}

func (x *ResItemPropCfgDataBin) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *ResItemPropCfgDataBin) GetQuality() uint32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *ResItemPropCfgDataBin) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ResItemPropCfgDataBin) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ResItemPropCfgDataBin) GetShowTab() uint32 {
	if x != nil {
		return x.ShowTab
	}
	return 0
}

func (x *ResItemPropCfgDataBin) GetShowSort() uint32 {
	if x != nil {
		return x.ShowSort
	}
	return 0
}

func (x *ResItemPropCfgDataBin) GetUseType() uint32 {
	if x != nil {
		return x.UseType
	}
	return 0
}

func (x *ResItemPropCfgDataBin) GetOverLimit() uint32 {
	if x != nil {
		return x.OverLimit
	}
	return 0
}

func (x *ResItemPropCfgDataBin) GetOverLimitGetType() uint32 {
	if x != nil {
		return x.OverLimitGetType
	}
	return 0
}

func (x *ResItemPropCfgDataBin) GetValidTimeType() uint32 {
	if x != nil {
		return x.ValidTimeType
	}
	return 0
}

func (x *ResItemPropCfgDataBin) GetUseStartTimeStr() string {
	if x != nil {
		return x.UseStartTimeStr
	}
	return ""
}

func (x *ResItemPropCfgDataBin) GetUseEndTimeStr() string {
	if x != nil {
		return x.UseEndTimeStr
	}
	return ""
}

func (x *ResItemPropCfgDataBin) GetUseStartTimeGen() uint32 {
	if x != nil {
		return x.UseStartTimeGen
	}
	return 0
}

func (x *ResItemPropCfgDataBin) GetUseEndTimeGen() uint32 {
	if x != nil {
		return x.UseEndTimeGen
	}
	return 0
}

func (x *ResItemPropCfgDataBin) GetValidTime() uint32 {
	if x != nil {
		return x.ValidTime
	}
	return 0
}

func (x *ResItemPropCfgDataBin) GetExpireDealType() uint32 {
	if x != nil {
		return x.ExpireDealType
	}
	return 0
}

func (x *ResItemPropCfgDataBin) GetSaleCoinType() uint32 {
	if x != nil {
		return x.SaleCoinType
	}
	return 0
}

func (x *ResItemPropCfgDataBin) GetSaleCoinCnt() uint32 {
	if x != nil {
		return x.SaleCoinCnt
	}
	return 0
}

func (x *ResItemPropCfgDataBin) GetEftParam() []uint32 {
	if x != nil {
		return x.EftParam
	}
	return nil
}

func (x *ResItemPropCfgDataBin) GetEftParamCount() uint32 {
	if x != nil {
		return x.EftParamCount
	}
	return 0
}

func (x *ResItemPropCfgDataBin) GetClientAutoOpen() uint32 {
	if x != nil {
		return x.ClientAutoOpen
	}
	return 0
}

func (x *ResItemPropCfgDataBin) GetItemVideoPath() string {
	if x != nil {
		return x.ItemVideoPath
	}
	return ""
}

func (x *ResItemPropCfgDataBin) GetNotBulkUse() bool {
	if x != nil {
		return x.NotBulkUse
	}
	return false
}

func (x *ResItemPropCfgDataBin) GetJumpParam() string {
	if x != nil {
		return x.JumpParam
	}
	return ""
}

func (x *ResItemPropCfgDataBin) GetScarceLevel() uint32 {
	if x != nil {
		return x.ScarceLevel
	}
	return 0
}

func (x *ResItemPropCfgDataBin) GetIsUseNow() bool {
	if x != nil {
		return x.IsUseNow
	}
	return false
}

func (x *ResItemPropCfgDataBin) GetFlatIcon() string {
	if x != nil {
		return x.FlatIcon
	}
	return ""
}

type ResMoneyInfoCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         uint32 `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Icon         string `protobuf:"bytes,3,opt,name=Icon,proto3" json:"Icon,omitempty"`
	ItemIcon     string `protobuf:"bytes,4,opt,name=ItemIcon,proto3" json:"ItemIcon,omitempty"`
	BigItemIcon  string `protobuf:"bytes,5,opt,name=BigItemIcon,proto3" json:"BigItemIcon,omitempty"`
	Desc         string `protobuf:"bytes,6,opt,name=Desc,proto3" json:"Desc,omitempty"`
	TypeDescDesc string `protobuf:"bytes,7,opt,name=TypeDescDesc,proto3" json:"TypeDescDesc,omitempty"`
	MaxLimit     uint32 `protobuf:"varint,8,opt,name=MaxLimit,proto3" json:"MaxLimit,omitempty"`
	TipLimit     uint32 `protobuf:"varint,9,opt,name=TipLimit,proto3" json:"TipLimit,omitempty"`
}

func (x *ResMoneyInfoCfg) Reset() {
	*x = ResMoneyInfoCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResMoneyInfoCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResMoneyInfoCfg) ProtoMessage() {}

func (x *ResMoneyInfoCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResMoneyInfoCfg.ProtoReflect.Descriptor instead.
func (*ResMoneyInfoCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{23}
}

func (x *ResMoneyInfoCfg) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ResMoneyInfoCfg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResMoneyInfoCfg) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *ResMoneyInfoCfg) GetItemIcon() string {
	if x != nil {
		return x.ItemIcon
	}
	return ""
}

func (x *ResMoneyInfoCfg) GetBigItemIcon() string {
	if x != nil {
		return x.BigItemIcon
	}
	return ""
}

func (x *ResMoneyInfoCfg) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ResMoneyInfoCfg) GetTypeDescDesc() string {
	if x != nil {
		return x.TypeDescDesc
	}
	return ""
}

func (x *ResMoneyInfoCfg) GetMaxLimit() uint32 {
	if x != nil {
		return x.MaxLimit
	}
	return 0
}

func (x *ResMoneyInfoCfg) GetTipLimit() uint32 {
	if x != nil {
		return x.TipLimit
	}
	return 0
}

type ResItemShowCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemType    uint32 `protobuf:"varint,1,opt,name=ItemType,proto3" json:"ItemType,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	ItemIcon    string `protobuf:"bytes,3,opt,name=ItemIcon,proto3" json:"ItemIcon,omitempty"`
	BigItemIcon string `protobuf:"bytes,4,opt,name=BigItemIcon,proto3" json:"BigItemIcon,omitempty"`
	ItemDes     string `protobuf:"bytes,5,opt,name=ItemDes,proto3" json:"ItemDes,omitempty"`
	ItemTypeDes string `protobuf:"bytes,6,opt,name=ItemTypeDes,proto3" json:"ItemTypeDes,omitempty"`
	FlatIcon    string `protobuf:"bytes,7,opt,name=FlatIcon,proto3" json:"FlatIcon,omitempty"`
}

func (x *ResItemShowCfg) Reset() {
	*x = ResItemShowCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResItemShowCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResItemShowCfg) ProtoMessage() {}

func (x *ResItemShowCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResItemShowCfg.ProtoReflect.Descriptor instead.
func (*ResItemShowCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{24}
}

func (x *ResItemShowCfg) GetItemType() uint32 {
	if x != nil {
		return x.ItemType
	}
	return 0
}

func (x *ResItemShowCfg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResItemShowCfg) GetItemIcon() string {
	if x != nil {
		return x.ItemIcon
	}
	return ""
}

func (x *ResItemShowCfg) GetBigItemIcon() string {
	if x != nil {
		return x.BigItemIcon
	}
	return ""
}

func (x *ResItemShowCfg) GetItemDes() string {
	if x != nil {
		return x.ItemDes
	}
	return ""
}

func (x *ResItemShowCfg) GetItemTypeDes() string {
	if x != nil {
		return x.ItemTypeDes
	}
	return ""
}

func (x *ResItemShowCfg) GetFlatIcon() string {
	if x != nil {
		return x.FlatIcon
	}
	return ""
}

type ResHeadImgInfoCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          uint32         `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name        string         `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Desc        string         `protobuf:"bytes,3,opt,name=Desc,proto3" json:"Desc,omitempty"`
	UrlPath     string         `protobuf:"bytes,4,opt,name=UrlPath,proto3" json:"UrlPath,omitempty"`
	Type        uint32         `protobuf:"varint,5,opt,name=Type,proto3" json:"Type,omitempty"`
	LifeType    uint32         `protobuf:"varint,6,opt,name=LifeType,proto3" json:"LifeType,omitempty"`
	LifeTime    uint64         `protobuf:"varint,7,opt,name=LifeTime,proto3" json:"LifeTime,omitempty"`
	Quality     uint32         `protobuf:"varint,8,opt,name=Quality,proto3" json:"Quality,omitempty"`
	ScarceLevel uint32         `protobuf:"varint,9,opt,name=ScarceLevel,proto3" json:"ScarceLevel,omitempty"`
	EnableInfo  *ResEnableInfo `protobuf:"bytes,10,opt,name=EnableInfo,proto3" json:"EnableInfo,omitempty"`
	Scale       float32        `protobuf:"fixed32,11,opt,name=Scale,proto3" json:"Scale,omitempty"`
}

func (x *ResHeadImgInfoCfg) Reset() {
	*x = ResHeadImgInfoCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResHeadImgInfoCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResHeadImgInfoCfg) ProtoMessage() {}

func (x *ResHeadImgInfoCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResHeadImgInfoCfg.ProtoReflect.Descriptor instead.
func (*ResHeadImgInfoCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{25}
}

func (x *ResHeadImgInfoCfg) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResHeadImgInfoCfg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResHeadImgInfoCfg) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ResHeadImgInfoCfg) GetUrlPath() string {
	if x != nil {
		return x.UrlPath
	}
	return ""
}

func (x *ResHeadImgInfoCfg) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ResHeadImgInfoCfg) GetLifeType() uint32 {
	if x != nil {
		return x.LifeType
	}
	return 0
}

func (x *ResHeadImgInfoCfg) GetLifeTime() uint64 {
	if x != nil {
		return x.LifeTime
	}
	return 0
}

func (x *ResHeadImgInfoCfg) GetQuality() uint32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *ResHeadImgInfoCfg) GetScarceLevel() uint32 {
	if x != nil {
		return x.ScarceLevel
	}
	return 0
}

func (x *ResHeadImgInfoCfg) GetEnableInfo() *ResEnableInfo {
	if x != nil {
		return x.EnableInfo
	}
	return nil
}

func (x *ResHeadImgInfoCfg) GetScale() float32 {
	if x != nil {
		return x.Scale
	}
	return 0
}

type ResSystemUICfgDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                 uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name               string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Desc               string `protobuf:"bytes,3,opt,name=Desc,proto3" json:"Desc,omitempty"`
	ScenePath          string `protobuf:"bytes,4,opt,name=ScenePath,proto3" json:"ScenePath,omitempty"`
	SceneLightPath     string `protobuf:"bytes,5,opt,name=SceneLightPath,proto3" json:"SceneLightPath,omitempty"`
	InitCameraAge      string `protobuf:"bytes,7,opt,name=InitCameraAge,proto3" json:"InitCameraAge,omitempty"`
	ImmersionCameraAge string `protobuf:"bytes,8,opt,name=ImmersionCameraAge,proto3" json:"ImmersionCameraAge,omitempty"`
	NormalCameraAge    string `protobuf:"bytes,9,opt,name=NormalCameraAge,proto3" json:"NormalCameraAge,omitempty"`
	SceneExtra         string `protobuf:"bytes,10,opt,name=SceneExtra,proto3" json:"SceneExtra,omitempty"`
}

func (x *ResSystemUICfgDataBin) Reset() {
	*x = ResSystemUICfgDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResSystemUICfgDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResSystemUICfgDataBin) ProtoMessage() {}

func (x *ResSystemUICfgDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResSystemUICfgDataBin.ProtoReflect.Descriptor instead.
func (*ResSystemUICfgDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{26}
}

func (x *ResSystemUICfgDataBin) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResSystemUICfgDataBin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResSystemUICfgDataBin) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ResSystemUICfgDataBin) GetScenePath() string {
	if x != nil {
		return x.ScenePath
	}
	return ""
}

func (x *ResSystemUICfgDataBin) GetSceneLightPath() string {
	if x != nil {
		return x.SceneLightPath
	}
	return ""
}

func (x *ResSystemUICfgDataBin) GetInitCameraAge() string {
	if x != nil {
		return x.InitCameraAge
	}
	return ""
}

func (x *ResSystemUICfgDataBin) GetImmersionCameraAge() string {
	if x != nil {
		return x.ImmersionCameraAge
	}
	return ""
}

func (x *ResSystemUICfgDataBin) GetNormalCameraAge() string {
	if x != nil {
		return x.NormalCameraAge
	}
	return ""
}

func (x *ResSystemUICfgDataBin) GetSceneExtra() string {
	if x != nil {
		return x.SceneExtra
	}
	return ""
}

type ResDT_BGMInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bank      string `protobuf:"bytes,1,opt,name=Bank,proto3" json:"Bank,omitempty"`
	PlayEvent string `protobuf:"bytes,2,opt,name=PlayEvent,proto3" json:"PlayEvent,omitempty"`
	StopEName string `protobuf:"bytes,3,opt,name=StopEName,proto3" json:"StopEName,omitempty"`
}

func (x *ResDT_BGMInfo) Reset() {
	*x = ResDT_BGMInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_BGMInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_BGMInfo) ProtoMessage() {}

func (x *ResDT_BGMInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_BGMInfo.ProtoReflect.Descriptor instead.
func (*ResDT_BGMInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{27}
}

func (x *ResDT_BGMInfo) GetBank() string {
	if x != nil {
		return x.Bank
	}
	return ""
}

func (x *ResDT_BGMInfo) GetPlayEvent() string {
	if x != nil {
		return x.PlayEvent
	}
	return ""
}

func (x *ResDT_BGMInfo) GetStopEName() string {
	if x != nil {
		return x.StopEName
	}
	return ""
}

type ResDT_BGMSwitchTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     uint32   `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	StrParam string   `protobuf:"bytes,2,opt,name=StrParam,proto3" json:"StrParam,omitempty"`
	Params   []uint32 `protobuf:"varint,3,rep,packed,name=Params,proto3" json:"Params,omitempty"`
}

func (x *ResDT_BGMSwitchTime) Reset() {
	*x = ResDT_BGMSwitchTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_BGMSwitchTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_BGMSwitchTime) ProtoMessage() {}

func (x *ResDT_BGMSwitchTime) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_BGMSwitchTime.ProtoReflect.Descriptor instead.
func (*ResDT_BGMSwitchTime) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{28}
}

func (x *ResDT_BGMSwitchTime) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ResDT_BGMSwitchTime) GetStrParam() string {
	if x != nil {
		return x.StrParam
	}
	return ""
}

func (x *ResDT_BGMSwitchTime) GetParams() []uint32 {
	if x != nil {
		return x.Params
	}
	return nil
}

type ResBGMCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BGMInfo    *ResDT_BGMInfo       `protobuf:"bytes,1,opt,name=BGMInfo,proto3" json:"BGMInfo,omitempty"`
	SwitchTime *ResDT_BGMSwitchTime `protobuf:"bytes,2,opt,name=SwitchTime,proto3" json:"SwitchTime,omitempty"`
	DelayTime  float32              `protobuf:"fixed32,3,opt,name=DelayTime,proto3" json:"DelayTime,omitempty"`
}

func (x *ResBGMCfg) Reset() {
	*x = ResBGMCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResBGMCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResBGMCfg) ProtoMessage() {}

func (x *ResBGMCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResBGMCfg.ProtoReflect.Descriptor instead.
func (*ResBGMCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{29}
}

func (x *ResBGMCfg) GetBGMInfo() *ResDT_BGMInfo {
	if x != nil {
		return x.BGMInfo
	}
	return nil
}

func (x *ResBGMCfg) GetSwitchTime() *ResDT_BGMSwitchTime {
	if x != nil {
		return x.SwitchTime
	}
	return nil
}

func (x *ResBGMCfg) GetDelayTime() float32 {
	if x != nil {
		return x.DelayTime
	}
	return 0
}

type ResHeadInfoCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         uint32         `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name       string         `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Desc       string         `protobuf:"bytes,3,opt,name=Desc,proto3" json:"Desc,omitempty"`
	UrlPath    string         `protobuf:"bytes,4,opt,name=UrlPath,proto3" json:"UrlPath,omitempty"`
	Type       uint32         `protobuf:"varint,5,opt,name=Type,proto3" json:"Type,omitempty"`
	LifeType   uint32         `protobuf:"varint,6,opt,name=LifeType,proto3" json:"LifeType,omitempty"`
	LifeTime   uint64         `protobuf:"varint,7,opt,name=LifeTime,proto3" json:"LifeTime,omitempty"`
	EnableInfo *ResEnableInfo `protobuf:"bytes,8,opt,name=EnableInfo,proto3" json:"EnableInfo,omitempty"`
}

func (x *ResHeadInfoCfg) Reset() {
	*x = ResHeadInfoCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResHeadInfoCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResHeadInfoCfg) ProtoMessage() {}

func (x *ResHeadInfoCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResHeadInfoCfg.ProtoReflect.Descriptor instead.
func (*ResHeadInfoCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{30}
}

func (x *ResHeadInfoCfg) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResHeadInfoCfg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResHeadInfoCfg) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ResHeadInfoCfg) GetUrlPath() string {
	if x != nil {
		return x.UrlPath
	}
	return ""
}

func (x *ResHeadInfoCfg) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ResHeadInfoCfg) GetLifeType() uint32 {
	if x != nil {
		return x.LifeType
	}
	return 0
}

func (x *ResHeadInfoCfg) GetLifeTime() uint64 {
	if x != nil {
		return x.LifeTime
	}
	return 0
}

func (x *ResHeadInfoCfg) GetEnableInfo() *ResEnableInfo {
	if x != nil {
		return x.EnableInfo
	}
	return nil
}

type ResGiftStrategyCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenCnt uint32 `protobuf:"varint,1,opt,name=OpenCnt,proto3" json:"OpenCnt,omitempty"`
	DropID  uint32 `protobuf:"varint,2,opt,name=DropID,proto3" json:"DropID,omitempty"`
}

func (x *ResGiftStrategyCfg) Reset() {
	*x = ResGiftStrategyCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGiftStrategyCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGiftStrategyCfg) ProtoMessage() {}

func (x *ResGiftStrategyCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGiftStrategyCfg.ProtoReflect.Descriptor instead.
func (*ResGiftStrategyCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{31}
}

func (x *ResGiftStrategyCfg) GetOpenCnt() uint32 {
	if x != nil {
		return x.OpenCnt
	}
	return 0
}

func (x *ResGiftStrategyCfg) GetDropID() uint32 {
	if x != nil {
		return x.DropID
	}
	return 0
}

// 礼包保底策略数据档.
type ResGiftGuaranteeStrategyDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           uint32                `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	StrategyCfgs []*ResGiftStrategyCfg `protobuf:"bytes,2,rep,name=StrategyCfgs,proto3" json:"StrategyCfgs,omitempty"`
	CheckDropID  uint32                `protobuf:"varint,3,opt,name=CheckDropID,proto3" json:"CheckDropID,omitempty"`
}

func (x *ResGiftGuaranteeStrategyDataBin) Reset() {
	*x = ResGiftGuaranteeStrategyDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGiftGuaranteeStrategyDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGiftGuaranteeStrategyDataBin) ProtoMessage() {}

func (x *ResGiftGuaranteeStrategyDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGiftGuaranteeStrategyDataBin.ProtoReflect.Descriptor instead.
func (*ResGiftGuaranteeStrategyDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{32}
}

func (x *ResGiftGuaranteeStrategyDataBin) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResGiftGuaranteeStrategyDataBin) GetStrategyCfgs() []*ResGiftStrategyCfg {
	if x != nil {
		return x.StrategyCfgs
	}
	return nil
}

func (x *ResGiftGuaranteeStrategyDataBin) GetCheckDropID() uint32 {
	if x != nil {
		return x.CheckDropID
	}
	return 0
}

type ItemConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PropInfo              *ResItemPropCfgDataBin           `protobuf:"bytes,1,opt,name=PropInfo,proto3" json:"PropInfo,omitempty"`
	MoneyInfo             *ResMoneyInfoCfg                 `protobuf:"bytes,2,opt,name=MoneyInfo,proto3" json:"MoneyInfo,omitempty"`
	HeadImgInfo           *ResHeadImgInfoCfg               `protobuf:"bytes,3,opt,name=HeadImgInfo,proto3" json:"HeadImgInfo,omitempty"`
	HeadInfo              *ResHeadInfoCfg                  `protobuf:"bytes,4,opt,name=HeadInfo,proto3" json:"HeadInfo,omitempty"`
	GiftGuaranteeStrategy *ResGiftGuaranteeStrategyDataBin `protobuf:"bytes,5,opt,name=GiftGuaranteeStrategy,proto3" json:"GiftGuaranteeStrategy,omitempty"`
}

func (x *ItemConf) Reset() {
	*x = ItemConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemConf) ProtoMessage() {}

func (x *ItemConf) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemConf.ProtoReflect.Descriptor instead.
func (*ItemConf) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{33}
}

func (x *ItemConf) GetPropInfo() *ResItemPropCfgDataBin {
	if x != nil {
		return x.PropInfo
	}
	return nil
}

func (x *ItemConf) GetMoneyInfo() *ResMoneyInfoCfg {
	if x != nil {
		return x.MoneyInfo
	}
	return nil
}

func (x *ItemConf) GetHeadImgInfo() *ResHeadImgInfoCfg {
	if x != nil {
		return x.HeadImgInfo
	}
	return nil
}

func (x *ItemConf) GetHeadInfo() *ResHeadInfoCfg {
	if x != nil {
		return x.HeadInfo
	}
	return nil
}

func (x *ItemConf) GetGiftGuaranteeStrategy() *ResGiftGuaranteeStrategyDataBin {
	if x != nil {
		return x.GiftGuaranteeStrategy
	}
	return nil
}

type ResDropItemCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        uint32       `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Award     *ResGameItem `protobuf:"bytes,2,opt,name=Award,proto3" json:"Award,omitempty"`
	RateType  uint32       `protobuf:"varint,3,opt,name=RateType,proto3" json:"RateType,omitempty"`
	RateValue uint32       `protobuf:"varint,4,opt,name=RateValue,proto3" json:"RateValue,omitempty"`
	LimitID   uint32       `protobuf:"varint,5,opt,name=LimitID,proto3" json:"LimitID,omitempty"`
}

func (x *ResDropItemCfg) Reset() {
	*x = ResDropItemCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDropItemCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDropItemCfg) ProtoMessage() {}

func (x *ResDropItemCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDropItemCfg.ProtoReflect.Descriptor instead.
func (*ResDropItemCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{34}
}

func (x *ResDropItemCfg) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResDropItemCfg) GetAward() *ResGameItem {
	if x != nil {
		return x.Award
	}
	return nil
}

func (x *ResDropItemCfg) GetRateType() uint32 {
	if x != nil {
		return x.RateType
	}
	return 0
}

func (x *ResDropItemCfg) GetRateValue() uint32 {
	if x != nil {
		return x.RateValue
	}
	return 0
}

func (x *ResDropItemCfg) GetLimitID() uint32 {
	if x != nil {
		return x.LimitID
	}
	return 0
}

type ResDropDataCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DropID     uint32   `protobuf:"varint,1,opt,name=DropID,proto3" json:"DropID,omitempty"`
	DropItem   []uint32 `protobuf:"varint,2,rep,packed,name=DropItem,proto3" json:"DropItem,omitempty"`
	MixDropCnt uint32   `protobuf:"varint,3,opt,name=MixDropCnt,proto3" json:"MixDropCnt,omitempty"`
	MaxDropCnt uint32   `protobuf:"varint,4,opt,name=MaxDropCnt,proto3" json:"MaxDropCnt,omitempty"`
}

func (x *ResDropDataCfg) Reset() {
	*x = ResDropDataCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDropDataCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDropDataCfg) ProtoMessage() {}

func (x *ResDropDataCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDropDataCfg.ProtoReflect.Descriptor instead.
func (*ResDropDataCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{35}
}

func (x *ResDropDataCfg) GetDropID() uint32 {
	if x != nil {
		return x.DropID
	}
	return 0
}

func (x *ResDropDataCfg) GetDropItem() []uint32 {
	if x != nil {
		return x.DropItem
	}
	return nil
}

func (x *ResDropDataCfg) GetMixDropCnt() uint32 {
	if x != nil {
		return x.MixDropCnt
	}
	return 0
}

func (x *ResDropDataCfg) GetMaxDropCnt() uint32 {
	if x != nil {
		return x.MaxDropCnt
	}
	return 0
}

type ResLimitInfoCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LimitID    uint32 `protobuf:"varint,1,opt,name=LimitID,proto3" json:"LimitID,omitempty"`
	ItemType   uint32 `protobuf:"varint,2,opt,name=ItemType,proto3" json:"ItemType,omitempty"`
	ItemID     uint32 `protobuf:"varint,3,opt,name=ItemID,proto3" json:"ItemID,omitempty"`
	LimitCnt   uint32 `protobuf:"varint,4,opt,name=LimitCnt,proto3" json:"LimitCnt,omitempty"`
	LimitCycle uint32 `protobuf:"varint,5,opt,name=LimitCycle,proto3" json:"LimitCycle,omitempty"`
}

func (x *ResLimitInfoCfg) Reset() {
	*x = ResLimitInfoCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResLimitInfoCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResLimitInfoCfg) ProtoMessage() {}

func (x *ResLimitInfoCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResLimitInfoCfg.ProtoReflect.Descriptor instead.
func (*ResLimitInfoCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{36}
}

func (x *ResLimitInfoCfg) GetLimitID() uint32 {
	if x != nil {
		return x.LimitID
	}
	return 0
}

func (x *ResLimitInfoCfg) GetItemType() uint32 {
	if x != nil {
		return x.ItemType
	}
	return 0
}

func (x *ResLimitInfoCfg) GetItemID() uint32 {
	if x != nil {
		return x.ItemID
	}
	return 0
}

func (x *ResLimitInfoCfg) GetLimitCnt() uint32 {
	if x != nil {
		return x.LimitCnt
	}
	return 0
}

func (x *ResLimitInfoCfg) GetLimitCycle() uint32 {
	if x != nil {
		return x.LimitCycle
	}
	return 0
}

type ResDropsExcludeRepeatDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemType uint32 `protobuf:"varint,1,opt,name=ItemType,proto3" json:"ItemType,omitempty"`
}

func (x *ResDropsExcludeRepeatDataBin) Reset() {
	*x = ResDropsExcludeRepeatDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDropsExcludeRepeatDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDropsExcludeRepeatDataBin) ProtoMessage() {}

func (x *ResDropsExcludeRepeatDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDropsExcludeRepeatDataBin.ProtoReflect.Descriptor instead.
func (*ResDropsExcludeRepeatDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{37}
}

func (x *ResDropsExcludeRepeatDataBin) GetItemType() uint32 {
	if x != nil {
		return x.ItemType
	}
	return 0
}

type DropConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DropData          *ResDropDataCfg               `protobuf:"bytes,1,opt,name=DropData,proto3" json:"DropData,omitempty"`
	DropItem          *ResDropItemCfg               `protobuf:"bytes,2,opt,name=DropItem,proto3" json:"DropItem,omitempty"`
	ItemLimit         *ResLimitInfoCfg              `protobuf:"bytes,3,opt,name=ItemLimit,proto3" json:"ItemLimit,omitempty"`
	DropExcludeRepeat *ResDropsExcludeRepeatDataBin `protobuf:"bytes,4,opt,name=DropExcludeRepeat,proto3" json:"DropExcludeRepeat,omitempty"`
}

func (x *DropConf) Reset() {
	*x = DropConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropConf) ProtoMessage() {}

func (x *DropConf) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropConf.ProtoReflect.Descriptor instead.
func (*DropConf) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{38}
}

func (x *DropConf) GetDropData() *ResDropDataCfg {
	if x != nil {
		return x.DropData
	}
	return nil
}

func (x *DropConf) GetDropItem() *ResDropItemCfg {
	if x != nil {
		return x.DropItem
	}
	return nil
}

func (x *DropConf) GetItemLimit() *ResLimitInfoCfg {
	if x != nil {
		return x.ItemLimit
	}
	return nil
}

func (x *DropConf) GetDropExcludeRepeat() *ResDropsExcludeRepeatDataBin {
	if x != nil {
		return x.DropExcludeRepeat
	}
	return nil
}

//####赛季结构-开始####
// 赛季主表
type ResSeasonDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonID          uint32 `protobuf:"varint,1,opt,name=SeasonID,proto3" json:"SeasonID,omitempty"`
	StartTime         string `protobuf:"bytes,2,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime           string `protobuf:"bytes,3,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	Name              string `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
	Desc              string `protobuf:"bytes,5,opt,name=Desc,proto3" json:"Desc,omitempty"`
	SettleOverdueTime string `protobuf:"bytes,6,opt,name=SettleOverdueTime,proto3" json:"SettleOverdueTime,omitempty"`
	Enabled           bool   `protobuf:"varint,7,opt,name=Enabled,proto3" json:"Enabled,omitempty"`
}

func (x *ResSeasonDataBin) Reset() {
	*x = ResSeasonDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResSeasonDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResSeasonDataBin) ProtoMessage() {}

func (x *ResSeasonDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResSeasonDataBin.ProtoReflect.Descriptor instead.
func (*ResSeasonDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{39}
}

func (x *ResSeasonDataBin) GetSeasonID() uint32 {
	if x != nil {
		return x.SeasonID
	}
	return 0
}

func (x *ResSeasonDataBin) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ResSeasonDataBin) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *ResSeasonDataBin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResSeasonDataBin) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ResSeasonDataBin) GetSettleOverdueTime() string {
	if x != nil {
		return x.SettleOverdueTime
	}
	return ""
}

func (x *ResSeasonDataBin) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type ResSeasonRankAwardsDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonID    uint32 `protobuf:"varint,1,opt,name=SeasonID,proto3" json:"SeasonID,omitempty"`
	Rank        uint32 `protobuf:"varint,2,opt,name=Rank,proto3" json:"Rank,omitempty"`
	AwardDropID uint32 `protobuf:"varint,3,opt,name=AwardDropID,proto3" json:"AwardDropID,omitempty"`
}

func (x *ResSeasonRankAwardsDataBin) Reset() {
	*x = ResSeasonRankAwardsDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResSeasonRankAwardsDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResSeasonRankAwardsDataBin) ProtoMessage() {}

func (x *ResSeasonRankAwardsDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResSeasonRankAwardsDataBin.ProtoReflect.Descriptor instead.
func (*ResSeasonRankAwardsDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{40}
}

func (x *ResSeasonRankAwardsDataBin) GetSeasonID() uint32 {
	if x != nil {
		return x.SeasonID
	}
	return 0
}

func (x *ResSeasonRankAwardsDataBin) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *ResSeasonRankAwardsDataBin) GetAwardDropID() uint32 {
	if x != nil {
		return x.AwardDropID
	}
	return 0
}

type ResInSeasonRankAwardsDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonID    uint32  `protobuf:"varint,1,opt,name=SeasonID,proto3" json:"SeasonID,omitempty"`
	Rank        uint32  `protobuf:"varint,2,opt,name=Rank,proto3" json:"Rank,omitempty"`
	AwardDropID uint32  `protobuf:"varint,3,opt,name=AwardDropID,proto3" json:"AwardDropID,omitempty"`
	MailID      EMailID `protobuf:"varint,4,opt,name=MailID,proto3,enum=ResData.EMailID" json:"MailID,omitempty"`
}

func (x *ResInSeasonRankAwardsDataBin) Reset() {
	*x = ResInSeasonRankAwardsDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResInSeasonRankAwardsDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResInSeasonRankAwardsDataBin) ProtoMessage() {}

func (x *ResInSeasonRankAwardsDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResInSeasonRankAwardsDataBin.ProtoReflect.Descriptor instead.
func (*ResInSeasonRankAwardsDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{41}
}

func (x *ResInSeasonRankAwardsDataBin) GetSeasonID() uint32 {
	if x != nil {
		return x.SeasonID
	}
	return 0
}

func (x *ResInSeasonRankAwardsDataBin) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *ResInSeasonRankAwardsDataBin) GetAwardDropID() uint32 {
	if x != nil {
		return x.AwardDropID
	}
	return 0
}

func (x *ResInSeasonRankAwardsDataBin) GetMailID() EMailID {
	if x != nil {
		return x.MailID
	}
	return EMailID_EMailID__reserved__
}

type ResSeasonRankTaskDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID      uint32       `protobuf:"varint,1,opt,name=TaskID,proto3" json:"TaskID,omitempty"`
	SeasonID    uint32       `protobuf:"varint,2,opt,name=SeasonID,proto3" json:"SeasonID,omitempty"`
	Rank        uint32       `protobuf:"varint,3,opt,name=Rank,proto3" json:"Rank,omitempty"`
	Title       string       `protobuf:"bytes,4,opt,name=Title,proto3" json:"Title,omitempty"`
	Desc        string       `protobuf:"bytes,5,opt,name=Desc,proto3" json:"Desc,omitempty"`
	FinishCond  *ResCondInfo `protobuf:"bytes,6,opt,name=FinishCond,proto3" json:"FinishCond,omitempty"`
	AwardDropID uint32       `protobuf:"varint,7,opt,name=AwardDropID,proto3" json:"AwardDropID,omitempty"`
}

func (x *ResSeasonRankTaskDataBin) Reset() {
	*x = ResSeasonRankTaskDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResSeasonRankTaskDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResSeasonRankTaskDataBin) ProtoMessage() {}

func (x *ResSeasonRankTaskDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResSeasonRankTaskDataBin.ProtoReflect.Descriptor instead.
func (*ResSeasonRankTaskDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{42}
}

func (x *ResSeasonRankTaskDataBin) GetTaskID() uint32 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *ResSeasonRankTaskDataBin) GetSeasonID() uint32 {
	if x != nil {
		return x.SeasonID
	}
	return 0
}

func (x *ResSeasonRankTaskDataBin) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *ResSeasonRankTaskDataBin) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResSeasonRankTaskDataBin) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ResSeasonRankTaskDataBin) GetFinishCond() *ResCondInfo {
	if x != nil {
		return x.FinishCond
	}
	return nil
}

func (x *ResSeasonRankTaskDataBin) GetAwardDropID() uint32 {
	if x != nil {
		return x.AwardDropID
	}
	return 0
}

type ResSeasonGameTypesBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonID                uint32       `protobuf:"varint,1,opt,name=SeasonID,proto3" json:"SeasonID,omitempty"`
	GameType                uint32       `protobuf:"varint,2,opt,name=GameType,proto3" json:"GameType,omitempty"`
	GameTypeTheme           uint32       `protobuf:"varint,3,opt,name=GameTypeTheme,proto3" json:"GameTypeTheme,omitempty"`
	PlayModID               PLAYMOD_TYPE `protobuf:"varint,4,opt,name=PlayModID,proto3,enum=ResData.PLAYMOD_TYPE" json:"PlayModID,omitempty"`
	IsLimitRoomRank         uint32       `protobuf:"varint,5,opt,name=IsLimitRoomRank,proto3" json:"IsLimitRoomRank,omitempty"`
	RoomPlayerMaxNum        int32        `protobuf:"varint,6,opt,name=RoomPlayerMaxNum,proto3" json:"RoomPlayerMaxNum,omitempty"`
	ScoreProtectItemID      *ResGameItem `protobuf:"bytes,7,opt,name=ScoreProtectItemID,proto3" json:"ScoreProtectItemID,omitempty"`
	StartTime               string       `protobuf:"bytes,8,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime                 string       `protobuf:"bytes,9,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	OtherUIIsShow           bool         `protobuf:"varint,10,opt,name=OtherUIIsShow,proto3" json:"OtherUIIsShow,omitempty"`
	LordSelectRepeat        uint32       `protobuf:"varint,11,opt,name=LordSelectRepeat,proto3" json:"LordSelectRepeat,omitempty"`
	IsSettleLordProficiency bool         `protobuf:"varint,12,opt,name=IsSettleLordProficiency,proto3" json:"IsSettleLordProficiency,omitempty"`
	CanExitGameTime         uint32       `protobuf:"varint,13,opt,name=CanExitGameTime,proto3" json:"CanExitGameTime,omitempty"`
	ShowRankGameType        uint32       `protobuf:"varint,14,opt,name=ShowRankGameType,proto3" json:"ShowRankGameType,omitempty"`
	SettleMinSec            uint32       `protobuf:"varint,15,opt,name=SettleMinSec,proto3" json:"SettleMinSec,omitempty"`
	IsShowSkillDesc         bool         `protobuf:"varint,16,opt,name=IsShowSkillDesc,proto3" json:"IsShowSkillDesc,omitempty"`
	IsEnableSendRecord      bool         `protobuf:"varint,17,opt,name=IsEnableSendRecord,proto3" json:"IsEnableSendRecord,omitempty"`
	RecordStatisticType     uint32       `protobuf:"varint,18,opt,name=RecordStatisticType,proto3" json:"RecordStatisticType,omitempty"`
}

func (x *ResSeasonGameTypesBin) Reset() {
	*x = ResSeasonGameTypesBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResSeasonGameTypesBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResSeasonGameTypesBin) ProtoMessage() {}

func (x *ResSeasonGameTypesBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResSeasonGameTypesBin.ProtoReflect.Descriptor instead.
func (*ResSeasonGameTypesBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{43}
}

func (x *ResSeasonGameTypesBin) GetSeasonID() uint32 {
	if x != nil {
		return x.SeasonID
	}
	return 0
}

func (x *ResSeasonGameTypesBin) GetGameType() uint32 {
	if x != nil {
		return x.GameType
	}
	return 0
}

func (x *ResSeasonGameTypesBin) GetGameTypeTheme() uint32 {
	if x != nil {
		return x.GameTypeTheme
	}
	return 0
}

func (x *ResSeasonGameTypesBin) GetPlayModID() PLAYMOD_TYPE {
	if x != nil {
		return x.PlayModID
	}
	return PLAYMOD_TYPE_PLAYMOD_None
}

func (x *ResSeasonGameTypesBin) GetIsLimitRoomRank() uint32 {
	if x != nil {
		return x.IsLimitRoomRank
	}
	return 0
}

func (x *ResSeasonGameTypesBin) GetRoomPlayerMaxNum() int32 {
	if x != nil {
		return x.RoomPlayerMaxNum
	}
	return 0
}

func (x *ResSeasonGameTypesBin) GetScoreProtectItemID() *ResGameItem {
	if x != nil {
		return x.ScoreProtectItemID
	}
	return nil
}

func (x *ResSeasonGameTypesBin) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ResSeasonGameTypesBin) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *ResSeasonGameTypesBin) GetOtherUIIsShow() bool {
	if x != nil {
		return x.OtherUIIsShow
	}
	return false
}

func (x *ResSeasonGameTypesBin) GetLordSelectRepeat() uint32 {
	if x != nil {
		return x.LordSelectRepeat
	}
	return 0
}

func (x *ResSeasonGameTypesBin) GetIsSettleLordProficiency() bool {
	if x != nil {
		return x.IsSettleLordProficiency
	}
	return false
}

func (x *ResSeasonGameTypesBin) GetCanExitGameTime() uint32 {
	if x != nil {
		return x.CanExitGameTime
	}
	return 0
}

func (x *ResSeasonGameTypesBin) GetShowRankGameType() uint32 {
	if x != nil {
		return x.ShowRankGameType
	}
	return 0
}

func (x *ResSeasonGameTypesBin) GetSettleMinSec() uint32 {
	if x != nil {
		return x.SettleMinSec
	}
	return 0
}

func (x *ResSeasonGameTypesBin) GetIsShowSkillDesc() bool {
	if x != nil {
		return x.IsShowSkillDesc
	}
	return false
}

func (x *ResSeasonGameTypesBin) GetIsEnableSendRecord() bool {
	if x != nil {
		return x.IsEnableSendRecord
	}
	return false
}

func (x *ResSeasonGameTypesBin) GetRecordStatisticType() uint32 {
	if x != nil {
		return x.RecordStatisticType
	}
	return 0
}

type ResLanguageText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LanguageType GAMELANGUAGE_TYPE `protobuf:"varint,1,opt,name=LanguageType,proto3,enum=ResData.GAMELANGUAGE_TYPE" json:"LanguageType,omitempty"`
	Text         string            `protobuf:"bytes,2,opt,name=Text,proto3" json:"Text,omitempty"`
}

func (x *ResLanguageText) Reset() {
	*x = ResLanguageText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResLanguageText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResLanguageText) ProtoMessage() {}

func (x *ResLanguageText) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResLanguageText.ProtoReflect.Descriptor instead.
func (*ResLanguageText) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{44}
}

func (x *ResLanguageText) GetLanguageType() GAMELANGUAGE_TYPE {
	if x != nil {
		return x.LanguageType
	}
	return GAMELANGUAGE_TYPE_GAMELANGUAGE_TYPE_None
}

func (x *ResLanguageText) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type ResSeasonPlayCenterBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonID               uint32                   `protobuf:"varint,1,opt,name=SeasonID,proto3" json:"SeasonID,omitempty"`
	GameTypeTheme          COM_GAME_BIG_TYPE_THEME  `protobuf:"varint,2,opt,name=GameTypeTheme,proto3,enum=ResData.COM_GAME_BIG_TYPE_THEME" json:"GameTypeTheme,omitempty"`
	ThemeName              string                   `protobuf:"bytes,3,opt,name=ThemeName,proto3" json:"ThemeName,omitempty"`
	GameType               uint32                   `protobuf:"varint,4,opt,name=GameType,proto3" json:"GameType,omitempty"`
	GameTypeName           string                   `protobuf:"bytes,5,opt,name=GameTypeName,proto3" json:"GameTypeName,omitempty"`
	GameTypeName2          string                   `protobuf:"bytes,6,opt,name=GameTypeName2,proto3" json:"GameTypeName2,omitempty"`
	GameTypeOpenMethod     COM_GAMETYPE_OPEN_METHOD `protobuf:"varint,7,opt,name=GameTypeOpenMethod,proto3,enum=ResData.COM_GAMETYPE_OPEN_METHOD" json:"GameTypeOpenMethod,omitempty"`
	ThemeOrder             uint32                   `protobuf:"varint,8,opt,name=ThemeOrder,proto3" json:"ThemeOrder,omitempty"`
	TabOrder               uint32                   `protobuf:"varint,9,opt,name=TabOrder,proto3" json:"TabOrder,omitempty"`
	StartTime              string                   `protobuf:"bytes,10,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime                string                   `protobuf:"bytes,11,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	WeeklyOpenTimes        []string                 `protobuf:"bytes,12,rep,name=WeeklyOpenTimes,proto3" json:"WeeklyOpenTimes,omitempty"`
	NotOpenTips            string                   `protobuf:"bytes,13,opt,name=NotOpenTips,proto3" json:"NotOpenTips,omitempty"`
	SelectedIcon           string                   `protobuf:"bytes,14,opt,name=SelectedIcon,proto3" json:"SelectedIcon,omitempty"`
	GameTypeIcon           string                   `protobuf:"bytes,15,opt,name=GameTypeIcon,proto3" json:"GameTypeIcon,omitempty"`
	BgIconPath             string                   `protobuf:"bytes,16,opt,name=BgIconPath,proto3" json:"BgIconPath,omitempty"`
	GameTypeMaskPath       string                   `protobuf:"bytes,17,opt,name=GameTypeMaskPath,proto3" json:"GameTypeMaskPath,omitempty"`
	GameTypeNameArtPath    string                   `protobuf:"bytes,18,opt,name=GameTypeNameArtPath,proto3" json:"GameTypeNameArtPath,omitempty"`
	GameTypeBgColor        string                   `protobuf:"bytes,19,opt,name=GameTypeBgColor,proto3" json:"GameTypeBgColor,omitempty"`
	IsEnable               bool                     `protobuf:"varint,20,opt,name=IsEnable,proto3" json:"IsEnable,omitempty"`
	NotOpenTipsSvr         string                   `protobuf:"bytes,21,opt,name=NotOpenTipsSvr,proto3" json:"NotOpenTipsSvr,omitempty"`
	NotOpenTipsSvrNotFound string                   `protobuf:"bytes,22,opt,name=NotOpenTipsSvrNotFound,proto3" json:"NotOpenTipsSvrNotFound,omitempty"`
	IsShowHundred          bool                     `protobuf:"varint,23,opt,name=IsShowHundred,proto3" json:"IsShowHundred,omitempty"`
	IsShowSeasonTrip       bool                     `protobuf:"varint,24,opt,name=IsShowSeasonTrip,proto3" json:"IsShowSeasonTrip,omitempty"`
	Tips                   []*ResLanguageText       `protobuf:"bytes,25,rep,name=Tips,proto3" json:"Tips,omitempty"`
}

func (x *ResSeasonPlayCenterBin) Reset() {
	*x = ResSeasonPlayCenterBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResSeasonPlayCenterBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResSeasonPlayCenterBin) ProtoMessage() {}

func (x *ResSeasonPlayCenterBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResSeasonPlayCenterBin.ProtoReflect.Descriptor instead.
func (*ResSeasonPlayCenterBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{45}
}

func (x *ResSeasonPlayCenterBin) GetSeasonID() uint32 {
	if x != nil {
		return x.SeasonID
	}
	return 0
}

func (x *ResSeasonPlayCenterBin) GetGameTypeTheme() COM_GAME_BIG_TYPE_THEME {
	if x != nil {
		return x.GameTypeTheme
	}
	return COM_GAME_BIG_TYPE_THEME_COM_GAME_BIG_TYPE_THEME_NULL
}

func (x *ResSeasonPlayCenterBin) GetThemeName() string {
	if x != nil {
		return x.ThemeName
	}
	return ""
}

func (x *ResSeasonPlayCenterBin) GetGameType() uint32 {
	if x != nil {
		return x.GameType
	}
	return 0
}

func (x *ResSeasonPlayCenterBin) GetGameTypeName() string {
	if x != nil {
		return x.GameTypeName
	}
	return ""
}

func (x *ResSeasonPlayCenterBin) GetGameTypeName2() string {
	if x != nil {
		return x.GameTypeName2
	}
	return ""
}

func (x *ResSeasonPlayCenterBin) GetGameTypeOpenMethod() COM_GAMETYPE_OPEN_METHOD {
	if x != nil {
		return x.GameTypeOpenMethod
	}
	return COM_GAMETYPE_OPEN_METHOD_GTOM_Invalid
}

func (x *ResSeasonPlayCenterBin) GetThemeOrder() uint32 {
	if x != nil {
		return x.ThemeOrder
	}
	return 0
}

func (x *ResSeasonPlayCenterBin) GetTabOrder() uint32 {
	if x != nil {
		return x.TabOrder
	}
	return 0
}

func (x *ResSeasonPlayCenterBin) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ResSeasonPlayCenterBin) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *ResSeasonPlayCenterBin) GetWeeklyOpenTimes() []string {
	if x != nil {
		return x.WeeklyOpenTimes
	}
	return nil
}

func (x *ResSeasonPlayCenterBin) GetNotOpenTips() string {
	if x != nil {
		return x.NotOpenTips
	}
	return ""
}

func (x *ResSeasonPlayCenterBin) GetSelectedIcon() string {
	if x != nil {
		return x.SelectedIcon
	}
	return ""
}

func (x *ResSeasonPlayCenterBin) GetGameTypeIcon() string {
	if x != nil {
		return x.GameTypeIcon
	}
	return ""
}

func (x *ResSeasonPlayCenterBin) GetBgIconPath() string {
	if x != nil {
		return x.BgIconPath
	}
	return ""
}

func (x *ResSeasonPlayCenterBin) GetGameTypeMaskPath() string {
	if x != nil {
		return x.GameTypeMaskPath
	}
	return ""
}

func (x *ResSeasonPlayCenterBin) GetGameTypeNameArtPath() string {
	if x != nil {
		return x.GameTypeNameArtPath
	}
	return ""
}

func (x *ResSeasonPlayCenterBin) GetGameTypeBgColor() string {
	if x != nil {
		return x.GameTypeBgColor
	}
	return ""
}

func (x *ResSeasonPlayCenterBin) GetIsEnable() bool {
	if x != nil {
		return x.IsEnable
	}
	return false
}

func (x *ResSeasonPlayCenterBin) GetNotOpenTipsSvr() string {
	if x != nil {
		return x.NotOpenTipsSvr
	}
	return ""
}

func (x *ResSeasonPlayCenterBin) GetNotOpenTipsSvrNotFound() string {
	if x != nil {
		return x.NotOpenTipsSvrNotFound
	}
	return ""
}

func (x *ResSeasonPlayCenterBin) GetIsShowHundred() bool {
	if x != nil {
		return x.IsShowHundred
	}
	return false
}

func (x *ResSeasonPlayCenterBin) GetIsShowSeasonTrip() bool {
	if x != nil {
		return x.IsShowSeasonTrip
	}
	return false
}

func (x *ResSeasonPlayCenterBin) GetTips() []*ResLanguageText {
	if x != nil {
		return x.Tips
	}
	return nil
}

type ResSeasonRankInherit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldSeasonID  uint32 `protobuf:"varint,1,opt,name=OldSeasonID,proto3" json:"OldSeasonID,omitempty"`
	NewSeasonID  uint32 `protobuf:"varint,2,opt,name=NewSeasonID,proto3" json:"NewSeasonID,omitempty"`
	OldRankRank  uint32 `protobuf:"varint,3,opt,name=OldRankRank,proto3" json:"OldRankRank,omitempty"`
	OldRankLevel uint32 `protobuf:"varint,4,opt,name=OldRankLevel,proto3" json:"OldRankLevel,omitempty"`
	NewRankRank  uint32 `protobuf:"varint,5,opt,name=NewRankRank,proto3" json:"NewRankRank,omitempty"`
	NewRankLevel uint32 `protobuf:"varint,6,opt,name=NewRankLevel,proto3" json:"NewRankLevel,omitempty"`
}

func (x *ResSeasonRankInherit) Reset() {
	*x = ResSeasonRankInherit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResSeasonRankInherit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResSeasonRankInherit) ProtoMessage() {}

func (x *ResSeasonRankInherit) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResSeasonRankInherit.ProtoReflect.Descriptor instead.
func (*ResSeasonRankInherit) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{46}
}

func (x *ResSeasonRankInherit) GetOldSeasonID() uint32 {
	if x != nil {
		return x.OldSeasonID
	}
	return 0
}

func (x *ResSeasonRankInherit) GetNewSeasonID() uint32 {
	if x != nil {
		return x.NewSeasonID
	}
	return 0
}

func (x *ResSeasonRankInherit) GetOldRankRank() uint32 {
	if x != nil {
		return x.OldRankRank
	}
	return 0
}

func (x *ResSeasonRankInherit) GetOldRankLevel() uint32 {
	if x != nil {
		return x.OldRankLevel
	}
	return 0
}

func (x *ResSeasonRankInherit) GetNewRankRank() uint32 {
	if x != nil {
		return x.NewRankRank
	}
	return 0
}

func (x *ResSeasonRankInherit) GetNewRankLevel() uint32 {
	if x != nil {
		return x.NewRankLevel
	}
	return 0
}

type ResSeasonPlayerConditions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerType    COM_SEASON_PLAYER_TYPE      `protobuf:"varint,1,opt,name=PlayerType,proto3,enum=ResData.COM_SEASON_PLAYER_TYPE" json:"PlayerType,omitempty"`
	ConditionType COM_SEASON_PLAYER_CONDITION `protobuf:"varint,2,opt,name=ConditionType,proto3,enum=ResData.COM_SEASON_PLAYER_CONDITION" json:"ConditionType,omitempty"`
	Message       string                      `protobuf:"bytes,3,opt,name=Message,proto3" json:"Message,omitempty"`
	Para1         int64                       `protobuf:"varint,4,opt,name=Para1,proto3" json:"Para1,omitempty"`
	Para2         int64                       `protobuf:"varint,5,opt,name=Para2,proto3" json:"Para2,omitempty"`
	Para3         int64                       `protobuf:"varint,6,opt,name=Para3,proto3" json:"Para3,omitempty"`
	Para4         int64                       `protobuf:"varint,7,opt,name=Para4,proto3" json:"Para4,omitempty"`
	DisplayWeight int32                       `protobuf:"varint,8,opt,name=DisplayWeight,proto3" json:"DisplayWeight,omitempty"`
	TypeWeight    int32                       `protobuf:"varint,9,opt,name=TypeWeight,proto3" json:"TypeWeight,omitempty"`
}

func (x *ResSeasonPlayerConditions) Reset() {
	*x = ResSeasonPlayerConditions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResSeasonPlayerConditions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResSeasonPlayerConditions) ProtoMessage() {}

func (x *ResSeasonPlayerConditions) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResSeasonPlayerConditions.ProtoReflect.Descriptor instead.
func (*ResSeasonPlayerConditions) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{47}
}

func (x *ResSeasonPlayerConditions) GetPlayerType() COM_SEASON_PLAYER_TYPE {
	if x != nil {
		return x.PlayerType
	}
	return COM_SEASON_PLAYER_TYPE_CSPT_MIN
}

func (x *ResSeasonPlayerConditions) GetConditionType() COM_SEASON_PLAYER_CONDITION {
	if x != nil {
		return x.ConditionType
	}
	return COM_SEASON_PLAYER_CONDITION_CSPC_INVALID
}

func (x *ResSeasonPlayerConditions) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ResSeasonPlayerConditions) GetPara1() int64 {
	if x != nil {
		return x.Para1
	}
	return 0
}

func (x *ResSeasonPlayerConditions) GetPara2() int64 {
	if x != nil {
		return x.Para2
	}
	return 0
}

func (x *ResSeasonPlayerConditions) GetPara3() int64 {
	if x != nil {
		return x.Para3
	}
	return 0
}

func (x *ResSeasonPlayerConditions) GetPara4() int64 {
	if x != nil {
		return x.Para4
	}
	return 0
}

func (x *ResSeasonPlayerConditions) GetDisplayWeight() int32 {
	if x != nil {
		return x.DisplayWeight
	}
	return 0
}

func (x *ResSeasonPlayerConditions) GetTypeWeight() int32 {
	if x != nil {
		return x.TypeWeight
	}
	return 0
}

type ResSeasonPlayerConcludingMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerType        COM_SEASON_PLAYER_TYPE `protobuf:"varint,1,opt,name=PlayerType,proto3,enum=ResData.COM_SEASON_PLAYER_TYPE" json:"PlayerType,omitempty"`
	ConcludingMessage string                 `protobuf:"bytes,2,opt,name=ConcludingMessage,proto3" json:"ConcludingMessage,omitempty"`
	DisplayCondsCnt   uint32                 `protobuf:"varint,3,opt,name=DisplayCondsCnt,proto3" json:"DisplayCondsCnt,omitempty"`
}

func (x *ResSeasonPlayerConcludingMsg) Reset() {
	*x = ResSeasonPlayerConcludingMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResSeasonPlayerConcludingMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResSeasonPlayerConcludingMsg) ProtoMessage() {}

func (x *ResSeasonPlayerConcludingMsg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResSeasonPlayerConcludingMsg.ProtoReflect.Descriptor instead.
func (*ResSeasonPlayerConcludingMsg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{48}
}

func (x *ResSeasonPlayerConcludingMsg) GetPlayerType() COM_SEASON_PLAYER_TYPE {
	if x != nil {
		return x.PlayerType
	}
	return COM_SEASON_PLAYER_TYPE_CSPT_MIN
}

func (x *ResSeasonPlayerConcludingMsg) GetConcludingMessage() string {
	if x != nil {
		return x.ConcludingMessage
	}
	return ""
}

func (x *ResSeasonPlayerConcludingMsg) GetDisplayCondsCnt() uint32 {
	if x != nil {
		return x.DisplayCondsCnt
	}
	return 0
}

type SeasonConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Season             *ResSeasonDataBin             `protobuf:"bytes,1,opt,name=Season,proto3" json:"Season,omitempty"`
	RankAwards         *ResSeasonRankAwardsDataBin   `protobuf:"bytes,2,opt,name=RankAwards,proto3" json:"RankAwards,omitempty"`
	RankTaskData       *ResSeasonRankTaskDataBin     `protobuf:"bytes,3,opt,name=RankTaskData,proto3" json:"RankTaskData,omitempty"`
	GameTypeData       *ResSeasonGameTypesBin        `protobuf:"bytes,4,opt,name=GameTypeData,proto3" json:"GameTypeData,omitempty"`
	SeasonRankInherit  *ResSeasonRankInherit         `protobuf:"bytes,5,opt,name=SeasonRankInherit,proto3" json:"SeasonRankInherit,omitempty"`
	PlayModeCfg        *ResPlayMod                   `protobuf:"bytes,6,opt,name=PlayModeCfg,proto3" json:"PlayModeCfg,omitempty"`
	PlayCenter         *ResSeasonPlayCenterBin       `protobuf:"bytes,7,opt,name=PlayCenter,proto3" json:"PlayCenter,omitempty"`
	PlayerConds        *ResSeasonPlayerConditions    `protobuf:"bytes,8,opt,name=PlayerConds,proto3" json:"PlayerConds,omitempty"`
	PlayerConcluding   *ResSeasonPlayerConcludingMsg `protobuf:"bytes,9,opt,name=PlayerConcluding,proto3" json:"PlayerConcluding,omitempty"`
	InSeasonRankAwards *ResInSeasonRankAwardsDataBin `protobuf:"bytes,10,opt,name=InSeasonRankAwards,proto3" json:"InSeasonRankAwards,omitempty"`
}

func (x *SeasonConf) Reset() {
	*x = SeasonConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeasonConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonConf) ProtoMessage() {}

func (x *SeasonConf) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonConf.ProtoReflect.Descriptor instead.
func (*SeasonConf) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{49}
}

func (x *SeasonConf) GetSeason() *ResSeasonDataBin {
	if x != nil {
		return x.Season
	}
	return nil
}

func (x *SeasonConf) GetRankAwards() *ResSeasonRankAwardsDataBin {
	if x != nil {
		return x.RankAwards
	}
	return nil
}

func (x *SeasonConf) GetRankTaskData() *ResSeasonRankTaskDataBin {
	if x != nil {
		return x.RankTaskData
	}
	return nil
}

func (x *SeasonConf) GetGameTypeData() *ResSeasonGameTypesBin {
	if x != nil {
		return x.GameTypeData
	}
	return nil
}

func (x *SeasonConf) GetSeasonRankInherit() *ResSeasonRankInherit {
	if x != nil {
		return x.SeasonRankInherit
	}
	return nil
}

func (x *SeasonConf) GetPlayModeCfg() *ResPlayMod {
	if x != nil {
		return x.PlayModeCfg
	}
	return nil
}

func (x *SeasonConf) GetPlayCenter() *ResSeasonPlayCenterBin {
	if x != nil {
		return x.PlayCenter
	}
	return nil
}

func (x *SeasonConf) GetPlayerConds() *ResSeasonPlayerConditions {
	if x != nil {
		return x.PlayerConds
	}
	return nil
}

func (x *SeasonConf) GetPlayerConcluding() *ResSeasonPlayerConcludingMsg {
	if x != nil {
		return x.PlayerConcluding
	}
	return nil
}

func (x *SeasonConf) GetInSeasonRankAwards() *ResInSeasonRankAwardsDataBin {
	if x != nil {
		return x.InSeasonRankAwards
	}
	return nil
}

type ResTemplateMailDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	SenderName    string `protobuf:"bytes,2,opt,name=SenderName,proto3" json:"SenderName,omitempty"`
	Type          uint32 `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	Title         string `protobuf:"bytes,4,opt,name=Title,proto3" json:"Title,omitempty"`
	Body          string `protobuf:"bytes,5,opt,name=Body,proto3" json:"Body,omitempty"`
	SaveInterval  uint32 `protobuf:"varint,6,opt,name=SaveInterval,proto3" json:"SaveInterval,omitempty"`
	ParamNum      uint32 `protobuf:"varint,7,opt,name=ParamNum,proto3" json:"ParamNum,omitempty"`
	BackgroundURL string `protobuf:"bytes,8,opt,name=BackgroundURL,proto3" json:"BackgroundURL,omitempty"`
	ShowWeight    uint32 `protobuf:"varint,9,opt,name=ShowWeight,proto3" json:"ShowWeight,omitempty"`
}

func (x *ResTemplateMailDataBin) Reset() {
	*x = ResTemplateMailDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResTemplateMailDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResTemplateMailDataBin) ProtoMessage() {}

func (x *ResTemplateMailDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResTemplateMailDataBin.ProtoReflect.Descriptor instead.
func (*ResTemplateMailDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{50}
}

func (x *ResTemplateMailDataBin) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResTemplateMailDataBin) GetSenderName() string {
	if x != nil {
		return x.SenderName
	}
	return ""
}

func (x *ResTemplateMailDataBin) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ResTemplateMailDataBin) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResTemplateMailDataBin) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *ResTemplateMailDataBin) GetSaveInterval() uint32 {
	if x != nil {
		return x.SaveInterval
	}
	return 0
}

func (x *ResTemplateMailDataBin) GetParamNum() uint32 {
	if x != nil {
		return x.ParamNum
	}
	return 0
}

func (x *ResTemplateMailDataBin) GetBackgroundURL() string {
	if x != nil {
		return x.BackgroundURL
	}
	return ""
}

func (x *ResTemplateMailDataBin) GetShowWeight() uint32 {
	if x != nil {
		return x.ShowWeight
	}
	return 0
}

type MultiLangMailContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LanguageRule GAMELANGUAGE_TYPE `protobuf:"varint,1,opt,name=LanguageRule,proto3,enum=ResData.GAMELANGUAGE_TYPE" json:"LanguageRule,omitempty"`
	SenderName   string            `protobuf:"bytes,2,opt,name=SenderName,proto3" json:"SenderName,omitempty"`
	Title        string            `protobuf:"bytes,3,opt,name=Title,proto3" json:"Title,omitempty"`
	Body         string            `protobuf:"bytes,4,opt,name=Body,proto3" json:"Body,omitempty"`
}

func (x *MultiLangMailContent) Reset() {
	*x = MultiLangMailContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiLangMailContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiLangMailContent) ProtoMessage() {}

func (x *MultiLangMailContent) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiLangMailContent.ProtoReflect.Descriptor instead.
func (*MultiLangMailContent) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{51}
}

func (x *MultiLangMailContent) GetLanguageRule() GAMELANGUAGE_TYPE {
	if x != nil {
		return x.LanguageRule
	}
	return GAMELANGUAGE_TYPE_GAMELANGUAGE_TYPE_None
}

func (x *MultiLangMailContent) GetSenderName() string {
	if x != nil {
		return x.SenderName
	}
	return ""
}

func (x *MultiLangMailContent) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MultiLangMailContent) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

type ResGlobalMailDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            uint32                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	StartTime     string                  `protobuf:"bytes,2,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime       string                  `protobuf:"bytes,3,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	StartTimeGen  uint32                  `protobuf:"varint,4,opt,name=StartTimeGen,proto3" json:"StartTimeGen,omitempty"`
	EndTimeGen    uint32                  `protobuf:"varint,5,opt,name=EndTimeGen,proto3" json:"EndTimeGen,omitempty"`
	UnlockCond    *ResCondInfo            `protobuf:"bytes,6,opt,name=UnlockCond,proto3" json:"UnlockCond,omitempty"`
	Contents      []*MultiLangMailContent `protobuf:"bytes,7,rep,name=Contents,proto3" json:"Contents,omitempty"`
	SaveInterval  uint32                  `protobuf:"varint,8,opt,name=SaveInterval,proto3" json:"SaveInterval,omitempty"`
	Award         []*ResGameItem          `protobuf:"bytes,9,rep,name=Award,proto3" json:"Award,omitempty"`
	BackgroundURL string                  `protobuf:"bytes,10,opt,name=BackgroundURL,proto3" json:"BackgroundURL,omitempty"`
	ShowWeight    uint32                  `protobuf:"varint,11,opt,name=ShowWeight,proto3" json:"ShowWeight,omitempty"`
}

func (x *ResGlobalMailDataBin) Reset() {
	*x = ResGlobalMailDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGlobalMailDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGlobalMailDataBin) ProtoMessage() {}

func (x *ResGlobalMailDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGlobalMailDataBin.ProtoReflect.Descriptor instead.
func (*ResGlobalMailDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{52}
}

func (x *ResGlobalMailDataBin) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResGlobalMailDataBin) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ResGlobalMailDataBin) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *ResGlobalMailDataBin) GetStartTimeGen() uint32 {
	if x != nil {
		return x.StartTimeGen
	}
	return 0
}

func (x *ResGlobalMailDataBin) GetEndTimeGen() uint32 {
	if x != nil {
		return x.EndTimeGen
	}
	return 0
}

func (x *ResGlobalMailDataBin) GetUnlockCond() *ResCondInfo {
	if x != nil {
		return x.UnlockCond
	}
	return nil
}

func (x *ResGlobalMailDataBin) GetContents() []*MultiLangMailContent {
	if x != nil {
		return x.Contents
	}
	return nil
}

func (x *ResGlobalMailDataBin) GetSaveInterval() uint32 {
	if x != nil {
		return x.SaveInterval
	}
	return 0
}

func (x *ResGlobalMailDataBin) GetAward() []*ResGameItem {
	if x != nil {
		return x.Award
	}
	return nil
}

func (x *ResGlobalMailDataBin) GetBackgroundURL() string {
	if x != nil {
		return x.BackgroundURL
	}
	return ""
}

func (x *ResGlobalMailDataBin) GetShowWeight() uint32 {
	if x != nil {
		return x.ShowWeight
	}
	return 0
}

type ResMailSysOpt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                        uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	UnreadMailDefaultSaveTime uint32 `protobuf:"varint,2,opt,name=UnreadMailDefaultSaveTime,proto3" json:"UnreadMailDefaultSaveTime,omitempty"`
	ReadedMailSaveTime        uint32 `protobuf:"varint,3,opt,name=ReadedMailSaveTime,proto3" json:"ReadedMailSaveTime,omitempty"`
}

func (x *ResMailSysOpt) Reset() {
	*x = ResMailSysOpt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResMailSysOpt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResMailSysOpt) ProtoMessage() {}

func (x *ResMailSysOpt) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResMailSysOpt.ProtoReflect.Descriptor instead.
func (*ResMailSysOpt) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{53}
}

func (x *ResMailSysOpt) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResMailSysOpt) GetUnreadMailDefaultSaveTime() uint32 {
	if x != nil {
		return x.UnreadMailDefaultSaveTime
	}
	return 0
}

func (x *ResMailSysOpt) GetReadedMailSaveTime() uint32 {
	if x != nil {
		return x.ReadedMailSaveTime
	}
	return 0
}

type MailConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateMail *ResTemplateMailDataBin `protobuf:"bytes,1,opt,name=TemplateMail,proto3" json:"TemplateMail,omitempty"`
	GlobalMail   *ResGlobalMailDataBin   `protobuf:"bytes,2,opt,name=GlobalMail,proto3" json:"GlobalMail,omitempty"`
	MailSysOpt   *ResMailSysOpt          `protobuf:"bytes,3,opt,name=MailSysOpt,proto3" json:"MailSysOpt,omitempty"`
}

func (x *MailConf) Reset() {
	*x = MailConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MailConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailConf) ProtoMessage() {}

func (x *MailConf) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailConf.ProtoReflect.Descriptor instead.
func (*MailConf) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{54}
}

func (x *MailConf) GetTemplateMail() *ResTemplateMailDataBin {
	if x != nil {
		return x.TemplateMail
	}
	return nil
}

func (x *MailConf) GetGlobalMail() *ResGlobalMailDataBin {
	if x != nil {
		return x.GlobalMail
	}
	return nil
}

func (x *MailConf) GetMailSysOpt() *ResMailSysOpt {
	if x != nil {
		return x.MailSysOpt
	}
	return nil
}

type ResTalkEmojiCfgDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	ID   uint32 `protobuf:"varint,2,opt,name=ID,proto3" json:"ID,omitempty"`
	Text string `protobuf:"bytes,3,opt,name=Text,proto3" json:"Text,omitempty"`
}

func (x *ResTalkEmojiCfgDataBin) Reset() {
	*x = ResTalkEmojiCfgDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResTalkEmojiCfgDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResTalkEmojiCfgDataBin) ProtoMessage() {}

func (x *ResTalkEmojiCfgDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResTalkEmojiCfgDataBin.ProtoReflect.Descriptor instead.
func (*ResTalkEmojiCfgDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{55}
}

func (x *ResTalkEmojiCfgDataBin) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ResTalkEmojiCfgDataBin) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResTalkEmojiCfgDataBin) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type ResTalkQuickMsgCfgDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID   uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Text string `protobuf:"bytes,2,opt,name=Text,proto3" json:"Text,omitempty"`
}

func (x *ResTalkQuickMsgCfgDataBin) Reset() {
	*x = ResTalkQuickMsgCfgDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResTalkQuickMsgCfgDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResTalkQuickMsgCfgDataBin) ProtoMessage() {}

func (x *ResTalkQuickMsgCfgDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResTalkQuickMsgCfgDataBin.ProtoReflect.Descriptor instead.
func (*ResTalkQuickMsgCfgDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{56}
}

func (x *ResTalkQuickMsgCfgDataBin) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResTalkQuickMsgCfgDataBin) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type ResTalkInsideQuickMsgCfgDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                  uint32              `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Order               uint32              `protobuf:"varint,2,opt,name=Order,proto3" json:"Order,omitempty"`
	LordID              uint32              `protobuf:"varint,3,opt,name=LordID,proto3" json:"LordID,omitempty"`
	SkinID              uint32              `protobuf:"varint,4,opt,name=SkinID,proto3" json:"SkinID,omitempty"`
	Text                string              `protobuf:"bytes,5,opt,name=Text,proto3" json:"Text,omitempty"`
	Voice               string              `protobuf:"bytes,6,opt,name=Voice,proto3" json:"Voice,omitempty"`
	IsInitUnlock        bool                `protobuf:"varint,7,opt,name=IsInitUnlock,proto3" json:"IsInitUnlock,omitempty"`
	UseType             uint32              `protobuf:"varint,8,opt,name=UseType,proto3" json:"UseType,omitempty"`
	AiCommunicationType AICommunicationType `protobuf:"varint,9,opt,name=aiCommunicationType,proto3,enum=ResData.AICommunicationType" json:"aiCommunicationType,omitempty"`
	Title               string              `protobuf:"bytes,10,opt,name=Title,proto3" json:"Title,omitempty"`
	IsIncludedInFiles   bool                `protobuf:"varint,11,opt,name=IsIncludedInFiles,proto3" json:"IsIncludedInFiles,omitempty"`
}

func (x *ResTalkInsideQuickMsgCfgDataBin) Reset() {
	*x = ResTalkInsideQuickMsgCfgDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResTalkInsideQuickMsgCfgDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResTalkInsideQuickMsgCfgDataBin) ProtoMessage() {}

func (x *ResTalkInsideQuickMsgCfgDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResTalkInsideQuickMsgCfgDataBin.ProtoReflect.Descriptor instead.
func (*ResTalkInsideQuickMsgCfgDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{57}
}

func (x *ResTalkInsideQuickMsgCfgDataBin) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResTalkInsideQuickMsgCfgDataBin) GetOrder() uint32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *ResTalkInsideQuickMsgCfgDataBin) GetLordID() uint32 {
	if x != nil {
		return x.LordID
	}
	return 0
}

func (x *ResTalkInsideQuickMsgCfgDataBin) GetSkinID() uint32 {
	if x != nil {
		return x.SkinID
	}
	return 0
}

func (x *ResTalkInsideQuickMsgCfgDataBin) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ResTalkInsideQuickMsgCfgDataBin) GetVoice() string {
	if x != nil {
		return x.Voice
	}
	return ""
}

func (x *ResTalkInsideQuickMsgCfgDataBin) GetIsInitUnlock() bool {
	if x != nil {
		return x.IsInitUnlock
	}
	return false
}

func (x *ResTalkInsideQuickMsgCfgDataBin) GetUseType() uint32 {
	if x != nil {
		return x.UseType
	}
	return 0
}

func (x *ResTalkInsideQuickMsgCfgDataBin) GetAiCommunicationType() AICommunicationType {
	if x != nil {
		return x.AiCommunicationType
	}
	return AICommunicationType_AICommunicationType_None
}

func (x *ResTalkInsideQuickMsgCfgDataBin) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResTalkInsideQuickMsgCfgDataBin) GetIsIncludedInFiles() bool {
	if x != nil {
		return x.IsIncludedInFiles
	}
	return false
}

type ResTalkTypeInfoCfgDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	CacheNumber uint32 `protobuf:"varint,2,opt,name=CacheNumber,proto3" json:"CacheNumber,omitempty"`
}

func (x *ResTalkTypeInfoCfgDataBin) Reset() {
	*x = ResTalkTypeInfoCfgDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResTalkTypeInfoCfgDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResTalkTypeInfoCfgDataBin) ProtoMessage() {}

func (x *ResTalkTypeInfoCfgDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResTalkTypeInfoCfgDataBin.ProtoReflect.Descriptor instead.
func (*ResTalkTypeInfoCfgDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{58}
}

func (x *ResTalkTypeInfoCfgDataBin) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResTalkTypeInfoCfgDataBin) GetCacheNumber() uint32 {
	if x != nil {
		return x.CacheNumber
	}
	return 0
}

// 等级经验表
type ResExpToLevelUpDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level       uint32 `protobuf:"varint,1,opt,name=Level,proto3" json:"Level,omitempty"`
	ExpNeed     uint32 `protobuf:"varint,2,opt,name=ExpNeed,proto3" json:"ExpNeed,omitempty"`
	AwardDropID uint32 `protobuf:"varint,3,opt,name=AwardDropID,proto3" json:"AwardDropID,omitempty"`
	TipStr      string `protobuf:"bytes,4,opt,name=TipStr,proto3" json:"TipStr,omitempty"`
}

func (x *ResExpToLevelUpDataBin) Reset() {
	*x = ResExpToLevelUpDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResExpToLevelUpDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResExpToLevelUpDataBin) ProtoMessage() {}

func (x *ResExpToLevelUpDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResExpToLevelUpDataBin.ProtoReflect.Descriptor instead.
func (*ResExpToLevelUpDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{59}
}

func (x *ResExpToLevelUpDataBin) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ResExpToLevelUpDataBin) GetExpNeed() uint32 {
	if x != nil {
		return x.ExpNeed
	}
	return 0
}

func (x *ResExpToLevelUpDataBin) GetAwardDropID() uint32 {
	if x != nil {
		return x.AwardDropID
	}
	return 0
}

func (x *ResExpToLevelUpDataBin) GetTipStr() string {
	if x != nil {
		return x.TipStr
	}
	return ""
}

// 经验加成表
type ResExpBufDatabin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           uint32   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ExpBuf       uint32   `protobuf:"varint,2,opt,name=ExpBuf,proto3" json:"ExpBuf,omitempty"`
	StartTimeStr string   `protobuf:"bytes,3,opt,name=StartTimeStr,proto3" json:"StartTimeStr,omitempty"`
	EndTimeStr   string   `protobuf:"bytes,4,opt,name=EndTimeStr,proto3" json:"EndTimeStr,omitempty"`
	GameTypes    []uint32 `protobuf:"varint,5,rep,packed,name=GameTypes,proto3" json:"GameTypes,omitempty"`
}

func (x *ResExpBufDatabin) Reset() {
	*x = ResExpBufDatabin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResExpBufDatabin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResExpBufDatabin) ProtoMessage() {}

func (x *ResExpBufDatabin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResExpBufDatabin.ProtoReflect.Descriptor instead.
func (*ResExpBufDatabin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{60}
}

func (x *ResExpBufDatabin) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResExpBufDatabin) GetExpBuf() uint32 {
	if x != nil {
		return x.ExpBuf
	}
	return 0
}

func (x *ResExpBufDatabin) GetStartTimeStr() string {
	if x != nil {
		return x.StartTimeStr
	}
	return ""
}

func (x *ResExpBufDatabin) GetEndTimeStr() string {
	if x != nil {
		return x.EndTimeStr
	}
	return ""
}

func (x *ResExpBufDatabin) GetGameTypes() []uint32 {
	if x != nil {
		return x.GameTypes
	}
	return nil
}

type ExpConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpToLvlUp *ResExpToLevelUpDataBin `protobuf:"bytes,1,opt,name=ExpToLvlUp,proto3" json:"ExpToLvlUp,omitempty"`
	ExpBuf     *ResExpBufDatabin       `protobuf:"bytes,2,opt,name=ExpBuf,proto3" json:"ExpBuf,omitempty"`
}

func (x *ExpConf) Reset() {
	*x = ExpConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpConf) ProtoMessage() {}

func (x *ExpConf) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpConf.ProtoReflect.Descriptor instead.
func (*ExpConf) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{61}
}

func (x *ExpConf) GetExpToLvlUp() *ResExpToLevelUpDataBin {
	if x != nil {
		return x.ExpToLvlUp
	}
	return nil
}

func (x *ExpConf) GetExpBuf() *ResExpBufDatabin {
	if x != nil {
		return x.ExpBuf
	}
	return nil
}

//####条件--开始##
type ResCondInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    uint32   `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	GoalCnt int64    `protobuf:"varint,2,opt,name=GoalCnt,proto3" json:"GoalCnt,omitempty"`
	Param   []uint32 `protobuf:"varint,3,rep,packed,name=Param,proto3" json:"Param,omitempty"`
}

func (x *ResCondInfo) Reset() {
	*x = ResCondInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResCondInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResCondInfo) ProtoMessage() {}

func (x *ResCondInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResCondInfo.ProtoReflect.Descriptor instead.
func (*ResCondInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{62}
}

func (x *ResCondInfo) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ResCondInfo) GetGoalCnt() int64 {
	if x != nil {
		return x.GoalCnt
	}
	return 0
}

func (x *ResCondInfo) GetParam() []uint32 {
	if x != nil {
		return x.Param
	}
	return nil
}

type ResGameUnlockDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemType      uint32         `protobuf:"varint,1,opt,name=SystemType,proto3" json:"SystemType,omitempty"`
	IsSystemOpen    bool           `protobuf:"varint,2,opt,name=IsSystemOpen,proto3" json:"IsSystemOpen,omitempty"`
	IsSystemTips    bool           `protobuf:"varint,3,opt,name=IsSystemTips,proto3" json:"IsSystemTips,omitempty"`
	SystemTips      string         `protobuf:"bytes,4,opt,name=SystemTips,proto3" json:"SystemTips,omitempty"`
	UnLockTips      string         `protobuf:"bytes,5,opt,name=UnLockTips,proto3" json:"UnLockTips,omitempty"`
	LockType        uint32         `protobuf:"varint,6,opt,name=LockType,proto3" json:"LockType,omitempty"`
	SystemIconPath  string         `protobuf:"bytes,7,opt,name=SystemIconPath,proto3" json:"SystemIconPath,omitempty"`
	SystemTipLevel  uint32         `protobuf:"varint,8,opt,name=SystemTipLevel,proto3" json:"SystemTipLevel,omitempty"`
	UnlockCond      []*ResCondInfo `protobuf:"bytes,9,rep,name=UnlockCond,proto3" json:"UnlockCond,omitempty"`
	SystemCloseTips string         `protobuf:"bytes,10,opt,name=SystemCloseTips,proto3" json:"SystemCloseTips,omitempty"`
}

func (x *ResGameUnlockDataBin) Reset() {
	*x = ResGameUnlockDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGameUnlockDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGameUnlockDataBin) ProtoMessage() {}

func (x *ResGameUnlockDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGameUnlockDataBin.ProtoReflect.Descriptor instead.
func (*ResGameUnlockDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{63}
}

func (x *ResGameUnlockDataBin) GetSystemType() uint32 {
	if x != nil {
		return x.SystemType
	}
	return 0
}

func (x *ResGameUnlockDataBin) GetIsSystemOpen() bool {
	if x != nil {
		return x.IsSystemOpen
	}
	return false
}

func (x *ResGameUnlockDataBin) GetIsSystemTips() bool {
	if x != nil {
		return x.IsSystemTips
	}
	return false
}

func (x *ResGameUnlockDataBin) GetSystemTips() string {
	if x != nil {
		return x.SystemTips
	}
	return ""
}

func (x *ResGameUnlockDataBin) GetUnLockTips() string {
	if x != nil {
		return x.UnLockTips
	}
	return ""
}

func (x *ResGameUnlockDataBin) GetLockType() uint32 {
	if x != nil {
		return x.LockType
	}
	return 0
}

func (x *ResGameUnlockDataBin) GetSystemIconPath() string {
	if x != nil {
		return x.SystemIconPath
	}
	return ""
}

func (x *ResGameUnlockDataBin) GetSystemTipLevel() uint32 {
	if x != nil {
		return x.SystemTipLevel
	}
	return 0
}

func (x *ResGameUnlockDataBin) GetUnlockCond() []*ResCondInfo {
	if x != nil {
		return x.UnlockCond
	}
	return nil
}

func (x *ResGameUnlockDataBin) GetSystemCloseTips() string {
	if x != nil {
		return x.SystemCloseTips
	}
	return ""
}

type GameUnlockConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameUnlock *ResGameUnlockDataBin `protobuf:"bytes,1,opt,name=GameUnlock,proto3" json:"GameUnlock,omitempty"`
}

func (x *GameUnlockConf) Reset() {
	*x = GameUnlockConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameUnlockConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameUnlockConf) ProtoMessage() {}

func (x *GameUnlockConf) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameUnlockConf.ProtoReflect.Descriptor instead.
func (*GameUnlockConf) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{64}
}

func (x *GameUnlockConf) GetGameUnlock() *ResGameUnlockDataBin {
	if x != nil {
		return x.GameUnlock
	}
	return nil
}

type ResTokenTaskCfgDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID      uint32       `protobuf:"varint,1,opt,name=TaskID,proto3" json:"TaskID,omitempty"`
	TaskGroupID uint32       `protobuf:"varint,2,opt,name=TaskGroupID,proto3" json:"TaskGroupID,omitempty"`
	Icon        string       `protobuf:"bytes,3,opt,name=Icon,proto3" json:"Icon,omitempty"`
	Title       string       `protobuf:"bytes,4,opt,name=Title,proto3" json:"Title,omitempty"`
	Desc        string       `protobuf:"bytes,5,opt,name=Desc,proto3" json:"Desc,omitempty"`
	FinishCond  *ResCondInfo `protobuf:"bytes,6,opt,name=FinishCond,proto3" json:"FinishCond,omitempty"`
	AwardDropID uint32       `protobuf:"varint,7,opt,name=AwardDropID,proto3" json:"AwardDropID,omitempty"`
	SystemType  uint32       `protobuf:"varint,8,opt,name=SystemType,proto3" json:"SystemType,omitempty"`
	PureIcon    string       `protobuf:"bytes,9,opt,name=PureIcon,proto3" json:"PureIcon,omitempty"`
}

func (x *ResTokenTaskCfgDataBin) Reset() {
	*x = ResTokenTaskCfgDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResTokenTaskCfgDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResTokenTaskCfgDataBin) ProtoMessage() {}

func (x *ResTokenTaskCfgDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResTokenTaskCfgDataBin.ProtoReflect.Descriptor instead.
func (*ResTokenTaskCfgDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{65}
}

func (x *ResTokenTaskCfgDataBin) GetTaskID() uint32 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *ResTokenTaskCfgDataBin) GetTaskGroupID() uint32 {
	if x != nil {
		return x.TaskGroupID
	}
	return 0
}

func (x *ResTokenTaskCfgDataBin) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *ResTokenTaskCfgDataBin) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResTokenTaskCfgDataBin) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ResTokenTaskCfgDataBin) GetFinishCond() *ResCondInfo {
	if x != nil {
		return x.FinishCond
	}
	return nil
}

func (x *ResTokenTaskCfgDataBin) GetAwardDropID() uint32 {
	if x != nil {
		return x.AwardDropID
	}
	return 0
}

func (x *ResTokenTaskCfgDataBin) GetSystemType() uint32 {
	if x != nil {
		return x.SystemType
	}
	return 0
}

func (x *ResTokenTaskCfgDataBin) GetPureIcon() string {
	if x != nil {
		return x.PureIcon
	}
	return ""
}

type ResTokenTaskRefreshDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshID          uint32   `protobuf:"varint,1,opt,name=RefreshID,proto3" json:"RefreshID,omitempty"`
	SeasonID           uint32   `protobuf:"varint,2,opt,name=SeasonID,proto3" json:"SeasonID,omitempty"`
	DailyTaskGroupIDs  []uint32 `protobuf:"varint,4,rep,packed,name=DailyTaskGroupIDs,proto3" json:"DailyTaskGroupIDs,omitempty"`
	WeeklyTaskGroupIDs []uint32 `protobuf:"varint,6,rep,packed,name=WeeklyTaskGroupIDs,proto3" json:"WeeklyTaskGroupIDs,omitempty"`
	IsNewbie           uint32   `protobuf:"varint,7,opt,name=IsNewbie,proto3" json:"IsNewbie,omitempty"` // 每个赛季有且仅有一个新手任务刷新ID
}

func (x *ResTokenTaskRefreshDataBin) Reset() {
	*x = ResTokenTaskRefreshDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResTokenTaskRefreshDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResTokenTaskRefreshDataBin) ProtoMessage() {}

func (x *ResTokenTaskRefreshDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResTokenTaskRefreshDataBin.ProtoReflect.Descriptor instead.
func (*ResTokenTaskRefreshDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{66}
}

func (x *ResTokenTaskRefreshDataBin) GetRefreshID() uint32 {
	if x != nil {
		return x.RefreshID
	}
	return 0
}

func (x *ResTokenTaskRefreshDataBin) GetSeasonID() uint32 {
	if x != nil {
		return x.SeasonID
	}
	return 0
}

func (x *ResTokenTaskRefreshDataBin) GetDailyTaskGroupIDs() []uint32 {
	if x != nil {
		return x.DailyTaskGroupIDs
	}
	return nil
}

func (x *ResTokenTaskRefreshDataBin) GetWeeklyTaskGroupIDs() []uint32 {
	if x != nil {
		return x.WeeklyTaskGroupIDs
	}
	return nil
}

func (x *ResTokenTaskRefreshDataBin) GetIsNewbie() uint32 {
	if x != nil {
		return x.IsNewbie
	}
	return 0
}

type STTokenEffectInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxDailyTaskNum         uint32 `protobuf:"varint,1,opt,name=MaxDailyTaskNum,proto3" json:"MaxDailyTaskNum,omitempty"`
	MaxWeeklyTaskNum        uint32 `protobuf:"varint,2,opt,name=MaxWeeklyTaskNum,proto3" json:"MaxWeeklyTaskNum,omitempty"`
	MaxDailyTaskRefreshNum  uint32 `protobuf:"varint,3,opt,name=MaxDailyTaskRefreshNum,proto3" json:"MaxDailyTaskRefreshNum,omitempty"`
	MaxWeeklyTaskRefreshNum uint32 `protobuf:"varint,4,opt,name=MaxWeeklyTaskRefreshNum,proto3" json:"MaxWeeklyTaskRefreshNum,omitempty"`
	HangupMaxSecond         uint32 `protobuf:"varint,5,opt,name=HangupMaxSecond,proto3" json:"HangupMaxSecond,omitempty"`
}

func (x *STTokenEffectInfo) Reset() {
	*x = STTokenEffectInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *STTokenEffectInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*STTokenEffectInfo) ProtoMessage() {}

func (x *STTokenEffectInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use STTokenEffectInfo.ProtoReflect.Descriptor instead.
func (*STTokenEffectInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{67}
}

func (x *STTokenEffectInfo) GetMaxDailyTaskNum() uint32 {
	if x != nil {
		return x.MaxDailyTaskNum
	}
	return 0
}

func (x *STTokenEffectInfo) GetMaxWeeklyTaskNum() uint32 {
	if x != nil {
		return x.MaxWeeklyTaskNum
	}
	return 0
}

func (x *STTokenEffectInfo) GetMaxDailyTaskRefreshNum() uint32 {
	if x != nil {
		return x.MaxDailyTaskRefreshNum
	}
	return 0
}

func (x *STTokenEffectInfo) GetMaxWeeklyTaskRefreshNum() uint32 {
	if x != nil {
		return x.MaxWeeklyTaskRefreshNum
	}
	return 0
}

func (x *STTokenEffectInfo) GetHangupMaxSecond() uint32 {
	if x != nil {
		return x.HangupMaxSecond
	}
	return 0
}

type ResTokenSeasonCfgDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonID             uint32             `protobuf:"varint,1,opt,name=SeasonID,proto3" json:"SeasonID,omitempty"`
	AutoAward            uint32             `protobuf:"varint,3,opt,name=AutoAward,proto3" json:"AutoAward,omitempty"`
	AwardsIcon           string             `protobuf:"bytes,4,opt,name=AwardsIcon,proto3" json:"AwardsIcon,omitempty"`
	HighTokenCost        *ResGameItem       `protobuf:"bytes,5,opt,name=HighTokenCost,proto3" json:"HighTokenCost,omitempty"`
	DeluxeTokenCost      *ResGameItem       `protobuf:"bytes,6,opt,name=DeluxeTokenCost,proto3" json:"DeluxeTokenCost,omitempty"`
	High2DeluxeTokenCost *ResGameItem       `protobuf:"bytes,7,opt,name=High2DeluxeTokenCost,proto3" json:"High2DeluxeTokenCost,omitempty"`
	HighTokenBuyDrop     uint32             `protobuf:"varint,8,opt,name=HighTokenBuyDrop,proto3" json:"HighTokenBuyDrop,omitempty"`
	DeluxeTokenBuyDrop   uint32             `protobuf:"varint,9,opt,name=DeluxeTokenBuyDrop,proto3" json:"DeluxeTokenBuyDrop,omitempty"`
	LevelCost            *ResGameItem       `protobuf:"bytes,10,opt,name=LevelCost,proto3" json:"LevelCost,omitempty"`
	BuyMaxLevel          uint32             `protobuf:"varint,11,opt,name=BuyMaxLevel,proto3" json:"BuyMaxLevel,omitempty"`
	HangupSecond         uint32             `protobuf:"varint,14,opt,name=HangupSecond,proto3" json:"HangupSecond,omitempty"`
	HangupExp            uint32             `protobuf:"varint,15,opt,name=HangupExp,proto3" json:"HangupExp,omitempty"`
	TipsMax              uint32             `protobuf:"varint,20,opt,name=TipsMax,proto3" json:"TipsMax,omitempty"`
	HangupMinExp         uint32             `protobuf:"varint,22,opt,name=HangupMinExp,proto3" json:"HangupMinExp,omitempty"`
	CompensatePropID     uint32             `protobuf:"varint,25,opt,name=CompensatePropID,proto3" json:"CompensatePropID,omitempty"`
	NormalTokenEffect    *STTokenEffectInfo `protobuf:"bytes,26,opt,name=NormalTokenEffect,proto3" json:"NormalTokenEffect,omitempty"`
	HighTokenEffect      *STTokenEffectInfo `protobuf:"bytes,27,opt,name=HighTokenEffect,proto3" json:"HighTokenEffect,omitempty"`
	DeluxeTokenEffect    *STTokenEffectInfo `protobuf:"bytes,28,opt,name=DeluxeTokenEffect,proto3" json:"DeluxeTokenEffect,omitempty"`
	ExpOfLevelCost       uint32             `protobuf:"varint,29,opt,name=ExpOfLevelCost,proto3" json:"ExpOfLevelCost,omitempty"` // 花费levelcost获得的经验
}

func (x *ResTokenSeasonCfgDataBin) Reset() {
	*x = ResTokenSeasonCfgDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResTokenSeasonCfgDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResTokenSeasonCfgDataBin) ProtoMessage() {}

func (x *ResTokenSeasonCfgDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResTokenSeasonCfgDataBin.ProtoReflect.Descriptor instead.
func (*ResTokenSeasonCfgDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{68}
}

func (x *ResTokenSeasonCfgDataBin) GetSeasonID() uint32 {
	if x != nil {
		return x.SeasonID
	}
	return 0
}

func (x *ResTokenSeasonCfgDataBin) GetAutoAward() uint32 {
	if x != nil {
		return x.AutoAward
	}
	return 0
}

func (x *ResTokenSeasonCfgDataBin) GetAwardsIcon() string {
	if x != nil {
		return x.AwardsIcon
	}
	return ""
}

func (x *ResTokenSeasonCfgDataBin) GetHighTokenCost() *ResGameItem {
	if x != nil {
		return x.HighTokenCost
	}
	return nil
}

func (x *ResTokenSeasonCfgDataBin) GetDeluxeTokenCost() *ResGameItem {
	if x != nil {
		return x.DeluxeTokenCost
	}
	return nil
}

func (x *ResTokenSeasonCfgDataBin) GetHigh2DeluxeTokenCost() *ResGameItem {
	if x != nil {
		return x.High2DeluxeTokenCost
	}
	return nil
}

func (x *ResTokenSeasonCfgDataBin) GetHighTokenBuyDrop() uint32 {
	if x != nil {
		return x.HighTokenBuyDrop
	}
	return 0
}

func (x *ResTokenSeasonCfgDataBin) GetDeluxeTokenBuyDrop() uint32 {
	if x != nil {
		return x.DeluxeTokenBuyDrop
	}
	return 0
}

func (x *ResTokenSeasonCfgDataBin) GetLevelCost() *ResGameItem {
	if x != nil {
		return x.LevelCost
	}
	return nil
}

func (x *ResTokenSeasonCfgDataBin) GetBuyMaxLevel() uint32 {
	if x != nil {
		return x.BuyMaxLevel
	}
	return 0
}

func (x *ResTokenSeasonCfgDataBin) GetHangupSecond() uint32 {
	if x != nil {
		return x.HangupSecond
	}
	return 0
}

func (x *ResTokenSeasonCfgDataBin) GetHangupExp() uint32 {
	if x != nil {
		return x.HangupExp
	}
	return 0
}

func (x *ResTokenSeasonCfgDataBin) GetTipsMax() uint32 {
	if x != nil {
		return x.TipsMax
	}
	return 0
}

func (x *ResTokenSeasonCfgDataBin) GetHangupMinExp() uint32 {
	if x != nil {
		return x.HangupMinExp
	}
	return 0
}

func (x *ResTokenSeasonCfgDataBin) GetCompensatePropID() uint32 {
	if x != nil {
		return x.CompensatePropID
	}
	return 0
}

func (x *ResTokenSeasonCfgDataBin) GetNormalTokenEffect() *STTokenEffectInfo {
	if x != nil {
		return x.NormalTokenEffect
	}
	return nil
}

func (x *ResTokenSeasonCfgDataBin) GetHighTokenEffect() *STTokenEffectInfo {
	if x != nil {
		return x.HighTokenEffect
	}
	return nil
}

func (x *ResTokenSeasonCfgDataBin) GetDeluxeTokenEffect() *STTokenEffectInfo {
	if x != nil {
		return x.DeluxeTokenEffect
	}
	return nil
}

func (x *ResTokenSeasonCfgDataBin) GetExpOfLevelCost() uint32 {
	if x != nil {
		return x.ExpOfLevelCost
	}
	return 0
}

type ResTokenHangupCfgDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hour       uint32   `protobuf:"varint,1,opt,name=Hour,proto3" json:"Hour,omitempty"`
	TickSecond uint32   `protobuf:"varint,2,opt,name=TickSecond,proto3" json:"TickSecond,omitempty"`
	Values     []uint32 `protobuf:"varint,3,rep,packed,name=Values,proto3" json:"Values,omitempty"`
}

func (x *ResTokenHangupCfgDataBin) Reset() {
	*x = ResTokenHangupCfgDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResTokenHangupCfgDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResTokenHangupCfgDataBin) ProtoMessage() {}

func (x *ResTokenHangupCfgDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResTokenHangupCfgDataBin.ProtoReflect.Descriptor instead.
func (*ResTokenHangupCfgDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{69}
}

func (x *ResTokenHangupCfgDataBin) GetHour() uint32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *ResTokenHangupCfgDataBin) GetTickSecond() uint32 {
	if x != nil {
		return x.TickSecond
	}
	return 0
}

func (x *ResTokenHangupCfgDataBin) GetValues() []uint32 {
	if x != nil {
		return x.Values
	}
	return nil
}

type ResTokenLevelDropInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DropID          uint32  `protobuf:"varint,1,opt,name=DropID,proto3" json:"DropID,omitempty"`
	SpecialShow     uint32  `protobuf:"varint,2,opt,name=SpecialShow,proto3" json:"SpecialShow,omitempty"`
	Scale           float32 `protobuf:"fixed32,3,opt,name=Scale,proto3" json:"Scale,omitempty"`
	Jump            string  `protobuf:"bytes,4,opt,name=Jump,proto3" json:"Jump,omitempty"`
	BGPath          string  `protobuf:"bytes,5,opt,name=BGPath,proto3" json:"BGPath,omitempty"`
	ShowWeights     uint32  `protobuf:"varint,6,opt,name=ShowWeights,proto3" json:"ShowWeights,omitempty"`
	SpecialIconPath string  `protobuf:"bytes,7,opt,name=SpecialIconPath,proto3" json:"SpecialIconPath,omitempty"`
}

func (x *ResTokenLevelDropInfo) Reset() {
	*x = ResTokenLevelDropInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResTokenLevelDropInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResTokenLevelDropInfo) ProtoMessage() {}

func (x *ResTokenLevelDropInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResTokenLevelDropInfo.ProtoReflect.Descriptor instead.
func (*ResTokenLevelDropInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{70}
}

func (x *ResTokenLevelDropInfo) GetDropID() uint32 {
	if x != nil {
		return x.DropID
	}
	return 0
}

func (x *ResTokenLevelDropInfo) GetSpecialShow() uint32 {
	if x != nil {
		return x.SpecialShow
	}
	return 0
}

func (x *ResTokenLevelDropInfo) GetScale() float32 {
	if x != nil {
		return x.Scale
	}
	return 0
}

func (x *ResTokenLevelDropInfo) GetJump() string {
	if x != nil {
		return x.Jump
	}
	return ""
}

func (x *ResTokenLevelDropInfo) GetBGPath() string {
	if x != nil {
		return x.BGPath
	}
	return ""
}

func (x *ResTokenLevelDropInfo) GetShowWeights() uint32 {
	if x != nil {
		return x.ShowWeights
	}
	return 0
}

func (x *ResTokenLevelDropInfo) GetSpecialIconPath() string {
	if x != nil {
		return x.SpecialIconPath
	}
	return ""
}

type ResTokenLevelAwardDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level           uint32                   `protobuf:"varint,1,opt,name=Level,proto3" json:"Level,omitempty"`
	SeasonID        uint32                   `protobuf:"varint,2,opt,name=SeasonID,proto3" json:"SeasonID,omitempty"`
	NeedExp         uint32                   `protobuf:"varint,3,opt,name=NeedExp,proto3" json:"NeedExp,omitempty"`
	NormalDropInfos []*ResTokenLevelDropInfo `protobuf:"bytes,4,rep,name=NormalDropInfos,proto3" json:"NormalDropInfos,omitempty"`
	HighDropInfos   []*ResTokenLevelDropInfo `protobuf:"bytes,5,rep,name=HighDropInfos,proto3" json:"HighDropInfos,omitempty"`
}

func (x *ResTokenLevelAwardDataBin) Reset() {
	*x = ResTokenLevelAwardDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResTokenLevelAwardDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResTokenLevelAwardDataBin) ProtoMessage() {}

func (x *ResTokenLevelAwardDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResTokenLevelAwardDataBin.ProtoReflect.Descriptor instead.
func (*ResTokenLevelAwardDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{71}
}

func (x *ResTokenLevelAwardDataBin) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ResTokenLevelAwardDataBin) GetSeasonID() uint32 {
	if x != nil {
		return x.SeasonID
	}
	return 0
}

func (x *ResTokenLevelAwardDataBin) GetNeedExp() uint32 {
	if x != nil {
		return x.NeedExp
	}
	return 0
}

func (x *ResTokenLevelAwardDataBin) GetNormalDropInfos() []*ResTokenLevelDropInfo {
	if x != nil {
		return x.NormalDropInfos
	}
	return nil
}

func (x *ResTokenLevelAwardDataBin) GetHighDropInfos() []*ResTokenLevelDropInfo {
	if x != nil {
		return x.HighDropInfos
	}
	return nil
}

type TokenConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenTaskCfg     *ResTokenTaskCfgDataBin     `protobuf:"bytes,1,opt,name=TokenTaskCfg,proto3" json:"TokenTaskCfg,omitempty"`
	TokenTaskRefresh *ResTokenTaskRefreshDataBin `protobuf:"bytes,2,opt,name=TokenTaskRefresh,proto3" json:"TokenTaskRefresh,omitempty"`
	TokenSeasonCfg   *ResTokenSeasonCfgDataBin   `protobuf:"bytes,3,opt,name=TokenSeasonCfg,proto3" json:"TokenSeasonCfg,omitempty"`
	TokenLevelAward  *ResTokenLevelAwardDataBin  `protobuf:"bytes,4,opt,name=TokenLevelAward,proto3" json:"TokenLevelAward,omitempty"`
	TokenHangupCfg   *ResTokenHangupCfgDataBin   `protobuf:"bytes,5,opt,name=TokenHangupCfg,proto3" json:"TokenHangupCfg,omitempty"`
}

func (x *TokenConf) Reset() {
	*x = TokenConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenConf) ProtoMessage() {}

func (x *TokenConf) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenConf.ProtoReflect.Descriptor instead.
func (*TokenConf) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{72}
}

func (x *TokenConf) GetTokenTaskCfg() *ResTokenTaskCfgDataBin {
	if x != nil {
		return x.TokenTaskCfg
	}
	return nil
}

func (x *TokenConf) GetTokenTaskRefresh() *ResTokenTaskRefreshDataBin {
	if x != nil {
		return x.TokenTaskRefresh
	}
	return nil
}

func (x *TokenConf) GetTokenSeasonCfg() *ResTokenSeasonCfgDataBin {
	if x != nil {
		return x.TokenSeasonCfg
	}
	return nil
}

func (x *TokenConf) GetTokenLevelAward() *ResTokenLevelAwardDataBin {
	if x != nil {
		return x.TokenLevelAward
	}
	return nil
}

func (x *TokenConf) GetTokenHangupCfg() *ResTokenHangupCfgDataBin {
	if x != nil {
		return x.TokenHangupCfg
	}
	return nil
}

//####段位结算
type ResRankDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                        uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ShowElo                   uint32 `protobuf:"varint,2,opt,name=ShowElo,proto3" json:"ShowElo,omitempty"`
	Rank                      uint32 `protobuf:"varint,3,opt,name=Rank,proto3" json:"Rank,omitempty"`
	Level                     uint32 `protobuf:"varint,4,opt,name=Level,proto3" json:"Level,omitempty"`
	EndElo                    uint32 `protobuf:"varint,6,opt,name=EndElo,proto3" json:"EndElo,omitempty"`
	RankIcon                  string `protobuf:"bytes,7,opt,name=RankIcon,proto3" json:"RankIcon,omitempty"`
	LevelIcon                 string `protobuf:"bytes,8,opt,name=LevelIcon,proto3" json:"LevelIcon,omitempty"`
	BigRankIcon               string `protobuf:"bytes,9,opt,name=BigRankIcon,proto3" json:"BigRankIcon,omitempty"`
	RankIsShowPlayerHead      bool   `protobuf:"varint,10,opt,name=RankIsShowPlayerHead,proto3" json:"RankIsShowPlayerHead,omitempty"`
	BgRankIcon                string `protobuf:"bytes,11,opt,name=BgRankIcon,proto3" json:"BgRankIcon,omitempty"`
	CareerRankIcon            string `protobuf:"bytes,12,opt,name=CareerRankIcon,proto3" json:"CareerRankIcon,omitempty"`
	CicleRankIcon             string `protobuf:"bytes,13,opt,name=CicleRankIcon,proto3" json:"CicleRankIcon,omitempty"`
	RankLimitRoomMaxPlayerNum uint32 `protobuf:"varint,14,opt,name=RankLimitRoomMaxPlayerNum,proto3" json:"RankLimitRoomMaxPlayerNum,omitempty"`
	IsShowRoomPlayerNumLimit  bool   `protobuf:"varint,15,opt,name=IsShowRoomPlayerNumLimit,proto3" json:"IsShowRoomPlayerNumLimit,omitempty"`
	RankIconInHundred         string `protobuf:"bytes,16,opt,name=RankIconInHundred,proto3" json:"RankIconInHundred,omitempty"`
	MinHideElo                uint32 `protobuf:"varint,17,opt,name=MinHideElo,proto3" json:"MinHideElo,omitempty"`
}

func (x *ResRankDataBin) Reset() {
	*x = ResRankDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResRankDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResRankDataBin) ProtoMessage() {}

func (x *ResRankDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResRankDataBin.ProtoReflect.Descriptor instead.
func (*ResRankDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{73}
}

func (x *ResRankDataBin) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResRankDataBin) GetShowElo() uint32 {
	if x != nil {
		return x.ShowElo
	}
	return 0
}

func (x *ResRankDataBin) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *ResRankDataBin) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ResRankDataBin) GetEndElo() uint32 {
	if x != nil {
		return x.EndElo
	}
	return 0
}

func (x *ResRankDataBin) GetRankIcon() string {
	if x != nil {
		return x.RankIcon
	}
	return ""
}

func (x *ResRankDataBin) GetLevelIcon() string {
	if x != nil {
		return x.LevelIcon
	}
	return ""
}

func (x *ResRankDataBin) GetBigRankIcon() string {
	if x != nil {
		return x.BigRankIcon
	}
	return ""
}

func (x *ResRankDataBin) GetRankIsShowPlayerHead() bool {
	if x != nil {
		return x.RankIsShowPlayerHead
	}
	return false
}

func (x *ResRankDataBin) GetBgRankIcon() string {
	if x != nil {
		return x.BgRankIcon
	}
	return ""
}

func (x *ResRankDataBin) GetCareerRankIcon() string {
	if x != nil {
		return x.CareerRankIcon
	}
	return ""
}

func (x *ResRankDataBin) GetCicleRankIcon() string {
	if x != nil {
		return x.CicleRankIcon
	}
	return ""
}

func (x *ResRankDataBin) GetRankLimitRoomMaxPlayerNum() uint32 {
	if x != nil {
		return x.RankLimitRoomMaxPlayerNum
	}
	return 0
}

func (x *ResRankDataBin) GetIsShowRoomPlayerNumLimit() bool {
	if x != nil {
		return x.IsShowRoomPlayerNumLimit
	}
	return false
}

func (x *ResRankDataBin) GetRankIconInHundred() string {
	if x != nil {
		return x.RankIconInHundred
	}
	return ""
}

func (x *ResRankDataBin) GetMinHideElo() uint32 {
	if x != nil {
		return x.MinHideElo
	}
	return 0
}

type ResRankProtectedDatabin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Rank    uint32 `protobuf:"varint,2,opt,name=Rank,proto3" json:"Rank,omitempty"`
	Level   uint32 `protobuf:"varint,3,opt,name=Level,proto3" json:"Level,omitempty"`
	Protect uint32 `protobuf:"varint,4,opt,name=Protect,proto3" json:"Protect,omitempty"`
}

func (x *ResRankProtectedDatabin) Reset() {
	*x = ResRankProtectedDatabin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResRankProtectedDatabin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResRankProtectedDatabin) ProtoMessage() {}

func (x *ResRankProtectedDatabin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResRankProtectedDatabin.ProtoReflect.Descriptor instead.
func (*ResRankProtectedDatabin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{74}
}

func (x *ResRankProtectedDatabin) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResRankProtectedDatabin) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *ResRankProtectedDatabin) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ResRankProtectedDatabin) GetProtect() uint32 {
	if x != nil {
		return x.Protect
	}
	return 0
}

type ResRankKDatabin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank        uint32 `protobuf:"varint,1,opt,name=Rank,proto3" json:"Rank,omitempty"`
	EloK        uint32 `protobuf:"varint,2,opt,name=EloK,proto3" json:"EloK,omitempty"`
	EloFactor   uint32 `protobuf:"varint,3,opt,name=EloFactor,proto3" json:"EloFactor,omitempty"`
	ShowK       uint32 `protobuf:"varint,4,opt,name=ShowK,proto3" json:"ShowK,omitempty"`
	ShowFactor  uint32 `protobuf:"varint,5,opt,name=ShowFactor,proto3" json:"ShowFactor,omitempty"`
	ShowWinVal  uint32 `protobuf:"varint,6,opt,name=ShowWinVal,proto3" json:"ShowWinVal,omitempty"`
	ShowLoseVal uint32 `protobuf:"varint,7,opt,name=ShowLoseVal,proto3" json:"ShowLoseVal,omitempty"`
}

func (x *ResRankKDatabin) Reset() {
	*x = ResRankKDatabin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResRankKDatabin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResRankKDatabin) ProtoMessage() {}

func (x *ResRankKDatabin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResRankKDatabin.ProtoReflect.Descriptor instead.
func (*ResRankKDatabin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{75}
}

func (x *ResRankKDatabin) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *ResRankKDatabin) GetEloK() uint32 {
	if x != nil {
		return x.EloK
	}
	return 0
}

func (x *ResRankKDatabin) GetEloFactor() uint32 {
	if x != nil {
		return x.EloFactor
	}
	return 0
}

func (x *ResRankKDatabin) GetShowK() uint32 {
	if x != nil {
		return x.ShowK
	}
	return 0
}

func (x *ResRankKDatabin) GetShowFactor() uint32 {
	if x != nil {
		return x.ShowFactor
	}
	return 0
}

func (x *ResRankKDatabin) GetShowWinVal() uint32 {
	if x != nil {
		return x.ShowWinVal
	}
	return 0
}

func (x *ResRankKDatabin) GetShowLoseVal() uint32 {
	if x != nil {
		return x.ShowLoseVal
	}
	return 0
}

type ResEloConstDatabin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HideDefault     uint32 `protobuf:"varint,1,opt,name=HideDefault,proto3" json:"HideDefault,omitempty"`
	HideMin         uint32 `protobuf:"varint,2,opt,name=HideMin,proto3" json:"HideMin,omitempty"`
	HideMax         uint32 `protobuf:"varint,3,opt,name=HideMax,proto3" json:"HideMax,omitempty"`
	ShowDefault     uint32 `protobuf:"varint,4,opt,name=ShowDefault,proto3" json:"ShowDefault,omitempty"`
	ShowMin         uint32 `protobuf:"varint,5,opt,name=ShowMin,proto3" json:"ShowMin,omitempty"`
	ShowMax         uint32 `protobuf:"varint,6,opt,name=ShowMax,proto3" json:"ShowMax,omitempty"`
	KingScoreToStar uint32 `protobuf:"varint,7,opt,name=KingScoreToStar,proto3" json:"KingScoreToStar,omitempty"`
}

func (x *ResEloConstDatabin) Reset() {
	*x = ResEloConstDatabin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResEloConstDatabin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResEloConstDatabin) ProtoMessage() {}

func (x *ResEloConstDatabin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResEloConstDatabin.ProtoReflect.Descriptor instead.
func (*ResEloConstDatabin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{76}
}

func (x *ResEloConstDatabin) GetHideDefault() uint32 {
	if x != nil {
		return x.HideDefault
	}
	return 0
}

func (x *ResEloConstDatabin) GetHideMin() uint32 {
	if x != nil {
		return x.HideMin
	}
	return 0
}

func (x *ResEloConstDatabin) GetHideMax() uint32 {
	if x != nil {
		return x.HideMax
	}
	return 0
}

func (x *ResEloConstDatabin) GetShowDefault() uint32 {
	if x != nil {
		return x.ShowDefault
	}
	return 0
}

func (x *ResEloConstDatabin) GetShowMin() uint32 {
	if x != nil {
		return x.ShowMin
	}
	return 0
}

func (x *ResEloConstDatabin) GetShowMax() uint32 {
	if x != nil {
		return x.ShowMax
	}
	return 0
}

func (x *ResEloConstDatabin) GetKingScoreToStar() uint32 {
	if x != nil {
		return x.KingScoreToStar
	}
	return 0
}

type ResBattleAwardDatabin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonID    uint32 `protobuf:"varint,1,opt,name=SeasonID,proto3" json:"SeasonID,omitempty"`
	GameType    uint32 `protobuf:"varint,2,opt,name=GameType,proto3" json:"GameType,omitempty"`
	Rank        uint32 `protobuf:"varint,3,opt,name=Rank,proto3" json:"Rank,omitempty"`
	Place       uint32 `protobuf:"varint,4,opt,name=Place,proto3" json:"Place,omitempty"`
	DropAwardID uint32 `protobuf:"varint,5,opt,name=DropAwardID,proto3" json:"DropAwardID,omitempty"`
}

func (x *ResBattleAwardDatabin) Reset() {
	*x = ResBattleAwardDatabin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResBattleAwardDatabin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResBattleAwardDatabin) ProtoMessage() {}

func (x *ResBattleAwardDatabin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResBattleAwardDatabin.ProtoReflect.Descriptor instead.
func (*ResBattleAwardDatabin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{77}
}

func (x *ResBattleAwardDatabin) GetSeasonID() uint32 {
	if x != nil {
		return x.SeasonID
	}
	return 0
}

func (x *ResBattleAwardDatabin) GetGameType() uint32 {
	if x != nil {
		return x.GameType
	}
	return 0
}

func (x *ResBattleAwardDatabin) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *ResBattleAwardDatabin) GetPlace() uint32 {
	if x != nil {
		return x.Place
	}
	return 0
}

func (x *ResBattleAwardDatabin) GetDropAwardID() uint32 {
	if x != nil {
		return x.DropAwardID
	}
	return 0
}

type ResScoreCorrectionDatabin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       uint32  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Type     uint32  `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`
	GameType uint32  `protobuf:"varint,3,opt,name=GameType,proto3" json:"GameType,omitempty"`
	Param    []int32 `protobuf:"varint,4,rep,packed,name=Param,proto3" json:"Param,omitempty"`
}

func (x *ResScoreCorrectionDatabin) Reset() {
	*x = ResScoreCorrectionDatabin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResScoreCorrectionDatabin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResScoreCorrectionDatabin) ProtoMessage() {}

func (x *ResScoreCorrectionDatabin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResScoreCorrectionDatabin.ProtoReflect.Descriptor instead.
func (*ResScoreCorrectionDatabin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{78}
}

func (x *ResScoreCorrectionDatabin) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResScoreCorrectionDatabin) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ResScoreCorrectionDatabin) GetGameType() uint32 {
	if x != nil {
		return x.GameType
	}
	return 0
}

func (x *ResScoreCorrectionDatabin) GetParam() []int32 {
	if x != nil {
		return x.Param
	}
	return nil
}

type RankConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank            *ResRankDataBin            `protobuf:"bytes,1,opt,name=Rank,proto3" json:"Rank,omitempty"`
	Protect         *ResRankProtectedDatabin   `protobuf:"bytes,2,opt,name=Protect,proto3" json:"Protect,omitempty"`
	KValue          *ResRankKDatabin           `protobuf:"bytes,3,opt,name=KValue,proto3" json:"KValue,omitempty"`
	EloConst        *ResEloConstDatabin        `protobuf:"bytes,4,opt,name=EloConst,proto3" json:"EloConst,omitempty"`
	BattleAward     *ResBattleAwardDatabin     `protobuf:"bytes,6,opt,name=BattleAward,proto3" json:"BattleAward,omitempty"`
	ScoreCorrection *ResScoreCorrectionDatabin `protobuf:"bytes,7,opt,name=ScoreCorrection,proto3" json:"ScoreCorrection,omitempty"`
}

func (x *RankConf) Reset() {
	*x = RankConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankConf) ProtoMessage() {}

func (x *RankConf) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankConf.ProtoReflect.Descriptor instead.
func (*RankConf) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{79}
}

func (x *RankConf) GetRank() *ResRankDataBin {
	if x != nil {
		return x.Rank
	}
	return nil
}

func (x *RankConf) GetProtect() *ResRankProtectedDatabin {
	if x != nil {
		return x.Protect
	}
	return nil
}

func (x *RankConf) GetKValue() *ResRankKDatabin {
	if x != nil {
		return x.KValue
	}
	return nil
}

func (x *RankConf) GetEloConst() *ResEloConstDatabin {
	if x != nil {
		return x.EloConst
	}
	return nil
}

func (x *RankConf) GetBattleAward() *ResBattleAwardDatabin {
	if x != nil {
		return x.BattleAward
	}
	return nil
}

func (x *RankConf) GetScoreCorrection() *ResScoreCorrectionDatabin {
	if x != nil {
		return x.ScoreCorrection
	}
	return nil
}

type ResRankConstDatabin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	NumberValue uint64 `protobuf:"varint,2,opt,name=NumberValue,proto3" json:"NumberValue,omitempty"`
	StringValue string `protobuf:"bytes,3,opt,name=StringValue,proto3" json:"StringValue,omitempty"`
}

func (x *ResRankConstDatabin) Reset() {
	*x = ResRankConstDatabin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResRankConstDatabin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResRankConstDatabin) ProtoMessage() {}

func (x *ResRankConstDatabin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResRankConstDatabin.ProtoReflect.Descriptor instead.
func (*ResRankConstDatabin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{80}
}

func (x *ResRankConstDatabin) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResRankConstDatabin) GetNumberValue() uint64 {
	if x != nil {
		return x.NumberValue
	}
	return 0
}

func (x *ResRankConstDatabin) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

//####房间规则--开始##
type ResRoomRefusePunishDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cnt         uint32 `protobuf:"varint,1,opt,name=Cnt,proto3" json:"Cnt,omitempty"`
	BlockSecond uint32 `protobuf:"varint,2,opt,name=BlockSecond,proto3" json:"BlockSecond,omitempty"`
}

func (x *ResRoomRefusePunishDataBin) Reset() {
	*x = ResRoomRefusePunishDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResRoomRefusePunishDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResRoomRefusePunishDataBin) ProtoMessage() {}

func (x *ResRoomRefusePunishDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResRoomRefusePunishDataBin.ProtoReflect.Descriptor instead.
func (*ResRoomRefusePunishDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{81}
}

func (x *ResRoomRefusePunishDataBin) GetCnt() uint32 {
	if x != nil {
		return x.Cnt
	}
	return 0
}

func (x *ResRoomRefusePunishDataBin) GetBlockSecond() uint32 {
	if x != nil {
		return x.BlockSecond
	}
	return 0
}

type RoomConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefusePunish *ResRoomRefusePunishDataBin `protobuf:"bytes,1,opt,name=RefusePunish,proto3" json:"RefusePunish,omitempty"`
	RankRange    *ResMatchRankRangeCfg       `protobuf:"bytes,2,opt,name=RankRange,proto3" json:"RankRange,omitempty"`
}

func (x *RoomConf) Reset() {
	*x = RoomConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomConf) ProtoMessage() {}

func (x *RoomConf) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomConf.ProtoReflect.Descriptor instead.
func (*RoomConf) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{82}
}

func (x *RoomConf) GetRefusePunish() *ResRoomRefusePunishDataBin {
	if x != nil {
		return x.RefusePunish
	}
	return nil
}

func (x *RoomConf) GetRankRange() *ResMatchRankRangeCfg {
	if x != nil {
		return x.RankRange
	}
	return nil
}

// --------------------------------- 通用 ---------------------------------
type Res_Chess_Slot_Struct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillID uint32 `protobuf:"varint,1,opt,name=SkillID,proto3" json:"SkillID,omitempty"`
}

func (x *Res_Chess_Slot_Struct) Reset() {
	*x = Res_Chess_Slot_Struct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Res_Chess_Slot_Struct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Res_Chess_Slot_Struct) ProtoMessage() {}

func (x *Res_Chess_Slot_Struct) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Res_Chess_Slot_Struct.ProtoReflect.Descriptor instead.
func (*Res_Chess_Slot_Struct) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{83}
}

func (x *Res_Chess_Slot_Struct) GetSkillID() uint32 {
	if x != nil {
		return x.SkillID
	}
	return 0
}

type ResDT_ChessModelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scale int32 `protobuf:"varint,1,opt,name=Scale,proto3" json:"Scale,omitempty"`
	X     int32 `protobuf:"varint,2,opt,name=X,proto3" json:"X,omitempty"`
	Y     int32 `protobuf:"varint,3,opt,name=Y,proto3" json:"Y,omitempty"`
	Z     int32 `protobuf:"varint,4,opt,name=Z,proto3" json:"Z,omitempty"`
}

func (x *ResDT_ChessModelInfo) Reset() {
	*x = ResDT_ChessModelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_ChessModelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_ChessModelInfo) ProtoMessage() {}

func (x *ResDT_ChessModelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_ChessModelInfo.ProtoReflect.Descriptor instead.
func (*ResDT_ChessModelInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{84}
}

func (x *ResDT_ChessModelInfo) GetScale() int32 {
	if x != nil {
		return x.Scale
	}
	return 0
}

func (x *ResDT_ChessModelInfo) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *ResDT_ChessModelInfo) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *ResDT_ChessModelInfo) GetZ() int32 {
	if x != nil {
		return x.Z
	}
	return 0
}

type ResDT_ChessComboInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillSlot uint32 `protobuf:"varint,1,opt,name=SkillSlot,proto3" json:"SkillSlot,omitempty"`
}

func (x *ResDT_ChessComboInfo) Reset() {
	*x = ResDT_ChessComboInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_ChessComboInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_ChessComboInfo) ProtoMessage() {}

func (x *ResDT_ChessComboInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_ChessComboInfo.ProtoReflect.Descriptor instead.
func (*ResDT_ChessComboInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{85}
}

func (x *ResDT_ChessComboInfo) GetSkillSlot() uint32 {
	if x != nil {
		return x.SkillSlot
	}
	return 0
}

type ResDT_ChessFuncInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   int32   `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Params []int32 `protobuf:"varint,2,rep,packed,name=Params,proto3" json:"Params,omitempty"`
}

func (x *ResDT_ChessFuncInfo) Reset() {
	*x = ResDT_ChessFuncInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_ChessFuncInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_ChessFuncInfo) ProtoMessage() {}

func (x *ResDT_ChessFuncInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_ChessFuncInfo.ProtoReflect.Descriptor instead.
func (*ResDT_ChessFuncInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{86}
}

func (x *ResDT_ChessFuncInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ResDT_ChessFuncInfo) GetParams() []int32 {
	if x != nil {
		return x.Params
	}
	return nil
}

// 英雄信息表.xlsx
type ResChessHeroConfDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroID                    uint32                   `protobuf:"varint,1,opt,name=HeroID,proto3" json:"HeroID,omitempty"`
	SvrPlayModUniqID          uint32                   `protobuf:"varint,50,opt,name=SvrPlayModUniqID,proto3" json:"SvrPlayModUniqID,omitempty"`
	HeroLevel                 int32                    `protobuf:"varint,2,opt,name=HeroLevel,proto3" json:"HeroLevel,omitempty"`
	HeroName                  string                   `protobuf:"bytes,3,opt,name=HeroName,proto3" json:"HeroName,omitempty"`
	HeroDes                   string                   `protobuf:"bytes,4,opt,name=HeroDes,proto3" json:"HeroDes,omitempty"`
	HeroIcon                  string                   `protobuf:"bytes,5,opt,name=HeroIcon,proto3" json:"HeroIcon,omitempty"`
	ChessRelative             []RES_RELATIVE_ID        `protobuf:"varint,7,rep,packed,name=ChessRelative,proto3,enum=ResData.RES_RELATIVE_ID" json:"ChessRelative,omitempty"`
	HeroQuality               int32                    `protobuf:"varint,8,opt,name=HeroQuality,proto3" json:"HeroQuality,omitempty"`
	AttackId                  uint32                   `protobuf:"varint,9,opt,name=AttackId,proto3" json:"AttackId,omitempty"`
	Slot                      []*Res_Chess_Slot_Struct `protobuf:"bytes,10,rep,name=Slot,proto3" json:"Slot,omitempty"`
	HP                        uint32                   `protobuf:"varint,11,opt,name=HP,proto3" json:"HP,omitempty"`
	PhyAttack                 uint32                   `protobuf:"varint,12,opt,name=PhyAttack,proto3" json:"PhyAttack,omitempty"`
	MagAttack                 uint32                   `protobuf:"varint,13,opt,name=MagAttack,proto3" json:"MagAttack,omitempty"`
	PhyDefense                uint32                   `protobuf:"varint,14,opt,name=PhyDefense,proto3" json:"PhyDefense,omitempty"`
	MagDefense                uint32                   `protobuf:"varint,15,opt,name=MagDefense,proto3" json:"MagDefense,omitempty"`
	MoveSpeed                 uint32                   `protobuf:"varint,16,opt,name=MoveSpeed,proto3" json:"MoveSpeed,omitempty"`
	AttackSpeed               uint32                   `protobuf:"varint,17,opt,name=AttackSpeed,proto3" json:"AttackSpeed,omitempty"`
	CriticalRate              uint32                   `protobuf:"varint,18,opt,name=CriticalRate,proto3" json:"CriticalRate,omitempty"`
	CriticalEffect            uint32                   `protobuf:"varint,19,opt,name=CriticalEffect,proto3" json:"CriticalEffect,omitempty"`
	IsNotShowInAtlas          bool                     `protobuf:"varint,20,opt,name=IsNotShowInAtlas,proto3" json:"IsNotShowInAtlas,omitempty"`
	CharacterInfo             string                   `protobuf:"bytes,21,opt,name=CharacterInfo,proto3" json:"CharacterInfo,omitempty"`
	SkinID                    uint32                   `protobuf:"varint,22,opt,name=SkinID,proto3" json:"SkinID,omitempty"`
	FuncInfo                  *ResDT_ChessFuncInfo     `protobuf:"bytes,23,opt,name=FuncInfo,proto3" json:"FuncInfo,omitempty"`
	HeroPaint                 string                   `protobuf:"bytes,24,opt,name=HeroPaint,proto3" json:"HeroPaint,omitempty"`
	HeroEikon                 string                   `protobuf:"bytes,25,opt,name=HeroEikon,proto3" json:"HeroEikon,omitempty"`
	HeroPortrait              string                   `protobuf:"bytes,26,opt,name=HeroPortrait,proto3" json:"HeroPortrait,omitempty"`
	HeroAtlasIcon             string                   `protobuf:"bytes,27,opt,name=HeroAtlasIcon,proto3" json:"HeroAtlasIcon,omitempty"`
	NamePinYin                string                   `protobuf:"bytes,100,opt,name=NamePinYin,proto3" json:"NamePinYin,omitempty"`
	CardHighModelInfo         *ResDT_ChessModelInfo    `protobuf:"bytes,102,opt,name=CardHighModelInfo,proto3" json:"CardHighModelInfo,omitempty"`
	CardLowModelInfo          *ResDT_ChessModelInfo    `protobuf:"bytes,103,opt,name=CardLowModelInfo,proto3" json:"CardLowModelInfo,omitempty"`
	MeshScale                 int32                    `protobuf:"varint,104,opt,name=MeshScale,proto3" json:"MeshScale,omitempty"`
	AttackDistanceType        uint32                   `protobuf:"varint,105,opt,name=AttackDistanceType,proto3" json:"AttackDistanceType,omitempty"`
	Gender                    uint32                   `protobuf:"varint,106,opt,name=Gender,proto3" json:"Gender,omitempty"`
	EnhanceType               uint32                   `protobuf:"varint,107,opt,name=EnhanceType,proto3" json:"EnhanceType,omitempty"`
	PassiveID                 []int32                  `protobuf:"varint,110,rep,packed,name=PassiveID,proto3" json:"PassiveID,omitempty"`
	MainJob                   uint32                   `protobuf:"varint,119,opt,name=MainJob,proto3" json:"MainJob,omitempty"`
	AI_Chess                  string                   `protobuf:"bytes,121,opt,name=AI_Chess,json=AIChess,proto3" json:"AI_Chess,omitempty"`
	AttackRangeDesc           string                   `protobuf:"bytes,122,opt,name=AttackRangeDesc,proto3" json:"AttackRangeDesc,omitempty"`
	EnergyType                uint32                   `protobuf:"varint,123,opt,name=EnergyType,proto3" json:"EnergyType,omitempty"`
	InitEnergy                int32                    `protobuf:"varint,124,opt,name=InitEnergy,proto3" json:"InitEnergy,omitempty"`
	Energy                    int32                    `protobuf:"varint,125,opt,name=Energy,proto3" json:"Energy,omitempty"`
	DamageMpRecover           int32                    `protobuf:"varint,129,opt,name=DamageMpRecover,proto3" json:"DamageMpRecover,omitempty"`
	HurtMpRecoverRate         int32                    `protobuf:"varint,130,opt,name=HurtMpRecoverRate,proto3" json:"HurtMpRecoverRate,omitempty"`
	HurtMpRecoverLimit        int32                    `protobuf:"varint,131,opt,name=HurtMpRecoverLimit,proto3" json:"HurtMpRecoverLimit,omitempty"`
	Born_Age                  string                   `protobuf:"bytes,132,opt,name=Born_Age,json=BornAge,proto3" json:"Born_Age,omitempty"`
	Revive_Age                string                   `protobuf:"bytes,133,opt,name=Revive_Age,json=ReviveAge,proto3" json:"Revive_Age,omitempty"`
	ChessPos                  uint32                   `protobuf:"varint,134,opt,name=ChessPos,proto3" json:"ChessPos,omitempty"`
	FrontScore                int32                    `protobuf:"varint,135,opt,name=FrontScore,proto3" json:"FrontScore,omitempty"`
	BackScore                 int32                    `protobuf:"varint,136,opt,name=BackScore,proto3" json:"BackScore,omitempty"`
	AbilityScore              int32                    `protobuf:"varint,137,opt,name=AbilityScore,proto3" json:"AbilityScore,omitempty"`
	UltimateSlot              uint32                   `protobuf:"varint,145,opt,name=UltimateSlot,proto3" json:"UltimateSlot,omitempty"`
	Combos                    []*ResDT_ChessComboInfo  `protobuf:"bytes,146,rep,name=Combos,proto3" json:"Combos,omitempty"`
	RecommendEquipID          []uint32                 `protobuf:"varint,147,rep,packed,name=RecommendEquipID,proto3" json:"RecommendEquipID,omitempty"`
	ForbiddenLeaveBattleField int32                    `protobuf:"varint,161,opt,name=ForbiddenLeaveBattleField,proto3" json:"ForbiddenLeaveBattleField,omitempty"`
	BloodBarHeight            int32                    `protobuf:"varint,162,opt,name=BloodBarHeight,proto3" json:"BloodBarHeight,omitempty"`
	WaitForFight              int32                    `protobuf:"varint,163,opt,name=waitForFight,proto3" json:"waitForFight,omitempty"`
	BManaLock                 bool                     `protobuf:"varint,164,opt,name=bManaLock,proto3" json:"bManaLock,omitempty"`
	LowPriorityWearType       []EQUIP_TYPE             `protobuf:"varint,165,rep,packed,name=lowPriorityWearType,proto3,enum=ResData.EQUIP_TYPE" json:"lowPriorityWearType,omitempty"`
	AIAttr_AD                 int32                    `protobuf:"varint,166,opt,name=AIAttr_AD,json=AIAttrAD,proto3" json:"AIAttr_AD,omitempty"`
	AIAttr_AP                 int32                    `protobuf:"varint,167,opt,name=AIAttr_AP,json=AIAttrAP,proto3" json:"AIAttr_AP,omitempty"`
	AIAttr_ADCrit             int32                    `protobuf:"varint,168,opt,name=AIAttr_ADCrit,json=AIAttrADCrit,proto3" json:"AIAttr_ADCrit,omitempty"`
	AIAttr_ADDefense          int32                    `protobuf:"varint,169,opt,name=AIAttr_ADDefense,json=AIAttrADDefense,proto3" json:"AIAttr_ADDefense,omitempty"`
	AIAttr_APDefense          int32                    `protobuf:"varint,170,opt,name=AIAttr_APDefense,json=AIAttrAPDefense,proto3" json:"AIAttr_APDefense,omitempty"`
	AIAttr_Power              int32                    `protobuf:"varint,171,opt,name=AIAttr_Power,json=AIAttrPower,proto3" json:"AIAttr_Power,omitempty"`
	AIAttr_ADHp               int32                    `protobuf:"varint,172,opt,name=AIAttr_ADHp,json=AIAttrADHp,proto3" json:"AIAttr_ADHp,omitempty"`
	AIAttr_APHp               int32                    `protobuf:"varint,173,opt,name=AIAttr_APHp,json=AIAttrAPHp,proto3" json:"AIAttr_APHp,omitempty"`
	AIAttr_ADSpeed            int32                    `protobuf:"varint,174,opt,name=AIAttr_ADSpeed,json=AIAttrADSpeed,proto3" json:"AIAttr_ADSpeed,omitempty"`
	AIAttr_HP                 int32                    `protobuf:"varint,175,opt,name=AIAttr_HP,json=AIAttrHP,proto3" json:"AIAttr_HP,omitempty"`
	CanShowTips               bool                     `protobuf:"varint,176,opt,name=canShowTips,proto3" json:"canShowTips,omitempty"`
	CounterType               int32                    `protobuf:"varint,177,opt,name=CounterType,proto3" json:"CounterType,omitempty"`
	InitCounterEnergy         int32                    `protobuf:"varint,178,opt,name=InitCounterEnergy,proto3" json:"InitCounterEnergy,omitempty"`
	MaxCounter                int32                    `protobuf:"varint,179,opt,name=MaxCounter,proto3" json:"MaxCounter,omitempty"`
	WorldViewShort            string                   `protobuf:"bytes,180,opt,name=WorldViewShort,proto3" json:"WorldViewShort,omitempty"`
	HeroModes                 []HeroModeType           `protobuf:"varint,181,rep,packed,name=heroModes,proto3,enum=ResData.HeroModeType" json:"heroModes,omitempty"`
	DamageMpRecoverLimit      int32                    `protobuf:"varint,182,opt,name=DamageMpRecoverLimit,proto3" json:"DamageMpRecoverLimit,omitempty"`
	ForbiddenPick             bool                     `protobuf:"varint,183,opt,name=ForbiddenPick,proto3" json:"ForbiddenPick,omitempty"`
	HeroPortraitEff           string                   `protobuf:"bytes,184,opt,name=HeroPortraitEff,proto3" json:"HeroPortraitEff,omitempty"`
	HeroPortraitSpine         string                   `protobuf:"bytes,185,opt,name=HeroPortraitSpine,proto3" json:"HeroPortraitSpine,omitempty"`
	HeroPortraitSpineEff      string                   `protobuf:"bytes,186,opt,name=HeroPortraitSpineEff,proto3" json:"HeroPortraitSpineEff,omitempty"`
	IsNotSettleChess          bool                     `protobuf:"varint,187,opt,name=IsNotSettleChess,proto3" json:"IsNotSettleChess,omitempty"`
	SettleDamage              int32                    `protobuf:"varint,188,opt,name=SettleDamage,proto3" json:"SettleDamage,omitempty"`
	PopulationCost            int32                    `protobuf:"varint,189,opt,name=PopulationCost,proto3" json:"PopulationCost,omitempty"`
	HeroPortraitFrame         string                   `protobuf:"bytes,190,opt,name=HeroPortraitFrame,proto3" json:"HeroPortraitFrame,omitempty"`
	Layer                     ResLayerType             `protobuf:"varint,191,opt,name=Layer,proto3,enum=ResData.ResLayerType" json:"Layer,omitempty"`
	InBattleMaxCountLimit     int32                    `protobuf:"varint,192,opt,name=InBattleMaxCountLimit,proto3" json:"InBattleMaxCountLimit,omitempty"`
}

func (x *ResChessHeroConfDataBin) Reset() {
	*x = ResChessHeroConfDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResChessHeroConfDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResChessHeroConfDataBin) ProtoMessage() {}

func (x *ResChessHeroConfDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResChessHeroConfDataBin.ProtoReflect.Descriptor instead.
func (*ResChessHeroConfDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{87}
}

func (x *ResChessHeroConfDataBin) GetHeroID() uint32 {
	if x != nil {
		return x.HeroID
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetSvrPlayModUniqID() uint32 {
	if x != nil {
		return x.SvrPlayModUniqID
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetHeroLevel() int32 {
	if x != nil {
		return x.HeroLevel
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetHeroName() string {
	if x != nil {
		return x.HeroName
	}
	return ""
}

func (x *ResChessHeroConfDataBin) GetHeroDes() string {
	if x != nil {
		return x.HeroDes
	}
	return ""
}

func (x *ResChessHeroConfDataBin) GetHeroIcon() string {
	if x != nil {
		return x.HeroIcon
	}
	return ""
}

func (x *ResChessHeroConfDataBin) GetChessRelative() []RES_RELATIVE_ID {
	if x != nil {
		return x.ChessRelative
	}
	return nil
}

func (x *ResChessHeroConfDataBin) GetHeroQuality() int32 {
	if x != nil {
		return x.HeroQuality
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetAttackId() uint32 {
	if x != nil {
		return x.AttackId
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetSlot() []*Res_Chess_Slot_Struct {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *ResChessHeroConfDataBin) GetHP() uint32 {
	if x != nil {
		return x.HP
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetPhyAttack() uint32 {
	if x != nil {
		return x.PhyAttack
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetMagAttack() uint32 {
	if x != nil {
		return x.MagAttack
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetPhyDefense() uint32 {
	if x != nil {
		return x.PhyDefense
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetMagDefense() uint32 {
	if x != nil {
		return x.MagDefense
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetMoveSpeed() uint32 {
	if x != nil {
		return x.MoveSpeed
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetAttackSpeed() uint32 {
	if x != nil {
		return x.AttackSpeed
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetCriticalRate() uint32 {
	if x != nil {
		return x.CriticalRate
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetCriticalEffect() uint32 {
	if x != nil {
		return x.CriticalEffect
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetIsNotShowInAtlas() bool {
	if x != nil {
		return x.IsNotShowInAtlas
	}
	return false
}

func (x *ResChessHeroConfDataBin) GetCharacterInfo() string {
	if x != nil {
		return x.CharacterInfo
	}
	return ""
}

func (x *ResChessHeroConfDataBin) GetSkinID() uint32 {
	if x != nil {
		return x.SkinID
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetFuncInfo() *ResDT_ChessFuncInfo {
	if x != nil {
		return x.FuncInfo
	}
	return nil
}

func (x *ResChessHeroConfDataBin) GetHeroPaint() string {
	if x != nil {
		return x.HeroPaint
	}
	return ""
}

func (x *ResChessHeroConfDataBin) GetHeroEikon() string {
	if x != nil {
		return x.HeroEikon
	}
	return ""
}

func (x *ResChessHeroConfDataBin) GetHeroPortrait() string {
	if x != nil {
		return x.HeroPortrait
	}
	return ""
}

func (x *ResChessHeroConfDataBin) GetHeroAtlasIcon() string {
	if x != nil {
		return x.HeroAtlasIcon
	}
	return ""
}

func (x *ResChessHeroConfDataBin) GetNamePinYin() string {
	if x != nil {
		return x.NamePinYin
	}
	return ""
}

func (x *ResChessHeroConfDataBin) GetCardHighModelInfo() *ResDT_ChessModelInfo {
	if x != nil {
		return x.CardHighModelInfo
	}
	return nil
}

func (x *ResChessHeroConfDataBin) GetCardLowModelInfo() *ResDT_ChessModelInfo {
	if x != nil {
		return x.CardLowModelInfo
	}
	return nil
}

func (x *ResChessHeroConfDataBin) GetMeshScale() int32 {
	if x != nil {
		return x.MeshScale
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetAttackDistanceType() uint32 {
	if x != nil {
		return x.AttackDistanceType
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetGender() uint32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetEnhanceType() uint32 {
	if x != nil {
		return x.EnhanceType
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetPassiveID() []int32 {
	if x != nil {
		return x.PassiveID
	}
	return nil
}

func (x *ResChessHeroConfDataBin) GetMainJob() uint32 {
	if x != nil {
		return x.MainJob
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetAI_Chess() string {
	if x != nil {
		return x.AI_Chess
	}
	return ""
}

func (x *ResChessHeroConfDataBin) GetAttackRangeDesc() string {
	if x != nil {
		return x.AttackRangeDesc
	}
	return ""
}

func (x *ResChessHeroConfDataBin) GetEnergyType() uint32 {
	if x != nil {
		return x.EnergyType
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetInitEnergy() int32 {
	if x != nil {
		return x.InitEnergy
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetEnergy() int32 {
	if x != nil {
		return x.Energy
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetDamageMpRecover() int32 {
	if x != nil {
		return x.DamageMpRecover
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetHurtMpRecoverRate() int32 {
	if x != nil {
		return x.HurtMpRecoverRate
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetHurtMpRecoverLimit() int32 {
	if x != nil {
		return x.HurtMpRecoverLimit
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetBorn_Age() string {
	if x != nil {
		return x.Born_Age
	}
	return ""
}

func (x *ResChessHeroConfDataBin) GetRevive_Age() string {
	if x != nil {
		return x.Revive_Age
	}
	return ""
}

func (x *ResChessHeroConfDataBin) GetChessPos() uint32 {
	if x != nil {
		return x.ChessPos
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetFrontScore() int32 {
	if x != nil {
		return x.FrontScore
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetBackScore() int32 {
	if x != nil {
		return x.BackScore
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetAbilityScore() int32 {
	if x != nil {
		return x.AbilityScore
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetUltimateSlot() uint32 {
	if x != nil {
		return x.UltimateSlot
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetCombos() []*ResDT_ChessComboInfo {
	if x != nil {
		return x.Combos
	}
	return nil
}

func (x *ResChessHeroConfDataBin) GetRecommendEquipID() []uint32 {
	if x != nil {
		return x.RecommendEquipID
	}
	return nil
}

func (x *ResChessHeroConfDataBin) GetForbiddenLeaveBattleField() int32 {
	if x != nil {
		return x.ForbiddenLeaveBattleField
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetBloodBarHeight() int32 {
	if x != nil {
		return x.BloodBarHeight
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetWaitForFight() int32 {
	if x != nil {
		return x.WaitForFight
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetBManaLock() bool {
	if x != nil {
		return x.BManaLock
	}
	return false
}

func (x *ResChessHeroConfDataBin) GetLowPriorityWearType() []EQUIP_TYPE {
	if x != nil {
		return x.LowPriorityWearType
	}
	return nil
}

func (x *ResChessHeroConfDataBin) GetAIAttr_AD() int32 {
	if x != nil {
		return x.AIAttr_AD
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetAIAttr_AP() int32 {
	if x != nil {
		return x.AIAttr_AP
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetAIAttr_ADCrit() int32 {
	if x != nil {
		return x.AIAttr_ADCrit
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetAIAttr_ADDefense() int32 {
	if x != nil {
		return x.AIAttr_ADDefense
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetAIAttr_APDefense() int32 {
	if x != nil {
		return x.AIAttr_APDefense
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetAIAttr_Power() int32 {
	if x != nil {
		return x.AIAttr_Power
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetAIAttr_ADHp() int32 {
	if x != nil {
		return x.AIAttr_ADHp
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetAIAttr_APHp() int32 {
	if x != nil {
		return x.AIAttr_APHp
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetAIAttr_ADSpeed() int32 {
	if x != nil {
		return x.AIAttr_ADSpeed
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetAIAttr_HP() int32 {
	if x != nil {
		return x.AIAttr_HP
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetCanShowTips() bool {
	if x != nil {
		return x.CanShowTips
	}
	return false
}

func (x *ResChessHeroConfDataBin) GetCounterType() int32 {
	if x != nil {
		return x.CounterType
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetInitCounterEnergy() int32 {
	if x != nil {
		return x.InitCounterEnergy
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetMaxCounter() int32 {
	if x != nil {
		return x.MaxCounter
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetWorldViewShort() string {
	if x != nil {
		return x.WorldViewShort
	}
	return ""
}

func (x *ResChessHeroConfDataBin) GetHeroModes() []HeroModeType {
	if x != nil {
		return x.HeroModes
	}
	return nil
}

func (x *ResChessHeroConfDataBin) GetDamageMpRecoverLimit() int32 {
	if x != nil {
		return x.DamageMpRecoverLimit
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetForbiddenPick() bool {
	if x != nil {
		return x.ForbiddenPick
	}
	return false
}

func (x *ResChessHeroConfDataBin) GetHeroPortraitEff() string {
	if x != nil {
		return x.HeroPortraitEff
	}
	return ""
}

func (x *ResChessHeroConfDataBin) GetHeroPortraitSpine() string {
	if x != nil {
		return x.HeroPortraitSpine
	}
	return ""
}

func (x *ResChessHeroConfDataBin) GetHeroPortraitSpineEff() string {
	if x != nil {
		return x.HeroPortraitSpineEff
	}
	return ""
}

func (x *ResChessHeroConfDataBin) GetIsNotSettleChess() bool {
	if x != nil {
		return x.IsNotSettleChess
	}
	return false
}

func (x *ResChessHeroConfDataBin) GetSettleDamage() int32 {
	if x != nil {
		return x.SettleDamage
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetPopulationCost() int32 {
	if x != nil {
		return x.PopulationCost
	}
	return 0
}

func (x *ResChessHeroConfDataBin) GetHeroPortraitFrame() string {
	if x != nil {
		return x.HeroPortraitFrame
	}
	return ""
}

func (x *ResChessHeroConfDataBin) GetLayer() ResLayerType {
	if x != nil {
		return x.Layer
	}
	return ResLayerType_ResLayerType_None
}

func (x *ResChessHeroConfDataBin) GetInBattleMaxCountLimit() int32 {
	if x != nil {
		return x.InBattleMaxCountLimit
	}
	return 0
}

// 备战区排序优先级.xlsx
type ResAlternativeSortDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     int32 `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	SortRule int32 `protobuf:"varint,2,opt,name=SortRule,proto3" json:"SortRule,omitempty"`
	Priority int32 `protobuf:"varint,3,opt,name=Priority,proto3" json:"Priority,omitempty"`
}

func (x *ResAlternativeSortDataBin) Reset() {
	*x = ResAlternativeSortDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResAlternativeSortDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResAlternativeSortDataBin) ProtoMessage() {}

func (x *ResAlternativeSortDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResAlternativeSortDataBin.ProtoReflect.Descriptor instead.
func (*ResAlternativeSortDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{88}
}

func (x *ResAlternativeSortDataBin) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ResAlternativeSortDataBin) GetSortRule() int32 {
	if x != nil {
		return x.SortRule
	}
	return 0
}

func (x *ResAlternativeSortDataBin) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type Res_PreEquip_Struct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreEquipID uint32 `protobuf:"varint,1,opt,name=PreEquipID,proto3" json:"PreEquipID,omitempty"`
}

func (x *Res_PreEquip_Struct) Reset() {
	*x = Res_PreEquip_Struct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Res_PreEquip_Struct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Res_PreEquip_Struct) ProtoMessage() {}

func (x *Res_PreEquip_Struct) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Res_PreEquip_Struct.ProtoReflect.Descriptor instead.
func (*Res_PreEquip_Struct) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{89}
}

func (x *Res_PreEquip_Struct) GetPreEquipID() uint32 {
	if x != nil {
		return x.PreEquipID
	}
	return 0
}

type ResEffectCombine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                 uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Desc               string `protobuf:"bytes,2,opt,name=Desc,proto3" json:"Desc,omitempty"`
	UniquePassiveGroup uint32 `protobuf:"varint,3,opt,name=UniquePassiveGroup,proto3" json:"UniquePassiveGroup,omitempty"`
}

func (x *ResEffectCombine) Reset() {
	*x = ResEffectCombine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResEffectCombine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResEffectCombine) ProtoMessage() {}

func (x *ResEffectCombine) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResEffectCombine.ProtoReflect.Descriptor instead.
func (*ResEffectCombine) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{90}
}

func (x *ResEffectCombine) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResEffectCombine) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ResEffectCombine) GetUniquePassiveGroup() uint32 {
	if x != nil {
		return x.UniquePassiveGroup
	}
	return 0
}

type ResActiveSkill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Slot      uint32 `protobuf:"varint,2,opt,name=Slot,proto3" json:"Slot,omitempty"`
	GroupID   uint32 `protobuf:"varint,3,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	Des       string `protobuf:"bytes,4,opt,name=Des,proto3" json:"Des,omitempty"`
	ExtraDesc string `protobuf:"bytes,5,opt,name=ExtraDesc,proto3" json:"ExtraDesc,omitempty"`
}

func (x *ResActiveSkill) Reset() {
	*x = ResActiveSkill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResActiveSkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResActiveSkill) ProtoMessage() {}

func (x *ResActiveSkill) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResActiveSkill.ProtoReflect.Descriptor instead.
func (*ResActiveSkill) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{91}
}

func (x *ResActiveSkill) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResActiveSkill) GetSlot() uint32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *ResActiveSkill) GetGroupID() uint32 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *ResActiveSkill) GetDes() string {
	if x != nil {
		return x.Des
	}
	return ""
}

func (x *ResActiveSkill) GetExtraDesc() string {
	if x != nil {
		return x.ExtraDesc
	}
	return ""
}

type ResPassiveSkill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                    uint32   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Desc                  string   `protobuf:"bytes,2,opt,name=Desc,proto3" json:"Desc,omitempty"`
	UniquePassiveGroup    uint32   `protobuf:"varint,3,opt,name=UniquePassiveGroup,proto3" json:"UniquePassiveGroup,omitempty"`
	PassiveRmvSkillFuncID []uint32 `protobuf:"varint,4,rep,packed,name=PassiveRmvSkillFuncID,proto3" json:"PassiveRmvSkillFuncID,omitempty"`
}

func (x *ResPassiveSkill) Reset() {
	*x = ResPassiveSkill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResPassiveSkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResPassiveSkill) ProtoMessage() {}

func (x *ResPassiveSkill) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResPassiveSkill.ProtoReflect.Descriptor instead.
func (*ResPassiveSkill) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{92}
}

func (x *ResPassiveSkill) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResPassiveSkill) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ResPassiveSkill) GetUniquePassiveGroup() uint32 {
	if x != nil {
		return x.UniquePassiveGroup
	}
	return 0
}

func (x *ResPassiveSkill) GetPassiveRmvSkillFuncID() []uint32 {
	if x != nil {
		return x.PassiveRmvSkillFuncID
	}
	return nil
}

type LordAIConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LordID     int32  `protobuf:"varint,1,opt,name=LordID,proto3" json:"LordID,omitempty"`
	LordAIPath string `protobuf:"bytes,2,opt,name=LordAIPath,proto3" json:"LordAIPath,omitempty"`
}

func (x *LordAIConf) Reset() {
	*x = LordAIConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LordAIConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LordAIConf) ProtoMessage() {}

func (x *LordAIConf) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LordAIConf.ProtoReflect.Descriptor instead.
func (*LordAIConf) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{93}
}

func (x *LordAIConf) GetLordID() int32 {
	if x != nil {
		return x.LordID
	}
	return 0
}

func (x *LordAIConf) GetLordAIPath() string {
	if x != nil {
		return x.LordAIPath
	}
	return ""
}

type AICommunicationItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TriggerType       AICommunicationTrigger `protobuf:"varint,1,opt,name=triggerType,proto3,enum=ResData.AICommunicationTrigger" json:"triggerType,omitempty"`
	CommunicationType AICommunicationType    `protobuf:"varint,2,opt,name=communicationType,proto3,enum=ResData.AICommunicationType" json:"communicationType,omitempty"`
	WordRate          int32                  `protobuf:"varint,3,opt,name=wordRate,proto3" json:"wordRate,omitempty"`
	TriggerRate       int32                  `protobuf:"varint,4,opt,name=triggerRate,proto3" json:"triggerRate,omitempty"`
	Param1            int32                  `protobuf:"varint,5,opt,name=param1,proto3" json:"param1,omitempty"`
	Param2            int32                  `protobuf:"varint,6,opt,name=param2,proto3" json:"param2,omitempty"`
}

func (x *AICommunicationItem) Reset() {
	*x = AICommunicationItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AICommunicationItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AICommunicationItem) ProtoMessage() {}

func (x *AICommunicationItem) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AICommunicationItem.ProtoReflect.Descriptor instead.
func (*AICommunicationItem) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{94}
}

func (x *AICommunicationItem) GetTriggerType() AICommunicationTrigger {
	if x != nil {
		return x.TriggerType
	}
	return AICommunicationTrigger_AICommunicationTrigger_None
}

func (x *AICommunicationItem) GetCommunicationType() AICommunicationType {
	if x != nil {
		return x.CommunicationType
	}
	return AICommunicationType_AICommunicationType_None
}

func (x *AICommunicationItem) GetWordRate() int32 {
	if x != nil {
		return x.WordRate
	}
	return 0
}

func (x *AICommunicationItem) GetTriggerRate() int32 {
	if x != nil {
		return x.TriggerRate
	}
	return 0
}

func (x *AICommunicationItem) GetParam1() int32 {
	if x != nil {
		return x.Param1
	}
	return 0
}

func (x *AICommunicationItem) GetParam2() int32 {
	if x != nil {
		return x.Param2
	}
	return 0
}

type AIWatchPlayerRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlivePlayerCount int32 `protobuf:"varint,1,opt,name=AlivePlayerCount,proto3" json:"AlivePlayerCount,omitempty"`
	WatchRate        int32 `protobuf:"varint,2,opt,name=watchRate,proto3" json:"watchRate,omitempty"`
}

func (x *AIWatchPlayerRate) Reset() {
	*x = AIWatchPlayerRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AIWatchPlayerRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AIWatchPlayerRate) ProtoMessage() {}

func (x *AIWatchPlayerRate) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AIWatchPlayerRate.ProtoReflect.Descriptor instead.
func (*AIWatchPlayerRate) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{95}
}

func (x *AIWatchPlayerRate) GetAlivePlayerCount() int32 {
	if x != nil {
		return x.AlivePlayerCount
	}
	return 0
}

func (x *AIWatchPlayerRate) GetWatchRate() int32 {
	if x != nil {
		return x.WatchRate
	}
	return 0
}

type ResAICommunicationCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                       int32                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	PlayerCountWatchRateList []*AIWatchPlayerRate   `protobuf:"bytes,2,rep,name=PlayerCountWatchRateList,proto3" json:"PlayerCountWatchRateList,omitempty"`
	PersonalityRate          int32                  `protobuf:"varint,3,opt,name=personalityRate,proto3" json:"personalityRate,omitempty"`
	Items                    []*AICommunicationItem `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ResAICommunicationCfg) Reset() {
	*x = ResAICommunicationCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResAICommunicationCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResAICommunicationCfg) ProtoMessage() {}

func (x *ResAICommunicationCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResAICommunicationCfg.ProtoReflect.Descriptor instead.
func (*ResAICommunicationCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{96}
}

func (x *ResAICommunicationCfg) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResAICommunicationCfg) GetPlayerCountWatchRateList() []*AIWatchPlayerRate {
	if x != nil {
		return x.PlayerCountWatchRateList
	}
	return nil
}

func (x *ResAICommunicationCfg) GetPersonalityRate() int32 {
	if x != nil {
		return x.PersonalityRate
	}
	return 0
}

func (x *ResAICommunicationCfg) GetItems() []*AICommunicationItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type AIAttrScale struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  AIAttrType `protobuf:"varint,1,opt,name=Type,proto3,enum=ResData.AIAttrType" json:"Type,omitempty"`
	Scale int32      `protobuf:"varint,2,opt,name=Scale,proto3" json:"Scale,omitempty"`
}

func (x *AIAttrScale) Reset() {
	*x = AIAttrScale{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AIAttrScale) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AIAttrScale) ProtoMessage() {}

func (x *AIAttrScale) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AIAttrScale.ProtoReflect.Descriptor instead.
func (*AIAttrScale) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{97}
}

func (x *AIAttrScale) GetType() AIAttrType {
	if x != nil {
		return x.Type
	}
	return AIAttrType_AIAttrType_None
}

func (x *AIAttrScale) GetScale() int32 {
	if x != nil {
		return x.Scale
	}
	return 0
}

type ResEquipProp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  uint32 `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Value int32  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ResEquipProp) Reset() {
	*x = ResEquipProp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResEquipProp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResEquipProp) ProtoMessage() {}

func (x *ResEquipProp) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResEquipProp.ProtoReflect.Descriptor instead.
func (*ResEquipProp) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{98}
}

func (x *ResEquipProp) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ResEquipProp) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type ResPropDisplayDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PropType        uint32 `protobuf:"varint,1,opt,name=PropType,proto3" json:"PropType,omitempty"`
	Name            string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Color           string `protobuf:"bytes,3,opt,name=Color,proto3" json:"Color,omitempty"`
	Icon            string `protobuf:"bytes,4,opt,name=Icon,proto3" json:"Icon,omitempty"`
	ValueType       uint32 `protobuf:"varint,5,opt,name=ValueType,proto3" json:"ValueType,omitempty"`
	SimpleSort      int32  `protobuf:"varint,6,opt,name=SimpleSort,proto3" json:"SimpleSort,omitempty"`
	DetailSort      int32  `protobuf:"varint,7,opt,name=DetailSort,proto3" json:"DetailSort,omitempty"`
	Hide            bool   `protobuf:"varint,8,opt,name=Hide,proto3" json:"Hide,omitempty"`
	MaxDisplayValue int32  `protobuf:"varint,9,opt,name=MaxDisplayValue,proto3" json:"MaxDisplayValue,omitempty"`
}

func (x *ResPropDisplayDataBin) Reset() {
	*x = ResPropDisplayDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResPropDisplayDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResPropDisplayDataBin) ProtoMessage() {}

func (x *ResPropDisplayDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResPropDisplayDataBin.ProtoReflect.Descriptor instead.
func (*ResPropDisplayDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{99}
}

func (x *ResPropDisplayDataBin) GetPropType() uint32 {
	if x != nil {
		return x.PropType
	}
	return 0
}

func (x *ResPropDisplayDataBin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResPropDisplayDataBin) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *ResPropDisplayDataBin) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *ResPropDisplayDataBin) GetValueType() uint32 {
	if x != nil {
		return x.ValueType
	}
	return 0
}

func (x *ResPropDisplayDataBin) GetSimpleSort() int32 {
	if x != nil {
		return x.SimpleSort
	}
	return 0
}

func (x *ResPropDisplayDataBin) GetDetailSort() int32 {
	if x != nil {
		return x.DetailSort
	}
	return 0
}

func (x *ResPropDisplayDataBin) GetHide() bool {
	if x != nil {
		return x.Hide
	}
	return false
}

func (x *ResPropDisplayDataBin) GetMaxDisplayValue() int32 {
	if x != nil {
		return x.MaxDisplayValue
	}
	return 0
}

type ResEquipDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SvrPlayModUniqID       uint32                          `protobuf:"varint,50,opt,name=SvrPlayModUniqID,proto3" json:"SvrPlayModUniqID,omitempty"`
	EquipID                int32                           `protobuf:"varint,1,opt,name=EquipID,proto3" json:"EquipID,omitempty"`
	EquipName              string                          `protobuf:"bytes,2,opt,name=EquipName,proto3" json:"EquipName,omitempty"`
	EquipDes               string                          `protobuf:"bytes,3,opt,name=EquipDes,proto3" json:"EquipDes,omitempty"`
	EquipDetail            string                          `protobuf:"bytes,4,opt,name=EquipDetail,proto3" json:"EquipDetail,omitempty"`
	EquipIcon              string                          `protobuf:"bytes,5,opt,name=EquipIcon,proto3" json:"EquipIcon,omitempty"`
	EquipQuality           int32                           `protobuf:"varint,6,opt,name=EquipQuality,proto3" json:"EquipQuality,omitempty"`
	AtlasType              int32                           `protobuf:"varint,15,opt,name=AtlasType,proto3" json:"AtlasType,omitempty"`
	IsNotShowInAtlas       bool                            `protobuf:"varint,27,opt,name=IsNotShowInAtlas,proto3" json:"IsNotShowInAtlas,omitempty"`
	EquipListSortWeight    uint32                          `protobuf:"varint,28,opt,name=EquipListSortWeight,proto3" json:"EquipListSortWeight,omitempty"`
	EquipBigIcon           string                          `protobuf:"bytes,29,opt,name=EquipBigIcon,proto3" json:"EquipBigIcon,omitempty"`
	PropChange             []*ResEquipProp                 `protobuf:"bytes,31,rep,name=PropChange,proto3" json:"PropChange,omitempty"`
	LabelDesc              []string                        `protobuf:"bytes,32,rep,name=LabelDesc,proto3" json:"LabelDesc,omitempty"`
	Recommend              string                          `protobuf:"bytes,102,opt,name=Recommend,proto3" json:"Recommend,omitempty"`
	Type                   EQUIP_TYPE                      `protobuf:"varint,103,opt,name=Type,proto3,enum=ResData.EQUIP_TYPE" json:"Type,omitempty"`
	PassiveSkill           []*ResPassiveSkill              `protobuf:"bytes,107,rep,name=PassiveSkill,proto3" json:"PassiveSkill,omitempty"`
	EffectCombine          []*ResEffectCombine             `protobuf:"bytes,108,rep,name=EffectCombine,proto3" json:"EffectCombine,omitempty"`
	ActiveSkill            []*ResActiveSkill               `protobuf:"bytes,109,rep,name=ActiveSkill,proto3" json:"ActiveSkill,omitempty"`
	AdditionRelative       []RES_RELATIVE_ID               `protobuf:"varint,117,rep,packed,name=AdditionRelative,proto3,enum=ResData.RES_RELATIVE_ID" json:"AdditionRelative,omitempty"`
	IsOnly                 uint32                          `protobuf:"varint,126,opt,name=IsOnly,proto3" json:"IsOnly,omitempty"`
	PreId1                 uint32                          `protobuf:"varint,127,opt,name=PreId1,proto3" json:"PreId1,omitempty"`
	UpgradeType            RES_PROJECT8_EQUIP_UPGRADE_TYPE `protobuf:"varint,128,opt,name=UpgradeType,proto3,enum=ResData.RES_PROJECT8_EQUIP_UPGRADE_TYPE" json:"UpgradeType,omitempty"`
	UpgradeParam           uint32                          `protobuf:"varint,129,opt,name=UpgradeParam,proto3" json:"UpgradeParam,omitempty"`
	EquipFuncType          RES_PROJECT8_EQUIP_FUNC_TYPE    `protobuf:"varint,131,opt,name=EquipFuncType,proto3,enum=ResData.RES_PROJECT8_EQUIP_FUNC_TYPE" json:"EquipFuncType,omitempty"`
	ShowBufferLayerID      int32                           `protobuf:"varint,135,opt,name=ShowBufferLayerID,proto3" json:"ShowBufferLayerID,omitempty"`
	CanTakenOff            uint32                          `protobuf:"varint,136,opt,name=CanTakenOff,proto3" json:"CanTakenOff,omitempty"`
	TakenOffCostCoin       uint32                          `protobuf:"varint,137,opt,name=TakenOffCostCoin,proto3" json:"TakenOffCostCoin,omitempty"`
	UseType                EQUIP_USE_TYPE                  `protobuf:"varint,138,opt,name=UseType,proto3,enum=ResData.EQUIP_USE_TYPE" json:"UseType,omitempty"`
	AIAttrs                []*AIAttrScale                  `protobuf:"bytes,139,rep,name=AIAttrs,proto3" json:"AIAttrs,omitempty"`
	AICantWearDuplicate    bool                            `protobuf:"varint,140,opt,name=AICantWearDuplicate,proto3" json:"AICantWearDuplicate,omitempty"`
	ShowBufferOnceID       int32                           `protobuf:"varint,142,opt,name=ShowBufferOnceID,proto3" json:"ShowBufferOnceID,omitempty"`
	WorldViewShort         string                          `protobuf:"bytes,143,opt,name=WorldViewShort,proto3" json:"WorldViewShort,omitempty"`
	Invisible              bool                            `protobuf:"varint,144,opt,name=Invisible,proto3" json:"Invisible,omitempty"`
	CannotEquip            bool                            `protobuf:"varint,145,opt,name=CannotEquip,proto3" json:"CannotEquip,omitempty"`
	SortOrderInTips        int32                           `protobuf:"varint,146,opt,name=SortOrderInTips,proto3" json:"SortOrderInTips,omitempty"`
	FrameRarity            int32                           `protobuf:"varint,147,opt,name=FrameRarity,proto3" json:"FrameRarity,omitempty"`
	EquipGridMask          int32                           `protobuf:"varint,148,opt,name=EquipGridMask,proto3" json:"EquipGridMask,omitempty"`
	BriefTag               []string                        `protobuf:"bytes,149,rep,name=BriefTag,proto3" json:"BriefTag,omitempty"`
	PhantomTemplateEquipID int32                           `protobuf:"varint,150,opt,name=PhantomTemplateEquipID,proto3" json:"PhantomTemplateEquipID,omitempty"`
}

func (x *ResEquipDataBin) Reset() {
	*x = ResEquipDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResEquipDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResEquipDataBin) ProtoMessage() {}

func (x *ResEquipDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResEquipDataBin.ProtoReflect.Descriptor instead.
func (*ResEquipDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{100}
}

func (x *ResEquipDataBin) GetSvrPlayModUniqID() uint32 {
	if x != nil {
		return x.SvrPlayModUniqID
	}
	return 0
}

func (x *ResEquipDataBin) GetEquipID() int32 {
	if x != nil {
		return x.EquipID
	}
	return 0
}

func (x *ResEquipDataBin) GetEquipName() string {
	if x != nil {
		return x.EquipName
	}
	return ""
}

func (x *ResEquipDataBin) GetEquipDes() string {
	if x != nil {
		return x.EquipDes
	}
	return ""
}

func (x *ResEquipDataBin) GetEquipDetail() string {
	if x != nil {
		return x.EquipDetail
	}
	return ""
}

func (x *ResEquipDataBin) GetEquipIcon() string {
	if x != nil {
		return x.EquipIcon
	}
	return ""
}

func (x *ResEquipDataBin) GetEquipQuality() int32 {
	if x != nil {
		return x.EquipQuality
	}
	return 0
}

func (x *ResEquipDataBin) GetAtlasType() int32 {
	if x != nil {
		return x.AtlasType
	}
	return 0
}

func (x *ResEquipDataBin) GetIsNotShowInAtlas() bool {
	if x != nil {
		return x.IsNotShowInAtlas
	}
	return false
}

func (x *ResEquipDataBin) GetEquipListSortWeight() uint32 {
	if x != nil {
		return x.EquipListSortWeight
	}
	return 0
}

func (x *ResEquipDataBin) GetEquipBigIcon() string {
	if x != nil {
		return x.EquipBigIcon
	}
	return ""
}

func (x *ResEquipDataBin) GetPropChange() []*ResEquipProp {
	if x != nil {
		return x.PropChange
	}
	return nil
}

func (x *ResEquipDataBin) GetLabelDesc() []string {
	if x != nil {
		return x.LabelDesc
	}
	return nil
}

func (x *ResEquipDataBin) GetRecommend() string {
	if x != nil {
		return x.Recommend
	}
	return ""
}

func (x *ResEquipDataBin) GetType() EQUIP_TYPE {
	if x != nil {
		return x.Type
	}
	return EQUIP_TYPE_EQUIP_TYPE_NONE
}

func (x *ResEquipDataBin) GetPassiveSkill() []*ResPassiveSkill {
	if x != nil {
		return x.PassiveSkill
	}
	return nil
}

func (x *ResEquipDataBin) GetEffectCombine() []*ResEffectCombine {
	if x != nil {
		return x.EffectCombine
	}
	return nil
}

func (x *ResEquipDataBin) GetActiveSkill() []*ResActiveSkill {
	if x != nil {
		return x.ActiveSkill
	}
	return nil
}

func (x *ResEquipDataBin) GetAdditionRelative() []RES_RELATIVE_ID {
	if x != nil {
		return x.AdditionRelative
	}
	return nil
}

func (x *ResEquipDataBin) GetIsOnly() uint32 {
	if x != nil {
		return x.IsOnly
	}
	return 0
}

func (x *ResEquipDataBin) GetPreId1() uint32 {
	if x != nil {
		return x.PreId1
	}
	return 0
}

func (x *ResEquipDataBin) GetUpgradeType() RES_PROJECT8_EQUIP_UPGRADE_TYPE {
	if x != nil {
		return x.UpgradeType
	}
	return RES_PROJECT8_EQUIP_UPGRADE_TYPE_RES_PROJECT8_EQUIP_UPGRADE_TYPE_DEFAULT
}

func (x *ResEquipDataBin) GetUpgradeParam() uint32 {
	if x != nil {
		return x.UpgradeParam
	}
	return 0
}

func (x *ResEquipDataBin) GetEquipFuncType() RES_PROJECT8_EQUIP_FUNC_TYPE {
	if x != nil {
		return x.EquipFuncType
	}
	return RES_PROJECT8_EQUIP_FUNC_TYPE_RES_PROJECT8_EQUIP_FUNC_TYPE_DEFAULT
}

func (x *ResEquipDataBin) GetShowBufferLayerID() int32 {
	if x != nil {
		return x.ShowBufferLayerID
	}
	return 0
}

func (x *ResEquipDataBin) GetCanTakenOff() uint32 {
	if x != nil {
		return x.CanTakenOff
	}
	return 0
}

func (x *ResEquipDataBin) GetTakenOffCostCoin() uint32 {
	if x != nil {
		return x.TakenOffCostCoin
	}
	return 0
}

func (x *ResEquipDataBin) GetUseType() EQUIP_USE_TYPE {
	if x != nil {
		return x.UseType
	}
	return EQUIP_USE_TYPE_EQUIP_USE_TYPE_NONE
}

func (x *ResEquipDataBin) GetAIAttrs() []*AIAttrScale {
	if x != nil {
		return x.AIAttrs
	}
	return nil
}

func (x *ResEquipDataBin) GetAICantWearDuplicate() bool {
	if x != nil {
		return x.AICantWearDuplicate
	}
	return false
}

func (x *ResEquipDataBin) GetShowBufferOnceID() int32 {
	if x != nil {
		return x.ShowBufferOnceID
	}
	return 0
}

func (x *ResEquipDataBin) GetWorldViewShort() string {
	if x != nil {
		return x.WorldViewShort
	}
	return ""
}

func (x *ResEquipDataBin) GetInvisible() bool {
	if x != nil {
		return x.Invisible
	}
	return false
}

func (x *ResEquipDataBin) GetCannotEquip() bool {
	if x != nil {
		return x.CannotEquip
	}
	return false
}

func (x *ResEquipDataBin) GetSortOrderInTips() int32 {
	if x != nil {
		return x.SortOrderInTips
	}
	return 0
}

func (x *ResEquipDataBin) GetFrameRarity() int32 {
	if x != nil {
		return x.FrameRarity
	}
	return 0
}

func (x *ResEquipDataBin) GetEquipGridMask() int32 {
	if x != nil {
		return x.EquipGridMask
	}
	return 0
}

func (x *ResEquipDataBin) GetBriefTag() []string {
	if x != nil {
		return x.BriefTag
	}
	return nil
}

func (x *ResEquipDataBin) GetPhantomTemplateEquipID() int32 {
	if x != nil {
		return x.PhantomTemplateEquipID
	}
	return 0
}

type Res_Fetter_Num_Struct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeopleNum uint32 `protobuf:"varint,1,opt,name=PeopleNum,proto3" json:"PeopleNum,omitempty"`
}

func (x *Res_Fetter_Num_Struct) Reset() {
	*x = Res_Fetter_Num_Struct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Res_Fetter_Num_Struct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Res_Fetter_Num_Struct) ProtoMessage() {}

func (x *Res_Fetter_Num_Struct) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Res_Fetter_Num_Struct.ProtoReflect.Descriptor instead.
func (*Res_Fetter_Num_Struct) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{101}
}

func (x *Res_Fetter_Num_Struct) GetPeopleNum() uint32 {
	if x != nil {
		return x.PeopleNum
	}
	return 0
}

type ResDT_ChessGlobalEffectItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EffectType uint32 `protobuf:"varint,1,opt,name=EffectType,proto3" json:"EffectType,omitempty"`
	EffectID   uint32 `protobuf:"varint,2,opt,name=EffectID,proto3" json:"EffectID,omitempty"`
}

func (x *ResDT_ChessGlobalEffectItem) Reset() {
	*x = ResDT_ChessGlobalEffectItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_ChessGlobalEffectItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_ChessGlobalEffectItem) ProtoMessage() {}

func (x *ResDT_ChessGlobalEffectItem) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_ChessGlobalEffectItem.ProtoReflect.Descriptor instead.
func (*ResDT_ChessGlobalEffectItem) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{102}
}

func (x *ResDT_ChessGlobalEffectItem) GetEffectType() uint32 {
	if x != nil {
		return x.EffectType
	}
	return 0
}

func (x *ResDT_ChessGlobalEffectItem) GetEffectID() uint32 {
	if x != nil {
		return x.EffectID
	}
	return 0
}

type ResDT_ChessSpecialParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParamID uint32 `protobuf:"varint,1,opt,name=paramID,proto3" json:"paramID,omitempty"`
}

func (x *ResDT_ChessSpecialParam) Reset() {
	*x = ResDT_ChessSpecialParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_ChessSpecialParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_ChessSpecialParam) ProtoMessage() {}

func (x *ResDT_ChessSpecialParam) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_ChessSpecialParam.ProtoReflect.Descriptor instead.
func (*ResDT_ChessSpecialParam) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{103}
}

func (x *ResDT_ChessSpecialParam) GetParamID() uint32 {
	if x != nil {
		return x.ParamID
	}
	return 0
}

type Res_Fetter_Struct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EffectDes    string                         `protobuf:"bytes,1,opt,name=EffectDes,proto3" json:"EffectDes,omitempty"`
	AbilityScale int32                          `protobuf:"varint,2,opt,name=AbilityScale,proto3" json:"AbilityScale,omitempty"`
	Effect       []*ResDT_ChessGlobalEffectItem `protobuf:"bytes,3,rep,name=Effect,proto3" json:"Effect,omitempty"`
	SpecialParam []*ResDT_ChessSpecialParam     `protobuf:"bytes,5,rep,name=SpecialParam,proto3" json:"SpecialParam,omitempty"`
}

func (x *Res_Fetter_Struct) Reset() {
	*x = Res_Fetter_Struct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Res_Fetter_Struct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Res_Fetter_Struct) ProtoMessage() {}

func (x *Res_Fetter_Struct) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Res_Fetter_Struct.ProtoReflect.Descriptor instead.
func (*Res_Fetter_Struct) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{104}
}

func (x *Res_Fetter_Struct) GetEffectDes() string {
	if x != nil {
		return x.EffectDes
	}
	return ""
}

func (x *Res_Fetter_Struct) GetAbilityScale() int32 {
	if x != nil {
		return x.AbilityScale
	}
	return 0
}

func (x *Res_Fetter_Struct) GetEffect() []*ResDT_ChessGlobalEffectItem {
	if x != nil {
		return x.Effect
	}
	return nil
}

func (x *Res_Fetter_Struct) GetSpecialParam() []*ResDT_ChessSpecialParam {
	if x != nil {
		return x.SpecialParam
	}
	return nil
}

type Res_Fetter_Layer_Quality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quality uint32 `protobuf:"varint,1,opt,name=Quality,proto3" json:"Quality,omitempty"`
}

func (x *Res_Fetter_Layer_Quality) Reset() {
	*x = Res_Fetter_Layer_Quality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Res_Fetter_Layer_Quality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Res_Fetter_Layer_Quality) ProtoMessage() {}

func (x *Res_Fetter_Layer_Quality) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Res_Fetter_Layer_Quality.ProtoReflect.Descriptor instead.
func (*Res_Fetter_Layer_Quality) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{105}
}

func (x *Res_Fetter_Layer_Quality) GetQuality() uint32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

type Res_Fetter_Layer_Icon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IconPath string `protobuf:"bytes,1,opt,name=IconPath,proto3" json:"IconPath,omitempty"`
}

func (x *Res_Fetter_Layer_Icon) Reset() {
	*x = Res_Fetter_Layer_Icon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Res_Fetter_Layer_Icon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Res_Fetter_Layer_Icon) ProtoMessage() {}

func (x *Res_Fetter_Layer_Icon) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Res_Fetter_Layer_Icon.ProtoReflect.Descriptor instead.
func (*Res_Fetter_Layer_Icon) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{106}
}

func (x *Res_Fetter_Layer_Icon) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

type FetterConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FetterData *ResFetterConfDataBin `protobuf:"bytes,1,opt,name=FetterData,proto3" json:"FetterData,omitempty"`
}

func (x *FetterConf) Reset() {
	*x = FetterConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetterConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetterConf) ProtoMessage() {}

func (x *FetterConf) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetterConf.ProtoReflect.Descriptor instead.
func (*FetterConf) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{107}
}

func (x *FetterConf) GetFetterData() *ResFetterConfDataBin {
	if x != nil {
		return x.FetterData
	}
	return nil
}

type ResDT_FetterAudioInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattlePrepareSound           string `protobuf:"bytes,1,opt,name=BattlePrepareSound,proto3" json:"BattlePrepareSound,omitempty"`
	NormalBattleStartSound       string `protobuf:"bytes,2,opt,name=NormalBattleStartSound,proto3" json:"NormalBattleStartSound,omitempty"`
	ContinueWinBattleStartSound  string `protobuf:"bytes,3,opt,name=ContinueWinBattleStartSound,proto3" json:"ContinueWinBattleStartSound,omitempty"`
	ContinueFailBattleStartSound string `protobuf:"bytes,4,opt,name=ContinueFailBattleStartSound,proto3" json:"ContinueFailBattleStartSound,omitempty"`
	RoundWinSound                string `protobuf:"bytes,5,opt,name=RoundWinSound,proto3" json:"RoundWinSound,omitempty"`
	RoundFailSound               string `protobuf:"bytes,6,opt,name=RoundFailSound,proto3" json:"RoundFailSound,omitempty"`
	Star2ComposeSound            string `protobuf:"bytes,7,opt,name=Star2ComposeSound,proto3" json:"Star2ComposeSound,omitempty"`
	Star3ComposeSound            string `protobuf:"bytes,8,opt,name=Star3ComposeSound,proto3" json:"Star3ComposeSound,omitempty"`
	WinMsg                       string `protobuf:"bytes,9,opt,name=WinMsg,proto3" json:"WinMsg,omitempty"`
	EffectAudio                  string `protobuf:"bytes,10,opt,name=EffectAudio,proto3" json:"EffectAudio,omitempty"`
	TopEffectAudio               string `protobuf:"bytes,11,opt,name=TopEffectAudio,proto3" json:"TopEffectAudio,omitempty"`
}

func (x *ResDT_FetterAudioInfo) Reset() {
	*x = ResDT_FetterAudioInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_FetterAudioInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_FetterAudioInfo) ProtoMessage() {}

func (x *ResDT_FetterAudioInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_FetterAudioInfo.ProtoReflect.Descriptor instead.
func (*ResDT_FetterAudioInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{108}
}

func (x *ResDT_FetterAudioInfo) GetBattlePrepareSound() string {
	if x != nil {
		return x.BattlePrepareSound
	}
	return ""
}

func (x *ResDT_FetterAudioInfo) GetNormalBattleStartSound() string {
	if x != nil {
		return x.NormalBattleStartSound
	}
	return ""
}

func (x *ResDT_FetterAudioInfo) GetContinueWinBattleStartSound() string {
	if x != nil {
		return x.ContinueWinBattleStartSound
	}
	return ""
}

func (x *ResDT_FetterAudioInfo) GetContinueFailBattleStartSound() string {
	if x != nil {
		return x.ContinueFailBattleStartSound
	}
	return ""
}

func (x *ResDT_FetterAudioInfo) GetRoundWinSound() string {
	if x != nil {
		return x.RoundWinSound
	}
	return ""
}

func (x *ResDT_FetterAudioInfo) GetRoundFailSound() string {
	if x != nil {
		return x.RoundFailSound
	}
	return ""
}

func (x *ResDT_FetterAudioInfo) GetStar2ComposeSound() string {
	if x != nil {
		return x.Star2ComposeSound
	}
	return ""
}

func (x *ResDT_FetterAudioInfo) GetStar3ComposeSound() string {
	if x != nil {
		return x.Star3ComposeSound
	}
	return ""
}

func (x *ResDT_FetterAudioInfo) GetWinMsg() string {
	if x != nil {
		return x.WinMsg
	}
	return ""
}

func (x *ResDT_FetterAudioInfo) GetEffectAudio() string {
	if x != nil {
		return x.EffectAudio
	}
	return ""
}

func (x *ResDT_FetterAudioInfo) GetTopEffectAudio() string {
	if x != nil {
		return x.TopEffectAudio
	}
	return ""
}

type ResFetterConfDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SvrPlayModUniqID             uint32                      `protobuf:"varint,29,opt,name=SvrPlayModUniqID,proto3" json:"SvrPlayModUniqID,omitempty"` // 必须将SvrPlayModUniqID作为主键，且变量名为SvrPlayModUniqID不能改变
	FetterID                     RES_RELATIVE_ID             `protobuf:"varint,1,opt,name=FetterID,proto3,enum=ResData.RES_RELATIVE_ID" json:"FetterID,omitempty"`
	FetterType                   int32                       `protobuf:"varint,2,opt,name=FetterType,proto3" json:"FetterType,omitempty"`
	FetterIcon                   string                      `protobuf:"bytes,3,opt,name=FetterIcon,proto3" json:"FetterIcon,omitempty"`
	FetterName                   string                      `protobuf:"bytes,4,opt,name=FetterName,proto3" json:"FetterName,omitempty"`
	FetterDes                    string                      `protobuf:"bytes,5,opt,name=FetterDes,proto3" json:"FetterDes,omitempty"`
	FetterPeopleNum              []*Res_Fetter_Num_Struct    `protobuf:"bytes,6,rep,name=FetterPeopleNum,proto3" json:"FetterPeopleNum,omitempty"`
	FetterEffect                 []*Res_Fetter_Struct        `protobuf:"bytes,7,rep,name=FetterEffect,proto3" json:"FetterEffect,omitempty"`
	FetterLayerQuality           []*Res_Fetter_Layer_Quality `protobuf:"bytes,8,rep,name=FetterLayerQuality,proto3" json:"FetterLayerQuality,omitempty"`
	FetterLayerIcon              []*Res_Fetter_Layer_Icon    `protobuf:"bytes,9,rep,name=FetterLayerIcon,proto3" json:"FetterLayerIcon,omitempty"`
	IsHidden                     bool                        `protobuf:"varint,10,opt,name=IsHidden,proto3" json:"IsHidden,omitempty"`
	SkillImagePath               string                      `protobuf:"bytes,11,opt,name=SkillImagePath,proto3" json:"SkillImagePath,omitempty"`
	IconPath                     string                      `protobuf:"bytes,12,opt,name=IconPath,proto3" json:"IconPath,omitempty"`
	AudioInfo                    *ResDT_FetterAudioInfo      `protobuf:"bytes,13,opt,name=AudioInfo,proto3" json:"AudioInfo,omitempty"`
	NoPlusPromote                uint32                      `protobuf:"varint,22,opt,name=NoPlusPromote,proto3" json:"NoPlusPromote,omitempty"`
	MainRelative                 uint32                      `protobuf:"varint,23,opt,name=MainRelative,proto3" json:"MainRelative,omitempty"`
	FightStageRelativeActiveBuff uint32                      `protobuf:"varint,25,opt,name=FightStageRelativeActiveBuff,proto3" json:"FightStageRelativeActiveBuff,omitempty"`
	AuxRelative                  uint32                      `protobuf:"varint,26,opt,name=AuxRelative,proto3" json:"AuxRelative,omitempty"`
	BuffCreatePhase              int32                       `protobuf:"varint,27,opt,name=BuffCreatePhase,proto3" json:"BuffCreatePhase,omitempty"`
	IsBuffUpgrade                bool                        `protobuf:"varint,28,opt,name=IsBuffUpgrade,proto3" json:"IsBuffUpgrade,omitempty"`
	InherentAbilityID            uint32                      `protobuf:"varint,30,opt,name=inherentAbilityID,proto3" json:"inherentAbilityID,omitempty"`
	WorldViewShort               string                      `protobuf:"bytes,31,opt,name=WorldViewShort,proto3" json:"WorldViewShort,omitempty"`
	RelativeModes                []RelativeModeType          `protobuf:"varint,32,rep,packed,name=relativeModes,proto3,enum=ResData.RelativeModeType" json:"relativeModes,omitempty"`
	BTriggerTopJibanVoice        bool                        `protobuf:"varint,33,opt,name=bTriggerTopJibanVoice,proto3" json:"bTriggerTopJibanVoice,omitempty"`
}

func (x *ResFetterConfDataBin) Reset() {
	*x = ResFetterConfDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResFetterConfDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResFetterConfDataBin) ProtoMessage() {}

func (x *ResFetterConfDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResFetterConfDataBin.ProtoReflect.Descriptor instead.
func (*ResFetterConfDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{109}
}

func (x *ResFetterConfDataBin) GetSvrPlayModUniqID() uint32 {
	if x != nil {
		return x.SvrPlayModUniqID
	}
	return 0
}

func (x *ResFetterConfDataBin) GetFetterID() RES_RELATIVE_ID {
	if x != nil {
		return x.FetterID
	}
	return RES_RELATIVE_ID_RES_RELATIVE_ID_NULL
}

func (x *ResFetterConfDataBin) GetFetterType() int32 {
	if x != nil {
		return x.FetterType
	}
	return 0
}

func (x *ResFetterConfDataBin) GetFetterIcon() string {
	if x != nil {
		return x.FetterIcon
	}
	return ""
}

func (x *ResFetterConfDataBin) GetFetterName() string {
	if x != nil {
		return x.FetterName
	}
	return ""
}

func (x *ResFetterConfDataBin) GetFetterDes() string {
	if x != nil {
		return x.FetterDes
	}
	return ""
}

func (x *ResFetterConfDataBin) GetFetterPeopleNum() []*Res_Fetter_Num_Struct {
	if x != nil {
		return x.FetterPeopleNum
	}
	return nil
}

func (x *ResFetterConfDataBin) GetFetterEffect() []*Res_Fetter_Struct {
	if x != nil {
		return x.FetterEffect
	}
	return nil
}

func (x *ResFetterConfDataBin) GetFetterLayerQuality() []*Res_Fetter_Layer_Quality {
	if x != nil {
		return x.FetterLayerQuality
	}
	return nil
}

func (x *ResFetterConfDataBin) GetFetterLayerIcon() []*Res_Fetter_Layer_Icon {
	if x != nil {
		return x.FetterLayerIcon
	}
	return nil
}

func (x *ResFetterConfDataBin) GetIsHidden() bool {
	if x != nil {
		return x.IsHidden
	}
	return false
}

func (x *ResFetterConfDataBin) GetSkillImagePath() string {
	if x != nil {
		return x.SkillImagePath
	}
	return ""
}

func (x *ResFetterConfDataBin) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *ResFetterConfDataBin) GetAudioInfo() *ResDT_FetterAudioInfo {
	if x != nil {
		return x.AudioInfo
	}
	return nil
}

func (x *ResFetterConfDataBin) GetNoPlusPromote() uint32 {
	if x != nil {
		return x.NoPlusPromote
	}
	return 0
}

func (x *ResFetterConfDataBin) GetMainRelative() uint32 {
	if x != nil {
		return x.MainRelative
	}
	return 0
}

func (x *ResFetterConfDataBin) GetFightStageRelativeActiveBuff() uint32 {
	if x != nil {
		return x.FightStageRelativeActiveBuff
	}
	return 0
}

func (x *ResFetterConfDataBin) GetAuxRelative() uint32 {
	if x != nil {
		return x.AuxRelative
	}
	return 0
}

func (x *ResFetterConfDataBin) GetBuffCreatePhase() int32 {
	if x != nil {
		return x.BuffCreatePhase
	}
	return 0
}

func (x *ResFetterConfDataBin) GetIsBuffUpgrade() bool {
	if x != nil {
		return x.IsBuffUpgrade
	}
	return false
}

func (x *ResFetterConfDataBin) GetInherentAbilityID() uint32 {
	if x != nil {
		return x.InherentAbilityID
	}
	return 0
}

func (x *ResFetterConfDataBin) GetWorldViewShort() string {
	if x != nil {
		return x.WorldViewShort
	}
	return ""
}

func (x *ResFetterConfDataBin) GetRelativeModes() []RelativeModeType {
	if x != nil {
		return x.RelativeModes
	}
	return nil
}

func (x *ResFetterConfDataBin) GetBTriggerTopJibanVoice() bool {
	if x != nil {
		return x.BTriggerTopJibanVoice
	}
	return false
}

// --------------------------------- 布阵 ---------------------------------
type ResEmbattleSeasonDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonID     int32  `protobuf:"varint,1,opt,name=SeasonID,proto3" json:"SeasonID,omitempty"`
	SeasonName   string `protobuf:"bytes,2,opt,name=SeasonName,proto3" json:"SeasonName,omitempty"`
	ShowPos      int32  `protobuf:"varint,3,opt,name=ShowPos,proto3" json:"ShowPos,omitempty"`
	IsShow       int32  `protobuf:"varint,4,opt,name=IsShow,proto3" json:"IsShow,omitempty"`
	SelectIcon   string `protobuf:"bytes,5,opt,name=SelectIcon,proto3" json:"SelectIcon,omitempty"`
	UnSelectIcon string `protobuf:"bytes,6,opt,name=UnSelectIcon,proto3" json:"UnSelectIcon,omitempty"`
}

func (x *ResEmbattleSeasonDataBin) Reset() {
	*x = ResEmbattleSeasonDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResEmbattleSeasonDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResEmbattleSeasonDataBin) ProtoMessage() {}

func (x *ResEmbattleSeasonDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResEmbattleSeasonDataBin.ProtoReflect.Descriptor instead.
func (*ResEmbattleSeasonDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{110}
}

func (x *ResEmbattleSeasonDataBin) GetSeasonID() int32 {
	if x != nil {
		return x.SeasonID
	}
	return 0
}

func (x *ResEmbattleSeasonDataBin) GetSeasonName() string {
	if x != nil {
		return x.SeasonName
	}
	return ""
}

func (x *ResEmbattleSeasonDataBin) GetShowPos() int32 {
	if x != nil {
		return x.ShowPos
	}
	return 0
}

func (x *ResEmbattleSeasonDataBin) GetIsShow() int32 {
	if x != nil {
		return x.IsShow
	}
	return 0
}

func (x *ResEmbattleSeasonDataBin) GetSelectIcon() string {
	if x != nil {
		return x.SelectIcon
	}
	return ""
}

func (x *ResEmbattleSeasonDataBin) GetUnSelectIcon() string {
	if x != nil {
		return x.UnSelectIcon
	}
	return ""
}

// 赛季基础阵容中的英雄结构
type ResLineupHeroInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       uint32   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Level    uint32   `protobuf:"varint,2,opt,name=Level,proto3" json:"Level,omitempty"`
	Equips   []uint32 `protobuf:"varint,3,rep,packed,name=Equips,proto3" json:"Equips,omitempty"`
	Position uint32   `protobuf:"varint,4,opt,name=Position,proto3" json:"Position,omitempty"`
	IsCenter uint32   `protobuf:"varint,5,opt,name=IsCenter,proto3" json:"IsCenter,omitempty"`
}

func (x *ResLineupHeroInfo) Reset() {
	*x = ResLineupHeroInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResLineupHeroInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResLineupHeroInfo) ProtoMessage() {}

func (x *ResLineupHeroInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResLineupHeroInfo.ProtoReflect.Descriptor instead.
func (*ResLineupHeroInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{111}
}

func (x *ResLineupHeroInfo) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResLineupHeroInfo) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ResLineupHeroInfo) GetEquips() []uint32 {
	if x != nil {
		return x.Equips
	}
	return nil
}

func (x *ResLineupHeroInfo) GetPosition() uint32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *ResLineupHeroInfo) GetIsCenter() uint32 {
	if x != nil {
		return x.IsCenter
	}
	return 0
}

// 赛季基础阵容表，SeasonID不能作为key，因为一个Season可以有多套基础阵容
type ResSeasonLineupDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              uint32               `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	SeasonID        uint32               `protobuf:"varint,2,opt,name=SeasonID,proto3" json:"SeasonID,omitempty"`
	LineupGameType  uint32               `protobuf:"varint,3,opt,name=LineupGameType,proto3" json:"LineupGameType,omitempty"`
	Name            string               `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
	LordID          []uint32             `protobuf:"varint,5,rep,packed,name=LordID,proto3" json:"LordID,omitempty"`
	NewComer        uint32               `protobuf:"varint,6,opt,name=NewComer,proto3" json:"NewComer,omitempty"`
	Advance         uint32               `protobuf:"varint,7,opt,name=Advance,proto3" json:"Advance,omitempty"`
	PreferredEquips []uint32             `protobuf:"varint,8,rep,packed,name=PreferredEquips,proto3" json:"PreferredEquips,omitempty"`
	FinalHeroes     []*ResLineupHeroInfo `protobuf:"bytes,9,rep,name=FinalHeroes,proto3" json:"FinalHeroes,omitempty"`
	EarlyHeroes     []*ResLineupHeroInfo `protobuf:"bytes,10,rep,name=EarlyHeroes,proto3" json:"EarlyHeroes,omitempty"`
	LineUpType      LINE_UP_TYPE         `protobuf:"varint,13,opt,name=LineUpType,proto3,enum=ResData.LINE_UP_TYPE" json:"LineUpType,omitempty"`
	ThumbnailID     uint32               `protobuf:"varint,14,opt,name=ThumbnailID,proto3" json:"ThumbnailID,omitempty"`
}

func (x *ResSeasonLineupDataBin) Reset() {
	*x = ResSeasonLineupDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResSeasonLineupDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResSeasonLineupDataBin) ProtoMessage() {}

func (x *ResSeasonLineupDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResSeasonLineupDataBin.ProtoReflect.Descriptor instead.
func (*ResSeasonLineupDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{112}
}

func (x *ResSeasonLineupDataBin) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResSeasonLineupDataBin) GetSeasonID() uint32 {
	if x != nil {
		return x.SeasonID
	}
	return 0
}

func (x *ResSeasonLineupDataBin) GetLineupGameType() uint32 {
	if x != nil {
		return x.LineupGameType
	}
	return 0
}

func (x *ResSeasonLineupDataBin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResSeasonLineupDataBin) GetLordID() []uint32 {
	if x != nil {
		return x.LordID
	}
	return nil
}

func (x *ResSeasonLineupDataBin) GetNewComer() uint32 {
	if x != nil {
		return x.NewComer
	}
	return 0
}

func (x *ResSeasonLineupDataBin) GetAdvance() uint32 {
	if x != nil {
		return x.Advance
	}
	return 0
}

func (x *ResSeasonLineupDataBin) GetPreferredEquips() []uint32 {
	if x != nil {
		return x.PreferredEquips
	}
	return nil
}

func (x *ResSeasonLineupDataBin) GetFinalHeroes() []*ResLineupHeroInfo {
	if x != nil {
		return x.FinalHeroes
	}
	return nil
}

func (x *ResSeasonLineupDataBin) GetEarlyHeroes() []*ResLineupHeroInfo {
	if x != nil {
		return x.EarlyHeroes
	}
	return nil
}

func (x *ResSeasonLineupDataBin) GetLineUpType() LINE_UP_TYPE {
	if x != nil {
		return x.LineUpType
	}
	return LINE_UP_TYPE_LINE_UP_TYPE_EDITABLE_PRESENT
}

func (x *ResSeasonLineupDataBin) GetThumbnailID() uint32 {
	if x != nil {
		return x.ThumbnailID
	}
	return 0
}

type ResSeasonLineupThumbnailCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            uint32          `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	MajorRelative RES_RELATIVE_ID `protobuf:"varint,2,opt,name=MajorRelative,proto3,enum=ResData.RES_RELATIVE_ID" json:"MajorRelative,omitempty"`
	Desc          string          `protobuf:"bytes,3,opt,name=Desc,proto3" json:"Desc,omitempty"`
	CHeroIconPath string          `protobuf:"bytes,4,opt,name=CHeroIconPath,proto3" json:"CHeroIconPath,omitempty"`
	BgColor       string          `protobuf:"bytes,5,opt,name=BgColor,proto3" json:"BgColor,omitempty"`
}

func (x *ResSeasonLineupThumbnailCfg) Reset() {
	*x = ResSeasonLineupThumbnailCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResSeasonLineupThumbnailCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResSeasonLineupThumbnailCfg) ProtoMessage() {}

func (x *ResSeasonLineupThumbnailCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResSeasonLineupThumbnailCfg.ProtoReflect.Descriptor instead.
func (*ResSeasonLineupThumbnailCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{113}
}

func (x *ResSeasonLineupThumbnailCfg) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResSeasonLineupThumbnailCfg) GetMajorRelative() RES_RELATIVE_ID {
	if x != nil {
		return x.MajorRelative
	}
	return RES_RELATIVE_ID_RES_RELATIVE_ID_NULL
}

func (x *ResSeasonLineupThumbnailCfg) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ResSeasonLineupThumbnailCfg) GetCHeroIconPath() string {
	if x != nil {
		return x.CHeroIconPath
	}
	return ""
}

func (x *ResSeasonLineupThumbnailCfg) GetBgColor() string {
	if x != nil {
		return x.BgColor
	}
	return ""
}

type LineupConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonLineup *ResSeasonLineupDataBin `protobuf:"bytes,6,opt,name=SeasonLineup,proto3" json:"SeasonLineup,omitempty"`
}

func (x *LineupConf) Reset() {
	*x = LineupConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LineupConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineupConf) ProtoMessage() {}

func (x *LineupConf) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineupConf.ProtoReflect.Descriptor instead.
func (*LineupConf) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{114}
}

func (x *LineupConf) GetSeasonLineup() *ResSeasonLineupDataBin {
	if x != nil {
		return x.SeasonLineup
	}
	return nil
}

type ResDefaultLordInfoConfDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LordID     uint32 `protobuf:"varint,1,opt,name=LordID,proto3" json:"LordID,omitempty"`
	LordName   string `protobuf:"bytes,2,opt,name=LordName,proto3" json:"LordName,omitempty"`
	LordIcon   string `protobuf:"bytes,3,opt,name=LordIcon,proto3" json:"LordIcon,omitempty"`
	DecompDrop uint32 `protobuf:"varint,4,opt,name=DecompDrop,proto3" json:"DecompDrop,omitempty"`
	AvatarPath string `protobuf:"bytes,5,opt,name=AvatarPath,proto3" json:"AvatarPath,omitempty"`
}

func (x *ResDefaultLordInfoConfDataBin) Reset() {
	*x = ResDefaultLordInfoConfDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDefaultLordInfoConfDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDefaultLordInfoConfDataBin) ProtoMessage() {}

func (x *ResDefaultLordInfoConfDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDefaultLordInfoConfDataBin.ProtoReflect.Descriptor instead.
func (*ResDefaultLordInfoConfDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{115}
}

func (x *ResDefaultLordInfoConfDataBin) GetLordID() uint32 {
	if x != nil {
		return x.LordID
	}
	return 0
}

func (x *ResDefaultLordInfoConfDataBin) GetLordName() string {
	if x != nil {
		return x.LordName
	}
	return ""
}

func (x *ResDefaultLordInfoConfDataBin) GetLordIcon() string {
	if x != nil {
		return x.LordIcon
	}
	return ""
}

func (x *ResDefaultLordInfoConfDataBin) GetDecompDrop() uint32 {
	if x != nil {
		return x.DecompDrop
	}
	return 0
}

func (x *ResDefaultLordInfoConfDataBin) GetAvatarPath() string {
	if x != nil {
		return x.AvatarPath
	}
	return ""
}

// --------------------------------- 领主 ---------------------------------
type ResLordInfoConfDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LordID          uint32             `protobuf:"varint,1,opt,name=LordID,proto3" json:"LordID,omitempty"`
	ActorID         uint32             `protobuf:"varint,2,opt,name=ActorID,proto3" json:"ActorID,omitempty"`
	LordName        string             `protobuf:"bytes,3,opt,name=LordName,proto3" json:"LordName,omitempty"`
	DecompDrop      uint32             `protobuf:"varint,6,opt,name=DecompDrop,proto3" json:"DecompDrop,omitempty"`
	ActorInfoPath   string             `protobuf:"bytes,7,opt,name=ActorInfoPath,proto3" json:"ActorInfoPath,omitempty"`
	UnlockHeadID    uint32             `protobuf:"varint,8,opt,name=UnlockHeadID,proto3" json:"UnlockHeadID,omitempty"`
	AwardGroupId    uint32             `protobuf:"varint,9,opt,name=AwardGroupId,proto3" json:"AwardGroupId,omitempty"`
	AGEPath         string             `protobuf:"bytes,11,opt,name=AGEPath,proto3" json:"AGEPath,omitempty"`
	SortValue       uint32             `protobuf:"varint,12,opt,name=SortValue,proto3" json:"SortValue,omitempty"`
	IsNewPlayerLord bool               `protobuf:"varint,13,opt,name=IsNewPlayerLord,proto3" json:"IsNewPlayerLord,omitempty"`
	MeshScale       int32              `protobuf:"varint,14,opt,name=MeshScale,proto3" json:"MeshScale,omitempty"`
	OpenLordPower   bool               `protobuf:"varint,15,opt,name=OpenLordPower,proto3" json:"OpenLordPower,omitempty"`
	GameTypeGroup   COM_GAMETYPE_GROUP `protobuf:"varint,16,opt,name=GameTypeGroup,proto3,enum=ResData.COM_GAMETYPE_GROUP" json:"GameTypeGroup,omitempty"`
	EnableClientAI  bool               `protobuf:"varint,17,opt,name=EnableClientAI,proto3" json:"EnableClientAI,omitempty"`
	OpenLordFiles   bool               `protobuf:"varint,19,opt,name=OpenLordFiles,proto3" json:"OpenLordFiles,omitempty"`
	EnableInfo      *ResEnableInfo     `protobuf:"bytes,20,opt,name=EnableInfo,proto3" json:"EnableInfo,omitempty"`
}

func (x *ResLordInfoConfDataBin) Reset() {
	*x = ResLordInfoConfDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResLordInfoConfDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResLordInfoConfDataBin) ProtoMessage() {}

func (x *ResLordInfoConfDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResLordInfoConfDataBin.ProtoReflect.Descriptor instead.
func (*ResLordInfoConfDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{116}
}

func (x *ResLordInfoConfDataBin) GetLordID() uint32 {
	if x != nil {
		return x.LordID
	}
	return 0
}

func (x *ResLordInfoConfDataBin) GetActorID() uint32 {
	if x != nil {
		return x.ActorID
	}
	return 0
}

func (x *ResLordInfoConfDataBin) GetLordName() string {
	if x != nil {
		return x.LordName
	}
	return ""
}

func (x *ResLordInfoConfDataBin) GetDecompDrop() uint32 {
	if x != nil {
		return x.DecompDrop
	}
	return 0
}

func (x *ResLordInfoConfDataBin) GetActorInfoPath() string {
	if x != nil {
		return x.ActorInfoPath
	}
	return ""
}

func (x *ResLordInfoConfDataBin) GetUnlockHeadID() uint32 {
	if x != nil {
		return x.UnlockHeadID
	}
	return 0
}

func (x *ResLordInfoConfDataBin) GetAwardGroupId() uint32 {
	if x != nil {
		return x.AwardGroupId
	}
	return 0
}

func (x *ResLordInfoConfDataBin) GetAGEPath() string {
	if x != nil {
		return x.AGEPath
	}
	return ""
}

func (x *ResLordInfoConfDataBin) GetSortValue() uint32 {
	if x != nil {
		return x.SortValue
	}
	return 0
}

func (x *ResLordInfoConfDataBin) GetIsNewPlayerLord() bool {
	if x != nil {
		return x.IsNewPlayerLord
	}
	return false
}

func (x *ResLordInfoConfDataBin) GetMeshScale() int32 {
	if x != nil {
		return x.MeshScale
	}
	return 0
}

func (x *ResLordInfoConfDataBin) GetOpenLordPower() bool {
	if x != nil {
		return x.OpenLordPower
	}
	return false
}

func (x *ResLordInfoConfDataBin) GetGameTypeGroup() COM_GAMETYPE_GROUP {
	if x != nil {
		return x.GameTypeGroup
	}
	return COM_GAMETYPE_GROUP_GAMETYPE_GROUP_NULL
}

func (x *ResLordInfoConfDataBin) GetEnableClientAI() bool {
	if x != nil {
		return x.EnableClientAI
	}
	return false
}

func (x *ResLordInfoConfDataBin) GetOpenLordFiles() bool {
	if x != nil {
		return x.OpenLordFiles
	}
	return false
}

func (x *ResLordInfoConfDataBin) GetEnableInfo() *ResEnableInfo {
	if x != nil {
		return x.EnableInfo
	}
	return nil
}

type ResLordSkillDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillID           uint32                    `protobuf:"varint,3,opt,name=SkillID,proto3" json:"SkillID,omitempty"`
	LordID            uint32                    `protobuf:"varint,1,opt,name=LordID,proto3" json:"LordID,omitempty"` // 关联ResLordSkillLevelDataBin.LordID, pk1
	SkillLevel        uint32                    `protobuf:"varint,2,opt,name=SkillLevel,proto3" json:"SkillLevel,omitempty"`
	Icon              string                    `protobuf:"bytes,4,opt,name=Icon,proto3" json:"Icon,omitempty"`
	Name              string                    `protobuf:"bytes,5,opt,name=Name,proto3" json:"Name,omitempty"`
	Desc              string                    `protobuf:"bytes,6,opt,name=Desc,proto3" json:"Desc,omitempty"`
	CostType          uint32                    `protobuf:"varint,7,opt,name=CostType,proto3" json:"CostType,omitempty"`
	CostCount         uint32                    `protobuf:"varint,8,opt,name=CostCount,proto3" json:"CostCount,omitempty"`
	Interaction       LordSkillInteraction      `protobuf:"varint,9,opt,name=Interaction,proto3,enum=ResData.LordSkillInteraction" json:"Interaction,omitempty"`
	InteractionParam  LordSkillInteractionParam `protobuf:"varint,10,opt,name=InteractionParam,proto3,enum=ResData.LordSkillInteractionParam" json:"InteractionParam,omitempty"`
	Cooldown          uint32                    `protobuf:"varint,11,opt,name=Cooldown,proto3" json:"Cooldown,omitempty"`
	LimitsPerRound    uint32                    `protobuf:"varint,12,opt,name=LimitsPerRound,proto3" json:"LimitsPerRound,omitempty"`
	TotalLimits       uint32                    `protobuf:"varint,13,opt,name=TotalLimits,proto3" json:"TotalLimits,omitempty"`
	Phase             uint32                    `protobuf:"varint,14,opt,name=Phase,proto3" json:"Phase,omitempty"`
	BpPath            string                    `protobuf:"bytes,15,opt,name=BpPath,proto3" json:"BpPath,omitempty"`
	SkillInstType     ELordSkillInstType        `protobuf:"varint,16,opt,name=SkillInstType,proto3,enum=ResData.ELordSkillInstType" json:"SkillInstType,omitempty"`
	EnhancedID        uint32                    `protobuf:"varint,17,opt,name=EnhancedID,proto3" json:"EnhancedID,omitempty"` // 关联ResLordSkillLevelDataBin.EnhancedID, pk2
	SkillCostTypeIcon string                    `protobuf:"bytes,18,opt,name=SkillCostTypeIcon,proto3" json:"SkillCostTypeIcon,omitempty"`
	RoundState        RoundStateBit             `protobuf:"varint,19,opt,name=RoundState,proto3,enum=ResData.RoundStateBit" json:"RoundState,omitempty"`
	WorldViewShort    string                    `protobuf:"bytes,20,opt,name=WorldViewShort,proto3" json:"WorldViewShort,omitempty"`
	PhaseParam        ELordSkillPhaseParam      `protobuf:"varint,21,opt,name=PhaseParam,proto3,enum=ResData.ELordSkillPhaseParam" json:"PhaseParam,omitempty"`
}

func (x *ResLordSkillDataBin) Reset() {
	*x = ResLordSkillDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResLordSkillDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResLordSkillDataBin) ProtoMessage() {}

func (x *ResLordSkillDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResLordSkillDataBin.ProtoReflect.Descriptor instead.
func (*ResLordSkillDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{117}
}

func (x *ResLordSkillDataBin) GetSkillID() uint32 {
	if x != nil {
		return x.SkillID
	}
	return 0
}

func (x *ResLordSkillDataBin) GetLordID() uint32 {
	if x != nil {
		return x.LordID
	}
	return 0
}

func (x *ResLordSkillDataBin) GetSkillLevel() uint32 {
	if x != nil {
		return x.SkillLevel
	}
	return 0
}

func (x *ResLordSkillDataBin) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *ResLordSkillDataBin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResLordSkillDataBin) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ResLordSkillDataBin) GetCostType() uint32 {
	if x != nil {
		return x.CostType
	}
	return 0
}

func (x *ResLordSkillDataBin) GetCostCount() uint32 {
	if x != nil {
		return x.CostCount
	}
	return 0
}

func (x *ResLordSkillDataBin) GetInteraction() LordSkillInteraction {
	if x != nil {
		return x.Interaction
	}
	return LordSkillInteraction_LordSkillInteraction_Passive
}

func (x *ResLordSkillDataBin) GetInteractionParam() LordSkillInteractionParam {
	if x != nil {
		return x.InteractionParam
	}
	return LordSkillInteractionParam_LordSkillInteractionParam_None
}

func (x *ResLordSkillDataBin) GetCooldown() uint32 {
	if x != nil {
		return x.Cooldown
	}
	return 0
}

func (x *ResLordSkillDataBin) GetLimitsPerRound() uint32 {
	if x != nil {
		return x.LimitsPerRound
	}
	return 0
}

func (x *ResLordSkillDataBin) GetTotalLimits() uint32 {
	if x != nil {
		return x.TotalLimits
	}
	return 0
}

func (x *ResLordSkillDataBin) GetPhase() uint32 {
	if x != nil {
		return x.Phase
	}
	return 0
}

func (x *ResLordSkillDataBin) GetBpPath() string {
	if x != nil {
		return x.BpPath
	}
	return ""
}

func (x *ResLordSkillDataBin) GetSkillInstType() ELordSkillInstType {
	if x != nil {
		return x.SkillInstType
	}
	return ELordSkillInstType_LORD_SKILL_INST_TYPE_NOT_DEFINE
}

func (x *ResLordSkillDataBin) GetEnhancedID() uint32 {
	if x != nil {
		return x.EnhancedID
	}
	return 0
}

func (x *ResLordSkillDataBin) GetSkillCostTypeIcon() string {
	if x != nil {
		return x.SkillCostTypeIcon
	}
	return ""
}

func (x *ResLordSkillDataBin) GetRoundState() RoundStateBit {
	if x != nil {
		return x.RoundState
	}
	return RoundStateBit_ROUND_STATE_BIT_NULL
}

func (x *ResLordSkillDataBin) GetWorldViewShort() string {
	if x != nil {
		return x.WorldViewShort
	}
	return ""
}

func (x *ResLordSkillDataBin) GetPhaseParam() ELordSkillPhaseParam {
	if x != nil {
		return x.PhaseParam
	}
	return ELordSkillPhaseParam_LORD_SKILL_PHASE_PARAM_NULL
}

type ResLordSkillLevelExpGatherConditionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConditionType   uint32   `protobuf:"varint,1,opt,name=ConditionType,proto3" json:"ConditionType,omitempty"`
	ConditionParams []uint32 `protobuf:"varint,2,rep,packed,name=ConditionParams,proto3" json:"ConditionParams,omitempty"`
	GetExp          uint32   `protobuf:"varint,3,opt,name=GetExp,proto3" json:"GetExp,omitempty"`
}

func (x *ResLordSkillLevelExpGatherConditionInfo) Reset() {
	*x = ResLordSkillLevelExpGatherConditionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResLordSkillLevelExpGatherConditionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResLordSkillLevelExpGatherConditionInfo) ProtoMessage() {}

func (x *ResLordSkillLevelExpGatherConditionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResLordSkillLevelExpGatherConditionInfo.ProtoReflect.Descriptor instead.
func (*ResLordSkillLevelExpGatherConditionInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{118}
}

func (x *ResLordSkillLevelExpGatherConditionInfo) GetConditionType() uint32 {
	if x != nil {
		return x.ConditionType
	}
	return 0
}

func (x *ResLordSkillLevelExpGatherConditionInfo) GetConditionParams() []uint32 {
	if x != nil {
		return x.ConditionParams
	}
	return nil
}

func (x *ResLordSkillLevelExpGatherConditionInfo) GetGetExp() uint32 {
	if x != nil {
		return x.GetExp
	}
	return 0
}

type ResLordSkillLevelDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LordID                  uint32                                     `protobuf:"varint,1,opt,name=LordID,proto3" json:"LordID,omitempty"`         // 关联ResLordSkillDataBin.LordID, pk2
	EnhancedID              uint32                                     `protobuf:"varint,2,opt,name=EnhancedID,proto3" json:"EnhancedID,omitempty"` // 关联ResLordSkillDataBin.EnhancedID, pk2
	MaxLevel                uint32                                     `protobuf:"varint,3,opt,name=MaxLevel,proto3" json:"MaxLevel,omitempty"`
	LevelUpExp              []uint32                                   `protobuf:"varint,4,rep,packed,name=LevelUpExp,proto3" json:"LevelUpExp,omitempty"`
	ExpGatherConditionInfos []*ResLordSkillLevelExpGatherConditionInfo `protobuf:"bytes,5,rep,name=ExpGatherConditionInfos,proto3" json:"ExpGatherConditionInfos,omitempty"`
	LevelDesc               []string                                   `protobuf:"bytes,6,rep,name=LevelDesc,proto3" json:"LevelDesc,omitempty"`
}

func (x *ResLordSkillLevelDataBin) Reset() {
	*x = ResLordSkillLevelDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResLordSkillLevelDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResLordSkillLevelDataBin) ProtoMessage() {}

func (x *ResLordSkillLevelDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResLordSkillLevelDataBin.ProtoReflect.Descriptor instead.
func (*ResLordSkillLevelDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{119}
}

func (x *ResLordSkillLevelDataBin) GetLordID() uint32 {
	if x != nil {
		return x.LordID
	}
	return 0
}

func (x *ResLordSkillLevelDataBin) GetEnhancedID() uint32 {
	if x != nil {
		return x.EnhancedID
	}
	return 0
}

func (x *ResLordSkillLevelDataBin) GetMaxLevel() uint32 {
	if x != nil {
		return x.MaxLevel
	}
	return 0
}

func (x *ResLordSkillLevelDataBin) GetLevelUpExp() []uint32 {
	if x != nil {
		return x.LevelUpExp
	}
	return nil
}

func (x *ResLordSkillLevelDataBin) GetExpGatherConditionInfos() []*ResLordSkillLevelExpGatherConditionInfo {
	if x != nil {
		return x.ExpGatherConditionInfos
	}
	return nil
}

func (x *ResLordSkillLevelDataBin) GetLevelDesc() []string {
	if x != nil {
		return x.LevelDesc
	}
	return nil
}

type ResLordSkinDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkinID                    uint32         `protobuf:"varint,1,opt,name=SkinID,proto3" json:"SkinID,omitempty"`
	LordID                    uint32         `protobuf:"varint,2,opt,name=LordID,proto3" json:"LordID,omitempty"`
	DecompDrop                uint32         `protobuf:"varint,3,opt,name=DecompDrop,proto3" json:"DecompDrop,omitempty"`
	SkinIndex                 uint32         `protobuf:"varint,4,opt,name=SkinIndex,proto3" json:"SkinIndex,omitempty"`
	Icon                      string         `protobuf:"bytes,6,opt,name=Icon,proto3" json:"Icon,omitempty"`
	Portrait                  string         `protobuf:"bytes,7,opt,name=Portrait,proto3" json:"Portrait,omitempty"`
	ItemQuality               int32          `protobuf:"varint,8,opt,name=ItemQuality,proto3" json:"ItemQuality,omitempty"`
	ZLSkin                    string         `protobuf:"bytes,9,opt,name=ZLSkin,proto3" json:"ZLSkin,omitempty"`
	SmallSkin                 string         `protobuf:"bytes,10,opt,name=SmallSkin,proto3" json:"SmallSkin,omitempty"`
	BigSkin                   string         `protobuf:"bytes,11,opt,name=BigSkin,proto3" json:"BigSkin,omitempty"`
	Name                      string         `protobuf:"bytes,12,opt,name=Name,proto3" json:"Name,omitempty"`
	NickName                  string         `protobuf:"bytes,13,opt,name=NickName,proto3" json:"NickName,omitempty"`
	Desc                      string         `protobuf:"bytes,14,opt,name=Desc,proto3" json:"Desc,omitempty"`
	SkinType                  string         `protobuf:"bytes,15,opt,name=SkinType,proto3" json:"SkinType,omitempty"`
	Order                     int32          `protobuf:"varint,16,opt,name=Order,proto3" json:"Order,omitempty"`
	ShowBGPath                string         `protobuf:"bytes,17,opt,name=ShowBGPath,proto3" json:"ShowBGPath,omitempty"`
	ShowBGLightPath           string         `protobuf:"bytes,18,opt,name=ShowBGLightPath,proto3" json:"ShowBGLightPath,omitempty"`
	LordInforShowX            float32        `protobuf:"fixed32,19,opt,name=LordInforShowX,proto3" json:"LordInforShowX,omitempty"`
	LordInforShowY            float32        `protobuf:"fixed32,20,opt,name=LordInforShowY,proto3" json:"LordInforShowY,omitempty"`
	LordInforShowZ            float32        `protobuf:"fixed32,21,opt,name=LordInforShowZ,proto3" json:"LordInforShowZ,omitempty"`
	LordInforShowHightTimeAge string         `protobuf:"bytes,22,opt,name=LordInforShowHightTimeAge,proto3" json:"LordInforShowHightTimeAge,omitempty"`
	LordInforShowBornAge      string         `protobuf:"bytes,23,opt,name=LordInforShowBornAge,proto3" json:"LordInforShowBornAge,omitempty"`
	WatchingHeadIconPath      string         `protobuf:"bytes,24,opt,name=WatchingHeadIconPath,proto3" json:"WatchingHeadIconPath,omitempty"`
	SkinQuality               string         `protobuf:"bytes,32,opt,name=SkinQuality,proto3" json:"SkinQuality,omitempty"`
	GetWay                    []int32        `protobuf:"varint,33,rep,packed,name=GetWay,proto3" json:"GetWay,omitempty"`
	LordChooseIcon            string         `protobuf:"bytes,35,opt,name=LordChooseIcon,proto3" json:"LordChooseIcon,omitempty"`
	LordCutsceneAge           string         `protobuf:"bytes,39,opt,name=LordCutsceneAge,proto3" json:"LordCutsceneAge,omitempty"`
	LoadLordIcon              string         `protobuf:"bytes,40,opt,name=LoadLordIcon,proto3" json:"LoadLordIcon,omitempty"`
	JumpSystemParam           string         `protobuf:"bytes,41,opt,name=JumpSystemParam,proto3" json:"JumpSystemParam,omitempty"`
	Speed                     uint32         `protobuf:"varint,42,opt,name=Speed,proto3" json:"Speed,omitempty"`
	PlayRunStop               uint32         `protobuf:"varint,43,opt,name=PlayRunStop,proto3" json:"PlayRunStop,omitempty"`
	StartDragAge              string         `protobuf:"bytes,44,opt,name=StartDragAge,proto3" json:"StartDragAge,omitempty"`
	EndDragAge                string         `protobuf:"bytes,45,opt,name=EndDragAge,proto3" json:"EndDragAge,omitempty"`
	ScarceLevel               uint32         `protobuf:"varint,46,opt,name=ScarceLevel,proto3" json:"ScarceLevel,omitempty"`
	LordIdleShowAge           string         `protobuf:"bytes,47,opt,name=LordIdleShowAge,proto3" json:"LordIdleShowAge,omitempty"`
	PosterMiniIcon            string         `protobuf:"bytes,48,opt,name=PosterMiniIcon,proto3" json:"PosterMiniIcon,omitempty"`
	MoveChessAge              string         `protobuf:"bytes,51,opt,name=MoveChessAge,proto3" json:"MoveChessAge,omitempty"`
	EnableInfo                *ResEnableInfo `protobuf:"bytes,52,opt,name=EnableInfo,proto3" json:"EnableInfo,omitempty"`
	ChangeProfilePanel        bool           `protobuf:"varint,53,opt,name=ChangeProfilePanel,proto3" json:"ChangeProfilePanel,omitempty"`
}

func (x *ResLordSkinDataBin) Reset() {
	*x = ResLordSkinDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResLordSkinDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResLordSkinDataBin) ProtoMessage() {}

func (x *ResLordSkinDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResLordSkinDataBin.ProtoReflect.Descriptor instead.
func (*ResLordSkinDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{120}
}

func (x *ResLordSkinDataBin) GetSkinID() uint32 {
	if x != nil {
		return x.SkinID
	}
	return 0
}

func (x *ResLordSkinDataBin) GetLordID() uint32 {
	if x != nil {
		return x.LordID
	}
	return 0
}

func (x *ResLordSkinDataBin) GetDecompDrop() uint32 {
	if x != nil {
		return x.DecompDrop
	}
	return 0
}

func (x *ResLordSkinDataBin) GetSkinIndex() uint32 {
	if x != nil {
		return x.SkinIndex
	}
	return 0
}

func (x *ResLordSkinDataBin) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *ResLordSkinDataBin) GetPortrait() string {
	if x != nil {
		return x.Portrait
	}
	return ""
}

func (x *ResLordSkinDataBin) GetItemQuality() int32 {
	if x != nil {
		return x.ItemQuality
	}
	return 0
}

func (x *ResLordSkinDataBin) GetZLSkin() string {
	if x != nil {
		return x.ZLSkin
	}
	return ""
}

func (x *ResLordSkinDataBin) GetSmallSkin() string {
	if x != nil {
		return x.SmallSkin
	}
	return ""
}

func (x *ResLordSkinDataBin) GetBigSkin() string {
	if x != nil {
		return x.BigSkin
	}
	return ""
}

func (x *ResLordSkinDataBin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResLordSkinDataBin) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *ResLordSkinDataBin) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ResLordSkinDataBin) GetSkinType() string {
	if x != nil {
		return x.SkinType
	}
	return ""
}

func (x *ResLordSkinDataBin) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *ResLordSkinDataBin) GetShowBGPath() string {
	if x != nil {
		return x.ShowBGPath
	}
	return ""
}

func (x *ResLordSkinDataBin) GetShowBGLightPath() string {
	if x != nil {
		return x.ShowBGLightPath
	}
	return ""
}

func (x *ResLordSkinDataBin) GetLordInforShowX() float32 {
	if x != nil {
		return x.LordInforShowX
	}
	return 0
}

func (x *ResLordSkinDataBin) GetLordInforShowY() float32 {
	if x != nil {
		return x.LordInforShowY
	}
	return 0
}

func (x *ResLordSkinDataBin) GetLordInforShowZ() float32 {
	if x != nil {
		return x.LordInforShowZ
	}
	return 0
}

func (x *ResLordSkinDataBin) GetLordInforShowHightTimeAge() string {
	if x != nil {
		return x.LordInforShowHightTimeAge
	}
	return ""
}

func (x *ResLordSkinDataBin) GetLordInforShowBornAge() string {
	if x != nil {
		return x.LordInforShowBornAge
	}
	return ""
}

func (x *ResLordSkinDataBin) GetWatchingHeadIconPath() string {
	if x != nil {
		return x.WatchingHeadIconPath
	}
	return ""
}

func (x *ResLordSkinDataBin) GetSkinQuality() string {
	if x != nil {
		return x.SkinQuality
	}
	return ""
}

func (x *ResLordSkinDataBin) GetGetWay() []int32 {
	if x != nil {
		return x.GetWay
	}
	return nil
}

func (x *ResLordSkinDataBin) GetLordChooseIcon() string {
	if x != nil {
		return x.LordChooseIcon
	}
	return ""
}

func (x *ResLordSkinDataBin) GetLordCutsceneAge() string {
	if x != nil {
		return x.LordCutsceneAge
	}
	return ""
}

func (x *ResLordSkinDataBin) GetLoadLordIcon() string {
	if x != nil {
		return x.LoadLordIcon
	}
	return ""
}

func (x *ResLordSkinDataBin) GetJumpSystemParam() string {
	if x != nil {
		return x.JumpSystemParam
	}
	return ""
}

func (x *ResLordSkinDataBin) GetSpeed() uint32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *ResLordSkinDataBin) GetPlayRunStop() uint32 {
	if x != nil {
		return x.PlayRunStop
	}
	return 0
}

func (x *ResLordSkinDataBin) GetStartDragAge() string {
	if x != nil {
		return x.StartDragAge
	}
	return ""
}

func (x *ResLordSkinDataBin) GetEndDragAge() string {
	if x != nil {
		return x.EndDragAge
	}
	return ""
}

func (x *ResLordSkinDataBin) GetScarceLevel() uint32 {
	if x != nil {
		return x.ScarceLevel
	}
	return 0
}

func (x *ResLordSkinDataBin) GetLordIdleShowAge() string {
	if x != nil {
		return x.LordIdleShowAge
	}
	return ""
}

func (x *ResLordSkinDataBin) GetPosterMiniIcon() string {
	if x != nil {
		return x.PosterMiniIcon
	}
	return ""
}

func (x *ResLordSkinDataBin) GetMoveChessAge() string {
	if x != nil {
		return x.MoveChessAge
	}
	return ""
}

func (x *ResLordSkinDataBin) GetEnableInfo() *ResEnableInfo {
	if x != nil {
		return x.EnableInfo
	}
	return nil
}

func (x *ResLordSkinDataBin) GetChangeProfilePanel() bool {
	if x != nil {
		return x.ChangeProfilePanel
	}
	return false
}

type ResLordDetailsItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`
	Desc  string `protobuf:"bytes,2,opt,name=Desc,proto3" json:"Desc,omitempty"`
}

func (x *ResLordDetailsItem) Reset() {
	*x = ResLordDetailsItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResLordDetailsItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResLordDetailsItem) ProtoMessage() {}

func (x *ResLordDetailsItem) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResLordDetailsItem.ProtoReflect.Descriptor instead.
func (*ResLordDetailsItem) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{121}
}

func (x *ResLordDetailsItem) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResLordDetailsItem) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type ResLordFilesItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File            string       `protobuf:"bytes,1,opt,name=File,proto3" json:"File,omitempty"`
	UnlockCondition string       `protobuf:"bytes,2,opt,name=UnlockCondition,proto3" json:"UnlockCondition,omitempty"`
	Name            string       `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	UnlockCond      *ResCondInfo `protobuf:"bytes,4,opt,name=UnlockCond,proto3" json:"UnlockCond,omitempty"`
	AwardDropID     uint32       `protobuf:"varint,5,opt,name=AwardDropID,proto3" json:"AwardDropID,omitempty"`
}

func (x *ResLordFilesItem) Reset() {
	*x = ResLordFilesItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResLordFilesItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResLordFilesItem) ProtoMessage() {}

func (x *ResLordFilesItem) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResLordFilesItem.ProtoReflect.Descriptor instead.
func (*ResLordFilesItem) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{122}
}

func (x *ResLordFilesItem) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *ResLordFilesItem) GetUnlockCondition() string {
	if x != nil {
		return x.UnlockCondition
	}
	return ""
}

func (x *ResLordFilesItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResLordFilesItem) GetUnlockCond() *ResCondInfo {
	if x != nil {
		return x.UnlockCond
	}
	return nil
}

func (x *ResLordFilesItem) GetAwardDropID() uint32 {
	if x != nil {
		return x.AwardDropID
	}
	return 0
}

type ResLordFileDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LordID              uint32                `protobuf:"varint,1,opt,name=LordID,proto3" json:"LordID,omitempty"`
	SkinID              uint32                `protobuf:"varint,2,opt,name=SkinID,proto3" json:"SkinID,omitempty"`
	Name                string                `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	ResLordDetailsItems []*ResLordDetailsItem `protobuf:"bytes,4,rep,name=ResLordDetailsItems,proto3" json:"ResLordDetailsItems,omitempty"`
	ResLordFilesItems   []*ResLordFilesItem   `protobuf:"bytes,5,rep,name=ResLordFilesItems,proto3" json:"ResLordFilesItems,omitempty"`
}

func (x *ResLordFileDataBin) Reset() {
	*x = ResLordFileDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResLordFileDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResLordFileDataBin) ProtoMessage() {}

func (x *ResLordFileDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResLordFileDataBin.ProtoReflect.Descriptor instead.
func (*ResLordFileDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{123}
}

func (x *ResLordFileDataBin) GetLordID() uint32 {
	if x != nil {
		return x.LordID
	}
	return 0
}

func (x *ResLordFileDataBin) GetSkinID() uint32 {
	if x != nil {
		return x.SkinID
	}
	return 0
}

func (x *ResLordFileDataBin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResLordFileDataBin) GetResLordDetailsItems() []*ResLordDetailsItem {
	if x != nil {
		return x.ResLordDetailsItems
	}
	return nil
}

func (x *ResLordFileDataBin) GetResLordFilesItems() []*ResLordFilesItem {
	if x != nil {
		return x.ResLordFilesItems
	}
	return nil
}

type STLordQuestionAndAnswerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Question string `protobuf:"bytes,1,opt,name=Question,proto3" json:"Question,omitempty"`
	Answer   string `protobuf:"bytes,2,opt,name=Answer,proto3" json:"Answer,omitempty"`
}

func (x *STLordQuestionAndAnswerInfo) Reset() {
	*x = STLordQuestionAndAnswerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *STLordQuestionAndAnswerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*STLordQuestionAndAnswerInfo) ProtoMessage() {}

func (x *STLordQuestionAndAnswerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use STLordQuestionAndAnswerInfo.ProtoReflect.Descriptor instead.
func (*STLordQuestionAndAnswerInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{124}
}

func (x *STLordQuestionAndAnswerInfo) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *STLordQuestionAndAnswerInfo) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

type ResLordQuestionAndAnswerDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LordID                  uint32                         `protobuf:"varint,1,opt,name=LordID,proto3" json:"LordID,omitempty"`
	SkinID                  uint32                         `protobuf:"varint,2,opt,name=SkinID,proto3" json:"SkinID,omitempty"`
	Name                    string                         `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	OpeningRemarks          string                         `protobuf:"bytes,4,opt,name=OpeningRemarks,proto3" json:"OpeningRemarks,omitempty"`
	AskQuestionsCost        *ResGameItem                   `protobuf:"bytes,5,opt,name=AskQuestionsCost,proto3" json:"AskQuestionsCost,omitempty"`
	AskQuestionsAwardDropID uint32                         `protobuf:"varint,6,opt,name=AskQuestionsAwardDropID,proto3" json:"AskQuestionsAwardDropID,omitempty"`
	RefreshQuestionsCost    *ResGameItem                   `protobuf:"bytes,7,opt,name=RefreshQuestionsCost,proto3" json:"RefreshQuestionsCost,omitempty"`
	ShowQuestionNum         uint32                         `protobuf:"varint,8,opt,name=ShowQuestionNum,proto3" json:"ShowQuestionNum,omitempty"`
	QuestionsProvidedNum    uint32                         `protobuf:"varint,9,opt,name=QuestionsProvidedNum,proto3" json:"QuestionsProvidedNum,omitempty"`
	AllQuestionNum          uint32                         `protobuf:"varint,10,opt,name=AllQuestionNum,proto3" json:"AllQuestionNum,omitempty"`
	QAInfo                  []*STLordQuestionAndAnswerInfo `protobuf:"bytes,11,rep,name=QAInfo,proto3" json:"QAInfo,omitempty"`
	InitialConclusion       string                         `protobuf:"bytes,12,opt,name=InitialConclusion,proto3" json:"InitialConclusion,omitempty"`
	FinishedConclusion      string                         `protobuf:"bytes,13,opt,name=FinishedConclusion,proto3" json:"FinishedConclusion,omitempty"`
	ConclusionAwardDropID   uint32                         `protobuf:"varint,14,opt,name=ConclusionAwardDropID,proto3" json:"ConclusionAwardDropID,omitempty"`
}

func (x *ResLordQuestionAndAnswerDataBin) Reset() {
	*x = ResLordQuestionAndAnswerDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResLordQuestionAndAnswerDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResLordQuestionAndAnswerDataBin) ProtoMessage() {}

func (x *ResLordQuestionAndAnswerDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResLordQuestionAndAnswerDataBin.ProtoReflect.Descriptor instead.
func (*ResLordQuestionAndAnswerDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{125}
}

func (x *ResLordQuestionAndAnswerDataBin) GetLordID() uint32 {
	if x != nil {
		return x.LordID
	}
	return 0
}

func (x *ResLordQuestionAndAnswerDataBin) GetSkinID() uint32 {
	if x != nil {
		return x.SkinID
	}
	return 0
}

func (x *ResLordQuestionAndAnswerDataBin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResLordQuestionAndAnswerDataBin) GetOpeningRemarks() string {
	if x != nil {
		return x.OpeningRemarks
	}
	return ""
}

func (x *ResLordQuestionAndAnswerDataBin) GetAskQuestionsCost() *ResGameItem {
	if x != nil {
		return x.AskQuestionsCost
	}
	return nil
}

func (x *ResLordQuestionAndAnswerDataBin) GetAskQuestionsAwardDropID() uint32 {
	if x != nil {
		return x.AskQuestionsAwardDropID
	}
	return 0
}

func (x *ResLordQuestionAndAnswerDataBin) GetRefreshQuestionsCost() *ResGameItem {
	if x != nil {
		return x.RefreshQuestionsCost
	}
	return nil
}

func (x *ResLordQuestionAndAnswerDataBin) GetShowQuestionNum() uint32 {
	if x != nil {
		return x.ShowQuestionNum
	}
	return 0
}

func (x *ResLordQuestionAndAnswerDataBin) GetQuestionsProvidedNum() uint32 {
	if x != nil {
		return x.QuestionsProvidedNum
	}
	return 0
}

func (x *ResLordQuestionAndAnswerDataBin) GetAllQuestionNum() uint32 {
	if x != nil {
		return x.AllQuestionNum
	}
	return 0
}

func (x *ResLordQuestionAndAnswerDataBin) GetQAInfo() []*STLordQuestionAndAnswerInfo {
	if x != nil {
		return x.QAInfo
	}
	return nil
}

func (x *ResLordQuestionAndAnswerDataBin) GetInitialConclusion() string {
	if x != nil {
		return x.InitialConclusion
	}
	return ""
}

func (x *ResLordQuestionAndAnswerDataBin) GetFinishedConclusion() string {
	if x != nil {
		return x.FinishedConclusion
	}
	return ""
}

func (x *ResLordQuestionAndAnswerDataBin) GetConclusionAwardDropID() uint32 {
	if x != nil {
		return x.ConclusionAwardDropID
	}
	return 0
}

type ResDT_LordOutgameAudio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Show  string `protobuf:"bytes,1,opt,name=Show,proto3" json:"Show,omitempty"`
	Touch string `protobuf:"bytes,2,opt,name=Touch,proto3" json:"Touch,omitempty"`
	Story string `protobuf:"bytes,3,opt,name=Story,proto3" json:"Story,omitempty"`
}

func (x *ResDT_LordOutgameAudio) Reset() {
	*x = ResDT_LordOutgameAudio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_LordOutgameAudio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_LordOutgameAudio) ProtoMessage() {}

func (x *ResDT_LordOutgameAudio) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_LordOutgameAudio.ProtoReflect.Descriptor instead.
func (*ResDT_LordOutgameAudio) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{126}
}

func (x *ResDT_LordOutgameAudio) GetShow() string {
	if x != nil {
		return x.Show
	}
	return ""
}

func (x *ResDT_LordOutgameAudio) GetTouch() string {
	if x != nil {
		return x.Touch
	}
	return ""
}

func (x *ResDT_LordOutgameAudio) GetStory() string {
	if x != nil {
		return x.Story
	}
	return ""
}

type ResDT_LordIngameAudio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankName                      string `protobuf:"bytes,1,opt,name=BankName,proto3" json:"BankName,omitempty"`
	LordChoose                    string `protobuf:"bytes,2,opt,name=LordChoose,proto3" json:"LordChoose,omitempty"`
	GameStart                     string `protobuf:"bytes,3,opt,name=GameStart,proto3" json:"GameStart,omitempty"`
	Attack                        string `protobuf:"bytes,4,opt,name=Attack,proto3" json:"Attack,omitempty"`
	AttackVO1P                    string `protobuf:"bytes,5,opt,name=AttackVO1p,proto3" json:"AttackVO1p,omitempty"`
	Hit                           string `protobuf:"bytes,6,opt,name=Hit,proto3" json:"Hit,omitempty"`
	HitVO1P                       string `protobuf:"bytes,7,opt,name=HitVO1p,proto3" json:"HitVO1p,omitempty"`
	AttackVO3P                    string `protobuf:"bytes,8,opt,name=AttackVO3p,proto3" json:"AttackVO3p,omitempty"`
	HitVO3P                       string `protobuf:"bytes,9,opt,name=HitVO3p,proto3" json:"HitVO3p,omitempty"`
	Switch                        string `protobuf:"bytes,10,opt,name=Switch,proto3" json:"Switch,omitempty"`
	ContinousWin                  string `protobuf:"bytes,11,opt,name=ContinousWin,proto3" json:"ContinousWin,omitempty"`
	ContinouseLose                string `protobuf:"bytes,12,opt,name=ContinouseLose,proto3" json:"ContinouseLose,omitempty"`
	WinAfterContinouseLose        string `protobuf:"bytes,13,opt,name=WinAfterContinouseLose,proto3" json:"WinAfterContinouseLose,omitempty"`
	LoseAfterContinouseWin        string `protobuf:"bytes,14,opt,name=LoseAfterContinouseWin,proto3" json:"LoseAfterContinouseWin,omitempty"`
	TerminateOpponentContinousWin string `protobuf:"bytes,15,opt,name=TerminateOpponentContinousWin,proto3" json:"TerminateOpponentContinousWin,omitempty"`
	KillOpponent                  string `protobuf:"bytes,16,opt,name=KillOpponent,proto3" json:"KillOpponent,omitempty"`
	GetSpecialTalent              string `protobuf:"bytes,17,opt,name=GetSpecialTalent,proto3" json:"GetSpecialTalent,omitempty"`
	GetTopJiBan                   string `protobuf:"bytes,18,opt,name=GetTopJiBan,proto3" json:"GetTopJiBan,omitempty"`
}

func (x *ResDT_LordIngameAudio) Reset() {
	*x = ResDT_LordIngameAudio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_LordIngameAudio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_LordIngameAudio) ProtoMessage() {}

func (x *ResDT_LordIngameAudio) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_LordIngameAudio.ProtoReflect.Descriptor instead.
func (*ResDT_LordIngameAudio) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{127}
}

func (x *ResDT_LordIngameAudio) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *ResDT_LordIngameAudio) GetLordChoose() string {
	if x != nil {
		return x.LordChoose
	}
	return ""
}

func (x *ResDT_LordIngameAudio) GetGameStart() string {
	if x != nil {
		return x.GameStart
	}
	return ""
}

func (x *ResDT_LordIngameAudio) GetAttack() string {
	if x != nil {
		return x.Attack
	}
	return ""
}

func (x *ResDT_LordIngameAudio) GetAttackVO1P() string {
	if x != nil {
		return x.AttackVO1P
	}
	return ""
}

func (x *ResDT_LordIngameAudio) GetHit() string {
	if x != nil {
		return x.Hit
	}
	return ""
}

func (x *ResDT_LordIngameAudio) GetHitVO1P() string {
	if x != nil {
		return x.HitVO1P
	}
	return ""
}

func (x *ResDT_LordIngameAudio) GetAttackVO3P() string {
	if x != nil {
		return x.AttackVO3P
	}
	return ""
}

func (x *ResDT_LordIngameAudio) GetHitVO3P() string {
	if x != nil {
		return x.HitVO3P
	}
	return ""
}

func (x *ResDT_LordIngameAudio) GetSwitch() string {
	if x != nil {
		return x.Switch
	}
	return ""
}

func (x *ResDT_LordIngameAudio) GetContinousWin() string {
	if x != nil {
		return x.ContinousWin
	}
	return ""
}

func (x *ResDT_LordIngameAudio) GetContinouseLose() string {
	if x != nil {
		return x.ContinouseLose
	}
	return ""
}

func (x *ResDT_LordIngameAudio) GetWinAfterContinouseLose() string {
	if x != nil {
		return x.WinAfterContinouseLose
	}
	return ""
}

func (x *ResDT_LordIngameAudio) GetLoseAfterContinouseWin() string {
	if x != nil {
		return x.LoseAfterContinouseWin
	}
	return ""
}

func (x *ResDT_LordIngameAudio) GetTerminateOpponentContinousWin() string {
	if x != nil {
		return x.TerminateOpponentContinousWin
	}
	return ""
}

func (x *ResDT_LordIngameAudio) GetKillOpponent() string {
	if x != nil {
		return x.KillOpponent
	}
	return ""
}

func (x *ResDT_LordIngameAudio) GetGetSpecialTalent() string {
	if x != nil {
		return x.GetSpecialTalent
	}
	return ""
}

func (x *ResDT_LordIngameAudio) GetGetTopJiBan() string {
	if x != nil {
		return x.GetTopJiBan
	}
	return ""
}

type ResLordAudioCfgDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LordID                    uint32                  `protobuf:"varint,1,opt,name=LordID,proto3" json:"LordID,omitempty"`
	OutgameAudio              *ResDT_LordOutgameAudio `protobuf:"bytes,2,opt,name=OutgameAudio,proto3" json:"OutgameAudio,omitempty"`
	IngameAudio               *ResDT_LordIngameAudio  `protobuf:"bytes,3,opt,name=IngameAudio,proto3" json:"IngameAudio,omitempty"`
	SkinIndex                 uint32                  `protobuf:"varint,4,opt,name=SkinIndex,proto3" json:"SkinIndex,omitempty"`
	MatchResultFirstFullHp    string                  `protobuf:"bytes,5,opt,name=MatchResultFirstFullHp,proto3" json:"MatchResultFirstFullHp,omitempty"`
	MatchResultFirstLowHP     string                  `protobuf:"bytes,6,opt,name=MatchResultFirstLowHP,proto3" json:"MatchResultFirstLowHP,omitempty"`
	MatchResultFirstNormal    string                  `protobuf:"bytes,7,opt,name=MatchResultFirstNormal,proto3" json:"MatchResultFirstNormal,omitempty"`
	MatchResultSecondToFourth string                  `protobuf:"bytes,8,opt,name=MatchResultSecondToFourth,proto3" json:"MatchResultSecondToFourth,omitempty"`
	MatchResultFourthToEight  string                  `protobuf:"bytes,9,opt,name=MatchResultFourthToEight,proto3" json:"MatchResultFourthToEight,omitempty"`
}

func (x *ResLordAudioCfgDataBin) Reset() {
	*x = ResLordAudioCfgDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResLordAudioCfgDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResLordAudioCfgDataBin) ProtoMessage() {}

func (x *ResLordAudioCfgDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResLordAudioCfgDataBin.ProtoReflect.Descriptor instead.
func (*ResLordAudioCfgDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{128}
}

func (x *ResLordAudioCfgDataBin) GetLordID() uint32 {
	if x != nil {
		return x.LordID
	}
	return 0
}

func (x *ResLordAudioCfgDataBin) GetOutgameAudio() *ResDT_LordOutgameAudio {
	if x != nil {
		return x.OutgameAudio
	}
	return nil
}

func (x *ResLordAudioCfgDataBin) GetIngameAudio() *ResDT_LordIngameAudio {
	if x != nil {
		return x.IngameAudio
	}
	return nil
}

func (x *ResLordAudioCfgDataBin) GetSkinIndex() uint32 {
	if x != nil {
		return x.SkinIndex
	}
	return 0
}

func (x *ResLordAudioCfgDataBin) GetMatchResultFirstFullHp() string {
	if x != nil {
		return x.MatchResultFirstFullHp
	}
	return ""
}

func (x *ResLordAudioCfgDataBin) GetMatchResultFirstLowHP() string {
	if x != nil {
		return x.MatchResultFirstLowHP
	}
	return ""
}

func (x *ResLordAudioCfgDataBin) GetMatchResultFirstNormal() string {
	if x != nil {
		return x.MatchResultFirstNormal
	}
	return ""
}

func (x *ResLordAudioCfgDataBin) GetMatchResultSecondToFourth() string {
	if x != nil {
		return x.MatchResultSecondToFourth
	}
	return ""
}

func (x *ResLordAudioCfgDataBin) GetMatchResultFourthToEight() string {
	if x != nil {
		return x.MatchResultFourthToEight
	}
	return ""
}

type ResLordJiBanAudioCfgDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LordAID    uint32 `protobuf:"varint,1,opt,name=LordAID,proto3" json:"LordAID,omitempty"`
	SkinAIndex uint32 `protobuf:"varint,2,opt,name=SkinAIndex,proto3" json:"SkinAIndex,omitempty"`
	LordBID    uint32 `protobuf:"varint,3,opt,name=LordBID,proto3" json:"LordBID,omitempty"`
	SkinBIndex uint32 `protobuf:"varint,4,opt,name=SkinBIndex,proto3" json:"SkinBIndex,omitempty"`
	JiBanType  uint32 `protobuf:"varint,5,opt,name=JiBanType,proto3" json:"JiBanType,omitempty"`
	VoiceA     string `protobuf:"bytes,6,opt,name=VoiceA,proto3" json:"VoiceA,omitempty"`
	VoiceB     string `protobuf:"bytes,7,opt,name=VoiceB,proto3" json:"VoiceB,omitempty"`
}

func (x *ResLordJiBanAudioCfgDataBin) Reset() {
	*x = ResLordJiBanAudioCfgDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResLordJiBanAudioCfgDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResLordJiBanAudioCfgDataBin) ProtoMessage() {}

func (x *ResLordJiBanAudioCfgDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResLordJiBanAudioCfgDataBin.ProtoReflect.Descriptor instead.
func (*ResLordJiBanAudioCfgDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{129}
}

func (x *ResLordJiBanAudioCfgDataBin) GetLordAID() uint32 {
	if x != nil {
		return x.LordAID
	}
	return 0
}

func (x *ResLordJiBanAudioCfgDataBin) GetSkinAIndex() uint32 {
	if x != nil {
		return x.SkinAIndex
	}
	return 0
}

func (x *ResLordJiBanAudioCfgDataBin) GetLordBID() uint32 {
	if x != nil {
		return x.LordBID
	}
	return 0
}

func (x *ResLordJiBanAudioCfgDataBin) GetSkinBIndex() uint32 {
	if x != nil {
		return x.SkinBIndex
	}
	return 0
}

func (x *ResLordJiBanAudioCfgDataBin) GetJiBanType() uint32 {
	if x != nil {
		return x.JiBanType
	}
	return 0
}

func (x *ResLordJiBanAudioCfgDataBin) GetVoiceA() string {
	if x != nil {
		return x.VoiceA
	}
	return ""
}

func (x *ResLordJiBanAudioCfgDataBin) GetVoiceB() string {
	if x != nil {
		return x.VoiceB
	}
	return ""
}

type ResLordDefaultVoiceCfgDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID     uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Order  uint32 `protobuf:"varint,2,opt,name=Order,proto3" json:"Order,omitempty"`
	LordID uint32 `protobuf:"varint,3,opt,name=LordID,proto3" json:"LordID,omitempty"`
	SkinID uint32 `protobuf:"varint,4,opt,name=SkinID,proto3" json:"SkinID,omitempty"`
	Title  string `protobuf:"bytes,5,opt,name=Title,proto3" json:"Title,omitempty"`
	Text   string `protobuf:"bytes,6,opt,name=Text,proto3" json:"Text,omitempty"`
	Voice  string `protobuf:"bytes,7,opt,name=Voice,proto3" json:"Voice,omitempty"`
}

func (x *ResLordDefaultVoiceCfgDataBin) Reset() {
	*x = ResLordDefaultVoiceCfgDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResLordDefaultVoiceCfgDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResLordDefaultVoiceCfgDataBin) ProtoMessage() {}

func (x *ResLordDefaultVoiceCfgDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResLordDefaultVoiceCfgDataBin.ProtoReflect.Descriptor instead.
func (*ResLordDefaultVoiceCfgDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{130}
}

func (x *ResLordDefaultVoiceCfgDataBin) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResLordDefaultVoiceCfgDataBin) GetOrder() uint32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *ResLordDefaultVoiceCfgDataBin) GetLordID() uint32 {
	if x != nil {
		return x.LordID
	}
	return 0
}

func (x *ResLordDefaultVoiceCfgDataBin) GetSkinID() uint32 {
	if x != nil {
		return x.SkinID
	}
	return 0
}

func (x *ResLordDefaultVoiceCfgDataBin) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResLordDefaultVoiceCfgDataBin) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ResLordDefaultVoiceCfgDataBin) GetVoice() string {
	if x != nil {
		return x.Voice
	}
	return ""
}

// 棋手熟练度结算表
type ResLordProficiencySettleDatabin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameType COM_GAME_TYPE `protobuf:"varint,1,opt,name=GameType,proto3,enum=ResData.COM_GAME_TYPE" json:"GameType,omitempty"`
	Rank     uint32        `protobuf:"varint,2,opt,name=Rank,proto3" json:"Rank,omitempty"`
	Score    uint32        `protobuf:"varint,3,opt,name=Score,proto3" json:"Score,omitempty"`
}

func (x *ResLordProficiencySettleDatabin) Reset() {
	*x = ResLordProficiencySettleDatabin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResLordProficiencySettleDatabin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResLordProficiencySettleDatabin) ProtoMessage() {}

func (x *ResLordProficiencySettleDatabin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResLordProficiencySettleDatabin.ProtoReflect.Descriptor instead.
func (*ResLordProficiencySettleDatabin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{131}
}

func (x *ResLordProficiencySettleDatabin) GetGameType() COM_GAME_TYPE {
	if x != nil {
		return x.GameType
	}
	return COM_GAME_TYPE_COM_GAME_TYPE_NULL
}

func (x *ResLordProficiencySettleDatabin) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *ResLordProficiencySettleDatabin) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

//
type ResLordRankShowInfoDatabin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LordRankType uint32 `protobuf:"varint,1,opt,name=LordRankType,proto3" json:"LordRankType,omitempty"`
	LowRankCount uint32 `protobuf:"varint,2,opt,name=LowRankCount,proto3" json:"LowRankCount,omitempty"`
	TopRankIndex uint32 `protobuf:"varint,3,opt,name=TopRankIndex,proto3" json:"TopRankIndex,omitempty"`
	IconPath     string `protobuf:"bytes,4,opt,name=IconPath,proto3" json:"IconPath,omitempty"`
	MinIconPath  string `protobuf:"bytes,5,opt,name=MinIconPath,proto3" json:"MinIconPath,omitempty"`
	BigIconPath  string `protobuf:"bytes,6,opt,name=BigIconPath,proto3" json:"BigIconPath,omitempty"`
}

func (x *ResLordRankShowInfoDatabin) Reset() {
	*x = ResLordRankShowInfoDatabin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResLordRankShowInfoDatabin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResLordRankShowInfoDatabin) ProtoMessage() {}

func (x *ResLordRankShowInfoDatabin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResLordRankShowInfoDatabin.ProtoReflect.Descriptor instead.
func (*ResLordRankShowInfoDatabin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{132}
}

func (x *ResLordRankShowInfoDatabin) GetLordRankType() uint32 {
	if x != nil {
		return x.LordRankType
	}
	return 0
}

func (x *ResLordRankShowInfoDatabin) GetLowRankCount() uint32 {
	if x != nil {
		return x.LowRankCount
	}
	return 0
}

func (x *ResLordRankShowInfoDatabin) GetTopRankIndex() uint32 {
	if x != nil {
		return x.TopRankIndex
	}
	return 0
}

func (x *ResLordRankShowInfoDatabin) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *ResLordRankShowInfoDatabin) GetMinIconPath() string {
	if x != nil {
		return x.MinIconPath
	}
	return ""
}

func (x *ResLordRankShowInfoDatabin) GetBigIconPath() string {
	if x != nil {
		return x.BigIconPath
	}
	return ""
}

// 棋手熟练度等级配置表
type ResLordProficiencyLevelDatabin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level          uint32                  `protobuf:"varint,1,opt,name=Level,proto3" json:"Level,omitempty"`
	LvUpScore      uint32                  `protobuf:"varint,2,opt,name=LvUpScore,proto3" json:"LvUpScore,omitempty"`
	BigIconPath    string                  `protobuf:"bytes,3,opt,name=BigIconPath,proto3" json:"BigIconPath,omitempty"`
	IconPath       string                  `protobuf:"bytes,4,opt,name=IconPath,proto3" json:"IconPath,omitempty"`
	UnLockValue    []*LordProficiencyParam `protobuf:"bytes,5,rep,name=UnLockValue,proto3" json:"UnLockValue,omitempty"`
	MaxBigIconPath string                  `protobuf:"bytes,6,opt,name=MaxBigIconPath,proto3" json:"MaxBigIconPath,omitempty"`
}

func (x *ResLordProficiencyLevelDatabin) Reset() {
	*x = ResLordProficiencyLevelDatabin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResLordProficiencyLevelDatabin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResLordProficiencyLevelDatabin) ProtoMessage() {}

func (x *ResLordProficiencyLevelDatabin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResLordProficiencyLevelDatabin.ProtoReflect.Descriptor instead.
func (*ResLordProficiencyLevelDatabin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{133}
}

func (x *ResLordProficiencyLevelDatabin) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ResLordProficiencyLevelDatabin) GetLvUpScore() uint32 {
	if x != nil {
		return x.LvUpScore
	}
	return 0
}

func (x *ResLordProficiencyLevelDatabin) GetBigIconPath() string {
	if x != nil {
		return x.BigIconPath
	}
	return ""
}

func (x *ResLordProficiencyLevelDatabin) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *ResLordProficiencyLevelDatabin) GetUnLockValue() []*LordProficiencyParam {
	if x != nil {
		return x.UnLockValue
	}
	return nil
}

func (x *ResLordProficiencyLevelDatabin) GetMaxBigIconPath() string {
	if x != nil {
		return x.MaxBigIconPath
	}
	return ""
}

type LordProficiencyParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       uint32   `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	ParamValue []uint32 `protobuf:"varint,2,rep,packed,name=ParamValue,proto3" json:"ParamValue,omitempty"`
}

func (x *LordProficiencyParam) Reset() {
	*x = LordProficiencyParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LordProficiencyParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LordProficiencyParam) ProtoMessage() {}

func (x *LordProficiencyParam) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LordProficiencyParam.ProtoReflect.Descriptor instead.
func (*LordProficiencyParam) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{134}
}

func (x *LordProficiencyParam) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *LordProficiencyParam) GetParamValue() []uint32 {
	if x != nil {
		return x.ParamValue
	}
	return nil
}

// 棋手战力常量表
type ResLordPowerCommonDatabin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitActivity          uint32 `protobuf:"varint,1,opt,name=InitActivity,proto3" json:"InitActivity,omitempty"`
	MaxActivity           uint32 `protobuf:"varint,2,opt,name=MaxActivity,proto3" json:"MaxActivity,omitempty"`
	ActivityChgBase       uint32 `protobuf:"varint,3,opt,name=ActivityChgBase,proto3" json:"ActivityChgBase,omitempty"`
	ActivityReduceTime    uint32 `protobuf:"varint,4,opt,name=ActivityReduceTime,proto3" json:"ActivityReduceTime,omitempty"`
	BattlePointsReduceNum uint32 `protobuf:"varint,5,opt,name=BattlePointsReduceNum,proto3" json:"BattlePointsReduceNum,omitempty"`
	LowRankJoinCount      uint32 `protobuf:"varint,6,opt,name=LowRankJoinCount,proto3" json:"LowRankJoinCount,omitempty"`
	LowRankShowCount      uint32 `protobuf:"varint,7,opt,name=LowRankShowCount,proto3" json:"LowRankShowCount,omitempty"`
	MidRankJoinCount      uint32 `protobuf:"varint,8,opt,name=MidRankJoinCount,proto3" json:"MidRankJoinCount,omitempty"`
	MidRankShowCount      uint32 `protobuf:"varint,9,opt,name=MidRankShowCount,proto3" json:"MidRankShowCount,omitempty"`
	HightRankJoinCount    uint32 `protobuf:"varint,10,opt,name=HightRankJoinCount,proto3" json:"HightRankJoinCount,omitempty"`
	HightRankShowCount    uint32 `protobuf:"varint,11,opt,name=HightRankShowCount,proto3" json:"HightRankShowCount,omitempty"`
	TopRankJoinCount      uint32 `protobuf:"varint,12,opt,name=TopRankJoinCount,proto3" json:"TopRankJoinCount,omitempty"`
	TopRankShowCount      uint32 `protobuf:"varint,13,opt,name=TopRankShowCount,proto3" json:"TopRankShowCount,omitempty"`
}

func (x *ResLordPowerCommonDatabin) Reset() {
	*x = ResLordPowerCommonDatabin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResLordPowerCommonDatabin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResLordPowerCommonDatabin) ProtoMessage() {}

func (x *ResLordPowerCommonDatabin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResLordPowerCommonDatabin.ProtoReflect.Descriptor instead.
func (*ResLordPowerCommonDatabin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{135}
}

func (x *ResLordPowerCommonDatabin) GetInitActivity() uint32 {
	if x != nil {
		return x.InitActivity
	}
	return 0
}

func (x *ResLordPowerCommonDatabin) GetMaxActivity() uint32 {
	if x != nil {
		return x.MaxActivity
	}
	return 0
}

func (x *ResLordPowerCommonDatabin) GetActivityChgBase() uint32 {
	if x != nil {
		return x.ActivityChgBase
	}
	return 0
}

func (x *ResLordPowerCommonDatabin) GetActivityReduceTime() uint32 {
	if x != nil {
		return x.ActivityReduceTime
	}
	return 0
}

func (x *ResLordPowerCommonDatabin) GetBattlePointsReduceNum() uint32 {
	if x != nil {
		return x.BattlePointsReduceNum
	}
	return 0
}

func (x *ResLordPowerCommonDatabin) GetLowRankJoinCount() uint32 {
	if x != nil {
		return x.LowRankJoinCount
	}
	return 0
}

func (x *ResLordPowerCommonDatabin) GetLowRankShowCount() uint32 {
	if x != nil {
		return x.LowRankShowCount
	}
	return 0
}

func (x *ResLordPowerCommonDatabin) GetMidRankJoinCount() uint32 {
	if x != nil {
		return x.MidRankJoinCount
	}
	return 0
}

func (x *ResLordPowerCommonDatabin) GetMidRankShowCount() uint32 {
	if x != nil {
		return x.MidRankShowCount
	}
	return 0
}

func (x *ResLordPowerCommonDatabin) GetHightRankJoinCount() uint32 {
	if x != nil {
		return x.HightRankJoinCount
	}
	return 0
}

func (x *ResLordPowerCommonDatabin) GetHightRankShowCount() uint32 {
	if x != nil {
		return x.HightRankShowCount
	}
	return 0
}

func (x *ResLordPowerCommonDatabin) GetTopRankJoinCount() uint32 {
	if x != nil {
		return x.TopRankJoinCount
	}
	return 0
}

func (x *ResLordPowerCommonDatabin) GetTopRankShowCount() uint32 {
	if x != nil {
		return x.TopRankShowCount
	}
	return 0
}

// 棋手战绩积分配置表
type ResLordBattlePointsDatabin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank            uint32 `protobuf:"varint,1,opt,name=Rank,proto3" json:"Rank,omitempty"`
	Weight          uint32 `protobuf:"varint,2,opt,name=Weight,proto3" json:"Weight,omitempty"`
	ScoreUpperLimit uint32 `protobuf:"varint,3,opt,name=ScoreUpperLimit,proto3" json:"ScoreUpperLimit,omitempty"`
}

func (x *ResLordBattlePointsDatabin) Reset() {
	*x = ResLordBattlePointsDatabin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResLordBattlePointsDatabin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResLordBattlePointsDatabin) ProtoMessage() {}

func (x *ResLordBattlePointsDatabin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResLordBattlePointsDatabin.ProtoReflect.Descriptor instead.
func (*ResLordBattlePointsDatabin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{136}
}

func (x *ResLordBattlePointsDatabin) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *ResLordBattlePointsDatabin) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ResLordBattlePointsDatabin) GetScoreUpperLimit() uint32 {
	if x != nil {
		return x.ScoreUpperLimit
	}
	return 0
}

// 棋手表现积分表
type ResLordShowScoreDatabin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonID uint32 `protobuf:"varint,1,opt,name=SeasonID,proto3" json:"SeasonID,omitempty"`
	GameType uint32 `protobuf:"varint,2,opt,name=GameType,proto3" json:"GameType,omitempty"`
	Rank     uint32 `protobuf:"varint,3,opt,name=Rank,proto3" json:"Rank,omitempty"`
	Place    uint32 `protobuf:"varint,4,opt,name=Place,proto3" json:"Place,omitempty"`
	Score    uint32 `protobuf:"varint,5,opt,name=Score,proto3" json:"Score,omitempty"`
}

func (x *ResLordShowScoreDatabin) Reset() {
	*x = ResLordShowScoreDatabin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResLordShowScoreDatabin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResLordShowScoreDatabin) ProtoMessage() {}

func (x *ResLordShowScoreDatabin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResLordShowScoreDatabin.ProtoReflect.Descriptor instead.
func (*ResLordShowScoreDatabin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{137}
}

func (x *ResLordShowScoreDatabin) GetSeasonID() uint32 {
	if x != nil {
		return x.SeasonID
	}
	return 0
}

func (x *ResLordShowScoreDatabin) GetGameType() uint32 {
	if x != nil {
		return x.GameType
	}
	return 0
}

func (x *ResLordShowScoreDatabin) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *ResLordShowScoreDatabin) GetPlace() uint32 {
	if x != nil {
		return x.Place
	}
	return 0
}

func (x *ResLordShowScoreDatabin) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

// 棋手表现积分控制表.
type ResLordShowScoreCtrlDatabin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinGameNum        uint32 `protobuf:"varint,1,opt,name=MinGameNum,proto3" json:"MinGameNum,omitempty"`
	MaxGameNum        uint32 `protobuf:"varint,2,opt,name=MaxGameNum,proto3" json:"MaxGameNum,omitempty"`
	CorrectionFactors uint32 `protobuf:"varint,3,opt,name=CorrectionFactors,proto3" json:"CorrectionFactors,omitempty"`
}

func (x *ResLordShowScoreCtrlDatabin) Reset() {
	*x = ResLordShowScoreCtrlDatabin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResLordShowScoreCtrlDatabin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResLordShowScoreCtrlDatabin) ProtoMessage() {}

func (x *ResLordShowScoreCtrlDatabin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResLordShowScoreCtrlDatabin.ProtoReflect.Descriptor instead.
func (*ResLordShowScoreCtrlDatabin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{138}
}

func (x *ResLordShowScoreCtrlDatabin) GetMinGameNum() uint32 {
	if x != nil {
		return x.MinGameNum
	}
	return 0
}

func (x *ResLordShowScoreCtrlDatabin) GetMaxGameNum() uint32 {
	if x != nil {
		return x.MaxGameNum
	}
	return 0
}

func (x *ResLordShowScoreCtrlDatabin) GetCorrectionFactors() uint32 {
	if x != nil {
		return x.CorrectionFactors
	}
	return 0
}

// 棋手战绩结算.
type ResLordRecentResultsDatabin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonID           uint32   `protobuf:"varint,1,opt,name=SeasonID,proto3" json:"SeasonID,omitempty"`
	HistorySeasonID    []uint32 `protobuf:"varint,2,rep,packed,name=HistorySeasonID,proto3" json:"HistorySeasonID,omitempty"`
	BattleRankingBase  uint32   `protobuf:"varint,3,opt,name=BattleRankingBase,proto3" json:"BattleRankingBase,omitempty"`
	BattleSettleMaxNum uint32   `protobuf:"varint,4,opt,name=BattleSettleMaxNum,proto3" json:"BattleSettleMaxNum,omitempty"`
}

func (x *ResLordRecentResultsDatabin) Reset() {
	*x = ResLordRecentResultsDatabin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResLordRecentResultsDatabin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResLordRecentResultsDatabin) ProtoMessage() {}

func (x *ResLordRecentResultsDatabin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResLordRecentResultsDatabin.ProtoReflect.Descriptor instead.
func (*ResLordRecentResultsDatabin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{139}
}

func (x *ResLordRecentResultsDatabin) GetSeasonID() uint32 {
	if x != nil {
		return x.SeasonID
	}
	return 0
}

func (x *ResLordRecentResultsDatabin) GetHistorySeasonID() []uint32 {
	if x != nil {
		return x.HistorySeasonID
	}
	return nil
}

func (x *ResLordRecentResultsDatabin) GetBattleRankingBase() uint32 {
	if x != nil {
		return x.BattleRankingBase
	}
	return 0
}

func (x *ResLordRecentResultsDatabin) GetBattleSettleMaxNum() uint32 {
	if x != nil {
		return x.BattleSettleMaxNum
	}
	return 0
}

// 棋手战力排行榜称号表.
type ResLordPowerRankTitleDatabin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Content string `protobuf:"bytes,3,opt,name=Content,proto3" json:"Content,omitempty"`
}

func (x *ResLordPowerRankTitleDatabin) Reset() {
	*x = ResLordPowerRankTitleDatabin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResLordPowerRankTitleDatabin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResLordPowerRankTitleDatabin) ProtoMessage() {}

func (x *ResLordPowerRankTitleDatabin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResLordPowerRankTitleDatabin.ProtoReflect.Descriptor instead.
func (*ResLordPowerRankTitleDatabin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{140}
}

func (x *ResLordPowerRankTitleDatabin) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResLordPowerRankTitleDatabin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResLordPowerRankTitleDatabin) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// 棋手战力榜单映射表.
type ResLordPowerRankMapDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ApolloRankType    uint32 `protobuf:"varint,2,opt,name=ApolloRankType,proto3" json:"ApolloRankType,omitempty"`
	ApolloRankInsID   uint32 `protobuf:"varint,3,opt,name=ApolloRankInsID,proto3" json:"ApolloRankInsID,omitempty"`
	ApolloSubRankType uint32 `protobuf:"varint,4,opt,name=ApolloSubRankType,proto3" json:"ApolloSubRankType,omitempty"`
}

func (x *ResLordPowerRankMapDataBin) Reset() {
	*x = ResLordPowerRankMapDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResLordPowerRankMapDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResLordPowerRankMapDataBin) ProtoMessage() {}

func (x *ResLordPowerRankMapDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResLordPowerRankMapDataBin.ProtoReflect.Descriptor instead.
func (*ResLordPowerRankMapDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{141}
}

func (x *ResLordPowerRankMapDataBin) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResLordPowerRankMapDataBin) GetApolloRankType() uint32 {
	if x != nil {
		return x.ApolloRankType
	}
	return 0
}

func (x *ResLordPowerRankMapDataBin) GetApolloRankInsID() uint32 {
	if x != nil {
		return x.ApolloRankInsID
	}
	return 0
}

func (x *ResLordPowerRankMapDataBin) GetApolloSubRankType() uint32 {
	if x != nil {
		return x.ApolloSubRankType
	}
	return 0
}

type ResLordGroupDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID uint32 `protobuf:"varint,1,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	LordID  uint32 `protobuf:"varint,2,opt,name=LordID,proto3" json:"LordID,omitempty"`
}

func (x *ResLordGroupDataBin) Reset() {
	*x = ResLordGroupDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResLordGroupDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResLordGroupDataBin) ProtoMessage() {}

func (x *ResLordGroupDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResLordGroupDataBin.ProtoReflect.Descriptor instead.
func (*ResLordGroupDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{142}
}

func (x *ResLordGroupDataBin) GetGroupID() uint32 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *ResLordGroupDataBin) GetLordID() uint32 {
	if x != nil {
		return x.LordID
	}
	return 0
}

type LordConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LordData                 *ResLordInfoConfDataBin          `protobuf:"bytes,1,opt,name=LordData,proto3" json:"LordData,omitempty"`
	SkinData                 *ResLordSkinDataBin              `protobuf:"bytes,2,opt,name=SkinData,proto3" json:"SkinData,omitempty"`
	LordProficiencySettleCfg *ResLordProficiencySettleDatabin `protobuf:"bytes,5,opt,name=LordProficiencySettleCfg,proto3" json:"LordProficiencySettleCfg,omitempty"`
	LordProficiencyLevelCfg  *ResLordProficiencyLevelDatabin  `protobuf:"bytes,6,opt,name=LordProficiencyLevelCfg,proto3" json:"LordProficiencyLevelCfg,omitempty"`
	LordPowerCommonCfg       *ResLordPowerCommonDatabin       `protobuf:"bytes,7,opt,name=LordPowerCommonCfg,proto3" json:"LordPowerCommonCfg,omitempty"`
	LordBattlePointsCfg      *ResLordBattlePointsDatabin      `protobuf:"bytes,8,opt,name=LordBattlePointsCfg,proto3" json:"LordBattlePointsCfg,omitempty"`
	LordShowScoreCfg         *ResLordShowScoreDatabin         `protobuf:"bytes,9,opt,name=LordShowScoreCfg,proto3" json:"LordShowScoreCfg,omitempty"`
	LordShowScoreCtrlCfg     *ResLordShowScoreCtrlDatabin     `protobuf:"bytes,10,opt,name=LordShowScoreCtrlCfg,proto3" json:"LordShowScoreCtrlCfg,omitempty"`
	LordRecentResultsCfg     *ResLordRecentResultsDatabin     `protobuf:"bytes,11,opt,name=LordRecentResultsCfg,proto3" json:"LordRecentResultsCfg,omitempty"`
	LordPowerRankTitleCfg    *ResLordPowerRankTitleDatabin    `protobuf:"bytes,12,opt,name=LordPowerRankTitleCfg,proto3" json:"LordPowerRankTitleCfg,omitempty"`
	LordPowerRankMapCfg      *ResLordPowerRankMapDataBin      `protobuf:"bytes,13,opt,name=LordPowerRankMapCfg,proto3" json:"LordPowerRankMapCfg,omitempty"`
	LordFileCfg              *ResLordFileDataBin              `protobuf:"bytes,14,opt,name=LordFileCfg,proto3" json:"LordFileCfg,omitempty"`
	LordQuestionAndAnswerCfg *ResLordQuestionAndAnswerDataBin `protobuf:"bytes,15,opt,name=LordQuestionAndAnswerCfg,proto3" json:"LordQuestionAndAnswerCfg,omitempty"`
	LordGroupDataBin         *ResLordGroupDataBin             `protobuf:"bytes,17,opt,name=LordGroupDataBin,proto3" json:"LordGroupDataBin,omitempty"`
}

func (x *LordConf) Reset() {
	*x = LordConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LordConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LordConf) ProtoMessage() {}

func (x *LordConf) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LordConf.ProtoReflect.Descriptor instead.
func (*LordConf) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{143}
}

func (x *LordConf) GetLordData() *ResLordInfoConfDataBin {
	if x != nil {
		return x.LordData
	}
	return nil
}

func (x *LordConf) GetSkinData() *ResLordSkinDataBin {
	if x != nil {
		return x.SkinData
	}
	return nil
}

func (x *LordConf) GetLordProficiencySettleCfg() *ResLordProficiencySettleDatabin {
	if x != nil {
		return x.LordProficiencySettleCfg
	}
	return nil
}

func (x *LordConf) GetLordProficiencyLevelCfg() *ResLordProficiencyLevelDatabin {
	if x != nil {
		return x.LordProficiencyLevelCfg
	}
	return nil
}

func (x *LordConf) GetLordPowerCommonCfg() *ResLordPowerCommonDatabin {
	if x != nil {
		return x.LordPowerCommonCfg
	}
	return nil
}

func (x *LordConf) GetLordBattlePointsCfg() *ResLordBattlePointsDatabin {
	if x != nil {
		return x.LordBattlePointsCfg
	}
	return nil
}

func (x *LordConf) GetLordShowScoreCfg() *ResLordShowScoreDatabin {
	if x != nil {
		return x.LordShowScoreCfg
	}
	return nil
}

func (x *LordConf) GetLordShowScoreCtrlCfg() *ResLordShowScoreCtrlDatabin {
	if x != nil {
		return x.LordShowScoreCtrlCfg
	}
	return nil
}

func (x *LordConf) GetLordRecentResultsCfg() *ResLordRecentResultsDatabin {
	if x != nil {
		return x.LordRecentResultsCfg
	}
	return nil
}

func (x *LordConf) GetLordPowerRankTitleCfg() *ResLordPowerRankTitleDatabin {
	if x != nil {
		return x.LordPowerRankTitleCfg
	}
	return nil
}

func (x *LordConf) GetLordPowerRankMapCfg() *ResLordPowerRankMapDataBin {
	if x != nil {
		return x.LordPowerRankMapCfg
	}
	return nil
}

func (x *LordConf) GetLordFileCfg() *ResLordFileDataBin {
	if x != nil {
		return x.LordFileCfg
	}
	return nil
}

func (x *LordConf) GetLordQuestionAndAnswerCfg() *ResLordQuestionAndAnswerDataBin {
	if x != nil {
		return x.LordQuestionAndAnswerCfg
	}
	return nil
}

func (x *LordConf) GetLordGroupDataBin() *ResLordGroupDataBin {
	if x != nil {
		return x.LordGroupDataBin
	}
	return nil
}

// --------------------------------- 棋手选择阶段 ---------------------------------
type ResDTLordSelectRound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Round uint32 `protobuf:"varint,1,opt,name=Round,proto3" json:"Round,omitempty"`
}

func (x *ResDTLordSelectRound) Reset() {
	*x = ResDTLordSelectRound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDTLordSelectRound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDTLordSelectRound) ProtoMessage() {}

func (x *ResDTLordSelectRound) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDTLordSelectRound.ProtoReflect.Descriptor instead.
func (*ResDTLordSelectRound) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{144}
}

func (x *ResDTLordSelectRound) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

type ResDTLordSelectAIOpRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Begin uint32 `protobuf:"varint,1,opt,name=Begin,proto3" json:"Begin,omitempty"`
	End   uint32 `protobuf:"varint,2,opt,name=End,proto3" json:"End,omitempty"`
}

func (x *ResDTLordSelectAIOpRange) Reset() {
	*x = ResDTLordSelectAIOpRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDTLordSelectAIOpRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDTLordSelectAIOpRange) ProtoMessage() {}

func (x *ResDTLordSelectAIOpRange) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDTLordSelectAIOpRange.ProtoReflect.Descriptor instead.
func (*ResDTLordSelectAIOpRange) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{145}
}

func (x *ResDTLordSelectAIOpRange) GetBegin() uint32 {
	if x != nil {
		return x.Begin
	}
	return 0
}

func (x *ResDTLordSelectAIOpRange) GetEnd() uint32 {
	if x != nil {
		return x.End
	}
	return 0
}

type ResPVPLordSelectModeCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModeID                  uint32                    `protobuf:"varint,1,opt,name=ModeID,proto3" json:"ModeID,omitempty"`
	SeasonID                uint32                    `protobuf:"varint,2,opt,name=SeasonID,proto3" json:"SeasonID,omitempty"`
	GameType                uint32                    `protobuf:"varint,3,opt,name=GameType,proto3" json:"GameType,omitempty"`
	Rank                    uint32                    `protobuf:"varint,4,opt,name=Rank,proto3" json:"Rank,omitempty"`
	RepeatSelectLordInvalid uint32                    `protobuf:"varint,5,opt,name=RepeatSelectLordInvalid,proto3" json:"RepeatSelectLordInvalid,omitempty"`
	SelectedCancelInvalid   uint32                    `protobuf:"varint,11,opt,name=SelectedCancelInvalid,proto3" json:"SelectedCancelInvalid,omitempty"`
	AllConfirmFinish        uint32                    `protobuf:"varint,12,opt,name=AllConfirmFinish,proto3" json:"AllConfirmFinish,omitempty"`
	RoundList               []*ResDTLordSelectRound   `protobuf:"bytes,6,rep,name=RoundList,proto3" json:"RoundList,omitempty"`
	BanRound                uint32                    `protobuf:"varint,7,opt,name=BanRound,proto3" json:"BanRound,omitempty"`
	StageConfirmTimeoutSec  uint32                    `protobuf:"varint,8,opt,name=StageConfirmTimeoutSec,proto3" json:"StageConfirmTimeoutSec,omitempty"`
	StageConfirmAIOp        *ResDTLordSelectAIOpRange `protobuf:"bytes,13,opt,name=StageConfirmAIOp,proto3" json:"StageConfirmAIOp,omitempty"`
	StageBanTimeoutSec      uint32                    `protobuf:"varint,9,opt,name=StageBanTimeoutSec,proto3" json:"StageBanTimeoutSec,omitempty"`
	StageBanAIOp            *ResDTLordSelectAIOpRange `protobuf:"bytes,14,opt,name=StageBanAIOp,proto3" json:"StageBanAIOp,omitempty"`
	StageFinalTimeoutSec    uint32                    `protobuf:"varint,10,opt,name=StageFinalTimeoutSec,proto3" json:"StageFinalTimeoutSec,omitempty"`
}

func (x *ResPVPLordSelectModeCfg) Reset() {
	*x = ResPVPLordSelectModeCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResPVPLordSelectModeCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResPVPLordSelectModeCfg) ProtoMessage() {}

func (x *ResPVPLordSelectModeCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResPVPLordSelectModeCfg.ProtoReflect.Descriptor instead.
func (*ResPVPLordSelectModeCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{146}
}

func (x *ResPVPLordSelectModeCfg) GetModeID() uint32 {
	if x != nil {
		return x.ModeID
	}
	return 0
}

func (x *ResPVPLordSelectModeCfg) GetSeasonID() uint32 {
	if x != nil {
		return x.SeasonID
	}
	return 0
}

func (x *ResPVPLordSelectModeCfg) GetGameType() uint32 {
	if x != nil {
		return x.GameType
	}
	return 0
}

func (x *ResPVPLordSelectModeCfg) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *ResPVPLordSelectModeCfg) GetRepeatSelectLordInvalid() uint32 {
	if x != nil {
		return x.RepeatSelectLordInvalid
	}
	return 0
}

func (x *ResPVPLordSelectModeCfg) GetSelectedCancelInvalid() uint32 {
	if x != nil {
		return x.SelectedCancelInvalid
	}
	return 0
}

func (x *ResPVPLordSelectModeCfg) GetAllConfirmFinish() uint32 {
	if x != nil {
		return x.AllConfirmFinish
	}
	return 0
}

func (x *ResPVPLordSelectModeCfg) GetRoundList() []*ResDTLordSelectRound {
	if x != nil {
		return x.RoundList
	}
	return nil
}

func (x *ResPVPLordSelectModeCfg) GetBanRound() uint32 {
	if x != nil {
		return x.BanRound
	}
	return 0
}

func (x *ResPVPLordSelectModeCfg) GetStageConfirmTimeoutSec() uint32 {
	if x != nil {
		return x.StageConfirmTimeoutSec
	}
	return 0
}

func (x *ResPVPLordSelectModeCfg) GetStageConfirmAIOp() *ResDTLordSelectAIOpRange {
	if x != nil {
		return x.StageConfirmAIOp
	}
	return nil
}

func (x *ResPVPLordSelectModeCfg) GetStageBanTimeoutSec() uint32 {
	if x != nil {
		return x.StageBanTimeoutSec
	}
	return 0
}

func (x *ResPVPLordSelectModeCfg) GetStageBanAIOp() *ResDTLordSelectAIOpRange {
	if x != nil {
		return x.StageBanAIOp
	}
	return nil
}

func (x *ResPVPLordSelectModeCfg) GetStageFinalTimeoutSec() uint32 {
	if x != nil {
		return x.StageFinalTimeoutSec
	}
	return 0
}

type PvpLordSelectConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PVPLordSelectModeCfg *ResPVPLordSelectModeCfg `protobuf:"bytes,1,opt,name=PVPLordSelectModeCfg,proto3" json:"PVPLordSelectModeCfg,omitempty"`
}

func (x *PvpLordSelectConf) Reset() {
	*x = PvpLordSelectConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PvpLordSelectConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PvpLordSelectConf) ProtoMessage() {}

func (x *PvpLordSelectConf) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PvpLordSelectConf.ProtoReflect.Descriptor instead.
func (*PvpLordSelectConf) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{147}
}

func (x *PvpLordSelectConf) GetPVPLordSelectModeCfg() *ResPVPLordSelectModeCfg {
	if x != nil {
		return x.PVPLordSelectModeCfg
	}
	return nil
}

// --------------------------------- 社交 start ---------------------------------
type ResSocialFriendTextCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
}

func (x *ResSocialFriendTextCfg) Reset() {
	*x = ResSocialFriendTextCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResSocialFriendTextCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResSocialFriendTextCfg) ProtoMessage() {}

func (x *ResSocialFriendTextCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResSocialFriendTextCfg.ProtoReflect.Descriptor instead.
func (*ResSocialFriendTextCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{148}
}

func (x *ResSocialFriendTextCfg) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResSocialFriendTextCfg) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type ResSocialCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Extra          string `protobuf:"bytes,2,opt,name=Extra,proto3" json:"Extra,omitempty"`
	InviteCD       uint32 `protobuf:"varint,3,opt,name=InviteCD,proto3" json:"InviteCD,omitempty"`
	WatchNum       uint32 `protobuf:"varint,4,opt,name=WatchNum,proto3" json:"WatchNum,omitempty"`
	FriendNum      uint32 `protobuf:"varint,5,opt,name=FriendNum,proto3" json:"FriendNum,omitempty"`
	VerifyTextNum  uint32 `protobuf:"varint,6,opt,name=verifyTextNum,proto3" json:"verifyTextNum,omitempty"`
	RequestTextNum uint32 `protobuf:"varint,7,opt,name=RequestTextNum,proto3" json:"RequestTextNum,omitempty"`
	BlackListNum   uint32 `protobuf:"varint,8,opt,name=BlackListNum,proto3" json:"BlackListNum,omitempty"`
	RequestPeriod  uint32 `protobuf:"varint,9,opt,name=RequestPeriod,proto3" json:"RequestPeriod,omitempty"`
	RecentGameNum  uint32 `protobuf:"varint,10,opt,name=RecentGameNum,proto3" json:"RecentGameNum,omitempty"`
	RecommendNum   uint32 `protobuf:"varint,11,opt,name=RecommendNum,proto3" json:"RecommendNum,omitempty"`
	NearbyNum      uint32 `protobuf:"varint,12,opt,name=NearbyNum,proto3" json:"NearbyNum,omitempty"`
	InviteText     string `protobuf:"bytes,13,opt,name=InviteText,proto3" json:"InviteText,omitempty"`
}

func (x *ResSocialCfg) Reset() {
	*x = ResSocialCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResSocialCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResSocialCfg) ProtoMessage() {}

func (x *ResSocialCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResSocialCfg.ProtoReflect.Descriptor instead.
func (*ResSocialCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{149}
}

func (x *ResSocialCfg) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResSocialCfg) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *ResSocialCfg) GetInviteCD() uint32 {
	if x != nil {
		return x.InviteCD
	}
	return 0
}

func (x *ResSocialCfg) GetWatchNum() uint32 {
	if x != nil {
		return x.WatchNum
	}
	return 0
}

func (x *ResSocialCfg) GetFriendNum() uint32 {
	if x != nil {
		return x.FriendNum
	}
	return 0
}

func (x *ResSocialCfg) GetVerifyTextNum() uint32 {
	if x != nil {
		return x.VerifyTextNum
	}
	return 0
}

func (x *ResSocialCfg) GetRequestTextNum() uint32 {
	if x != nil {
		return x.RequestTextNum
	}
	return 0
}

func (x *ResSocialCfg) GetBlackListNum() uint32 {
	if x != nil {
		return x.BlackListNum
	}
	return 0
}

func (x *ResSocialCfg) GetRequestPeriod() uint32 {
	if x != nil {
		return x.RequestPeriod
	}
	return 0
}

func (x *ResSocialCfg) GetRecentGameNum() uint32 {
	if x != nil {
		return x.RecentGameNum
	}
	return 0
}

func (x *ResSocialCfg) GetRecommendNum() uint32 {
	if x != nil {
		return x.RecommendNum
	}
	return 0
}

func (x *ResSocialCfg) GetNearbyNum() uint32 {
	if x != nil {
		return x.NearbyNum
	}
	return 0
}

func (x *ResSocialCfg) GetInviteText() string {
	if x != nil {
		return x.InviteText
	}
	return ""
}

type SocialConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SocialData *ResSocialCfg `protobuf:"bytes,1,opt,name=SocialData,proto3" json:"SocialData,omitempty"`
}

func (x *SocialConf) Reset() {
	*x = SocialConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocialConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocialConf) ProtoMessage() {}

func (x *SocialConf) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocialConf.ProtoReflect.Descriptor instead.
func (*SocialConf) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{150}
}

func (x *SocialConf) GetSocialData() *ResSocialCfg {
	if x != nil {
		return x.SocialData
	}
	return nil
}

type ResPersonaliseChessboardDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            uint32             `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name          string             `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	MiniIcon      string             `protobuf:"bytes,3,opt,name=MiniIcon,proto3" json:"MiniIcon,omitempty"`
	Icon          string             `protobuf:"bytes,4,opt,name=Icon,proto3" json:"Icon,omitempty"`
	Quality       int32              `protobuf:"varint,5,opt,name=Quality,proto3" json:"Quality,omitempty"`
	DecompDrop    uint32             `protobuf:"varint,6,opt,name=DecompDrop,proto3" json:"DecompDrop,omitempty"`
	Desc          string             `protobuf:"bytes,7,opt,name=Desc,proto3" json:"Desc,omitempty"`
	Jump          string             `protobuf:"bytes,8,opt,name=Jump,proto3" json:"Jump,omitempty"`
	JumpDesc      string             `protobuf:"bytes,9,opt,name=JumpDesc,proto3" json:"JumpDesc,omitempty"`
	SceneID       uint32             `protobuf:"varint,10,opt,name=SceneID,proto3" json:"SceneID,omitempty"`
	GameTypeGroup COM_GAMETYPE_GROUP `protobuf:"varint,11,opt,name=GameTypeGroup,proto3,enum=ResData.COM_GAMETYPE_GROUP" json:"GameTypeGroup,omitempty"`
	ScarceLevel   uint32             `protobuf:"varint,12,opt,name=ScarceLevel,proto3" json:"ScarceLevel,omitempty"`
	EnableInfo    *ResEnableInfo     `protobuf:"bytes,13,opt,name=EnableInfo,proto3" json:"EnableInfo,omitempty"`
}

func (x *ResPersonaliseChessboardDataBin) Reset() {
	*x = ResPersonaliseChessboardDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResPersonaliseChessboardDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResPersonaliseChessboardDataBin) ProtoMessage() {}

func (x *ResPersonaliseChessboardDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResPersonaliseChessboardDataBin.ProtoReflect.Descriptor instead.
func (*ResPersonaliseChessboardDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{151}
}

func (x *ResPersonaliseChessboardDataBin) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResPersonaliseChessboardDataBin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResPersonaliseChessboardDataBin) GetMiniIcon() string {
	if x != nil {
		return x.MiniIcon
	}
	return ""
}

func (x *ResPersonaliseChessboardDataBin) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *ResPersonaliseChessboardDataBin) GetQuality() int32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *ResPersonaliseChessboardDataBin) GetDecompDrop() uint32 {
	if x != nil {
		return x.DecompDrop
	}
	return 0
}

func (x *ResPersonaliseChessboardDataBin) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ResPersonaliseChessboardDataBin) GetJump() string {
	if x != nil {
		return x.Jump
	}
	return ""
}

func (x *ResPersonaliseChessboardDataBin) GetJumpDesc() string {
	if x != nil {
		return x.JumpDesc
	}
	return ""
}

func (x *ResPersonaliseChessboardDataBin) GetSceneID() uint32 {
	if x != nil {
		return x.SceneID
	}
	return 0
}

func (x *ResPersonaliseChessboardDataBin) GetGameTypeGroup() COM_GAMETYPE_GROUP {
	if x != nil {
		return x.GameTypeGroup
	}
	return COM_GAMETYPE_GROUP_GAMETYPE_GROUP_NULL
}

func (x *ResPersonaliseChessboardDataBin) GetScarceLevel() uint32 {
	if x != nil {
		return x.ScarceLevel
	}
	return 0
}

func (x *ResPersonaliseChessboardDataBin) GetEnableInfo() *ResEnableInfo {
	if x != nil {
		return x.EnableInfo
	}
	return nil
}

type ResPersonaliseConstDatabin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameTypeGroup         COM_GAMETYPE_GROUP `protobuf:"varint,1,opt,name=GameTypeGroup,proto3,enum=ResData.COM_GAMETYPE_GROUP" json:"GameTypeGroup,omitempty"`
	DefaultChessBoard     uint32             `protobuf:"varint,2,opt,name=DefaultChessBoard,proto3" json:"DefaultChessBoard,omitempty"`
	ActiveUseEmojiNum     uint32             `protobuf:"varint,3,opt,name=ActiveUseEmojiNum,proto3" json:"ActiveUseEmojiNum,omitempty"`
	DefaultAttackEffectID uint32             `protobuf:"varint,4,opt,name=DefaultAttackEffectID,proto3" json:"DefaultAttackEffectID,omitempty"`
	DefaultLordID         uint32             `protobuf:"varint,6,opt,name=DefaultLordID,proto3" json:"DefaultLordID,omitempty"`
	DefaultTips           string             `protobuf:"bytes,7,opt,name=DefaultTips,proto3" json:"DefaultTips,omitempty"`
	EftPlayInterval       uint32             `protobuf:"varint,8,opt,name=EftPlayInterval,proto3" json:"EftPlayInterval,omitempty"`
	MainUIEftPlayInterval float32            `protobuf:"fixed32,9,opt,name=MainUIEftPlayInterval,proto3" json:"MainUIEftPlayInterval,omitempty"`
	DefaultTransEftID     uint32             `protobuf:"varint,10,opt,name=DefaultTransEftID,proto3" json:"DefaultTransEftID,omitempty"`
}

func (x *ResPersonaliseConstDatabin) Reset() {
	*x = ResPersonaliseConstDatabin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResPersonaliseConstDatabin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResPersonaliseConstDatabin) ProtoMessage() {}

func (x *ResPersonaliseConstDatabin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResPersonaliseConstDatabin.ProtoReflect.Descriptor instead.
func (*ResPersonaliseConstDatabin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{152}
}

func (x *ResPersonaliseConstDatabin) GetGameTypeGroup() COM_GAMETYPE_GROUP {
	if x != nil {
		return x.GameTypeGroup
	}
	return COM_GAMETYPE_GROUP_GAMETYPE_GROUP_NULL
}

func (x *ResPersonaliseConstDatabin) GetDefaultChessBoard() uint32 {
	if x != nil {
		return x.DefaultChessBoard
	}
	return 0
}

func (x *ResPersonaliseConstDatabin) GetActiveUseEmojiNum() uint32 {
	if x != nil {
		return x.ActiveUseEmojiNum
	}
	return 0
}

func (x *ResPersonaliseConstDatabin) GetDefaultAttackEffectID() uint32 {
	if x != nil {
		return x.DefaultAttackEffectID
	}
	return 0
}

func (x *ResPersonaliseConstDatabin) GetDefaultLordID() uint32 {
	if x != nil {
		return x.DefaultLordID
	}
	return 0
}

func (x *ResPersonaliseConstDatabin) GetDefaultTips() string {
	if x != nil {
		return x.DefaultTips
	}
	return ""
}

func (x *ResPersonaliseConstDatabin) GetEftPlayInterval() uint32 {
	if x != nil {
		return x.EftPlayInterval
	}
	return 0
}

func (x *ResPersonaliseConstDatabin) GetMainUIEftPlayInterval() float32 {
	if x != nil {
		return x.MainUIEftPlayInterval
	}
	return 0
}

func (x *ResPersonaliseConstDatabin) GetDefaultTransEftID() uint32 {
	if x != nil {
		return x.DefaultTransEftID
	}
	return 0
}

type ResChessboardPartDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         uint32         `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name       string         `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Desc       string         `protobuf:"bytes,3,opt,name=Desc,proto3" json:"Desc,omitempty"`
	Type       uint32         `protobuf:"varint,4,opt,name=Type,proto3" json:"Type,omitempty"`
	Icon       string         `protobuf:"bytes,5,opt,name=Icon,proto3" json:"Icon,omitempty"`
	Bg         string         `protobuf:"bytes,6,opt,name=Bg,proto3" json:"Bg,omitempty"`
	UrlPath    string         `protobuf:"bytes,7,opt,name=UrlPath,proto3" json:"UrlPath,omitempty"`
	Quality    uint32         `protobuf:"varint,8,opt,name=Quality,proto3" json:"Quality,omitempty"`
	DecompDrop uint32         `protobuf:"varint,9,opt,name=DecompDrop,proto3" json:"DecompDrop,omitempty"`
	Jump       string         `protobuf:"bytes,10,opt,name=Jump,proto3" json:"Jump,omitempty"`
	JumpDesc   string         `protobuf:"bytes,11,opt,name=JumpDesc,proto3" json:"JumpDesc,omitempty"`
	EnableInfo *ResEnableInfo `protobuf:"bytes,12,opt,name=EnableInfo,proto3" json:"EnableInfo,omitempty"`
}

func (x *ResChessboardPartDataBin) Reset() {
	*x = ResChessboardPartDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResChessboardPartDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResChessboardPartDataBin) ProtoMessage() {}

func (x *ResChessboardPartDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResChessboardPartDataBin.ProtoReflect.Descriptor instead.
func (*ResChessboardPartDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{153}
}

func (x *ResChessboardPartDataBin) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResChessboardPartDataBin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResChessboardPartDataBin) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ResChessboardPartDataBin) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ResChessboardPartDataBin) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *ResChessboardPartDataBin) GetBg() string {
	if x != nil {
		return x.Bg
	}
	return ""
}

func (x *ResChessboardPartDataBin) GetUrlPath() string {
	if x != nil {
		return x.UrlPath
	}
	return ""
}

func (x *ResChessboardPartDataBin) GetQuality() uint32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *ResChessboardPartDataBin) GetDecompDrop() uint32 {
	if x != nil {
		return x.DecompDrop
	}
	return 0
}

func (x *ResChessboardPartDataBin) GetJump() string {
	if x != nil {
		return x.Jump
	}
	return ""
}

func (x *ResChessboardPartDataBin) GetJumpDesc() string {
	if x != nil {
		return x.JumpDesc
	}
	return ""
}

func (x *ResChessboardPartDataBin) GetEnableInfo() *ResEnableInfo {
	if x != nil {
		return x.EnableInfo
	}
	return nil
}

type ResChessboardPartSetDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	AreaType uint32 `protobuf:"varint,2,opt,name=AreaType,proto3" json:"AreaType,omitempty"`
	PartID   uint32 `protobuf:"varint,3,opt,name=PartID,proto3" json:"PartID,omitempty"`
}

func (x *ResChessboardPartSetDataBin) Reset() {
	*x = ResChessboardPartSetDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResChessboardPartSetDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResChessboardPartSetDataBin) ProtoMessage() {}

func (x *ResChessboardPartSetDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResChessboardPartSetDataBin.ProtoReflect.Descriptor instead.
func (*ResChessboardPartSetDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{154}
}

func (x *ResChessboardPartSetDataBin) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResChessboardPartSetDataBin) GetAreaType() uint32 {
	if x != nil {
		return x.AreaType
	}
	return 0
}

func (x *ResChessboardPartSetDataBin) GetPartID() uint32 {
	if x != nil {
		return x.PartID
	}
	return 0
}

type ResCommonIconCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Icon    string `protobuf:"bytes,2,opt,name=Icon,proto3" json:"Icon,omitempty"`
	IconEx1 string `protobuf:"bytes,3,opt,name=IconEx1,proto3" json:"IconEx1,omitempty"`
	IconEx2 string `protobuf:"bytes,4,opt,name=IconEx2,proto3" json:"IconEx2,omitempty"`
	IconEx3 string `protobuf:"bytes,5,opt,name=IconEx3,proto3" json:"IconEx3,omitempty"`
}

func (x *ResCommonIconCfg) Reset() {
	*x = ResCommonIconCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResCommonIconCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResCommonIconCfg) ProtoMessage() {}

func (x *ResCommonIconCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResCommonIconCfg.ProtoReflect.Descriptor instead.
func (*ResCommonIconCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{155}
}

func (x *ResCommonIconCfg) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ResCommonIconCfg) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *ResCommonIconCfg) GetIconEx1() string {
	if x != nil {
		return x.IconEx1
	}
	return ""
}

func (x *ResCommonIconCfg) GetIconEx2() string {
	if x != nil {
		return x.IconEx2
	}
	return ""
}

func (x *ResCommonIconCfg) GetIconEx3() string {
	if x != nil {
		return x.IconEx3
	}
	return ""
}

type ResPersonaliseEmojiDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                   uint32              `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name                 string              `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Desc                 string              `protobuf:"bytes,3,opt,name=Desc,proto3" json:"Desc,omitempty"`
	Icon                 string              `protobuf:"bytes,4,opt,name=Icon,proto3" json:"Icon,omitempty"`
	Bg                   string              `protobuf:"bytes,5,opt,name=Bg,proto3" json:"Bg,omitempty"`
	UrlPath              string              `protobuf:"bytes,6,opt,name=UrlPath,proto3" json:"UrlPath,omitempty"`
	Quality              uint32              `protobuf:"varint,7,opt,name=Quality,proto3" json:"Quality,omitempty"`
	DecompDrop           uint32              `protobuf:"varint,8,opt,name=DecompDrop,proto3" json:"DecompDrop,omitempty"`
	Jump                 string              `protobuf:"bytes,9,opt,name=Jump,proto3" json:"Jump,omitempty"`
	JumpDesc             string              `protobuf:"bytes,10,opt,name=JumpDesc,proto3" json:"JumpDesc,omitempty"`
	OutGameAssetPath     string              `protobuf:"bytes,11,opt,name=OutGameAssetPath,proto3" json:"OutGameAssetPath,omitempty"`
	OutGameAnimationName string              `protobuf:"bytes,12,opt,name=OutGameAnimationName,proto3" json:"OutGameAnimationName,omitempty"`
	AiCommunicationType  AICommunicationType `protobuf:"varint,13,opt,name=aiCommunicationType,proto3,enum=ResData.AICommunicationType" json:"aiCommunicationType,omitempty"`
	EnableInfo           *ResEnableInfo      `protobuf:"bytes,14,opt,name=EnableInfo,proto3" json:"EnableInfo,omitempty"`
}

func (x *ResPersonaliseEmojiDataBin) Reset() {
	*x = ResPersonaliseEmojiDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResPersonaliseEmojiDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResPersonaliseEmojiDataBin) ProtoMessage() {}

func (x *ResPersonaliseEmojiDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResPersonaliseEmojiDataBin.ProtoReflect.Descriptor instead.
func (*ResPersonaliseEmojiDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{156}
}

func (x *ResPersonaliseEmojiDataBin) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResPersonaliseEmojiDataBin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResPersonaliseEmojiDataBin) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ResPersonaliseEmojiDataBin) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *ResPersonaliseEmojiDataBin) GetBg() string {
	if x != nil {
		return x.Bg
	}
	return ""
}

func (x *ResPersonaliseEmojiDataBin) GetUrlPath() string {
	if x != nil {
		return x.UrlPath
	}
	return ""
}

func (x *ResPersonaliseEmojiDataBin) GetQuality() uint32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *ResPersonaliseEmojiDataBin) GetDecompDrop() uint32 {
	if x != nil {
		return x.DecompDrop
	}
	return 0
}

func (x *ResPersonaliseEmojiDataBin) GetJump() string {
	if x != nil {
		return x.Jump
	}
	return ""
}

func (x *ResPersonaliseEmojiDataBin) GetJumpDesc() string {
	if x != nil {
		return x.JumpDesc
	}
	return ""
}

func (x *ResPersonaliseEmojiDataBin) GetOutGameAssetPath() string {
	if x != nil {
		return x.OutGameAssetPath
	}
	return ""
}

func (x *ResPersonaliseEmojiDataBin) GetOutGameAnimationName() string {
	if x != nil {
		return x.OutGameAnimationName
	}
	return ""
}

func (x *ResPersonaliseEmojiDataBin) GetAiCommunicationType() AICommunicationType {
	if x != nil {
		return x.AiCommunicationType
	}
	return AICommunicationType_AICommunicationType_None
}

func (x *ResPersonaliseEmojiDataBin) GetEnableInfo() *ResEnableInfo {
	if x != nil {
		return x.EnableInfo
	}
	return nil
}

type ResPersonaliseSpecialEftDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                     uint32           `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name                   string           `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Desc                   string           `protobuf:"bytes,3,opt,name=Desc,proto3" json:"Desc,omitempty"`
	Class                  ESpecialEftClass `protobuf:"varint,4,opt,name=Class,proto3,enum=ResData.ESpecialEftClass" json:"Class,omitempty"`
	Type                   ESpecialEftType  `protobuf:"varint,5,opt,name=Type,proto3,enum=ResData.ESpecialEftType" json:"Type,omitempty"`
	TypeParam              uint32           `protobuf:"varint,6,opt,name=TypeParam,proto3" json:"TypeParam,omitempty"`
	Icon                   string           `protobuf:"bytes,7,opt,name=Icon,proto3" json:"Icon,omitempty"`
	Bg                     string           `protobuf:"bytes,8,opt,name=Bg,proto3" json:"Bg,omitempty"`
	UrlPath                string           `protobuf:"bytes,9,opt,name=UrlPath,proto3" json:"UrlPath,omitempty"`
	Quality                uint32           `protobuf:"varint,10,opt,name=Quality,proto3" json:"Quality,omitempty"`
	DecompDrop             uint32           `protobuf:"varint,11,opt,name=DecompDrop,proto3" json:"DecompDrop,omitempty"`
	Jump                   string           `protobuf:"bytes,12,opt,name=Jump,proto3" json:"Jump,omitempty"`
	JumpDesc               string           `protobuf:"bytes,13,opt,name=JumpDesc,proto3" json:"JumpDesc,omitempty"`
	BulletPath             string           `protobuf:"bytes,14,opt,name=bulletPath,proto3" json:"bulletPath,omitempty"`
	HitPath                string           `protobuf:"bytes,15,opt,name=hitPath,proto3" json:"hitPath,omitempty"`
	WinPath                string           `protobuf:"bytes,16,opt,name=winPath,proto3" json:"winPath,omitempty"`
	AttackAge              string           `protobuf:"bytes,17,opt,name=attackAge,proto3" json:"attackAge,omitempty"`
	WinAge                 string           `protobuf:"bytes,18,opt,name=winAge,proto3" json:"winAge,omitempty"`
	ScarceLevel            uint32           `protobuf:"varint,19,opt,name=ScarceLevel,proto3" json:"ScarceLevel,omitempty"`
	UseJumpParam           string           `protobuf:"bytes,20,opt,name=UseJumpParam,proto3" json:"UseJumpParam,omitempty"`
	EnableInfo             *ResEnableInfo   `protobuf:"bytes,21,opt,name=EnableInfo,proto3" json:"EnableInfo,omitempty"`
	BornHaveLordID         uint32           `protobuf:"varint,22,opt,name=BornHaveLordID,proto3" json:"BornHaveLordID,omitempty"`
	TeleportationAge       string           `protobuf:"bytes,23,opt,name=TeleportationAge,proto3" json:"TeleportationAge,omitempty"`
	HostTeleportationAge   string           `protobuf:"bytes,24,opt,name=HostTeleportationAge,proto3" json:"HostTeleportationAge,omitempty"`
	AwayTeleportationAge   string           `protobuf:"bytes,25,opt,name=AwayTeleportationAge,proto3" json:"AwayTeleportationAge,omitempty"`
	TeleportBeforeResetAge string           `protobuf:"bytes,26,opt,name=TeleportBeforeResetAge,proto3" json:"TeleportBeforeResetAge,omitempty"`
	TeleportAfterResetAge  string           `protobuf:"bytes,27,opt,name=TeleportAfterResetAge,proto3" json:"TeleportAfterResetAge,omitempty"`
}

func (x *ResPersonaliseSpecialEftDataBin) Reset() {
	*x = ResPersonaliseSpecialEftDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResPersonaliseSpecialEftDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResPersonaliseSpecialEftDataBin) ProtoMessage() {}

func (x *ResPersonaliseSpecialEftDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResPersonaliseSpecialEftDataBin.ProtoReflect.Descriptor instead.
func (*ResPersonaliseSpecialEftDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{157}
}

func (x *ResPersonaliseSpecialEftDataBin) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResPersonaliseSpecialEftDataBin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResPersonaliseSpecialEftDataBin) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ResPersonaliseSpecialEftDataBin) GetClass() ESpecialEftClass {
	if x != nil {
		return x.Class
	}
	return ESpecialEftClass_EFTCLASS_INVALID
}

func (x *ResPersonaliseSpecialEftDataBin) GetType() ESpecialEftType {
	if x != nil {
		return x.Type
	}
	return ESpecialEftType_EFTTYPE_INVALID
}

func (x *ResPersonaliseSpecialEftDataBin) GetTypeParam() uint32 {
	if x != nil {
		return x.TypeParam
	}
	return 0
}

func (x *ResPersonaliseSpecialEftDataBin) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *ResPersonaliseSpecialEftDataBin) GetBg() string {
	if x != nil {
		return x.Bg
	}
	return ""
}

func (x *ResPersonaliseSpecialEftDataBin) GetUrlPath() string {
	if x != nil {
		return x.UrlPath
	}
	return ""
}

func (x *ResPersonaliseSpecialEftDataBin) GetQuality() uint32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *ResPersonaliseSpecialEftDataBin) GetDecompDrop() uint32 {
	if x != nil {
		return x.DecompDrop
	}
	return 0
}

func (x *ResPersonaliseSpecialEftDataBin) GetJump() string {
	if x != nil {
		return x.Jump
	}
	return ""
}

func (x *ResPersonaliseSpecialEftDataBin) GetJumpDesc() string {
	if x != nil {
		return x.JumpDesc
	}
	return ""
}

func (x *ResPersonaliseSpecialEftDataBin) GetBulletPath() string {
	if x != nil {
		return x.BulletPath
	}
	return ""
}

func (x *ResPersonaliseSpecialEftDataBin) GetHitPath() string {
	if x != nil {
		return x.HitPath
	}
	return ""
}

func (x *ResPersonaliseSpecialEftDataBin) GetWinPath() string {
	if x != nil {
		return x.WinPath
	}
	return ""
}

func (x *ResPersonaliseSpecialEftDataBin) GetAttackAge() string {
	if x != nil {
		return x.AttackAge
	}
	return ""
}

func (x *ResPersonaliseSpecialEftDataBin) GetWinAge() string {
	if x != nil {
		return x.WinAge
	}
	return ""
}

func (x *ResPersonaliseSpecialEftDataBin) GetScarceLevel() uint32 {
	if x != nil {
		return x.ScarceLevel
	}
	return 0
}

func (x *ResPersonaliseSpecialEftDataBin) GetUseJumpParam() string {
	if x != nil {
		return x.UseJumpParam
	}
	return ""
}

func (x *ResPersonaliseSpecialEftDataBin) GetEnableInfo() *ResEnableInfo {
	if x != nil {
		return x.EnableInfo
	}
	return nil
}

func (x *ResPersonaliseSpecialEftDataBin) GetBornHaveLordID() uint32 {
	if x != nil {
		return x.BornHaveLordID
	}
	return 0
}

func (x *ResPersonaliseSpecialEftDataBin) GetTeleportationAge() string {
	if x != nil {
		return x.TeleportationAge
	}
	return ""
}

func (x *ResPersonaliseSpecialEftDataBin) GetHostTeleportationAge() string {
	if x != nil {
		return x.HostTeleportationAge
	}
	return ""
}

func (x *ResPersonaliseSpecialEftDataBin) GetAwayTeleportationAge() string {
	if x != nil {
		return x.AwayTeleportationAge
	}
	return ""
}

func (x *ResPersonaliseSpecialEftDataBin) GetTeleportBeforeResetAge() string {
	if x != nil {
		return x.TeleportBeforeResetAge
	}
	return ""
}

func (x *ResPersonaliseSpecialEftDataBin) GetTeleportAfterResetAge() string {
	if x != nil {
		return x.TeleportAfterResetAge
	}
	return ""
}

type ResPersonaliseTypeDatabin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     ResPersonaliseTypeDatabin_PersonaliseType `protobuf:"varint,1,opt,name=Type,proto3,enum=ResData.ResPersonaliseTypeDatabin_PersonaliseType" json:"Type,omitempty"`
	ShowText string                                    `protobuf:"bytes,2,opt,name=ShowText,proto3" json:"ShowText,omitempty"`
	IconPath string                                    `protobuf:"bytes,3,opt,name=IconPath,proto3" json:"IconPath,omitempty"`
}

func (x *ResPersonaliseTypeDatabin) Reset() {
	*x = ResPersonaliseTypeDatabin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResPersonaliseTypeDatabin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResPersonaliseTypeDatabin) ProtoMessage() {}

func (x *ResPersonaliseTypeDatabin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResPersonaliseTypeDatabin.ProtoReflect.Descriptor instead.
func (*ResPersonaliseTypeDatabin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{158}
}

func (x *ResPersonaliseTypeDatabin) GetType() ResPersonaliseTypeDatabin_PersonaliseType {
	if x != nil {
		return x.Type
	}
	return ResPersonaliseTypeDatabin_PersonaliseType_NONE
}

func (x *ResPersonaliseTypeDatabin) GetShowText() string {
	if x != nil {
		return x.ShowText
	}
	return ""
}

func (x *ResPersonaliseTypeDatabin) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

type PersonaliseConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChessBoardCfg            *ResPersonaliseChessboardDataBin `protobuf:"bytes,1,opt,name=ChessBoardCfg,proto3" json:"ChessBoardCfg,omitempty"`
	PersonaliseConstCfg      *ResPersonaliseConstDatabin      `protobuf:"bytes,2,opt,name=PersonaliseConstCfg,proto3" json:"PersonaliseConstCfg,omitempty"`
	ChessBoardPartDataBin    *ResChessboardPartDataBin        `protobuf:"bytes,3,opt,name=ChessBoardPartDataBin,proto3" json:"ChessBoardPartDataBin,omitempty"`
	ChessBoardPartSetDataBin *ResChessboardPartSetDataBin     `protobuf:"bytes,4,opt,name=ChessBoardPartSetDataBin,proto3" json:"ChessBoardPartSetDataBin,omitempty"`
	EmojiDataBin             *ResPersonaliseEmojiDataBin      `protobuf:"bytes,5,opt,name=EmojiDataBin,proto3" json:"EmojiDataBin,omitempty"`
	SpecialEftDataBin        *ResPersonaliseSpecialEftDataBin `protobuf:"bytes,6,opt,name=SpecialEftDataBin,proto3" json:"SpecialEftDataBin,omitempty"`
}

func (x *PersonaliseConf) Reset() {
	*x = PersonaliseConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonaliseConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonaliseConf) ProtoMessage() {}

func (x *PersonaliseConf) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonaliseConf.ProtoReflect.Descriptor instead.
func (*PersonaliseConf) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{159}
}

func (x *PersonaliseConf) GetChessBoardCfg() *ResPersonaliseChessboardDataBin {
	if x != nil {
		return x.ChessBoardCfg
	}
	return nil
}

func (x *PersonaliseConf) GetPersonaliseConstCfg() *ResPersonaliseConstDatabin {
	if x != nil {
		return x.PersonaliseConstCfg
	}
	return nil
}

func (x *PersonaliseConf) GetChessBoardPartDataBin() *ResChessboardPartDataBin {
	if x != nil {
		return x.ChessBoardPartDataBin
	}
	return nil
}

func (x *PersonaliseConf) GetChessBoardPartSetDataBin() *ResChessboardPartSetDataBin {
	if x != nil {
		return x.ChessBoardPartSetDataBin
	}
	return nil
}

func (x *PersonaliseConf) GetEmojiDataBin() *ResPersonaliseEmojiDataBin {
	if x != nil {
		return x.EmojiDataBin
	}
	return nil
}

func (x *PersonaliseConf) GetSpecialEftDataBin() *ResPersonaliseSpecialEftDataBin {
	if x != nil {
		return x.SpecialEftDataBin
	}
	return nil
}

type ResChessDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChessID         uint32 `protobuf:"varint,1,opt,name=ChessID,proto3" json:"ChessID,omitempty"`
	HeroID          uint32 `protobuf:"varint,5,opt,name=HeroID,proto3" json:"HeroID,omitempty"`
	SeasonID        uint32 `protobuf:"varint,11,opt,name=SeasonID,proto3" json:"SeasonID,omitempty"`
	PlayModUniqID   uint32 `protobuf:"varint,12,opt,name=PlayModUniqID,proto3" json:"PlayModUniqID,omitempty"`
	SkinID          uint32 `protobuf:"varint,13,opt,name=SkinID,proto3" json:"SkinID,omitempty"`
	ChessName       string `protobuf:"bytes,14,opt,name=ChessName,proto3" json:"ChessName,omitempty"`
	BroadcastOffset string `protobuf:"bytes,15,opt,name=BroadcastOffset,proto3" json:"BroadcastOffset,omitempty"`
}

func (x *ResChessDataBin) Reset() {
	*x = ResChessDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResChessDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResChessDataBin) ProtoMessage() {}

func (x *ResChessDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResChessDataBin.ProtoReflect.Descriptor instead.
func (*ResChessDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{160}
}

func (x *ResChessDataBin) GetChessID() uint32 {
	if x != nil {
		return x.ChessID
	}
	return 0
}

func (x *ResChessDataBin) GetHeroID() uint32 {
	if x != nil {
		return x.HeroID
	}
	return 0
}

func (x *ResChessDataBin) GetSeasonID() uint32 {
	if x != nil {
		return x.SeasonID
	}
	return 0
}

func (x *ResChessDataBin) GetPlayModUniqID() uint32 {
	if x != nil {
		return x.PlayModUniqID
	}
	return 0
}

func (x *ResChessDataBin) GetSkinID() uint32 {
	if x != nil {
		return x.SkinID
	}
	return 0
}

func (x *ResChessDataBin) GetChessName() string {
	if x != nil {
		return x.ChessName
	}
	return ""
}

func (x *ResChessDataBin) GetBroadcastOffset() string {
	if x != nil {
		return x.BroadcastOffset
	}
	return ""
}

type ResChessSeasonInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonID        uint32 `protobuf:"varint,1,opt,name=SeasonID,proto3" json:"SeasonID,omitempty"`
	CustomScenePath string `protobuf:"bytes,3,opt,name=CustomScenePath,proto3" json:"CustomScenePath,omitempty"`
	CustomBadgePath string `protobuf:"bytes,4,opt,name=CustomBadgePath,proto3" json:"CustomBadgePath,omitempty"`
	SeasonImage     string `protobuf:"bytes,5,opt,name=SeasonImage,proto3" json:"SeasonImage,omitempty"`
	RefreshType     uint32 `protobuf:"varint,6,opt,name=RefreshType,proto3" json:"RefreshType,omitempty"`
	SpecialName     string `protobuf:"bytes,8,opt,name=SpecialName,proto3" json:"SpecialName,omitempty"`
	CompShowNum     uint32 `protobuf:"varint,9,opt,name=CompShowNum,proto3" json:"CompShowNum,omitempty"`
	JumpAchieveType uint32 `protobuf:"varint,10,opt,name=JumpAchieveType,proto3" json:"JumpAchieveType,omitempty"`
}

func (x *ResChessSeasonInfo) Reset() {
	*x = ResChessSeasonInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResChessSeasonInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResChessSeasonInfo) ProtoMessage() {}

func (x *ResChessSeasonInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResChessSeasonInfo.ProtoReflect.Descriptor instead.
func (*ResChessSeasonInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{161}
}

func (x *ResChessSeasonInfo) GetSeasonID() uint32 {
	if x != nil {
		return x.SeasonID
	}
	return 0
}

func (x *ResChessSeasonInfo) GetCustomScenePath() string {
	if x != nil {
		return x.CustomScenePath
	}
	return ""
}

func (x *ResChessSeasonInfo) GetCustomBadgePath() string {
	if x != nil {
		return x.CustomBadgePath
	}
	return ""
}

func (x *ResChessSeasonInfo) GetSeasonImage() string {
	if x != nil {
		return x.SeasonImage
	}
	return ""
}

func (x *ResChessSeasonInfo) GetRefreshType() uint32 {
	if x != nil {
		return x.RefreshType
	}
	return 0
}

func (x *ResChessSeasonInfo) GetSpecialName() string {
	if x != nil {
		return x.SpecialName
	}
	return ""
}

func (x *ResChessSeasonInfo) GetCompShowNum() uint32 {
	if x != nil {
		return x.CompShowNum
	}
	return 0
}

func (x *ResChessSeasonInfo) GetJumpAchieveType() uint32 {
	if x != nil {
		return x.JumpAchieveType
	}
	return 0
}

type ResChessStatisticInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                       uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	STAcntChessStatisticName string `protobuf:"bytes,2,opt,name=STAcntChessStatisticName,proto3" json:"STAcntChessStatisticName,omitempty"`
	Desc                     string `protobuf:"bytes,3,opt,name=Desc,proto3" json:"Desc,omitempty"`
	IsShow                   bool   `protobuf:"varint,4,opt,name=IsShow,proto3" json:"IsShow,omitempty"`
}

func (x *ResChessStatisticInfo) Reset() {
	*x = ResChessStatisticInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResChessStatisticInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResChessStatisticInfo) ProtoMessage() {}

func (x *ResChessStatisticInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResChessStatisticInfo.ProtoReflect.Descriptor instead.
func (*ResChessStatisticInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{162}
}

func (x *ResChessStatisticInfo) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResChessStatisticInfo) GetSTAcntChessStatisticName() string {
	if x != nil {
		return x.STAcntChessStatisticName
	}
	return ""
}

func (x *ResChessStatisticInfo) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ResChessStatisticInfo) GetIsShow() bool {
	if x != nil {
		return x.IsShow
	}
	return false
}

// 棋子组合表
type ResChessCombInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       uint32   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ChessIDs []uint32 `protobuf:"varint,2,rep,packed,name=ChessIDs,proto3" json:"ChessIDs,omitempty"`
}

func (x *ResChessCombInfo) Reset() {
	*x = ResChessCombInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResChessCombInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResChessCombInfo) ProtoMessage() {}

func (x *ResChessCombInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResChessCombInfo.ProtoReflect.Descriptor instead.
func (*ResChessCombInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{163}
}

func (x *ResChessCombInfo) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResChessCombInfo) GetChessIDs() []uint32 {
	if x != nil {
		return x.ChessIDs
	}
	return nil
}

type ResChessDecorateDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DecorateID           uint32                    `protobuf:"varint,1,opt,name=DecorateID,proto3" json:"DecorateID,omitempty"`
	SeasonID             uint32                    `protobuf:"varint,2,opt,name=SeasonID,proto3" json:"SeasonID,omitempty"`
	ChessID              uint32                    `protobuf:"varint,3,opt,name=ChessID,proto3" json:"ChessID,omitempty"`
	DecorateType         COM_CHESSDECORATE_SUBTYPE `protobuf:"varint,4,opt,name=DecorateType,proto3,enum=ResData.COM_CHESSDECORATE_SUBTYPE" json:"DecorateType,omitempty"`
	CanCombine           bool                      `protobuf:"varint,5,opt,name=CanCombine,proto3" json:"CanCombine,omitempty"`
	Quality              RES_PROP_QUALITY_TYPE     `protobuf:"varint,6,opt,name=Quality,proto3,enum=ResData.RES_PROP_QUALITY_TYPE" json:"Quality,omitempty"`
	DecorateIcon         string                    `protobuf:"bytes,7,opt,name=DecorateIcon,proto3" json:"DecorateIcon,omitempty"`
	DecorateName         string                    `protobuf:"bytes,8,opt,name=DecorateName,proto3" json:"DecorateName,omitempty"`
	GetWayInfo           string                    `protobuf:"bytes,9,opt,name=GetWayInfo,proto3" json:"GetWayInfo,omitempty"`
	SimpleName           string                    `protobuf:"bytes,10,opt,name=SimpleName,proto3" json:"SimpleName,omitempty"`
	DecorateBigIcon      string                    `protobuf:"bytes,11,opt,name=DecorateBigIcon,proto3" json:"DecorateBigIcon,omitempty"`
	TipsContent          string                    `protobuf:"bytes,12,opt,name=TipsContent,proto3" json:"TipsContent,omitempty"`
	AudioInfoName        string                    `protobuf:"bytes,13,opt,name=AudioInfoName,proto3" json:"AudioInfoName,omitempty"`
	AudioInfoContent     string                    `protobuf:"bytes,14,opt,name=AudioInfoContent,proto3" json:"AudioInfoContent,omitempty"`
	BattleBroadcastAsset string                    `protobuf:"bytes,15,opt,name=BattleBroadcastAsset,proto3" json:"BattleBroadcastAsset,omitempty"`
	KillBroadcastAsset   string                    `protobuf:"bytes,16,opt,name=KillBroadcastAsset,proto3" json:"KillBroadcastAsset,omitempty"`
	JumpParam            string                    `protobuf:"bytes,17,opt,name=JumpParam,proto3" json:"JumpParam,omitempty"`
}

func (x *ResChessDecorateDataBin) Reset() {
	*x = ResChessDecorateDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResChessDecorateDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResChessDecorateDataBin) ProtoMessage() {}

func (x *ResChessDecorateDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResChessDecorateDataBin.ProtoReflect.Descriptor instead.
func (*ResChessDecorateDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{164}
}

func (x *ResChessDecorateDataBin) GetDecorateID() uint32 {
	if x != nil {
		return x.DecorateID
	}
	return 0
}

func (x *ResChessDecorateDataBin) GetSeasonID() uint32 {
	if x != nil {
		return x.SeasonID
	}
	return 0
}

func (x *ResChessDecorateDataBin) GetChessID() uint32 {
	if x != nil {
		return x.ChessID
	}
	return 0
}

func (x *ResChessDecorateDataBin) GetDecorateType() COM_CHESSDECORATE_SUBTYPE {
	if x != nil {
		return x.DecorateType
	}
	return COM_CHESSDECORATE_SUBTYPE_COM_CHESSDECORATE_TYPE_INVALID
}

func (x *ResChessDecorateDataBin) GetCanCombine() bool {
	if x != nil {
		return x.CanCombine
	}
	return false
}

func (x *ResChessDecorateDataBin) GetQuality() RES_PROP_QUALITY_TYPE {
	if x != nil {
		return x.Quality
	}
	return RES_PROP_QUALITY_TYPE_PROP_INVALID
}

func (x *ResChessDecorateDataBin) GetDecorateIcon() string {
	if x != nil {
		return x.DecorateIcon
	}
	return ""
}

func (x *ResChessDecorateDataBin) GetDecorateName() string {
	if x != nil {
		return x.DecorateName
	}
	return ""
}

func (x *ResChessDecorateDataBin) GetGetWayInfo() string {
	if x != nil {
		return x.GetWayInfo
	}
	return ""
}

func (x *ResChessDecorateDataBin) GetSimpleName() string {
	if x != nil {
		return x.SimpleName
	}
	return ""
}

func (x *ResChessDecorateDataBin) GetDecorateBigIcon() string {
	if x != nil {
		return x.DecorateBigIcon
	}
	return ""
}

func (x *ResChessDecorateDataBin) GetTipsContent() string {
	if x != nil {
		return x.TipsContent
	}
	return ""
}

func (x *ResChessDecorateDataBin) GetAudioInfoName() string {
	if x != nil {
		return x.AudioInfoName
	}
	return ""
}

func (x *ResChessDecorateDataBin) GetAudioInfoContent() string {
	if x != nil {
		return x.AudioInfoContent
	}
	return ""
}

func (x *ResChessDecorateDataBin) GetBattleBroadcastAsset() string {
	if x != nil {
		return x.BattleBroadcastAsset
	}
	return ""
}

func (x *ResChessDecorateDataBin) GetKillBroadcastAsset() string {
	if x != nil {
		return x.KillBroadcastAsset
	}
	return ""
}

func (x *ResChessDecorateDataBin) GetJumpParam() string {
	if x != nil {
		return x.JumpParam
	}
	return ""
}

type ResDecorateCombineResolveData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroQuality     uint32                    `protobuf:"varint,1,opt,name=HeroQuality,proto3" json:"HeroQuality,omitempty"`
	DecorateType    COM_CHESSDECORATE_SUBTYPE `protobuf:"varint,2,opt,name=DecorateType,proto3,enum=ResData.COM_CHESSDECORATE_SUBTYPE" json:"DecorateType,omitempty"`
	ResolveGainFrag uint32                    `protobuf:"varint,3,opt,name=ResolveGainFrag,proto3" json:"ResolveGainFrag,omitempty"`
	CombineNeedFrag uint32                    `protobuf:"varint,4,opt,name=CombineNeedFrag,proto3" json:"CombineNeedFrag,omitempty"`
}

func (x *ResDecorateCombineResolveData) Reset() {
	*x = ResDecorateCombineResolveData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDecorateCombineResolveData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDecorateCombineResolveData) ProtoMessage() {}

func (x *ResDecorateCombineResolveData) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDecorateCombineResolveData.ProtoReflect.Descriptor instead.
func (*ResDecorateCombineResolveData) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{165}
}

func (x *ResDecorateCombineResolveData) GetHeroQuality() uint32 {
	if x != nil {
		return x.HeroQuality
	}
	return 0
}

func (x *ResDecorateCombineResolveData) GetDecorateType() COM_CHESSDECORATE_SUBTYPE {
	if x != nil {
		return x.DecorateType
	}
	return COM_CHESSDECORATE_SUBTYPE_COM_CHESSDECORATE_TYPE_INVALID
}

func (x *ResDecorateCombineResolveData) GetResolveGainFrag() uint32 {
	if x != nil {
		return x.ResolveGainFrag
	}
	return 0
}

func (x *ResDecorateCombineResolveData) GetCombineNeedFrag() uint32 {
	if x != nil {
		return x.CombineNeedFrag
	}
	return 0
}

type ResCollectionTaskDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonID      uint32 `protobuf:"varint,1,opt,name=SeasonID,proto3" json:"SeasonID,omitempty"`
	AchieveTaskID uint32 `protobuf:"varint,2,opt,name=AchieveTaskID,proto3" json:"AchieveTaskID,omitempty"`
	HeroQuality   uint32 `protobuf:"varint,3,opt,name=HeroQuality,proto3" json:"HeroQuality,omitempty"`
	JumpParam     string `protobuf:"bytes,4,opt,name=JumpParam,proto3" json:"JumpParam,omitempty"`
}

func (x *ResCollectionTaskDataBin) Reset() {
	*x = ResCollectionTaskDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResCollectionTaskDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResCollectionTaskDataBin) ProtoMessage() {}

func (x *ResCollectionTaskDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResCollectionTaskDataBin.ProtoReflect.Descriptor instead.
func (*ResCollectionTaskDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{166}
}

func (x *ResCollectionTaskDataBin) GetSeasonID() uint32 {
	if x != nil {
		return x.SeasonID
	}
	return 0
}

func (x *ResCollectionTaskDataBin) GetAchieveTaskID() uint32 {
	if x != nil {
		return x.AchieveTaskID
	}
	return 0
}

func (x *ResCollectionTaskDataBin) GetHeroQuality() uint32 {
	if x != nil {
		return x.HeroQuality
	}
	return 0
}

func (x *ResCollectionTaskDataBin) GetJumpParam() string {
	if x != nil {
		return x.JumpParam
	}
	return ""
}

type ChessConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChessData              *ResChessDataBin               `protobuf:"bytes,1,opt,name=ChessData,proto3" json:"ChessData,omitempty"`
	PlayModChessHeroConf   *ResChessHeroConfDataBin       `protobuf:"bytes,4,opt,name=PlayModChessHeroConf,proto3" json:"PlayModChessHeroConf,omitempty"`
	ChessSeasonInfo        *ResChessSeasonInfo            `protobuf:"bytes,6,opt,name=ChessSeasonInfo,proto3" json:"ChessSeasonInfo,omitempty"`
	ChessStatisticInfo     *ResChessStatisticInfo         `protobuf:"bytes,7,opt,name=ChessStatisticInfo,proto3" json:"ChessStatisticInfo,omitempty"`
	ChessCombInfo          *ResChessCombInfo              `protobuf:"bytes,8,opt,name=ChessCombInfo,proto3" json:"ChessCombInfo,omitempty"`
	ChessDecorateData      *ResChessDecorateDataBin       `protobuf:"bytes,10,opt,name=ChessDecorateData,proto3" json:"ChessDecorateData,omitempty"`
	DecorateCombineResolve *ResDecorateCombineResolveData `protobuf:"bytes,11,opt,name=DecorateCombineResolve,proto3" json:"DecorateCombineResolve,omitempty"`
}

func (x *ChessConf) Reset() {
	*x = ChessConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChessConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChessConf) ProtoMessage() {}

func (x *ChessConf) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChessConf.ProtoReflect.Descriptor instead.
func (*ChessConf) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{167}
}

func (x *ChessConf) GetChessData() *ResChessDataBin {
	if x != nil {
		return x.ChessData
	}
	return nil
}

func (x *ChessConf) GetPlayModChessHeroConf() *ResChessHeroConfDataBin {
	if x != nil {
		return x.PlayModChessHeroConf
	}
	return nil
}

func (x *ChessConf) GetChessSeasonInfo() *ResChessSeasonInfo {
	if x != nil {
		return x.ChessSeasonInfo
	}
	return nil
}

func (x *ChessConf) GetChessStatisticInfo() *ResChessStatisticInfo {
	if x != nil {
		return x.ChessStatisticInfo
	}
	return nil
}

func (x *ChessConf) GetChessCombInfo() *ResChessCombInfo {
	if x != nil {
		return x.ChessCombInfo
	}
	return nil
}

func (x *ChessConf) GetChessDecorateData() *ResChessDecorateDataBin {
	if x != nil {
		return x.ChessDecorateData
	}
	return nil
}

func (x *ChessConf) GetDecorateCombineResolve() *ResDecorateCombineResolveData {
	if x != nil {
		return x.DecorateCombineResolve
	}
	return nil
}

type EquipConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EquipData *ResEquipDataBin `protobuf:"bytes,1,opt,name=EquipData,proto3" json:"EquipData,omitempty"`
}

func (x *EquipConf) Reset() {
	*x = EquipConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipConf) ProtoMessage() {}

func (x *EquipConf) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipConf.ProtoReflect.Descriptor instead.
func (*EquipConf) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{168}
}

func (x *EquipConf) GetEquipData() *ResEquipDataBin {
	if x != nil {
		return x.EquipData
	}
	return nil
}

// 通用活动表
type ResCommonWealDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WealID            uint32 `protobuf:"varint,1,opt,name=WealID,proto3" json:"WealID,omitempty"`
	WealType          uint32 `protobuf:"varint,2,opt,name=WealType,proto3" json:"WealType,omitempty"`
	WealSecondaryName string `protobuf:"bytes,3,opt,name=WealSecondaryName,proto3" json:"WealSecondaryName,omitempty"`
	WealName          string `protobuf:"bytes,4,opt,name=WealName,proto3" json:"WealName,omitempty"`
	WealDesc          string `protobuf:"bytes,5,opt,name=WealDesc,proto3" json:"WealDesc,omitempty"`
	WealTabDesc       string `protobuf:"bytes,6,opt,name=WealTabDesc,proto3" json:"WealTabDesc,omitempty"`
	WealTabType       uint32 `protobuf:"varint,7,opt,name=WealTabType,proto3" json:"WealTabType,omitempty"`
	IsShow            uint32 `protobuf:"varint,8,opt,name=IsShow,proto3" json:"IsShow,omitempty"`
	SortID            uint32 `protobuf:"varint,9,opt,name=SortID,proto3" json:"SortID,omitempty"`
	IsCommend         uint32 `protobuf:"varint,10,opt,name=IsCommend,proto3" json:"IsCommend,omitempty"`
	TimeDes           string `protobuf:"bytes,11,opt,name=TimeDes,proto3" json:"TimeDes,omitempty"`
	StartTime         string `protobuf:"bytes,12,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime           string `protobuf:"bytes,13,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	StartTimeGen      uint32 `protobuf:"varint,14,opt,name=StartTimeGen,proto3" json:"StartTimeGen,omitempty"`
	EndTimeGen        uint32 `protobuf:"varint,15,opt,name=EndTimeGen,proto3" json:"EndTimeGen,omitempty"`
	ShowTime          string `protobuf:"bytes,16,opt,name=ShowTime,proto3" json:"ShowTime,omitempty"`
	Entrance          string `protobuf:"bytes,17,opt,name=Entrance,proto3" json:"Entrance,omitempty"`
	CycleType         uint32 `protobuf:"varint,19,opt,name=CycleType,proto3" json:"CycleType,omitempty"`
	CycleParam        uint32 `protobuf:"varint,20,opt,name=CycleParam,proto3" json:"CycleParam,omitempty"`
	LevelLimit        uint32 `protobuf:"varint,21,opt,name=LevelLimit,proto3" json:"LevelLimit,omitempty"`
	WealChildType     uint32 `protobuf:"varint,22,opt,name=WealChildType,proto3" json:"WealChildType,omitempty"`
}

func (x *ResCommonWealDataBin) Reset() {
	*x = ResCommonWealDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResCommonWealDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResCommonWealDataBin) ProtoMessage() {}

func (x *ResCommonWealDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResCommonWealDataBin.ProtoReflect.Descriptor instead.
func (*ResCommonWealDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{169}
}

func (x *ResCommonWealDataBin) GetWealID() uint32 {
	if x != nil {
		return x.WealID
	}
	return 0
}

func (x *ResCommonWealDataBin) GetWealType() uint32 {
	if x != nil {
		return x.WealType
	}
	return 0
}

func (x *ResCommonWealDataBin) GetWealSecondaryName() string {
	if x != nil {
		return x.WealSecondaryName
	}
	return ""
}

func (x *ResCommonWealDataBin) GetWealName() string {
	if x != nil {
		return x.WealName
	}
	return ""
}

func (x *ResCommonWealDataBin) GetWealDesc() string {
	if x != nil {
		return x.WealDesc
	}
	return ""
}

func (x *ResCommonWealDataBin) GetWealTabDesc() string {
	if x != nil {
		return x.WealTabDesc
	}
	return ""
}

func (x *ResCommonWealDataBin) GetWealTabType() uint32 {
	if x != nil {
		return x.WealTabType
	}
	return 0
}

func (x *ResCommonWealDataBin) GetIsShow() uint32 {
	if x != nil {
		return x.IsShow
	}
	return 0
}

func (x *ResCommonWealDataBin) GetSortID() uint32 {
	if x != nil {
		return x.SortID
	}
	return 0
}

func (x *ResCommonWealDataBin) GetIsCommend() uint32 {
	if x != nil {
		return x.IsCommend
	}
	return 0
}

func (x *ResCommonWealDataBin) GetTimeDes() string {
	if x != nil {
		return x.TimeDes
	}
	return ""
}

func (x *ResCommonWealDataBin) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ResCommonWealDataBin) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *ResCommonWealDataBin) GetStartTimeGen() uint32 {
	if x != nil {
		return x.StartTimeGen
	}
	return 0
}

func (x *ResCommonWealDataBin) GetEndTimeGen() uint32 {
	if x != nil {
		return x.EndTimeGen
	}
	return 0
}

func (x *ResCommonWealDataBin) GetShowTime() string {
	if x != nil {
		return x.ShowTime
	}
	return ""
}

func (x *ResCommonWealDataBin) GetEntrance() string {
	if x != nil {
		return x.Entrance
	}
	return ""
}

func (x *ResCommonWealDataBin) GetCycleType() uint32 {
	if x != nil {
		return x.CycleType
	}
	return 0
}

func (x *ResCommonWealDataBin) GetCycleParam() uint32 {
	if x != nil {
		return x.CycleParam
	}
	return 0
}

func (x *ResCommonWealDataBin) GetLevelLimit() uint32 {
	if x != nil {
		return x.LevelLimit
	}
	return 0
}

func (x *ResCommonWealDataBin) GetWealChildType() uint32 {
	if x != nil {
		return x.WealChildType
	}
	return 0
}

// 活动任务表
type ResWealTaskDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID        uint32       `protobuf:"varint,1,opt,name=TaskID,proto3" json:"TaskID,omitempty"`
	BelongWealID  uint32       `protobuf:"varint,2,opt,name=BelongWealID,proto3" json:"BelongWealID,omitempty"`
	StartTime     string       `protobuf:"bytes,3,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime       string       `protobuf:"bytes,4,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	StartTimeGen  uint32       `protobuf:"varint,5,opt,name=StartTimeGen,proto3" json:"StartTimeGen,omitempty"`
	EndTimeGen    uint32       `protobuf:"varint,6,opt,name=EndTimeGen,proto3" json:"EndTimeGen,omitempty"`
	ShowTime      string       `protobuf:"bytes,7,opt,name=ShowTime,proto3" json:"ShowTime,omitempty"`
	FinishCond    *ResCondInfo `protobuf:"bytes,8,opt,name=FinishCond,proto3" json:"FinishCond,omitempty"`
	AwardDropID   uint32       `protobuf:"varint,9,opt,name=AwardDropID,proto3" json:"AwardDropID,omitempty"`
	UnlockCond    *ResCondInfo `protobuf:"bytes,10,opt,name=UnlockCond,proto3" json:"UnlockCond,omitempty"`
	FinishCondDes string       `protobuf:"bytes,11,opt,name=FinishCondDes,proto3" json:"FinishCondDes,omitempty"`
	BelongTypeID  uint32       `protobuf:"varint,12,opt,name=BelongTypeID,proto3" json:"BelongTypeID,omitempty"`
}

func (x *ResWealTaskDataBin) Reset() {
	*x = ResWealTaskDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResWealTaskDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResWealTaskDataBin) ProtoMessage() {}

func (x *ResWealTaskDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResWealTaskDataBin.ProtoReflect.Descriptor instead.
func (*ResWealTaskDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{170}
}

func (x *ResWealTaskDataBin) GetTaskID() uint32 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *ResWealTaskDataBin) GetBelongWealID() uint32 {
	if x != nil {
		return x.BelongWealID
	}
	return 0
}

func (x *ResWealTaskDataBin) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ResWealTaskDataBin) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *ResWealTaskDataBin) GetStartTimeGen() uint32 {
	if x != nil {
		return x.StartTimeGen
	}
	return 0
}

func (x *ResWealTaskDataBin) GetEndTimeGen() uint32 {
	if x != nil {
		return x.EndTimeGen
	}
	return 0
}

func (x *ResWealTaskDataBin) GetShowTime() string {
	if x != nil {
		return x.ShowTime
	}
	return ""
}

func (x *ResWealTaskDataBin) GetFinishCond() *ResCondInfo {
	if x != nil {
		return x.FinishCond
	}
	return nil
}

func (x *ResWealTaskDataBin) GetAwardDropID() uint32 {
	if x != nil {
		return x.AwardDropID
	}
	return 0
}

func (x *ResWealTaskDataBin) GetUnlockCond() *ResCondInfo {
	if x != nil {
		return x.UnlockCond
	}
	return nil
}

func (x *ResWealTaskDataBin) GetFinishCondDes() string {
	if x != nil {
		return x.FinishCondDes
	}
	return ""
}

func (x *ResWealTaskDataBin) GetBelongTypeID() uint32 {
	if x != nil {
		return x.BelongTypeID
	}
	return 0
}

type ResWealExchangeDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID     uint32       `protobuf:"varint,1,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	BelongWealID   uint32       `protobuf:"varint,2,opt,name=BelongWealID,proto3" json:"BelongWealID,omitempty"`
	BindShowWealID uint32       `protobuf:"varint,3,opt,name=BindShowWealID,proto3" json:"BindShowWealID,omitempty"`
	StartTime      string       `protobuf:"bytes,4,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime        string       `protobuf:"bytes,5,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	StartTimeGen   uint32       `protobuf:"varint,6,opt,name=StartTimeGen,proto3" json:"StartTimeGen,omitempty"`
	EndTimeGen     uint32       `protobuf:"varint,7,opt,name=EndTimeGen,proto3" json:"EndTimeGen,omitempty"`
	ShowTime       string       `protobuf:"bytes,8,opt,name=ShowTime,proto3" json:"ShowTime,omitempty"`
	ExchangeItem   *ResGameItem `protobuf:"bytes,9,opt,name=ExchangeItem,proto3" json:"ExchangeItem,omitempty"`
	CostItem       *ResGameItem `protobuf:"bytes,10,opt,name=CostItem,proto3" json:"CostItem,omitempty"`
	LimitCnt       uint32       `protobuf:"varint,11,opt,name=LimitCnt,proto3" json:"LimitCnt,omitempty"`
}

func (x *ResWealExchangeDataBin) Reset() {
	*x = ResWealExchangeDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResWealExchangeDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResWealExchangeDataBin) ProtoMessage() {}

func (x *ResWealExchangeDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResWealExchangeDataBin.ProtoReflect.Descriptor instead.
func (*ResWealExchangeDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{171}
}

func (x *ResWealExchangeDataBin) GetExchangeID() uint32 {
	if x != nil {
		return x.ExchangeID
	}
	return 0
}

func (x *ResWealExchangeDataBin) GetBelongWealID() uint32 {
	if x != nil {
		return x.BelongWealID
	}
	return 0
}

func (x *ResWealExchangeDataBin) GetBindShowWealID() uint32 {
	if x != nil {
		return x.BindShowWealID
	}
	return 0
}

func (x *ResWealExchangeDataBin) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ResWealExchangeDataBin) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *ResWealExchangeDataBin) GetStartTimeGen() uint32 {
	if x != nil {
		return x.StartTimeGen
	}
	return 0
}

func (x *ResWealExchangeDataBin) GetEndTimeGen() uint32 {
	if x != nil {
		return x.EndTimeGen
	}
	return 0
}

func (x *ResWealExchangeDataBin) GetShowTime() string {
	if x != nil {
		return x.ShowTime
	}
	return ""
}

func (x *ResWealExchangeDataBin) GetExchangeItem() *ResGameItem {
	if x != nil {
		return x.ExchangeItem
	}
	return nil
}

func (x *ResWealExchangeDataBin) GetCostItem() *ResGameItem {
	if x != nil {
		return x.CostItem
	}
	return nil
}

func (x *ResWealExchangeDataBin) GetLimitCnt() uint32 {
	if x != nil {
		return x.LimitCnt
	}
	return 0
}

type WealConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonWealData   *ResCommonWealDataBin   `protobuf:"bytes,1,opt,name=CommonWealData,proto3" json:"CommonWealData,omitempty"`
	WealTaskData     *ResWealTaskDataBin     `protobuf:"bytes,2,opt,name=WealTaskData,proto3" json:"WealTaskData,omitempty"`
	WealExchangeData *ResWealExchangeDataBin `protobuf:"bytes,3,opt,name=WealExchangeData,proto3" json:"WealExchangeData,omitempty"`
}

func (x *WealConf) Reset() {
	*x = WealConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WealConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WealConf) ProtoMessage() {}

func (x *WealConf) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WealConf.ProtoReflect.Descriptor instead.
func (*WealConf) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{172}
}

func (x *WealConf) GetCommonWealData() *ResCommonWealDataBin {
	if x != nil {
		return x.CommonWealData
	}
	return nil
}

func (x *WealConf) GetWealTaskData() *ResWealTaskDataBin {
	if x != nil {
		return x.WealTaskData
	}
	return nil
}

func (x *WealConf) GetWealExchangeData() *ResWealExchangeDataBin {
	if x != nil {
		return x.WealExchangeData
	}
	return nil
}

type ResAchieveTaskCfgDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID         uint32       `protobuf:"varint,1,opt,name=TaskID,proto3" json:"TaskID,omitempty"`
	NxtTaskID      uint32       `protobuf:"varint,2,opt,name=NxtTaskID,proto3" json:"NxtTaskID,omitempty"`
	AchieveTaskDes string       `protobuf:"bytes,7,opt,name=AchieveTaskDes,proto3" json:"AchieveTaskDes,omitempty"`
	Title          string       `protobuf:"bytes,9,opt,name=Title,proto3" json:"Title,omitempty"`
	FinishCond     *ResCondInfo `protobuf:"bytes,11,opt,name=FinishCond,proto3" json:"FinishCond,omitempty"`
	AwardDropID    uint32       `protobuf:"varint,12,opt,name=AwardDropID,proto3" json:"AwardDropID,omitempty"`
	SeasonID       uint32       `protobuf:"varint,14,opt,name=SeasonID,proto3" json:"SeasonID,omitempty"`
	AchievePoint   uint32       `protobuf:"varint,15,opt,name=AchievePoint,proto3" json:"AchievePoint,omitempty"`
	TypeID         uint32       `protobuf:"varint,16,opt,name=TypeID,proto3" json:"TypeID,omitempty"`
	AchieveLevel   uint32       `protobuf:"varint,17,opt,name=AchieveLevel,proto3" json:"AchieveLevel,omitempty"`
	IsHideAchieve  bool         `protobuf:"varint,18,opt,name=IsHideAchieve,proto3" json:"IsHideAchieve,omitempty"`
	IsEndVersion   bool         `protobuf:"varint,19,opt,name=IsEndVersion,proto3" json:"IsEndVersion,omitempty"`
}

func (x *ResAchieveTaskCfgDataBin) Reset() {
	*x = ResAchieveTaskCfgDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResAchieveTaskCfgDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResAchieveTaskCfgDataBin) ProtoMessage() {}

func (x *ResAchieveTaskCfgDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResAchieveTaskCfgDataBin.ProtoReflect.Descriptor instead.
func (*ResAchieveTaskCfgDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{173}
}

func (x *ResAchieveTaskCfgDataBin) GetTaskID() uint32 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *ResAchieveTaskCfgDataBin) GetNxtTaskID() uint32 {
	if x != nil {
		return x.NxtTaskID
	}
	return 0
}

func (x *ResAchieveTaskCfgDataBin) GetAchieveTaskDes() string {
	if x != nil {
		return x.AchieveTaskDes
	}
	return ""
}

func (x *ResAchieveTaskCfgDataBin) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResAchieveTaskCfgDataBin) GetFinishCond() *ResCondInfo {
	if x != nil {
		return x.FinishCond
	}
	return nil
}

func (x *ResAchieveTaskCfgDataBin) GetAwardDropID() uint32 {
	if x != nil {
		return x.AwardDropID
	}
	return 0
}

func (x *ResAchieveTaskCfgDataBin) GetSeasonID() uint32 {
	if x != nil {
		return x.SeasonID
	}
	return 0
}

func (x *ResAchieveTaskCfgDataBin) GetAchievePoint() uint32 {
	if x != nil {
		return x.AchievePoint
	}
	return 0
}

func (x *ResAchieveTaskCfgDataBin) GetTypeID() uint32 {
	if x != nil {
		return x.TypeID
	}
	return 0
}

func (x *ResAchieveTaskCfgDataBin) GetAchieveLevel() uint32 {
	if x != nil {
		return x.AchieveLevel
	}
	return 0
}

func (x *ResAchieveTaskCfgDataBin) GetIsHideAchieve() bool {
	if x != nil {
		return x.IsHideAchieve
	}
	return false
}

func (x *ResAchieveTaskCfgDataBin) GetIsEndVersion() bool {
	if x != nil {
		return x.IsEndVersion
	}
	return false
}

type ResAchieveTypeCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeID        uint32 `protobuf:"varint,1,opt,name=TypeID,proto3" json:"TypeID,omitempty"`
	TypeIcon      string `protobuf:"bytes,2,opt,name=TypeIcon,proto3" json:"TypeIcon,omitempty"`
	SubTypeName   string `protobuf:"bytes,3,opt,name=SubTypeName,proto3" json:"SubTypeName,omitempty"`
	TypeGroupName string `protobuf:"bytes,4,opt,name=TypeGroupName,proto3" json:"TypeGroupName,omitempty"`
	TypeSmallIcon string `protobuf:"bytes,5,opt,name=TypeSmallIcon,proto3" json:"TypeSmallIcon,omitempty"`
}

func (x *ResAchieveTypeCfg) Reset() {
	*x = ResAchieveTypeCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResAchieveTypeCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResAchieveTypeCfg) ProtoMessage() {}

func (x *ResAchieveTypeCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResAchieveTypeCfg.ProtoReflect.Descriptor instead.
func (*ResAchieveTypeCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{174}
}

func (x *ResAchieveTypeCfg) GetTypeID() uint32 {
	if x != nil {
		return x.TypeID
	}
	return 0
}

func (x *ResAchieveTypeCfg) GetTypeIcon() string {
	if x != nil {
		return x.TypeIcon
	}
	return ""
}

func (x *ResAchieveTypeCfg) GetSubTypeName() string {
	if x != nil {
		return x.SubTypeName
	}
	return ""
}

func (x *ResAchieveTypeCfg) GetTypeGroupName() string {
	if x != nil {
		return x.TypeGroupName
	}
	return ""
}

func (x *ResAchieveTypeCfg) GetTypeSmallIcon() string {
	if x != nil {
		return x.TypeSmallIcon
	}
	return ""
}

type ResAchieveLevelDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level   uint32 `protobuf:"varint,1,opt,name=Level,proto3" json:"Level,omitempty"`
	NeedExp uint32 `protobuf:"varint,3,opt,name=NeedExp,proto3" json:"NeedExp,omitempty"`
}

func (x *ResAchieveLevelDataBin) Reset() {
	*x = ResAchieveLevelDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResAchieveLevelDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResAchieveLevelDataBin) ProtoMessage() {}

func (x *ResAchieveLevelDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResAchieveLevelDataBin.ProtoReflect.Descriptor instead.
func (*ResAchieveLevelDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{175}
}

func (x *ResAchieveLevelDataBin) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ResAchieveLevelDataBin) GetNeedExp() uint32 {
	if x != nil {
		return x.NeedExp
	}
	return 0
}

type AchieveConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AchieveTaskCfg  *ResAchieveTaskCfgDataBin `protobuf:"bytes,1,opt,name=AchieveTaskCfg,proto3" json:"AchieveTaskCfg,omitempty"`
	AchieveLevelCfg *ResAchieveLevelDataBin   `protobuf:"bytes,2,opt,name=AchieveLevelCfg,proto3" json:"AchieveLevelCfg,omitempty"`
}

func (x *AchieveConf) Reset() {
	*x = AchieveConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AchieveConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AchieveConf) ProtoMessage() {}

func (x *AchieveConf) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AchieveConf.ProtoReflect.Descriptor instead.
func (*AchieveConf) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{176}
}

func (x *AchieveConf) GetAchieveTaskCfg() *ResAchieveTaskCfgDataBin {
	if x != nil {
		return x.AchieveTaskCfg
	}
	return nil
}

func (x *AchieveConf) GetAchieveLevelCfg() *ResAchieveLevelDataBin {
	if x != nil {
		return x.AchieveLevelCfg
	}
	return nil
}

type ResDT_BattleStatePhaseAudio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Normal       string `protobuf:"bytes,1,opt,name=Normal,proto3" json:"Normal,omitempty"`
	ContinueWin  string `protobuf:"bytes,2,opt,name=ContinueWin,proto3" json:"ContinueWin,omitempty"`
	ContinueLose string `protobuf:"bytes,3,opt,name=ContinueLose,proto3" json:"ContinueLose,omitempty"`
	WhiteHot     string `protobuf:"bytes,4,opt,name=WhiteHot,proto3" json:"WhiteHot,omitempty"`
	Duel         string `protobuf:"bytes,5,opt,name=Duel,proto3" json:"Duel,omitempty"`
}

func (x *ResDT_BattleStatePhaseAudio) Reset() {
	*x = ResDT_BattleStatePhaseAudio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_BattleStatePhaseAudio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_BattleStatePhaseAudio) ProtoMessage() {}

func (x *ResDT_BattleStatePhaseAudio) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_BattleStatePhaseAudio.ProtoReflect.Descriptor instead.
func (*ResDT_BattleStatePhaseAudio) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{177}
}

func (x *ResDT_BattleStatePhaseAudio) GetNormal() string {
	if x != nil {
		return x.Normal
	}
	return ""
}

func (x *ResDT_BattleStatePhaseAudio) GetContinueWin() string {
	if x != nil {
		return x.ContinueWin
	}
	return ""
}

func (x *ResDT_BattleStatePhaseAudio) GetContinueLose() string {
	if x != nil {
		return x.ContinueLose
	}
	return ""
}

func (x *ResDT_BattleStatePhaseAudio) GetWhiteHot() string {
	if x != nil {
		return x.WhiteHot
	}
	return ""
}

func (x *ResDT_BattleStatePhaseAudio) GetDuel() string {
	if x != nil {
		return x.Duel
	}
	return ""
}

type ResDT_BattleStateAudioInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prepare   *ResDT_BattleStatePhaseAudio `protobuf:"bytes,1,opt,name=Prepare,proto3" json:"Prepare,omitempty"`
	Teleport  *ResDT_BattleStatePhaseAudio `protobuf:"bytes,2,opt,name=Teleport,proto3" json:"Teleport,omitempty"`
	Race      *ResDT_BattleStatePhaseAudio `protobuf:"bytes,3,opt,name=Race,proto3" json:"Race,omitempty"`
	RoundWin  *ResDT_BattleStatePhaseAudio `protobuf:"bytes,4,opt,name=RoundWin,proto3" json:"RoundWin,omitempty"`
	RoundLose *ResDT_BattleStatePhaseAudio `protobuf:"bytes,5,opt,name=RoundLose,proto3" json:"RoundLose,omitempty"`
}

func (x *ResDT_BattleStateAudioInfo) Reset() {
	*x = ResDT_BattleStateAudioInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_BattleStateAudioInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_BattleStateAudioInfo) ProtoMessage() {}

func (x *ResDT_BattleStateAudioInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_BattleStateAudioInfo.ProtoReflect.Descriptor instead.
func (*ResDT_BattleStateAudioInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{178}
}

func (x *ResDT_BattleStateAudioInfo) GetPrepare() *ResDT_BattleStatePhaseAudio {
	if x != nil {
		return x.Prepare
	}
	return nil
}

func (x *ResDT_BattleStateAudioInfo) GetTeleport() *ResDT_BattleStatePhaseAudio {
	if x != nil {
		return x.Teleport
	}
	return nil
}

func (x *ResDT_BattleStateAudioInfo) GetRace() *ResDT_BattleStatePhaseAudio {
	if x != nil {
		return x.Race
	}
	return nil
}

func (x *ResDT_BattleStateAudioInfo) GetRoundWin() *ResDT_BattleStatePhaseAudio {
	if x != nil {
		return x.RoundWin
	}
	return nil
}

func (x *ResDT_BattleStateAudioInfo) GetRoundLose() *ResDT_BattleStatePhaseAudio {
	if x != nil {
		return x.RoundLose
	}
	return nil
}

type ResDT_BossStateAudioInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prepare   string `protobuf:"bytes,1,opt,name=Prepare,proto3" json:"Prepare,omitempty"`
	Teleport  string `protobuf:"bytes,2,opt,name=Teleport,proto3" json:"Teleport,omitempty"`
	Race      string `protobuf:"bytes,3,opt,name=Race,proto3" json:"Race,omitempty"`
	RoundWin  string `protobuf:"bytes,4,opt,name=RoundWin,proto3" json:"RoundWin,omitempty"`
	RoundLose string `protobuf:"bytes,5,opt,name=RoundLose,proto3" json:"RoundLose,omitempty"`
	BossAward string `protobuf:"bytes,6,opt,name=BossAward,proto3" json:"BossAward,omitempty"`
}

func (x *ResDT_BossStateAudioInfo) Reset() {
	*x = ResDT_BossStateAudioInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_BossStateAudioInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_BossStateAudioInfo) ProtoMessage() {}

func (x *ResDT_BossStateAudioInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_BossStateAudioInfo.ProtoReflect.Descriptor instead.
func (*ResDT_BossStateAudioInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{179}
}

func (x *ResDT_BossStateAudioInfo) GetPrepare() string {
	if x != nil {
		return x.Prepare
	}
	return ""
}

func (x *ResDT_BossStateAudioInfo) GetTeleport() string {
	if x != nil {
		return x.Teleport
	}
	return ""
}

func (x *ResDT_BossStateAudioInfo) GetRace() string {
	if x != nil {
		return x.Race
	}
	return ""
}

func (x *ResDT_BossStateAudioInfo) GetRoundWin() string {
	if x != nil {
		return x.RoundWin
	}
	return ""
}

func (x *ResDT_BossStateAudioInfo) GetRoundLose() string {
	if x != nil {
		return x.RoundLose
	}
	return ""
}

func (x *ResDT_BossStateAudioInfo) GetBossAward() string {
	if x != nil {
		return x.BossAward
	}
	return ""
}

type ResSceneAudioCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                      uint32                      `protobuf:"varint,7,opt,name=ID,proto3" json:"ID,omitempty"`
	Bank                    string                      `protobuf:"bytes,1,opt,name=Bank,proto3" json:"Bank,omitempty"`
	ExCard                  string                      `protobuf:"bytes,2,opt,name=ExCard,proto3" json:"ExCard,omitempty"`
	Auction                 string                      `protobuf:"bytes,5,opt,name=Auction,proto3" json:"Auction,omitempty"`
	LordGift                string                      `protobuf:"bytes,6,opt,name=LordGift,proto3" json:"LordGift,omitempty"`
	Battle                  *ResDT_BattleStateAudioInfo `protobuf:"bytes,3,opt,name=Battle,proto3" json:"Battle,omitempty"`
	BossBattle              *ResDT_BossStateAudioInfo   `protobuf:"bytes,4,opt,name=BossBattle,proto3" json:"BossBattle,omitempty"`
	IngameEnvAudioPlay      string                      `protobuf:"bytes,10,opt,name=IngameEnvAudioPlay,proto3" json:"IngameEnvAudioPlay,omitempty"`
	InteractionEnvAudioPlay string                      `protobuf:"bytes,11,opt,name=InteractionEnvAudioPlay,proto3" json:"InteractionEnvAudioPlay,omitempty"`
	IngameEnvAudioStop      string                      `protobuf:"bytes,12,opt,name=IngameEnvAudioStop,proto3" json:"IngameEnvAudioStop,omitempty"`
	HostEnvAudioPlay        string                      `protobuf:"bytes,13,opt,name=HostEnvAudioPlay,proto3" json:"HostEnvAudioPlay,omitempty"`
	HostEnvAudioStop        string                      `protobuf:"bytes,14,opt,name=HostEnvAudioStop,proto3" json:"HostEnvAudioStop,omitempty"`
	GuestEnvAudioPlay       string                      `protobuf:"bytes,15,opt,name=GuestEnvAudioPlay,proto3" json:"GuestEnvAudioPlay,omitempty"`
	GuestEnvAudioStop       string                      `protobuf:"bytes,16,opt,name=GuestEnvAudioStop,proto3" json:"GuestEnvAudioStop,omitempty"`
	AuctionEnvAudioPlay     string                      `protobuf:"bytes,17,opt,name=AuctionEnvAudioPlay,proto3" json:"AuctionEnvAudioPlay,omitempty"`
	AuctionEnvAudioStop     string                      `protobuf:"bytes,18,opt,name=AuctionEnvAudioStop,proto3" json:"AuctionEnvAudioStop,omitempty"`
	Theme                   string                      `protobuf:"bytes,19,opt,name=Theme,proto3" json:"Theme,omitempty"`
}

func (x *ResSceneAudioCfg) Reset() {
	*x = ResSceneAudioCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResSceneAudioCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResSceneAudioCfg) ProtoMessage() {}

func (x *ResSceneAudioCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResSceneAudioCfg.ProtoReflect.Descriptor instead.
func (*ResSceneAudioCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{180}
}

func (x *ResSceneAudioCfg) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResSceneAudioCfg) GetBank() string {
	if x != nil {
		return x.Bank
	}
	return ""
}

func (x *ResSceneAudioCfg) GetExCard() string {
	if x != nil {
		return x.ExCard
	}
	return ""
}

func (x *ResSceneAudioCfg) GetAuction() string {
	if x != nil {
		return x.Auction
	}
	return ""
}

func (x *ResSceneAudioCfg) GetLordGift() string {
	if x != nil {
		return x.LordGift
	}
	return ""
}

func (x *ResSceneAudioCfg) GetBattle() *ResDT_BattleStateAudioInfo {
	if x != nil {
		return x.Battle
	}
	return nil
}

func (x *ResSceneAudioCfg) GetBossBattle() *ResDT_BossStateAudioInfo {
	if x != nil {
		return x.BossBattle
	}
	return nil
}

func (x *ResSceneAudioCfg) GetIngameEnvAudioPlay() string {
	if x != nil {
		return x.IngameEnvAudioPlay
	}
	return ""
}

func (x *ResSceneAudioCfg) GetInteractionEnvAudioPlay() string {
	if x != nil {
		return x.InteractionEnvAudioPlay
	}
	return ""
}

func (x *ResSceneAudioCfg) GetIngameEnvAudioStop() string {
	if x != nil {
		return x.IngameEnvAudioStop
	}
	return ""
}

func (x *ResSceneAudioCfg) GetHostEnvAudioPlay() string {
	if x != nil {
		return x.HostEnvAudioPlay
	}
	return ""
}

func (x *ResSceneAudioCfg) GetHostEnvAudioStop() string {
	if x != nil {
		return x.HostEnvAudioStop
	}
	return ""
}

func (x *ResSceneAudioCfg) GetGuestEnvAudioPlay() string {
	if x != nil {
		return x.GuestEnvAudioPlay
	}
	return ""
}

func (x *ResSceneAudioCfg) GetGuestEnvAudioStop() string {
	if x != nil {
		return x.GuestEnvAudioStop
	}
	return ""
}

func (x *ResSceneAudioCfg) GetAuctionEnvAudioPlay() string {
	if x != nil {
		return x.AuctionEnvAudioPlay
	}
	return ""
}

func (x *ResSceneAudioCfg) GetAuctionEnvAudioStop() string {
	if x != nil {
		return x.AuctionEnvAudioStop
	}
	return ""
}

func (x *ResSceneAudioCfg) GetTheme() string {
	if x != nil {
		return x.Theme
	}
	return ""
}

type ResSceneCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SceneID                uint32 `protobuf:"varint,1,opt,name=SceneID,proto3" json:"SceneID,omitempty"`
	Name                   string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	ScenePath              string `protobuf:"bytes,3,opt,name=ScenePath,proto3" json:"ScenePath,omitempty"`
	SceneType              uint32 `protobuf:"varint,4,opt,name=SceneType,proto3" json:"SceneType,omitempty"`
	AudioID                uint32 `protobuf:"varint,5,opt,name=AudioID,proto3" json:"AudioID,omitempty"`
	IngamePreBeginAGE      string `protobuf:"bytes,6,opt,name=IngamePreBeginAGE,proto3" json:"IngamePreBeginAGE,omitempty"`
	IngameWinAGE           string `protobuf:"bytes,7,opt,name=IngameWinAGE,proto3" json:"IngameWinAGE,omitempty"`
	IngameWinAniamtionAGE  string `protobuf:"bytes,8,opt,name=IngameWinAniamtionAGE,proto3" json:"IngameWinAniamtionAGE,omitempty"`
	IngameFailAniamtionAGE string `protobuf:"bytes,9,opt,name=IngameFailAniamtionAGE,proto3" json:"IngameFailAniamtionAGE,omitempty"`
}

func (x *ResSceneCfg) Reset() {
	*x = ResSceneCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResSceneCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResSceneCfg) ProtoMessage() {}

func (x *ResSceneCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResSceneCfg.ProtoReflect.Descriptor instead.
func (*ResSceneCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{181}
}

func (x *ResSceneCfg) GetSceneID() uint32 {
	if x != nil {
		return x.SceneID
	}
	return 0
}

func (x *ResSceneCfg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResSceneCfg) GetScenePath() string {
	if x != nil {
		return x.ScenePath
	}
	return ""
}

func (x *ResSceneCfg) GetSceneType() uint32 {
	if x != nil {
		return x.SceneType
	}
	return 0
}

func (x *ResSceneCfg) GetAudioID() uint32 {
	if x != nil {
		return x.AudioID
	}
	return 0
}

func (x *ResSceneCfg) GetIngamePreBeginAGE() string {
	if x != nil {
		return x.IngamePreBeginAGE
	}
	return ""
}

func (x *ResSceneCfg) GetIngameWinAGE() string {
	if x != nil {
		return x.IngameWinAGE
	}
	return ""
}

func (x *ResSceneCfg) GetIngameWinAniamtionAGE() string {
	if x != nil {
		return x.IngameWinAniamtionAGE
	}
	return ""
}

func (x *ResSceneCfg) GetIngameFailAniamtionAGE() string {
	if x != nil {
		return x.IngameFailAniamtionAGE
	}
	return ""
}

type ResDefaultQualityBasedOnDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	DeviceName string `protobuf:"bytes,2,opt,name=DeviceName,proto3" json:"DeviceName,omitempty"`
	Quality    uint32 `protobuf:"varint,3,opt,name=Quality,proto3" json:"Quality,omitempty"`
}

func (x *ResDefaultQualityBasedOnDevice) Reset() {
	*x = ResDefaultQualityBasedOnDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDefaultQualityBasedOnDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDefaultQualityBasedOnDevice) ProtoMessage() {}

func (x *ResDefaultQualityBasedOnDevice) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDefaultQualityBasedOnDevice.ProtoReflect.Descriptor instead.
func (*ResDefaultQualityBasedOnDevice) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{182}
}

func (x *ResDefaultQualityBasedOnDevice) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResDefaultQualityBasedOnDevice) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *ResDefaultQualityBasedOnDevice) GetQuality() uint32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

type ResSOCScoreCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SOCName string `protobuf:"bytes,1,opt,name=SOCName,proto3" json:"SOCName,omitempty"`
	Score   uint32 `protobuf:"varint,2,opt,name=Score,proto3" json:"Score,omitempty"`
	Quality uint32 `protobuf:"varint,3,opt,name=Quality,proto3" json:"Quality,omitempty"`
}

func (x *ResSOCScoreCfg) Reset() {
	*x = ResSOCScoreCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResSOCScoreCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResSOCScoreCfg) ProtoMessage() {}

func (x *ResSOCScoreCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResSOCScoreCfg.ProtoReflect.Descriptor instead.
func (*ResSOCScoreCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{183}
}

func (x *ResSOCScoreCfg) GetSOCName() string {
	if x != nil {
		return x.SOCName
	}
	return ""
}

func (x *ResSOCScoreCfg) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *ResSOCScoreCfg) GetQuality() uint32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

type ResChartsDatabin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             uint32   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	RankType       uint32   `protobuf:"varint,2,opt,name=RankType,proto3" json:"RankType,omitempty"`
	GameplayType   uint32   `protobuf:"varint,3,opt,name=GameplayType,proto3" json:"GameplayType,omitempty"`
	Name           string   `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
	ShowNum        uint32   `protobuf:"varint,5,opt,name=ShowNum,proto3" json:"ShowNum,omitempty"`
	Function       []uint32 `protobuf:"varint,6,rep,packed,name=Function,proto3" json:"Function,omitempty"`
	IsShowFriend   uint32   `protobuf:"varint,7,opt,name=IsShowFriend,proto3" json:"IsShowFriend,omitempty"`
	FriendShowNum  uint32   `protobuf:"varint,8,opt,name=FriendShowNum,proto3" json:"FriendShowNum,omitempty"`
	FriendFunction []uint32 `protobuf:"varint,9,rep,packed,name=FriendFunction,proto3" json:"FriendFunction,omitempty"`
	IsOpen         uint32   `protobuf:"varint,10,opt,name=IsOpen,proto3" json:"IsOpen,omitempty"`
	IsAbsorbOther  uint32   `protobuf:"varint,11,opt,name=IsAbsorbOther,proto3" json:"IsAbsorbOther,omitempty"`
}

func (x *ResChartsDatabin) Reset() {
	*x = ResChartsDatabin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResChartsDatabin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResChartsDatabin) ProtoMessage() {}

func (x *ResChartsDatabin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResChartsDatabin.ProtoReflect.Descriptor instead.
func (*ResChartsDatabin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{184}
}

func (x *ResChartsDatabin) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResChartsDatabin) GetRankType() uint32 {
	if x != nil {
		return x.RankType
	}
	return 0
}

func (x *ResChartsDatabin) GetGameplayType() uint32 {
	if x != nil {
		return x.GameplayType
	}
	return 0
}

func (x *ResChartsDatabin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResChartsDatabin) GetShowNum() uint32 {
	if x != nil {
		return x.ShowNum
	}
	return 0
}

func (x *ResChartsDatabin) GetFunction() []uint32 {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *ResChartsDatabin) GetIsShowFriend() uint32 {
	if x != nil {
		return x.IsShowFriend
	}
	return 0
}

func (x *ResChartsDatabin) GetFriendShowNum() uint32 {
	if x != nil {
		return x.FriendShowNum
	}
	return 0
}

func (x *ResChartsDatabin) GetFriendFunction() []uint32 {
	if x != nil {
		return x.FriendFunction
	}
	return nil
}

func (x *ResChartsDatabin) GetIsOpen() uint32 {
	if x != nil {
		return x.IsOpen
	}
	return 0
}

func (x *ResChartsDatabin) GetIsAbsorbOther() uint32 {
	if x != nil {
		return x.IsAbsorbOther
	}
	return 0
}

type ResHundredRankIdxDatabin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XDRankIdx  uint32 `protobuf:"varint,1,opt,name=XDRankIdx,proto3" json:"XDRankIdx,omitempty"`
	NewRankIdx uint32 `protobuf:"varint,2,opt,name=NewRankIdx,proto3" json:"NewRankIdx,omitempty"`
}

func (x *ResHundredRankIdxDatabin) Reset() {
	*x = ResHundredRankIdxDatabin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResHundredRankIdxDatabin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResHundredRankIdxDatabin) ProtoMessage() {}

func (x *ResHundredRankIdxDatabin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResHundredRankIdxDatabin.ProtoReflect.Descriptor instead.
func (*ResHundredRankIdxDatabin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{185}
}

func (x *ResHundredRankIdxDatabin) GetXDRankIdx() uint32 {
	if x != nil {
		return x.XDRankIdx
	}
	return 0
}

func (x *ResHundredRankIdxDatabin) GetNewRankIdx() uint32 {
	if x != nil {
		return x.NewRankIdx
	}
	return 0
}

// 排行榜配置
type ResRanklistDatabin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankType    uint32 `protobuf:"varint,1,opt,name=RankType,proto3" json:"RankType,omitempty"`
	RankSubType uint32 `protobuf:"varint,2,opt,name=RankSubType,proto3" json:"RankSubType,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	SettleType  uint32 `protobuf:"varint,4,opt,name=SettleType,proto3" json:"SettleType,omitempty"`
	SettleNum   uint32 `protobuf:"varint,5,opt,name=SettleNum,proto3" json:"SettleNum,omitempty"`
}

func (x *ResRanklistDatabin) Reset() {
	*x = ResRanklistDatabin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResRanklistDatabin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResRanklistDatabin) ProtoMessage() {}

func (x *ResRanklistDatabin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResRanklistDatabin.ProtoReflect.Descriptor instead.
func (*ResRanklistDatabin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{186}
}

func (x *ResRanklistDatabin) GetRankType() uint32 {
	if x != nil {
		return x.RankType
	}
	return 0
}

func (x *ResRanklistDatabin) GetRankSubType() uint32 {
	if x != nil {
		return x.RankSubType
	}
	return 0
}

func (x *ResRanklistDatabin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResRanklistDatabin) GetSettleType() uint32 {
	if x != nil {
		return x.SettleType
	}
	return 0
}

func (x *ResRanklistDatabin) GetSettleNum() uint32 {
	if x != nil {
		return x.SettleNum
	}
	return 0
}

// 排行榜结算奖励配置
type ResRanklistSettleDatabin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankType    uint32       `protobuf:"varint,1,opt,name=RankType,proto3" json:"RankType,omitempty"`
	RankSubType uint32       `protobuf:"varint,2,opt,name=RankSubType,proto3" json:"RankSubType,omitempty"`
	MinPlace    uint32       `protobuf:"varint,3,opt,name=MinPlace,proto3" json:"MinPlace,omitempty"`
	MaxPlace    uint32       `protobuf:"varint,4,opt,name=MaxPlace,proto3" json:"MaxPlace,omitempty"`
	TitleID     uint32       `protobuf:"varint,5,opt,name=TitleID,proto3" json:"TitleID,omitempty"` // 暂时是棋手榜单使用
	Award       *ResGameItem `protobuf:"bytes,6,opt,name=Award,proto3" json:"Award,omitempty"`
}

func (x *ResRanklistSettleDatabin) Reset() {
	*x = ResRanklistSettleDatabin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResRanklistSettleDatabin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResRanklistSettleDatabin) ProtoMessage() {}

func (x *ResRanklistSettleDatabin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResRanklistSettleDatabin.ProtoReflect.Descriptor instead.
func (*ResRanklistSettleDatabin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{187}
}

func (x *ResRanklistSettleDatabin) GetRankType() uint32 {
	if x != nil {
		return x.RankType
	}
	return 0
}

func (x *ResRanklistSettleDatabin) GetRankSubType() uint32 {
	if x != nil {
		return x.RankSubType
	}
	return 0
}

func (x *ResRanklistSettleDatabin) GetMinPlace() uint32 {
	if x != nil {
		return x.MinPlace
	}
	return 0
}

func (x *ResRanklistSettleDatabin) GetMaxPlace() uint32 {
	if x != nil {
		return x.MaxPlace
	}
	return 0
}

func (x *ResRanklistSettleDatabin) GetTitleID() uint32 {
	if x != nil {
		return x.TitleID
	}
	return 0
}

func (x *ResRanklistSettleDatabin) GetAward() *ResGameItem {
	if x != nil {
		return x.Award
	}
	return nil
}

// 排行榜配置
type RanklistConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RanklistCfg       *ResRanklistDatabin       `protobuf:"bytes,1,opt,name=RanklistCfg,proto3" json:"RanklistCfg,omitempty"`
	RanklistSettleCfg *ResRanklistSettleDatabin `protobuf:"bytes,2,opt,name=RanklistSettleCfg,proto3" json:"RanklistSettleCfg,omitempty"`
}

func (x *RanklistConf) Reset() {
	*x = RanklistConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RanklistConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RanklistConf) ProtoMessage() {}

func (x *RanklistConf) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RanklistConf.ProtoReflect.Descriptor instead.
func (*RanklistConf) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{188}
}

func (x *RanklistConf) GetRanklistCfg() *ResRanklistDatabin {
	if x != nil {
		return x.RanklistCfg
	}
	return nil
}

func (x *RanklistConf) GetRanklistSettleCfg() *ResRanklistSettleDatabin {
	if x != nil {
		return x.RanklistSettleCfg
	}
	return nil
}

// -------------------------充值----------------------------
type ResChargeDatabin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num       uint32 `protobuf:"varint,1,opt,name=Num,proto3" json:"Num,omitempty"`
	Price     uint32 `protobuf:"varint,2,opt,name=Price,proto3" json:"Price,omitempty"`
	Icon      string `protobuf:"bytes,3,opt,name=Icon,proto3" json:"Icon,omitempty"`
	IsOpen    bool   `protobuf:"varint,4,opt,name=IsOpen,proto3" json:"IsOpen,omitempty"`
	ProductID string `protobuf:"bytes,5,opt,name=ProductID,proto3" json:"ProductID,omitempty"`
}

func (x *ResChargeDatabin) Reset() {
	*x = ResChargeDatabin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResChargeDatabin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResChargeDatabin) ProtoMessage() {}

func (x *ResChargeDatabin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResChargeDatabin.ProtoReflect.Descriptor instead.
func (*ResChargeDatabin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{189}
}

func (x *ResChargeDatabin) GetNum() uint32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *ResChargeDatabin) GetPrice() uint32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ResChargeDatabin) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *ResChargeDatabin) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *ResChargeDatabin) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

type ResCltUploadLogListCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GOpenID  string `protobuf:"bytes,1,opt,name=GOpenID,proto3" json:"GOpenID,omitempty"`
	LogLevel uint32 `protobuf:"varint,2,opt,name=LogLevel,proto3" json:"LogLevel,omitempty"`
}

func (x *ResCltUploadLogListCfg) Reset() {
	*x = ResCltUploadLogListCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResCltUploadLogListCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResCltUploadLogListCfg) ProtoMessage() {}

func (x *ResCltUploadLogListCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResCltUploadLogListCfg.ProtoReflect.Descriptor instead.
func (*ResCltUploadLogListCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{190}
}

func (x *ResCltUploadLogListCfg) GetGOpenID() string {
	if x != nil {
		return x.GOpenID
	}
	return ""
}

func (x *ResCltUploadLogListCfg) GetLogLevel() uint32 {
	if x != nil {
		return x.LogLevel
	}
	return 0
}

type CltLogConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CltUploadLogCfg *ResCltUploadLogListCfg `protobuf:"bytes,1,opt,name=CltUploadLogCfg,proto3" json:"CltUploadLogCfg,omitempty"`
}

func (x *CltLogConf) Reset() {
	*x = CltLogConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CltLogConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CltLogConf) ProtoMessage() {}

func (x *CltLogConf) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CltLogConf.ProtoReflect.Descriptor instead.
func (*CltLogConf) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{191}
}

func (x *CltLogConf) GetCltUploadLogCfg() *ResCltUploadLogListCfg {
	if x != nil {
		return x.CltUploadLogCfg
	}
	return nil
}

type ResHeroPropertyIconCfgDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	IconName  string `protobuf:"bytes,2,opt,name=IconName,proto3" json:"IconName,omitempty"`
	IconColor string `protobuf:"bytes,3,opt,name=IconColor,proto3" json:"IconColor,omitempty"`
}

func (x *ResHeroPropertyIconCfgDataBin) Reset() {
	*x = ResHeroPropertyIconCfgDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResHeroPropertyIconCfgDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResHeroPropertyIconCfgDataBin) ProtoMessage() {}

func (x *ResHeroPropertyIconCfgDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResHeroPropertyIconCfgDataBin.ProtoReflect.Descriptor instead.
func (*ResHeroPropertyIconCfgDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{192}
}

func (x *ResHeroPropertyIconCfgDataBin) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResHeroPropertyIconCfgDataBin) GetIconName() string {
	if x != nil {
		return x.IconName
	}
	return ""
}

func (x *ResHeroPropertyIconCfgDataBin) GetIconColor() string {
	if x != nil {
		return x.IconColor
	}
	return ""
}

type ResChessHeroUpgradeAwardDatabin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChessQuality uint32 `protobuf:"varint,1,opt,name=ChessQuality,proto3" json:"ChessQuality,omitempty"`
	StarLevel    uint32 `protobuf:"varint,2,opt,name=StarLevel,proto3" json:"StarLevel,omitempty"`
	AwardChessID uint32 `protobuf:"varint,3,opt,name=AwardChessID,proto3" json:"AwardChessID,omitempty"`
}

func (x *ResChessHeroUpgradeAwardDatabin) Reset() {
	*x = ResChessHeroUpgradeAwardDatabin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResChessHeroUpgradeAwardDatabin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResChessHeroUpgradeAwardDatabin) ProtoMessage() {}

func (x *ResChessHeroUpgradeAwardDatabin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResChessHeroUpgradeAwardDatabin.ProtoReflect.Descriptor instead.
func (*ResChessHeroUpgradeAwardDatabin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{193}
}

func (x *ResChessHeroUpgradeAwardDatabin) GetChessQuality() uint32 {
	if x != nil {
		return x.ChessQuality
	}
	return 0
}

func (x *ResChessHeroUpgradeAwardDatabin) GetStarLevel() uint32 {
	if x != nil {
		return x.StarLevel
	}
	return 0
}

func (x *ResChessHeroUpgradeAwardDatabin) GetAwardChessID() uint32 {
	if x != nil {
		return x.AwardChessID
	}
	return 0
}

type ResDT_NBAIInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID   uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *ResDT_NBAIInfo) Reset() {
	*x = ResDT_NBAIInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_NBAIInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_NBAIInfo) ProtoMessage() {}

func (x *ResDT_NBAIInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_NBAIInfo.ProtoReflect.Descriptor instead.
func (*ResDT_NBAIInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{194}
}

func (x *ResDT_NBAIInfo) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResDT_NBAIInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ResDT_NBPlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LordID   uint32 `protobuf:"varint,1,opt,name=LordID,proto3" json:"LordID,omitempty"`
	InitCoin uint32 `protobuf:"varint,2,opt,name=InitCoin,proto3" json:"InitCoin,omitempty"`
}

func (x *ResDT_NBPlayerInfo) Reset() {
	*x = ResDT_NBPlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_NBPlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_NBPlayerInfo) ProtoMessage() {}

func (x *ResDT_NBPlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_NBPlayerInfo.ProtoReflect.Descriptor instead.
func (*ResDT_NBPlayerInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{195}
}

func (x *ResDT_NBPlayerInfo) GetLordID() uint32 {
	if x != nil {
		return x.LordID
	}
	return 0
}

func (x *ResDT_NBPlayerInfo) GetInitCoin() uint32 {
	if x != nil {
		return x.InitCoin
	}
	return 0
}

type ResNBCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelID               uint32                `protobuf:"varint,1,opt,name=LevelID,proto3" json:"LevelID,omitempty"`
	StartRoundNum         uint32                `protobuf:"varint,2,opt,name=StartRoundNum,proto3" json:"StartRoundNum,omitempty"`
	AI                    *ResDT_NBAIInfo       `protobuf:"bytes,3,opt,name=AI,proto3" json:"AI,omitempty"`
	Player                []*ResDT_NBPlayerInfo `protobuf:"bytes,4,rep,name=Player,proto3" json:"Player,omitempty"`
	TotalRoundNum         int32                 `protobuf:"varint,5,opt,name=TotalRoundNum,proto3" json:"TotalRoundNum,omitempty"`
	AuctionDropBeginRound int32                 `protobuf:"varint,6,opt,name=AuctionDropBeginRound,proto3" json:"AuctionDropBeginRound,omitempty"`
}

func (x *ResNBCfg) Reset() {
	*x = ResNBCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResNBCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResNBCfg) ProtoMessage() {}

func (x *ResNBCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResNBCfg.ProtoReflect.Descriptor instead.
func (*ResNBCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{196}
}

func (x *ResNBCfg) GetLevelID() uint32 {
	if x != nil {
		return x.LevelID
	}
	return 0
}

func (x *ResNBCfg) GetStartRoundNum() uint32 {
	if x != nil {
		return x.StartRoundNum
	}
	return 0
}

func (x *ResNBCfg) GetAI() *ResDT_NBAIInfo {
	if x != nil {
		return x.AI
	}
	return nil
}

func (x *ResNBCfg) GetPlayer() []*ResDT_NBPlayerInfo {
	if x != nil {
		return x.Player
	}
	return nil
}

func (x *ResNBCfg) GetTotalRoundNum() int32 {
	if x != nil {
		return x.TotalRoundNum
	}
	return 0
}

func (x *ResNBCfg) GetAuctionDropBeginRound() int32 {
	if x != nil {
		return x.AuctionDropBeginRound
	}
	return 0
}

type ResNBLevelCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundNum            uint32 `protobuf:"varint,1,opt,name=RoundNum,proto3" json:"RoundNum,omitempty"`
	LevelID             uint32 `protobuf:"varint,2,opt,name=LevelID,proto3" json:"LevelID,omitempty"`
	StageIconName       string `protobuf:"bytes,3,opt,name=StageIconName,proto3" json:"StageIconName,omitempty"`
	StageIconEffectName string `protobuf:"bytes,4,opt,name=StageIconEffectName,proto3" json:"StageIconEffectName,omitempty"`
	StageMerge          int32  `protobuf:"varint,5,opt,name=StageMerge,proto3" json:"StageMerge,omitempty"`
}

func (x *ResNBLevelCfg) Reset() {
	*x = ResNBLevelCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResNBLevelCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResNBLevelCfg) ProtoMessage() {}

func (x *ResNBLevelCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResNBLevelCfg.ProtoReflect.Descriptor instead.
func (*ResNBLevelCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{197}
}

func (x *ResNBLevelCfg) GetRoundNum() uint32 {
	if x != nil {
		return x.RoundNum
	}
	return 0
}

func (x *ResNBLevelCfg) GetLevelID() uint32 {
	if x != nil {
		return x.LevelID
	}
	return 0
}

func (x *ResNBLevelCfg) GetStageIconName() string {
	if x != nil {
		return x.StageIconName
	}
	return ""
}

func (x *ResNBLevelCfg) GetStageIconEffectName() string {
	if x != nil {
		return x.StageIconEffectName
	}
	return ""
}

func (x *ResNBLevelCfg) GetStageMerge() int32 {
	if x != nil {
		return x.StageMerge
	}
	return 0
}

type ResNBShopCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           uint32   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	RefreshCount uint32   `protobuf:"varint,2,opt,name=RefreshCount,proto3" json:"RefreshCount,omitempty"`
	ChessID      []uint32 `protobuf:"varint,3,rep,packed,name=ChessID,proto3" json:"ChessID,omitempty"`
}

func (x *ResNBShopCfg) Reset() {
	*x = ResNBShopCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResNBShopCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResNBShopCfg) ProtoMessage() {}

func (x *ResNBShopCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResNBShopCfg.ProtoReflect.Descriptor instead.
func (*ResNBShopCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{198}
}

func (x *ResNBShopCfg) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResNBShopCfg) GetRefreshCount() uint32 {
	if x != nil {
		return x.RefreshCount
	}
	return 0
}

func (x *ResNBShopCfg) GetChessID() []uint32 {
	if x != nil {
		return x.ChessID
	}
	return nil
}

type ResDT_NBChessBattlePos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID     uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	CoordX int32  `protobuf:"varint,2,opt,name=CoordX,proto3" json:"CoordX,omitempty"`
	CoordZ int32  `protobuf:"varint,3,opt,name=CoordZ,proto3" json:"CoordZ,omitempty"`
}

func (x *ResDT_NBChessBattlePos) Reset() {
	*x = ResDT_NBChessBattlePos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_NBChessBattlePos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_NBChessBattlePos) ProtoMessage() {}

func (x *ResDT_NBChessBattlePos) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_NBChessBattlePos.ProtoReflect.Descriptor instead.
func (*ResDT_NBChessBattlePos) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{199}
}

func (x *ResDT_NBChessBattlePos) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResDT_NBChessBattlePos) GetCoordX() int32 {
	if x != nil {
		return x.CoordX
	}
	return 0
}

func (x *ResDT_NBChessBattlePos) GetCoordZ() int32 {
	if x != nil {
		return x.CoordZ
	}
	return 0
}

type ResNBChessBattlePosCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PresetID  uint32                    `protobuf:"varint,1,opt,name=PresetID,proto3" json:"PresetID,omitempty"`
	BattlePos []*ResDT_NBChessBattlePos `protobuf:"bytes,2,rep,name=BattlePos,proto3" json:"BattlePos,omitempty"`
}

func (x *ResNBChessBattlePosCfg) Reset() {
	*x = ResNBChessBattlePosCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResNBChessBattlePosCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResNBChessBattlePosCfg) ProtoMessage() {}

func (x *ResNBChessBattlePosCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResNBChessBattlePosCfg.ProtoReflect.Descriptor instead.
func (*ResNBChessBattlePosCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{200}
}

func (x *ResNBChessBattlePosCfg) GetPresetID() uint32 {
	if x != nil {
		return x.PresetID
	}
	return 0
}

func (x *ResNBChessBattlePosCfg) GetBattlePos() []*ResDT_NBChessBattlePos {
	if x != nil {
		return x.BattlePos
	}
	return nil
}

type ResNBRoundPlayerCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundNum         uint32   `protobuf:"varint,1,opt,name=RoundNum,proto3" json:"RoundNum,omitempty"`
	PlayerID         uint32   `protobuf:"varint,2,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	ShopCfgID        uint32   `protobuf:"varint,3,opt,name=ShopCfgID,proto3" json:"ShopCfgID,omitempty"`
	ChessPresetID    uint32   `protobuf:"varint,4,opt,name=ChessPresetID,proto3" json:"ChessPresetID,omitempty"`
	ChessPosID       uint32   `protobuf:"varint,5,opt,name=ChessPosID,proto3" json:"ChessPosID,omitempty"`
	IsHost           bool     `protobuf:"varint,6,opt,name=IsHost,proto3" json:"IsHost,omitempty"`
	AddEquipCfgIDArr []uint32 `protobuf:"varint,7,rep,packed,name=AddEquipCfgIDArr,proto3" json:"AddEquipCfgIDArr,omitempty"`
	ExtraAddExp      uint32   `protobuf:"varint,8,opt,name=ExtraAddExp,proto3" json:"ExtraAddExp,omitempty"`
}

func (x *ResNBRoundPlayerCfg) Reset() {
	*x = ResNBRoundPlayerCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResNBRoundPlayerCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResNBRoundPlayerCfg) ProtoMessage() {}

func (x *ResNBRoundPlayerCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResNBRoundPlayerCfg.ProtoReflect.Descriptor instead.
func (*ResNBRoundPlayerCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{201}
}

func (x *ResNBRoundPlayerCfg) GetRoundNum() uint32 {
	if x != nil {
		return x.RoundNum
	}
	return 0
}

func (x *ResNBRoundPlayerCfg) GetPlayerID() uint32 {
	if x != nil {
		return x.PlayerID
	}
	return 0
}

func (x *ResNBRoundPlayerCfg) GetShopCfgID() uint32 {
	if x != nil {
		return x.ShopCfgID
	}
	return 0
}

func (x *ResNBRoundPlayerCfg) GetChessPresetID() uint32 {
	if x != nil {
		return x.ChessPresetID
	}
	return 0
}

func (x *ResNBRoundPlayerCfg) GetChessPosID() uint32 {
	if x != nil {
		return x.ChessPosID
	}
	return 0
}

func (x *ResNBRoundPlayerCfg) GetIsHost() bool {
	if x != nil {
		return x.IsHost
	}
	return false
}

func (x *ResNBRoundPlayerCfg) GetAddEquipCfgIDArr() []uint32 {
	if x != nil {
		return x.AddEquipCfgIDArr
	}
	return nil
}

func (x *ResNBRoundPlayerCfg) GetExtraAddExp() uint32 {
	if x != nil {
		return x.ExtraAddExp
	}
	return 0
}

type ResNBChessHeroUpgradeAwardCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelID      uint32 `protobuf:"varint,1,opt,name=LevelID,proto3" json:"LevelID,omitempty"`
	ChessID      uint32 `protobuf:"varint,2,opt,name=ChessID,proto3" json:"ChessID,omitempty"`
	UpgradeCount uint32 `protobuf:"varint,3,opt,name=UpgradeCount,proto3" json:"UpgradeCount,omitempty"`
	AwardChessID uint32 `protobuf:"varint,4,opt,name=AwardChessID,proto3" json:"AwardChessID,omitempty"`
}

func (x *ResNBChessHeroUpgradeAwardCfg) Reset() {
	*x = ResNBChessHeroUpgradeAwardCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResNBChessHeroUpgradeAwardCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResNBChessHeroUpgradeAwardCfg) ProtoMessage() {}

func (x *ResNBChessHeroUpgradeAwardCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResNBChessHeroUpgradeAwardCfg.ProtoReflect.Descriptor instead.
func (*ResNBChessHeroUpgradeAwardCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{202}
}

func (x *ResNBChessHeroUpgradeAwardCfg) GetLevelID() uint32 {
	if x != nil {
		return x.LevelID
	}
	return 0
}

func (x *ResNBChessHeroUpgradeAwardCfg) GetChessID() uint32 {
	if x != nil {
		return x.ChessID
	}
	return 0
}

func (x *ResNBChessHeroUpgradeAwardCfg) GetUpgradeCount() uint32 {
	if x != nil {
		return x.UpgradeCount
	}
	return 0
}

func (x *ResNBChessHeroUpgradeAwardCfg) GetAwardChessID() uint32 {
	if x != nil {
		return x.AwardChessID
	}
	return 0
}

type ResDT_DynamicGuidePlayerStatusInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   uint32   `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Params []uint32 `protobuf:"varint,2,rep,packed,name=Params,proto3" json:"Params,omitempty"`
}

func (x *ResDT_DynamicGuidePlayerStatusInfo) Reset() {
	*x = ResDT_DynamicGuidePlayerStatusInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_DynamicGuidePlayerStatusInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_DynamicGuidePlayerStatusInfo) ProtoMessage() {}

func (x *ResDT_DynamicGuidePlayerStatusInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_DynamicGuidePlayerStatusInfo.ProtoReflect.Descriptor instead.
func (*ResDT_DynamicGuidePlayerStatusInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{203}
}

func (x *ResDT_DynamicGuidePlayerStatusInfo) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ResDT_DynamicGuidePlayerStatusInfo) GetParams() []uint32 {
	if x != nil {
		return x.Params
	}
	return nil
}

type ResDynamicGuidePlanCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerStatus    []*ResDT_DynamicGuidePlayerStatusInfo `protobuf:"bytes,1,rep,name=PlayerStatus,proto3" json:"PlayerStatus,omitempty"`
	ID              uint32                                `protobuf:"varint,4,opt,name=ID,proto3" json:"ID,omitempty"`
	EnableBySetting bool                                  `protobuf:"varint,5,opt,name=EnableBySetting,proto3" json:"EnableBySetting,omitempty"`
	ActiveHelpEntry bool                                  `protobuf:"varint,6,opt,name=ActiveHelpEntry,proto3" json:"ActiveHelpEntry,omitempty"`
}

func (x *ResDynamicGuidePlanCfg) Reset() {
	*x = ResDynamicGuidePlanCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDynamicGuidePlanCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDynamicGuidePlanCfg) ProtoMessage() {}

func (x *ResDynamicGuidePlanCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDynamicGuidePlanCfg.ProtoReflect.Descriptor instead.
func (*ResDynamicGuidePlanCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{204}
}

func (x *ResDynamicGuidePlanCfg) GetPlayerStatus() []*ResDT_DynamicGuidePlayerStatusInfo {
	if x != nil {
		return x.PlayerStatus
	}
	return nil
}

func (x *ResDynamicGuidePlanCfg) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResDynamicGuidePlanCfg) GetEnableBySetting() bool {
	if x != nil {
		return x.EnableBySetting
	}
	return false
}

func (x *ResDynamicGuidePlanCfg) GetActiveHelpEntry() bool {
	if x != nil {
		return x.ActiveHelpEntry
	}
	return false
}

type ResDT_DynamicGuideThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value      int32 `protobuf:"varint,1,opt,name=Value,proto3" json:"Value,omitempty"`
	LowerLimit int32 `protobuf:"varint,2,opt,name=LowerLimit,proto3" json:"LowerLimit,omitempty"`
	UpperLimit int32 `protobuf:"varint,3,opt,name=UpperLimit,proto3" json:"UpperLimit,omitempty"`
}

func (x *ResDT_DynamicGuideThreshold) Reset() {
	*x = ResDT_DynamicGuideThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_DynamicGuideThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_DynamicGuideThreshold) ProtoMessage() {}

func (x *ResDT_DynamicGuideThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_DynamicGuideThreshold.ProtoReflect.Descriptor instead.
func (*ResDT_DynamicGuideThreshold) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{205}
}

func (x *ResDT_DynamicGuideThreshold) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ResDT_DynamicGuideThreshold) GetLowerLimit() int32 {
	if x != nil {
		return x.LowerLimit
	}
	return 0
}

func (x *ResDT_DynamicGuideThreshold) GetUpperLimit() int32 {
	if x != nil {
		return x.UpperLimit
	}
	return 0
}

type ResDynamicGuideThresholdCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            uint32                       `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	RoundNumStr   string                       `protobuf:"bytes,2,opt,name=RoundNumStr,proto3" json:"RoundNumStr,omitempty"`
	ThresholdType uint32                       `protobuf:"varint,3,opt,name=ThresholdType,proto3" json:"ThresholdType,omitempty"`
	Threshold     *ResDT_DynamicGuideThreshold `protobuf:"bytes,4,opt,name=Threshold,proto3" json:"Threshold,omitempty"`
}

func (x *ResDynamicGuideThresholdCfg) Reset() {
	*x = ResDynamicGuideThresholdCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDynamicGuideThresholdCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDynamicGuideThresholdCfg) ProtoMessage() {}

func (x *ResDynamicGuideThresholdCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDynamicGuideThresholdCfg.ProtoReflect.Descriptor instead.
func (*ResDynamicGuideThresholdCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{206}
}

func (x *ResDynamicGuideThresholdCfg) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResDynamicGuideThresholdCfg) GetRoundNumStr() string {
	if x != nil {
		return x.RoundNumStr
	}
	return ""
}

func (x *ResDynamicGuideThresholdCfg) GetThresholdType() uint32 {
	if x != nil {
		return x.ThresholdType
	}
	return 0
}

func (x *ResDynamicGuideThresholdCfg) GetThreshold() *ResDT_DynamicGuideThreshold {
	if x != nil {
		return x.Threshold
	}
	return nil
}

type ResDT_DynamicGuideTipCloseConditionItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConditionType uint32   `protobuf:"varint,1,opt,name=conditionType,proto3" json:"conditionType,omitempty"`
	StrParam      []string `protobuf:"bytes,2,rep,name=StrParam,proto3" json:"StrParam,omitempty"`
	TLogID        uint32   `protobuf:"varint,3,opt,name=TLogID,proto3" json:"TLogID,omitempty"`
}

func (x *ResDT_DynamicGuideTipCloseConditionItem) Reset() {
	*x = ResDT_DynamicGuideTipCloseConditionItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_DynamicGuideTipCloseConditionItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_DynamicGuideTipCloseConditionItem) ProtoMessage() {}

func (x *ResDT_DynamicGuideTipCloseConditionItem) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_DynamicGuideTipCloseConditionItem.ProtoReflect.Descriptor instead.
func (*ResDT_DynamicGuideTipCloseConditionItem) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{207}
}

func (x *ResDT_DynamicGuideTipCloseConditionItem) GetConditionType() uint32 {
	if x != nil {
		return x.ConditionType
	}
	return 0
}

func (x *ResDT_DynamicGuideTipCloseConditionItem) GetStrParam() []string {
	if x != nil {
		return x.StrParam
	}
	return nil
}

func (x *ResDT_DynamicGuideTipCloseConditionItem) GetTLogID() uint32 {
	if x != nil {
		return x.TLogID
	}
	return 0
}

type ResDT_DynamicGuideTipPreOperateItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     uint32   `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	StrParam []string `protobuf:"bytes,2,rep,name=StrParam,proto3" json:"StrParam,omitempty"`
}

func (x *ResDT_DynamicGuideTipPreOperateItem) Reset() {
	*x = ResDT_DynamicGuideTipPreOperateItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_DynamicGuideTipPreOperateItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_DynamicGuideTipPreOperateItem) ProtoMessage() {}

func (x *ResDT_DynamicGuideTipPreOperateItem) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_DynamicGuideTipPreOperateItem.ProtoReflect.Descriptor instead.
func (*ResDT_DynamicGuideTipPreOperateItem) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{208}
}

func (x *ResDT_DynamicGuideTipPreOperateItem) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ResDT_DynamicGuideTipPreOperateItem) GetStrParam() []string {
	if x != nil {
		return x.StrParam
	}
	return nil
}

type ResDT_DynamicGuideTipItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WidgetPathType   string                               `protobuf:"bytes,1,opt,name=WidgetPathType,proto3" json:"WidgetPathType,omitempty"`
	AlignType        string                               `protobuf:"bytes,2,opt,name=AlignType,proto3" json:"AlignType,omitempty"`
	CfgID            uint32                               `protobuf:"varint,3,opt,name=CfgID,proto3" json:"CfgID,omitempty"`
	UIEventType      string                               `protobuf:"bytes,4,opt,name=UIEventType,proto3" json:"UIEventType,omitempty"`
	UIEventRspResult uint32                               `protobuf:"varint,5,opt,name=UIEventRspResult,proto3" json:"UIEventRspResult,omitempty"`
	TLogID           uint32                               `protobuf:"varint,6,opt,name=TLogID,proto3" json:"TLogID,omitempty"`
	PreOperate       *ResDT_DynamicGuideTipPreOperateItem `protobuf:"bytes,7,opt,name=PreOperate,proto3" json:"PreOperate,omitempty"`
}

func (x *ResDT_DynamicGuideTipItem) Reset() {
	*x = ResDT_DynamicGuideTipItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_DynamicGuideTipItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_DynamicGuideTipItem) ProtoMessage() {}

func (x *ResDT_DynamicGuideTipItem) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_DynamicGuideTipItem.ProtoReflect.Descriptor instead.
func (*ResDT_DynamicGuideTipItem) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{209}
}

func (x *ResDT_DynamicGuideTipItem) GetWidgetPathType() string {
	if x != nil {
		return x.WidgetPathType
	}
	return ""
}

func (x *ResDT_DynamicGuideTipItem) GetAlignType() string {
	if x != nil {
		return x.AlignType
	}
	return ""
}

func (x *ResDT_DynamicGuideTipItem) GetCfgID() uint32 {
	if x != nil {
		return x.CfgID
	}
	return 0
}

func (x *ResDT_DynamicGuideTipItem) GetUIEventType() string {
	if x != nil {
		return x.UIEventType
	}
	return ""
}

func (x *ResDT_DynamicGuideTipItem) GetUIEventRspResult() uint32 {
	if x != nil {
		return x.UIEventRspResult
	}
	return 0
}

func (x *ResDT_DynamicGuideTipItem) GetTLogID() uint32 {
	if x != nil {
		return x.TLogID
	}
	return 0
}

func (x *ResDT_DynamicGuideTipItem) GetPreOperate() *ResDT_DynamicGuideTipPreOperateItem {
	if x != nil {
		return x.PreOperate
	}
	return nil
}

type ResDynamicGuideSingleBpCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              uint32                                     `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	IsLayer2UI      uint32                                     `protobuf:"varint,2,opt,name=IsLayer2UI,proto3" json:"IsLayer2UI,omitempty"`
	Layer2UIName    string                                     `protobuf:"bytes,3,opt,name=Layer2UIName,proto3" json:"Layer2UIName,omitempty"`
	ClosedTip       *ResDT_DynamicGuideTipItem                 `protobuf:"bytes,4,opt,name=ClosedTip,proto3" json:"ClosedTip,omitempty"`
	OpenedTip       *ResDT_DynamicGuideTipItem                 `protobuf:"bytes,5,opt,name=OpenedTip,proto3" json:"OpenedTip,omitempty"`
	CloseConditions []*ResDT_DynamicGuideTipCloseConditionItem `protobuf:"bytes,6,rep,name=CloseConditions,proto3" json:"CloseConditions,omitempty"`
	StateTipID      uint32                                     `protobuf:"varint,7,opt,name=StateTipID,proto3" json:"StateTipID,omitempty"`
	TimeoutSecs     uint32                                     `protobuf:"varint,8,opt,name=TimeoutSecs,proto3" json:"TimeoutSecs,omitempty"`
}

func (x *ResDynamicGuideSingleBpCfg) Reset() {
	*x = ResDynamicGuideSingleBpCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDynamicGuideSingleBpCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDynamicGuideSingleBpCfg) ProtoMessage() {}

func (x *ResDynamicGuideSingleBpCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDynamicGuideSingleBpCfg.ProtoReflect.Descriptor instead.
func (*ResDynamicGuideSingleBpCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{210}
}

func (x *ResDynamicGuideSingleBpCfg) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResDynamicGuideSingleBpCfg) GetIsLayer2UI() uint32 {
	if x != nil {
		return x.IsLayer2UI
	}
	return 0
}

func (x *ResDynamicGuideSingleBpCfg) GetLayer2UIName() string {
	if x != nil {
		return x.Layer2UIName
	}
	return ""
}

func (x *ResDynamicGuideSingleBpCfg) GetClosedTip() *ResDT_DynamicGuideTipItem {
	if x != nil {
		return x.ClosedTip
	}
	return nil
}

func (x *ResDynamicGuideSingleBpCfg) GetOpenedTip() *ResDT_DynamicGuideTipItem {
	if x != nil {
		return x.OpenedTip
	}
	return nil
}

func (x *ResDynamicGuideSingleBpCfg) GetCloseConditions() []*ResDT_DynamicGuideTipCloseConditionItem {
	if x != nil {
		return x.CloseConditions
	}
	return nil
}

func (x *ResDynamicGuideSingleBpCfg) GetStateTipID() uint32 {
	if x != nil {
		return x.StateTipID
	}
	return 0
}

func (x *ResDynamicGuideSingleBpCfg) GetTimeoutSecs() uint32 {
	if x != nil {
		return x.TimeoutSecs
	}
	return 0
}

type ResDT_NBHelpUnlockTriggerTimeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   uint32   `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Params []uint32 `protobuf:"varint,2,rep,packed,name=Params,proto3" json:"Params,omitempty"`
}

func (x *ResDT_NBHelpUnlockTriggerTimeItem) Reset() {
	*x = ResDT_NBHelpUnlockTriggerTimeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_NBHelpUnlockTriggerTimeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_NBHelpUnlockTriggerTimeItem) ProtoMessage() {}

func (x *ResDT_NBHelpUnlockTriggerTimeItem) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_NBHelpUnlockTriggerTimeItem.ProtoReflect.Descriptor instead.
func (*ResDT_NBHelpUnlockTriggerTimeItem) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{211}
}

func (x *ResDT_NBHelpUnlockTriggerTimeItem) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ResDT_NBHelpUnlockTriggerTimeItem) GetParams() []uint32 {
	if x != nil {
		return x.Params
	}
	return nil
}

type ResNBHelpConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                   uint32                               `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	UnlockTriggers       []*ResDT_NBHelpUnlockTriggerTimeItem `protobuf:"bytes,2,rep,name=UnlockTriggers,proto3" json:"UnlockTriggers,omitempty"`
	DefaultReadPlayerIDs []uint32                             `protobuf:"varint,3,rep,packed,name=DefaultReadPlayerIDs,proto3" json:"DefaultReadPlayerIDs,omitempty"`
	TLogID               uint32                               `protobuf:"varint,4,opt,name=TLogID,proto3" json:"TLogID,omitempty"`
	TipCfgID             uint32                               `protobuf:"varint,5,opt,name=TipCfgID,proto3" json:"TipCfgID,omitempty"`
	EnableBySetting      bool                                 `protobuf:"varint,6,opt,name=EnableBySetting,proto3" json:"EnableBySetting,omitempty"`
	TagIDs4Unlock        []uint32                             `protobuf:"varint,7,rep,packed,name=TagIDs4Unlock,proto3" json:"TagIDs4Unlock,omitempty"`
	GroupId              uint32                               `protobuf:"varint,8,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	GroupName            string                               `protobuf:"bytes,9,opt,name=GroupName,proto3" json:"GroupName,omitempty"`
}

func (x *ResNBHelpConfig) Reset() {
	*x = ResNBHelpConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResNBHelpConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResNBHelpConfig) ProtoMessage() {}

func (x *ResNBHelpConfig) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResNBHelpConfig.ProtoReflect.Descriptor instead.
func (*ResNBHelpConfig) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{212}
}

func (x *ResNBHelpConfig) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResNBHelpConfig) GetUnlockTriggers() []*ResDT_NBHelpUnlockTriggerTimeItem {
	if x != nil {
		return x.UnlockTriggers
	}
	return nil
}

func (x *ResNBHelpConfig) GetDefaultReadPlayerIDs() []uint32 {
	if x != nil {
		return x.DefaultReadPlayerIDs
	}
	return nil
}

func (x *ResNBHelpConfig) GetTLogID() uint32 {
	if x != nil {
		return x.TLogID
	}
	return 0
}

func (x *ResNBHelpConfig) GetTipCfgID() uint32 {
	if x != nil {
		return x.TipCfgID
	}
	return 0
}

func (x *ResNBHelpConfig) GetEnableBySetting() bool {
	if x != nil {
		return x.EnableBySetting
	}
	return false
}

func (x *ResNBHelpConfig) GetTagIDs4Unlock() []uint32 {
	if x != nil {
		return x.TagIDs4Unlock
	}
	return nil
}

func (x *ResNBHelpConfig) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ResNBHelpConfig) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

type ResDT_NBUINameHintUnlockItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   uint32   `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Params []uint32 `protobuf:"varint,2,rep,packed,name=Params,proto3" json:"Params,omitempty"`
}

func (x *ResDT_NBUINameHintUnlockItem) Reset() {
	*x = ResDT_NBUINameHintUnlockItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_NBUINameHintUnlockItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_NBUINameHintUnlockItem) ProtoMessage() {}

func (x *ResDT_NBUINameHintUnlockItem) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_NBUINameHintUnlockItem.ProtoReflect.Descriptor instead.
func (*ResDT_NBUINameHintUnlockItem) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{213}
}

func (x *ResDT_NBUINameHintUnlockItem) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ResDT_NBUINameHintUnlockItem) GetParams() []uint32 {
	if x != nil {
		return x.Params
	}
	return nil
}

type ResDT_NBUINameHintFinishItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      uint32   `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Params    []uint32 `protobuf:"varint,2,rep,packed,name=Params,proto3" json:"Params,omitempty"`
	StrParams []string `protobuf:"bytes,3,rep,name=StrParams,proto3" json:"StrParams,omitempty"`
}

func (x *ResDT_NBUINameHintFinishItem) Reset() {
	*x = ResDT_NBUINameHintFinishItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_NBUINameHintFinishItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_NBUINameHintFinishItem) ProtoMessage() {}

func (x *ResDT_NBUINameHintFinishItem) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_NBUINameHintFinishItem.ProtoReflect.Descriptor instead.
func (*ResDT_NBUINameHintFinishItem) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{214}
}

func (x *ResDT_NBUINameHintFinishItem) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ResDT_NBUINameHintFinishItem) GetParams() []uint32 {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *ResDT_NBUINameHintFinishItem) GetStrParams() []string {
	if x != nil {
		return x.StrParams
	}
	return nil
}

type ResNBUINameHintCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               uint32                        `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Unlock           *ResDT_NBUINameHintUnlockItem `protobuf:"bytes,2,opt,name=Unlock,proto3" json:"Unlock,omitempty"`
	Finish           *ResDT_NBUINameHintFinishItem `protobuf:"bytes,3,opt,name=Finish,proto3" json:"Finish,omitempty"`
	UIPathEnumStr    string                        `protobuf:"bytes,4,opt,name=UIPathEnumStr,proto3" json:"UIPathEnumStr,omitempty"`
	OwnerUILayerName string                        `protobuf:"bytes,5,opt,name=OwnerUILayerName,proto3" json:"OwnerUILayerName,omitempty"`
	HintTxt          string                        `protobuf:"bytes,7,opt,name=HintTxt,proto3" json:"HintTxt,omitempty"`
	HintDir          uint32                        `protobuf:"varint,8,opt,name=HintDir,proto3" json:"HintDir,omitempty"`
	Offset           *Vector2D                     `protobuf:"bytes,9,opt,name=Offset,proto3" json:"Offset,omitempty"`
	LineLength       uint32                        `protobuf:"varint,10,opt,name=LineLength,proto3" json:"LineLength,omitempty"`
}

func (x *ResNBUINameHintCfg) Reset() {
	*x = ResNBUINameHintCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResNBUINameHintCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResNBUINameHintCfg) ProtoMessage() {}

func (x *ResNBUINameHintCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResNBUINameHintCfg.ProtoReflect.Descriptor instead.
func (*ResNBUINameHintCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{215}
}

func (x *ResNBUINameHintCfg) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResNBUINameHintCfg) GetUnlock() *ResDT_NBUINameHintUnlockItem {
	if x != nil {
		return x.Unlock
	}
	return nil
}

func (x *ResNBUINameHintCfg) GetFinish() *ResDT_NBUINameHintFinishItem {
	if x != nil {
		return x.Finish
	}
	return nil
}

func (x *ResNBUINameHintCfg) GetUIPathEnumStr() string {
	if x != nil {
		return x.UIPathEnumStr
	}
	return ""
}

func (x *ResNBUINameHintCfg) GetOwnerUILayerName() string {
	if x != nil {
		return x.OwnerUILayerName
	}
	return ""
}

func (x *ResNBUINameHintCfg) GetHintTxt() string {
	if x != nil {
		return x.HintTxt
	}
	return ""
}

func (x *ResNBUINameHintCfg) GetHintDir() uint32 {
	if x != nil {
		return x.HintDir
	}
	return 0
}

func (x *ResNBUINameHintCfg) GetOffset() *Vector2D {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *ResNBUINameHintCfg) GetLineLength() uint32 {
	if x != nil {
		return x.LineLength
	}
	return 0
}

type ResDTAIParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  uint32 `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Param int32  `protobuf:"varint,2,opt,name=Param,proto3" json:"Param,omitempty"`
}

func (x *ResDTAIParam) Reset() {
	*x = ResDTAIParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDTAIParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDTAIParam) ProtoMessage() {}

func (x *ResDTAIParam) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDTAIParam.ProtoReflect.Descriptor instead.
func (*ResDTAIParam) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{216}
}

func (x *ResDTAIParam) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ResDTAIParam) GetParam() int32 {
	if x != nil {
		return x.Param
	}
	return 0
}

type STAIDifficultyChg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinRankNoChg  float32 `protobuf:"fixed32,1,opt,name=MinRankNoChg,proto3" json:"MinRankNoChg,omitempty"`
	MaxRankNoChg  float32 `protobuf:"fixed32,2,opt,name=MaxRankNoChg,proto3" json:"MaxRankNoChg,omitempty"`
	DifficultyChg int32   `protobuf:"varint,3,opt,name=DifficultyChg,proto3" json:"DifficultyChg,omitempty"`
}

func (x *STAIDifficultyChg) Reset() {
	*x = STAIDifficultyChg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *STAIDifficultyChg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*STAIDifficultyChg) ProtoMessage() {}

func (x *STAIDifficultyChg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use STAIDifficultyChg.ProtoReflect.Descriptor instead.
func (*STAIDifficultyChg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{217}
}

func (x *STAIDifficultyChg) GetMinRankNoChg() float32 {
	if x != nil {
		return x.MinRankNoChg
	}
	return 0
}

func (x *STAIDifficultyChg) GetMaxRankNoChg() float32 {
	if x != nil {
		return x.MaxRankNoChg
	}
	return 0
}

func (x *STAIDifficultyChg) GetDifficultyChg() int32 {
	if x != nil {
		return x.DifficultyChg
	}
	return 0
}

type ResAIDifficultyCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AIDifficulty     uint32        `protobuf:"varint,1,opt,name=AIDifficulty,proto3" json:"AIDifficulty,omitempty"`
	AIParam          *ResDTAIParam `protobuf:"bytes,4,opt,name=AIParam,proto3" json:"AIParam,omitempty"`
	GuaranteeAIParam *ResDTAIParam `protobuf:"bytes,5,opt,name=GuaranteeAIParam,proto3" json:"GuaranteeAIParam,omitempty"`
}

func (x *ResAIDifficultyCfg) Reset() {
	*x = ResAIDifficultyCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResAIDifficultyCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResAIDifficultyCfg) ProtoMessage() {}

func (x *ResAIDifficultyCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResAIDifficultyCfg.ProtoReflect.Descriptor instead.
func (*ResAIDifficultyCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{218}
}

func (x *ResAIDifficultyCfg) GetAIDifficulty() uint32 {
	if x != nil {
		return x.AIDifficulty
	}
	return 0
}

func (x *ResAIDifficultyCfg) GetAIParam() *ResDTAIParam {
	if x != nil {
		return x.AIParam
	}
	return nil
}

func (x *ResAIDifficultyCfg) GetGuaranteeAIParam() *ResDTAIParam {
	if x != nil {
		return x.GuaranteeAIParam
	}
	return nil
}

type ResAIDifficultyChgCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank           uint32               `protobuf:"varint,1,opt,name=Rank,proto3" json:"Rank,omitempty"`
	Level          uint32               `protobuf:"varint,2,opt,name=Level,proto3" json:"Level,omitempty"`
	BaseDifficulty uint32               `protobuf:"varint,3,opt,name=BaseDifficulty,proto3" json:"BaseDifficulty,omitempty"`
	IsChangeClose  bool                 `protobuf:"varint,4,opt,name=IsChangeClose,proto3" json:"IsChangeClose,omitempty"`
	BattleCntLimit uint32               `protobuf:"varint,5,opt,name=BattleCntLimit,proto3" json:"BattleCntLimit,omitempty"`
	DifficultyChg  []*STAIDifficultyChg `protobuf:"bytes,6,rep,name=DifficultyChg,proto3" json:"DifficultyChg,omitempty"`
}

func (x *ResAIDifficultyChgCfg) Reset() {
	*x = ResAIDifficultyChgCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResAIDifficultyChgCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResAIDifficultyChgCfg) ProtoMessage() {}

func (x *ResAIDifficultyChgCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResAIDifficultyChgCfg.ProtoReflect.Descriptor instead.
func (*ResAIDifficultyChgCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{219}
}

func (x *ResAIDifficultyChgCfg) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *ResAIDifficultyChgCfg) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ResAIDifficultyChgCfg) GetBaseDifficulty() uint32 {
	if x != nil {
		return x.BaseDifficulty
	}
	return 0
}

func (x *ResAIDifficultyChgCfg) GetIsChangeClose() bool {
	if x != nil {
		return x.IsChangeClose
	}
	return false
}

func (x *ResAIDifficultyChgCfg) GetBattleCntLimit() uint32 {
	if x != nil {
		return x.BattleCntLimit
	}
	return 0
}

func (x *ResAIDifficultyChgCfg) GetDifficultyChg() []*STAIDifficultyChg {
	if x != nil {
		return x.DifficultyChg
	}
	return nil
}

type ResDTWarmScript struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID     uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Weight uint32 `protobuf:"varint,2,opt,name=Weight,proto3" json:"Weight,omitempty"`
}

func (x *ResDTWarmScript) Reset() {
	*x = ResDTWarmScript{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDTWarmScript) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDTWarmScript) ProtoMessage() {}

func (x *ResDTWarmScript) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDTWarmScript.ProtoReflect.Descriptor instead.
func (*ResDTWarmScript) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{220}
}

func (x *ResDTWarmScript) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResDTWarmScript) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type ResWarmAIStrategyCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                 uint32             `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	AINum              uint32             `protobuf:"varint,2,opt,name=AINum,proto3" json:"AINum,omitempty"`
	AIDifficultyOffset int32              `protobuf:"varint,4,opt,name=AIDifficultyOffset,proto3" json:"AIDifficultyOffset,omitempty"`
	WarmScript         []*ResDTWarmScript `protobuf:"bytes,5,rep,name=WarmScript,proto3" json:"WarmScript,omitempty"`
	AIAllocMode        uint32             `protobuf:"varint,6,opt,name=AIAllocMode,proto3" json:"AIAllocMode,omitempty"`
	AIScript           uint32             `protobuf:"varint,7,opt,name=AIScript,proto3" json:"AIScript,omitempty"`
}

func (x *ResWarmAIStrategyCfg) Reset() {
	*x = ResWarmAIStrategyCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResWarmAIStrategyCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResWarmAIStrategyCfg) ProtoMessage() {}

func (x *ResWarmAIStrategyCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResWarmAIStrategyCfg.ProtoReflect.Descriptor instead.
func (*ResWarmAIStrategyCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{221}
}

func (x *ResWarmAIStrategyCfg) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResWarmAIStrategyCfg) GetAINum() uint32 {
	if x != nil {
		return x.AINum
	}
	return 0
}

func (x *ResWarmAIStrategyCfg) GetAIDifficultyOffset() int32 {
	if x != nil {
		return x.AIDifficultyOffset
	}
	return 0
}

func (x *ResWarmAIStrategyCfg) GetWarmScript() []*ResDTWarmScript {
	if x != nil {
		return x.WarmScript
	}
	return nil
}

func (x *ResWarmAIStrategyCfg) GetAIAllocMode() uint32 {
	if x != nil {
		return x.AIAllocMode
	}
	return 0
}

func (x *ResWarmAIStrategyCfg) GetAIScript() uint32 {
	if x != nil {
		return x.AIScript
	}
	return 0
}

type ResLordUseWarmScripChgCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StrategyID uint32             `protobuf:"varint,1,opt,name=StrategyID,proto3" json:"StrategyID,omitempty"`
	LordID     uint32             `protobuf:"varint,2,opt,name=LordID,proto3" json:"LordID,omitempty"`
	Weight     uint32             `protobuf:"varint,3,opt,name=Weight,proto3" json:"Weight,omitempty"`
	UseType    EPVPLordUseType    `protobuf:"varint,4,opt,name=UseType,proto3,enum=ResData.EPVPLordUseType" json:"UseType,omitempty"`
	UseParam   uint32             `protobuf:"varint,5,opt,name=UseParam,proto3" json:"UseParam,omitempty"`
	WarmScript []*ResDTWarmScript `protobuf:"bytes,6,rep,name=WarmScript,proto3" json:"WarmScript,omitempty"`
}

func (x *ResLordUseWarmScripChgCfg) Reset() {
	*x = ResLordUseWarmScripChgCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResLordUseWarmScripChgCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResLordUseWarmScripChgCfg) ProtoMessage() {}

func (x *ResLordUseWarmScripChgCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResLordUseWarmScripChgCfg.ProtoReflect.Descriptor instead.
func (*ResLordUseWarmScripChgCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{222}
}

func (x *ResLordUseWarmScripChgCfg) GetStrategyID() uint32 {
	if x != nil {
		return x.StrategyID
	}
	return 0
}

func (x *ResLordUseWarmScripChgCfg) GetLordID() uint32 {
	if x != nil {
		return x.LordID
	}
	return 0
}

func (x *ResLordUseWarmScripChgCfg) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ResLordUseWarmScripChgCfg) GetUseType() EPVPLordUseType {
	if x != nil {
		return x.UseType
	}
	return EPVPLordUseType_USE_TOP
}

func (x *ResLordUseWarmScripChgCfg) GetUseParam() uint32 {
	if x != nil {
		return x.UseParam
	}
	return 0
}

func (x *ResLordUseWarmScripChgCfg) GetWarmScript() []*ResDTWarmScript {
	if x != nil {
		return x.WarmScript
	}
	return nil
}

type ResWarmEMAParamCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank      uint32  `protobuf:"varint,1,opt,name=Rank,proto3" json:"Rank,omitempty"`
	WarmScore []int32 `protobuf:"varint,2,rep,packed,name=WarmScore,proto3" json:"WarmScore,omitempty"`
}

func (x *ResWarmEMAParamCfg) Reset() {
	*x = ResWarmEMAParamCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResWarmEMAParamCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResWarmEMAParamCfg) ProtoMessage() {}

func (x *ResWarmEMAParamCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResWarmEMAParamCfg.ProtoReflect.Descriptor instead.
func (*ResWarmEMAParamCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{223}
}

func (x *ResWarmEMAParamCfg) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *ResWarmEMAParamCfg) GetWarmScore() []int32 {
	if x != nil {
		return x.WarmScore
	}
	return nil
}

// 温暖局回流触发
type ResDTWarmBack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval     uint32 `protobuf:"varint,1,opt,name=Interval,proto3" json:"Interval,omitempty"`
	WarmStrategy uint32 `protobuf:"varint,2,opt,name=WarmStrategy,proto3" json:"WarmStrategy,omitempty"`
}

func (x *ResDTWarmBack) Reset() {
	*x = ResDTWarmBack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDTWarmBack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDTWarmBack) ProtoMessage() {}

func (x *ResDTWarmBack) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDTWarmBack.ProtoReflect.Descriptor instead.
func (*ResDTWarmBack) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{224}
}

func (x *ResDTWarmBack) GetInterval() uint32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *ResDTWarmBack) GetWarmStrategy() uint32 {
	if x != nil {
		return x.WarmStrategy
	}
	return 0
}

// 温暖局均线策略
type ResDTWarmEMAStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EMAN         uint32 `protobuf:"varint,1,opt,name=EMAN,proto3" json:"EMAN,omitempty"`
	WarmStrategy uint32 `protobuf:"varint,2,opt,name=WarmStrategy,proto3" json:"WarmStrategy,omitempty"`
}

func (x *ResDTWarmEMAStrategy) Reset() {
	*x = ResDTWarmEMAStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDTWarmEMAStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDTWarmEMAStrategy) ProtoMessage() {}

func (x *ResDTWarmEMAStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDTWarmEMAStrategy.ProtoReflect.Descriptor instead.
func (*ResDTWarmEMAStrategy) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{225}
}

func (x *ResDTWarmEMAStrategy) GetEMAN() uint32 {
	if x != nil {
		return x.EMAN
	}
	return 0
}

func (x *ResDTWarmEMAStrategy) GetWarmStrategy() uint32 {
	if x != nil {
		return x.WarmStrategy
	}
	return 0
}

type ResWarmAIRuleCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank                  uint32                  `protobuf:"varint,1,opt,name=Rank,proto3" json:"Rank,omitempty"`
	EMA                   []*ResDTWarmEMAStrategy `protobuf:"bytes,2,rep,name=EMA,proto3" json:"EMA,omitempty"`
	WarmBack              []*ResDTWarmBack        `protobuf:"bytes,3,rep,name=WarmBack,proto3" json:"WarmBack,omitempty"`
	FailThresholdScore    uint32                  `protobuf:"varint,4,opt,name=FailThresholdScore,proto3" json:"FailThresholdScore,omitempty"`
	FailThresholdStrategy uint32                  `protobuf:"varint,5,opt,name=FailThresholdStrategy,proto3" json:"FailThresholdStrategy,omitempty"`
	SParam                uint32                  `protobuf:"varint,6,opt,name=SParam,proto3" json:"SParam,omitempty"`
	TriggerInterval       uint32                  `protobuf:"varint,7,opt,name=TriggerInterval,proto3" json:"TriggerInterval,omitempty"`
	MinRankCount          uint32                  `protobuf:"varint,8,opt,name=MinRankCount,proto3" json:"MinRankCount,omitempty"`
}

func (x *ResWarmAIRuleCfg) Reset() {
	*x = ResWarmAIRuleCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResWarmAIRuleCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResWarmAIRuleCfg) ProtoMessage() {}

func (x *ResWarmAIRuleCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResWarmAIRuleCfg.ProtoReflect.Descriptor instead.
func (*ResWarmAIRuleCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{226}
}

func (x *ResWarmAIRuleCfg) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *ResWarmAIRuleCfg) GetEMA() []*ResDTWarmEMAStrategy {
	if x != nil {
		return x.EMA
	}
	return nil
}

func (x *ResWarmAIRuleCfg) GetWarmBack() []*ResDTWarmBack {
	if x != nil {
		return x.WarmBack
	}
	return nil
}

func (x *ResWarmAIRuleCfg) GetFailThresholdScore() uint32 {
	if x != nil {
		return x.FailThresholdScore
	}
	return 0
}

func (x *ResWarmAIRuleCfg) GetFailThresholdStrategy() uint32 {
	if x != nil {
		return x.FailThresholdStrategy
	}
	return 0
}

func (x *ResWarmAIRuleCfg) GetSParam() uint32 {
	if x != nil {
		return x.SParam
	}
	return 0
}

func (x *ResWarmAIRuleCfg) GetTriggerInterval() uint32 {
	if x != nil {
		return x.TriggerInterval
	}
	return 0
}

func (x *ResWarmAIRuleCfg) GetMinRankCount() uint32 {
	if x != nil {
		return x.MinRankCount
	}
	return 0
}

type ResDTStrategyScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinScoreValue uint32 `protobuf:"varint,1,opt,name=MinScoreValue,proto3" json:"MinScoreValue,omitempty"`
	MaxScoreValue uint32 `protobuf:"varint,2,opt,name=MaxScoreValue,proto3" json:"MaxScoreValue,omitempty"`
	StrategyID    uint32 `protobuf:"varint,3,opt,name=StrategyID,proto3" json:"StrategyID,omitempty"`
}

func (x *ResDTStrategyScore) Reset() {
	*x = ResDTStrategyScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDTStrategyScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDTStrategyScore) ProtoMessage() {}

func (x *ResDTStrategyScore) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDTStrategyScore.ProtoReflect.Descriptor instead.
func (*ResDTStrategyScore) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{227}
}

func (x *ResDTStrategyScore) GetMinScoreValue() uint32 {
	if x != nil {
		return x.MinScoreValue
	}
	return 0
}

func (x *ResDTStrategyScore) GetMaxScoreValue() uint32 {
	if x != nil {
		return x.MaxScoreValue
	}
	return 0
}

func (x *ResDTStrategyScore) GetStrategyID() uint32 {
	if x != nil {
		return x.StrategyID
	}
	return 0
}

type ResWarmAICondStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                uint32                `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Weight            uint32                `protobuf:"varint,2,opt,name=Weight,proto3" json:"Weight,omitempty"`
	CheckType         uint32                `protobuf:"varint,3,opt,name=CheckType,proto3" json:"CheckType,omitempty"`
	CheckParam        uint32                `protobuf:"varint,4,opt,name=CheckParam,proto3" json:"CheckParam,omitempty"`
	CheckCond         []*ResCondInfo        `protobuf:"bytes,5,rep,name=CheckCond,proto3" json:"CheckCond,omitempty"`
	StrategyScoreID   uint32                `protobuf:"varint,6,opt,name=StrategyScoreID,proto3" json:"StrategyScoreID,omitempty"`
	StrategyScoreInfo []*ResDTStrategyScore `protobuf:"bytes,7,rep,name=StrategyScoreInfo,proto3" json:"StrategyScoreInfo,omitempty"`
}

func (x *ResWarmAICondStrategy) Reset() {
	*x = ResWarmAICondStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResWarmAICondStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResWarmAICondStrategy) ProtoMessage() {}

func (x *ResWarmAICondStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResWarmAICondStrategy.ProtoReflect.Descriptor instead.
func (*ResWarmAICondStrategy) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{228}
}

func (x *ResWarmAICondStrategy) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResWarmAICondStrategy) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ResWarmAICondStrategy) GetCheckType() uint32 {
	if x != nil {
		return x.CheckType
	}
	return 0
}

func (x *ResWarmAICondStrategy) GetCheckParam() uint32 {
	if x != nil {
		return x.CheckParam
	}
	return 0
}

func (x *ResWarmAICondStrategy) GetCheckCond() []*ResCondInfo {
	if x != nil {
		return x.CheckCond
	}
	return nil
}

func (x *ResWarmAICondStrategy) GetStrategyScoreID() uint32 {
	if x != nil {
		return x.StrategyScoreID
	}
	return 0
}

func (x *ResWarmAICondStrategy) GetStrategyScoreInfo() []*ResDTStrategyScore {
	if x != nil {
		return x.StrategyScoreInfo
	}
	return nil
}

type ResWarmAIStrategyScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScoreID    uint32       `protobuf:"varint,1,opt,name=ScoreID,proto3" json:"ScoreID,omitempty"`
	ScoreCond  *ResCondInfo `protobuf:"bytes,2,opt,name=ScoreCond,proto3" json:"ScoreCond,omitempty"`
	ScoreValue uint32       `protobuf:"varint,3,opt,name=ScoreValue,proto3" json:"ScoreValue,omitempty"`
}

func (x *ResWarmAIStrategyScore) Reset() {
	*x = ResWarmAIStrategyScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResWarmAIStrategyScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResWarmAIStrategyScore) ProtoMessage() {}

func (x *ResWarmAIStrategyScore) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResWarmAIStrategyScore.ProtoReflect.Descriptor instead.
func (*ResWarmAIStrategyScore) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{229}
}

func (x *ResWarmAIStrategyScore) GetScoreID() uint32 {
	if x != nil {
		return x.ScoreID
	}
	return 0
}

func (x *ResWarmAIStrategyScore) GetScoreCond() *ResCondInfo {
	if x != nil {
		return x.ScoreCond
	}
	return nil
}

func (x *ResWarmAIStrategyScore) GetScoreValue() uint32 {
	if x != nil {
		return x.ScoreValue
	}
	return 0
}

type ResClientAIExtraFlag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               EClientAIExtraFlag `protobuf:"varint,1,opt,name=ID,proto3,enum=ResData.EClientAIExtraFlag" json:"ID,omitempty"`
	MaxRankScore     uint32             `protobuf:"varint,2,opt,name=MaxRankScore,proto3" json:"MaxRankScore,omitempty"`
	MaxRankGameCount uint32             `protobuf:"varint,3,opt,name=MaxRankGameCount,proto3" json:"MaxRankGameCount,omitempty"`
}

func (x *ResClientAIExtraFlag) Reset() {
	*x = ResClientAIExtraFlag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResClientAIExtraFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResClientAIExtraFlag) ProtoMessage() {}

func (x *ResClientAIExtraFlag) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResClientAIExtraFlag.ProtoReflect.Descriptor instead.
func (*ResClientAIExtraFlag) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{230}
}

func (x *ResClientAIExtraFlag) GetID() EClientAIExtraFlag {
	if x != nil {
		return x.ID
	}
	return EClientAIExtraFlag_AIFlagAuctionNoBidding
}

func (x *ResClientAIExtraFlag) GetMaxRankScore() uint32 {
	if x != nil {
		return x.MaxRankScore
	}
	return 0
}

func (x *ResClientAIExtraFlag) GetMaxRankGameCount() uint32 {
	if x != nil {
		return x.MaxRankGameCount
	}
	return 0
}

type WarmAIConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WarmAIStrategyCfg       *ResWarmAIStrategyCfg      `protobuf:"bytes,1,opt,name=WarmAIStrategyCfg,proto3" json:"WarmAIStrategyCfg,omitempty"`
	WarmAIRuleCfg           *ResWarmAIRuleCfg          `protobuf:"bytes,2,opt,name=WarmAIRuleCfg,proto3" json:"WarmAIRuleCfg,omitempty"`
	WarmEMAParamCfg         *ResWarmEMAParamCfg        `protobuf:"bytes,3,opt,name=WarmEMAParamCfg,proto3" json:"WarmEMAParamCfg,omitempty"`
	WarmAIScript            *ResIeDropScenario         `protobuf:"bytes,4,opt,name=WarmAIScript,proto3" json:"WarmAIScript,omitempty"` // 温暖局剧本表，仅做校验
	AIDifficultyCfg         *ResAIDifficultyCfg        `protobuf:"bytes,5,opt,name=AIDifficultyCfg,proto3" json:"AIDifficultyCfg,omitempty"`
	AIDifficultyChgCfg      *ResAIDifficultyChgCfg     `protobuf:"bytes,6,opt,name=AIDifficultyChgCfg,proto3" json:"AIDifficultyChgCfg,omitempty"`
	WarmAICondStrategy      *ResWarmAICondStrategy     `protobuf:"bytes,7,opt,name=WarmAICondStrategy,proto3" json:"WarmAICondStrategy,omitempty"`
	WarmAIStrategyScore     *ResWarmAIStrategyScore    `protobuf:"bytes,8,opt,name=WarmAIStrategyScore,proto3" json:"WarmAIStrategyScore,omitempty"`
	LordUseWarmScriptChgCfg *ResLordUseWarmScripChgCfg `protobuf:"bytes,9,opt,name=LordUseWarmScriptChgCfg,proto3" json:"LordUseWarmScriptChgCfg,omitempty"`
	ClientAIExtraFlag       *ResClientAIExtraFlag      `protobuf:"bytes,10,opt,name=ClientAIExtraFlag,proto3" json:"ClientAIExtraFlag,omitempty"`
}

func (x *WarmAIConf) Reset() {
	*x = WarmAIConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarmAIConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarmAIConf) ProtoMessage() {}

func (x *WarmAIConf) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarmAIConf.ProtoReflect.Descriptor instead.
func (*WarmAIConf) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{231}
}

func (x *WarmAIConf) GetWarmAIStrategyCfg() *ResWarmAIStrategyCfg {
	if x != nil {
		return x.WarmAIStrategyCfg
	}
	return nil
}

func (x *WarmAIConf) GetWarmAIRuleCfg() *ResWarmAIRuleCfg {
	if x != nil {
		return x.WarmAIRuleCfg
	}
	return nil
}

func (x *WarmAIConf) GetWarmEMAParamCfg() *ResWarmEMAParamCfg {
	if x != nil {
		return x.WarmEMAParamCfg
	}
	return nil
}

func (x *WarmAIConf) GetWarmAIScript() *ResIeDropScenario {
	if x != nil {
		return x.WarmAIScript
	}
	return nil
}

func (x *WarmAIConf) GetAIDifficultyCfg() *ResAIDifficultyCfg {
	if x != nil {
		return x.AIDifficultyCfg
	}
	return nil
}

func (x *WarmAIConf) GetAIDifficultyChgCfg() *ResAIDifficultyChgCfg {
	if x != nil {
		return x.AIDifficultyChgCfg
	}
	return nil
}

func (x *WarmAIConf) GetWarmAICondStrategy() *ResWarmAICondStrategy {
	if x != nil {
		return x.WarmAICondStrategy
	}
	return nil
}

func (x *WarmAIConf) GetWarmAIStrategyScore() *ResWarmAIStrategyScore {
	if x != nil {
		return x.WarmAIStrategyScore
	}
	return nil
}

func (x *WarmAIConf) GetLordUseWarmScriptChgCfg() *ResLordUseWarmScripChgCfg {
	if x != nil {
		return x.LordUseWarmScriptChgCfg
	}
	return nil
}

func (x *WarmAIConf) GetClientAIExtraFlag() *ResClientAIExtraFlag {
	if x != nil {
		return x.ClientAIExtraFlag
	}
	return nil
}

// -------------------------新手----------------------------
type ResNewbieGrpDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID     uint32       `protobuf:"varint,1,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	GroupName   string       `protobuf:"bytes,2,opt,name=GroupName,proto3" json:"GroupName,omitempty"`
	GroupDesc   string       `protobuf:"bytes,3,opt,name=GroupDesc,proto3" json:"GroupDesc,omitempty"`
	AwardDropID uint32       `protobuf:"varint,5,opt,name=AwardDropID,proto3" json:"AwardDropID,omitempty"`
	UnlockCond  *ResCondInfo `protobuf:"bytes,6,opt,name=UnlockCond,proto3" json:"UnlockCond,omitempty"`
	GrpBgPath   string       `protobuf:"bytes,7,opt,name=GrpBgPath,proto3" json:"GrpBgPath,omitempty"`
	GrpItemPath string       `protobuf:"bytes,8,opt,name=GrpItemPath,proto3" json:"GrpItemPath,omitempty"`
}

func (x *ResNewbieGrpDataBin) Reset() {
	*x = ResNewbieGrpDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResNewbieGrpDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResNewbieGrpDataBin) ProtoMessage() {}

func (x *ResNewbieGrpDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResNewbieGrpDataBin.ProtoReflect.Descriptor instead.
func (*ResNewbieGrpDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{232}
}

func (x *ResNewbieGrpDataBin) GetGroupID() uint32 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *ResNewbieGrpDataBin) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *ResNewbieGrpDataBin) GetGroupDesc() string {
	if x != nil {
		return x.GroupDesc
	}
	return ""
}

func (x *ResNewbieGrpDataBin) GetAwardDropID() uint32 {
	if x != nil {
		return x.AwardDropID
	}
	return 0
}

func (x *ResNewbieGrpDataBin) GetUnlockCond() *ResCondInfo {
	if x != nil {
		return x.UnlockCond
	}
	return nil
}

func (x *ResNewbieGrpDataBin) GetGrpBgPath() string {
	if x != nil {
		return x.GrpBgPath
	}
	return ""
}

func (x *ResNewbieGrpDataBin) GetGrpItemPath() string {
	if x != nil {
		return x.GrpItemPath
	}
	return ""
}

type ResNewbieTaskDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID      uint32          `protobuf:"varint,1,opt,name=TaskID,proto3" json:"TaskID,omitempty"`
	BelongGrpID uint32          `protobuf:"varint,2,opt,name=BelongGrpID,proto3" json:"BelongGrpID,omitempty"`
	Name        string          `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Desc        string          `protobuf:"bytes,4,opt,name=Desc,proto3" json:"Desc,omitempty"`
	FinishCond  *ResCondInfo    `protobuf:"bytes,5,opt,name=FinishCond,proto3" json:"FinishCond,omitempty"`
	IconPath    string          `protobuf:"bytes,6,opt,name=IconPath,proto3" json:"IconPath,omitempty"`
	JumpParam   string          `protobuf:"bytes,7,opt,name=JumpParam,proto3" json:"JumpParam,omitempty"`
	AwardDropID uint32          `protobuf:"varint,8,opt,name=AwardDropID,proto3" json:"AwardDropID,omitempty"`
	TaskType    ENewbieTaskType `protobuf:"varint,9,opt,name=TaskType,proto3,enum=ResData.ENewbieTaskType" json:"TaskType,omitempty"`
}

func (x *ResNewbieTaskDataBin) Reset() {
	*x = ResNewbieTaskDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResNewbieTaskDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResNewbieTaskDataBin) ProtoMessage() {}

func (x *ResNewbieTaskDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResNewbieTaskDataBin.ProtoReflect.Descriptor instead.
func (*ResNewbieTaskDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{233}
}

func (x *ResNewbieTaskDataBin) GetTaskID() uint32 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *ResNewbieTaskDataBin) GetBelongGrpID() uint32 {
	if x != nil {
		return x.BelongGrpID
	}
	return 0
}

func (x *ResNewbieTaskDataBin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResNewbieTaskDataBin) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ResNewbieTaskDataBin) GetFinishCond() *ResCondInfo {
	if x != nil {
		return x.FinishCond
	}
	return nil
}

func (x *ResNewbieTaskDataBin) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *ResNewbieTaskDataBin) GetJumpParam() string {
	if x != nil {
		return x.JumpParam
	}
	return ""
}

func (x *ResNewbieTaskDataBin) GetAwardDropID() uint32 {
	if x != nil {
		return x.AwardDropID
	}
	return 0
}

func (x *ResNewbieTaskDataBin) GetTaskType() ENewbieTaskType {
	if x != nil {
		return x.TaskType
	}
	return ENewbieTaskType_TASK_COMMON
}

type NewbieConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewbieGrpDataBin  *ResNewbieGrpDataBin  `protobuf:"bytes,1,opt,name=NewbieGrpDataBin,proto3" json:"NewbieGrpDataBin,omitempty"`
	NewbieTaskDataBin *ResNewbieTaskDataBin `protobuf:"bytes,2,opt,name=NewbieTaskDataBin,proto3" json:"NewbieTaskDataBin,omitempty"`
}

func (x *NewbieConf) Reset() {
	*x = NewbieConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewbieConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewbieConf) ProtoMessage() {}

func (x *NewbieConf) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewbieConf.ProtoReflect.Descriptor instead.
func (*NewbieConf) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{234}
}

func (x *NewbieConf) GetNewbieGrpDataBin() *ResNewbieGrpDataBin {
	if x != nil {
		return x.NewbieGrpDataBin
	}
	return nil
}

func (x *NewbieConf) GetNewbieTaskDataBin() *ResNewbieTaskDataBin {
	if x != nil {
		return x.NewbieTaskDataBin
	}
	return nil
}

// 局内表在局外使用的例子， 测试局内表增加SvrPlayModUniqID
type ResTestServerPlayModKeyCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Test1            uint32 `protobuf:"varint,1,opt,name=Test1,proto3" json:"Test1,omitempty"`
	SvrPlayModUniqID uint32 `protobuf:"varint,2,opt,name=SvrPlayModUniqID,proto3" json:"SvrPlayModUniqID,omitempty"` // 必须将SvrPlayModUniqID作为主键，且变量名为SvrPlayModUniqID不能改变
	Test2            uint32 `protobuf:"varint,3,opt,name=Test2,proto3" json:"Test2,omitempty"`
}

func (x *ResTestServerPlayModKeyCfg) Reset() {
	*x = ResTestServerPlayModKeyCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResTestServerPlayModKeyCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResTestServerPlayModKeyCfg) ProtoMessage() {}

func (x *ResTestServerPlayModKeyCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResTestServerPlayModKeyCfg.ProtoReflect.Descriptor instead.
func (*ResTestServerPlayModKeyCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{235}
}

func (x *ResTestServerPlayModKeyCfg) GetTest1() uint32 {
	if x != nil {
		return x.Test1
	}
	return 0
}

func (x *ResTestServerPlayModKeyCfg) GetSvrPlayModUniqID() uint32 {
	if x != nil {
		return x.SvrPlayModUniqID
	}
	return 0
}

func (x *ResTestServerPlayModKeyCfg) GetTest2() uint32 {
	if x != nil {
		return x.Test2
	}
	return 0
}

type TestConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestCfg *ResTestServerPlayModKeyCfg `protobuf:"bytes,1,opt,name=TestCfg,proto3" json:"TestCfg,omitempty"`
}

func (x *TestConf) Reset() {
	*x = TestConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestConf) ProtoMessage() {}

func (x *TestConf) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestConf.ProtoReflect.Descriptor instead.
func (*TestConf) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{236}
}

func (x *TestConf) GetTestCfg() *ResTestServerPlayModKeyCfg {
	if x != nil {
		return x.TestCfg
	}
	return nil
}

type ResCardPackCfgDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                   uint32         `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	SeasonID             uint32         `protobuf:"varint,2,opt,name=SeasonID,proto3" json:"SeasonID,omitempty"`
	CardPoolID           uint32         `protobuf:"varint,3,opt,name=CardPoolID,proto3" json:"CardPoolID,omitempty"`
	OpenGuarantee        bool           `protobuf:"varint,5,opt,name=OpenGuarantee,proto3" json:"OpenGuarantee,omitempty"`
	GuaranteeCnt         uint32         `protobuf:"varint,6,opt,name=GuaranteeCnt,proto3" json:"GuaranteeCnt,omitempty"`
	GuaranteeCardPoolID  uint32         `protobuf:"varint,7,opt,name=GuaranteeCardPoolID,proto3" json:"GuaranteeCardPoolID,omitempty"`
	Name                 string         `protobuf:"bytes,8,opt,name=Name,proto3" json:"Name,omitempty"`
	CardType             ECardPackType  `protobuf:"varint,9,opt,name=CardType,proto3,enum=ResData.ECardPackType" json:"CardType,omitempty"`
	Desc                 string         `protobuf:"bytes,10,opt,name=Desc,proto3" json:"Desc,omitempty"`
	KeyPropID            uint32         `protobuf:"varint,11,opt,name=KeyPropID,proto3" json:"KeyPropID,omitempty"`
	CostItem             *ResGameItem   `protobuf:"bytes,12,opt,name=CostItem,proto3" json:"CostItem,omitempty"` // 废弃
	OnceDrawDecorateNum  uint32         `protobuf:"varint,13,opt,name=OnceDrawDecorateNum,proto3" json:"OnceDrawDecorateNum,omitempty"`
	ExchangeKeyCostItems []*ResGameItem `protobuf:"bytes,14,rep,name=ExchangeKeyCostItems,proto3" json:"ExchangeKeyCostItems,omitempty"`
	CanExchangeKeyInGame uint32         `protobuf:"varint,15,opt,name=CanExchangeKeyInGame,proto3" json:"CanExchangeKeyInGame,omitempty"` // 系统内兑换而不是道聚城兑换
	PropCityType         uint32         `protobuf:"varint,16,opt,name=PropCityType,proto3" json:"PropCityType,omitempty"`                 // 道具城购买类型
	PropCityID           uint32         `protobuf:"varint,17,opt,name=PropCityID,proto3" json:"PropCityID,omitempty"`                     // 道具城购买物品ID
}

func (x *ResCardPackCfgDataBin) Reset() {
	*x = ResCardPackCfgDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResCardPackCfgDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResCardPackCfgDataBin) ProtoMessage() {}

func (x *ResCardPackCfgDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResCardPackCfgDataBin.ProtoReflect.Descriptor instead.
func (*ResCardPackCfgDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{237}
}

func (x *ResCardPackCfgDataBin) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResCardPackCfgDataBin) GetSeasonID() uint32 {
	if x != nil {
		return x.SeasonID
	}
	return 0
}

func (x *ResCardPackCfgDataBin) GetCardPoolID() uint32 {
	if x != nil {
		return x.CardPoolID
	}
	return 0
}

func (x *ResCardPackCfgDataBin) GetOpenGuarantee() bool {
	if x != nil {
		return x.OpenGuarantee
	}
	return false
}

func (x *ResCardPackCfgDataBin) GetGuaranteeCnt() uint32 {
	if x != nil {
		return x.GuaranteeCnt
	}
	return 0
}

func (x *ResCardPackCfgDataBin) GetGuaranteeCardPoolID() uint32 {
	if x != nil {
		return x.GuaranteeCardPoolID
	}
	return 0
}

func (x *ResCardPackCfgDataBin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResCardPackCfgDataBin) GetCardType() ECardPackType {
	if x != nil {
		return x.CardType
	}
	return ECardPackType_CARD_TYPE_DIAMOND
}

func (x *ResCardPackCfgDataBin) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ResCardPackCfgDataBin) GetKeyPropID() uint32 {
	if x != nil {
		return x.KeyPropID
	}
	return 0
}

func (x *ResCardPackCfgDataBin) GetCostItem() *ResGameItem {
	if x != nil {
		return x.CostItem
	}
	return nil
}

func (x *ResCardPackCfgDataBin) GetOnceDrawDecorateNum() uint32 {
	if x != nil {
		return x.OnceDrawDecorateNum
	}
	return 0
}

func (x *ResCardPackCfgDataBin) GetExchangeKeyCostItems() []*ResGameItem {
	if x != nil {
		return x.ExchangeKeyCostItems
	}
	return nil
}

func (x *ResCardPackCfgDataBin) GetCanExchangeKeyInGame() uint32 {
	if x != nil {
		return x.CanExchangeKeyInGame
	}
	return 0
}

func (x *ResCardPackCfgDataBin) GetPropCityType() uint32 {
	if x != nil {
		return x.PropCityType
	}
	return 0
}

func (x *ResCardPackCfgDataBin) GetPropCityID() uint32 {
	if x != nil {
		return x.PropCityID
	}
	return 0
}

type DrawCardConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardPackCfg *ResCardPackCfgDataBin `protobuf:"bytes,1,opt,name=CardPackCfg,proto3" json:"CardPackCfg,omitempty"`
}

func (x *DrawCardConf) Reset() {
	*x = DrawCardConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawCardConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawCardConf) ProtoMessage() {}

func (x *DrawCardConf) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawCardConf.ProtoReflect.Descriptor instead.
func (*DrawCardConf) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{238}
}

func (x *DrawCardConf) GetCardPackCfg() *ResCardPackCfgDataBin {
	if x != nil {
		return x.CardPackCfg
	}
	return nil
}

type HelpSystemTab struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Passage []*HelpSystemPassage `protobuf:"bytes,1,rep,name=Passage,proto3" json:"Passage,omitempty"`
	TabName string               `protobuf:"bytes,2,opt,name=TabName,proto3" json:"TabName,omitempty"`
}

func (x *HelpSystemTab) Reset() {
	*x = HelpSystemTab{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelpSystemTab) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelpSystemTab) ProtoMessage() {}

func (x *HelpSystemTab) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelpSystemTab.ProtoReflect.Descriptor instead.
func (*HelpSystemTab) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{239}
}

func (x *HelpSystemTab) GetPassage() []*HelpSystemPassage {
	if x != nil {
		return x.Passage
	}
	return nil
}

func (x *HelpSystemTab) GetTabName() string {
	if x != nil {
		return x.TabName
	}
	return ""
}

type HelpSystemPassage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PassageTitle string   `protobuf:"bytes,1,opt,name=PassageTitle,proto3" json:"PassageTitle,omitempty"`
	ImageType    uint32   `protobuf:"varint,2,opt,name=ImageType,proto3" json:"ImageType,omitempty"`
	Content      string   `protobuf:"bytes,3,opt,name=Content,proto3" json:"Content,omitempty"`
	ImagePath    []string `protobuf:"bytes,4,rep,name=ImagePath,proto3" json:"ImagePath,omitempty"`
}

func (x *HelpSystemPassage) Reset() {
	*x = HelpSystemPassage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelpSystemPassage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelpSystemPassage) ProtoMessage() {}

func (x *HelpSystemPassage) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelpSystemPassage.ProtoReflect.Descriptor instead.
func (*HelpSystemPassage) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{240}
}

func (x *HelpSystemPassage) GetPassageTitle() string {
	if x != nil {
		return x.PassageTitle
	}
	return ""
}

func (x *HelpSystemPassage) GetImageType() uint32 {
	if x != nil {
		return x.ImageType
	}
	return 0
}

func (x *HelpSystemPassage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *HelpSystemPassage) GetImagePath() []string {
	if x != nil {
		return x.ImagePath
	}
	return nil
}

type ResHelpSystemCfgDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       uint32           `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Title    string           `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	TabCount uint32           `protobuf:"varint,3,opt,name=TabCount,proto3" json:"TabCount,omitempty"`
	TabData  []*HelpSystemTab `protobuf:"bytes,4,rep,name=TabData,proto3" json:"TabData,omitempty"`
}

func (x *ResHelpSystemCfgDataBin) Reset() {
	*x = ResHelpSystemCfgDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResHelpSystemCfgDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResHelpSystemCfgDataBin) ProtoMessage() {}

func (x *ResHelpSystemCfgDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResHelpSystemCfgDataBin.ProtoReflect.Descriptor instead.
func (*ResHelpSystemCfgDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{241}
}

func (x *ResHelpSystemCfgDataBin) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResHelpSystemCfgDataBin) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResHelpSystemCfgDataBin) GetTabCount() uint32 {
	if x != nil {
		return x.TabCount
	}
	return 0
}

func (x *ResHelpSystemCfgDataBin) GetTabData() []*HelpSystemTab {
	if x != nil {
		return x.TabData
	}
	return nil
}

type ResNBGuideTriggerTimeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  uint32   `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Param []uint32 `protobuf:"varint,2,rep,packed,name=Param,proto3" json:"Param,omitempty"`
}

func (x *ResNBGuideTriggerTimeItem) Reset() {
	*x = ResNBGuideTriggerTimeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResNBGuideTriggerTimeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResNBGuideTriggerTimeItem) ProtoMessage() {}

func (x *ResNBGuideTriggerTimeItem) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResNBGuideTriggerTimeItem.ProtoReflect.Descriptor instead.
func (*ResNBGuideTriggerTimeItem) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{242}
}

func (x *ResNBGuideTriggerTimeItem) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ResNBGuideTriggerTimeItem) GetParam() []uint32 {
	if x != nil {
		return x.Param
	}
	return nil
}

type ResNBGuideTriggerConditionItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  uint32   `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Param []uint32 `protobuf:"varint,2,rep,packed,name=Param,proto3" json:"Param,omitempty"`
}

func (x *ResNBGuideTriggerConditionItem) Reset() {
	*x = ResNBGuideTriggerConditionItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResNBGuideTriggerConditionItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResNBGuideTriggerConditionItem) ProtoMessage() {}

func (x *ResNBGuideTriggerConditionItem) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResNBGuideTriggerConditionItem.ProtoReflect.Descriptor instead.
func (*ResNBGuideTriggerConditionItem) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{243}
}

func (x *ResNBGuideTriggerConditionItem) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ResNBGuideTriggerConditionItem) GetParam() []uint32 {
	if x != nil {
		return x.Param
	}
	return nil
}

type ResNBGuideMainLineCfgDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                uint32                            `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	MinLevel          uint32                            `protobuf:"varint,2,opt,name=MinLevel,proto3" json:"MinLevel,omitempty"`
	MaxLevel          uint32                            `protobuf:"varint,3,opt,name=MaxLevel,proto3" json:"MaxLevel,omitempty"`
	CanNotSkip        uint32                            `protobuf:"varint,4,opt,name=CanNotSkip,proto3" json:"CanNotSkip,omitempty"`
	SaveType          uint32                            `protobuf:"varint,5,opt,name=SaveType,proto3" json:"SaveType,omitempty"`
	BpPath            string                            `protobuf:"bytes,6,opt,name=BpPath,proto3" json:"BpPath,omitempty"`
	Triggers          []*ResNBGuideTriggerTimeItem      `protobuf:"bytes,7,rep,name=Triggers,proto3" json:"Triggers,omitempty"`
	Conditions        []*ResNBGuideTriggerConditionItem `protobuf:"bytes,8,rep,name=Conditions,proto3" json:"Conditions,omitempty"`
	SkipConditions    []*ResNBGuideTriggerConditionItem `protobuf:"bytes,9,rep,name=SkipConditions,proto3" json:"SkipConditions,omitempty"`
	Priority          uint32                            `protobuf:"varint,10,opt,name=Priority,proto3" json:"Priority,omitempty"`
	IsOffline         bool                              `protobuf:"varint,11,opt,name=IsOffline,proto3" json:"IsOffline,omitempty"`
	IsInGame          bool                              `protobuf:"varint,12,opt,name=IsInGame,proto3" json:"IsInGame,omitempty"`
	IsOutGameWeakBoot bool                              `protobuf:"varint,13,opt,name=IsOutGameWeakBoot,proto3" json:"IsOutGameWeakBoot,omitempty"`
}

func (x *ResNBGuideMainLineCfgDataBin) Reset() {
	*x = ResNBGuideMainLineCfgDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResNBGuideMainLineCfgDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResNBGuideMainLineCfgDataBin) ProtoMessage() {}

func (x *ResNBGuideMainLineCfgDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResNBGuideMainLineCfgDataBin.ProtoReflect.Descriptor instead.
func (*ResNBGuideMainLineCfgDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{244}
}

func (x *ResNBGuideMainLineCfgDataBin) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResNBGuideMainLineCfgDataBin) GetMinLevel() uint32 {
	if x != nil {
		return x.MinLevel
	}
	return 0
}

func (x *ResNBGuideMainLineCfgDataBin) GetMaxLevel() uint32 {
	if x != nil {
		return x.MaxLevel
	}
	return 0
}

func (x *ResNBGuideMainLineCfgDataBin) GetCanNotSkip() uint32 {
	if x != nil {
		return x.CanNotSkip
	}
	return 0
}

func (x *ResNBGuideMainLineCfgDataBin) GetSaveType() uint32 {
	if x != nil {
		return x.SaveType
	}
	return 0
}

func (x *ResNBGuideMainLineCfgDataBin) GetBpPath() string {
	if x != nil {
		return x.BpPath
	}
	return ""
}

func (x *ResNBGuideMainLineCfgDataBin) GetTriggers() []*ResNBGuideTriggerTimeItem {
	if x != nil {
		return x.Triggers
	}
	return nil
}

func (x *ResNBGuideMainLineCfgDataBin) GetConditions() []*ResNBGuideTriggerConditionItem {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *ResNBGuideMainLineCfgDataBin) GetSkipConditions() []*ResNBGuideTriggerConditionItem {
	if x != nil {
		return x.SkipConditions
	}
	return nil
}

func (x *ResNBGuideMainLineCfgDataBin) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *ResNBGuideMainLineCfgDataBin) GetIsOffline() bool {
	if x != nil {
		return x.IsOffline
	}
	return false
}

func (x *ResNBGuideMainLineCfgDataBin) GetIsInGame() bool {
	if x != nil {
		return x.IsInGame
	}
	return false
}

func (x *ResNBGuideMainLineCfgDataBin) GetIsOutGameWeakBoot() bool {
	if x != nil {
		return x.IsOutGameWeakBoot
	}
	return false
}

type ResDT_NBGuideIntroducer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	NameHexColorStr string `protobuf:"bytes,2,opt,name=NameHexColorStr,proto3" json:"NameHexColorStr,omitempty"`
	NameBGStyle     uint32 `protobuf:"varint,3,opt,name=NameBGStyle,proto3" json:"NameBGStyle,omitempty"`
	Dir             uint32 `protobuf:"varint,4,opt,name=Dir,proto3" json:"Dir,omitempty"`
	ID              uint32 `protobuf:"varint,5,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ResDT_NBGuideIntroducer) Reset() {
	*x = ResDT_NBGuideIntroducer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_NBGuideIntroducer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_NBGuideIntroducer) ProtoMessage() {}

func (x *ResDT_NBGuideIntroducer) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_NBGuideIntroducer.ProtoReflect.Descriptor instead.
func (*ResDT_NBGuideIntroducer) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{245}
}

func (x *ResDT_NBGuideIntroducer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResDT_NBGuideIntroducer) GetNameHexColorStr() string {
	if x != nil {
		return x.NameHexColorStr
	}
	return ""
}

func (x *ResDT_NBGuideIntroducer) GetNameBGStyle() uint32 {
	if x != nil {
		return x.NameBGStyle
	}
	return 0
}

func (x *ResDT_NBGuideIntroducer) GetDir() uint32 {
	if x != nil {
		return x.Dir
	}
	return 0
}

func (x *ResDT_NBGuideIntroducer) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

type ResNBGuideIntroduceCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                  uint32                   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Introducer          *ResDT_NBGuideIntroducer `protobuf:"bytes,2,opt,name=Introducer,proto3" json:"Introducer,omitempty"`
	Text                string                   `protobuf:"bytes,3,opt,name=Text,proto3" json:"Text,omitempty"`
	AudioEventName      string                   `protobuf:"bytes,4,opt,name=AudioEventName,proto3" json:"AudioEventName,omitempty"`
	PosX                uint32                   `protobuf:"varint,5,opt,name=PosX,proto3" json:"PosX,omitempty"`
	Posy                uint32                   `protobuf:"varint,6,opt,name=Posy,proto3" json:"Posy,omitempty"`
	AnchorName          string                   `protobuf:"bytes,7,opt,name=AnchorName,proto3" json:"AnchorName,omitempty"`
	OpTipAudioEventName string                   `protobuf:"bytes,8,opt,name=OpTipAudioEventName,proto3" json:"OpTipAudioEventName,omitempty"`
}

func (x *ResNBGuideIntroduceCfg) Reset() {
	*x = ResNBGuideIntroduceCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResNBGuideIntroduceCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResNBGuideIntroduceCfg) ProtoMessage() {}

func (x *ResNBGuideIntroduceCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResNBGuideIntroduceCfg.ProtoReflect.Descriptor instead.
func (*ResNBGuideIntroduceCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{246}
}

func (x *ResNBGuideIntroduceCfg) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResNBGuideIntroduceCfg) GetIntroducer() *ResDT_NBGuideIntroducer {
	if x != nil {
		return x.Introducer
	}
	return nil
}

func (x *ResNBGuideIntroduceCfg) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ResNBGuideIntroduceCfg) GetAudioEventName() string {
	if x != nil {
		return x.AudioEventName
	}
	return ""
}

func (x *ResNBGuideIntroduceCfg) GetPosX() uint32 {
	if x != nil {
		return x.PosX
	}
	return 0
}

func (x *ResNBGuideIntroduceCfg) GetPosy() uint32 {
	if x != nil {
		return x.Posy
	}
	return 0
}

func (x *ResNBGuideIntroduceCfg) GetAnchorName() string {
	if x != nil {
		return x.AnchorName
	}
	return ""
}

func (x *ResNBGuideIntroduceCfg) GetOpTipAudioEventName() string {
	if x != nil {
		return x.OpTipAudioEventName
	}
	return ""
}

type ResNBGuideFingureCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ShowFingure uint32 `protobuf:"varint,2,opt,name=ShowFingure,proto3" json:"ShowFingure,omitempty"`
	FingureDir  uint32 `protobuf:"varint,3,opt,name=FingureDir,proto3" json:"FingureDir,omitempty"`
	PosX        uint32 `protobuf:"varint,4,opt,name=PosX,proto3" json:"PosX,omitempty"`
	Posy        uint32 `protobuf:"varint,5,opt,name=Posy,proto3" json:"Posy,omitempty"`
}

func (x *ResNBGuideFingureCfg) Reset() {
	*x = ResNBGuideFingureCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResNBGuideFingureCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResNBGuideFingureCfg) ProtoMessage() {}

func (x *ResNBGuideFingureCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResNBGuideFingureCfg.ProtoReflect.Descriptor instead.
func (*ResNBGuideFingureCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{247}
}

func (x *ResNBGuideFingureCfg) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResNBGuideFingureCfg) GetShowFingure() uint32 {
	if x != nil {
		return x.ShowFingure
	}
	return 0
}

func (x *ResNBGuideFingureCfg) GetFingureDir() uint32 {
	if x != nil {
		return x.FingureDir
	}
	return 0
}

func (x *ResNBGuideFingureCfg) GetPosX() uint32 {
	if x != nil {
		return x.PosX
	}
	return 0
}

func (x *ResNBGuideFingureCfg) GetPosy() uint32 {
	if x != nil {
		return x.Posy
	}
	return 0
}

type Vector2D struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float32 `protobuf:"fixed32,1,opt,name=X,proto3" json:"X,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=Y,proto3" json:"Y,omitempty"`
}

func (x *Vector2D) Reset() {
	*x = Vector2D{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector2D) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector2D) ProtoMessage() {}

func (x *Vector2D) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector2D.ProtoReflect.Descriptor instead.
func (*Vector2D) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{248}
}

func (x *Vector2D) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Vector2D) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type ResDT_NBTip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   uint32    `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Offset *Vector2D `protobuf:"bytes,2,opt,name=Offset,proto3" json:"Offset,omitempty"`
}

func (x *ResDT_NBTip) Reset() {
	*x = ResDT_NBTip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_NBTip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_NBTip) ProtoMessage() {}

func (x *ResDT_NBTip) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_NBTip.ProtoReflect.Descriptor instead.
func (*ResDT_NBTip) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{249}
}

func (x *ResDT_NBTip) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ResDT_NBTip) GetOffset() *Vector2D {
	if x != nil {
		return x.Offset
	}
	return nil
}

type ResDT_NBFingure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        uint32    `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	DirType     uint32    `protobuf:"varint,2,opt,name=DirType,proto3" json:"DirType,omitempty"`
	Offset      *Vector2D `protobuf:"bytes,3,opt,name=Offset,proto3" json:"Offset,omitempty"`
	FrameSize   *Vector2D `protobuf:"bytes,4,opt,name=FrameSize,proto3" json:"FrameSize,omitempty"`
	FrameOffset *Vector2D `protobuf:"bytes,5,opt,name=FrameOffset,proto3" json:"FrameOffset,omitempty"`
}

func (x *ResDT_NBFingure) Reset() {
	*x = ResDT_NBFingure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_NBFingure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_NBFingure) ProtoMessage() {}

func (x *ResDT_NBFingure) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_NBFingure.ProtoReflect.Descriptor instead.
func (*ResDT_NBFingure) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{250}
}

func (x *ResDT_NBFingure) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ResDT_NBFingure) GetDirType() uint32 {
	if x != nil {
		return x.DirType
	}
	return 0
}

func (x *ResDT_NBFingure) GetOffset() *Vector2D {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *ResDT_NBFingure) GetFrameSize() *Vector2D {
	if x != nil {
		return x.FrameSize
	}
	return nil
}

func (x *ResDT_NBFingure) GetFrameOffset() *Vector2D {
	if x != nil {
		return x.FrameOffset
	}
	return nil
}

type ResNBGuideUICfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      uint32           `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Tip     *ResDT_NBTip     `protobuf:"bytes,2,opt,name=Tip,proto3" json:"Tip,omitempty"`
	Fingure *ResDT_NBFingure `protobuf:"bytes,3,opt,name=Fingure,proto3" json:"Fingure,omitempty"`
}

func (x *ResNBGuideUICfg) Reset() {
	*x = ResNBGuideUICfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResNBGuideUICfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResNBGuideUICfg) ProtoMessage() {}

func (x *ResNBGuideUICfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResNBGuideUICfg.ProtoReflect.Descriptor instead.
func (*ResNBGuideUICfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{251}
}

func (x *ResNBGuideUICfg) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResNBGuideUICfg) GetTip() *ResDT_NBTip {
	if x != nil {
		return x.Tip
	}
	return nil
}

func (x *ResNBGuideUICfg) GetFingure() *ResDT_NBFingure {
	if x != nil {
		return x.Fingure
	}
	return nil
}

type ResNBGuideTipCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                  uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Title               string `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	Text                string `protobuf:"bytes,3,opt,name=Text,proto3" json:"Text,omitempty"`
	ImagePath           string `protobuf:"bytes,4,opt,name=ImagePath,proto3" json:"ImagePath,omitempty"`
	AudioEventName      string `protobuf:"bytes,5,opt,name=AudioEventName,proto3" json:"AudioEventName,omitempty"`
	OpTipAudioEventName string `protobuf:"bytes,6,opt,name=OpTipAudioEventName,proto3" json:"OpTipAudioEventName,omitempty"`
}

func (x *ResNBGuideTipCfg) Reset() {
	*x = ResNBGuideTipCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResNBGuideTipCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResNBGuideTipCfg) ProtoMessage() {}

func (x *ResNBGuideTipCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResNBGuideTipCfg.ProtoReflect.Descriptor instead.
func (*ResNBGuideTipCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{252}
}

func (x *ResNBGuideTipCfg) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResNBGuideTipCfg) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResNBGuideTipCfg) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ResNBGuideTipCfg) GetImagePath() string {
	if x != nil {
		return x.ImagePath
	}
	return ""
}

func (x *ResNBGuideTipCfg) GetAudioEventName() string {
	if x != nil {
		return x.AudioEventName
	}
	return ""
}

func (x *ResNBGuideTipCfg) GetOpTipAudioEventName() string {
	if x != nil {
		return x.OpTipAudioEventName
	}
	return ""
}

type ResNBGuideTlogCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StepID          uint32  `protobuf:"varint,1,opt,name=StepID,proto3" json:"StepID,omitempty"`
	Params          []int32 `protobuf:"varint,2,rep,packed,name=Params,proto3" json:"Params,omitempty"`
	FinishStepType  uint32  `protobuf:"varint,3,opt,name=FinishStepType,proto3" json:"FinishStepType,omitempty"`
	IsDynamicGuide  bool    `protobuf:"varint,4,opt,name=IsDynamicGuide,proto3" json:"IsDynamicGuide,omitempty"`
	TlogType        uint32  `protobuf:"varint,5,opt,name=TlogType,proto3" json:"TlogType,omitempty"`
	IsDupReportStep bool    `protobuf:"varint,6,opt,name=IsDupReportStep,proto3" json:"IsDupReportStep,omitempty"`
}

func (x *ResNBGuideTlogCfg) Reset() {
	*x = ResNBGuideTlogCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResNBGuideTlogCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResNBGuideTlogCfg) ProtoMessage() {}

func (x *ResNBGuideTlogCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResNBGuideTlogCfg.ProtoReflect.Descriptor instead.
func (*ResNBGuideTlogCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{253}
}

func (x *ResNBGuideTlogCfg) GetStepID() uint32 {
	if x != nil {
		return x.StepID
	}
	return 0
}

func (x *ResNBGuideTlogCfg) GetParams() []int32 {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *ResNBGuideTlogCfg) GetFinishStepType() uint32 {
	if x != nil {
		return x.FinishStepType
	}
	return 0
}

func (x *ResNBGuideTlogCfg) GetIsDynamicGuide() bool {
	if x != nil {
		return x.IsDynamicGuide
	}
	return false
}

func (x *ResNBGuideTlogCfg) GetTlogType() uint32 {
	if x != nil {
		return x.TlogType
	}
	return 0
}

func (x *ResNBGuideTlogCfg) GetIsDupReportStep() bool {
	if x != nil {
		return x.IsDupReportStep
	}
	return false
}

type NewbieGuideConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewbieGuideCfg  *ResNBGuideMainLineCfgDataBin `protobuf:"bytes,1,opt,name=NewbieGuideCfg,proto3" json:"NewbieGuideCfg,omitempty"`
	NewbieGuideTlog *ResNBGuideTlogCfg            `protobuf:"bytes,2,opt,name=NewbieGuideTlog,proto3" json:"NewbieGuideTlog,omitempty"`
}

func (x *NewbieGuideConf) Reset() {
	*x = NewbieGuideConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewbieGuideConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewbieGuideConf) ProtoMessage() {}

func (x *NewbieGuideConf) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewbieGuideConf.ProtoReflect.Descriptor instead.
func (*NewbieGuideConf) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{254}
}

func (x *NewbieGuideConf) GetNewbieGuideCfg() *ResNBGuideMainLineCfgDataBin {
	if x != nil {
		return x.NewbieGuideCfg
	}
	return nil
}

func (x *NewbieGuideConf) GetNewbieGuideTlog() *ResNBGuideTlogCfg {
	if x != nil {
		return x.NewbieGuideTlog
	}
	return nil
}

type NBAdditionalInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdditionalInfo string `protobuf:"bytes,1,opt,name=AdditionalInfo,proto3" json:"AdditionalInfo,omitempty"`
	AudioEventName string `protobuf:"bytes,2,opt,name=AudioEventName,proto3" json:"AudioEventName,omitempty"`
}

func (x *NBAdditionalInfo) Reset() {
	*x = NBAdditionalInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NBAdditionalInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NBAdditionalInfo) ProtoMessage() {}

func (x *NBAdditionalInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NBAdditionalInfo.ProtoReflect.Descriptor instead.
func (*NBAdditionalInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{255}
}

func (x *NBAdditionalInfo) GetAdditionalInfo() string {
	if x != nil {
		return x.AdditionalInfo
	}
	return ""
}

func (x *NBAdditionalInfo) GetAudioEventName() string {
	if x != nil {
		return x.AudioEventName
	}
	return ""
}

type ResNBAdditionalDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdditionalType uint32              `protobuf:"varint,1,opt,name=AdditionalType,proto3" json:"AdditionalType,omitempty"`
	SpineID        uint32              `protobuf:"varint,2,opt,name=SpineID,proto3" json:"SpineID,omitempty"`
	AdditionalInfo []*NBAdditionalInfo `protobuf:"bytes,3,rep,name=AdditionalInfo,proto3" json:"AdditionalInfo,omitempty"`
}

func (x *ResNBAdditionalDataBin) Reset() {
	*x = ResNBAdditionalDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResNBAdditionalDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResNBAdditionalDataBin) ProtoMessage() {}

func (x *ResNBAdditionalDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResNBAdditionalDataBin.ProtoReflect.Descriptor instead.
func (*ResNBAdditionalDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{256}
}

func (x *ResNBAdditionalDataBin) GetAdditionalType() uint32 {
	if x != nil {
		return x.AdditionalType
	}
	return 0
}

func (x *ResNBAdditionalDataBin) GetSpineID() uint32 {
	if x != nil {
		return x.SpineID
	}
	return 0
}

func (x *ResNBAdditionalDataBin) GetAdditionalInfo() []*NBAdditionalInfo {
	if x != nil {
		return x.AdditionalInfo
	}
	return nil
}

type ResNewbieConstDatabin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID    uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Value uint32 `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *ResNewbieConstDatabin) Reset() {
	*x = ResNewbieConstDatabin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResNewbieConstDatabin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResNewbieConstDatabin) ProtoMessage() {}

func (x *ResNewbieConstDatabin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResNewbieConstDatabin.ProtoReflect.Descriptor instead.
func (*ResNewbieConstDatabin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{257}
}

func (x *ResNewbieConstDatabin) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResNewbieConstDatabin) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type ResDT_TalentWeight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheckType      RES_TALENT_WEIGHT_CHECK_TYPE `protobuf:"varint,1,opt,name=CheckType,proto3,enum=ResData.RES_TALENT_WEIGHT_CHECK_TYPE" json:"CheckType,omitempty"`
	WeightAddition uint32                       `protobuf:"varint,2,opt,name=WeightAddition,proto3" json:"WeightAddition,omitempty"`
}

func (x *ResDT_TalentWeight) Reset() {
	*x = ResDT_TalentWeight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_TalentWeight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_TalentWeight) ProtoMessage() {}

func (x *ResDT_TalentWeight) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_TalentWeight.ProtoReflect.Descriptor instead.
func (*ResDT_TalentWeight) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{258}
}

func (x *ResDT_TalentWeight) GetCheckType() RES_TALENT_WEIGHT_CHECK_TYPE {
	if x != nil {
		return x.CheckType
	}
	return RES_TALENT_WEIGHT_CHECK_TYPE_RES_TALENT_WEIGHT_CHECK_INVALID
}

func (x *ResDT_TalentWeight) GetWeightAddition() uint32 {
	if x != nil {
		return x.WeightAddition
	}
	return 0
}

type ResTalentCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                           uint32                 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Icon                         string                 `protobuf:"bytes,2,opt,name=Icon,proto3" json:"Icon,omitempty"`
	Name                         string                 `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	SkillInsType                 uint32                 `protobuf:"varint,4,opt,name=SkillInsType,proto3" json:"SkillInsType,omitempty"`
	Type                         RES_TALENT_TYPE        `protobuf:"varint,5,opt,name=Type,proto3,enum=ResData.RES_TALENT_TYPE" json:"Type,omitempty"`
	SameTypeMaxCount             uint32                 `protobuf:"varint,6,opt,name=SameTypeMaxCount,proto3" json:"SameTypeMaxCount,omitempty"`
	ShowQuality                  uint32                 `protobuf:"varint,7,opt,name=ShowQuality,proto3" json:"ShowQuality,omitempty"`
	Quality                      uint32                 `protobuf:"varint,8,opt,name=Quality,proto3" json:"Quality,omitempty"`
	MaxCount                     uint32                 `protobuf:"varint,9,opt,name=MaxCount,proto3" json:"MaxCount,omitempty"`
	OrgWeightAddition            uint32                 `protobuf:"varint,10,opt,name=OrgWeightAddition,proto3" json:"OrgWeightAddition,omitempty"`
	WeightAdditions              []*ResDT_TalentWeight  `protobuf:"bytes,11,rep,name=WeightAdditions,proto3" json:"WeightAdditions,omitempty"`
	DetailDes                    string                 `protobuf:"bytes,12,opt,name=DetailDes,proto3" json:"DetailDes,omitempty"`
	SimpleDes                    string                 `protobuf:"bytes,13,opt,name=SimpleDes,proto3" json:"SimpleDes,omitempty"`
	EffParams                    []uint32               `protobuf:"varint,14,rep,packed,name=EffParams,proto3" json:"EffParams,omitempty"`
	RemoveBuff                   uint32                 `protobuf:"varint,15,opt,name=RemoveBuff,proto3" json:"RemoveBuff,omitempty"`
	UnLockType                   RES_TALENT_UNLOCK_TYPE `protobuf:"varint,16,opt,name=UnLockType,proto3,enum=ResData.RES_TALENT_UNLOCK_TYPE" json:"UnLockType,omitempty"`
	UnLockParams                 []uint32               `protobuf:"varint,17,rep,packed,name=UnLockParams,proto3" json:"UnLockParams,omitempty"`
	PrepareStageTalentActiveBuff uint32                 `protobuf:"varint,18,opt,name=PrepareStageTalentActiveBuff,proto3" json:"PrepareStageTalentActiveBuff,omitempty"`
	FightStageTalentActiveBuff   uint32                 `protobuf:"varint,19,opt,name=FightStageTalentActiveBuff,proto3" json:"FightStageTalentActiveBuff,omitempty"`
	InBattleAddBuffType          uint32                 `protobuf:"varint,20,opt,name=InBattleAddBuffType,proto3" json:"InBattleAddBuffType,omitempty"`
	BuffParams                   []uint32               `protobuf:"varint,21,rep,packed,name=BuffParams,proto3" json:"BuffParams,omitempty"`
}

func (x *ResTalentCfg) Reset() {
	*x = ResTalentCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResTalentCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResTalentCfg) ProtoMessage() {}

func (x *ResTalentCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResTalentCfg.ProtoReflect.Descriptor instead.
func (*ResTalentCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{259}
}

func (x *ResTalentCfg) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResTalentCfg) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *ResTalentCfg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResTalentCfg) GetSkillInsType() uint32 {
	if x != nil {
		return x.SkillInsType
	}
	return 0
}

func (x *ResTalentCfg) GetType() RES_TALENT_TYPE {
	if x != nil {
		return x.Type
	}
	return RES_TALENT_TYPE_RES_TALENT_TYPE_INVALID
}

func (x *ResTalentCfg) GetSameTypeMaxCount() uint32 {
	if x != nil {
		return x.SameTypeMaxCount
	}
	return 0
}

func (x *ResTalentCfg) GetShowQuality() uint32 {
	if x != nil {
		return x.ShowQuality
	}
	return 0
}

func (x *ResTalentCfg) GetQuality() uint32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *ResTalentCfg) GetMaxCount() uint32 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

func (x *ResTalentCfg) GetOrgWeightAddition() uint32 {
	if x != nil {
		return x.OrgWeightAddition
	}
	return 0
}

func (x *ResTalentCfg) GetWeightAdditions() []*ResDT_TalentWeight {
	if x != nil {
		return x.WeightAdditions
	}
	return nil
}

func (x *ResTalentCfg) GetDetailDes() string {
	if x != nil {
		return x.DetailDes
	}
	return ""
}

func (x *ResTalentCfg) GetSimpleDes() string {
	if x != nil {
		return x.SimpleDes
	}
	return ""
}

func (x *ResTalentCfg) GetEffParams() []uint32 {
	if x != nil {
		return x.EffParams
	}
	return nil
}

func (x *ResTalentCfg) GetRemoveBuff() uint32 {
	if x != nil {
		return x.RemoveBuff
	}
	return 0
}

func (x *ResTalentCfg) GetUnLockType() RES_TALENT_UNLOCK_TYPE {
	if x != nil {
		return x.UnLockType
	}
	return RES_TALENT_UNLOCK_TYPE_RES_TALENT_UNLOCK_INVALID
}

func (x *ResTalentCfg) GetUnLockParams() []uint32 {
	if x != nil {
		return x.UnLockParams
	}
	return nil
}

func (x *ResTalentCfg) GetPrepareStageTalentActiveBuff() uint32 {
	if x != nil {
		return x.PrepareStageTalentActiveBuff
	}
	return 0
}

func (x *ResTalentCfg) GetFightStageTalentActiveBuff() uint32 {
	if x != nil {
		return x.FightStageTalentActiveBuff
	}
	return 0
}

func (x *ResTalentCfg) GetInBattleAddBuffType() uint32 {
	if x != nil {
		return x.InBattleAddBuffType
	}
	return 0
}

func (x *ResTalentCfg) GetBuffParams() []uint32 {
	if x != nil {
		return x.BuffParams
	}
	return nil
}

type ResDT_TalentRebuildParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiftLevel      uint32 `protobuf:"varint,1,opt,name=liftLevel,proto3" json:"liftLevel,omitempty"`
	WeightAddition uint32 `protobuf:"varint,2,opt,name=WeightAddition,proto3" json:"WeightAddition,omitempty"`
}

func (x *ResDT_TalentRebuildParam) Reset() {
	*x = ResDT_TalentRebuildParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_TalentRebuildParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_TalentRebuildParam) ProtoMessage() {}

func (x *ResDT_TalentRebuildParam) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_TalentRebuildParam.ProtoReflect.Descriptor instead.
func (*ResDT_TalentRebuildParam) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{260}
}

func (x *ResDT_TalentRebuildParam) GetLiftLevel() uint32 {
	if x != nil {
		return x.LiftLevel
	}
	return 0
}

func (x *ResDT_TalentRebuildParam) GetWeightAddition() uint32 {
	if x != nil {
		return x.WeightAddition
	}
	return 0
}

type ResTalentRebuild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            uint32                      `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Level         uint32                      `protobuf:"varint,2,opt,name=Level,proto3" json:"Level,omitempty"`
	RebuildParams []*ResDT_TalentRebuildParam `protobuf:"bytes,3,rep,name=RebuildParams,proto3" json:"RebuildParams,omitempty"`
}

func (x *ResTalentRebuild) Reset() {
	*x = ResTalentRebuild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResTalentRebuild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResTalentRebuild) ProtoMessage() {}

func (x *ResTalentRebuild) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResTalentRebuild.ProtoReflect.Descriptor instead.
func (*ResTalentRebuild) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{261}
}

func (x *ResTalentRebuild) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResTalentRebuild) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ResTalentRebuild) GetRebuildParams() []*ResDT_TalentRebuildParam {
	if x != nil {
		return x.RebuildParams
	}
	return nil
}

type ResTalentQuality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Level          uint32 `protobuf:"varint,2,opt,name=Level,proto3" json:"Level,omitempty"`
	Quality1Weight uint32 `protobuf:"varint,3,opt,name=Quality1Weight,proto3" json:"Quality1Weight,omitempty"`
	Quality2Weight uint32 `protobuf:"varint,4,opt,name=Quality2Weight,proto3" json:"Quality2Weight,omitempty"`
	Quality3Weight uint32 `protobuf:"varint,5,opt,name=Quality3Weight,proto3" json:"Quality3Weight,omitempty"`
	Quality4Weight uint32 `protobuf:"varint,6,opt,name=Quality4Weight,proto3" json:"Quality4Weight,omitempty"`
	Quality5Weight uint32 `protobuf:"varint,7,opt,name=Quality5Weight,proto3" json:"Quality5Weight,omitempty"`
}

func (x *ResTalentQuality) Reset() {
	*x = ResTalentQuality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResTalentQuality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResTalentQuality) ProtoMessage() {}

func (x *ResTalentQuality) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResTalentQuality.ProtoReflect.Descriptor instead.
func (*ResTalentQuality) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{262}
}

func (x *ResTalentQuality) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResTalentQuality) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ResTalentQuality) GetQuality1Weight() uint32 {
	if x != nil {
		return x.Quality1Weight
	}
	return 0
}

func (x *ResTalentQuality) GetQuality2Weight() uint32 {
	if x != nil {
		return x.Quality2Weight
	}
	return 0
}

func (x *ResTalentQuality) GetQuality3Weight() uint32 {
	if x != nil {
		return x.Quality3Weight
	}
	return 0
}

func (x *ResTalentQuality) GetQuality4Weight() uint32 {
	if x != nil {
		return x.Quality4Weight
	}
	return 0
}

func (x *ResTalentQuality) GetQuality5Weight() uint32 {
	if x != nil {
		return x.Quality5Weight
	}
	return 0
}

type ResPlayerTalentSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quality                         uint32   `protobuf:"varint,1,opt,name=Quality,proto3" json:"Quality,omitempty"`
	Count                           uint32   `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`
	MandatoryGroups                 []uint32 `protobuf:"varint,3,rep,packed,name=MandatoryGroups,proto3" json:"MandatoryGroups,omitempty"`
	IgnoreTalentPredication         bool     `protobuf:"varint,4,opt,name=IgnoreTalentPredication,proto3" json:"IgnoreTalentPredication,omitempty"`
	ImplicitExcludeWhenElectionFail bool     `protobuf:"varint,5,opt,name=ImplicitExcludeWhenElectionFail,proto3" json:"ImplicitExcludeWhenElectionFail,omitempty"`
	EngageGL                        string   `protobuf:"bytes,6,opt,name=EngageGL,proto3" json:"EngageGL,omitempty"`
	SlotDescription                 string   `protobuf:"bytes,7,opt,name=SlotDescription,proto3" json:"SlotDescription,omitempty"`
	UnlockSlotTip                   string   `protobuf:"bytes,8,opt,name=UnlockSlotTip,proto3" json:"UnlockSlotTip,omitempty"`
}

func (x *ResPlayerTalentSlot) Reset() {
	*x = ResPlayerTalentSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResPlayerTalentSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResPlayerTalentSlot) ProtoMessage() {}

func (x *ResPlayerTalentSlot) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResPlayerTalentSlot.ProtoReflect.Descriptor instead.
func (*ResPlayerTalentSlot) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{263}
}

func (x *ResPlayerTalentSlot) GetQuality() uint32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *ResPlayerTalentSlot) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ResPlayerTalentSlot) GetMandatoryGroups() []uint32 {
	if x != nil {
		return x.MandatoryGroups
	}
	return nil
}

func (x *ResPlayerTalentSlot) GetIgnoreTalentPredication() bool {
	if x != nil {
		return x.IgnoreTalentPredication
	}
	return false
}

func (x *ResPlayerTalentSlot) GetImplicitExcludeWhenElectionFail() bool {
	if x != nil {
		return x.ImplicitExcludeWhenElectionFail
	}
	return false
}

func (x *ResPlayerTalentSlot) GetEngageGL() string {
	if x != nil {
		return x.EngageGL
	}
	return ""
}

func (x *ResPlayerTalentSlot) GetSlotDescription() string {
	if x != nil {
		return x.SlotDescription
	}
	return ""
}

func (x *ResPlayerTalentSlot) GetUnlockSlotTip() string {
	if x != nil {
		return x.UnlockSlotTip
	}
	return ""
}

type ResPlayerTalentSlotGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID uint32                 `protobuf:"varint,1,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	Type    uint32                 `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Weight  uint32                 `protobuf:"varint,3,opt,name=Weight,proto3" json:"Weight,omitempty"`
	Count   uint32                 `protobuf:"varint,4,opt,name=Count,proto3" json:"Count,omitempty"`
	Slots   []*ResPlayerTalentSlot `protobuf:"bytes,5,rep,name=Slots,proto3" json:"Slots,omitempty"`
}

func (x *ResPlayerTalentSlotGroup) Reset() {
	*x = ResPlayerTalentSlotGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResPlayerTalentSlotGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResPlayerTalentSlotGroup) ProtoMessage() {}

func (x *ResPlayerTalentSlotGroup) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResPlayerTalentSlotGroup.ProtoReflect.Descriptor instead.
func (*ResPlayerTalentSlotGroup) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{264}
}

func (x *ResPlayerTalentSlotGroup) GetGroupID() uint32 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *ResPlayerTalentSlotGroup) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ResPlayerTalentSlotGroup) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ResPlayerTalentSlotGroup) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ResPlayerTalentSlotGroup) GetSlots() []*ResPlayerTalentSlot {
	if x != nil {
		return x.Slots
	}
	return nil
}

type ResPlayerTalent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                      uint32               `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	SvrPlayModUniqID        uint32               `protobuf:"varint,25,opt,name=SvrPlayModUniqID,proto3" json:"SvrPlayModUniqID,omitempty"`
	Name                    string               `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Icon                    string               `protobuf:"bytes,3,opt,name=Icon,proto3" json:"Icon,omitempty"`
	Description             string               `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`
	Summary                 string               `protobuf:"bytes,5,opt,name=Summary,proto3" json:"Summary,omitempty"`
	LordID                  uint32               `protobuf:"varint,6,opt,name=LordID,proto3" json:"LordID,omitempty"`
	Quality                 uint32               `protobuf:"varint,7,opt,name=Quality,proto3" json:"Quality,omitempty"`
	Weight                  uint32               `protobuf:"varint,8,opt,name=Weight,proto3" json:"Weight,omitempty"`
	MajorGroup              string               `protobuf:"bytes,9,opt,name=MajorGroup,proto3" json:"MajorGroup,omitempty"`
	MinorGroup              string               `protobuf:"bytes,10,opt,name=MinorGroup,proto3" json:"MinorGroup,omitempty"`
	ImplictMutexGroups      []uint32             `protobuf:"varint,11,rep,packed,name=ImplictMutexGroups,proto3" json:"ImplictMutexGroups,omitempty"`
	ExplictMutexGroups      []uint32             `protobuf:"varint,12,rep,packed,name=ExplictMutexGroups,proto3" json:"ExplictMutexGroups,omitempty"`
	MandatoryGroup          uint32               `protobuf:"varint,13,opt,name=MandatoryGroup,proto3" json:"MandatoryGroup,omitempty"`
	PredicateGL             string               `protobuf:"bytes,14,opt,name=PredicateGL,proto3" json:"PredicateGL,omitempty"`
	LogicGL                 string               `protobuf:"bytes,15,opt,name=LogicGL,proto3" json:"LogicGL,omitempty"`
	WorldViewShort          string               `protobuf:"bytes,16,opt,name=WorldViewShort,proto3" json:"WorldViewShort,omitempty"`
	GameCoreAITalentEnabled bool                 `protobuf:"varint,17,opt,name=GameCoreAITalentEnabled,proto3" json:"GameCoreAITalentEnabled,omitempty"`
	AITalentType            PlayerTalentAIType   `protobuf:"varint,18,opt,name=AITalentType,proto3,enum=ResData.PlayerTalentAIType" json:"AITalentType,omitempty"`
	AIParams                []int32              `protobuf:"varint,19,rep,packed,name=AIParams,proto3" json:"AIParams,omitempty"`
	TalentSkillID           uint32               `protobuf:"varint,20,opt,name=TalentSkillID,proto3" json:"TalentSkillID,omitempty"`
	AdditionParams          []uint32             `protobuf:"varint,21,rep,packed,name=AdditionParams,proto3" json:"AdditionParams,omitempty"`
	FuncType                RES_TALENT_FUNC_TYPE `protobuf:"varint,22,opt,name=FuncType,proto3,enum=ResData.RES_TALENT_FUNC_TYPE" json:"FuncType,omitempty"`
	RecruitMinStepID        uint32               `protobuf:"varint,23,opt,name=RecruitMinStepID,proto3" json:"RecruitMinStepID,omitempty"`
}

func (x *ResPlayerTalent) Reset() {
	*x = ResPlayerTalent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResPlayerTalent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResPlayerTalent) ProtoMessage() {}

func (x *ResPlayerTalent) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResPlayerTalent.ProtoReflect.Descriptor instead.
func (*ResPlayerTalent) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{265}
}

func (x *ResPlayerTalent) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResPlayerTalent) GetSvrPlayModUniqID() uint32 {
	if x != nil {
		return x.SvrPlayModUniqID
	}
	return 0
}

func (x *ResPlayerTalent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResPlayerTalent) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *ResPlayerTalent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ResPlayerTalent) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *ResPlayerTalent) GetLordID() uint32 {
	if x != nil {
		return x.LordID
	}
	return 0
}

func (x *ResPlayerTalent) GetQuality() uint32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *ResPlayerTalent) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ResPlayerTalent) GetMajorGroup() string {
	if x != nil {
		return x.MajorGroup
	}
	return ""
}

func (x *ResPlayerTalent) GetMinorGroup() string {
	if x != nil {
		return x.MinorGroup
	}
	return ""
}

func (x *ResPlayerTalent) GetImplictMutexGroups() []uint32 {
	if x != nil {
		return x.ImplictMutexGroups
	}
	return nil
}

func (x *ResPlayerTalent) GetExplictMutexGroups() []uint32 {
	if x != nil {
		return x.ExplictMutexGroups
	}
	return nil
}

func (x *ResPlayerTalent) GetMandatoryGroup() uint32 {
	if x != nil {
		return x.MandatoryGroup
	}
	return 0
}

func (x *ResPlayerTalent) GetPredicateGL() string {
	if x != nil {
		return x.PredicateGL
	}
	return ""
}

func (x *ResPlayerTalent) GetLogicGL() string {
	if x != nil {
		return x.LogicGL
	}
	return ""
}

func (x *ResPlayerTalent) GetWorldViewShort() string {
	if x != nil {
		return x.WorldViewShort
	}
	return ""
}

func (x *ResPlayerTalent) GetGameCoreAITalentEnabled() bool {
	if x != nil {
		return x.GameCoreAITalentEnabled
	}
	return false
}

func (x *ResPlayerTalent) GetAITalentType() PlayerTalentAIType {
	if x != nil {
		return x.AITalentType
	}
	return PlayerTalentAIType_PlayerTalentAIType_Common
}

func (x *ResPlayerTalent) GetAIParams() []int32 {
	if x != nil {
		return x.AIParams
	}
	return nil
}

func (x *ResPlayerTalent) GetTalentSkillID() uint32 {
	if x != nil {
		return x.TalentSkillID
	}
	return 0
}

func (x *ResPlayerTalent) GetAdditionParams() []uint32 {
	if x != nil {
		return x.AdditionParams
	}
	return nil
}

func (x *ResPlayerTalent) GetFuncType() RES_TALENT_FUNC_TYPE {
	if x != nil {
		return x.FuncType
	}
	return RES_TALENT_FUNC_TYPE_RES_TALENT_FUNC_TYPE_NULL
}

func (x *ResPlayerTalent) GetRecruitMinStepID() uint32 {
	if x != nil {
		return x.RecruitMinStepID
	}
	return 0
}

type ResPlayerTalentSkill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                  uint32                            `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	CD                  uint32                            `protobuf:"varint,2,opt,name=CD,proto3" json:"CD,omitempty"`
	SkillIndicateType   TalentSkilIndicateType            `protobuf:"varint,3,opt,name=skillIndicateType,proto3,enum=ResData.TalentSkilIndicateType" json:"skillIndicateType,omitempty"`
	SkillIndicateParams []int32                           `protobuf:"varint,4,rep,packed,name=skillIndicateParams,proto3" json:"skillIndicateParams,omitempty"`
	TriggerMethod       uint32                            `protobuf:"varint,5,opt,name=triggerMethod,proto3" json:"triggerMethod,omitempty"`
	TriggerDir          PlayerTalentTriggerSkillDirection `protobuf:"varint,6,opt,name=triggerDir,proto3,enum=ResData.PlayerTalentTriggerSkillDirection" json:"triggerDir,omitempty"`
}

func (x *ResPlayerTalentSkill) Reset() {
	*x = ResPlayerTalentSkill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResPlayerTalentSkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResPlayerTalentSkill) ProtoMessage() {}

func (x *ResPlayerTalentSkill) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResPlayerTalentSkill.ProtoReflect.Descriptor instead.
func (*ResPlayerTalentSkill) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{266}
}

func (x *ResPlayerTalentSkill) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResPlayerTalentSkill) GetCD() uint32 {
	if x != nil {
		return x.CD
	}
	return 0
}

func (x *ResPlayerTalentSkill) GetSkillIndicateType() TalentSkilIndicateType {
	if x != nil {
		return x.SkillIndicateType
	}
	return TalentSkilIndicateType_TalentSkilIndicateType_Rectangle
}

func (x *ResPlayerTalentSkill) GetSkillIndicateParams() []int32 {
	if x != nil {
		return x.SkillIndicateParams
	}
	return nil
}

func (x *ResPlayerTalentSkill) GetTriggerMethod() uint32 {
	if x != nil {
		return x.TriggerMethod
	}
	return 0
}

func (x *ResPlayerTalentSkill) GetTriggerDir() PlayerTalentTriggerSkillDirection {
	if x != nil {
		return x.TriggerDir
	}
	return PlayerTalentTriggerSkillDirection_PlayerTalentTriggerSkillDirection_None
}

type ResPlayerTalentGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID         string          `protobuf:"bytes,1,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	MaxCount        uint32          `protobuf:"varint,2,opt,name=MaxCount,proto3" json:"MaxCount,omitempty"`
	TalentGroupType RES_TALENT_TYPE `protobuf:"varint,3,opt,name=TalentGroupType,proto3,enum=ResData.RES_TALENT_TYPE" json:"TalentGroupType,omitempty"`
	MinPropose      uint32          `protobuf:"varint,4,opt,name=MinPropose,proto3" json:"MinPropose,omitempty"`
	MaxPropose      uint32          `protobuf:"varint,5,opt,name=MaxPropose,proto3" json:"MaxPropose,omitempty"`
}

func (x *ResPlayerTalentGroup) Reset() {
	*x = ResPlayerTalentGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResPlayerTalentGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResPlayerTalentGroup) ProtoMessage() {}

func (x *ResPlayerTalentGroup) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResPlayerTalentGroup.ProtoReflect.Descriptor instead.
func (*ResPlayerTalentGroup) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{267}
}

func (x *ResPlayerTalentGroup) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *ResPlayerTalentGroup) GetMaxCount() uint32 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

func (x *ResPlayerTalentGroup) GetTalentGroupType() RES_TALENT_TYPE {
	if x != nil {
		return x.TalentGroupType
	}
	return RES_TALENT_TYPE_RES_TALENT_TYPE_INVALID
}

func (x *ResPlayerTalentGroup) GetMinPropose() uint32 {
	if x != nil {
		return x.MinPropose
	}
	return 0
}

func (x *ResPlayerTalentGroup) GetMaxPropose() uint32 {
	if x != nil {
		return x.MaxPropose
	}
	return 0
}

type ResPlayerTalentMutexGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MutexGroupID uint32 `protobuf:"varint,1,opt,name=MutexGroupID,proto3" json:"MutexGroupID,omitempty"`
	TalentID     uint32 `protobuf:"varint,2,opt,name=TalentID,proto3" json:"TalentID,omitempty"`
}

func (x *ResPlayerTalentMutexGroup) Reset() {
	*x = ResPlayerTalentMutexGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResPlayerTalentMutexGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResPlayerTalentMutexGroup) ProtoMessage() {}

func (x *ResPlayerTalentMutexGroup) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResPlayerTalentMutexGroup.ProtoReflect.Descriptor instead.
func (*ResPlayerTalentMutexGroup) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{268}
}

func (x *ResPlayerTalentMutexGroup) GetMutexGroupID() uint32 {
	if x != nil {
		return x.MutexGroupID
	}
	return 0
}

func (x *ResPlayerTalentMutexGroup) GetTalentID() uint32 {
	if x != nil {
		return x.TalentID
	}
	return 0
}

type TalentConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerTalentCfg *ResPlayerTalent `protobuf:"bytes,1,opt,name=PlayerTalentCfg,proto3" json:"PlayerTalentCfg,omitempty"`
}

func (x *TalentConf) Reset() {
	*x = TalentConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalentConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalentConf) ProtoMessage() {}

func (x *TalentConf) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalentConf.ProtoReflect.Descriptor instead.
func (*TalentConf) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{269}
}

func (x *TalentConf) GetPlayerTalentCfg() *ResPlayerTalent {
	if x != nil {
		return x.PlayerTalentCfg
	}
	return nil
}

type ResFormationAttackRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroID uint32  `protobuf:"varint,1,opt,name=HeroID,proto3" json:"HeroID,omitempty"`
	Type   uint32  `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Param  []int32 `protobuf:"varint,3,rep,packed,name=Param,proto3" json:"Param,omitempty"`
}

func (x *ResFormationAttackRange) Reset() {
	*x = ResFormationAttackRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResFormationAttackRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResFormationAttackRange) ProtoMessage() {}

func (x *ResFormationAttackRange) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResFormationAttackRange.ProtoReflect.Descriptor instead.
func (*ResFormationAttackRange) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{270}
}

func (x *ResFormationAttackRange) GetHeroID() uint32 {
	if x != nil {
		return x.HeroID
	}
	return 0
}

func (x *ResFormationAttackRange) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ResFormationAttackRange) GetParam() []int32 {
	if x != nil {
		return x.Param
	}
	return nil
}

type MaxFightInterest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scale uint32 `protobuf:"varint,1,opt,name=scale,proto3" json:"scale,omitempty"`
}

func (x *MaxFightInterest) Reset() {
	*x = MaxFightInterest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxFightInterest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxFightInterest) ProtoMessage() {}

func (x *MaxFightInterest) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxFightInterest.ProtoReflect.Descriptor instead.
func (*MaxFightInterest) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{271}
}

func (x *MaxFightInterest) GetScale() uint32 {
	if x != nil {
		return x.Scale
	}
	return 0
}

type ResMaxFightValueByCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             uint32              `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	FightValueTopN uint32              `protobuf:"varint,2,opt,name=FightValueTopN,proto3" json:"FightValueTopN,omitempty"`
	InterestScale  []*MaxFightInterest `protobuf:"bytes,3,rep,name=InterestScale,proto3" json:"InterestScale,omitempty"`
}

func (x *ResMaxFightValueByCard) Reset() {
	*x = ResMaxFightValueByCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResMaxFightValueByCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResMaxFightValueByCard) ProtoMessage() {}

func (x *ResMaxFightValueByCard) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResMaxFightValueByCard.ProtoReflect.Descriptor instead.
func (*ResMaxFightValueByCard) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{272}
}

func (x *ResMaxFightValueByCard) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResMaxFightValueByCard) GetFightValueTopN() uint32 {
	if x != nil {
		return x.FightValueTopN
	}
	return 0
}

func (x *ResMaxFightValueByCard) GetInterestScale() []*MaxFightInterest {
	if x != nil {
		return x.InterestScale
	}
	return nil
}

type ResAIFormationHeroInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID     int32    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	CoordX int32    `protobuf:"varint,2,opt,name=CoordX,proto3" json:"CoordX,omitempty"`
	CoordZ int32    `protobuf:"varint,3,opt,name=CoordZ,proto3" json:"CoordZ,omitempty"`
	Equips []uint32 `protobuf:"varint,4,rep,packed,name=Equips,proto3" json:"Equips,omitempty"`
}

func (x *ResAIFormationHeroInfo) Reset() {
	*x = ResAIFormationHeroInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResAIFormationHeroInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResAIFormationHeroInfo) ProtoMessage() {}

func (x *ResAIFormationHeroInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResAIFormationHeroInfo.ProtoReflect.Descriptor instead.
func (*ResAIFormationHeroInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{273}
}

func (x *ResAIFormationHeroInfo) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResAIFormationHeroInfo) GetCoordX() int32 {
	if x != nil {
		return x.CoordX
	}
	return 0
}

func (x *ResAIFormationHeroInfo) GetCoordZ() int32 {
	if x != nil {
		return x.CoordZ
	}
	return 0
}

func (x *ResAIFormationHeroInfo) GetEquips() []uint32 {
	if x != nil {
		return x.Equips
	}
	return nil
}

type ResAIFormations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                   uint32                    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	HeroNum              int32                     `protobuf:"varint,2,opt,name=HeroNum,proto3" json:"HeroNum,omitempty"`
	Difficulty           int32                     `protobuf:"varint,3,opt,name=Difficulty,proto3" json:"Difficulty,omitempty"`
	CHero                int32                     `protobuf:"varint,4,opt,name=CHero,proto3" json:"CHero,omitempty"`
	SubCHero             int32                     `protobuf:"varint,5,opt,name=SubCHero,proto3" json:"SubCHero,omitempty"`
	LaunchType           AIFormationType           `protobuf:"varint,6,opt,name=LaunchType,proto3,enum=ResData.AIFormationType" json:"LaunchType,omitempty"`
	Heros                []*ResAIFormationHeroInfo `protobuf:"bytes,7,rep,name=Heros,proto3" json:"Heros,omitempty"`
	TotalValue           int32                     `protobuf:"varint,8,opt,name=TotalValue,proto3" json:"TotalValue,omitempty"`
	MainRelative1        RES_RELATIVE_ID           `protobuf:"varint,9,opt,name=MainRelative1,proto3,enum=ResData.RES_RELATIVE_ID" json:"MainRelative1,omitempty"`
	MainRelativeHeroNum1 int32                     `protobuf:"varint,10,opt,name=MainRelativeHeroNum1,proto3" json:"MainRelativeHeroNum1,omitempty"`
	MainRelative2        RES_RELATIVE_ID           `protobuf:"varint,11,opt,name=MainRelative2,proto3,enum=ResData.RES_RELATIVE_ID" json:"MainRelative2,omitempty"`
	MainRelativeHeroNum2 int32                     `protobuf:"varint,12,opt,name=MainRelativeHeroNum2,proto3" json:"MainRelativeHeroNum2,omitempty"`
}

func (x *ResAIFormations) Reset() {
	*x = ResAIFormations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResAIFormations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResAIFormations) ProtoMessage() {}

func (x *ResAIFormations) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResAIFormations.ProtoReflect.Descriptor instead.
func (*ResAIFormations) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{274}
}

func (x *ResAIFormations) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResAIFormations) GetHeroNum() int32 {
	if x != nil {
		return x.HeroNum
	}
	return 0
}

func (x *ResAIFormations) GetDifficulty() int32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *ResAIFormations) GetCHero() int32 {
	if x != nil {
		return x.CHero
	}
	return 0
}

func (x *ResAIFormations) GetSubCHero() int32 {
	if x != nil {
		return x.SubCHero
	}
	return 0
}

func (x *ResAIFormations) GetLaunchType() AIFormationType {
	if x != nil {
		return x.LaunchType
	}
	return AIFormationType_AIFormationType_None
}

func (x *ResAIFormations) GetHeros() []*ResAIFormationHeroInfo {
	if x != nil {
		return x.Heros
	}
	return nil
}

func (x *ResAIFormations) GetTotalValue() int32 {
	if x != nil {
		return x.TotalValue
	}
	return 0
}

func (x *ResAIFormations) GetMainRelative1() RES_RELATIVE_ID {
	if x != nil {
		return x.MainRelative1
	}
	return RES_RELATIVE_ID_RES_RELATIVE_ID_NULL
}

func (x *ResAIFormations) GetMainRelativeHeroNum1() int32 {
	if x != nil {
		return x.MainRelativeHeroNum1
	}
	return 0
}

func (x *ResAIFormations) GetMainRelative2() RES_RELATIVE_ID {
	if x != nil {
		return x.MainRelative2
	}
	return RES_RELATIVE_ID_RES_RELATIVE_ID_NULL
}

func (x *ResAIFormations) GetMainRelativeHeroNum2() int32 {
	if x != nil {
		return x.MainRelativeHeroNum2
	}
	return 0
}

type ResAIFormationFactors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	OwnNum      int32  `protobuf:"varint,2,opt,name=OwnNum,proto3" json:"OwnNum,omitempty"`
	CardQuality int32  `protobuf:"varint,3,opt,name=CardQuality,proto3" json:"CardQuality,omitempty"`
	Factor      int32  `protobuf:"varint,4,opt,name=Factor,proto3" json:"Factor,omitempty"`
}

func (x *ResAIFormationFactors) Reset() {
	*x = ResAIFormationFactors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResAIFormationFactors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResAIFormationFactors) ProtoMessage() {}

func (x *ResAIFormationFactors) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResAIFormationFactors.ProtoReflect.Descriptor instead.
func (*ResAIFormationFactors) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{275}
}

func (x *ResAIFormationFactors) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResAIFormationFactors) GetOwnNum() int32 {
	if x != nil {
		return x.OwnNum
	}
	return 0
}

func (x *ResAIFormationFactors) GetCardQuality() int32 {
	if x != nil {
		return x.CardQuality
	}
	return 0
}

func (x *ResAIFormationFactors) GetFactor() int32 {
	if x != nil {
		return x.Factor
	}
	return 0
}

type ResWarmBTreeStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	NormalAICount uint32 `protobuf:"varint,2,opt,name=NormalAICount,proto3" json:"NormalAICount,omitempty"`
}

func (x *ResWarmBTreeStrategy) Reset() {
	*x = ResWarmBTreeStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResWarmBTreeStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResWarmBTreeStrategy) ProtoMessage() {}

func (x *ResWarmBTreeStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResWarmBTreeStrategy.ProtoReflect.Descriptor instead.
func (*ResWarmBTreeStrategy) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{276}
}

func (x *ResWarmBTreeStrategy) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResWarmBTreeStrategy) GetNormalAICount() uint32 {
	if x != nil {
		return x.NormalAICount
	}
	return 0
}

type ResTriggerCalculateFormation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                     uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	LowerRound             int32  `protobuf:"varint,2,opt,name=LowerRound,proto3" json:"LowerRound,omitempty"`
	UpperRound             int32  `protobuf:"varint,3,opt,name=UpperRound,proto3" json:"UpperRound,omitempty"`
	FourOrFiveCardCount    int32  `protobuf:"varint,4,opt,name=FourOrFiveCardCount,proto3" json:"FourOrFiveCardCount,omitempty"`
	ThreeStar3QualityCount int32  `protobuf:"varint,5,opt,name=ThreeStar3QualityCount,proto3" json:"ThreeStar3QualityCount,omitempty"`
	RankTopN               int32  `protobuf:"varint,6,opt,name=RankTopN,proto3" json:"RankTopN,omitempty"`
	OwnCoin                int32  `protobuf:"varint,7,opt,name=OwnCoin,proto3" json:"OwnCoin,omitempty"`
	Hp                     int32  `protobuf:"varint,8,opt,name=Hp,proto3" json:"Hp,omitempty"`
	Star2Quality3Count     int32  `protobuf:"varint,9,opt,name=Star2Quality3Count,proto3" json:"Star2Quality3Count,omitempty"`
}

func (x *ResTriggerCalculateFormation) Reset() {
	*x = ResTriggerCalculateFormation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResTriggerCalculateFormation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResTriggerCalculateFormation) ProtoMessage() {}

func (x *ResTriggerCalculateFormation) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResTriggerCalculateFormation.ProtoReflect.Descriptor instead.
func (*ResTriggerCalculateFormation) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{277}
}

func (x *ResTriggerCalculateFormation) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResTriggerCalculateFormation) GetLowerRound() int32 {
	if x != nil {
		return x.LowerRound
	}
	return 0
}

func (x *ResTriggerCalculateFormation) GetUpperRound() int32 {
	if x != nil {
		return x.UpperRound
	}
	return 0
}

func (x *ResTriggerCalculateFormation) GetFourOrFiveCardCount() int32 {
	if x != nil {
		return x.FourOrFiveCardCount
	}
	return 0
}

func (x *ResTriggerCalculateFormation) GetThreeStar3QualityCount() int32 {
	if x != nil {
		return x.ThreeStar3QualityCount
	}
	return 0
}

func (x *ResTriggerCalculateFormation) GetRankTopN() int32 {
	if x != nil {
		return x.RankTopN
	}
	return 0
}

func (x *ResTriggerCalculateFormation) GetOwnCoin() int32 {
	if x != nil {
		return x.OwnCoin
	}
	return 0
}

func (x *ResTriggerCalculateFormation) GetHp() int32 {
	if x != nil {
		return x.Hp
	}
	return 0
}

func (x *ResTriggerCalculateFormation) GetStar2Quality3Count() int32 {
	if x != nil {
		return x.Star2Quality3Count
	}
	return 0
}

type ChessAIThrowCoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartRound     int32 `protobuf:"varint,1,opt,name=StartRound,proto3" json:"StartRound,omitempty"`
	ThrowCoinCount int32 `protobuf:"varint,2,opt,name=ThrowCoinCount,proto3" json:"ThrowCoinCount,omitempty"`
}

func (x *ChessAIThrowCoin) Reset() {
	*x = ChessAIThrowCoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChessAIThrowCoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChessAIThrowCoin) ProtoMessage() {}

func (x *ChessAIThrowCoin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChessAIThrowCoin.ProtoReflect.Descriptor instead.
func (*ChessAIThrowCoin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{278}
}

func (x *ChessAIThrowCoin) GetStartRound() int32 {
	if x != nil {
		return x.StartRound
	}
	return 0
}

func (x *ChessAIThrowCoin) GetThrowCoinCount() int32 {
	if x != nil {
		return x.ThrowCoinCount
	}
	return 0
}

type ChessAIBuffShopItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuffCounter int32 `protobuf:"varint,1,opt,name=BuffCounter,proto3" json:"BuffCounter,omitempty"`
	BuffRate    int32 `protobuf:"varint,2,opt,name=BuffRate,proto3" json:"BuffRate,omitempty"`
}

func (x *ChessAIBuffShopItem) Reset() {
	*x = ChessAIBuffShopItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChessAIBuffShopItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChessAIBuffShopItem) ProtoMessage() {}

func (x *ChessAIBuffShopItem) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChessAIBuffShopItem.ProtoReflect.Descriptor instead.
func (*ChessAIBuffShopItem) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{279}
}

func (x *ChessAIBuffShopItem) GetBuffCounter() int32 {
	if x != nil {
		return x.BuffCounter
	}
	return 0
}

func (x *ChessAIBuffShopItem) GetBuffRate() int32 {
	if x != nil {
		return x.BuffRate
	}
	return 0
}

type ChessAIBuffShop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quality []*ChessAIBuffShopItem `protobuf:"bytes,1,rep,name=Quality,proto3" json:"Quality,omitempty"`
}

func (x *ChessAIBuffShop) Reset() {
	*x = ChessAIBuffShop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChessAIBuffShop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChessAIBuffShop) ProtoMessage() {}

func (x *ChessAIBuffShop) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChessAIBuffShop.ProtoReflect.Descriptor instead.
func (*ChessAIBuffShop) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{280}
}

func (x *ChessAIBuffShop) GetQuality() []*ChessAIBuffShopItem {
	if x != nil {
		return x.Quality
	}
	return nil
}

type ResChessAIDifficulty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                              int32               `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	StageOneBuffPercent             int32               `protobuf:"varint,2,opt,name=StageOneBuffPercent,proto3" json:"StageOneBuffPercent,omitempty"`
	RestartBuffTargetRound          int32               `protobuf:"varint,3,opt,name=RestartBuffTargetRound,proto3" json:"RestartBuffTargetRound,omitempty"`
	RestartBuffTargetHP             int32               `protobuf:"varint,4,opt,name=RestartBuffTargetHP,proto3" json:"RestartBuffTargetHP,omitempty"`
	RestartBuffTargetLoseCount      int32               `protobuf:"varint,5,opt,name=RestartBuffTargetLoseCount,proto3" json:"RestartBuffTargetLoseCount,omitempty"`
	ThrowCoin                       []*ChessAIThrowCoin `protobuf:"bytes,6,rep,name=ThrowCoin,proto3" json:"ThrowCoin,omitempty"`
	ReachOfflineContinueBuffPercent int32               `protobuf:"varint,7,opt,name=ReachOfflineContinueBuffPercent,proto3" json:"ReachOfflineContinueBuffPercent,omitempty"`
}

func (x *ResChessAIDifficulty) Reset() {
	*x = ResChessAIDifficulty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResChessAIDifficulty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResChessAIDifficulty) ProtoMessage() {}

func (x *ResChessAIDifficulty) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResChessAIDifficulty.ProtoReflect.Descriptor instead.
func (*ResChessAIDifficulty) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{281}
}

func (x *ResChessAIDifficulty) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResChessAIDifficulty) GetStageOneBuffPercent() int32 {
	if x != nil {
		return x.StageOneBuffPercent
	}
	return 0
}

func (x *ResChessAIDifficulty) GetRestartBuffTargetRound() int32 {
	if x != nil {
		return x.RestartBuffTargetRound
	}
	return 0
}

func (x *ResChessAIDifficulty) GetRestartBuffTargetHP() int32 {
	if x != nil {
		return x.RestartBuffTargetHP
	}
	return 0
}

func (x *ResChessAIDifficulty) GetRestartBuffTargetLoseCount() int32 {
	if x != nil {
		return x.RestartBuffTargetLoseCount
	}
	return 0
}

func (x *ResChessAIDifficulty) GetThrowCoin() []*ChessAIThrowCoin {
	if x != nil {
		return x.ThrowCoin
	}
	return nil
}

func (x *ResChessAIDifficulty) GetReachOfflineContinueBuffPercent() int32 {
	if x != nil {
		return x.ReachOfflineContinueBuffPercent
	}
	return 0
}

type ResChessAIShopBuff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             int32            `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	AIDifficultyID int32            `protobuf:"varint,2,opt,name=AIDifficultyID,proto3" json:"AIDifficultyID,omitempty"`
	ShopLevel      int32            `protobuf:"varint,3,opt,name=ShopLevel,proto3" json:"ShopLevel,omitempty"`
	FormationBuff  *ChessAIBuffShop `protobuf:"bytes,4,opt,name=FormationBuff,proto3" json:"FormationBuff,omitempty"`
	WorkerBuff     *ChessAIBuffShop `protobuf:"bytes,5,opt,name=WorkerBuff,proto3" json:"WorkerBuff,omitempty"`
}

func (x *ResChessAIShopBuff) Reset() {
	*x = ResChessAIShopBuff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResChessAIShopBuff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResChessAIShopBuff) ProtoMessage() {}

func (x *ResChessAIShopBuff) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResChessAIShopBuff.ProtoReflect.Descriptor instead.
func (*ResChessAIShopBuff) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{282}
}

func (x *ResChessAIShopBuff) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResChessAIShopBuff) GetAIDifficultyID() int32 {
	if x != nil {
		return x.AIDifficultyID
	}
	return 0
}

func (x *ResChessAIShopBuff) GetShopLevel() int32 {
	if x != nil {
		return x.ShopLevel
	}
	return 0
}

func (x *ResChessAIShopBuff) GetFormationBuff() *ChessAIBuffShop {
	if x != nil {
		return x.FormationBuff
	}
	return nil
}

func (x *ResChessAIShopBuff) GetWorkerBuff() *ChessAIBuffShop {
	if x != nil {
		return x.WorkerBuff
	}
	return nil
}

type ResChessAIDCardLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              int32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	CHeroQuality    int32 `protobuf:"varint,2,opt,name=CHeroQuality,proto3" json:"CHeroQuality,omitempty"`
	SubCHeroQuality int32 `protobuf:"varint,3,opt,name=SubCHeroQuality,proto3" json:"SubCHeroQuality,omitempty"`
	Level           int32 `protobuf:"varint,4,opt,name=Level,proto3" json:"Level,omitempty"`
}

func (x *ResChessAIDCardLevel) Reset() {
	*x = ResChessAIDCardLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResChessAIDCardLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResChessAIDCardLevel) ProtoMessage() {}

func (x *ResChessAIDCardLevel) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResChessAIDCardLevel.ProtoReflect.Descriptor instead.
func (*ResChessAIDCardLevel) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{283}
}

func (x *ResChessAIDCardLevel) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResChessAIDCardLevel) GetCHeroQuality() int32 {
	if x != nil {
		return x.CHeroQuality
	}
	return 0
}

func (x *ResChessAIDCardLevel) GetSubCHeroQuality() int32 {
	if x != nil {
		return x.SubCHeroQuality
	}
	return 0
}

func (x *ResChessAIDCardLevel) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type AIConstLevelConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpLevelCoinLower int32 `protobuf:"varint,1,opt,name=UpLevelCoinLower,proto3" json:"UpLevelCoinLower,omitempty"`
	DCardCoinLower   int32 `protobuf:"varint,2,opt,name=DCardCoinLower,proto3" json:"DCardCoinLower,omitempty"`
}

func (x *AIConstLevelConfig) Reset() {
	*x = AIConstLevelConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AIConstLevelConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AIConstLevelConfig) ProtoMessage() {}

func (x *AIConstLevelConfig) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AIConstLevelConfig.ProtoReflect.Descriptor instead.
func (*AIConstLevelConfig) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{284}
}

func (x *AIConstLevelConfig) GetUpLevelCoinLower() int32 {
	if x != nil {
		return x.UpLevelCoinLower
	}
	return 0
}

func (x *AIConstLevelConfig) GetDCardCoinLower() int32 {
	if x != nil {
		return x.DCardCoinLower
	}
	return 0
}

type ResChessAIConst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                  int32                 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	LoseCount2ChangePos int32                 `protobuf:"varint,2,opt,name=LoseCount2ChangePos,proto3" json:"LoseCount2ChangePos,omitempty"`
	CoinDepositUpper    int32                 `protobuf:"varint,3,opt,name=CoinDepositUpper,proto3" json:"CoinDepositUpper,omitempty"`
	CoinDepositLower    int32                 `protobuf:"varint,4,opt,name=CoinDepositLower,proto3" json:"CoinDepositLower,omitempty"`
	LevelConfs          []*AIConstLevelConfig `protobuf:"bytes,5,rep,name=LevelConfs,proto3" json:"LevelConfs,omitempty"`
}

func (x *ResChessAIConst) Reset() {
	*x = ResChessAIConst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[285]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResChessAIConst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResChessAIConst) ProtoMessage() {}

func (x *ResChessAIConst) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[285]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResChessAIConst.ProtoReflect.Descriptor instead.
func (*ResChessAIConst) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{285}
}

func (x *ResChessAIConst) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResChessAIConst) GetLoseCount2ChangePos() int32 {
	if x != nil {
		return x.LoseCount2ChangePos
	}
	return 0
}

func (x *ResChessAIConst) GetCoinDepositUpper() int32 {
	if x != nil {
		return x.CoinDepositUpper
	}
	return 0
}

func (x *ResChessAIConst) GetCoinDepositLower() int32 {
	if x != nil {
		return x.CoinDepositLower
	}
	return 0
}

func (x *ResChessAIConst) GetLevelConfs() []*AIConstLevelConfig {
	if x != nil {
		return x.LevelConfs
	}
	return nil
}

type ResChessAINormalConst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        AINormalConstKey `protobuf:"varint,1,opt,name=ID,proto3,enum=ResData.AINormalConstKey" json:"ID,omitempty"`
	IntParam1 int32            `protobuf:"varint,2,opt,name=IntParam1,proto3" json:"IntParam1,omitempty"`
	IntParam2 int32            `protobuf:"varint,3,opt,name=IntParam2,proto3" json:"IntParam2,omitempty"`
	StrParam  string           `protobuf:"bytes,4,opt,name=StrParam,proto3" json:"StrParam,omitempty"`
}

func (x *ResChessAINormalConst) Reset() {
	*x = ResChessAINormalConst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[286]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResChessAINormalConst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResChessAINormalConst) ProtoMessage() {}

func (x *ResChessAINormalConst) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[286]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResChessAINormalConst.ProtoReflect.Descriptor instead.
func (*ResChessAINormalConst) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{286}
}

func (x *ResChessAINormalConst) GetID() AINormalConstKey {
	if x != nil {
		return x.ID
	}
	return AINormalConstKey_AINormalConstKey_None
}

func (x *ResChessAINormalConst) GetIntParam1() int32 {
	if x != nil {
		return x.IntParam1
	}
	return 0
}

func (x *ResChessAINormalConst) GetIntParam2() int32 {
	if x != nil {
		return x.IntParam2
	}
	return 0
}

func (x *ResChessAINormalConst) GetStrParam() string {
	if x != nil {
		return x.StrParam
	}
	return ""
}

type StSubSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureID uint32 `protobuf:"varint,1,opt,name=FeatureID,proto3" json:"FeatureID,omitempty"`
}

func (x *StSubSettings) Reset() {
	*x = StSubSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[287]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StSubSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StSubSettings) ProtoMessage() {}

func (x *StSubSettings) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[287]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StSubSettings.ProtoReflect.Descriptor instead.
func (*StSubSettings) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{287}
}

func (x *StSubSettings) GetFeatureID() uint32 {
	if x != nil {
		return x.FeatureID
	}
	return 0
}

type ResSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             uint32           `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	IsServerUse    bool             `protobuf:"varint,2,opt,name=IsServerUse,proto3" json:"IsServerUse,omitempty"`
	Major          uint32           `protobuf:"varint,3,opt,name=Major,proto3" json:"Major,omitempty"`
	FeatureGroup   uint32           `protobuf:"varint,4,opt,name=FeatureGroup,proto3" json:"FeatureGroup,omitempty"`
	FeatureID      uint32           `protobuf:"varint,5,opt,name=FeatureID,proto3" json:"FeatureID,omitempty"`
	FeatureName    string           `protobuf:"bytes,6,opt,name=FeatureName,proto3" json:"FeatureName,omitempty"`
	DefaultStatus  bool             `protobuf:"varint,7,opt,name=DefaultStatus,proto3" json:"DefaultStatus,omitempty"`
	ElementStyle   uint32           `protobuf:"varint,8,opt,name=ElementStyle,proto3" json:"ElementStyle,omitempty"`
	ElementTitle   string           `protobuf:"bytes,9,opt,name=ElementTitle,proto3" json:"ElementTitle,omitempty"`
	DefaultValue   uint32           `protobuf:"varint,10,opt,name=DefaultValue,proto3" json:"DefaultValue,omitempty"`
	HaveSubItem    bool             `protobuf:"varint,11,opt,name=HaveSubItem,proto3" json:"HaveSubItem,omitempty"`
	SubItems       []*StSubSettings `protobuf:"bytes,12,rep,name=SubItems,proto3" json:"SubItems,omitempty"`
	HaveHelp       bool             `protobuf:"varint,13,opt,name=HaveHelp,proto3" json:"HaveHelp,omitempty"`
	HelpType       uint32           `protobuf:"varint,14,opt,name=HelpType,proto3" json:"HelpType,omitempty"`
	HelpTitle      string           `protobuf:"bytes,15,opt,name=HelpTitle,proto3" json:"HelpTitle,omitempty"`
	HelpText       string           `protobuf:"bytes,16,opt,name=HelpText,proto3" json:"HelpText,omitempty"`
	HelpIcon       []string         `protobuf:"bytes,17,rep,name=HelpIcon,proto3" json:"HelpIcon,omitempty"`
	HelpDesc       []string         `protobuf:"bytes,18,rep,name=HelpDesc,proto3" json:"HelpDesc,omitempty"`
	BConfirm       bool             `protobuf:"varint,19,opt,name=bConfirm,proto3" json:"bConfirm,omitempty"`
	ConfirmText    string           `protobuf:"bytes,20,opt,name=ConfirmText,proto3" json:"ConfirmText,omitempty"`
	IsSubItem      bool             `protobuf:"varint,21,opt,name=IsSubItem,proto3" json:"IsSubItem,omitempty"`
	OpenFilterItem bool             `protobuf:"varint,22,opt,name=OpenFilterItem,proto3" json:"OpenFilterItem,omitempty"`
	FilterItems    []string         `protobuf:"bytes,23,rep,name=FilterItems,proto3" json:"FilterItems,omitempty"`
	IsHide         bool             `protobuf:"varint,24,opt,name=IsHide,proto3" json:"IsHide,omitempty"`
}

func (x *ResSettings) Reset() {
	*x = ResSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[288]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResSettings) ProtoMessage() {}

func (x *ResSettings) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[288]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResSettings.ProtoReflect.Descriptor instead.
func (*ResSettings) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{288}
}

func (x *ResSettings) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResSettings) GetIsServerUse() bool {
	if x != nil {
		return x.IsServerUse
	}
	return false
}

func (x *ResSettings) GetMajor() uint32 {
	if x != nil {
		return x.Major
	}
	return 0
}

func (x *ResSettings) GetFeatureGroup() uint32 {
	if x != nil {
		return x.FeatureGroup
	}
	return 0
}

func (x *ResSettings) GetFeatureID() uint32 {
	if x != nil {
		return x.FeatureID
	}
	return 0
}

func (x *ResSettings) GetFeatureName() string {
	if x != nil {
		return x.FeatureName
	}
	return ""
}

func (x *ResSettings) GetDefaultStatus() bool {
	if x != nil {
		return x.DefaultStatus
	}
	return false
}

func (x *ResSettings) GetElementStyle() uint32 {
	if x != nil {
		return x.ElementStyle
	}
	return 0
}

func (x *ResSettings) GetElementTitle() string {
	if x != nil {
		return x.ElementTitle
	}
	return ""
}

func (x *ResSettings) GetDefaultValue() uint32 {
	if x != nil {
		return x.DefaultValue
	}
	return 0
}

func (x *ResSettings) GetHaveSubItem() bool {
	if x != nil {
		return x.HaveSubItem
	}
	return false
}

func (x *ResSettings) GetSubItems() []*StSubSettings {
	if x != nil {
		return x.SubItems
	}
	return nil
}

func (x *ResSettings) GetHaveHelp() bool {
	if x != nil {
		return x.HaveHelp
	}
	return false
}

func (x *ResSettings) GetHelpType() uint32 {
	if x != nil {
		return x.HelpType
	}
	return 0
}

func (x *ResSettings) GetHelpTitle() string {
	if x != nil {
		return x.HelpTitle
	}
	return ""
}

func (x *ResSettings) GetHelpText() string {
	if x != nil {
		return x.HelpText
	}
	return ""
}

func (x *ResSettings) GetHelpIcon() []string {
	if x != nil {
		return x.HelpIcon
	}
	return nil
}

func (x *ResSettings) GetHelpDesc() []string {
	if x != nil {
		return x.HelpDesc
	}
	return nil
}

func (x *ResSettings) GetBConfirm() bool {
	if x != nil {
		return x.BConfirm
	}
	return false
}

func (x *ResSettings) GetConfirmText() string {
	if x != nil {
		return x.ConfirmText
	}
	return ""
}

func (x *ResSettings) GetIsSubItem() bool {
	if x != nil {
		return x.IsSubItem
	}
	return false
}

func (x *ResSettings) GetOpenFilterItem() bool {
	if x != nil {
		return x.OpenFilterItem
	}
	return false
}

func (x *ResSettings) GetFilterItems() []string {
	if x != nil {
		return x.FilterItems
	}
	return nil
}

func (x *ResSettings) GetIsHide() bool {
	if x != nil {
		return x.IsHide
	}
	return false
}

type PersonalDisplayInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Describe string `protobuf:"bytes,2,opt,name=Describe,proto3" json:"Describe,omitempty"`
}

func (x *PersonalDisplayInfo) Reset() {
	*x = PersonalDisplayInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[289]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonalDisplayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonalDisplayInfo) ProtoMessage() {}

func (x *PersonalDisplayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[289]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonalDisplayInfo.ProtoReflect.Descriptor instead.
func (*PersonalDisplayInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{289}
}

func (x *PersonalDisplayInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PersonalDisplayInfo) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

type ResAcknowledgmentsDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupTitle   string                 `protobuf:"bytes,1,opt,name=GroupTitle,proto3" json:"GroupTitle,omitempty"`
	EngTitle     string                 `protobuf:"bytes,2,opt,name=EngTitle,proto3" json:"EngTitle,omitempty"`
	SpineID      uint32                 `protobuf:"varint,3,opt,name=SpineID,proto3" json:"SpineID,omitempty"`
	Direction    uint32                 `protobuf:"varint,4,opt,name=Direction,proto3" json:"Direction,omitempty"`
	Option       uint32                 `protobuf:"varint,5,opt,name=Option,proto3" json:"Option,omitempty"`
	NameList     string                 `protobuf:"bytes,6,opt,name=NameList,proto3" json:"NameList,omitempty"`
	PersonalInfo []*PersonalDisplayInfo `protobuf:"bytes,7,rep,name=PersonalInfo,proto3" json:"PersonalInfo,omitempty"`
}

func (x *ResAcknowledgmentsDataBin) Reset() {
	*x = ResAcknowledgmentsDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[290]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResAcknowledgmentsDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResAcknowledgmentsDataBin) ProtoMessage() {}

func (x *ResAcknowledgmentsDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[290]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResAcknowledgmentsDataBin.ProtoReflect.Descriptor instead.
func (*ResAcknowledgmentsDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{290}
}

func (x *ResAcknowledgmentsDataBin) GetGroupTitle() string {
	if x != nil {
		return x.GroupTitle
	}
	return ""
}

func (x *ResAcknowledgmentsDataBin) GetEngTitle() string {
	if x != nil {
		return x.EngTitle
	}
	return ""
}

func (x *ResAcknowledgmentsDataBin) GetSpineID() uint32 {
	if x != nil {
		return x.SpineID
	}
	return 0
}

func (x *ResAcknowledgmentsDataBin) GetDirection() uint32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *ResAcknowledgmentsDataBin) GetOption() uint32 {
	if x != nil {
		return x.Option
	}
	return 0
}

func (x *ResAcknowledgmentsDataBin) GetNameList() string {
	if x != nil {
		return x.NameList
	}
	return ""
}

func (x *ResAcknowledgmentsDataBin) GetPersonalInfo() []*PersonalDisplayInfo {
	if x != nil {
		return x.PersonalInfo
	}
	return nil
}

type ResFreeGroupCfgDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID uint32 `protobuf:"varint,1,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	Type    uint32 `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`
	FreeID  uint32 `protobuf:"varint,3,opt,name=FreeID,proto3" json:"FreeID,omitempty"`
}

func (x *ResFreeGroupCfgDataBin) Reset() {
	*x = ResFreeGroupCfgDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[291]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResFreeGroupCfgDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResFreeGroupCfgDataBin) ProtoMessage() {}

func (x *ResFreeGroupCfgDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[291]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResFreeGroupCfgDataBin.ProtoReflect.Descriptor instead.
func (*ResFreeGroupCfgDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{291}
}

func (x *ResFreeGroupCfgDataBin) GetGroupID() uint32 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *ResFreeGroupCfgDataBin) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ResFreeGroupCfgDataBin) GetFreeID() uint32 {
	if x != nil {
		return x.FreeID
	}
	return 0
}

type ResFreeCfgDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FreeStartTimeStr string   `protobuf:"bytes,1,opt,name=FreeStartTimeStr,proto3" json:"FreeStartTimeStr,omitempty"`
	FreeEndTimeStr   string   `protobuf:"bytes,2,opt,name=FreeEndTimeStr,proto3" json:"FreeEndTimeStr,omitempty"`
	FreeStartTimeGen uint32   `protobuf:"varint,3,opt,name=FreeStartTimeGen,proto3" json:"FreeStartTimeGen,omitempty"`
	FreeEndTimeGen   uint32   `protobuf:"varint,4,opt,name=FreeEndTimeGen,proto3" json:"FreeEndTimeGen,omitempty"`
	GroupIDs         []uint32 `protobuf:"varint,5,rep,packed,name=GroupIDs,proto3" json:"GroupIDs,omitempty"`
}

func (x *ResFreeCfgDataBin) Reset() {
	*x = ResFreeCfgDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[292]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResFreeCfgDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResFreeCfgDataBin) ProtoMessage() {}

func (x *ResFreeCfgDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[292]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResFreeCfgDataBin.ProtoReflect.Descriptor instead.
func (*ResFreeCfgDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{292}
}

func (x *ResFreeCfgDataBin) GetFreeStartTimeStr() string {
	if x != nil {
		return x.FreeStartTimeStr
	}
	return ""
}

func (x *ResFreeCfgDataBin) GetFreeEndTimeStr() string {
	if x != nil {
		return x.FreeEndTimeStr
	}
	return ""
}

func (x *ResFreeCfgDataBin) GetFreeStartTimeGen() uint32 {
	if x != nil {
		return x.FreeStartTimeGen
	}
	return 0
}

func (x *ResFreeCfgDataBin) GetFreeEndTimeGen() uint32 {
	if x != nil {
		return x.FreeEndTimeGen
	}
	return 0
}

func (x *ResFreeCfgDataBin) GetGroupIDs() []uint32 {
	if x != nil {
		return x.GroupIDs
	}
	return nil
}

// 限免配置.
type FreeConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FreeGroupCfg *ResFreeGroupCfgDataBin `protobuf:"bytes,1,opt,name=FreeGroupCfg,proto3" json:"FreeGroupCfg,omitempty"`
	FreeCfg      *ResFreeCfgDataBin      `protobuf:"bytes,2,opt,name=FreeCfg,proto3" json:"FreeCfg,omitempty"`
}

func (x *FreeConf) Reset() {
	*x = FreeConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[293]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FreeConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreeConf) ProtoMessage() {}

func (x *FreeConf) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[293]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreeConf.ProtoReflect.Descriptor instead.
func (*FreeConf) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{293}
}

func (x *FreeConf) GetFreeGroupCfg() *ResFreeGroupCfgDataBin {
	if x != nil {
		return x.FreeGroupCfg
	}
	return nil
}

func (x *FreeConf) GetFreeCfg() *ResFreeCfgDataBin {
	if x != nil {
		return x.FreeCfg
	}
	return nil
}

//  ------------------------- 限免 End----------------------------
type ResChessManExpInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	IsNotShow      bool   `protobuf:"varint,2,opt,name=IsNotShow,proto3" json:"IsNotShow,omitempty"`
	HistoryTitle   string `protobuf:"bytes,3,opt,name=historyTitle,proto3" json:"historyTitle,omitempty"`
	HistoryContent string `protobuf:"bytes,4,opt,name=historyContent,proto3" json:"historyContent,omitempty"`
}

func (x *ResChessManExpInfo) Reset() {
	*x = ResChessManExpInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[294]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResChessManExpInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResChessManExpInfo) ProtoMessage() {}

func (x *ResChessManExpInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[294]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResChessManExpInfo.ProtoReflect.Descriptor instead.
func (*ResChessManExpInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{294}
}

func (x *ResChessManExpInfo) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResChessManExpInfo) GetIsNotShow() bool {
	if x != nil {
		return x.IsNotShow
	}
	return false
}

func (x *ResChessManExpInfo) GetHistoryTitle() string {
	if x != nil {
		return x.HistoryTitle
	}
	return ""
}

func (x *ResChessManExpInfo) GetHistoryContent() string {
	if x != nil {
		return x.HistoryContent
	}
	return ""
}

// 战队常量表
type ResGuildConstCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	IntParam1 uint32 `protobuf:"varint,2,opt,name=IntParam1,proto3" json:"IntParam1,omitempty"`
	IntParam2 uint32 `protobuf:"varint,3,opt,name=IntParam2,proto3" json:"IntParam2,omitempty"`
	IntParam3 uint32 `protobuf:"varint,4,opt,name=IntParam3,proto3" json:"IntParam3,omitempty"`
}

func (x *ResGuildConstCfg) Reset() {
	*x = ResGuildConstCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[295]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGuildConstCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGuildConstCfg) ProtoMessage() {}

func (x *ResGuildConstCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[295]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGuildConstCfg.ProtoReflect.Descriptor instead.
func (*ResGuildConstCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{295}
}

func (x *ResGuildConstCfg) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResGuildConstCfg) GetIntParam1() uint32 {
	if x != nil {
		return x.IntParam1
	}
	return 0
}

func (x *ResGuildConstCfg) GetIntParam2() uint32 {
	if x != nil {
		return x.IntParam2
	}
	return 0
}

func (x *ResGuildConstCfg) GetIntParam3() uint32 {
	if x != nil {
		return x.IntParam3
	}
	return 0
}

// 战队加入限制表
type ResGuildJoinLimitCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LimitType  uint32 `protobuf:"varint,1,opt,name=LimitType,proto3" json:"LimitType,omitempty"`
	LimitParam int32  `protobuf:"varint,2,opt,name=LimitParam,proto3" json:"LimitParam,omitempty"`
	ShowDesc   string `protobuf:"bytes,3,opt,name=ShowDesc,proto3" json:"ShowDesc,omitempty"`
}

func (x *ResGuildJoinLimitCfg) Reset() {
	*x = ResGuildJoinLimitCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[296]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGuildJoinLimitCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGuildJoinLimitCfg) ProtoMessage() {}

func (x *ResGuildJoinLimitCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[296]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGuildJoinLimitCfg.ProtoReflect.Descriptor instead.
func (*ResGuildJoinLimitCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{296}
}

func (x *ResGuildJoinLimitCfg) GetLimitType() uint32 {
	if x != nil {
		return x.LimitType
	}
	return 0
}

func (x *ResGuildJoinLimitCfg) GetLimitParam() int32 {
	if x != nil {
		return x.LimitParam
	}
	return 0
}

func (x *ResGuildJoinLimitCfg) GetShowDesc() string {
	if x != nil {
		return x.ShowDesc
	}
	return ""
}

// 战队等级表
type ResGuildLevelCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level        uint32 `protobuf:"varint,1,opt,name=Level,proto3" json:"Level,omitempty"`
	ActiveValue  uint32 `protobuf:"varint,2,opt,name=ActiveValue,proto3" json:"ActiveValue,omitempty"`
	MemberLimit  uint32 `protobuf:"varint,3,opt,name=MemberLimit,proto3" json:"MemberLimit,omitempty"`
	ManagerLimit uint32 `protobuf:"varint,4,opt,name=ManagerLimit,proto3" json:"ManagerLimit,omitempty"`
}

func (x *ResGuildLevelCfg) Reset() {
	*x = ResGuildLevelCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[297]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGuildLevelCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGuildLevelCfg) ProtoMessage() {}

func (x *ResGuildLevelCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[297]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGuildLevelCfg.ProtoReflect.Descriptor instead.
func (*ResGuildLevelCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{297}
}

func (x *ResGuildLevelCfg) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ResGuildLevelCfg) GetActiveValue() uint32 {
	if x != nil {
		return x.ActiveValue
	}
	return 0
}

func (x *ResGuildLevelCfg) GetMemberLimit() uint32 {
	if x != nil {
		return x.MemberLimit
	}
	return 0
}

func (x *ResGuildLevelCfg) GetManagerLimit() uint32 {
	if x != nil {
		return x.ManagerLimit
	}
	return 0
}

// 战队ID刷新消耗表
type ResGuildShowIDRefreshCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshCount uint32       `protobuf:"varint,1,opt,name=RefreshCount,proto3" json:"RefreshCount,omitempty"`
	CostItem     *ResGameItem `protobuf:"bytes,2,opt,name=CostItem,proto3" json:"CostItem,omitempty"`
}

func (x *ResGuildShowIDRefreshCfg) Reset() {
	*x = ResGuildShowIDRefreshCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[298]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGuildShowIDRefreshCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGuildShowIDRefreshCfg) ProtoMessage() {}

func (x *ResGuildShowIDRefreshCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[298]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGuildShowIDRefreshCfg.ProtoReflect.Descriptor instead.
func (*ResGuildShowIDRefreshCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{298}
}

func (x *ResGuildShowIDRefreshCfg) GetRefreshCount() uint32 {
	if x != nil {
		return x.RefreshCount
	}
	return 0
}

func (x *ResGuildShowIDRefreshCfg) GetCostItem() *ResGameItem {
	if x != nil {
		return x.CostItem
	}
	return nil
}

// 战队标签表
type ResGuildLabelCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID    uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Label string `protobuf:"bytes,2,opt,name=Label,proto3" json:"Label,omitempty"`
}

func (x *ResGuildLabelCfg) Reset() {
	*x = ResGuildLabelCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[299]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGuildLabelCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGuildLabelCfg) ProtoMessage() {}

func (x *ResGuildLabelCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[299]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGuildLabelCfg.ProtoReflect.Descriptor instead.
func (*ResGuildLabelCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{299}
}

func (x *ResGuildLabelCfg) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResGuildLabelCfg) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

// 战队图标表
type ResGuildIconCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IconType uint32 `protobuf:"varint,1,opt,name=IconType,proto3" json:"IconType,omitempty"`
	IconID   uint32 `protobuf:"varint,2,opt,name=IconID,proto3" json:"IconID,omitempty"`
	Desc     string `protobuf:"bytes,3,opt,name=Desc,proto3" json:"Desc,omitempty"`
	ResPath  string `protobuf:"bytes,4,opt,name=ResPath,proto3" json:"ResPath,omitempty"`
	ColorID  uint32 `protobuf:"varint,5,opt,name=ColorID,proto3" json:"ColorID,omitempty"`
	Color    string `protobuf:"bytes,6,opt,name=Color,proto3" json:"Color,omitempty"`
	Group    uint32 `protobuf:"varint,7,opt,name=Group,proto3" json:"Group,omitempty"`
}

func (x *ResGuildIconCfg) Reset() {
	*x = ResGuildIconCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[300]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGuildIconCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGuildIconCfg) ProtoMessage() {}

func (x *ResGuildIconCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[300]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGuildIconCfg.ProtoReflect.Descriptor instead.
func (*ResGuildIconCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{300}
}

func (x *ResGuildIconCfg) GetIconType() uint32 {
	if x != nil {
		return x.IconType
	}
	return 0
}

func (x *ResGuildIconCfg) GetIconID() uint32 {
	if x != nil {
		return x.IconID
	}
	return 0
}

func (x *ResGuildIconCfg) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ResGuildIconCfg) GetResPath() string {
	if x != nil {
		return x.ResPath
	}
	return ""
}

func (x *ResGuildIconCfg) GetColorID() uint32 {
	if x != nil {
		return x.ColorID
	}
	return 0
}

func (x *ResGuildIconCfg) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *ResGuildIconCfg) GetGroup() uint32 {
	if x != nil {
		return x.Group
	}
	return 0
}

// 战队号码前缀黑名单
type ResGuildShowNumberBlackList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvalidPrefix string `protobuf:"bytes,1,opt,name=InvalidPrefix,proto3" json:"InvalidPrefix,omitempty"` // 非法的前缀
}

func (x *ResGuildShowNumberBlackList) Reset() {
	*x = ResGuildShowNumberBlackList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[301]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGuildShowNumberBlackList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGuildShowNumberBlackList) ProtoMessage() {}

func (x *ResGuildShowNumberBlackList) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[301]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGuildShowNumberBlackList.ProtoReflect.Descriptor instead.
func (*ResGuildShowNumberBlackList) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{301}
}

func (x *ResGuildShowNumberBlackList) GetInvalidPrefix() string {
	if x != nil {
		return x.InvalidPrefix
	}
	return ""
}

type GuildConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildConstCfg            *ResGuildConstCfg            `protobuf:"bytes,1,opt,name=GuildConstCfg,proto3" json:"GuildConstCfg,omitempty"`
	GuildJoinLimitCfg        *ResGuildJoinLimitCfg        `protobuf:"bytes,2,opt,name=GuildJoinLimitCfg,proto3" json:"GuildJoinLimitCfg,omitempty"`
	GuildLevelCfg            *ResGuildLevelCfg            `protobuf:"bytes,3,opt,name=GuildLevelCfg,proto3" json:"GuildLevelCfg,omitempty"`
	GuildShowIDRefreshCfg    *ResGuildShowIDRefreshCfg    `protobuf:"bytes,4,opt,name=GuildShowIDRefreshCfg,proto3" json:"GuildShowIDRefreshCfg,omitempty"`
	GuildLabelCfg            *ResGuildLabelCfg            `protobuf:"bytes,5,opt,name=GuildLabelCfg,proto3" json:"GuildLabelCfg,omitempty"`
	GuildIconCfg             *ResGuildIconCfg             `protobuf:"bytes,6,opt,name=GuildIconCfg,proto3" json:"GuildIconCfg,omitempty"`
	GuildShowNumberBlackList *ResGuildShowNumberBlackList `protobuf:"bytes,7,opt,name=GuildShowNumberBlackList,proto3" json:"GuildShowNumberBlackList,omitempty"`
}

func (x *GuildConf) Reset() {
	*x = GuildConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[302]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildConf) ProtoMessage() {}

func (x *GuildConf) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[302]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildConf.ProtoReflect.Descriptor instead.
func (*GuildConf) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{302}
}

func (x *GuildConf) GetGuildConstCfg() *ResGuildConstCfg {
	if x != nil {
		return x.GuildConstCfg
	}
	return nil
}

func (x *GuildConf) GetGuildJoinLimitCfg() *ResGuildJoinLimitCfg {
	if x != nil {
		return x.GuildJoinLimitCfg
	}
	return nil
}

func (x *GuildConf) GetGuildLevelCfg() *ResGuildLevelCfg {
	if x != nil {
		return x.GuildLevelCfg
	}
	return nil
}

func (x *GuildConf) GetGuildShowIDRefreshCfg() *ResGuildShowIDRefreshCfg {
	if x != nil {
		return x.GuildShowIDRefreshCfg
	}
	return nil
}

func (x *GuildConf) GetGuildLabelCfg() *ResGuildLabelCfg {
	if x != nil {
		return x.GuildLabelCfg
	}
	return nil
}

func (x *GuildConf) GetGuildIconCfg() *ResGuildIconCfg {
	if x != nil {
		return x.GuildIconCfg
	}
	return nil
}

func (x *GuildConf) GetGuildShowNumberBlackList() *ResGuildShowNumberBlackList {
	if x != nil {
		return x.GuildShowNumberBlackList
	}
	return nil
}

type JumpInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction string `protobuf:"bytes,1,opt,name=Direction,proto3" json:"Direction,omitempty"`
}

func (x *JumpInfo) Reset() {
	*x = JumpInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[303]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JumpInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JumpInfo) ProtoMessage() {}

func (x *JumpInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[303]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JumpInfo.ProtoReflect.Descriptor instead.
func (*JumpInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{303}
}

func (x *JumpInfo) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

type ResJumpGlobalInfoDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemType  uint32      `protobuf:"varint,1,opt,name=SystemType,proto3" json:"SystemType,omitempty"`
	SystemID    uint32      `protobuf:"varint,2,opt,name=SystemID,proto3" json:"SystemID,omitempty"`
	Params      []*JumpInfo `protobuf:"bytes,3,rep,name=Params,proto3" json:"Params,omitempty"`
	IsBlockJump uint32      `protobuf:"varint,4,opt,name=IsBlockJump,proto3" json:"IsBlockJump,omitempty"`
}

func (x *ResJumpGlobalInfoDataBin) Reset() {
	*x = ResJumpGlobalInfoDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[304]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResJumpGlobalInfoDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResJumpGlobalInfoDataBin) ProtoMessage() {}

func (x *ResJumpGlobalInfoDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[304]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResJumpGlobalInfoDataBin.ProtoReflect.Descriptor instead.
func (*ResJumpGlobalInfoDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{304}
}

func (x *ResJumpGlobalInfoDataBin) GetSystemType() uint32 {
	if x != nil {
		return x.SystemType
	}
	return 0
}

func (x *ResJumpGlobalInfoDataBin) GetSystemID() uint32 {
	if x != nil {
		return x.SystemID
	}
	return 0
}

func (x *ResJumpGlobalInfoDataBin) GetParams() []*JumpInfo {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *ResJumpGlobalInfoDataBin) GetIsBlockJump() uint32 {
	if x != nil {
		return x.IsBlockJump
	}
	return 0
}

type ResProject8BossAwardValueCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID    uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Value uint32 `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *ResProject8BossAwardValueCfg) Reset() {
	*x = ResProject8BossAwardValueCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[305]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResProject8BossAwardValueCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResProject8BossAwardValueCfg) ProtoMessage() {}

func (x *ResProject8BossAwardValueCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[305]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResProject8BossAwardValueCfg.ProtoReflect.Descriptor instead.
func (*ResProject8BossAwardValueCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{305}
}

func (x *ResProject8BossAwardValueCfg) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResProject8BossAwardValueCfg) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type ResProject8AwardPerformCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID    uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *ResProject8AwardPerformCfg) Reset() {
	*x = ResProject8AwardPerformCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[306]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResProject8AwardPerformCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResProject8AwardPerformCfg) ProtoMessage() {}

func (x *ResProject8AwardPerformCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[306]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResProject8AwardPerformCfg.ProtoReflect.Descriptor instead.
func (*ResProject8AwardPerformCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{306}
}

func (x *ResProject8AwardPerformCfg) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResProject8AwardPerformCfg) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ResProject8BossPresetShowCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	EffectPath  string `protobuf:"bytes,2,opt,name=EffectPath,proto3" json:"EffectPath,omitempty"`
	EffectScale uint32 `protobuf:"varint,3,opt,name=EffectScale,proto3" json:"EffectScale,omitempty"`
}

func (x *ResProject8BossPresetShowCfg) Reset() {
	*x = ResProject8BossPresetShowCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[307]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResProject8BossPresetShowCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResProject8BossPresetShowCfg) ProtoMessage() {}

func (x *ResProject8BossPresetShowCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[307]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResProject8BossPresetShowCfg.ProtoReflect.Descriptor instead.
func (*ResProject8BossPresetShowCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{307}
}

func (x *ResProject8BossPresetShowCfg) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResProject8BossPresetShowCfg) GetEffectPath() string {
	if x != nil {
		return x.EffectPath
	}
	return ""
}

func (x *ResProject8BossPresetShowCfg) GetEffectScale() uint32 {
	if x != nil {
		return x.EffectScale
	}
	return 0
}

type ResProject8RelativeRecordCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	RecordCount uint32 `protobuf:"varint,2,opt,name=RecordCount,proto3" json:"RecordCount,omitempty"`
}

func (x *ResProject8RelativeRecordCfg) Reset() {
	*x = ResProject8RelativeRecordCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[308]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResProject8RelativeRecordCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResProject8RelativeRecordCfg) ProtoMessage() {}

func (x *ResProject8RelativeRecordCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[308]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResProject8RelativeRecordCfg.ProtoReflect.Descriptor instead.
func (*ResProject8RelativeRecordCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{308}
}

func (x *ResProject8RelativeRecordCfg) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResProject8RelativeRecordCfg) GetRecordCount() uint32 {
	if x != nil {
		return x.RecordCount
	}
	return 0
}

type ResProject8AirdropAwardCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         uint32   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	GroupID    uint32   `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	Power      uint32   `protobuf:"varint,3,opt,name=Power,proto3" json:"Power,omitempty"`
	DropIDList []uint32 `protobuf:"varint,4,rep,packed,name=DropIDList,proto3" json:"DropIDList,omitempty"`
}

func (x *ResProject8AirdropAwardCfg) Reset() {
	*x = ResProject8AirdropAwardCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[309]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResProject8AirdropAwardCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResProject8AirdropAwardCfg) ProtoMessage() {}

func (x *ResProject8AirdropAwardCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[309]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResProject8AirdropAwardCfg.ProtoReflect.Descriptor instead.
func (*ResProject8AirdropAwardCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{309}
}

func (x *ResProject8AirdropAwardCfg) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResProject8AirdropAwardCfg) GetGroupID() uint32 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *ResProject8AirdropAwardCfg) GetPower() uint32 {
	if x != nil {
		return x.Power
	}
	return 0
}

func (x *ResProject8AirdropAwardCfg) GetDropIDList() []uint32 {
	if x != nil {
		return x.DropIDList
	}
	return nil
}

type ResProject8AirdropAwardTypeCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                 uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name               string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	MiniIconPath       string `protobuf:"bytes,3,opt,name=MiniIconPath,proto3" json:"MiniIconPath,omitempty"`
	MiddleIconPath     string `protobuf:"bytes,4,opt,name=MiddleIconPath,proto3" json:"MiddleIconPath,omitempty"`
	BigIconPath        string `protobuf:"bytes,5,opt,name=BigIconPath,proto3" json:"BigIconPath,omitempty"`
	BoxIconPath        string `protobuf:"bytes,6,opt,name=BoxIconPath,proto3" json:"BoxIconPath,omitempty"`
	WithoutDropPresent bool   `protobuf:"varint,7,opt,name=WithoutDropPresent,proto3" json:"WithoutDropPresent,omitempty"`
	DropName           string `protobuf:"bytes,8,opt,name=DropName,proto3" json:"DropName,omitempty"`
	ModelIconPath      string `protobuf:"bytes,9,opt,name=ModelIconPath,proto3" json:"ModelIconPath,omitempty"`
	QualityColorStr    string `protobuf:"bytes,10,opt,name=QualityColorStr,proto3" json:"QualityColorStr,omitempty"`
}

func (x *ResProject8AirdropAwardTypeCfg) Reset() {
	*x = ResProject8AirdropAwardTypeCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[310]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResProject8AirdropAwardTypeCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResProject8AirdropAwardTypeCfg) ProtoMessage() {}

func (x *ResProject8AirdropAwardTypeCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[310]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResProject8AirdropAwardTypeCfg.ProtoReflect.Descriptor instead.
func (*ResProject8AirdropAwardTypeCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{310}
}

func (x *ResProject8AirdropAwardTypeCfg) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResProject8AirdropAwardTypeCfg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResProject8AirdropAwardTypeCfg) GetMiniIconPath() string {
	if x != nil {
		return x.MiniIconPath
	}
	return ""
}

func (x *ResProject8AirdropAwardTypeCfg) GetMiddleIconPath() string {
	if x != nil {
		return x.MiddleIconPath
	}
	return ""
}

func (x *ResProject8AirdropAwardTypeCfg) GetBigIconPath() string {
	if x != nil {
		return x.BigIconPath
	}
	return ""
}

func (x *ResProject8AirdropAwardTypeCfg) GetBoxIconPath() string {
	if x != nil {
		return x.BoxIconPath
	}
	return ""
}

func (x *ResProject8AirdropAwardTypeCfg) GetWithoutDropPresent() bool {
	if x != nil {
		return x.WithoutDropPresent
	}
	return false
}

func (x *ResProject8AirdropAwardTypeCfg) GetDropName() string {
	if x != nil {
		return x.DropName
	}
	return ""
}

func (x *ResProject8AirdropAwardTypeCfg) GetModelIconPath() string {
	if x != nil {
		return x.ModelIconPath
	}
	return ""
}

func (x *ResProject8AirdropAwardTypeCfg) GetQualityColorStr() string {
	if x != nil {
		return x.QualityColorStr
	}
	return ""
}

type ResAirdropAwardLogicGLCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	LogicGL string `protobuf:"bytes,2,opt,name=LogicGL,proto3" json:"LogicGL,omitempty"`
}

func (x *ResAirdropAwardLogicGLCfg) Reset() {
	*x = ResAirdropAwardLogicGLCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[311]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResAirdropAwardLogicGLCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResAirdropAwardLogicGLCfg) ProtoMessage() {}

func (x *ResAirdropAwardLogicGLCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[311]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResAirdropAwardLogicGLCfg.ProtoReflect.Descriptor instead.
func (*ResAirdropAwardLogicGLCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{311}
}

func (x *ResAirdropAwardLogicGLCfg) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResAirdropAwardLogicGLCfg) GetLogicGL() string {
	if x != nil {
		return x.LogicGL
	}
	return ""
}

type IeDropConditionGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Condition       uint32 `protobuf:"varint,1,opt,name=Condition,proto3" json:"Condition,omitempty"`
	ConditionParam1 uint32 `protobuf:"varint,2,opt,name=ConditionParam1,proto3" json:"ConditionParam1,omitempty"`
	ConditionParam2 uint32 `protobuf:"varint,3,opt,name=ConditionParam2,proto3" json:"ConditionParam2,omitempty"`
}

func (x *IeDropConditionGroup) Reset() {
	*x = IeDropConditionGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[312]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IeDropConditionGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IeDropConditionGroup) ProtoMessage() {}

func (x *IeDropConditionGroup) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[312]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IeDropConditionGroup.ProtoReflect.Descriptor instead.
func (*IeDropConditionGroup) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{312}
}

func (x *IeDropConditionGroup) GetCondition() uint32 {
	if x != nil {
		return x.Condition
	}
	return 0
}

func (x *IeDropConditionGroup) GetConditionParam1() uint32 {
	if x != nil {
		return x.ConditionParam1
	}
	return 0
}

func (x *IeDropConditionGroup) GetConditionParam2() uint32 {
	if x != nil {
		return x.ConditionParam2
	}
	return 0
}

type IeDropSubGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StrategyID     uint32                  `protobuf:"varint,1,opt,name=StrategyID,proto3" json:"StrategyID,omitempty"`
	ConditionGroup []*IeDropConditionGroup `protobuf:"bytes,2,rep,name=ConditionGroup,proto3" json:"ConditionGroup,omitempty"`
}

func (x *IeDropSubGroup) Reset() {
	*x = IeDropSubGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[313]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IeDropSubGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IeDropSubGroup) ProtoMessage() {}

func (x *IeDropSubGroup) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[313]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IeDropSubGroup.ProtoReflect.Descriptor instead.
func (*IeDropSubGroup) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{313}
}

func (x *IeDropSubGroup) GetStrategyID() uint32 {
	if x != nil {
		return x.StrategyID
	}
	return 0
}

func (x *IeDropSubGroup) GetConditionGroup() []*IeDropConditionGroup {
	if x != nil {
		return x.ConditionGroup
	}
	return nil
}

type ResIeDropScenario struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScenarioID        uint32            `protobuf:"varint,1,opt,name=ScenarioID,proto3" json:"ScenarioID,omitempty"`
	PlayModID         PLAYMOD_TYPE      `protobuf:"varint,2,opt,name=PlayModID,proto3,enum=ResData.PLAYMOD_TYPE" json:"PlayModID,omitempty"`
	FormationsIDBegin int32             `protobuf:"varint,3,opt,name=FormationsIDBegin,proto3" json:"FormationsIDBegin,omitempty"`
	FormationsIDEnd   int32             `protobuf:"varint,4,opt,name=FormationsIDEnd,proto3" json:"FormationsIDEnd,omitempty"`
	DropSubItems      []*IeDropSubGroup `protobuf:"bytes,5,rep,name=DropSubItems,proto3" json:"DropSubItems,omitempty"`
}

func (x *ResIeDropScenario) Reset() {
	*x = ResIeDropScenario{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[314]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResIeDropScenario) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResIeDropScenario) ProtoMessage() {}

func (x *ResIeDropScenario) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[314]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResIeDropScenario.ProtoReflect.Descriptor instead.
func (*ResIeDropScenario) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{314}
}

func (x *ResIeDropScenario) GetScenarioID() uint32 {
	if x != nil {
		return x.ScenarioID
	}
	return 0
}

func (x *ResIeDropScenario) GetPlayModID() PLAYMOD_TYPE {
	if x != nil {
		return x.PlayModID
	}
	return PLAYMOD_TYPE_PLAYMOD_None
}

func (x *ResIeDropScenario) GetFormationsIDBegin() int32 {
	if x != nil {
		return x.FormationsIDBegin
	}
	return 0
}

func (x *ResIeDropScenario) GetFormationsIDEnd() int32 {
	if x != nil {
		return x.FormationsIDEnd
	}
	return 0
}

func (x *ResIeDropScenario) GetDropSubItems() []*IeDropSubGroup {
	if x != nil {
		return x.DropSubItems
	}
	return nil
}

type ResIeDropParamCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StrategyID   uint32   `protobuf:"varint,1,opt,name=StrategyID,proto3" json:"StrategyID,omitempty"`
	UseCount     uint32   `protobuf:"varint,2,opt,name=UseCount,proto3" json:"UseCount,omitempty"`
	UseCDType    uint32   `protobuf:"varint,3,opt,name=UseCDType,proto3" json:"UseCDType,omitempty"`
	UseCDCount   uint32   `protobuf:"varint,4,opt,name=UseCDCount,proto3" json:"UseCDCount,omitempty"`
	TriggerType  uint32   `protobuf:"varint,5,opt,name=TriggerType,proto3" json:"TriggerType,omitempty"`
	TriggerParam []uint32 `protobuf:"varint,6,rep,packed,name=TriggerParam,proto3" json:"TriggerParam,omitempty"`
	RemoveType   uint32   `protobuf:"varint,7,opt,name=RemoveType,proto3" json:"RemoveType,omitempty"`
	RemoveParam  []uint32 `protobuf:"varint,8,rep,packed,name=RemoveParam,proto3" json:"RemoveParam,omitempty"`
	EffectType   uint32   `protobuf:"varint,9,opt,name=EffectType,proto3" json:"EffectType,omitempty"`
	EffectParam  []uint32 `protobuf:"varint,10,rep,packed,name=EffectParam,proto3" json:"EffectParam,omitempty"`
	TriggerCount uint32   `protobuf:"varint,11,opt,name=TriggerCount,proto3" json:"TriggerCount,omitempty"`
}

func (x *ResIeDropParamCfg) Reset() {
	*x = ResIeDropParamCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[315]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResIeDropParamCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResIeDropParamCfg) ProtoMessage() {}

func (x *ResIeDropParamCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[315]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResIeDropParamCfg.ProtoReflect.Descriptor instead.
func (*ResIeDropParamCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{315}
}

func (x *ResIeDropParamCfg) GetStrategyID() uint32 {
	if x != nil {
		return x.StrategyID
	}
	return 0
}

func (x *ResIeDropParamCfg) GetUseCount() uint32 {
	if x != nil {
		return x.UseCount
	}
	return 0
}

func (x *ResIeDropParamCfg) GetUseCDType() uint32 {
	if x != nil {
		return x.UseCDType
	}
	return 0
}

func (x *ResIeDropParamCfg) GetUseCDCount() uint32 {
	if x != nil {
		return x.UseCDCount
	}
	return 0
}

func (x *ResIeDropParamCfg) GetTriggerType() uint32 {
	if x != nil {
		return x.TriggerType
	}
	return 0
}

func (x *ResIeDropParamCfg) GetTriggerParam() []uint32 {
	if x != nil {
		return x.TriggerParam
	}
	return nil
}

func (x *ResIeDropParamCfg) GetRemoveType() uint32 {
	if x != nil {
		return x.RemoveType
	}
	return 0
}

func (x *ResIeDropParamCfg) GetRemoveParam() []uint32 {
	if x != nil {
		return x.RemoveParam
	}
	return nil
}

func (x *ResIeDropParamCfg) GetEffectType() uint32 {
	if x != nil {
		return x.EffectType
	}
	return 0
}

func (x *ResIeDropParamCfg) GetEffectParam() []uint32 {
	if x != nil {
		return x.EffectParam
	}
	return nil
}

func (x *ResIeDropParamCfg) GetTriggerCount() uint32 {
	if x != nil {
		return x.TriggerCount
	}
	return 0
}

// 行政区编码表.
type ResAdministrativeCodeDatabin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeID uint32 `protobuf:"varint,1,opt,name=CodeID,proto3" json:"CodeID,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *ResAdministrativeCodeDatabin) Reset() {
	*x = ResAdministrativeCodeDatabin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[316]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResAdministrativeCodeDatabin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResAdministrativeCodeDatabin) ProtoMessage() {}

func (x *ResAdministrativeCodeDatabin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[316]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResAdministrativeCodeDatabin.ProtoReflect.Descriptor instead.
func (*ResAdministrativeCodeDatabin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{316}
}

func (x *ResAdministrativeCodeDatabin) GetCodeID() uint32 {
	if x != nil {
		return x.CodeID
	}
	return 0
}

func (x *ResAdministrativeCodeDatabin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// 全球编码表
type ResGlobalCodeDatabin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumCode uint32 `protobuf:"varint,1,opt,name=NumCode,proto3" json:"NumCode,omitempty"`
	StrCode string `protobuf:"bytes,2,opt,name=StrCode,proto3" json:"StrCode,omitempty"`
	EnName  string `protobuf:"bytes,3,opt,name=EnName,proto3" json:"EnName,omitempty"`
	CnName  string `protobuf:"bytes,4,opt,name=CnName,proto3" json:"CnName,omitempty"`
}

func (x *ResGlobalCodeDatabin) Reset() {
	*x = ResGlobalCodeDatabin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[317]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGlobalCodeDatabin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGlobalCodeDatabin) ProtoMessage() {}

func (x *ResGlobalCodeDatabin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[317]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGlobalCodeDatabin.ProtoReflect.Descriptor instead.
func (*ResGlobalCodeDatabin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{317}
}

func (x *ResGlobalCodeDatabin) GetNumCode() uint32 {
	if x != nil {
		return x.NumCode
	}
	return 0
}

func (x *ResGlobalCodeDatabin) GetStrCode() string {
	if x != nil {
		return x.StrCode
	}
	return ""
}

func (x *ResGlobalCodeDatabin) GetEnName() string {
	if x != nil {
		return x.EnName
	}
	return ""
}

func (x *ResGlobalCodeDatabin) GetCnName() string {
	if x != nil {
		return x.CnName
	}
	return ""
}

type LbsConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminAreaCodeCfg *ResAdministrativeCodeDatabin `protobuf:"bytes,1,opt,name=AdminAreaCodeCfg,proto3" json:"AdminAreaCodeCfg,omitempty"`
	GlobalCodeCfg    *ResGlobalCodeDatabin         `protobuf:"bytes,2,opt,name=GlobalCodeCfg,proto3" json:"GlobalCodeCfg,omitempty"`
}

func (x *LbsConf) Reset() {
	*x = LbsConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[318]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LbsConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LbsConf) ProtoMessage() {}

func (x *LbsConf) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[318]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LbsConf.ProtoReflect.Descriptor instead.
func (*LbsConf) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{318}
}

func (x *LbsConf) GetAdminAreaCodeCfg() *ResAdministrativeCodeDatabin {
	if x != nil {
		return x.AdminAreaCodeCfg
	}
	return nil
}

func (x *LbsConf) GetGlobalCodeCfg() *ResGlobalCodeDatabin {
	if x != nil {
		return x.GlobalCodeCfg
	}
	return nil
}

type ResBattlePlayerLevelDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerLevel   uint32 `protobuf:"varint,1,opt,name=PlayerLevel,proto3" json:"PlayerLevel,omitempty"`
	Population    uint32 `protobuf:"varint,2,opt,name=Population,proto3" json:"Population,omitempty"`
	CardPoolLevel uint32 `protobuf:"varint,3,opt,name=CardPoolLevel,proto3" json:"CardPoolLevel,omitempty"`
	UpgradeExp    uint32 `protobuf:"varint,4,opt,name=UpgradeExp,proto3" json:"UpgradeExp,omitempty"`
}

func (x *ResBattlePlayerLevelDataBin) Reset() {
	*x = ResBattlePlayerLevelDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[319]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResBattlePlayerLevelDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResBattlePlayerLevelDataBin) ProtoMessage() {}

func (x *ResBattlePlayerLevelDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[319]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResBattlePlayerLevelDataBin.ProtoReflect.Descriptor instead.
func (*ResBattlePlayerLevelDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{319}
}

func (x *ResBattlePlayerLevelDataBin) GetPlayerLevel() uint32 {
	if x != nil {
		return x.PlayerLevel
	}
	return 0
}

func (x *ResBattlePlayerLevelDataBin) GetPopulation() uint32 {
	if x != nil {
		return x.Population
	}
	return 0
}

func (x *ResBattlePlayerLevelDataBin) GetCardPoolLevel() uint32 {
	if x != nil {
		return x.CardPoolLevel
	}
	return 0
}

func (x *ResBattlePlayerLevelDataBin) GetUpgradeExp() uint32 {
	if x != nil {
		return x.UpgradeExp
	}
	return 0
}

type ResSystemEntryDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemID  uint32   `protobuf:"varint,2,opt,name=SystemID,proto3" json:"SystemID,omitempty"`
	JumpParam string   `protobuf:"bytes,3,opt,name=JumpParam,proto3" json:"JumpParam,omitempty"`
	Param     []string `protobuf:"bytes,4,rep,name=Param,proto3" json:"Param,omitempty"`
}

func (x *ResSystemEntryDataBin) Reset() {
	*x = ResSystemEntryDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[320]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResSystemEntryDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResSystemEntryDataBin) ProtoMessage() {}

func (x *ResSystemEntryDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[320]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResSystemEntryDataBin.ProtoReflect.Descriptor instead.
func (*ResSystemEntryDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{320}
}

func (x *ResSystemEntryDataBin) GetSystemID() uint32 {
	if x != nil {
		return x.SystemID
	}
	return 0
}

func (x *ResSystemEntryDataBin) GetJumpParam() string {
	if x != nil {
		return x.JumpParam
	}
	return ""
}

func (x *ResSystemEntryDataBin) GetParam() []string {
	if x != nil {
		return x.Param
	}
	return nil
}

type ResLoadingBgCfgDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ShowType       uint32 `protobuf:"varint,2,opt,name=showType,proto3" json:"showType,omitempty"`
	ShowMinLimit   uint32 `protobuf:"varint,3,opt,name=showMinLimit,proto3" json:"showMinLimit,omitempty"`
	ShowMaxLimit   uint32 `protobuf:"varint,4,opt,name=ShowMaxLimit,proto3" json:"ShowMaxLimit,omitempty"`
	TextGroupID    uint32 `protobuf:"varint,5,opt,name=TextGroupID,proto3" json:"TextGroupID,omitempty"`
	BgImageGroupID uint32 `protobuf:"varint,6,opt,name=BgImageGroupID,proto3" json:"BgImageGroupID,omitempty"`
	Extra          string `protobuf:"bytes,7,opt,name=Extra,proto3" json:"Extra,omitempty"`
}

func (x *ResLoadingBgCfgDataBin) Reset() {
	*x = ResLoadingBgCfgDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[321]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResLoadingBgCfgDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResLoadingBgCfgDataBin) ProtoMessage() {}

func (x *ResLoadingBgCfgDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[321]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResLoadingBgCfgDataBin.ProtoReflect.Descriptor instead.
func (*ResLoadingBgCfgDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{321}
}

func (x *ResLoadingBgCfgDataBin) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResLoadingBgCfgDataBin) GetShowType() uint32 {
	if x != nil {
		return x.ShowType
	}
	return 0
}

func (x *ResLoadingBgCfgDataBin) GetShowMinLimit() uint32 {
	if x != nil {
		return x.ShowMinLimit
	}
	return 0
}

func (x *ResLoadingBgCfgDataBin) GetShowMaxLimit() uint32 {
	if x != nil {
		return x.ShowMaxLimit
	}
	return 0
}

func (x *ResLoadingBgCfgDataBin) GetTextGroupID() uint32 {
	if x != nil {
		return x.TextGroupID
	}
	return 0
}

func (x *ResLoadingBgCfgDataBin) GetBgImageGroupID() uint32 {
	if x != nil {
		return x.BgImageGroupID
	}
	return 0
}

func (x *ResLoadingBgCfgDataBin) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

type ResLoadingTextCfgDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	TextGroupID uint32 `protobuf:"varint,2,opt,name=TextGroupID,proto3" json:"TextGroupID,omitempty"`
	TextID      uint32 `protobuf:"varint,3,opt,name=TextID,proto3" json:"TextID,omitempty"`
	Weight      uint32 `protobuf:"varint,4,opt,name=Weight,proto3" json:"Weight,omitempty"`
	TextContent string `protobuf:"bytes,5,opt,name=TextContent,proto3" json:"TextContent,omitempty"`
}

func (x *ResLoadingTextCfgDataBin) Reset() {
	*x = ResLoadingTextCfgDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[322]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResLoadingTextCfgDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResLoadingTextCfgDataBin) ProtoMessage() {}

func (x *ResLoadingTextCfgDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[322]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResLoadingTextCfgDataBin.ProtoReflect.Descriptor instead.
func (*ResLoadingTextCfgDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{322}
}

func (x *ResLoadingTextCfgDataBin) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResLoadingTextCfgDataBin) GetTextGroupID() uint32 {
	if x != nil {
		return x.TextGroupID
	}
	return 0
}

func (x *ResLoadingTextCfgDataBin) GetTextID() uint32 {
	if x != nil {
		return x.TextID
	}
	return 0
}

func (x *ResLoadingTextCfgDataBin) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ResLoadingTextCfgDataBin) GetTextContent() string {
	if x != nil {
		return x.TextContent
	}
	return ""
}

type ResLoadingBgImageCfgDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	BgImageGroupID uint32 `protobuf:"varint,2,opt,name=BgImageGroupID,proto3" json:"BgImageGroupID,omitempty"`
	ImageID        uint32 `protobuf:"varint,3,opt,name=ImageID,proto3" json:"ImageID,omitempty"`
	Weight         uint32 `protobuf:"varint,4,opt,name=Weight,proto3" json:"Weight,omitempty"`
	ImagePath      string `protobuf:"bytes,5,opt,name=ImagePath,proto3" json:"ImagePath,omitempty"`
}

func (x *ResLoadingBgImageCfgDataBin) Reset() {
	*x = ResLoadingBgImageCfgDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[323]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResLoadingBgImageCfgDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResLoadingBgImageCfgDataBin) ProtoMessage() {}

func (x *ResLoadingBgImageCfgDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[323]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResLoadingBgImageCfgDataBin.ProtoReflect.Descriptor instead.
func (*ResLoadingBgImageCfgDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{323}
}

func (x *ResLoadingBgImageCfgDataBin) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResLoadingBgImageCfgDataBin) GetBgImageGroupID() uint32 {
	if x != nil {
		return x.BgImageGroupID
	}
	return 0
}

func (x *ResLoadingBgImageCfgDataBin) GetImageID() uint32 {
	if x != nil {
		return x.ImageID
	}
	return 0
}

func (x *ResLoadingBgImageCfgDataBin) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ResLoadingBgImageCfgDataBin) GetImagePath() string {
	if x != nil {
		return x.ImagePath
	}
	return ""
}

type ResQtsPackageConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Type           uint32 `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Name           string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Desc           string `protobuf:"bytes,4,opt,name=Desc,proto3" json:"Desc,omitempty"`
	AutoDownload   bool   `protobuf:"varint,5,opt,name=AutoDownload,proto3" json:"AutoDownload,omitempty"`
	AllowUninstall bool   `protobuf:"varint,6,opt,name=AllowUninstall,proto3" json:"AllowUninstall,omitempty"`
}

func (x *ResQtsPackageConfig) Reset() {
	*x = ResQtsPackageConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[324]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResQtsPackageConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResQtsPackageConfig) ProtoMessage() {}

func (x *ResQtsPackageConfig) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[324]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResQtsPackageConfig.ProtoReflect.Descriptor instead.
func (*ResQtsPackageConfig) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{324}
}

func (x *ResQtsPackageConfig) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResQtsPackageConfig) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ResQtsPackageConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResQtsPackageConfig) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ResQtsPackageConfig) GetAutoDownload() bool {
	if x != nil {
		return x.AutoDownload
	}
	return false
}

func (x *ResQtsPackageConfig) GetAllowUninstall() bool {
	if x != nil {
		return x.AllowUninstall
	}
	return false
}

type PvpGameConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AISettleDelay *ResAISettleDetailDelayDataBin `protobuf:"bytes,1,opt,name=AISettleDelay,proto3" json:"AISettleDelay,omitempty"`
}

func (x *PvpGameConf) Reset() {
	*x = PvpGameConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[325]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PvpGameConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PvpGameConf) ProtoMessage() {}

func (x *PvpGameConf) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[325]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PvpGameConf.ProtoReflect.Descriptor instead.
func (*PvpGameConf) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{325}
}

func (x *PvpGameConf) GetAISettleDelay() *ResAISettleDetailDelayDataBin {
	if x != nil {
		return x.AISettleDelay
	}
	return nil
}

type ResAISettleDetailDelayDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxDelaySec    uint32 `protobuf:"varint,1,opt,name=MaxDelaySec,proto3" json:"MaxDelaySec,omitempty"`
	IgnoreDelaySec uint32 `protobuf:"varint,2,opt,name=IgnoreDelaySec,proto3" json:"IgnoreDelaySec,omitempty"`
}

func (x *ResAISettleDetailDelayDataBin) Reset() {
	*x = ResAISettleDetailDelayDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[326]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResAISettleDetailDelayDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResAISettleDetailDelayDataBin) ProtoMessage() {}

func (x *ResAISettleDetailDelayDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[326]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResAISettleDetailDelayDataBin.ProtoReflect.Descriptor instead.
func (*ResAISettleDetailDelayDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{326}
}

func (x *ResAISettleDetailDelayDataBin) GetMaxDelaySec() uint32 {
	if x != nil {
		return x.MaxDelaySec
	}
	return 0
}

func (x *ResAISettleDetailDelayDataBin) GetIgnoreDelaySec() uint32 {
	if x != nil {
		return x.IgnoreDelaySec
	}
	return 0
}

type ResLobbyChartsInfoDatabin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	RankMin  uint32 `protobuf:"varint,2,opt,name=RankMin,proto3" json:"RankMin,omitempty"`
	RankMax  uint32 `protobuf:"varint,3,opt,name=RankMax,proto3" json:"RankMax,omitempty"`
	SeasonID uint32 `protobuf:"varint,4,opt,name=SeasonID,proto3" json:"SeasonID,omitempty"`
	GameType uint32 `protobuf:"varint,5,opt,name=GameType,proto3" json:"GameType,omitempty"`
}

func (x *ResLobbyChartsInfoDatabin) Reset() {
	*x = ResLobbyChartsInfoDatabin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[327]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResLobbyChartsInfoDatabin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResLobbyChartsInfoDatabin) ProtoMessage() {}

func (x *ResLobbyChartsInfoDatabin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[327]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResLobbyChartsInfoDatabin.ProtoReflect.Descriptor instead.
func (*ResLobbyChartsInfoDatabin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{327}
}

func (x *ResLobbyChartsInfoDatabin) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResLobbyChartsInfoDatabin) GetRankMin() uint32 {
	if x != nil {
		return x.RankMin
	}
	return 0
}

func (x *ResLobbyChartsInfoDatabin) GetRankMax() uint32 {
	if x != nil {
		return x.RankMax
	}
	return 0
}

func (x *ResLobbyChartsInfoDatabin) GetSeasonID() uint32 {
	if x != nil {
		return x.SeasonID
	}
	return 0
}

func (x *ResLobbyChartsInfoDatabin) GetGameType() uint32 {
	if x != nil {
		return x.GameType
	}
	return 0
}

type ResLobbySystemEntryCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemID uint32 `protobuf:"varint,1,opt,name=SystemID,proto3" json:"SystemID,omitempty"`
	Priority uint32 `protobuf:"varint,2,opt,name=Priority,proto3" json:"Priority,omitempty"`
}

func (x *ResLobbySystemEntryCfg) Reset() {
	*x = ResLobbySystemEntryCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[328]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResLobbySystemEntryCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResLobbySystemEntryCfg) ProtoMessage() {}

func (x *ResLobbySystemEntryCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[328]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResLobbySystemEntryCfg.ProtoReflect.Descriptor instead.
func (*ResLobbySystemEntryCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{328}
}

func (x *ResLobbySystemEntryCfg) GetSystemID() uint32 {
	if x != nil {
		return x.SystemID
	}
	return 0
}

func (x *ResLobbySystemEntryCfg) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type LobbyRankShowIndexCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowIndexID uint32 `protobuf:"varint,1,opt,name=ShowIndexID,proto3" json:"ShowIndexID,omitempty"`
}

func (x *LobbyRankShowIndexCfg) Reset() {
	*x = LobbyRankShowIndexCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[329]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LobbyRankShowIndexCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LobbyRankShowIndexCfg) ProtoMessage() {}

func (x *LobbyRankShowIndexCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[329]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LobbyRankShowIndexCfg.ProtoReflect.Descriptor instead.
func (*LobbyRankShowIndexCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{329}
}

func (x *LobbyRankShowIndexCfg) GetShowIndexID() uint32 {
	if x != nil {
		return x.ShowIndexID
	}
	return 0
}

type LobbyConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyChartsDataBin *ResLobbyChartsInfoDatabin `protobuf:"bytes,1,opt,name=LobbyChartsDataBin,proto3" json:"LobbyChartsDataBin,omitempty"`
}

func (x *LobbyConf) Reset() {
	*x = LobbyConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[330]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LobbyConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LobbyConf) ProtoMessage() {}

func (x *LobbyConf) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[330]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LobbyConf.ProtoReflect.Descriptor instead.
func (*LobbyConf) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{330}
}

func (x *LobbyConf) GetLobbyChartsDataBin() *ResLobbyChartsInfoDatabin {
	if x != nil {
		return x.LobbyChartsDataBin
	}
	return nil
}

type ResPlayTemplateParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                                int32                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	GridType                          ResGridType            `protobuf:"varint,2,opt,name=GridType,proto3,enum=ResData.ResGridType" json:"GridType,omitempty"`
	BattleGridWidth                   int32                  `protobuf:"varint,3,opt,name=BattleGridWidth,proto3" json:"BattleGridWidth,omitempty"`
	BattleGridHeight                  int32                  `protobuf:"varint,4,opt,name=BattleGridHeight,proto3" json:"BattleGridHeight,omitempty"`
	BattleGridCellSize                int32                  `protobuf:"varint,5,opt,name=BattleGridCellSize,proto3" json:"BattleGridCellSize,omitempty"`
	AlternativeCellSize               int32                  `protobuf:"varint,6,opt,name=AlternativeCellSize,proto3" json:"AlternativeCellSize,omitempty"`
	ArtistBaseSceneID                 int32                  `protobuf:"varint,8,opt,name=ArtistBaseSceneID,proto3" json:"ArtistBaseSceneID,omitempty"`
	ViewClipRadius                    int32                  `protobuf:"varint,9,opt,name=ViewClipRadius,proto3" json:"ViewClipRadius,omitempty"`
	HpBarScaleLine                    int32                  `protobuf:"varint,10,opt,name=HpBarScaleLine,proto3" json:"HpBarScaleLine,omitempty"`
	AtorSphereRadius                  int32                  `protobuf:"varint,11,opt,name=AtorSphereRadius,proto3" json:"AtorSphereRadius,omitempty"`
	FormulaParamA                     int32                  `protobuf:"varint,12,opt,name=FormulaParamA,proto3" json:"FormulaParamA,omitempty"`
	FormulaParamB                     int32                  `protobuf:"varint,13,opt,name=FormulaParamB,proto3" json:"FormulaParamB,omitempty"`
	FormulaParamC                     int32                  `protobuf:"varint,14,opt,name=FormulaParamC,proto3" json:"FormulaParamC,omitempty"`
	EnergyHurtRecoverShieldRate       int32                  `protobuf:"varint,15,opt,name=EnergyHurtRecoverShieldRate,proto3" json:"EnergyHurtRecoverShieldRate,omitempty"`
	FormulaAPFunc                     ResFormulaAPFunc       `protobuf:"varint,16,opt,name=FormulaAPFunc,proto3,enum=ResData.ResFormulaAPFunc" json:"FormulaAPFunc,omitempty"`
	BattleCameraConfigType            int32                  `protobuf:"varint,17,opt,name=BattleCameraConfigType,proto3" json:"BattleCameraConfigType,omitempty"`
	PrepareCameraConfigType           int32                  `protobuf:"varint,18,opt,name=PrepareCameraConfigType,proto3" json:"PrepareCameraConfigType,omitempty"`
	BattleGridBackgroundPath          string                 `protobuf:"bytes,19,opt,name=BattleGridBackgroundPath,proto3" json:"BattleGridBackgroundPath,omitempty"`
	BattleGridBluePath                string                 `protobuf:"bytes,20,opt,name=BattleGridBluePath,proto3" json:"BattleGridBluePath,omitempty"`
	BattleGridGreyHighLightPath       string                 `protobuf:"bytes,21,opt,name=BattleGridGreyHighLightPath,proto3" json:"BattleGridGreyHighLightPath,omitempty"`
	BattleGridRedGridPath             string                 `protobuf:"bytes,22,opt,name=BattleGridRedGridPath,proto3" json:"BattleGridRedGridPath,omitempty"`
	BattleGridYellowGridPath          string                 `protobuf:"bytes,23,opt,name=BattleGridYellowGridPath,proto3" json:"BattleGridYellowGridPath,omitempty"`
	AlternativeGridGreyPath           string                 `protobuf:"bytes,25,opt,name=AlternativeGridGreyPath,proto3" json:"AlternativeGridGreyPath,omitempty"`
	AlternativeGridGreyHighLightPath  string                 `protobuf:"bytes,26,opt,name=AlternativeGridGreyHighLightPath,proto3" json:"AlternativeGridGreyHighLightPath,omitempty"`
	Upgrade2HideAgePath               string                 `protobuf:"bytes,27,opt,name=Upgrade2HideAgePath,proto3" json:"Upgrade2HideAgePath,omitempty"`
	Upgrade2FlyAgePath                string                 `protobuf:"bytes,28,opt,name=Upgrade2FlyAgePath,proto3" json:"Upgrade2FlyAgePath,omitempty"`
	Upgrade2BornAgePath               string                 `protobuf:"bytes,29,opt,name=Upgrade2BornAgePath,proto3" json:"Upgrade2BornAgePath,omitempty"`
	Upgrade3HideAgePath               string                 `protobuf:"bytes,30,opt,name=Upgrade3HideAgePath,proto3" json:"Upgrade3HideAgePath,omitempty"`
	Upgrade3FlyAgePath                string                 `protobuf:"bytes,31,opt,name=Upgrade3FlyAgePath,proto3" json:"Upgrade3FlyAgePath,omitempty"`
	Upgrade3BornAgePath               string                 `protobuf:"bytes,32,opt,name=Upgrade3BornAgePath,proto3" json:"Upgrade3BornAgePath,omitempty"`
	SceneFlipWhenNotHost              bool                   `protobuf:"varint,33,opt,name=SceneFlipWhenNotHost,proto3" json:"SceneFlipWhenNotHost,omitempty"`
	DamageMpRecoverType               ResDamageMpRecoverType `protobuf:"varint,34,opt,name=DamageMpRecoverType,proto3,enum=ResData.ResDamageMpRecoverType" json:"DamageMpRecoverType,omitempty"`
	GameTypeGroup                     uint32                 `protobuf:"varint,35,opt,name=GameTypeGroup,proto3" json:"GameTypeGroup,omitempty"`
	AttackRangeTipPath                string                 `protobuf:"bytes,36,opt,name=AttackRangeTipPath,proto3" json:"AttackRangeTipPath,omitempty"`
	ContinuousWinCount                []uint32               `protobuf:"varint,37,rep,packed,name=ContinuousWinCount,proto3" json:"ContinuousWinCount,omitempty"`
	ContinuousWinAge                  []string               `protobuf:"bytes,38,rep,name=ContinuousWinAge,proto3" json:"ContinuousWinAge,omitempty"`
	StopContinuousWinAge              string                 `protobuf:"bytes,39,opt,name=StopContinuousWinAge,proto3" json:"StopContinuousWinAge,omitempty"`
	NavDebugPath                      string                 `protobuf:"bytes,40,opt,name=NavDebugPath,proto3" json:"NavDebugPath,omitempty"`
	BattleGridBackgroundHighLightPath string                 `protobuf:"bytes,41,opt,name=BattleGridBackgroundHighLightPath,proto3" json:"BattleGridBackgroundHighLightPath,omitempty"`
	BattleGridDragExtraGridPath       string                 `protobuf:"bytes,42,opt,name=BattleGridDragExtraGridPath,proto3" json:"BattleGridDragExtraGridPath,omitempty"`
}

func (x *ResPlayTemplateParam) Reset() {
	*x = ResPlayTemplateParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[331]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResPlayTemplateParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResPlayTemplateParam) ProtoMessage() {}

func (x *ResPlayTemplateParam) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[331]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResPlayTemplateParam.ProtoReflect.Descriptor instead.
func (*ResPlayTemplateParam) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{331}
}

func (x *ResPlayTemplateParam) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResPlayTemplateParam) GetGridType() ResGridType {
	if x != nil {
		return x.GridType
	}
	return ResGridType_ResGridTypeHexagon
}

func (x *ResPlayTemplateParam) GetBattleGridWidth() int32 {
	if x != nil {
		return x.BattleGridWidth
	}
	return 0
}

func (x *ResPlayTemplateParam) GetBattleGridHeight() int32 {
	if x != nil {
		return x.BattleGridHeight
	}
	return 0
}

func (x *ResPlayTemplateParam) GetBattleGridCellSize() int32 {
	if x != nil {
		return x.BattleGridCellSize
	}
	return 0
}

func (x *ResPlayTemplateParam) GetAlternativeCellSize() int32 {
	if x != nil {
		return x.AlternativeCellSize
	}
	return 0
}

func (x *ResPlayTemplateParam) GetArtistBaseSceneID() int32 {
	if x != nil {
		return x.ArtistBaseSceneID
	}
	return 0
}

func (x *ResPlayTemplateParam) GetViewClipRadius() int32 {
	if x != nil {
		return x.ViewClipRadius
	}
	return 0
}

func (x *ResPlayTemplateParam) GetHpBarScaleLine() int32 {
	if x != nil {
		return x.HpBarScaleLine
	}
	return 0
}

func (x *ResPlayTemplateParam) GetAtorSphereRadius() int32 {
	if x != nil {
		return x.AtorSphereRadius
	}
	return 0
}

func (x *ResPlayTemplateParam) GetFormulaParamA() int32 {
	if x != nil {
		return x.FormulaParamA
	}
	return 0
}

func (x *ResPlayTemplateParam) GetFormulaParamB() int32 {
	if x != nil {
		return x.FormulaParamB
	}
	return 0
}

func (x *ResPlayTemplateParam) GetFormulaParamC() int32 {
	if x != nil {
		return x.FormulaParamC
	}
	return 0
}

func (x *ResPlayTemplateParam) GetEnergyHurtRecoverShieldRate() int32 {
	if x != nil {
		return x.EnergyHurtRecoverShieldRate
	}
	return 0
}

func (x *ResPlayTemplateParam) GetFormulaAPFunc() ResFormulaAPFunc {
	if x != nil {
		return x.FormulaAPFunc
	}
	return ResFormulaAPFunc_ResFormulaAPFuncAdd
}

func (x *ResPlayTemplateParam) GetBattleCameraConfigType() int32 {
	if x != nil {
		return x.BattleCameraConfigType
	}
	return 0
}

func (x *ResPlayTemplateParam) GetPrepareCameraConfigType() int32 {
	if x != nil {
		return x.PrepareCameraConfigType
	}
	return 0
}

func (x *ResPlayTemplateParam) GetBattleGridBackgroundPath() string {
	if x != nil {
		return x.BattleGridBackgroundPath
	}
	return ""
}

func (x *ResPlayTemplateParam) GetBattleGridBluePath() string {
	if x != nil {
		return x.BattleGridBluePath
	}
	return ""
}

func (x *ResPlayTemplateParam) GetBattleGridGreyHighLightPath() string {
	if x != nil {
		return x.BattleGridGreyHighLightPath
	}
	return ""
}

func (x *ResPlayTemplateParam) GetBattleGridRedGridPath() string {
	if x != nil {
		return x.BattleGridRedGridPath
	}
	return ""
}

func (x *ResPlayTemplateParam) GetBattleGridYellowGridPath() string {
	if x != nil {
		return x.BattleGridYellowGridPath
	}
	return ""
}

func (x *ResPlayTemplateParam) GetAlternativeGridGreyPath() string {
	if x != nil {
		return x.AlternativeGridGreyPath
	}
	return ""
}

func (x *ResPlayTemplateParam) GetAlternativeGridGreyHighLightPath() string {
	if x != nil {
		return x.AlternativeGridGreyHighLightPath
	}
	return ""
}

func (x *ResPlayTemplateParam) GetUpgrade2HideAgePath() string {
	if x != nil {
		return x.Upgrade2HideAgePath
	}
	return ""
}

func (x *ResPlayTemplateParam) GetUpgrade2FlyAgePath() string {
	if x != nil {
		return x.Upgrade2FlyAgePath
	}
	return ""
}

func (x *ResPlayTemplateParam) GetUpgrade2BornAgePath() string {
	if x != nil {
		return x.Upgrade2BornAgePath
	}
	return ""
}

func (x *ResPlayTemplateParam) GetUpgrade3HideAgePath() string {
	if x != nil {
		return x.Upgrade3HideAgePath
	}
	return ""
}

func (x *ResPlayTemplateParam) GetUpgrade3FlyAgePath() string {
	if x != nil {
		return x.Upgrade3FlyAgePath
	}
	return ""
}

func (x *ResPlayTemplateParam) GetUpgrade3BornAgePath() string {
	if x != nil {
		return x.Upgrade3BornAgePath
	}
	return ""
}

func (x *ResPlayTemplateParam) GetSceneFlipWhenNotHost() bool {
	if x != nil {
		return x.SceneFlipWhenNotHost
	}
	return false
}

func (x *ResPlayTemplateParam) GetDamageMpRecoverType() ResDamageMpRecoverType {
	if x != nil {
		return x.DamageMpRecoverType
	}
	return ResDamageMpRecoverType_ResDamageMpRecoverTypeConstValue
}

func (x *ResPlayTemplateParam) GetGameTypeGroup() uint32 {
	if x != nil {
		return x.GameTypeGroup
	}
	return 0
}

func (x *ResPlayTemplateParam) GetAttackRangeTipPath() string {
	if x != nil {
		return x.AttackRangeTipPath
	}
	return ""
}

func (x *ResPlayTemplateParam) GetContinuousWinCount() []uint32 {
	if x != nil {
		return x.ContinuousWinCount
	}
	return nil
}

func (x *ResPlayTemplateParam) GetContinuousWinAge() []string {
	if x != nil {
		return x.ContinuousWinAge
	}
	return nil
}

func (x *ResPlayTemplateParam) GetStopContinuousWinAge() string {
	if x != nil {
		return x.StopContinuousWinAge
	}
	return ""
}

func (x *ResPlayTemplateParam) GetNavDebugPath() string {
	if x != nil {
		return x.NavDebugPath
	}
	return ""
}

func (x *ResPlayTemplateParam) GetBattleGridBackgroundHighLightPath() string {
	if x != nil {
		return x.BattleGridBackgroundHighLightPath
	}
	return ""
}

func (x *ResPlayTemplateParam) GetBattleGridDragExtraGridPath() string {
	if x != nil {
		return x.BattleGridDragExtraGridPath
	}
	return ""
}

type ResCurrencyRarityCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyType uint32 `protobuf:"varint,1,opt,name=CurrencyType,proto3" json:"CurrencyType,omitempty"`
	ScarceLevel  uint32 `protobuf:"varint,2,opt,name=ScarceLevel,proto3" json:"ScarceLevel,omitempty"`
	MinValue     uint32 `protobuf:"varint,3,opt,name=MinValue,proto3" json:"MinValue,omitempty"`
	MaxValue     uint32 `protobuf:"varint,4,opt,name=MaxValue,proto3" json:"MaxValue,omitempty"`
}

func (x *ResCurrencyRarityCfg) Reset() {
	*x = ResCurrencyRarityCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[332]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResCurrencyRarityCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResCurrencyRarityCfg) ProtoMessage() {}

func (x *ResCurrencyRarityCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[332]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResCurrencyRarityCfg.ProtoReflect.Descriptor instead.
func (*ResCurrencyRarityCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{332}
}

func (x *ResCurrencyRarityCfg) GetCurrencyType() uint32 {
	if x != nil {
		return x.CurrencyType
	}
	return 0
}

func (x *ResCurrencyRarityCfg) GetScarceLevel() uint32 {
	if x != nil {
		return x.ScarceLevel
	}
	return 0
}

func (x *ResCurrencyRarityCfg) GetMinValue() uint32 {
	if x != nil {
		return x.MinValue
	}
	return 0
}

func (x *ResCurrencyRarityCfg) GetMaxValue() uint32 {
	if x != nil {
		return x.MaxValue
	}
	return 0
}

type ResPracticeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigId             uint32                     `protobuf:"varint,1,opt,name=ConfigId,proto3" json:"ConfigId,omitempty"`
	PlayerLevel          uint32                     `protobuf:"varint,2,opt,name=PlayerLevel,proto3" json:"PlayerLevel,omitempty"`
	AdditionalPopulation uint32                     `protobuf:"varint,3,opt,name=AdditionalPopulation,proto3" json:"AdditionalPopulation,omitempty"`
	Gold                 uint32                     `protobuf:"varint,4,opt,name=Gold,proto3" json:"Gold,omitempty"`
	CommonPuppetID       uint32                     `protobuf:"varint,5,opt,name=CommonPuppetID,proto3" json:"CommonPuppetID,omitempty"`
	InvinciblePuppetID   uint32                     `protobuf:"varint,6,opt,name=InvinciblePuppetID,proto3" json:"InvinciblePuppetID,omitempty"`
	Equips               []*ResPracticeConfig_Equip `protobuf:"bytes,7,rep,name=Equips,proto3" json:"Equips,omitempty"`
}

func (x *ResPracticeConfig) Reset() {
	*x = ResPracticeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[333]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResPracticeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResPracticeConfig) ProtoMessage() {}

func (x *ResPracticeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[333]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResPracticeConfig.ProtoReflect.Descriptor instead.
func (*ResPracticeConfig) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{333}
}

func (x *ResPracticeConfig) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *ResPracticeConfig) GetPlayerLevel() uint32 {
	if x != nil {
		return x.PlayerLevel
	}
	return 0
}

func (x *ResPracticeConfig) GetAdditionalPopulation() uint32 {
	if x != nil {
		return x.AdditionalPopulation
	}
	return 0
}

func (x *ResPracticeConfig) GetGold() uint32 {
	if x != nil {
		return x.Gold
	}
	return 0
}

func (x *ResPracticeConfig) GetCommonPuppetID() uint32 {
	if x != nil {
		return x.CommonPuppetID
	}
	return 0
}

func (x *ResPracticeConfig) GetInvinciblePuppetID() uint32 {
	if x != nil {
		return x.InvinciblePuppetID
	}
	return 0
}

func (x *ResPracticeConfig) GetEquips() []*ResPracticeConfig_Equip {
	if x != nil {
		return x.Equips
	}
	return nil
}

type ResAndroidDeviceUICfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigId        uint32  `protobuf:"varint,1,opt,name=ConfigId,proto3" json:"ConfigId,omitempty"`
	DeviceName      string  `protobuf:"bytes,2,opt,name=DeviceName,proto3" json:"DeviceName,omitempty"`
	WidthHeightRate float32 `protobuf:"fixed32,3,opt,name=WidthHeightRate,proto3" json:"WidthHeightRate,omitempty"`
}

func (x *ResAndroidDeviceUICfg) Reset() {
	*x = ResAndroidDeviceUICfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[334]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResAndroidDeviceUICfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResAndroidDeviceUICfg) ProtoMessage() {}

func (x *ResAndroidDeviceUICfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[334]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResAndroidDeviceUICfg.ProtoReflect.Descriptor instead.
func (*ResAndroidDeviceUICfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{334}
}

func (x *ResAndroidDeviceUICfg) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *ResAndroidDeviceUICfg) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *ResAndroidDeviceUICfg) GetWidthHeightRate() float32 {
	if x != nil {
		return x.WidthHeightRate
	}
	return 0
}

type ResRefTipsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Refer string `protobuf:"bytes,1,opt,name=Refer,proto3" json:"Refer,omitempty"`
	Tips  string `protobuf:"bytes,2,opt,name=Tips,proto3" json:"Tips,omitempty"`
}

func (x *ResRefTipsConfig) Reset() {
	*x = ResRefTipsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[335]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResRefTipsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResRefTipsConfig) ProtoMessage() {}

func (x *ResRefTipsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[335]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResRefTipsConfig.ProtoReflect.Descriptor instead.
func (*ResRefTipsConfig) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{335}
}

func (x *ResRefTipsConfig) GetRefer() string {
	if x != nil {
		return x.Refer
	}
	return ""
}

func (x *ResRefTipsConfig) GetTips() string {
	if x != nil {
		return x.Tips
	}
	return ""
}

type RefTipsCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefTipsConfigs *ResRefTipsConfig `protobuf:"bytes,1,opt,name=RefTipsConfigs,proto3" json:"RefTipsConfigs,omitempty"`
}

func (x *RefTipsCfg) Reset() {
	*x = RefTipsCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[336]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefTipsCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefTipsCfg) ProtoMessage() {}

func (x *RefTipsCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[336]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefTipsCfg.ProtoReflect.Descriptor instead.
func (*RefTipsCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{336}
}

func (x *RefTipsCfg) GetRefTipsConfigs() *ResRefTipsConfig {
	if x != nil {
		return x.RefTipsConfigs
	}
	return nil
}

type ResLanguageCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LanguageID     uint32            `protobuf:"varint,1,opt,name=LanguageID,proto3" json:"LanguageID,omitempty"`
	LanguageRule   GAMELANGUAGE_TYPE `protobuf:"varint,2,opt,name=LanguageRule,proto3,enum=ResData.GAMELANGUAGE_TYPE" json:"LanguageRule,omitempty"`
	LanguageName   string            `protobuf:"bytes,3,opt,name=LanguageName,proto3" json:"LanguageName,omitempty"`
	LanguageNormal string            `protobuf:"bytes,4,opt,name=LanguageNormal,proto3" json:"LanguageNormal,omitempty"`
	LanguageCode   string            `protobuf:"bytes,5,opt,name=LanguageCode,proto3" json:"LanguageCode,omitempty"`
}

func (x *ResLanguageCfg) Reset() {
	*x = ResLanguageCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[337]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResLanguageCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResLanguageCfg) ProtoMessage() {}

func (x *ResLanguageCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[337]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResLanguageCfg.ProtoReflect.Descriptor instead.
func (*ResLanguageCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{337}
}

func (x *ResLanguageCfg) GetLanguageID() uint32 {
	if x != nil {
		return x.LanguageID
	}
	return 0
}

func (x *ResLanguageCfg) GetLanguageRule() GAMELANGUAGE_TYPE {
	if x != nil {
		return x.LanguageRule
	}
	return GAMELANGUAGE_TYPE_GAMELANGUAGE_TYPE_None
}

func (x *ResLanguageCfg) GetLanguageName() string {
	if x != nil {
		return x.LanguageName
	}
	return ""
}

func (x *ResLanguageCfg) GetLanguageNormal() string {
	if x != nil {
		return x.LanguageNormal
	}
	return ""
}

func (x *ResLanguageCfg) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

type ResDistrictLanguageCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LanguageID            uint32            `protobuf:"varint,1,opt,name=LanguageID,proto3" json:"LanguageID,omitempty"`
	LanguageRule          GAMELANGUAGE_TYPE `protobuf:"varint,2,opt,name=LanguageRule,proto3,enum=ResData.GAMELANGUAGE_TYPE" json:"LanguageRule,omitempty"`
	LanguageUseStatus     bool              `protobuf:"varint,3,opt,name=LanguageUseStatus,proto3" json:"LanguageUseStatus,omitempty"`
	LanguageDefaultStatus bool              `protobuf:"varint,4,opt,name=LanguageDefaultStatus,proto3" json:"LanguageDefaultStatus,omitempty"`
	MSDKNoticeLanguage    string            `protobuf:"bytes,5,opt,name=MSDKNoticeLanguage,proto3" json:"MSDKNoticeLanguage,omitempty"`
	INTLNoticeLanguage    string            `protobuf:"bytes,6,opt,name=INTLNoticeLanguage,proto3" json:"INTLNoticeLanguage,omitempty"`
}

func (x *ResDistrictLanguageCfg) Reset() {
	*x = ResDistrictLanguageCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[338]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDistrictLanguageCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDistrictLanguageCfg) ProtoMessage() {}

func (x *ResDistrictLanguageCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[338]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDistrictLanguageCfg.ProtoReflect.Descriptor instead.
func (*ResDistrictLanguageCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{338}
}

func (x *ResDistrictLanguageCfg) GetLanguageID() uint32 {
	if x != nil {
		return x.LanguageID
	}
	return 0
}

func (x *ResDistrictLanguageCfg) GetLanguageRule() GAMELANGUAGE_TYPE {
	if x != nil {
		return x.LanguageRule
	}
	return GAMELANGUAGE_TYPE_GAMELANGUAGE_TYPE_None
}

func (x *ResDistrictLanguageCfg) GetLanguageUseStatus() bool {
	if x != nil {
		return x.LanguageUseStatus
	}
	return false
}

func (x *ResDistrictLanguageCfg) GetLanguageDefaultStatus() bool {
	if x != nil {
		return x.LanguageDefaultStatus
	}
	return false
}

func (x *ResDistrictLanguageCfg) GetMSDKNoticeLanguage() string {
	if x != nil {
		return x.MSDKNoticeLanguage
	}
	return ""
}

func (x *ResDistrictLanguageCfg) GetINTLNoticeLanguage() string {
	if x != nil {
		return x.INTLNoticeLanguage
	}
	return ""
}

type ResCountryAgreementCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                uint32                   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name              string                   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	IsDefault         bool                     `protobuf:"varint,3,opt,name=IsDefault,proto3" json:"IsDefault,omitempty"`
	Enabled           bool                     `protobuf:"varint,4,opt,name=Enabled,proto3" json:"Enabled,omitempty"`
	AgreementIDList   string                   `protobuf:"bytes,5,opt,name=AgreementIDList,proto3" json:"AgreementIDList,omitempty"`
	AgeConfrimeMethod AgeAuthentication_Method `protobuf:"varint,6,opt,name=AgeConfrimeMethod,proto3,enum=ResData.AgeAuthentication_Method" json:"AgeConfrimeMethod,omitempty"`
	AgeRestriction    uint32                   `protobuf:"varint,7,opt,name=AgeRestriction,proto3" json:"AgeRestriction,omitempty"`
}

func (x *ResCountryAgreementCfg) Reset() {
	*x = ResCountryAgreementCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[339]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResCountryAgreementCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResCountryAgreementCfg) ProtoMessage() {}

func (x *ResCountryAgreementCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[339]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResCountryAgreementCfg.ProtoReflect.Descriptor instead.
func (*ResCountryAgreementCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{339}
}

func (x *ResCountryAgreementCfg) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResCountryAgreementCfg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResCountryAgreementCfg) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *ResCountryAgreementCfg) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ResCountryAgreementCfg) GetAgreementIDList() string {
	if x != nil {
		return x.AgreementIDList
	}
	return ""
}

func (x *ResCountryAgreementCfg) GetAgeConfrimeMethod() AgeAuthentication_Method {
	if x != nil {
		return x.AgeConfrimeMethod
	}
	return AgeAuthentication_Method_AgeAuthentication_Method_None
}

func (x *ResCountryAgreementCfg) GetAgeRestriction() uint32 {
	if x != nil {
		return x.AgeRestriction
	}
	return 0
}

type ResLordExclusiveSkillConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigId        uint32 `protobuf:"varint,1,opt,name=ConfigId,proto3" json:"ConfigId,omitempty"`
	HitSkillAgePath string `protobuf:"bytes,2,opt,name=HitSkillAgePath,proto3" json:"HitSkillAgePath,omitempty"`
}

func (x *ResLordExclusiveSkillConfig) Reset() {
	*x = ResLordExclusiveSkillConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[340]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResLordExclusiveSkillConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResLordExclusiveSkillConfig) ProtoMessage() {}

func (x *ResLordExclusiveSkillConfig) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[340]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResLordExclusiveSkillConfig.ProtoReflect.Descriptor instead.
func (*ResLordExclusiveSkillConfig) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{340}
}

func (x *ResLordExclusiveSkillConfig) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *ResLordExclusiveSkillConfig) GetHitSkillAgePath() string {
	if x != nil {
		return x.HitSkillAgePath
	}
	return ""
}

type ResMNZDepositCardFetterIconCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FetterID RES_RELATIVE_ID `protobuf:"varint,1,opt,name=FetterID,proto3,enum=ResData.RES_RELATIVE_ID" json:"FetterID,omitempty"`
	IconPath string          `protobuf:"bytes,2,opt,name=IconPath,proto3" json:"IconPath,omitempty"`
}

func (x *ResMNZDepositCardFetterIconCfg) Reset() {
	*x = ResMNZDepositCardFetterIconCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[341]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResMNZDepositCardFetterIconCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResMNZDepositCardFetterIconCfg) ProtoMessage() {}

func (x *ResMNZDepositCardFetterIconCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[341]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResMNZDepositCardFetterIconCfg.ProtoReflect.Descriptor instead.
func (*ResMNZDepositCardFetterIconCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{341}
}

func (x *ResMNZDepositCardFetterIconCfg) GetFetterID() RES_RELATIVE_ID {
	if x != nil {
		return x.FetterID
	}
	return RES_RELATIVE_ID_RES_RELATIVE_ID_NULL
}

func (x *ResMNZDepositCardFetterIconCfg) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

type ResHomePageShowDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowID            uint32                                  `protobuf:"varint,1,opt,name=ShowID,proto3" json:"ShowID,omitempty"`
	ShowName          ResHomePageShowDataBin_HomePageShowName `protobuf:"varint,2,opt,name=ShowName,proto3,enum=ResData.ResHomePageShowDataBin_HomePageShowName" json:"ShowName,omitempty"`
	ShowParamCnt      uint32                                  `protobuf:"varint,3,opt,name=ShowParamCnt,proto3" json:"ShowParamCnt,omitempty"`
	Icon              string                                  `protobuf:"bytes,4,opt,name=Icon,proto3" json:"Icon,omitempty"`
	IsDefineShow      uint32                                  `protobuf:"varint,5,opt,name=IsDefineShow,proto3" json:"IsDefineShow,omitempty"`
	IsSpecialShow     uint32                                  `protobuf:"varint,6,opt,name=IsSpecialShow,proto3" json:"IsSpecialShow,omitempty"`
	ShowSort          uint32                                  `protobuf:"varint,7,opt,name=ShowSort,proto3" json:"ShowSort,omitempty"`
	ChooseWeight      uint32                                  `protobuf:"varint,8,opt,name=ChooseWeight,proto3" json:"ChooseWeight,omitempty"`
	Jump              string                                  `protobuf:"bytes,9,opt,name=Jump,proto3" json:"Jump,omitempty"`
	SelectedBigIcon   string                                  `protobuf:"bytes,10,opt,name=SelectedBigIcon,proto3" json:"SelectedBigIcon,omitempty"`
	UnSelectedBigIcon string                                  `protobuf:"bytes,11,opt,name=UnSelectedBigIcon,proto3" json:"UnSelectedBigIcon,omitempty"`
}

func (x *ResHomePageShowDataBin) Reset() {
	*x = ResHomePageShowDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[342]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResHomePageShowDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResHomePageShowDataBin) ProtoMessage() {}

func (x *ResHomePageShowDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[342]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResHomePageShowDataBin.ProtoReflect.Descriptor instead.
func (*ResHomePageShowDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{342}
}

func (x *ResHomePageShowDataBin) GetShowID() uint32 {
	if x != nil {
		return x.ShowID
	}
	return 0
}

func (x *ResHomePageShowDataBin) GetShowName() ResHomePageShowDataBin_HomePageShowName {
	if x != nil {
		return x.ShowName
	}
	return ResHomePageShowDataBin_HomePageShowName_NONE
}

func (x *ResHomePageShowDataBin) GetShowParamCnt() uint32 {
	if x != nil {
		return x.ShowParamCnt
	}
	return 0
}

func (x *ResHomePageShowDataBin) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *ResHomePageShowDataBin) GetIsDefineShow() uint32 {
	if x != nil {
		return x.IsDefineShow
	}
	return 0
}

func (x *ResHomePageShowDataBin) GetIsSpecialShow() uint32 {
	if x != nil {
		return x.IsSpecialShow
	}
	return 0
}

func (x *ResHomePageShowDataBin) GetShowSort() uint32 {
	if x != nil {
		return x.ShowSort
	}
	return 0
}

func (x *ResHomePageShowDataBin) GetChooseWeight() uint32 {
	if x != nil {
		return x.ChooseWeight
	}
	return 0
}

func (x *ResHomePageShowDataBin) GetJump() string {
	if x != nil {
		return x.Jump
	}
	return ""
}

func (x *ResHomePageShowDataBin) GetSelectedBigIcon() string {
	if x != nil {
		return x.SelectedBigIcon
	}
	return ""
}

func (x *ResHomePageShowDataBin) GetUnSelectedBigIcon() string {
	if x != nil {
		return x.UnSelectedBigIcon
	}
	return ""
}

type ResRegionRulesCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           uint32            `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name         string            `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	URL          string            `protobuf:"bytes,3,opt,name=URL,proto3" json:"URL,omitempty"`
	LanguageRule GAMELANGUAGE_TYPE `protobuf:"varint,4,opt,name=LanguageRule,proto3,enum=ResData.GAMELANGUAGE_TYPE" json:"LanguageRule,omitempty"`
}

func (x *ResRegionRulesCfg) Reset() {
	*x = ResRegionRulesCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[343]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResRegionRulesCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResRegionRulesCfg) ProtoMessage() {}

func (x *ResRegionRulesCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[343]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResRegionRulesCfg.ProtoReflect.Descriptor instead.
func (*ResRegionRulesCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{343}
}

func (x *ResRegionRulesCfg) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResRegionRulesCfg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResRegionRulesCfg) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *ResRegionRulesCfg) GetLanguageRule() GAMELANGUAGE_TYPE {
	if x != nil {
		return x.LanguageRule
	}
	return GAMELANGUAGE_TYPE_GAMELANGUAGE_TYPE_None
}

type HomePageConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HomePageShowDataBin *ResHomePageShowDataBin `protobuf:"bytes,1,opt,name=HomePageShowDataBin,proto3" json:"HomePageShowDataBin,omitempty"`
}

func (x *HomePageConf) Reset() {
	*x = HomePageConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[344]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomePageConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomePageConf) ProtoMessage() {}

func (x *HomePageConf) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[344]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomePageConf.ProtoReflect.Descriptor instead.
func (*HomePageConf) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{344}
}

func (x *HomePageConf) GetHomePageShowDataBin() *ResHomePageShowDataBin {
	if x != nil {
		return x.HomePageShowDataBin
	}
	return nil
}

type BattleBroadcastDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type             ResBattleBroadcastType `protobuf:"varint,1,opt,name=Type,proto3,enum=ResData.ResBattleBroadcastType" json:"Type,omitempty"`
	BroadcastContent string                 `protobuf:"bytes,2,opt,name=BroadcastContent,proto3" json:"BroadcastContent,omitempty"`
	AchieveParam     uint32                 `protobuf:"varint,3,opt,name=AchieveParam,proto3" json:"AchieveParam,omitempty"`
	IncrementParam   uint32                 `protobuf:"varint,4,opt,name=IncrementParam,proto3" json:"IncrementParam,omitempty"`
	UpperLimit       uint32                 `protobuf:"varint,5,opt,name=UpperLimit,proto3" json:"UpperLimit,omitempty"`
	Weights          uint32                 `protobuf:"varint,6,opt,name=Weights,proto3" json:"Weights,omitempty"`
}

func (x *BattleBroadcastDataBin) Reset() {
	*x = BattleBroadcastDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[345]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleBroadcastDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleBroadcastDataBin) ProtoMessage() {}

func (x *BattleBroadcastDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[345]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleBroadcastDataBin.ProtoReflect.Descriptor instead.
func (*BattleBroadcastDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{345}
}

func (x *BattleBroadcastDataBin) GetType() ResBattleBroadcastType {
	if x != nil {
		return x.Type
	}
	return ResBattleBroadcastType_ResBattleBroadcastType_None
}

func (x *BattleBroadcastDataBin) GetBroadcastContent() string {
	if x != nil {
		return x.BroadcastContent
	}
	return ""
}

func (x *BattleBroadcastDataBin) GetAchieveParam() uint32 {
	if x != nil {
		return x.AchieveParam
	}
	return 0
}

func (x *BattleBroadcastDataBin) GetIncrementParam() uint32 {
	if x != nil {
		return x.IncrementParam
	}
	return 0
}

func (x *BattleBroadcastDataBin) GetUpperLimit() uint32 {
	if x != nil {
		return x.UpperLimit
	}
	return 0
}

func (x *BattleBroadcastDataBin) GetWeights() uint32 {
	if x != nil {
		return x.Weights
	}
	return 0
}

// 新手战战斗回合表
type ResRecruitBattleRoundExtCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StepID           uint32 `protobuf:"varint,1,opt,name=StepID,proto3" json:"StepID,omitempty"`
	RoundNum         uint32 `protobuf:"varint,2,opt,name=RoundNum,proto3" json:"RoundNum,omitempty"`
	PrepareTime      int32  `protobuf:"varint,3,opt,name=PrepareTime,proto3" json:"PrepareTime,omitempty"`
	ExtraDamage      uint32 `protobuf:"varint,4,opt,name=ExtraDamage,proto3" json:"ExtraDamage,omitempty"`
	DamageUpperLimit uint32 `protobuf:"varint,5,opt,name=DamageUpperLimit,proto3" json:"DamageUpperLimit,omitempty"`
}

func (x *ResRecruitBattleRoundExtCfg) Reset() {
	*x = ResRecruitBattleRoundExtCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[346]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResRecruitBattleRoundExtCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResRecruitBattleRoundExtCfg) ProtoMessage() {}

func (x *ResRecruitBattleRoundExtCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[346]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResRecruitBattleRoundExtCfg.ProtoReflect.Descriptor instead.
func (*ResRecruitBattleRoundExtCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{346}
}

func (x *ResRecruitBattleRoundExtCfg) GetStepID() uint32 {
	if x != nil {
		return x.StepID
	}
	return 0
}

func (x *ResRecruitBattleRoundExtCfg) GetRoundNum() uint32 {
	if x != nil {
		return x.RoundNum
	}
	return 0
}

func (x *ResRecruitBattleRoundExtCfg) GetPrepareTime() int32 {
	if x != nil {
		return x.PrepareTime
	}
	return 0
}

func (x *ResRecruitBattleRoundExtCfg) GetExtraDamage() uint32 {
	if x != nil {
		return x.ExtraDamage
	}
	return 0
}

func (x *ResRecruitBattleRoundExtCfg) GetDamageUpperLimit() uint32 {
	if x != nil {
		return x.DamageUpperLimit
	}
	return 0
}

type ResDT_LineupRecommend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DescPopTLogID             uint32 `protobuf:"varint,1,opt,name=DescPopTLogID,proto3" json:"DescPopTLogID,omitempty"`
	PopTLogID                 uint32 `protobuf:"varint,2,opt,name=PopTLogID,proto3" json:"PopTLogID,omitempty"`
	DontPopMinRankScore       uint32 `protobuf:"varint,3,opt,name=DontPopMinRankScore,proto3" json:"DontPopMinRankScore,omitempty"`
	UnlockPresentMinRankScore uint32 `protobuf:"varint,4,opt,name=UnlockPresentMinRankScore,proto3" json:"UnlockPresentMinRankScore,omitempty"`
	SinkRecruitMinRankScore   uint32 `protobuf:"varint,5,opt,name=SinkRecruitMinRankScore,proto3" json:"SinkRecruitMinRankScore,omitempty"`
	DefaultID                 uint32 `protobuf:"varint,6,opt,name=DefaultID,proto3" json:"DefaultID,omitempty"`
	PreviewImgPath            string `protobuf:"bytes,7,opt,name=PreviewImgPath,proto3" json:"PreviewImgPath,omitempty"`
	PopMaxShowTime            uint32 `protobuf:"varint,8,opt,name=PopMaxShowTime,proto3" json:"PopMaxShowTime,omitempty"`
}

func (x *ResDT_LineupRecommend) Reset() {
	*x = ResDT_LineupRecommend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[347]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_LineupRecommend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_LineupRecommend) ProtoMessage() {}

func (x *ResDT_LineupRecommend) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[347]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_LineupRecommend.ProtoReflect.Descriptor instead.
func (*ResDT_LineupRecommend) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{347}
}

func (x *ResDT_LineupRecommend) GetDescPopTLogID() uint32 {
	if x != nil {
		return x.DescPopTLogID
	}
	return 0
}

func (x *ResDT_LineupRecommend) GetPopTLogID() uint32 {
	if x != nil {
		return x.PopTLogID
	}
	return 0
}

func (x *ResDT_LineupRecommend) GetDontPopMinRankScore() uint32 {
	if x != nil {
		return x.DontPopMinRankScore
	}
	return 0
}

func (x *ResDT_LineupRecommend) GetUnlockPresentMinRankScore() uint32 {
	if x != nil {
		return x.UnlockPresentMinRankScore
	}
	return 0
}

func (x *ResDT_LineupRecommend) GetSinkRecruitMinRankScore() uint32 {
	if x != nil {
		return x.SinkRecruitMinRankScore
	}
	return 0
}

func (x *ResDT_LineupRecommend) GetDefaultID() uint32 {
	if x != nil {
		return x.DefaultID
	}
	return 0
}

func (x *ResDT_LineupRecommend) GetPreviewImgPath() string {
	if x != nil {
		return x.PreviewImgPath
	}
	return ""
}

func (x *ResDT_LineupRecommend) GetPopMaxShowTime() uint32 {
	if x != nil {
		return x.PopMaxShowTime
	}
	return 0
}

// 新手战常量表
type ResRecruitConstDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleFinScore     uint32                 `protobuf:"varint,1,opt,name=BattleFinScore,proto3" json:"BattleFinScore,omitempty"`
	NewPlayerInitScore uint32                 `protobuf:"varint,2,opt,name=NewPlayerInitScore,proto3" json:"NewPlayerInitScore,omitempty"`
	OldPlayerInitScore uint32                 `protobuf:"varint,3,opt,name=OldPlayerInitScore,proto3" json:"OldPlayerInitScore,omitempty"`
	LineupRecommend    *ResDT_LineupRecommend `protobuf:"bytes,4,opt,name=LineupRecommend,proto3" json:"LineupRecommend,omitempty"`
}

func (x *ResRecruitConstDataBin) Reset() {
	*x = ResRecruitConstDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[348]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResRecruitConstDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResRecruitConstDataBin) ProtoMessage() {}

func (x *ResRecruitConstDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[348]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResRecruitConstDataBin.ProtoReflect.Descriptor instead.
func (*ResRecruitConstDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{348}
}

func (x *ResRecruitConstDataBin) GetBattleFinScore() uint32 {
	if x != nil {
		return x.BattleFinScore
	}
	return 0
}

func (x *ResRecruitConstDataBin) GetNewPlayerInitScore() uint32 {
	if x != nil {
		return x.NewPlayerInitScore
	}
	return 0
}

func (x *ResRecruitConstDataBin) GetOldPlayerInitScore() uint32 {
	if x != nil {
		return x.OldPlayerInitScore
	}
	return 0
}

func (x *ResRecruitConstDataBin) GetLineupRecommend() *ResDT_LineupRecommend {
	if x != nil {
		return x.LineupRecommend
	}
	return nil
}

type RecruitRankAward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScoreAdd uint32 `protobuf:"varint,1,opt,name=ScoreAdd,proto3" json:"ScoreAdd,omitempty"`
}

func (x *RecruitRankAward) Reset() {
	*x = RecruitRankAward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[349]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecruitRankAward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecruitRankAward) ProtoMessage() {}

func (x *RecruitRankAward) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[349]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecruitRankAward.ProtoReflect.Descriptor instead.
func (*RecruitRankAward) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{349}
}

func (x *RecruitRankAward) GetScoreAdd() uint32 {
	if x != nil {
		return x.ScoreAdd
	}
	return 0
}

type ResDT_RecruitStepUpPopTipsItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TipsStr  string `protobuf:"bytes,1,opt,name=TipsStr,proto3" json:"TipsStr,omitempty"`
	IconPath string `protobuf:"bytes,2,opt,name=IconPath,proto3" json:"IconPath,omitempty"`
}

func (x *ResDT_RecruitStepUpPopTipsItem) Reset() {
	*x = ResDT_RecruitStepUpPopTipsItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[350]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_RecruitStepUpPopTipsItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_RecruitStepUpPopTipsItem) ProtoMessage() {}

func (x *ResDT_RecruitStepUpPopTipsItem) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[350]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_RecruitStepUpPopTipsItem.ProtoReflect.Descriptor instead.
func (*ResDT_RecruitStepUpPopTipsItem) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{350}
}

func (x *ResDT_RecruitStepUpPopTipsItem) GetTipsStr() string {
	if x != nil {
		return x.TipsStr
	}
	return ""
}

func (x *ResDT_RecruitStepUpPopTipsItem) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

type ResDT_RecruitStepUpPresent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PopTipsItem           []*ResDT_RecruitStepUpPopTipsItem `protobuf:"bytes,1,rep,name=PopTipsItem,proto3" json:"PopTipsItem,omitempty"`
	PopRuleID             []uint32                          `protobuf:"varint,2,rep,packed,name=PopRuleID,proto3" json:"PopRuleID,omitempty"`
	NeedPlayerAbilityType []uint32                          `protobuf:"varint,3,rep,packed,name=NeedPlayerAbilityType,proto3" json:"NeedPlayerAbilityType,omitempty"`
}

func (x *ResDT_RecruitStepUpPresent) Reset() {
	*x = ResDT_RecruitStepUpPresent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[351]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_RecruitStepUpPresent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_RecruitStepUpPresent) ProtoMessage() {}

func (x *ResDT_RecruitStepUpPresent) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[351]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_RecruitStepUpPresent.ProtoReflect.Descriptor instead.
func (*ResDT_RecruitStepUpPresent) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{351}
}

func (x *ResDT_RecruitStepUpPresent) GetPopTipsItem() []*ResDT_RecruitStepUpPopTipsItem {
	if x != nil {
		return x.PopTipsItem
	}
	return nil
}

func (x *ResDT_RecruitStepUpPresent) GetPopRuleID() []uint32 {
	if x != nil {
		return x.PopRuleID
	}
	return nil
}

func (x *ResDT_RecruitStepUpPresent) GetNeedPlayerAbilityType() []uint32 {
	if x != nil {
		return x.NeedPlayerAbilityType
	}
	return nil
}

// 新手战阶段表
type ResRecruitStepDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StepID          uint32                      `protobuf:"varint,1,opt,name=StepID,proto3" json:"StepID,omitempty"`
	MinScore        uint32                      `protobuf:"varint,2,opt,name=MinScore,proto3" json:"MinScore,omitempty"`
	MaxScore        uint32                      `protobuf:"varint,3,opt,name=MaxScore,proto3" json:"MaxScore,omitempty"`
	InitHP          uint32                      `protobuf:"varint,4,opt,name=InitHP,proto3" json:"InitHP,omitempty"`
	NewLvlUpAwardID uint32                      `protobuf:"varint,5,opt,name=NewLvlUpAwardID,proto3" json:"NewLvlUpAwardID,omitempty"`
	OldLvlUpAwardID uint32                      `protobuf:"varint,6,opt,name=OldLvlUpAwardID,proto3" json:"OldLvlUpAwardID,omitempty"`
	TargetTaskDesc  string                      `protobuf:"bytes,7,opt,name=TargetTaskDesc,proto3" json:"TargetTaskDesc,omitempty"`
	RankAward       []*RecruitRankAward         `protobuf:"bytes,8,rep,name=RankAward,proto3" json:"RankAward,omitempty"`
	FreeGroupID     uint32                      `protobuf:"varint,9,opt,name=FreeGroupID,proto3" json:"FreeGroupID,omitempty"`
	LordGroupID     uint32                      `protobuf:"varint,10,opt,name=LordGroupID,proto3" json:"LordGroupID,omitempty"`
	GameMemberCnt   uint32                      `protobuf:"varint,11,opt,name=GameMemberCnt,proto3" json:"GameMemberCnt,omitempty"`
	AIShowGroup     uint32                      `protobuf:"varint,12,opt,name=AIShowGroup,proto3" json:"AIShowGroup,omitempty"`
	StepUpPresent   *ResDT_RecruitStepUpPresent `protobuf:"bytes,13,opt,name=StepUpPresent,proto3" json:"StepUpPresent,omitempty"`
	WarmStrategyID  uint32                      `protobuf:"varint,14,opt,name=WarmStrategyID,proto3" json:"WarmStrategyID,omitempty"`
}

func (x *ResRecruitStepDataBin) Reset() {
	*x = ResRecruitStepDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[352]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResRecruitStepDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResRecruitStepDataBin) ProtoMessage() {}

func (x *ResRecruitStepDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[352]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResRecruitStepDataBin.ProtoReflect.Descriptor instead.
func (*ResRecruitStepDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{352}
}

func (x *ResRecruitStepDataBin) GetStepID() uint32 {
	if x != nil {
		return x.StepID
	}
	return 0
}

func (x *ResRecruitStepDataBin) GetMinScore() uint32 {
	if x != nil {
		return x.MinScore
	}
	return 0
}

func (x *ResRecruitStepDataBin) GetMaxScore() uint32 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *ResRecruitStepDataBin) GetInitHP() uint32 {
	if x != nil {
		return x.InitHP
	}
	return 0
}

func (x *ResRecruitStepDataBin) GetNewLvlUpAwardID() uint32 {
	if x != nil {
		return x.NewLvlUpAwardID
	}
	return 0
}

func (x *ResRecruitStepDataBin) GetOldLvlUpAwardID() uint32 {
	if x != nil {
		return x.OldLvlUpAwardID
	}
	return 0
}

func (x *ResRecruitStepDataBin) GetTargetTaskDesc() string {
	if x != nil {
		return x.TargetTaskDesc
	}
	return ""
}

func (x *ResRecruitStepDataBin) GetRankAward() []*RecruitRankAward {
	if x != nil {
		return x.RankAward
	}
	return nil
}

func (x *ResRecruitStepDataBin) GetFreeGroupID() uint32 {
	if x != nil {
		return x.FreeGroupID
	}
	return 0
}

func (x *ResRecruitStepDataBin) GetLordGroupID() uint32 {
	if x != nil {
		return x.LordGroupID
	}
	return 0
}

func (x *ResRecruitStepDataBin) GetGameMemberCnt() uint32 {
	if x != nil {
		return x.GameMemberCnt
	}
	return 0
}

func (x *ResRecruitStepDataBin) GetAIShowGroup() uint32 {
	if x != nil {
		return x.AIShowGroup
	}
	return 0
}

func (x *ResRecruitStepDataBin) GetStepUpPresent() *ResDT_RecruitStepUpPresent {
	if x != nil {
		return x.StepUpPresent
	}
	return nil
}

func (x *ResRecruitStepDataBin) GetWarmStrategyID() uint32 {
	if x != nil {
		return x.WarmStrategyID
	}
	return 0
}

type ResRecruitBanHeroCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StepID     uint32   `protobuf:"varint,1,opt,name=StepID,proto3" json:"StepID,omitempty"`
	LordIDs    []uint32 `protobuf:"varint,2,rep,packed,name=LordIDs,proto3" json:"LordIDs,omitempty"`
	HeroCfgIDs []uint32 `protobuf:"varint,3,rep,packed,name=HeroCfgIDs,proto3" json:"HeroCfgIDs,omitempty"`
}

func (x *ResRecruitBanHeroCfg) Reset() {
	*x = ResRecruitBanHeroCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[353]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResRecruitBanHeroCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResRecruitBanHeroCfg) ProtoMessage() {}

func (x *ResRecruitBanHeroCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[353]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResRecruitBanHeroCfg.ProtoReflect.Descriptor instead.
func (*ResRecruitBanHeroCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{353}
}

func (x *ResRecruitBanHeroCfg) GetStepID() uint32 {
	if x != nil {
		return x.StepID
	}
	return 0
}

func (x *ResRecruitBanHeroCfg) GetLordIDs() []uint32 {
	if x != nil {
		return x.LordIDs
	}
	return nil
}

func (x *ResRecruitBanHeroCfg) GetHeroCfgIDs() []uint32 {
	if x != nil {
		return x.HeroCfgIDs
	}
	return nil
}

type ResRecruitChessAuctionRound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StepId   uint32                 `protobuf:"varint,1,opt,name=StepId,proto3" json:"StepId,omitempty"`
	DropInfo *ResDT_AuctionDropInfo `protobuf:"bytes,2,opt,name=DropInfo,proto3" json:"DropInfo,omitempty"`
}

func (x *ResRecruitChessAuctionRound) Reset() {
	*x = ResRecruitChessAuctionRound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[354]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResRecruitChessAuctionRound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResRecruitChessAuctionRound) ProtoMessage() {}

func (x *ResRecruitChessAuctionRound) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[354]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResRecruitChessAuctionRound.ProtoReflect.Descriptor instead.
func (*ResRecruitChessAuctionRound) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{354}
}

func (x *ResRecruitChessAuctionRound) GetStepId() uint32 {
	if x != nil {
		return x.StepId
	}
	return 0
}

func (x *ResRecruitChessAuctionRound) GetDropInfo() *ResDT_AuctionDropInfo {
	if x != nil {
		return x.DropInfo
	}
	return nil
}

//条件
type RecruitTaskGuideCondInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           uint32   `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Param          []uint32 `protobuf:"varint,2,rep,packed,name=Param,proto3" json:"Param,omitempty"`
	GoalCnt        uint32   `protobuf:"varint,3,opt,name=GoalCnt,proto3" json:"GoalCnt,omitempty"`
	FailRemoveTask bool     `protobuf:"varint,4,opt,name=FailRemoveTask,proto3" json:"FailRemoveTask,omitempty"`
}

func (x *RecruitTaskGuideCondInfo) Reset() {
	*x = RecruitTaskGuideCondInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[355]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecruitTaskGuideCondInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecruitTaskGuideCondInfo) ProtoMessage() {}

func (x *RecruitTaskGuideCondInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[355]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecruitTaskGuideCondInfo.ProtoReflect.Descriptor instead.
func (*RecruitTaskGuideCondInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{355}
}

func (x *RecruitTaskGuideCondInfo) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RecruitTaskGuideCondInfo) GetParam() []uint32 {
	if x != nil {
		return x.Param
	}
	return nil
}

func (x *RecruitTaskGuideCondInfo) GetGoalCnt() uint32 {
	if x != nil {
		return x.GoalCnt
	}
	return 0
}

func (x *RecruitTaskGuideCondInfo) GetFailRemoveTask() bool {
	if x != nil {
		return x.FailRemoveTask
	}
	return false
}

type ResRecruitTaskDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID              uint32                      `protobuf:"varint,1,opt,name=TaskID,proto3" json:"TaskID,omitempty"`
	TaskName            string                      `protobuf:"bytes,2,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
	TaskDesc            string                      `protobuf:"bytes,3,opt,name=TaskDesc,proto3" json:"TaskDesc,omitempty"`
	TaskUnLockCond      []*RecruitTaskGuideCondInfo `protobuf:"bytes,4,rep,name=TaskUnLockCond,proto3" json:"TaskUnLockCond,omitempty"`
	TaskShowCond        []*RecruitTaskGuideCondInfo `protobuf:"bytes,5,rep,name=TaskShowCond,proto3" json:"TaskShowCond,omitempty"`
	TaskFinishCond      []*RecruitTaskGuideCondInfo `protobuf:"bytes,6,rep,name=TaskFinishCond,proto3" json:"TaskFinishCond,omitempty"`
	TaskCloseCond       *RecruitTaskGuideCondInfo   `protobuf:"bytes,7,opt,name=TaskCloseCond,proto3" json:"TaskCloseCond,omitempty"`
	RuleDescID          uint32                      `protobuf:"varint,8,opt,name=RuleDescID,proto3" json:"RuleDescID,omitempty"`
	AssociatedUI        string                      `protobuf:"bytes,9,opt,name=AssociatedUI,proto3" json:"AssociatedUI,omitempty"`
	AssociatedPanel     string                      `protobuf:"bytes,10,opt,name=AssociatedPanel,proto3" json:"AssociatedPanel,omitempty"`
	AssociatedBluePrint string                      `protobuf:"bytes,11,opt,name=AssociatedBluePrint,proto3" json:"AssociatedBluePrint,omitempty"`
	AwardDropID         uint32                      `protobuf:"varint,12,opt,name=AwardDropID,proto3" json:"AwardDropID,omitempty"`
	TaskType            CLIENT_TASKTYPE             `protobuf:"varint,13,opt,name=TaskType,proto3,enum=ResData.CLIENT_TASKTYPE" json:"TaskType,omitempty"`
	TaskTypeParam       uint32                      `protobuf:"varint,14,opt,name=TaskTypeParam,proto3" json:"TaskTypeParam,omitempty"`
	TaskUnlockRuleID    uint32                      `protobuf:"varint,15,opt,name=TaskUnlockRuleID,proto3" json:"TaskUnlockRuleID,omitempty"`
}

func (x *ResRecruitTaskDataBin) Reset() {
	*x = ResRecruitTaskDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[356]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResRecruitTaskDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResRecruitTaskDataBin) ProtoMessage() {}

func (x *ResRecruitTaskDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[356]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResRecruitTaskDataBin.ProtoReflect.Descriptor instead.
func (*ResRecruitTaskDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{356}
}

func (x *ResRecruitTaskDataBin) GetTaskID() uint32 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *ResRecruitTaskDataBin) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *ResRecruitTaskDataBin) GetTaskDesc() string {
	if x != nil {
		return x.TaskDesc
	}
	return ""
}

func (x *ResRecruitTaskDataBin) GetTaskUnLockCond() []*RecruitTaskGuideCondInfo {
	if x != nil {
		return x.TaskUnLockCond
	}
	return nil
}

func (x *ResRecruitTaskDataBin) GetTaskShowCond() []*RecruitTaskGuideCondInfo {
	if x != nil {
		return x.TaskShowCond
	}
	return nil
}

func (x *ResRecruitTaskDataBin) GetTaskFinishCond() []*RecruitTaskGuideCondInfo {
	if x != nil {
		return x.TaskFinishCond
	}
	return nil
}

func (x *ResRecruitTaskDataBin) GetTaskCloseCond() *RecruitTaskGuideCondInfo {
	if x != nil {
		return x.TaskCloseCond
	}
	return nil
}

func (x *ResRecruitTaskDataBin) GetRuleDescID() uint32 {
	if x != nil {
		return x.RuleDescID
	}
	return 0
}

func (x *ResRecruitTaskDataBin) GetAssociatedUI() string {
	if x != nil {
		return x.AssociatedUI
	}
	return ""
}

func (x *ResRecruitTaskDataBin) GetAssociatedPanel() string {
	if x != nil {
		return x.AssociatedPanel
	}
	return ""
}

func (x *ResRecruitTaskDataBin) GetAssociatedBluePrint() string {
	if x != nil {
		return x.AssociatedBluePrint
	}
	return ""
}

func (x *ResRecruitTaskDataBin) GetAwardDropID() uint32 {
	if x != nil {
		return x.AwardDropID
	}
	return 0
}

func (x *ResRecruitTaskDataBin) GetTaskType() CLIENT_TASKTYPE {
	if x != nil {
		return x.TaskType
	}
	return CLIENT_TASKTYPE_RECRUIT_TASKTYPE_INVALID
}

func (x *ResRecruitTaskDataBin) GetTaskTypeParam() uint32 {
	if x != nil {
		return x.TaskTypeParam
	}
	return 0
}

func (x *ResRecruitTaskDataBin) GetTaskUnlockRuleID() uint32 {
	if x != nil {
		return x.TaskUnlockRuleID
	}
	return 0
}

type RecruitBattleConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecruitConstDataBin *ResRecruitConstDataBin `protobuf:"bytes,1,opt,name=RecruitConstDataBin,proto3" json:"RecruitConstDataBin,omitempty"`
	RecruitStepDataBin  *ResRecruitStepDataBin  `protobuf:"bytes,2,opt,name=RecruitStepDataBin,proto3" json:"RecruitStepDataBin,omitempty"`
	RecruitTaskDataBin  *ResRecruitTaskDataBin  `protobuf:"bytes,3,opt,name=RecruitTaskDataBin,proto3" json:"RecruitTaskDataBin,omitempty"`
}

func (x *RecruitBattleConf) Reset() {
	*x = RecruitBattleConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[357]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecruitBattleConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecruitBattleConf) ProtoMessage() {}

func (x *RecruitBattleConf) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[357]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecruitBattleConf.ProtoReflect.Descriptor instead.
func (*RecruitBattleConf) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{357}
}

func (x *RecruitBattleConf) GetRecruitConstDataBin() *ResRecruitConstDataBin {
	if x != nil {
		return x.RecruitConstDataBin
	}
	return nil
}

func (x *RecruitBattleConf) GetRecruitStepDataBin() *ResRecruitStepDataBin {
	if x != nil {
		return x.RecruitStepDataBin
	}
	return nil
}

func (x *RecruitBattleConf) GetRecruitTaskDataBin() *ResRecruitTaskDataBin {
	if x != nil {
		return x.RecruitTaskDataBin
	}
	return nil
}

type ResPracticeConfig_Equip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigId uint32 `protobuf:"varint,1,opt,name=ConfigId,proto3" json:"ConfigId,omitempty"`
	Count    uint32 `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`
}

func (x *ResPracticeConfig_Equip) Reset() {
	*x = ResPracticeConfig_Equip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_proto_msgTypes[358]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResPracticeConfig_Equip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResPracticeConfig_Equip) ProtoMessage() {}

func (x *ResPracticeConfig_Equip) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_proto_msgTypes[358]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResPracticeConfig_Equip.ProtoReflect.Descriptor instead.
func (*ResPracticeConfig_Equip) Descriptor() ([]byte, []int) {
	return file_os_res_data_proto_rawDescGZIP(), []int{333, 0}
}

func (x *ResPracticeConfig_Equip) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *ResPracticeConfig_Equip) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_os_res_data_proto protoreflect.FileDescriptor

var file_os_res_data_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6f, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x07, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x15, 0x62, 0x69,
	0x6e, 0x67, 0x6f, 0x67, 0x65, 0x6e, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x72, 0x65, 0x73, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x6c, 0x74, 0x67, 0x65,
	0x6e, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18,
	0x6f, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x72, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x57,
	0x68, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x66, 0x67, 0x12, 0x29, 0x0a, 0x07, 0x47,
	0x4f, 0x70, 0x65, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xea, 0xb5,
	0x18, 0x07, 0x47, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x07, 0x47,
	0x4f, 0x70, 0x65, 0x6e, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x0a,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0a, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x3a, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x22, 0x6d, 0x0a, 0x0f,
	0x52, 0x65, 0x73, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x66, 0x67, 0x12,
	0x29, 0x0a, 0x07, 0x47, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0f, 0xea, 0xb5, 0x18, 0x07, 0x47, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x44, 0xc8, 0xc1, 0x18,
	0x01, 0x52, 0x07, 0x47, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x57, 0x6f,
	0x72, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0f, 0xea, 0xb5, 0x18,
	0x0b, 0xe9, 0x80, 0xbb, 0xe8, 0xbe, 0x91, 0xe5, 0x8c, 0xba, 0x49, 0x44, 0x52, 0x07, 0x57, 0x6f,
	0x72, 0x6c, 0x64, 0x49, 0x44, 0x3a, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x22, 0x8b, 0x01, 0x0a, 0x0d,
	0x57, 0x68, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x3c, 0x0a,
	0x09, 0x57, 0x68, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x57, 0x68,
	0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x66, 0x67, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00,
	0x52, 0x09, 0x57, 0x68, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x42,
	0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x42, 0x6c, 0x61, 0x63,
	0x6b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x66, 0x67, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x09,
	0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xeb, 0x03, 0x0a, 0x12, 0x52, 0x65,
	0x73, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x66, 0x67,
	0x12, 0x37, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0b, 0xe9, 0x80, 0xbb, 0xe8,
	0xbe, 0x91, 0xe5, 0x8c, 0xba, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x0c, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x10, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe9, 0x80, 0xbb, 0xe8, 0xbe, 0x91, 0xe5,
	0x8c, 0xba, 0xe6, 0xb3, 0xa8, 0xe5, 0x86, 0x8c, 0xe4, 0xb8, 0x8a, 0xe9, 0x99, 0x90, 0x52, 0x10,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x75, 0x6d,
	0x12, 0x4a, 0x0a, 0x14, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x50, 0x65, 0x72, 0x44, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16,
	0xea, 0xb5, 0x18, 0x12, 0xe6, 0xaf, 0x8f, 0xe6, 0x97, 0xa5, 0xe6, 0xb3, 0xa8, 0xe5, 0x86, 0x8c,
	0xe4, 0xb8, 0x8a, 0xe9, 0x99, 0x90, 0x52, 0x14, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x44, 0x61, 0x79, 0x12, 0x40, 0x0a, 0x0f,
	0x46, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe4, 0xbc, 0xaa, 0xe9, 0x80,
	0xa0, 0xe6, 0xb3, 0xa8, 0xe5, 0x86, 0x8c, 0xe4, 0xba, 0xba, 0xe6, 0x95, 0xb0, 0x52, 0x0f, 0x46,
	0x61, 0x6b, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x3a,
	0x0a, 0x0c, 0x4d, 0x61, 0x78, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7,
	0xe5, 0x9c, 0xa8, 0xe7, 0xba, 0xbf, 0xe4, 0xba, 0xba, 0xe6, 0x95, 0xb0, 0x52, 0x0c, 0x4d, 0x61,
	0x78, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x41, 0x0a, 0x0e, 0x57, 0x68,
	0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe7, 0x99,
	0xbd, 0xe5, 0x90, 0x8d, 0xe5, 0x8d, 0x95, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x52, 0x0e, 0x57,
	0x68, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x36, 0x0a,
	0x0c, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe6,
	0x88, 0x98, 0xe5, 0x8c, 0xba, 0x49, 0x44, 0x52, 0x0c, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x5a,
	0x6f, 0x6e, 0x65, 0x49, 0x44, 0x3a, 0x10, 0x8a, 0x97, 0x22, 0x0c, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x49, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x54, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x66, 0x67, 0x12,
	0x3f, 0x0a, 0x0b, 0x54, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x1d, 0xea, 0xb5, 0x18, 0x15, 0xe6, 0x96, 0x87, 0xe6, 0x9c, 0xac,
	0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe9, 0xa1, 0xb9, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xc8,
	0xc1, 0x18, 0x01, 0x52, 0x0b, 0x54, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x33, 0x0a, 0x07, 0x54, 0x65, 0x78, 0x74, 0x56, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe6, 0x96, 0x87, 0xe6, 0x9c, 0xac, 0xe9, 0x85, 0x8d,
	0xe7, 0xbd, 0xae, 0xe9, 0xa1, 0xb9, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0x52, 0x07, 0x54, 0x65,
	0x78, 0x74, 0x56, 0x61, 0x6c, 0x22, 0xcc, 0x04, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x66, 0x67, 0x12, 0x41, 0x0a, 0x08, 0x47, 0x61, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x25, 0xea, 0xb5, 0x18,
	0x0c, 0xe7, 0x8e, 0xa9, 0xe6, 0xb3, 0x95, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xc8, 0xc1, 0x18,
	0x01, 0xf2, 0xb5, 0x18, 0x0d, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x52, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0d,
	0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x75, 0x62, 0x49, 0x44, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0b, 0xe7, 0x8e, 0xa9, 0xe6, 0xb3, 0x95, 0xe5,
	0xad, 0x90, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x02, 0x52, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x53, 0x75, 0x62, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x0e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x8c, 0xb9, 0xe9, 0x85, 0x8d, 0xe4, 0xba, 0xba, 0xe6, 0x95,
	0xb0, 0x52, 0x0e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x12, 0x39, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe6, 0x9c,
	0x80, 0xe5, 0xb0, 0x8f, 0xe5, 0x8c, 0xb9, 0xe9, 0x85, 0x8d, 0xe5, 0x88, 0x86, 0x52, 0x0d, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x39, 0x0a, 0x0d,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe5,
	0x8c, 0xb9, 0xe9, 0x85, 0x8d, 0xe5, 0x88, 0x86, 0x52, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x44, 0x0a, 0x0e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe8, 0xb6, 0x85, 0xe6, 0x97, 0xb6, 0xe6, 0x97, 0xb6, 0xe9, 0x97,
	0xb4, 0xef, 0xbc, 0x88, 0xe6, 0xaf, 0xab, 0xe7, 0xa7, 0x92, 0xef, 0xbc, 0x89, 0x52, 0x0e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x12, 0x46, 0x0a,
	0x12, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5,
	0x8c, 0xb9, 0xe9, 0x85, 0x8d, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xe7, 0xa1, 0xae, 0xe8, 0xae,
	0xa4, 0x52, 0x12, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x3f, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5,
	0x18, 0x15, 0xe5, 0x8c, 0xb9, 0xe9, 0x85, 0x8d, 0xe5, 0x88, 0x86, 0xe6, 0xaf, 0x8f, 0xe6, 0xae,
	0xb5, 0xe5, 0xa4, 0xa7, 0xe5, 0xb0, 0x8f, 0x52, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x41, 0x49, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x53, 0x65, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x12, 0xea, 0xb5,
	0x18, 0x0e, 0x41, 0x49, 0xe7, 0xa1, 0xae, 0xe8, 0xae, 0xa4, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0x52, 0x0c, 0x41, 0x49, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x53, 0x65, 0x63, 0x3a, 0x04,
	0x88, 0xb5, 0x18, 0x01, 0x22, 0xb8, 0x04, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x66, 0x67, 0x12, 0x41, 0x0a,
	0x08, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x25, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0x8e, 0xa9, 0xe6, 0xb3, 0x95, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0xc8, 0xc1, 0x18, 0x01, 0xf2, 0xb5, 0x18, 0x0d, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x39, 0x0a, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x75, 0x62, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0b, 0xe7, 0x8e, 0xa9,
	0xe6, 0xb3, 0x95, 0xe5, 0xad, 0x90, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x02, 0x52, 0x0d, 0x47, 0x61,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x75, 0x62, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x04, 0x52,
	0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1e, 0xea, 0xb5, 0x18, 0x06, 0xe6,
	0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xc8, 0xc1, 0x18, 0x03, 0xf2, 0xb5, 0x18, 0x0c, 0x45, 0x50, 0x76,
	0x70, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x12,
	0x24, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e,
	0xea, 0xb5, 0x18, 0x06, 0xe9, 0x98, 0xb6, 0xe6, 0x95, 0xb0, 0xc8, 0xc1, 0x18, 0x04, 0x52, 0x05,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x40, 0x0a, 0x07, 0x4d, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x6b,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x9c, 0x80, 0xe5,
	0xb0, 0x8f, 0xe5, 0x8c, 0xb9, 0xe9, 0x85, 0x8d, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xf2, 0xb5,
	0x18, 0x0c, 0x45, 0x50, 0x76, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07,
	0x4d, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x32, 0x0a, 0x08, 0x4d, 0x69, 0x6e, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6,
	0x9c, 0x80, 0xe5, 0xb0, 0x8f, 0xe5, 0x8c, 0xb9, 0xe9, 0x85, 0x8d, 0xe9, 0x98, 0xb6, 0xe6, 0x95,
	0xb0, 0x52, 0x08, 0x4d, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x40, 0x0a, 0x07, 0x4d,
	0x61, 0x78, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0xea, 0xb5,
	0x18, 0x12, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe5, 0x8c, 0xb9, 0xe9, 0x85, 0x8d, 0xe6, 0xae,
	0xb5, 0xe4, 0xbd, 0x8d, 0xf2, 0xb5, 0x18, 0x0c, 0x45, 0x50, 0x76, 0x70, 0x52, 0x61, 0x6e, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x4d, 0x61, 0x78, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x32, 0x0a,
	0x08, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe5, 0x8c, 0xb9, 0xe9, 0x85,
	0x8d, 0xe9, 0x98, 0xb6, 0xe6, 0x95, 0xb0, 0x52, 0x08, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x3a, 0x5c, 0x92, 0x97, 0x22, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x92, 0x97, 0x22, 0x0b, 0x52,
	0x61, 0x6e, 0x6b, 0x2c, 0x20, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x92, 0x97, 0x22, 0x15, 0x47, 0x61,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2c, 0x20, 0x52, 0x61, 0x6e, 0x6b, 0x2c, 0x20, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x92, 0x97, 0x22, 0x24, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2c,
	0x20, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x75, 0x62, 0x49, 0x44, 0x2c, 0x20,
	0x52, 0x61, 0x6e, 0x6b, 0x2c, 0x20, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0xf0, 0x97, 0x22, 0x01, 0x22,
	0x54, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x49, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x9d, 0x83, 0xe9, 0x87, 0x8d, 0x52, 0x06, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xc7, 0x02, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x0f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x61, 0x64,
	0x69, 0x75, 0x73, 0x42, 0x61, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea,
	0xb5, 0x18, 0x0c, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe5, 0x8d, 0x8a, 0xe5, 0xbe, 0x84, 0x52,
	0x0f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x42, 0x61, 0x73, 0x65,
	0x12, 0x51, 0x0a, 0x13, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x49,
	0x6e, 0x63, 0x72, 0x42, 0x61, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0xea,
	0xb5, 0x18, 0x1b, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe5, 0x8c, 0xb9, 0xe9, 0x85, 0x8d, 0xe5,
	0x8d, 0x8a, 0xe5, 0xbe, 0x84, 0xe6, 0x94, 0xbe, 0xe5, 0xae, 0xbd, 0xe5, 0x80, 0xbc, 0x52, 0x13,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x49, 0x6e, 0x63, 0x72, 0x42,
	0x61, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x61, 0x64, 0x69,
	0x75, 0x73, 0x49, 0x6e, 0x63, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0xea, 0xb5,
	0x18, 0x1b, 0xe5, 0x8c, 0xb9, 0xe9, 0x85, 0x8d, 0xe5, 0x8d, 0x8a, 0xe5, 0xbe, 0x84, 0xe6, 0x94,
	0xbe, 0xe5, 0xae, 0xbd, 0xe5, 0x8a, 0xa0, 0xe9, 0x80, 0x9f, 0xe5, 0x80, 0xbc, 0x52, 0x0f, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x49, 0x6e, 0x63, 0x72, 0x12, 0x4f,
	0x0a, 0x12, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x49, 0x6e, 0x63,
	0x72, 0x4d, 0x61, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0xea, 0xb5, 0x18, 0x1b,
	0xe5, 0x8c, 0xb9, 0xe9, 0x85, 0x8d, 0xe5, 0x8d, 0x8a, 0xe5, 0xbe, 0x84, 0xe6, 0x9c, 0x80, 0xe5,
	0xa4, 0xa7, 0xe6, 0x94, 0xbe, 0xe5, 0xae, 0xbd, 0xe5, 0x80, 0xbc, 0x52, 0x12, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x49, 0x6e, 0x63, 0x72, 0x4d, 0x61, 0x78, 0x22,
	0xe4, 0x06, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x43, 0x66, 0x67, 0x12, 0x41, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x25, 0xea, 0xb5, 0x18, 0x0c, 0xe7,
	0x8e, 0xa9, 0xe6, 0xb3, 0x95, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xc8, 0xc1, 0x18, 0x01, 0xf2,
	0xb5, 0x18, 0x0d, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x52, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x47, 0x61,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x75, 0x62, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0b, 0xe7, 0x8e, 0xa9, 0xe6, 0xb3, 0x95, 0xe5, 0xad, 0x90,
	0x49, 0x44, 0xc8, 0xc1, 0x18, 0x02, 0x52, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x53, 0x75, 0x62, 0x49, 0x44, 0x12, 0x4a, 0x0a, 0x12, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x1a, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x8c, 0xb9, 0xe9, 0x85, 0x8d, 0xe5, 0x88, 0x86,
	0xe6, 0xae, 0xb5, 0xe4, 0xb8, 0x8b, 0xe9, 0x99, 0x90, 0xc8, 0xc1, 0x18, 0x03, 0x52, 0x12, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x69,
	0x6e, 0x12, 0x46, 0x0a, 0x12, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea,
	0xb5, 0x18, 0x12, 0xe5, 0x8c, 0xb9, 0xe9, 0x85, 0x8d, 0xe5, 0x88, 0x86, 0xe6, 0xae, 0xb5, 0xe4,
	0xb8, 0x8a, 0xe9, 0x99, 0x90, 0x52, 0x12, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x3a, 0x0a, 0x0c, 0x4d, 0x69, 0x6e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x8f, 0xe7, 0x9c, 0x9f, 0xe4, 0xba,
	0xba, 0xe4, 0xba, 0xba, 0xe6, 0x95, 0xb0, 0x52, 0x0c, 0x4d, 0x69, 0x6e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x3a, 0x0a, 0x0c, 0x4d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18,
	0x12, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe7, 0x9c, 0x9f, 0xe4, 0xba, 0xba, 0xe4, 0xba, 0xba,
	0xe6, 0x95, 0xb0, 0x52, 0x0c, 0x4d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x12, 0x4d, 0x0a, 0x09, 0x45, 0x6c, 0x6f, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52,
	0x65, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52,
	0x61, 0x64, 0x69, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0x65,
	0x6c, 0x6f, 0xe5, 0x88, 0x86, 0x52, 0x09, 0x45, 0x6c, 0x6f, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73,
	0x12, 0x52, 0x0a, 0x0a, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52,
	0x65, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52,
	0x61, 0x64, 0x69, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe6,
	0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xe5, 0x88, 0x86, 0x52, 0x0a, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x61,
	0x64, 0x69, 0x75, 0x73, 0x12, 0x5b, 0x0a, 0x15, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x61, 0x64,
	0x69, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x65, 0x71, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x25, 0xea, 0xb5, 0x18, 0x21, 0xe5, 0x8c, 0xb9, 0xe9, 0x85, 0x8d, 0xe5,
	0x8d, 0x8a, 0xe5, 0xbe, 0x84, 0xe6, 0x94, 0xbe, 0xe5, 0xae, 0xbd, 0xe9, 0xa2, 0x91, 0xe7, 0x8e,
	0x87, 0xef, 0xbc, 0x88, 0xe7, 0xa7, 0x92, 0xef, 0xbc, 0x89, 0x52, 0x15, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x65,
	0x71, 0x12, 0x44, 0x0a, 0x0b, 0x41, 0x49, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x22, 0xea, 0xb5, 0x18, 0x1e, 0xe8, 0xa1, 0xa5, 0xe4,
	0xbd, 0x8d, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc, 0xef, 0xbc,
	0x88, 0xe6, 0xaf, 0xab, 0xe7, 0xa7, 0x92, 0xef, 0xbc, 0x89, 0x52, 0x0b, 0x41, 0x49, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x12, 0x77, 0x0a, 0x0e, 0x41, 0x49, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x41, 0x49, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x2e, 0xea, 0xb5, 0x18, 0x08, 0x41, 0x49, 0xe5, 0x88, 0x86, 0xe5, 0xb8, 0x83, 0xda, 0xb5,
	0x18, 0x1e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58,
	0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x49, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x55, 0x4d,
	0x52, 0x0e, 0x41, 0x49, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x3a, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x22, 0x9f, 0x01, 0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x6f, 0x6e, 0x66, 0x12, 0x4e, 0x0a, 0x10, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x43, 0x66, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x43, 0x66, 0x67, 0x42, 0x04, 0xd2, 0xc1,
	0x18, 0x00, 0x52, 0x10, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x43, 0x66, 0x67, 0x12, 0x42, 0x0a, 0x0c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x6f,
	0x6c, 0x43, 0x66, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x52, 0x65, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x6f,
	0x6c, 0x43, 0x66, 0x67, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x0c, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x66, 0x67, 0x22, 0xaf, 0x08, 0x0a, 0x0c, 0x52, 0x65, 0x73,
	0x41, 0x49, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x66, 0x67, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0xc8, 0xc1, 0x18,
	0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x09, 0xea, 0xb5, 0x18, 0x05, 0x41, 0x49, 0xe7, 0xbb, 0x84, 0x52,
	0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x22, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0xa4, 0xb4, 0xe5,
	0x83, 0x8f, 0x52, 0x06, 0x48, 0x65, 0x61, 0x64, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x0b, 0x48, 0x65,
	0x61, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe5, 0xa4, 0xb4, 0xe5, 0x83, 0x8f, 0xe6, 0xa1, 0x86, 0x52, 0x0b,
	0x48, 0x65, 0x61, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x43, 0x0a, 0x0f, 0x49,
	0x73, 0x55, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6,
	0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7, 0x83, 0xad, 0xe5, 0x8a, 0x9b, 0xe5, 0x80, 0xbc, 0x52,
	0x0f, 0x49, 0x73, 0x55, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x79,
	0x12, 0x4b, 0x0a, 0x13, 0x4d, 0x69, 0x6e, 0x4c, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x63, 0x69, 0x65, 0x6e, 0x79, 0x4c, 0x76, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea,
	0xb5, 0x18, 0x15, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x8f, 0xe7, 0x83, 0xad, 0xe5, 0x8a, 0x9b, 0xe5,
	0x80, 0xbc, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0x52, 0x13, 0x4d, 0x69, 0x6e, 0x4c, 0x6f, 0x72,
	0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x79, 0x4c, 0x76, 0x12, 0x4b, 0x0a,
	0x13, 0x4d, 0x61, 0x78, 0x4c, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65,
	0x6e, 0x79, 0x4c, 0x76, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15,
	0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe7, 0x83, 0xad, 0xe5, 0x8a, 0x9b, 0xe5, 0x80, 0xbc, 0xe7,
	0xad, 0x89, 0xe7, 0xba, 0xa7, 0x52, 0x13, 0x4d, 0x61, 0x78, 0x4c, 0x6f, 0x72, 0x64, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x79, 0x4c, 0x76, 0x12, 0x44, 0x0a, 0x11, 0x4d, 0x69,
	0x6e, 0x4c, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x9c, 0x80, 0xe5, 0xb0,
	0x8f, 0xe7, 0x82, 0xbd, 0xe7, 0x83, 0xad, 0xe7, 0xa7, 0xaf, 0xe5, 0x88, 0x86, 0x52, 0x11, 0x4d,
	0x69, 0x6e, 0x4c, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x44, 0x0a, 0x11, 0x4d, 0x61, 0x78, 0x4c, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18,
	0x12, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe7, 0x82, 0xbd, 0xe7, 0x83, 0xad, 0xe7, 0xa7, 0xaf,
	0xe5, 0x88, 0x86, 0x52, 0x11, 0x4d, 0x61, 0x78, 0x4c, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x4d, 0x69, 0x6e, 0x54, 0x6f, 0x70,
	0x31, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5,
	0x18, 0x15, 0xe7, 0x99, 0xbb, 0xe9, 0xa1, 0xb6, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0xe6, 0x9c,
	0x80, 0xe5, 0xb0, 0x8f, 0xe5, 0x80, 0xbc, 0x52, 0x0c, 0x4d, 0x69, 0x6e, 0x54, 0x6f, 0x70, 0x31,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x4d, 0x61, 0x78, 0x54, 0x6f, 0x70, 0x31,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18,
	0x15, 0xe7, 0x99, 0xbb, 0xe9, 0xa1, 0xb6, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0xe6, 0x9c, 0x80,
	0xe5, 0xa4, 0xa7, 0xe5, 0x80, 0xbc, 0x52, 0x0c, 0x4d, 0x61, 0x78, 0x54, 0x6f, 0x70, 0x31, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x4d, 0x69, 0x6e, 0x54, 0x6f, 0x70, 0x34, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15,
	0xe5, 0x89, 0x8d, 0xe5, 0x9b, 0x9b, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0xe6, 0x9c, 0x80, 0xe5,
	0xb0, 0x8f, 0xe5, 0x80, 0xbc, 0x52, 0x0c, 0x4d, 0x69, 0x6e, 0x54, 0x6f, 0x70, 0x34, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x4d, 0x61, 0x78, 0x54, 0x6f, 0x70, 0x34, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe5,
	0x89, 0x8d, 0xe5, 0x9b, 0x9b, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0xe6, 0x9c, 0x80, 0xe5, 0xa4,
	0xa7, 0xe5, 0x80, 0xbc, 0x52, 0x0c, 0x4d, 0x61, 0x78, 0x54, 0x6f, 0x70, 0x34, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x4d, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe4, 0xb8,
	0x8a, 0xe5, 0x9c, 0xba, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x8f,
	0xe5, 0x80, 0xbc, 0x52, 0x0c, 0x4d, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x4d, 0x61, 0x78, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe4, 0xb8, 0x8a,
	0xe5, 0x9c, 0xba, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe5,
	0x80, 0xbc, 0x52, 0x0c, 0x4d, 0x61, 0x78, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x4d, 0x0a, 0x11, 0x4d, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x55, 0x73, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0xea, 0xb5, 0x18,
	0x1b, 0xe5, 0xb8, 0xb8, 0xe7, 0x94, 0xa8, 0xe4, 0xb8, 0x8a, 0xe5, 0x9c, 0xba, 0xe6, 0xac, 0xa1,
	0xe6, 0x95, 0xb0, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x8f, 0xe5, 0x80, 0xbc, 0x52, 0x11, 0x4d, 0x69,
	0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x4d, 0x0a, 0x11, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0xea, 0xb5, 0x18, 0x1b,
	0xe5, 0xb8, 0xb8, 0xe7, 0x94, 0xa8, 0xe4, 0xb8, 0x8a, 0xe5, 0x9c, 0xba, 0xe6, 0xac, 0xa1, 0xe6,
	0x95, 0xb0, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe5, 0x80, 0xbc, 0x52, 0x11, 0x4d, 0x61, 0x78,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x0a,
	0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0x22, 0xa9, 0x01, 0x0a, 0x0b, 0x52,
	0x65, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x3b, 0x0a, 0x08, 0x49, 0x74,
	0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0xea, 0xb5,
	0x18, 0x06, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x11, 0x43, 0x4f, 0x4d, 0x5f,
	0x47, 0x41, 0x4d, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x08, 0x49,
	0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0xf2,
	0xb5, 0x18, 0x15, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4d, 0x4f, 0x4e, 0x45, 0x59,
	0x5f, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44,
	0x12, 0x24, 0x0a, 0x07, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x07, 0x49,
	0x74, 0x65, 0x6d, 0x43, 0x6e, 0x74, 0x22, 0xd9, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6,
	0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0x52, 0x07, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18,
	0x12, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe8, 0xb5, 0xb7, 0xe5, 0xa7, 0x8b, 0xe6, 0x97, 0xb6,
	0xe9, 0x97, 0xb4, 0x52, 0x0d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x47, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x47, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x16, 0xea,
	0xb5, 0x18, 0x12, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe5,
	0xb1, 0x95, 0xe7, 0xa4, 0xba, 0x52, 0x0b, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x68,
	0x6f, 0x77, 0x22, 0xc2, 0x03, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x43, 0x66, 0x67, 0x12, 0x2e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x1e, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0xf2, 0xb5, 0x18, 0x10,
	0x52, 0x45, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54,
	0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x44, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0xea, 0xb5, 0x18,
	0x0d, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x31, 0xf2, 0xb5,
	0x18, 0x11, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x52, 0x09, 0x49, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x12, 0x48,
	0x0a, 0x09, 0x49, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x2a, 0xea, 0xb5, 0x18, 0x0d, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe5, 0x8f, 0x82,
	0xe6, 0x95, 0xb0, 0x32, 0xf2, 0xb5, 0x18, 0x15, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x52, 0x09, 0x49,
	0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x12, 0x2f, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x33, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0xea, 0xb5, 0x18,
	0x0d, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x33, 0x52, 0x09,
	0x49, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x33, 0x12, 0x38, 0x0a, 0x0c, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x14, 0xea, 0xb5, 0x18, 0x10, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe5, 0x8f,
	0x82, 0xe6, 0x95, 0xb0, 0x31, 0x52, 0x0c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x31, 0x12, 0x38, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x10, 0xe5,
	0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x32, 0x52,
	0x0c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x12, 0x38, 0x0a,
	0x0c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x33, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x10, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4,
	0xb8, 0xb2, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x33, 0x52, 0x0c, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x33, 0x3a, 0x0e, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0xf0,
	0x97, 0x22, 0x01, 0xf8, 0x97, 0x22, 0x01, 0x22, 0xb0, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x4d, 0x69, 0x73, 0x63, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x43, 0x66, 0x67,
	0x12, 0x32, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x22, 0xea, 0xb5,
	0x18, 0x02, 0x49, 0x44, 0xf2, 0xb5, 0x18, 0x14, 0x52, 0x45, 0x53, 0x5f, 0x41, 0x55, 0x44, 0x49,
	0x4f, 0x5f, 0x4d, 0x49, 0x53, 0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0xc8, 0xc1, 0x18, 0x01,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe4, 0xba, 0x8b,
	0xe4, 0xbb, 0xb6, 0xe5, 0x90, 0x8d, 0x52, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x27, 0x0a, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0b, 0xea, 0xb5, 0x18, 0x07, 0x42, 0x61, 0x6e, 0x6b, 0xe5, 0x90, 0x8d,
	0x52, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x0e, 0x8a, 0x97, 0x22, 0x02,
	0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0xf8, 0x97, 0x22, 0x01, 0x22, 0xc0, 0x03, 0x0a, 0x0a, 0x52,
	0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x12, 0x3f, 0x0a, 0x06, 0x55, 0x6e, 0x69,
	0x71, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x52, 0x65, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x50, 0x4c, 0x41, 0x59, 0x4d, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe5, 0x94, 0xaf, 0xe4, 0xb8, 0x80, 0x49, 0x44, 0xc8, 0xc1,
	0x18, 0x01, 0x52, 0x06, 0x55, 0x6e, 0x69, 0x71, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x08, 0x4d, 0x61,
	0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe4, 0xb8, 0xbb, 0xe7, 0x8e, 0xa9, 0xe6, 0xb3, 0x95, 0xe5, 0x90, 0x8d, 0x52, 0x08,
	0x4d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5,
	0xad, 0x90, 0xe7, 0x8e, 0xa9, 0xe6, 0xb3, 0x95, 0xe5, 0x90, 0x8d, 0x52, 0x07, 0x53, 0x75, 0x62,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6,
	0x9d, 0x90, 0xe8, 0xb4, 0xa8, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0xe5, 0xa4, 0xb9, 0xe5, 0x90,
	0x8d, 0x52, 0x0b, 0x4d, 0x61, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x33,
	0x0a, 0x0a, 0x4d, 0x61, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x66, 0x69, 0x78, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe6, 0x9d, 0x90, 0xe8, 0xb4, 0xa8, 0xe5, 0x90,
	0x8d, 0xe5, 0x90, 0x8e, 0xe7, 0xbc, 0x80, 0x52, 0x0a, 0x4d, 0x61, 0x74, 0x50, 0x6f, 0x73, 0x74,
	0x66, 0x69, 0x78, 0x12, 0x4a, 0x0a, 0x11, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x65,
	0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c,
	0xea, 0xb5, 0x18, 0x18, 0xe5, 0xaf, 0xbc, 0xe5, 0x87, 0xba, 0xe7, 0x9a, 0x84, 0xe9, 0xa2, 0x84,
	0xe8, 0xbd, 0xbd, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe5, 0x90, 0x8d, 0x52, 0x11, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x44, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe4, 0xbd, 0xbf,
	0xe7, 0x94, 0xa8, 0xe7, 0x9a, 0x84, 0xe9, 0xa2, 0x84, 0xe8, 0xbd, 0xbd, 0xe8, 0xb5, 0x84, 0xe6,
	0xba, 0x90, 0xe5, 0x90, 0x8d, 0x52, 0x0e, 0x55, 0x73, 0x65, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x16, 0x8a, 0x97, 0x22, 0x06, 0x55, 0x6e, 0x69, 0x71, 0x49,
	0x44, 0xf0, 0x97, 0x22, 0x01, 0xf8, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x01, 0x22, 0xf1, 0x01,
	0x0a, 0x0f, 0x52, 0x65, 0x73, 0x52, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6d,
	0x62, 0x12, 0x28, 0x0a, 0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x90, 0x8d, 0xe5, 0xad, 0x97, 0xe5, 0x89, 0x8d,
	0xe7, 0xbc, 0x80, 0x52, 0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x2a, 0x0a, 0x07, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe5, 0x90, 0x8d, 0xe5, 0xad, 0x97, 0xe4, 0xb8, 0xad, 0xe9, 0x83, 0xa8, 0x52, 0x07,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x53, 0x75, 0x66, 0x66, 0x69,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x90, 0x8d,
	0xe5, 0xad, 0x97, 0xe5, 0x90, 0x8e, 0xe7, 0xbc, 0x80, 0x52, 0x06, 0x53, 0x75, 0x66, 0x66, 0x69,
	0x78, 0x12, 0x48, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x41,
	0x4d, 0x45, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x42,
	0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xaf, 0xad, 0xe8, 0xa8, 0x80, 0xe8, 0xa7, 0x84, 0xe5, 0x88,
	0x99, 0x52, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3a, 0x14, 0x92, 0x97, 0x22,
	0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0xf0, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22,
	0x02, 0x22, 0x98, 0x02, 0x0a, 0x0e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4d, 0x69, 0x73, 0x63,
	0x43, 0x6f, 0x6e, 0x66, 0x12, 0x3e, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x43, 0x66, 0x67, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x42, 0x0a, 0x0c, 0x52, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x43, 0x6f, 0x6d, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x52, 0x65, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x52, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x43, 0x6f, 0x6d, 0x62, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x0c, 0x52, 0x61, 0x6e, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x62, 0x12, 0x39, 0x0a, 0x09, 0x41, 0x49, 0x53, 0x68,
	0x6f, 0x77, 0x43, 0x66, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x52, 0x65,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x41, 0x49, 0x53, 0x68, 0x6f, 0x77, 0x43,
	0x66, 0x67, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x09, 0x41, 0x49, 0x53, 0x68, 0x6f, 0x77,
	0x43, 0x66, 0x67, 0x12, 0x47, 0x0a, 0x0b, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43,
	0x66, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x66, 0x67, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52,
	0x0b, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x66, 0x67, 0x22, 0xaf, 0x01, 0x0a,
	0x13, 0x52, 0x65, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x66, 0x67, 0x12, 0x48, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x42, 0x14,
	0xea, 0xb5, 0x18, 0x0c, 0xe6, 0xb8, 0xb8, 0xe6, 0x88, 0x8f, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0xc8, 0xc1, 0x18, 0x01, 0x52, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4e,
	0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x4f, 0x4d, 0x5f,
	0x47, 0x41, 0x4d, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x42, 0x13,
	0xea, 0xb5, 0x18, 0x0f, 0xe6, 0xb8, 0xb8, 0xe6, 0x88, 0x8f, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f,
	0xe7, 0xbb, 0x84, 0x52, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x84,
	0x01, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x47, 0x72,
	0x70, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x43, 0x66, 0x67, 0x12, 0x23, 0x0a, 0x07, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x09, 0xea, 0xb5, 0x18,
	0x05, 0xe7, 0xbb, 0x84, 0x49, 0x44, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12,
	0x44, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x4f, 0x4d, 0x5f,
	0x47, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6,
	0xb8, 0xb8, 0xe6, 0x88, 0x8f, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x08, 0x47, 0x61, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x0c, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x48, 0x0a, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x66, 0x67, 0x42, 0x04, 0xd2, 0xc1, 0x18,
	0x00, 0x52, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x54, 0x0a, 0x11, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x47, 0x72, 0x70, 0x42,
	0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x52, 0x65,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x47, 0x72, 0x70, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x43, 0x66, 0x67, 0x42, 0x04, 0xd2,
	0xc1, 0x18, 0x00, 0x52, 0x11, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x47, 0x72, 0x70,
	0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x22, 0x8a, 0x0e, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x49, 0x74,
	0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x43, 0x66, 0x67, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e,
	0x12, 0x20, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x08, 0xe9, 0x81, 0x93, 0xe5, 0x85, 0xb7, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x25, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x11, 0xea, 0xb5, 0x18, 0x09, 0xe9, 0x81, 0x93, 0xe5, 0x85, 0xb7, 0xe5, 0x90, 0x8d, 0xf8,
	0xb5, 0x18, 0x01, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x42, 0x69, 0x67,
	0x49, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f,
	0xe9, 0x81, 0x93, 0xe5, 0x85, 0xb7, 0xe5, 0xa4, 0xa7, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0x52,
	0x07, 0x42, 0x69, 0x67, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x04, 0x49, 0x63, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe9, 0x81, 0x93, 0xe5,
	0x85, 0xb7, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0x52, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x3d,
	0x0a, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x23, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x93, 0x81, 0xe8, 0xb4, 0xa8, 0xf2, 0xb5, 0x18, 0x15, 0x52,
	0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x52, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2f, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1b, 0xea, 0xb5, 0x18,
	0x06, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x0d, 0x52, 0x45, 0x53, 0x5f, 0x50,
	0x52, 0x4f, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28,
	0x0a, 0x04, 0x44, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5,
	0x18, 0x0c, 0xe9, 0x81, 0x93, 0xe5, 0x85, 0xb7, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xf8, 0xb5,
	0x18, 0x01, 0x52, 0x04, 0x44, 0x65, 0x73, 0x63, 0x12, 0x2a, 0x0a, 0x07, 0x53, 0x68, 0x6f, 0x77,
	0x54, 0x61, 0x62, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6,
	0x98, 0xbe, 0xe7, 0xa4, 0xba, 0xe9, 0xa1, 0xb5, 0xe7, 0xad, 0xbe, 0x52, 0x07, 0x53, 0x68, 0x6f,
	0x77, 0x54, 0x61, 0x62, 0x12, 0x2c, 0x0a, 0x08, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x6f, 0x72, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x98, 0xbe, 0xe7,
	0xa4, 0xba, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0x52, 0x08, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x6f,
	0x72, 0x74, 0x12, 0x3f, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x25, 0xea, 0xb5, 0x18, 0x0c, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe6,
	0x96, 0xb9, 0xe5, 0xbc, 0x8f, 0xf2, 0xb5, 0x18, 0x11, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f,
	0x50, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x07, 0x55, 0x73, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x4f, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xa0, 0x86, 0xe5,
	0x8f, 0xa0, 0xe4, 0xb8, 0x8a, 0xe9, 0x99, 0x90, 0x52, 0x09, 0x4f, 0x76, 0x65, 0x72, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x66, 0x0a, 0x10, 0x4f, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x47, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x3a, 0xea,
	0xb5, 0x18, 0x1b, 0xe8, 0xbe, 0xbe, 0xe5, 0x88, 0xb0, 0xe4, 0xb8, 0x8a, 0xe9, 0x99, 0x90, 0xe5,
	0x90, 0x8e, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5,
	0x18, 0x17, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x10, 0x4f, 0x76, 0x65, 0x72, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x47, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x51, 0x0a, 0x0d, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x2b, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x97, 0xb6, 0xe9, 0x99, 0x90, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x17, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x50,
	0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52,
	0x0d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40,
	0x0a, 0x0f, 0x55, 0x73, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x9c, 0x89,
	0xe6, 0x95, 0x88, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52,
	0x0f, 0x55, 0x73, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x72,
	0x12, 0x3c, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x9c, 0x89,
	0xe6, 0x95, 0x88, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52,
	0x0d, 0x55, 0x73, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x12, 0x28,
	0x0a, 0x0f, 0x55, 0x73, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x47, 0x65,
	0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x55, 0x73, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x47, 0x65, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x47, 0x65, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x55, 0x73, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x47, 0x65, 0x6e, 0x12, 0x2e,
	0x0a, 0x09, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x9c, 0x89, 0xe6, 0x95, 0x88, 0xe6, 0x97, 0xb6,
	0xe9, 0x95, 0xbf, 0x52, 0x09, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5e,
	0x0a, 0x0e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x36, 0xea, 0xb5, 0x18, 0x12, 0xe8, 0xb6, 0x85, 0xe6,
	0x97, 0xb6, 0xe5, 0xa4, 0x84, 0xe7, 0x90, 0x86, 0xe6, 0x96, 0xb9, 0xe5, 0xbc, 0x8f, 0xf2, 0xb5,
	0x18, 0x1c, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f,
	0x55, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0e,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x53,
	0x0a, 0x0c, 0x53, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x2f, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x87, 0xba, 0xe5, 0x94, 0xae,
	0xe8, 0xb4, 0xa7, 0xe5, 0xb8, 0x81, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x15,
	0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x5f, 0x53, 0x55,
	0x42, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0c, 0x53, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x53, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x43,
	0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x87,
	0xba, 0xe5, 0x94, 0xae, 0xe8, 0xb4, 0xa7, 0xe5, 0xb8, 0x81, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc,
	0x52, 0x0b, 0x53, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6e, 0x74, 0x12, 0x69, 0x0a,
	0x08, 0x45, 0x66, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0d, 0x42,
	0x4d, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0xe5, 0x8f, 0x82, 0xe6, 0x95,
	0xb0, 0xda, 0xb5, 0x18, 0x20, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x52, 0x45, 0x53, 0x5f,
	0x4d, 0x41, 0x58, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x45, 0x46, 0x54, 0x5f, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x4e, 0x55, 0x4d, 0xf2, 0xb5, 0x18, 0x15, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x52, 0x08,
	0x45, 0x66, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x3c, 0x0a, 0x0d, 0x45, 0x66, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0xe5, 0x8f, 0x82, 0xe6, 0x95,
	0xb0, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x0d, 0x45, 0x66, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x41, 0x75, 0x74, 0x6f, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19,
	0xea, 0xb5, 0x18, 0x15, 0xe5, 0xae, 0xa2, 0xe6, 0x88, 0xb7, 0xe7, 0xab, 0xaf, 0xe8, 0x87, 0xaa,
	0xe5, 0x8a, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0x52, 0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x41, 0x75, 0x74, 0x6f, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x3c, 0x0a, 0x0d, 0x49, 0x74, 0x65,
	0x6d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe7, 0x89, 0xb9, 0xe6, 0x95, 0x88, 0xe8, 0xa7, 0x86, 0xe9,
	0xa2, 0x91, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x0d, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x12, 0x36, 0x0a, 0x0a, 0x4e, 0x6f, 0x74, 0x42, 0x75,
	0x6c, 0x6b, 0x55, 0x73, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x16, 0xea, 0xb5, 0x18,
	0x12, 0xe4, 0xb8, 0x8d, 0xe5, 0x8f, 0xaf, 0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe4, 0xbd, 0xbf,
	0xe7, 0x94, 0xa8, 0x52, 0x0a, 0x4e, 0x6f, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x73, 0x65, 0x12,
	0x28, 0x0a, 0x09, 0x4a, 0x75, 0x6d, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe8, 0xb7, 0xb3, 0xe8, 0xbd, 0xac, 0x52, 0x09,
	0x4a, 0x75, 0x6d, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x48, 0x0a, 0x0b, 0x53, 0x63, 0x61,
	0x72, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26,
	0xea, 0xb5, 0x18, 0x09, 0xe7, 0xa8, 0x80, 0xe6, 0x9c, 0x89, 0xe5, 0xba, 0xa6, 0xf2, 0xb5, 0x18,
	0x15, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x43, 0x41, 0x52, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0b, 0x53, 0x63, 0x61, 0x72, 0x63, 0x65, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x08, 0x49, 0x73, 0x55, 0x73, 0x65, 0x4e, 0x6f, 0x77, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x08, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0xab, 0x8b, 0xe5, 0x8d,
	0xb3, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0x52, 0x08, 0x49, 0x73, 0x55, 0x73, 0x65, 0x4e, 0x6f,
	0x77, 0x12, 0x2c, 0x0a, 0x08, 0x46, 0x6c, 0x61, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xb9, 0xb3, 0xe9, 0x9d, 0xa2, 0xe5,
	0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0x52, 0x08, 0x46, 0x6c, 0x61, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x3a,
	0x12, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0xf8, 0x97, 0x22, 0x01, 0x98,
	0x97, 0x22, 0x02, 0x22, 0xe3, 0x03, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x43, 0x66, 0x67, 0x12, 0x41, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2d, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xb4, 0xa7, 0xe5, 0xb8,
	0x81, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x15, 0x43, 0x4f, 0x4d, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45,
	0xc8, 0xc1, 0x18, 0x01, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xb4,
	0xa7, 0xe5, 0xb8, 0x81, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xb9, 0xb3, 0xe9, 0x9d, 0xa2, 0xe5, 0x9b,
	0xbe, 0xe6, 0xa0, 0x87, 0x52, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x08, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5,
	0x18, 0x12, 0xe7, 0x89, 0xa9, 0xe5, 0x93, 0x81, 0xe8, 0xb4, 0xa7, 0xe5, 0xb8, 0x81, 0xe5, 0x9b,
	0xbe, 0xe6, 0xa0, 0x87, 0x52, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x3b,
	0x0a, 0x0b, 0x42, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe5, 0xa4, 0xa7, 0xe7, 0x89, 0xa9, 0xe5,
	0x93, 0x81, 0xe8, 0xb4, 0xa7, 0xe5, 0xb8, 0x81, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0x52, 0x0b,
	0x42, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x04, 0x44,
	0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe8,
	0xb4, 0xa7, 0xe5, 0xb8, 0x81, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xf8, 0xb5, 0x18, 0x01, 0x52,
	0x04, 0x44, 0x65, 0x73, 0x63, 0x12, 0x34, 0x0a, 0x0c, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x44, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x0c, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x0c, 0x54,
	0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x44, 0x65, 0x73, 0x63, 0x12, 0x2c, 0x0a, 0x08, 0x4d,
	0x61, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea,
	0xb5, 0x18, 0x0c, 0xe4, 0xb8, 0x8a, 0xe9, 0x99, 0x90, 0xe6, 0x95, 0xb0, 0xe5, 0x80, 0xbc, 0x52,
	0x08, 0x4d, 0x61, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x54, 0x69, 0x70,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x0c, 0xe6, 0x8f, 0x90, 0xe9, 0x86, 0x92, 0xe6, 0x95, 0xb0, 0xe5, 0x80, 0xbc, 0x52, 0x08, 0x54,
	0x69, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x10, 0x8a, 0x97, 0x22, 0x04, 0x54, 0x79, 0x70,
	0x65, 0xf0, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x02, 0x22, 0x8e, 0x03, 0x0a, 0x0e, 0x52, 0x65,
	0x73, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x66, 0x67, 0x12, 0x45, 0x0a, 0x08,
	0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x29,
	0xea, 0xb5, 0x18, 0x0c, 0xe7, 0x89, 0xa9, 0xe5, 0x93, 0x81, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0xf2, 0xb5, 0x18, 0x11, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0x89, 0xa9, 0xe5, 0x93, 0x81, 0xe5, 0x90, 0x8d,
	0xe7, 0xa7, 0xb0, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x08, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0x89, 0xa9, 0xe5, 0x93, 0x81, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0,
	0x87, 0x52, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0b, 0x42,
	0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe5, 0xa4, 0xa7, 0xe7, 0x89, 0xa9, 0xe5, 0x93, 0x81, 0xe5,
	0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0x52, 0x0b, 0x42, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x63,
	0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x07, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0x89, 0xa9, 0xe5, 0x93, 0x81, 0xe6,
	0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x07, 0x49, 0x74, 0x65, 0x6d, 0x44,
	0x65, 0x73, 0x12, 0x36, 0x0a, 0x0b, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x49,
	0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x08, 0x46, 0x6c,
	0x61, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe5, 0xb9, 0xb3, 0xe9, 0x9d, 0xa2, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0x52, 0x08,
	0x46, 0x6c, 0x61, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x3a, 0x10, 0x8a, 0x97, 0x22, 0x08, 0x49, 0x74,
	0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0xf0, 0x97, 0x22, 0x01, 0x22, 0xcf, 0x04, 0x0a, 0x11, 0x52,
	0x65, 0x73, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x66, 0x67,
	0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5,
	0x18, 0x02, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x06,
	0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e,
	0xea, 0xb5, 0x18, 0x06, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x04,
	0x44, 0x65, 0x73, 0x63, 0x12, 0x2a, 0x0a, 0x07, 0x55, 0x72, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba,
	0x90, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x07, 0x55, 0x72, 0x6c, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x32, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1e,
	0xea, 0xb5, 0x18, 0x06, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x10, 0x52, 0x45,
	0x53, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x49, 0x4d, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x4c, 0x69, 0x66, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x27, 0xea, 0xb5, 0x18, 0x12, 0xe7, 0x94, 0x9f, 0xe5,
	0x91, 0xbd, 0xe6, 0x97, 0xb6, 0xe9, 0x95, 0xbf, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5,
	0x18, 0x0d, 0x43, 0x4f, 0x4d, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52,
	0x08, 0x4c, 0x69, 0x66, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x4c, 0x69, 0x66,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x42, 0x16, 0xea, 0xb5, 0x18,
	0x12, 0xe7, 0x94, 0x9f, 0xe5, 0x91, 0xbd, 0xe6, 0x97, 0xb6, 0xe9, 0x95, 0xbf, 0xe5, 0x8f, 0x82,
	0xe6, 0x95, 0xb0, 0x52, 0x08, 0x4c, 0x69, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a,
	0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x23,
	0xea, 0xb5, 0x18, 0x06, 0xe5, 0x93, 0x81, 0xe8, 0xb4, 0xa8, 0xf2, 0xb5, 0x18, 0x15, 0x52, 0x45,
	0x53, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x52, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x0b,
	0x53, 0x63, 0x61, 0x72, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x26, 0xea, 0xb5, 0x18, 0x09, 0xe7, 0xa8, 0x80, 0xe6, 0x9c, 0x89, 0xe5, 0xba, 0xa6,
	0xf2, 0xb5, 0x18, 0x15, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x43, 0x41, 0x52, 0x43, 0x45, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0b, 0x53, 0x63, 0x61, 0x72, 0x63,
	0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3c, 0x0a, 0x0a, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x52, 0x65, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x04, 0xea, 0xb5, 0x18, 0x00, 0x52, 0x0a, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x05, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x02, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0xbc, 0xa9, 0xe6, 0x94, 0xbe, 0xe6,
	0xaf, 0x94, 0xe4, 0xbe, 0x8b, 0x52, 0x05, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x3a, 0x0e, 0x8a, 0x97,
	0x22, 0x02, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x02, 0x22, 0x93, 0x04, 0x0a,
	0x15, 0x52, 0x65, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x49, 0x43, 0x66, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x36, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x26, 0xea, 0xb5, 0x18, 0x08, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0x49, 0x44,
	0xf2, 0xb5, 0x18, 0x12, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x55,
	0x49, 0x5f, 0x54, 0x59, 0x50, 0x45, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x24,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe6, 0x8f,
	0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x04, 0x44, 0x65, 0x73, 0x63, 0x12, 0x30, 0x0a, 0x09, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xea,
	0xb5, 0x18, 0x0e, 0xe9, 0x80, 0x9a, 0xe7, 0x94, 0xa8, 0x33, 0x44, 0xe5, 0x9c, 0xba, 0xe6, 0x99,
	0xaf, 0x52, 0x09, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x40, 0x0a, 0x0e,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xea, 0xb5, 0x18, 0x14, 0xe9, 0x80, 0x9a, 0xe7, 0x94, 0xa8,
	0x33, 0x44, 0xe5, 0x9c, 0xba, 0xe6, 0x99, 0xaf, 0xe7, 0x81, 0xaf, 0xe5, 0x85, 0x89, 0x52, 0x0e,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x36,
	0x0a, 0x0d, 0x49, 0x6e, 0x69, 0x74, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x41, 0x67, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x88, 0x9d, 0xe5, 0xa7,
	0x8b, 0xe9, 0x95, 0x9c, 0xe5, 0xa4, 0xb4, 0x52, 0x0d, 0x49, 0x6e, 0x69, 0x74, 0x43, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x41, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x12, 0x49, 0x6d, 0x6d, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x41, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe6, 0xb2, 0x89, 0xe6, 0xb5, 0xb8, 0xe5, 0xbc,
	0x8f, 0xe9, 0x95, 0x9c, 0xe5, 0xa4, 0xb4, 0x52, 0x12, 0x49, 0x6d, 0x6d, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x41, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x4e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x41, 0x67, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe9, 0x9d, 0x9e, 0xe6, 0xb2, 0x89,
	0xe6, 0xb5, 0xb8, 0xe5, 0xbc, 0x8f, 0xe9, 0x95, 0x9c, 0xe5, 0xa4, 0xb4, 0x52, 0x0f, 0x4e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x41, 0x67, 0x65, 0x12, 0x33, 0x0a,
	0x0a, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe5, 0x9c, 0xba, 0xe6, 0x99, 0xaf, 0xe5, 0xa4, 0x87,
	0xe6, 0xb3, 0xa8, 0xe5, 0x88, 0x97, 0x52, 0x0a, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x3a, 0x0e, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0x98, 0x97,
	0x22, 0x01, 0x22, 0x8d, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x42, 0x47, 0x4d,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x04, 0x42, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xea, 0xb5, 0x18, 0x04, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x04, 0x42, 0x61,
	0x6e, 0x6b, 0x12, 0x2e, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x92, 0xad, 0xe6, 0x94,
	0xbe, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0x52, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x70, 0x45, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x81, 0x9c, 0xe6, 0xad,
	0xa2, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0x52, 0x09, 0x53, 0x74, 0x6f, 0x70, 0x45, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x42, 0x47, 0x4d,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x20, 0xea, 0xb5, 0x18, 0x06, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x12, 0x45, 0x42, 0x47, 0x4d, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2f, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8,
	0xb2, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x52, 0x08, 0x53, 0x74, 0x72, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x27, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0d, 0x42, 0x0f, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xda, 0xb5, 0x18,
	0x01, 0x35, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xd6, 0x01, 0x0a, 0x09, 0x52,
	0x65, 0x73, 0x42, 0x47, 0x4d, 0x43, 0x66, 0x67, 0x12, 0x3f, 0x0a, 0x07, 0x42, 0x47, 0x4d, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x52, 0x65, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x42, 0x47, 0x4d, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe8, 0x83, 0x8c, 0xe6, 0x99, 0xaf, 0xe9, 0x9f, 0xb3,
	0x52, 0x07, 0x42, 0x47, 0x4d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4e, 0x0a, 0x0a, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x42, 0x47,
	0x4d, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x0c, 0xe5, 0x88, 0x87, 0xe6, 0x8d, 0xa2, 0xe6, 0x97, 0xb6, 0xe6, 0x9c, 0xba, 0x52, 0x0a, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe5, 0xbb, 0xb6, 0xe8, 0xbf, 0x9f, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x09,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x3a, 0x08, 0xf0, 0x97, 0x22, 0x01, 0x98,
	0x97, 0x22, 0x02, 0x22, 0x98, 0x03, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x48, 0x65, 0x61, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x43, 0x66, 0x67, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0e, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xf8, 0xb5, 0x18, 0x01,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x63, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0,
	0xf8, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x44, 0x65, 0x73, 0x63, 0x12, 0x2a, 0x0a, 0x07, 0x55, 0x72,
	0x6c, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x07, 0x55,
	0x72, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2f, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x1b, 0xea, 0xb5, 0x18, 0x06, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0xf2, 0xb5, 0x18, 0x0d, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x4c, 0x69, 0x66, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x27, 0xea, 0xb5, 0x18, 0x12, 0xe7,
	0x94, 0x9f, 0xe5, 0x91, 0xbd, 0xe6, 0x97, 0xb6, 0xe9, 0x95, 0xbf, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0xf2, 0xb5, 0x18, 0x0d, 0x43, 0x4f, 0x4d, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x52, 0x08, 0x4c, 0x69, 0x66, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x08,
	0x4c, 0x69, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x42, 0x16,
	0xea, 0xb5, 0x18, 0x12, 0xe7, 0x94, 0x9f, 0xe5, 0x91, 0xbd, 0xe6, 0x97, 0xb6, 0xe9, 0x95, 0xbf,
	0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x52, 0x08, 0x4c, 0x69, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3c, 0x0a, 0x0a, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52,
	0x65, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0xea, 0xb5,
	0x18, 0x00, 0x52, 0x0a, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x3a, 0x0e,
	0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x02, 0x22, 0x60,
	0x0a, 0x12, 0x52, 0x65, 0x73, 0x47, 0x69, 0x66, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x43, 0x66, 0x67, 0x12, 0x24, 0x0a, 0x07, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0xac, 0xa1, 0xe6, 0x95,
	0xb0, 0x52, 0x07, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x44, 0x72,
	0x6f, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08,
	0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0x49, 0x44, 0x52, 0x06, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x44,
	0x22, 0xf2, 0x01, 0x0a, 0x1f, 0x52, 0x65, 0x73, 0x47, 0x69, 0x66, 0x74, 0x47, 0x75, 0x61, 0x72,
	0x61, 0x6e, 0x74, 0x65, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x16, 0xea, 0xb5, 0x18, 0x0e, 0xe4, 0xbf, 0x9d, 0xe5, 0xba, 0x95, 0xe7, 0xa4, 0xbc, 0xe5,
	0x8c, 0x85, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x71, 0x0a, 0x0c,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x43, 0x66, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73,
	0x47, 0x69, 0x66, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x43, 0x66, 0x67, 0x42,
	0x30, 0xea, 0xb5, 0x18, 0x0c, 0xe4, 0xbf, 0x9d, 0xe5, 0xba, 0x95, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f,
	0x91, 0xda, 0xb5, 0x18, 0x1c, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x47, 0x49, 0x46, 0x54,
	0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x4e,
	0x54, 0x52, 0x0c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x43, 0x66, 0x67, 0x73, 0x12,
	0x2e, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe6, 0xa3, 0x80, 0xe6, 0x9f, 0xa5,
	0x49, 0x44, 0x52, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x44, 0x3a,
	0x04, 0x88, 0xb5, 0x18, 0x01, 0x22, 0xef, 0x02, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f,
	0x6e, 0x66, 0x12, 0x40, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52,
	0x65, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x43, 0x66, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x09, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x52, 0x65, 0x73, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x66,
	0x67, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x09, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x42, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x52, 0x65, 0x73, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x43, 0x66, 0x67, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x49,
	0x6d, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x08, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x66,
	0x67, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x08, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x64, 0x0a, 0x15, 0x47, 0x69, 0x66, 0x74, 0x47, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x69,
	0x66, 0x74, 0x47, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00,
	0x52, 0x15, 0x47, 0x69, 0x66, 0x74, 0x47, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0x99, 0x02, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x44,
	0x72, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x66, 0x67, 0x12, 0x16, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x39, 0x0a, 0x05, 0x41, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x47,
	0x61, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe6, 0x8e, 0x89,
	0xe8, 0x90, 0xbd, 0xe7, 0x89, 0xa9, 0x52, 0x05, 0x41, 0x77, 0x61, 0x72, 0x64, 0x12, 0x50, 0x0a,
	0x08, 0x52, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x34, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0xa6, 0x82, 0xe7, 0x8e, 0x87, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0xf2, 0xb5, 0x18, 0x20, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54,
	0x38, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x08, 0x52, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2e, 0x0a, 0x09, 0x52, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0xa6, 0x82, 0xe7, 0x8e, 0x87, 0xe6, 0x95,
	0xb0, 0xe5, 0x80, 0xbc, 0x52, 0x09, 0x52, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x26, 0x0a, 0x07, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x49, 0x44, 0x52, 0x07,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x44, 0x3a, 0x0a, 0x92, 0x97, 0x22, 0x02, 0x49, 0x44, 0xf0,
	0x97, 0x22, 0x01, 0x22, 0x89, 0x02, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x44,
	0x61, 0x74, 0x61, 0x43, 0x66, 0x67, 0x12, 0x28, 0x0a, 0x06, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe6, 0x8e, 0x89, 0xe8,
	0x90, 0xbd, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x06, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x44,
	0x12, 0x4d, 0x0a, 0x08, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0d, 0x42, 0x31, 0xea, 0xb5, 0x18, 0x0e, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0xe9, 0x9b,
	0x86, 0xe5, 0x90, 0x88, 0x49, 0x44, 0xda, 0xb5, 0x18, 0x1b, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x2e, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x4e, 0x55, 0x4d, 0x52, 0x08, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x36, 0x0a, 0x0a, 0x4d, 0x69, 0x78, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x8f, 0xe6,
	0x8e, 0x89, 0xe8, 0x90, 0xbd, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x0a, 0x4d, 0x69, 0x78,
	0x44, 0x72, 0x6f, 0x70, 0x43, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0a, 0x4d, 0x61, 0x78, 0x44, 0x72,
	0x6f, 0x70, 0x43, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18,
	0x12, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0xe6, 0x95, 0xb0,
	0xe9, 0x87, 0x8f, 0x52, 0x0a, 0x4d, 0x61, 0x78, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x6e, 0x74, 0x3a,
	0x0e, 0x8a, 0x97, 0x22, 0x06, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0x22,
	0xc7, 0x02, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x43, 0x66, 0x67, 0x12, 0x2a, 0x0a, 0x07, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6,
	0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x07, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x44, 0x12,
	0x41, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x25, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0x89, 0xa9, 0xe5, 0x93, 0x81, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x11, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x25, 0xea, 0xb5, 0x18, 0x08, 0xe7, 0x89, 0xa9, 0xe5, 0x93, 0x81, 0x49, 0x44,
	0xf2, 0xb5, 0x18, 0x15, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4d, 0x4f, 0x4e, 0x45,
	0x59, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x44, 0x12, 0x2c, 0x0a, 0x08, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xe4,
	0xb8, 0x8a, 0xe9, 0x99, 0x90, 0x52, 0x08, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6e, 0x74, 0x12,
	0x47, 0x0a, 0x0a, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x27, 0xea, 0xb5, 0x18, 0x0c, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe5,
	0x91, 0xa8, 0xe6, 0x9c, 0x9f, 0xf2, 0xb5, 0x18, 0x13, 0x52, 0x45, 0x53, 0x5f, 0x4c, 0x49, 0x4d,
	0x49, 0x54, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0a, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x3a, 0x0f, 0x8a, 0x97, 0x22, 0x07, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0x22, 0x71, 0x0a, 0x1c, 0x52, 0x65, 0x73,
	0x44, 0x72, 0x6f, 0x70, 0x73, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x3f, 0x0a, 0x08, 0x49, 0x74, 0x65,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x23, 0xea, 0xb5, 0x18,
	0x06, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x11, 0x43, 0x4f, 0x4d, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0xc8, 0xc1, 0x18, 0x01,
	0x52, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x10, 0x8a, 0x97, 0x22, 0x08,
	0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0xf0, 0x97, 0x22, 0x01, 0x22, 0x99, 0x02, 0x0a,
	0x08, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x39, 0x0a, 0x08, 0x44, 0x72, 0x6f,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x52, 0x65,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x66, 0x67, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x08, 0x44, 0x72, 0x6f, 0x70,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x08, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x52, 0x65, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x66, 0x67, 0x42,
	0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x08, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x3c, 0x0a, 0x09, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x66, 0x67, 0x42, 0x04, 0xd2, 0xc1,
	0x18, 0x00, 0x52, 0x09, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x59, 0x0a,
	0x11, 0x44, 0x72, 0x6f, 0x70, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x45, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x42,
	0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x11, 0x44, 0x72, 0x6f, 0x70, 0x45, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x22, 0xf8, 0x02, 0x0a, 0x10, 0x52, 0x65, 0x73,
	0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x2c, 0x0a,
	0x08, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x10, 0xea, 0xb5, 0x18, 0x08, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0x49, 0x44, 0xc8, 0xc1, 0x18,
	0x01, 0x52, 0x08, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x09, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x07,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xb5, 0x9b, 0xe5, 0xad,
	0xa3, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf,
	0xb0, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x44, 0x65, 0x73, 0x63, 0x12, 0x44, 0x0a, 0x11, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe7, 0xbb, 0x93, 0xe7,
	0xae, 0x97, 0xe5, 0xa4, 0xb1, 0xe6, 0x95, 0x88, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x11,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x75, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x90,
	0xaf, 0xe7, 0x94, 0xa8, 0x52, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x3a, 0x14, 0x8a,
	0x97, 0x22, 0x08, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0x98,
	0x97, 0x22, 0x02, 0x22, 0xcc, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x53, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x08, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3,
	0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x08, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44,
	0x12, 0x32, 0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1e,
	0xea, 0xb5, 0x18, 0x06, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xc8, 0xc1, 0x18, 0x02, 0xf2, 0xb5,
	0x18, 0x0c, 0x45, 0x50, 0x76, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x52, 0x61, 0x6e, 0x6b, 0x12, 0x34, 0x0a, 0x0b, 0x41, 0x77, 0x61, 0x72, 0x64, 0x44, 0x72, 0x6f,
	0x70, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0xe5,
	0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0x49, 0x44, 0x52, 0x0b, 0x41,
	0x77, 0x61, 0x72, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x44, 0x3a, 0x16, 0x8a, 0x97, 0x22, 0x0e,
	0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x2c, 0x20, 0x52, 0x61, 0x6e, 0x6b, 0xf0, 0x97,
	0x22, 0x01, 0x22, 0x86, 0x02, 0x0a, 0x1c, 0x52, 0x65, 0x73, 0x49, 0x6e, 0x53, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x08, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe8, 0xb5, 0x9b, 0xe5, 0xad,
	0xa3, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x08, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x32, 0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x1e, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xc8, 0xc1, 0x18, 0x02, 0xf2,
	0xb5, 0x18, 0x0c, 0x45, 0x50, 0x76, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x34, 0x0a, 0x0b, 0x41, 0x77, 0x61, 0x72, 0x64, 0x44, 0x72,
	0x6f, 0x70, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e,
	0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0x49, 0x44, 0x52, 0x0b,
	0x41, 0x77, 0x61, 0x72, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x06, 0x4d,
	0x61, 0x69, 0x6c, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x52, 0x65,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x4d, 0x61, 0x69, 0x6c, 0x49, 0x44, 0x42, 0x0c, 0xea,
	0xb5, 0x18, 0x08, 0xe9, 0x82, 0xae, 0xe4, 0xbb, 0xb6, 0x49, 0x44, 0x52, 0x06, 0x4d, 0x61, 0x69,
	0x6c, 0x49, 0x44, 0x3a, 0x16, 0x8a, 0x97, 0x22, 0x0e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49,
	0x44, 0x2c, 0x20, 0x52, 0x61, 0x6e, 0x6b, 0xf0, 0x97, 0x22, 0x01, 0x22, 0x8e, 0x03, 0x0a, 0x18,
	0x52, 0x65, 0x73, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe4, 0xbb,
	0xbb, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x12, 0x28, 0x0a, 0x08, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3,
	0x49, 0x44, 0x52, 0x08, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x04,
	0x52, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0xea, 0xb5, 0x18, 0x06,
	0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xf2, 0xb5, 0x18, 0x0c, 0x45, 0x50, 0x76, 0x70, 0x52, 0x61,
	0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x2a, 0x0a, 0x05,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18,
	0x0c, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0xa0, 0x87, 0xe9, 0xa2, 0x98, 0xf8, 0xb5, 0x18,
	0x01, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x63,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe4, 0xbb, 0xbb, 0xe5,
	0x8a, 0xa1, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x46, 0x0a, 0x0a, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe5, 0xae, 0x8c, 0xe6, 0x88, 0x90, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x52, 0x0a,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x12, 0x34, 0x0a, 0x0b, 0x41, 0x77,
	0x61, 0x72, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x12, 0xea, 0xb5, 0x18, 0x0e, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe6, 0x8e, 0x89, 0xe8, 0x90,
	0xbd, 0x49, 0x44, 0x52, 0x0b, 0x41, 0x77, 0x61, 0x72, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x44,
	0x3a, 0x1a, 0x8a, 0x97, 0x22, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x92, 0x97, 0x22, 0x08,
	0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0x22, 0x8d, 0x0b, 0x0a,
	0x15, 0x52, 0x65, 0x73, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x42, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x08, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe8, 0xb5,
	0x9b, 0xe5, 0xad, 0xa3, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x08, 0x53, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x3b, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0xa8, 0xa1, 0xe5,
	0xbc, 0x8f, 0xc8, 0xc1, 0x18, 0x02, 0xf2, 0xb5, 0x18, 0x0d, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x4b, 0x0a, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x54, 0x68, 0x65,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x25, 0xea, 0xb5, 0x18, 0x06, 0xe4, 0xb8,
	0xbb, 0xe9, 0xa2, 0x98, 0xf2, 0xb5, 0x18, 0x17, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x5f, 0x42, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x48, 0x45, 0x4d, 0x45, 0x52,
	0x0d, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x42,
	0x0a, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x4c, 0x41, 0x59,
	0x4d, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0x50, 0x6c,
	0x61, 0x79, 0x4d, 0x6f, 0x64, 0x49, 0x44, 0x52, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64,
	0x49, 0x44, 0x12, 0x46, 0x0a, 0x0f, 0x49, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18,
	0x18, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe6, 0x88, 0xbf,
	0xe9, 0x97, 0xb4, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0x52, 0x0f, 0x49, 0x73, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x48, 0x0a, 0x10, 0x52, 0x6f,
	0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe6, 0x88, 0xbf, 0xe9, 0x97, 0xb4,
	0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe4, 0xba, 0xba, 0xe6, 0x95, 0xb0, 0xe9, 0x99, 0x90, 0xe5,
	0x88, 0xb6, 0x52, 0x10, 0x52, 0x6f, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61,
	0x78, 0x4e, 0x75, 0x6d, 0x12, 0x5c, 0x0a, 0x12, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe7, 0xa7, 0xaf, 0xe5,
	0x88, 0x86, 0xe4, 0xbf, 0x9d, 0xe6, 0x8a, 0xa4, 0xe9, 0x81, 0x93, 0xe5, 0x85, 0xb7, 0x52, 0x12,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x44, 0x12, 0x34, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc,
	0x8f, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6,
	0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe6, 0x97, 0xb6, 0xe9, 0x97,
	0xb4, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x55, 0x49, 0x49, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe5, 0x85, 0xb6, 0xe4, 0xbb, 0x96, 0xe7, 0x95, 0x8c,
	0xe9, 0x9d, 0xa2, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x90, 0xaf, 0xe7, 0x94, 0xa8, 0x52,
	0x0d, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x55, 0x49, 0x49, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x4e,
	0x0a, 0x10, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x22, 0xea, 0xb5, 0x18, 0x1e, 0xe6, 0x98,
	0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x85, 0x81, 0xe8, 0xae, 0xb8, 0xe9, 0x87, 0x8d, 0xe5, 0xa4, 0x8d,
	0xe9, 0x80, 0x89, 0xe6, 0x8b, 0xa9, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0x52, 0x10, 0x4c, 0x6f,
	0x72, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x12, 0x59,
	0x0a, 0x17, 0x49, 0x73, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4c, 0x6f, 0x72, 0x64, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x1f, 0xea, 0xb5, 0x18, 0x1b, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe7, 0xbb, 0x93, 0xe7, 0xae,
	0x97, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe7, 0x86, 0x9f, 0xe7, 0xbb, 0x83, 0xe5, 0xba, 0xa6,
	0x52, 0x17, 0x49, 0x73, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4c, 0x6f, 0x72, 0x64, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x49, 0x0a, 0x0f, 0x43, 0x61, 0x6e,
	0x45, 0x78, 0x69, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1f, 0xea, 0xb5, 0x18, 0x1b, 0xe5, 0x8f, 0xaf, 0xe9, 0x80, 0x80, 0xe5, 0x87,
	0xba, 0xe6, 0xb8, 0xb8, 0xe6, 0x88, 0x8f, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe7, 0xa7, 0x92,
	0xe6, 0x95, 0xb0, 0x52, 0x0f, 0x43, 0x61, 0x6e, 0x45, 0x78, 0x69, 0x74, 0x47, 0x61, 0x6d, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x59, 0x0a, 0x10, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x61, 0x6e, 0x6b,
	0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2d,
	0xea, 0xb5, 0x18, 0x18, 0xe6, 0x88, 0xbf, 0xe9, 0x97, 0xb4, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d,
	0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xf2, 0xb5, 0x18, 0x0d,
	0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x10, 0x53,
	0x68, 0x6f, 0x77, 0x52, 0x61, 0x6e, 0x6b, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x43, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x53, 0x65, 0x63, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0xea, 0xb5, 0x18, 0x1b, 0xe7, 0xbb, 0x93, 0xe7, 0xae,
	0x97, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x91, 0xe6, 0xb8, 0xb8, 0xe6, 0x88, 0x8f, 0xe6, 0x97, 0xb6,
	0xe9, 0x95, 0xbf, 0xe7, 0xa7, 0x92, 0x52, 0x0c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x69,
	0x6e, 0x53, 0x65, 0x63, 0x12, 0x46, 0x0a, 0x0f, 0x49, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1c, 0xea,
	0xb5, 0x18, 0x18, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba, 0xe6,
	0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x0f, 0x49, 0x73, 0x53,
	0x68, 0x6f, 0x77, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x12, 0x4c, 0x0a, 0x12,
	0x49, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe6, 0x98,
	0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x85, 0x81, 0xe8, 0xae, 0xb8, 0xe5, 0x8f, 0x91, 0xe9, 0x80, 0x81,
	0xe6, 0x88, 0x98, 0xe7, 0xbb, 0xa9, 0x52, 0x12, 0x49, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x69, 0x0a, 0x13, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x37, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x88, 0x98,
	0xe7, 0xbb, 0xa9, 0xe7, 0xbb, 0x9f, 0xe8, 0xae, 0xa1, 0xe6, 0x96, 0xb9, 0xe5, 0xbc, 0x8f, 0xf2,
	0xb5, 0x18, 0x1d, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x13, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x45, 0x8a, 0x97, 0x22, 0x12, 0x53, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x49, 0x44, 0x2c, 0x20, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x92, 0x97, 0x22,
	0x08, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x92, 0x97, 0x22, 0x17, 0x53, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x49, 0x44, 0x2c, 0x20, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x54,
	0x68, 0x65, 0x6d, 0x65, 0x98, 0x97, 0x22, 0x02, 0xf0, 0x97, 0x22, 0x01, 0x22, 0x7d, 0x0a, 0x0f,
	0x52, 0x65, 0x73, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x4a, 0x0a, 0x0c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x47, 0x41, 0x4d, 0x45, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe8, 0xaf, 0xad, 0xe8, 0xa8, 0x80, 0x52, 0x0c, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x54,
	0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe6,
	0x96, 0x87, 0xe6, 0x9c, 0xac, 0x52, 0x04, 0x54, 0x65, 0x78, 0x74, 0x22, 0xcd, 0x0d, 0x0a, 0x16,
	0x52, 0x65, 0x73, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x08, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe8, 0xb5,
	0x9b, 0xe5, 0xad, 0xa3, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x08, 0x53, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x71, 0x0a, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x54, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x52, 0x65,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x42,
	0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x48, 0x45, 0x4d, 0x45, 0x42, 0x29, 0xea,
	0xb5, 0x18, 0x06, 0xe4, 0xb8, 0xbb, 0xe9, 0xa2, 0x98, 0xc8, 0xc1, 0x18, 0x02, 0xf2, 0xb5, 0x18,
	0x17, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x42, 0x49, 0x47, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x48, 0x45, 0x4d, 0x45, 0x52, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x54, 0x68, 0x65, 0x6d, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c,
	0xe4, 0xb8, 0xbb, 0xe9, 0xa2, 0x98, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xf8, 0xb5, 0x18, 0x01,
	0x52, 0x09, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x47,
	0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0xea,
	0xb5, 0x18, 0x06, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xc8, 0xc1, 0x18, 0x03, 0xf2, 0xb5, 0x18,
	0x0d, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x08,
	0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x47, 0x61, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15,
	0xea, 0xb5, 0x18, 0x0d, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0,
	0x31, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x0c, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x0d,
	0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x32, 0xf8, 0xb5, 0x18,
	0x01, 0x52, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x32,
	0x12, 0x7f, 0x0a, 0x12, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x70, 0x65, 0x6e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x52,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x42,
	0x2c, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0xe6, 0x96, 0xb9, 0xe5, 0xbc,
	0x8f, 0xf2, 0xb5, 0x18, 0x18, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x52, 0x12, 0x47,
	0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x36, 0x0a, 0x0a, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe4, 0xb8, 0xbb, 0xe9, 0xa2,
	0x98, 0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0x52, 0x0a, 0x54,
	0x68, 0x65, 0x6d, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x08, 0x54, 0x61, 0x62,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18,
	0x12, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba, 0xe6, 0x8e, 0x92,
	0xe5, 0xba, 0x8f, 0x52, 0x08, 0x54, 0x61, 0x62, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a,
	0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x0c, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x0f, 0x57, 0x65, 0x65,
	0x6b, 0x6c, 0x79, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x2c, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x98, 0x9f, 0xe6, 0x9c, 0x9f, 0xda, 0xb5,
	0x18, 0x1e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x57, 0x45, 0x45,
	0x4b, 0x4c, 0x59, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4e, 0x55, 0x4d,
	0x52, 0x0f, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x12, 0x39, 0x0a, 0x0b, 0x4e, 0x6f, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x70, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xea, 0xb5, 0x18, 0x0f, 0xe6, 0x9c, 0xaa, 0xe5,
	0xbc, 0x80, 0xe6, 0x94, 0xbe, 0xe6, 0x8f, 0x90, 0xe7, 0xa4, 0xba, 0xf8, 0xb5, 0x18, 0x01, 0x52,
	0x0b, 0x4e, 0x6f, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x70, 0x73, 0x12, 0x38, 0x0a, 0x0c,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x10, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xe5, 0x9b,
	0xbe, 0xe7, 0x89, 0x87, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x0c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0c, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0x52, 0x0c,
	0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0a,
	0x42, 0x67, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xe5, 0x9b, 0xbe, 0xe6,
	0xa0, 0x87, 0xe8, 0x83, 0x8c, 0xe6, 0x99, 0xaf, 0x52, 0x0a, 0x42, 0x67, 0x49, 0x63, 0x6f, 0x6e,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x3f, 0x0a, 0x10, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x4d, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x74, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13,
	0xea, 0xb5, 0x18, 0x0f, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xe9, 0x81, 0xae, 0xe7, 0xbd, 0xa9,
	0xe5, 0x9b, 0xbe, 0x52, 0x10, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x73,
	0x6b, 0x50, 0x61, 0x74, 0x68, 0x12, 0x45, 0x0a, 0x13, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xe5, 0x90,
	0x8d, 0xe7, 0xa7, 0xb0, 0xe5, 0x9b, 0xbe, 0x52, 0x13, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x0f,
	0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0x83, 0x8c, 0xe6, 0x99,
	0xaf, 0xe9, 0xa2, 0x9c, 0xe8, 0x89, 0xb2, 0x52, 0x0f, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x08, 0x49, 0x73, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c,
	0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0x52, 0x08, 0x49, 0x73,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x4f, 0x70, 0x65,
	0x6e, 0x54, 0x69, 0x70, 0x73, 0x53, 0x76, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c,
	0xea, 0xb5, 0x18, 0x18, 0x53, 0x76, 0x72, 0xe4, 0xb8, 0x8b, 0xe5, 0x8f, 0x91, 0xe6, 0x9c, 0xaa,
	0xe5, 0xbc, 0x80, 0xe6, 0x94, 0xbe, 0xe6, 0x8f, 0x90, 0xe7, 0xa4, 0xba, 0x52, 0x0e, 0x4e, 0x6f,
	0x74, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x70, 0x73, 0x53, 0x76, 0x72, 0x12, 0x5a, 0x0a, 0x16,
	0x4e, 0x6f, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x70, 0x73, 0x53, 0x76, 0x72, 0x4e, 0x6f,
	0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xea, 0xb5,
	0x18, 0x1e, 0x53, 0x76, 0x72, 0xe4, 0xb8, 0x8b, 0xe5, 0x8f, 0x91, 0xe6, 0x9c, 0xaa, 0xe5, 0xbc,
	0x80, 0xe6, 0x94, 0xbe, 0xe6, 0x8f, 0x90, 0xe7, 0xa4, 0xba, 0xe4, 0xbf, 0x9d, 0xe5, 0xba, 0x95,
	0x52, 0x16, 0x4e, 0x6f, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x70, 0x73, 0x53, 0x76, 0x72,
	0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x49, 0x73, 0x53, 0x68,
	0x6f, 0x77, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x19, 0xea, 0xb5, 0x18, 0x15, 0xe7, 0x99, 0xbe, 0xe5, 0xbc, 0xba, 0xe6, 0xa6, 0x9c, 0xe6, 0x98,
	0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba, 0x52, 0x0d, 0x49, 0x73, 0x53, 0x68,
	0x6f, 0x77, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x10, 0x49, 0x73, 0x53,
	0x68, 0x6f, 0x77, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x70, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe4,
	0xb9, 0x8b, 0xe6, 0x97, 0x85, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x98, 0xbe, 0xe7, 0xa4,
	0xba, 0x52, 0x10, 0x49, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54,
	0x72, 0x69, 0x70, 0x12, 0x57, 0x0a, 0x04, 0x54, 0x69, 0x70, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x42, 0x29, 0xea, 0xb5, 0x18,
	0x06, 0xe6, 0x8f, 0x90, 0xe7, 0xa4, 0xba, 0xda, 0xb5, 0x18, 0x1b, 0x4c, 0x65, 0x67, 0x61, 0x63,
	0x79, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41,
	0x47, 0x45, 0x5f, 0x43, 0x4e, 0x54, 0x52, 0x04, 0x54, 0x69, 0x70, 0x73, 0x3a, 0x2d, 0x8a, 0x97,
	0x22, 0x21, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x2c, 0x20, 0x47, 0x61, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x2c, 0x20, 0x47, 0x61, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x98, 0x97, 0x22, 0x02, 0xf0, 0x97, 0x22, 0x01, 0x22, 0x88, 0x03, 0x0a, 0x14,
	0x52, 0x65, 0x73, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x68,
	0x65, 0x72, 0x69, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x4f, 0x6c, 0x64, 0x53, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0b, 0xe8,
	0x80, 0x81, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x0b,
	0x4f, 0x6c, 0x64, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x0b, 0x4e,
	0x65, 0x77, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x0f, 0xea, 0xb5, 0x18, 0x0b, 0xe6, 0x96, 0xb0, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0x49,
	0x44, 0x52, 0x0b, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x49,
	0x0a, 0x0b, 0x4f, 0x6c, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x27, 0xea, 0xb5, 0x18, 0x0f, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe6,
	0x9c, 0xab, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xc8, 0xc1, 0x18, 0x02, 0xf2, 0xb5, 0x18, 0x0c,
	0x45, 0x50, 0x76, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x4f, 0x6c,
	0x64, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x3b, 0x0a, 0x0c, 0x4f, 0x6c, 0x64,
	0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x17, 0xea, 0xb5, 0x18, 0x0f, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe6, 0x9c, 0xab, 0xe9, 0x98,
	0xb6, 0xe6, 0x95, 0xb0, 0xc8, 0xc1, 0x18, 0x03, 0x52, 0x0c, 0x4f, 0x6c, 0x64, 0x52, 0x61, 0x6e,
	0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x45, 0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x52, 0x61, 0x6e,
	0x6b, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x23, 0xea, 0xb5, 0x18,
	0x0f, 0xe6, 0x96, 0xb0, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d,
	0xf2, 0xb5, 0x18, 0x0c, 0x45, 0x50, 0x76, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x4e, 0x65, 0x77, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x37, 0x0a,
	0x0c, 0x4e, 0x65, 0x77, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe6, 0x96, 0xb0, 0xe8, 0xb5, 0x9b, 0xe5,
	0xad, 0xa3, 0xe9, 0x98, 0xb6, 0xe6, 0x95, 0xb0, 0x52, 0x0c, 0x4e, 0x65, 0x77, 0x52, 0x61, 0x6e,
	0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xf0, 0x03, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x53, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x55, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x43, 0x4f, 0x4d, 0x5f, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x4c,
	0x41, 0x59, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe7,
	0x8e, 0xa9, 0xe5, 0xae, 0xb6, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xc8, 0xc1, 0x18, 0x01, 0x52,
	0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x60, 0x0a, 0x0d, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x4f, 0x4d,
	0x5f, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x43,
	0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x9d,
	0xa1, 0xe4, 0xbb, 0xb6, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xc8, 0xc1, 0x18, 0x02, 0x52, 0x0d,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xea, 0xb5, 0x18, 0x06, 0xe6, 0x96, 0x87, 0xe6, 0x9c, 0xac, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x61, 0x31, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x0b, 0xea, 0xb5, 0x18, 0x07, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x31, 0x52,
	0x05, 0x50, 0x61, 0x72, 0x61, 0x31, 0x12, 0x21, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x61, 0x32, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b, 0xea, 0xb5, 0x18, 0x07, 0xe5, 0x8f, 0x82, 0xe6, 0x95,
	0xb0, 0x32, 0x52, 0x05, 0x50, 0x61, 0x72, 0x61, 0x32, 0x12, 0x21, 0x0a, 0x05, 0x50, 0x61, 0x72,
	0x61, 0x33, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b, 0xea, 0xb5, 0x18, 0x07, 0xe5, 0x8f,
	0x82, 0xe6, 0x95, 0xb0, 0x33, 0x52, 0x05, 0x50, 0x61, 0x72, 0x61, 0x33, 0x12, 0x21, 0x0a, 0x05,
	0x50, 0x61, 0x72, 0x61, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b, 0xea, 0xb5, 0x18,
	0x07, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x34, 0x52, 0x05, 0x50, 0x61, 0x72, 0x61, 0x34, 0x12,
	0x36, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x98, 0xbe, 0xe7,
	0xa4, 0xba, 0xe6, 0x9d, 0x83, 0xe9, 0x87, 0x8d, 0x52, 0x0d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x30, 0x0a, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x0c, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe6, 0x9d, 0x83, 0xe9, 0x87, 0x8d, 0x52, 0x0a, 0x54,
	0x79, 0x70, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xfa, 0x01, 0x0a, 0x1c, 0x52, 0x65,
	0x73, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x73, 0x67, 0x12, 0x55, 0x0a, 0x0a, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x4f, 0x4d, 0x5f, 0x53, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x42,
	0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0x8e, 0xa9, 0xe5, 0xae, 0xb6, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x3b, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xea, 0xb5,
	0x18, 0x09, 0xe6, 0x80, 0xbb, 0xe7, 0xbb, 0x93, 0xe8, 0xaf, 0xad, 0x52, 0x11, 0x43, 0x6f, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x46,
	0x0a, 0x0f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x43, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe6, 0x9c, 0x80,
	0xe5, 0xa4, 0xa7, 0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba, 0xe6, 0x9d, 0xa1, 0xe7, 0x9b, 0xae, 0xe6,
	0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x0f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x43, 0x6e, 0x74, 0x22, 0x80, 0x06, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x37, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x52, 0x65, 0x73, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e,
	0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x06, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x49,
	0x0a, 0x0a, 0x52, 0x61, 0x6e, 0x6b, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73,
	0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x0a, 0x52,
	0x61, 0x6e, 0x6b, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x4b, 0x0a, 0x0c, 0x52, 0x61, 0x6e,
	0x6b, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x53, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x0c, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x61,
	0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x0c, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x52,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1,
	0x18, 0x00, 0x52, 0x0c, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x51, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x6e,
	0x68, 0x65, 0x72, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x52, 0x65,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52,
	0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00,
	0x52, 0x11, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x68, 0x65,
	0x72, 0x69, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x43,
	0x66, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x42, 0x04, 0xd2,
	0xc1, 0x18, 0x00, 0x52, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x66, 0x67,
	0x12, 0x45, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52,
	0x65, 0x73, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x42, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x0a, 0x50, 0x6c, 0x61,
	0x79, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x52,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x57, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x53, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e,
	0x67, 0x4d, 0x73, 0x67, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x10, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x5b, 0x0a, 0x12,
	0x49, 0x6e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x41, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x49, 0x6e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x61,
	0x6e, 0x6b, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x42,
	0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x12, 0x49, 0x6e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52,
	0x61, 0x6e, 0x6b, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x22, 0xc1, 0x03, 0x0a, 0x16, 0x52, 0x65,
	0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x15, 0xc8, 0xc1, 0x18, 0x01, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0xf2, 0xb5, 0x18, 0x07,
	0x45, 0x4d, 0x61, 0x69, 0x6c, 0x49, 0x44, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x0a, 0x53,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe5, 0x8f, 0x91, 0xe9, 0x80, 0x81, 0xe4, 0xba, 0xba, 0x52, 0x0a,
	0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x06, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x0b, 0x52, 0x65, 0x73, 0x4d, 0x61, 0x69, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0xa0,
	0x87, 0xe9, 0xa2, 0x98, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x22, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xea,
	0xb5, 0x18, 0x06, 0xe6, 0xad, 0xa3, 0xe6, 0x96, 0x87, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x34, 0x0a, 0x0c, 0x53, 0x61, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5,
	0xad, 0x98, 0xe5, 0x82, 0xa8, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0c, 0x53, 0x61, 0x76,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x08, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x4e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x0c, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x08, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x4e, 0x75, 0x6d, 0x12, 0x36, 0x0a, 0x0d, 0x42, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x55, 0x52, 0x4c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x0c, 0xe8, 0x83, 0x8c, 0xe6, 0x99, 0xaf, 0xe5, 0x9b, 0xbe, 0x55, 0x52, 0x4c,
	0x52, 0x0d, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x55, 0x52, 0x4c, 0x12,
	0x30, 0x0a, 0x0a, 0x53, 0x68, 0x6f, 0x77, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0xe6,
	0x9d, 0x83, 0xe9, 0x87, 0x8d, 0x52, 0x0a, 0x53, 0x68, 0x6f, 0x77, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x3a, 0x0a, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0x22, 0xd3, 0x01,
	0x0a, 0x14, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x61, 0x6e, 0x67, 0x4d, 0x61, 0x69, 0x6c, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x0c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x52,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x41, 0x4d, 0x45, 0x4c, 0x41, 0x4e, 0x47, 0x55,
	0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe8, 0xaf,
	0xad, 0xe8, 0xa8, 0x80, 0x52, 0x0c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe5, 0x8f, 0x91, 0xe9,
	0x80, 0x81, 0xe4, 0xba, 0xba, 0x52, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0xa0, 0x87, 0xe9, 0xa2, 0x98, 0x52, 0x05, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0xad, 0xa3, 0xe6, 0x96, 0x87, 0x52, 0x04, 0x42,
	0x6f, 0x64, 0x79, 0x22, 0xff, 0x04, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x4d, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xc8, 0xc1, 0x18, 0x01, 0xea, 0xb5,
	0x18, 0x02, 0x49, 0x44, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x0c, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe7,
	0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x07, 0x45, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x47, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x47, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x47, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x47, 0x65, 0x6e, 0x12, 0x46, 0x0a, 0x0a, 0x55, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x52,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xa7, 0xa3, 0xe9, 0x94, 0x81, 0xe6, 0x9d,
	0xa1, 0xe4, 0xbb, 0xb6, 0x52, 0x0a, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64,
	0x12, 0x64, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x4c, 0x61, 0x6e, 0x67, 0x4d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x42, 0x29, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0xda, 0xb5, 0x18,
	0x1b, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4e, 0x54, 0x52, 0x08, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x0c, 0x53, 0x61, 0x76, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe5, 0xad, 0x98, 0xe5, 0x82, 0xa8, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0c,
	0x53, 0x61, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x57, 0x0a, 0x05,
	0x41, 0x77, 0x61, 0x72, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x52, 0x65,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x42, 0x2b, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xda, 0xb5, 0x18,
	0x1d, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x4e, 0x55, 0x4d, 0x52, 0x05,
	0x41, 0x77, 0x61, 0x72, 0x64, 0x12, 0x36, 0x0a, 0x0d, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x55, 0x52, 0x4c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe8, 0x83, 0x8c, 0xe6, 0x99, 0xaf, 0xe5, 0x9b, 0xbe, 0x55, 0x52, 0x4c, 0x52, 0x0d,
	0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x55, 0x52, 0x4c, 0x12, 0x30, 0x0a,
	0x0a, 0x53, 0x68, 0x6f, 0x77, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0xe6, 0x9d, 0x83,
	0xe9, 0x87, 0x8d, 0x52, 0x0a, 0x53, 0x68, 0x6f, 0x77, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a,
	0x04, 0x88, 0xb5, 0x18, 0x01, 0x22, 0xe1, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x4d, 0x61, 0x69,
	0x6c, 0x53, 0x79, 0x73, 0x4f, 0x70, 0x74, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x0a, 0xc8, 0xc1, 0x18, 0x01, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x60, 0x0a, 0x19, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x69,
	0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x61, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x22, 0xea, 0xb5, 0x18, 0x1e, 0xe6, 0x9c, 0xaa, 0xe8,
	0xaf, 0xbb, 0xe9, 0x82, 0xae, 0xe4, 0xbb, 0xb6, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xbf,
	0x9d, 0xe5, 0xad, 0x98, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x19, 0x55, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x61, 0x76,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x12, 0x52, 0x65, 0x61, 0x64, 0x65, 0x64, 0x4d,
	0x61, 0x69, 0x6c, 0x53, 0x61, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe5, 0xb7, 0xb2, 0xe8, 0xaf, 0xbb, 0xe9, 0x82, 0xae,
	0xe4, 0xbb, 0xb6, 0xe4, 0xbf, 0x9d, 0xe5, 0xad, 0x98, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52,
	0x12, 0x52, 0x65, 0x61, 0x64, 0x65, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x53, 0x61, 0x76, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x3a, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x22, 0xd8, 0x01, 0x0a, 0x08, 0x4d, 0x61,
	0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x49, 0x0a, 0x0c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x52,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x42, 0x04, 0xd2,
	0xc1, 0x18, 0x00, 0x52, 0x0c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x69,
	0x6c, 0x12, 0x43, 0x0a, 0x0a, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4d, 0x61, 0x69, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x52, 0x65, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4d, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x0a, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x4d, 0x61, 0x69, 0x6c, 0x12, 0x3c, 0x0a, 0x0a, 0x4d, 0x61, 0x69, 0x6c, 0x53, 0x79,
	0x73, 0x4f, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x52, 0x65, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x4d, 0x61, 0x69, 0x6c, 0x53, 0x79, 0x73, 0x4f,
	0x70, 0x74, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x0a, 0x4d, 0x61, 0x69, 0x6c, 0x53, 0x79,
	0x73, 0x4f, 0x70, 0x74, 0x22, 0x94, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x54, 0x61, 0x6c, 0x6b,
	0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x43, 0x66, 0x67, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12,
	0x1e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea,
	0xb5, 0x18, 0x06, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18,
	0x02, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x04, 0x54,
	0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe6,
	0x96, 0x87, 0xe6, 0x9c, 0xac, 0x52, 0x04, 0x54, 0x65, 0x78, 0x74, 0x3a, 0x1e, 0x8a, 0x97, 0x22,
	0x02, 0x49, 0x44, 0x92, 0x97, 0x22, 0x04, 0x54, 0x79, 0x70, 0x65, 0x92, 0x97, 0x22, 0x04, 0x54,
	0x65, 0x78, 0x74, 0xf0, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x02, 0x22, 0x6b, 0x0a, 0x19, 0x52,
	0x65, 0x73, 0x54, 0x61, 0x6c, 0x6b, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x4d, 0x73, 0x67, 0x43, 0x66,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x96, 0x87, 0xe6, 0x9c, 0xac, 0xf8, 0xb5,
	0x18, 0x01, 0x52, 0x04, 0x54, 0x65, 0x78, 0x74, 0x3a, 0x0e, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44,
	0xf0, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x02, 0x22, 0x9d, 0x05, 0x0a, 0x1f, 0x52, 0x65, 0x73,
	0x54, 0x61, 0x6c, 0x6b, 0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x4d,
	0x73, 0x67, 0x43, 0x66, 0x67, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe7, 0x9f,
	0xad, 0xe8, 0xaf, 0xad, 0x49, 0x44, 0x52, 0x02, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x05, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe7,
	0x9f, 0xad, 0xe8, 0xaf, 0xad, 0xe9, 0xa1, 0xba, 0xe5, 0xba, 0x8f, 0x52, 0x05, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x2e, 0x0a, 0x06, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x0e, 0xe5, 0xaf, 0xb9, 0xe5, 0xba, 0x94, 0xe6, 0xa3,
	0x8b, 0xe6, 0x89, 0x8b, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x06, 0x4c, 0x6f, 0x72, 0x64,
	0x49, 0x44, 0x12, 0x2a, 0x0a, 0x06, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0xe5, 0xaf, 0xb9, 0xe5, 0xba, 0x94, 0xe7, 0x9a,
	0xae, 0xe8, 0x82, 0xa4, 0x49, 0x44, 0x52, 0x06, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x28,
	0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5,
	0x18, 0x0c, 0xe7, 0x9f, 0xad, 0xe8, 0xaf, 0xad, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0xf8, 0xb5,
	0x18, 0x01, 0x52, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x26, 0x0a, 0x05, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xaf, 0xb9,
	0xe5, 0xba, 0x94, 0xe8, 0xaf, 0xad, 0xe9, 0x9f, 0xb3, 0x52, 0x05, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x12, 0x3a, 0x0a, 0x0c, 0x49, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x98, 0xaf, 0xe5,
	0x90, 0xa6, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe8, 0xa7, 0xa3, 0xe9, 0x94, 0x81, 0x52, 0x0c,
	0x49, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2a, 0x0a, 0x07,
	0x55, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea,
	0xb5, 0x18, 0x0c, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe5, 0x9c, 0xba, 0xe6, 0x99, 0xaf, 0x52,
	0x07, 0x55, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x62, 0x0a, 0x13, 0x61, 0x69, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x41, 0x49, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0x41, 0x49, 0xe4, 0xba, 0xa4, 0xe6, 0xb5,
	0x81, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x13, 0x61, 0x69, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x05,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18,
	0x0c, 0xe7, 0x9f, 0xad, 0xe8, 0xaf, 0xad, 0xe6, 0xa0, 0x87, 0xe9, 0xa2, 0x98, 0xf8, 0xb5, 0x18,
	0x01, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x49, 0x73, 0x49, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x49, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6,
	0x94, 0xb6, 0xe5, 0xbd, 0x95, 0xe8, 0xbf, 0x9b, 0xe6, 0xa1, 0xa3, 0xe6, 0xa1, 0x88, 0x52, 0x11,
	0x49, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x49, 0x6e, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x3a, 0x45, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0x92, 0x97, 0x22, 0x06, 0x4c, 0x6f, 0x72,
	0x64, 0x49, 0x44, 0x92, 0x97, 0x22, 0x07, 0x55, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x92, 0x97,
	0x22, 0x1a, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x2c, 0x61, 0x69, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0xf0, 0x97, 0x22, 0x01,
	0xf8, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x02, 0x22, 0x90, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x73,
	0x54, 0x61, 0x6c, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x66, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x2f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1f, 0xea, 0xb5, 0x18, 0x0e, 0xe8, 0x81, 0x8a, 0xe5, 0xa4, 0xa9, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0x49, 0x44, 0xf2, 0xb5, 0x18, 0x09, 0x54, 0x41, 0x4c, 0x4b, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x52, 0x02, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x0b, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe7, 0xbc, 0x93, 0xe5, 0xad, 0x98, 0xe6, 0x9d, 0xa1, 0xe6, 0x95, 0xb0, 0x52, 0x0b,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x3a, 0x0e, 0x8a, 0x97, 0x22,
	0x02, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x02, 0x22, 0xd6, 0x01, 0x0a, 0x16,
	0x52, 0x65, 0x73, 0x45, 0x78, 0x70, 0x54, 0x6f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x06, 0xe7, 0xad, 0x89, 0xe7, 0xba,
	0xa7, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x07,
	0x45, 0x78, 0x70, 0x4e, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea,
	0xb5, 0x18, 0x0c, 0xe5, 0x8d, 0x87, 0xe7, 0xba, 0xa7, 0xe7, 0xbb, 0x8f, 0xe9, 0xaa, 0x8c, 0x52,
	0x07, 0x45, 0x78, 0x70, 0x4e, 0x65, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x0b, 0x41, 0x77, 0x61, 0x72,
	0x64, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x12, 0xea,
	0xb5, 0x18, 0x0e, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0x49,
	0x44, 0x52, 0x0b, 0x41, 0x77, 0x61, 0x72, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x44, 0x12, 0x25,
	0x0a, 0x06, 0x54, 0x69, 0x70, 0x53, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d,
	0xea, 0xb5, 0x18, 0x09, 0xe6, 0x8f, 0x90, 0xe7, 0xa4, 0xba, 0xe8, 0xaf, 0xad, 0x52, 0x06, 0x54,
	0x69, 0x70, 0x53, 0x74, 0x72, 0x3a, 0x0d, 0x8a, 0x97, 0x22, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0xf0, 0x97, 0x22, 0x01, 0x22, 0xb9, 0x02, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x45, 0x78, 0x70, 0x42,
	0x75, 0x66, 0x44, 0x61, 0x74, 0x61, 0x62, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0xc8, 0xc1, 0x18,
	0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x06, 0x45, 0x78, 0x70, 0x42, 0x75, 0x66, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe7, 0xbb, 0x8f, 0xe9, 0xaa,
	0x8c, 0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x45,
	0x78, 0x70, 0x42, 0x75, 0x66, 0x12, 0x37, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xea, 0xb5, 0x18,
	0x0f, 0x42, 0x75, 0x66, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0x52, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x12, 0x33,
	0x0a, 0x0a, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0x42, 0x75, 0x66, 0xe7, 0xbb, 0x93, 0xe6, 0x9d,
	0x9f, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x72, 0x12, 0x65, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x47, 0xea, 0xb5, 0x18, 0x0f, 0x42, 0x75, 0x66, 0xe7,
	0x94, 0x9f, 0xe6, 0x95, 0x88, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xf2, 0xb5, 0x18, 0x0d, 0x43,
	0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0xda, 0xb5, 0x18, 0x1f,
	0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x45,
	0x58, 0x50, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x54, 0x59, 0x50, 0x45, 0x52,
	0x09, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x3a, 0x04, 0x88, 0xb5, 0x18, 0x01,
	0x22, 0x89, 0x01, 0x0a, 0x07, 0x45, 0x78, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x45, 0x0a, 0x0a,
	0x45, 0x78, 0x70, 0x54, 0x6f, 0x4c, 0x76, 0x6c, 0x55, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x45, 0x78,
	0x70, 0x54, 0x6f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69,
	0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x0a, 0x45, 0x78, 0x70, 0x54, 0x6f, 0x4c, 0x76,
	0x6c, 0x55, 0x70, 0x12, 0x37, 0x0a, 0x06, 0x45, 0x78, 0x70, 0x42, 0x75, 0x66, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65,
	0x73, 0x45, 0x78, 0x70, 0x42, 0x75, 0x66, 0x44, 0x61, 0x74, 0x61, 0x62, 0x69, 0x6e, 0x42, 0x04,
	0xd2, 0xc1, 0x18, 0x00, 0x52, 0x06, 0x45, 0x78, 0x70, 0x42, 0x75, 0x66, 0x22, 0xd3, 0x01, 0x0a,
	0x0b, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0xea, 0xb5, 0x18, 0x06,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x09, 0x45, 0x43, 0x6f, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x47, 0x6f, 0x61,
	0x6c, 0x43, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09,
	0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0xe5, 0x80, 0xbc, 0x52, 0x07, 0x47, 0x6f, 0x61, 0x6c, 0x43,
	0x6e, 0x74, 0x12, 0x6e, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0d, 0x42, 0x58, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xda, 0xb5, 0x18,
	0x21, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x43,
	0x4e, 0x54, 0xf2, 0xb5, 0x18, 0x25, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4d, 0x4f,
	0x4e, 0x45, 0x59, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x2c, 0x52, 0x45, 0x53, 0x5f,
	0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x05, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x22, 0x88, 0x06, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x47, 0x0a, 0x0a, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x27, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0xf2, 0xb5, 0x18, 0x0f, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x49, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x4f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12,
	0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe5, 0xbc, 0x80, 0xe6,
	0x94, 0xbe, 0x52, 0x0c, 0x49, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x65, 0x6e,
	0x12, 0x3a, 0x0a, 0x0c, 0x49, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x69, 0x70, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x98, 0xaf, 0xe5,
	0x90, 0xa6, 0xe8, 0xa7, 0xa3, 0xe9, 0x94, 0x81, 0xe6, 0x8f, 0x90, 0xe7, 0xa4, 0xba, 0x52, 0x0c,
	0x49, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x69, 0x70, 0x73, 0x12, 0x3a, 0x0a, 0x0a,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x69, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1a, 0xea, 0xb5, 0x18, 0x12, 0xe8, 0xa7, 0xa3, 0xe9, 0x94, 0x81, 0xe6, 0x8f, 0x90, 0xe7,
	0xa4, 0xba, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x0a, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x54, 0x69, 0x70, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x55, 0x6e, 0x4c, 0x6f,
	0x63, 0x6b, 0x54, 0x69, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xea, 0xb5,
	0x18, 0x15, 0xe8, 0xa7, 0xa3, 0xe9, 0x94, 0x81, 0xe5, 0x90, 0x8e, 0xe6, 0x8f, 0x90, 0xe7, 0xa4,
	0xba, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x0a, 0x55, 0x6e, 0x4c,
	0x6f, 0x63, 0x6b, 0x54, 0x69, 0x70, 0x73, 0x12, 0x49, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2d, 0xea, 0xb5, 0x18, 0x15, 0xe6,
	0x9c, 0xaa, 0xe8, 0xa7, 0xa3, 0xe9, 0x94, 0x81, 0xe8, 0xa1, 0xa8, 0xe7, 0x8e, 0xb0, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x10, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x59, 0x53, 0x4c,
	0x4f, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x63, 0x6f, 0x6e,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12,
	0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0xe8, 0xb7, 0xaf, 0xe5,
	0xbe, 0x84, 0x52, 0x0e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x44, 0x0a, 0x0e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x69, 0x70, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18,
	0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe6, 0x9c, 0x80, 0xe4, 0xbd, 0x8e, 0xe6, 0x8f, 0x90, 0xe7,
	0xa4, 0xba, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0x52, 0x0e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x54, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x67, 0x0a, 0x0a, 0x55, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x52,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x31, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xa7, 0xa3, 0xe9, 0x94, 0x81, 0xe6, 0x9d,
	0xa1, 0xe4, 0xbb, 0xb6, 0xda, 0xb5, 0x18, 0x1d, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x52,
	0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x43, 0x4f, 0x4e,
	0x44, 0x5f, 0x4e, 0x55, 0x4d, 0x52, 0x0a, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e,
	0x64, 0x12, 0x4a, 0x0a, 0x0f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x54, 0x69, 0x70, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xea, 0xb5, 0x18, 0x18,
	0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe5, 0x85, 0xb3, 0xe9, 0x97, 0xad, 0xe6, 0x8f, 0x90, 0xe7,
	0xa4, 0xba, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x0f, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x70, 0x73, 0x3a, 0x2e, 0x8a,
	0x97, 0x22, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x92, 0x97, 0x22,
	0x18, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x2c, 0x20, 0x49, 0x73, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x69, 0x70, 0x73, 0xf0, 0x97, 0x22, 0x01, 0x22, 0x55, 0x0a,
	0x0e, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x12,
	0x43, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65,
	0x73, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x82, 0x04, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x66, 0x67, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12,
	0x28, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x10, 0xea, 0xb5, 0x18, 0x08, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0xc8, 0xc1, 0x18,
	0x01, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x0b, 0x54, 0x61, 0x73,
	0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0f,
	0xea, 0xb5, 0x18, 0x0b, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe7, 0xbb, 0x84, 0x49, 0x44, 0x52,
	0x0b, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x04,
	0x49, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c,
	0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0x52, 0x04, 0x49, 0x63,
	0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0xa0, 0x87,
	0xe9, 0xa2, 0x98, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x28,
	0x0a, 0x04, 0x44, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5,
	0x18, 0x0c, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xf8, 0xb5,
	0x18, 0x01, 0x52, 0x04, 0x44, 0x65, 0x73, 0x63, 0x12, 0x46, 0x0a, 0x0a, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x52,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xae, 0x8c, 0xe6, 0x88, 0x90, 0xe6, 0x9d,
	0xa1, 0xe4, 0xbb, 0xb6, 0x52, 0x0a, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x64,
	0x12, 0x32, 0x0a, 0x0b, 0x41, 0x77, 0x61, 0x72, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x44, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xa5, 0x96, 0xe5, 0x8a,
	0xb1, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0x52, 0x0b, 0x41, 0x77, 0x61, 0x72, 0x64, 0x44, 0x72,
	0x6f, 0x70, 0x49, 0x44, 0x12, 0x49, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x29, 0xea, 0xb5, 0x18, 0x12, 0xe4, 0xbb,
	0xbb, 0xe5, 0x8a, 0xa1, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0xf2, 0xb5, 0x18, 0x0f, 0x43, 0x4f, 0x4d, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x52, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x29, 0x0a, 0x08, 0x50, 0x75, 0x72, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe7, 0xba, 0xaf, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87,
	0x52, 0x08, 0x50, 0x75, 0x72, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x3a, 0x1d, 0x8a, 0x97, 0x22, 0x06,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x92, 0x97, 0x22, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0x22, 0x96, 0x03, 0x0a, 0x1a, 0x52, 0x65,
	0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x08, 0xe5, 0x88, 0xb7, 0xe6, 0x96, 0xb0, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x09, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x08, 0x53, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08,
	0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0x49, 0x44, 0x52, 0x08, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x6a, 0x0a, 0x11, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x3c, 0xea,
	0xb5, 0x18, 0x0c, 0xe6, 0x97, 0xa5, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0xb1, 0xa0, 0xda,
	0xb5, 0x18, 0x28, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41,
	0x58, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x5f, 0x54, 0x41,
	0x53, 0x4b, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x4e, 0x55, 0x4d, 0x52, 0x11, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x12, 0x6d,
	0x0a, 0x12, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x44, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x3d, 0xea, 0xb5, 0x18, 0x0c,
	0xe5, 0x91, 0xa8, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0xb1, 0xa0, 0xda, 0xb5, 0x18, 0x29,
	0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x54,
	0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x4c, 0x59, 0x5f, 0x54, 0x41, 0x53, 0x4b,
	0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x4e, 0x55, 0x4d, 0x52, 0x12, 0x57, 0x65, 0x65, 0x6b, 0x6c,
	0x79, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x12, 0x2c, 0x0a,
	0x08, 0x49, 0x73, 0x4e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x96, 0xb0, 0xe6, 0x89,
	0x8b, 0x52, 0x08, 0x49, 0x73, 0x4e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x3a, 0x15, 0x8a, 0x97, 0x22,
	0x09, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0x98, 0x97,
	0x22, 0x02, 0x22, 0xfd, 0x02, 0x0a, 0x11, 0x53, 0x54, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x0f, 0x4d, 0x61, 0x78, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe6, 0xaf, 0x8f, 0xe6, 0x97, 0xa5, 0xe4, 0xbb, 0xbb,
	0xe5, 0x8a, 0xa1, 0xe6, 0x95, 0xb0, 0x52, 0x0f, 0x4d, 0x61, 0x78, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x54, 0x61, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x3f, 0x0a, 0x10, 0x4d, 0x61, 0x78, 0x57, 0x65,
	0x65, 0x6b, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe6, 0xaf, 0x8f, 0xe5, 0x91, 0xa8, 0xe4, 0xbb, 0xbb,
	0xe5, 0x8a, 0xa1, 0xe6, 0x95, 0xb0, 0x52, 0x10, 0x4d, 0x61, 0x78, 0x57, 0x65, 0x65, 0x6b, 0x6c,
	0x79, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x51, 0x0a, 0x16, 0x4d, 0x61, 0x78, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4e,
	0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe6, 0xaf,
	0x8f, 0xe6, 0x97, 0xa5, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe5, 0x88, 0xb7, 0xe6, 0x96, 0xb0,
	0xe6, 0x95, 0xb0, 0x52, 0x16, 0x4d, 0x61, 0x78, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4e, 0x75, 0x6d, 0x12, 0x53, 0x0a, 0x17, 0x4d,
	0x61, 0x78, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5,
	0x18, 0x15, 0xe6, 0xaf, 0x8f, 0xe5, 0x91, 0xa8, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe5, 0x88,
	0xb7, 0xe6, 0x96, 0xb0, 0xe6, 0x95, 0xb0, 0x52, 0x17, 0x4d, 0x61, 0x78, 0x57, 0x65, 0x65, 0x6b,
	0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4e, 0x75, 0x6d,
	0x12, 0x40, 0x0a, 0x0f, 0x48, 0x61, 0x6e, 0x67, 0x75, 0x70, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6,
	0x8c, 0x82, 0xe6, 0x9c, 0xba, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe7, 0xa7, 0x92, 0xe6, 0x95,
	0xb0, 0x52, 0x0f, 0x48, 0x61, 0x6e, 0x67, 0x75, 0x70, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x22, 0x9b, 0x0b, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x66, 0x67, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12,
	0x2c, 0x0a, 0x08, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0x49, 0x44, 0xc8,
	0xc1, 0x18, 0x01, 0x52, 0x08, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x2e, 0x0a,
	0x09, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe9, 0xa2, 0x86, 0xe5,
	0xa5, 0x96, 0x52, 0x09, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x77, 0x61, 0x72, 0x64, 0x12, 0x30, 0x0a,
	0x0a, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xa4, 0xa7, 0xe5, 0xa5, 0x96, 0xe7, 0xbe, 0x8e,
	0xe5, 0xae, 0xa3, 0x52, 0x0a, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x49, 0x63, 0x6f, 0x6e, 0x12,
	0x52, 0x0a, 0x0d, 0x48, 0x69, 0x67, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x52, 0x65, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x16, 0xea, 0xb5,
	0x18, 0x12, 0xe9, 0xab, 0x98, 0xe7, 0xba, 0xa7, 0xe6, 0x88, 0x98, 0xe4, 0xbb, 0xa4, 0xe6, 0xb6,
	0x88, 0xe8, 0x80, 0x97, 0x52, 0x0d, 0x48, 0x69, 0x67, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43,
	0x6f, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x75, 0x78, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x52,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe8, 0xb1, 0xaa, 0xe5, 0x8d, 0x8e, 0xe6, 0x88,
	0x98, 0xe4, 0xbb, 0xa4, 0xe6, 0xb6, 0x88, 0xe8, 0x80, 0x97, 0x52, 0x0f, 0x44, 0x65, 0x6c, 0x75,
	0x78, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x14, 0x48,
	0x69, 0x67, 0x68, 0x32, 0x44, 0x65, 0x6c, 0x75, 0x78, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43,
	0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x52, 0x65, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x42,
	0x1f, 0xea, 0xb5, 0x18, 0x1b, 0xe9, 0xab, 0x98, 0xe7, 0xba, 0xa7, 0xe5, 0x8d, 0x87, 0xe8, 0xb1,
	0xaa, 0xe5, 0x8d, 0x8e, 0xe6, 0x88, 0x98, 0xe4, 0xbb, 0xa4, 0xe6, 0xb6, 0x88, 0xe8, 0x80, 0x97,
	0x52, 0x14, 0x48, 0x69, 0x67, 0x68, 0x32, 0x44, 0x65, 0x6c, 0x75, 0x78, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x10, 0x48, 0x69, 0x67, 0x68, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x42, 0x75, 0x79, 0x44, 0x72, 0x6f, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe9, 0xab, 0x98, 0xe7, 0xba, 0xa7, 0xe6, 0x88, 0x98, 0xe4,
	0xbb, 0xa4, 0xe8, 0xb4, 0xad, 0xe4, 0xb9, 0xb0, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0x52, 0x10,
	0x48, 0x69, 0x67, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x75, 0x79, 0x44, 0x72, 0x6f, 0x70,
	0x12, 0x4c, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x75, 0x78, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42,
	0x75, 0x79, 0x44, 0x72, 0x6f, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5,
	0x18, 0x18, 0xe8, 0xb1, 0xaa, 0xe5, 0x8d, 0x8e, 0xe6, 0x88, 0x98, 0xe4, 0xbb, 0xa4, 0xe8, 0xb4,
	0xad, 0xe4, 0xb9, 0xb0, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0x52, 0x12, 0x44, 0x65, 0x6c, 0x75,
	0x78, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x75, 0x79, 0x44, 0x72, 0x6f, 0x70, 0x12, 0x4a,
	0x0a, 0x09, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x47,
	0x61, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe7, 0xad, 0x89,
	0xe7, 0xba, 0xa7, 0xe8, 0xb4, 0xad, 0xe4, 0xb9, 0xb0, 0xe6, 0xb6, 0x88, 0xe8, 0x80, 0x97, 0x52,
	0x09, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x42, 0x75,
	0x79, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0xe8, 0xb4, 0xad, 0xe4, 0xb9,
	0xb0, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0x52, 0x0b, 0x42,
	0x75, 0x79, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x34, 0x0a, 0x0c, 0x48, 0x61,
	0x6e, 0x67, 0x75, 0x70, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x8c, 0x82, 0xe6, 0x9c, 0xba, 0xe7, 0xa7, 0x92, 0xe6,
	0x95, 0xb0, 0x52, 0x0c, 0x48, 0x61, 0x6e, 0x67, 0x75, 0x70, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x12, 0x34, 0x0a, 0x09, 0x48, 0x61, 0x6e, 0x67, 0x75, 0x70, 0x45, 0x78, 0x70, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x8c, 0x82, 0xe6, 0x9c, 0xba, 0xe6,
	0x88, 0x98, 0xe4, 0xbb, 0xa4, 0xe7, 0xbb, 0x8f, 0xe9, 0xaa, 0x8c, 0x52, 0x09, 0x48, 0x61, 0x6e,
	0x67, 0x75, 0x70, 0x45, 0x78, 0x70, 0x12, 0x3d, 0x0a, 0x07, 0x54, 0x69, 0x70, 0x73, 0x4d, 0x61,
	0x78, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x23, 0xea, 0xb5, 0x18, 0x1f, 0xe6, 0x8c, 0x82,
	0xe6, 0x9c, 0xba, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0x2d, 0xe5, 0x85, 0xa8, 0xe5, 0xb1, 0x8f,
	0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0xe7, 0xb3, 0xbb, 0xe6, 0x95, 0xb0, 0x52, 0x07, 0x54, 0x69,
	0x70, 0x73, 0x4d, 0x61, 0x78, 0x12, 0x40, 0x0a, 0x0c, 0x48, 0x61, 0x6e, 0x67, 0x75, 0x70, 0x4d,
	0x69, 0x6e, 0x45, 0x78, 0x70, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18,
	0x18, 0xe6, 0x8c, 0x82, 0xe6, 0x9c, 0xba, 0xe5, 0x8d, 0x95, 0xe6, 0xac, 0xa1, 0xe6, 0x9c, 0x80,
	0xe5, 0xb0, 0x8f, 0xe7, 0xbb, 0x8f, 0xe9, 0xaa, 0x8c, 0x52, 0x0c, 0x48, 0x61, 0x6e, 0x67, 0x75,
	0x70, 0x4d, 0x69, 0x6e, 0x45, 0x78, 0x70, 0x12, 0x44, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x65,
	0x6e, 0x73, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x49, 0x44, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x18, 0xea, 0xb5, 0x18, 0x14, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe8, 0xa1, 0xa5,
	0xe5, 0x81, 0xbf, 0xe9, 0x81, 0x93, 0xe5, 0x85, 0xb7, 0x49, 0x44, 0x52, 0x10, 0x43, 0x6f, 0x6d,
	0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x49, 0x44, 0x12, 0x60, 0x0a,
	0x11, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x53, 0x54, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x99, 0xae, 0xe9, 0x80, 0x9a,
	0xe6, 0x88, 0x98, 0xe4, 0xbb, 0xa4, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0x52, 0x11, 0x4e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12,
	0x5c, 0x0a, 0x0f, 0x48, 0x69, 0x67, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x53, 0x54, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe9, 0xab, 0x98, 0xe7, 0xba, 0xa7,
	0xe6, 0x88, 0x98, 0xe4, 0xbb, 0xa4, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0x52, 0x0f, 0x48, 0x69,
	0x67, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x60, 0x0a,
	0x11, 0x44, 0x65, 0x6c, 0x75, 0x78, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x53, 0x54, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe8, 0xb1, 0xaa, 0xe5, 0x8d, 0x8e,
	0xe6, 0x88, 0x98, 0xe4, 0xbb, 0xa4, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0x52, 0x11, 0x44, 0x65,
	0x6c, 0x75, 0x78, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12,
	0x4d, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x4f, 0x66, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x73,
	0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x25, 0xea, 0xb5, 0x18, 0x21, 0xe7, 0xad, 0x89,
	0xe7, 0xba, 0xa7, 0xe8, 0xb4, 0xad, 0xe4, 0xb9, 0xb0, 0xe6, 0xb6, 0x88, 0xe8, 0x80, 0x97, 0xe8,
	0x8e, 0xb7, 0xe5, 0xbe, 0x97, 0xe7, 0x9a, 0x84, 0xe7, 0xbb, 0x8f, 0xe9, 0xaa, 0x8c, 0x52, 0x0e,
	0x45, 0x78, 0x70, 0x4f, 0x66, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x3a, 0x10,
	0x8a, 0x97, 0x22, 0x08, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01,
	0x22, 0xd6, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x61, 0x6e,
	0x67, 0x75, 0x70, 0x43, 0x66, 0x67, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x28, 0x0a,
	0x04, 0x48, 0x6f, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0xea, 0xb5, 0x18,
	0x0c, 0xe5, 0xb0, 0x8f, 0xe6, 0x97, 0xb6, 0xe5, 0x8c, 0xba, 0xe9, 0x97, 0xb4, 0xc8, 0xc1, 0x18,
	0x01, 0x52, 0x04, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x2e, 0x0a, 0x0a, 0x54, 0x69, 0x63, 0x6b, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e, 0xea, 0xb5, 0x18,
	0x0a, 0x74, 0x69, 0x63, 0x6b, 0xe9, 0xa2, 0x91, 0xe7, 0x8e, 0x87, 0x52, 0x0a, 0x54, 0x69, 0x63,
	0x6b, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x4e, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x36, 0xea, 0xb5, 0x18, 0x09, 0xe5, 0xa2, 0x9e,
	0xe9, 0x95, 0xbf, 0xe5, 0x80, 0xbc, 0xda, 0xb5, 0x18, 0x25, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x2e, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x48,
	0x41, 0x4e, 0x47, 0x55, 0x50, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x52,
	0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x3a, 0x10, 0x8a, 0x97, 0x22, 0x04, 0x48, 0x6f, 0x75,
	0x72, 0xf0, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x02, 0x22, 0xe3, 0x02, 0x0a, 0x15, 0x52, 0x65,
	0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x06, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0x52,
	0x06, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x0b, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x53, 0x68, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe7, 0x89, 0xb9, 0xe6, 0xae, 0x8a, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0x52, 0x0b,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x26, 0x0a, 0x05, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c,
	0xe7, 0xbc, 0xa9, 0xe6, 0x94, 0xbe, 0xe6, 0xaf, 0x94, 0xe4, 0xbe, 0x8b, 0x52, 0x05, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x4a, 0x75, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xb7, 0xb3, 0xe8, 0xbd, 0xac, 0xe8, 0xb7, 0xaf,
	0xe5, 0xbe, 0x84, 0x52, 0x04, 0x4a, 0x75, 0x6d, 0x70, 0x12, 0x2e, 0x0a, 0x06, 0x42, 0x47, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe8,
	0x83, 0x8c, 0xe6, 0x99, 0xaf, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe,
	0x84, 0x52, 0x06, 0x42, 0x47, 0x50, 0x61, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x0b, 0x53, 0x68, 0x6f,
	0x77, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0xe6, 0x9d, 0x83, 0xe9, 0x87, 0x8d,
	0x52, 0x0b, 0x53, 0x68, 0x6f, 0x77, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x40, 0x0a,
	0x0f, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe7, 0x89, 0xb9, 0xe6,
	0xae, 0x8a, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x0f,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x22,
	0xb5, 0x03, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x41, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x2a, 0x0a,
	0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0xea, 0xb5,
	0x18, 0x0c, 0xe6, 0x88, 0x98, 0xe4, 0xbb, 0xa4, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0xc8, 0xc1,
	0x18, 0x01, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x08, 0x53, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x08, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x02, 0x52, 0x08, 0x53,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x33, 0x0a, 0x07, 0x4e, 0x65, 0x65, 0x64, 0x45,
	0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe5, 0x8d,
	0x87, 0xe7, 0xba, 0xa7, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe7, 0x9a, 0x84, 0xe7, 0xbb, 0x8f,
	0xe9, 0xaa, 0x8c, 0x52, 0x07, 0x4e, 0x65, 0x65, 0x64, 0x45, 0x78, 0x70, 0x12, 0x82, 0x01, 0x0a,
	0x0f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x52, 0x65, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x72,
	0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x38, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x99, 0xae, 0xe9,
	0x80, 0x9a, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xda, 0xb5, 0x18, 0x24, 0x4c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e,
	0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x4e, 0x55, 0x4d,
	0x52, 0x0f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x12, 0x5b, 0x0a, 0x0d, 0x48, 0x69, 0x67, 0x68, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x44, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x0c, 0xe9, 0xab,
	0x98, 0xe7, 0xba, 0xa7, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xda, 0xb5, 0x18, 0x01, 0x31, 0x52,
	0x0d, 0x48, 0x69, 0x67, 0x68, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x3a, 0x27,
	0x8a, 0x97, 0x22, 0x0f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x2c, 0x20, 0x53, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x49, 0x44, 0x92, 0x97, 0x22, 0x08, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0xf0,
	0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x02, 0x22, 0xa3, 0x03, 0x0a, 0x09, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x49, 0x0a, 0x0c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x66, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x52, 0x65,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x66, 0x67, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1,
	0x18, 0x00, 0x52, 0x0c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x66, 0x67,
	0x12, 0x55, 0x0a, 0x10, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x52, 0x65, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x42,
	0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x10, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x4f, 0x0a, 0x0e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x66, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x66, 0x67, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x0e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x66, 0x67, 0x12, 0x52, 0x0a, 0x0f, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x77, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x0f, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x77, 0x61, 0x72, 0x64, 0x12, 0x4f, 0x0a, 0x0e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x61, 0x6e, 0x67, 0x75, 0x70, 0x43, 0x66, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52,
	0x65, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x61, 0x6e, 0x67, 0x75, 0x70, 0x43, 0x66, 0x67,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x0e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x61, 0x6e, 0x67, 0x75, 0x70, 0x43, 0x66, 0x67, 0x22, 0xe0, 0x07,
	0x0a, 0x0e, 0x52, 0x65, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e,
	0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5,
	0x18, 0x02, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x07,
	0x53, 0x68, 0x6f, 0x77, 0x45, 0x6c, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0xea,
	0xb5, 0x18, 0x09, 0xe8, 0xa1, 0xa8, 0xe7, 0x8e, 0xb0, 0xe5, 0x88, 0x86, 0x52, 0x07, 0x53, 0x68,
	0x6f, 0x77, 0x45, 0x6c, 0x6f, 0x12, 0x32, 0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1e, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xf2,
	0xb5, 0x18, 0x0c, 0x45, 0x50, 0x76, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0xc8,
	0xc1, 0x18, 0x02, 0x52, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x24, 0x0a, 0x05, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x06, 0xe9, 0x98,
	0xb6, 0xe6, 0x95, 0xb0, 0xc8, 0xc1, 0x18, 0x03, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x25, 0x0a, 0x06, 0x45, 0x6e, 0x64, 0x45, 0x6c, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe5, 0x88, 0x86, 0x52, 0x06,
	0x45, 0x6e, 0x64, 0x45, 0x6c, 0x6f, 0x12, 0x2c, 0x0a, 0x08, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x63,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0xae,
	0xb5, 0xe4, 0xbd, 0x8d, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0x52, 0x08, 0x52, 0x61, 0x6e, 0x6b,
	0x49, 0x63, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x09, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x63, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe9, 0x98, 0xb6,
	0xe6, 0x95, 0xb0, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0x52, 0x09, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x49, 0x63, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0b, 0x42, 0x69, 0x67, 0x52, 0x61, 0x6e, 0x6b, 0x49,
	0x63, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe6,
	0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xe5, 0xa4, 0xa7, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0x52, 0x0b,
	0x42, 0x69, 0x67, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x14, 0x52,
	0x61, 0x6e, 0x6b, 0x49, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48,
	0x65, 0x61, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x22, 0xea, 0xb5, 0x18, 0x1e, 0xe6,
	0x8e, 0x92, 0xe4, 0xbd, 0x8d, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xb1, 0x95, 0xe7, 0xa4,
	0xba, 0xe7, 0x8e, 0xa9, 0xe5, 0xae, 0xb6, 0xe5, 0xa4, 0xb4, 0xe5, 0x83, 0x8f, 0x52, 0x14, 0x52,
	0x61, 0x6e, 0x6b, 0x49, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48,
	0x65, 0x61, 0x64, 0x12, 0x36, 0x0a, 0x0a, 0x42, 0x67, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x63, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0xa4, 0xa7,
	0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0xe8, 0x83, 0x8c, 0xe6, 0x99, 0xaf, 0xe6, 0x9d, 0xbf, 0x52,
	0x0a, 0x42, 0x67, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0e, 0x43,
	0x61, 0x72, 0x65, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe4, 0xb8, 0xbb, 0xe9, 0xa1, 0xb5, 0xe5,
	0xb1, 0x95, 0xe7, 0xa4, 0xba, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0x52, 0x0e, 0x43, 0x61, 0x72,
	0x65, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0d, 0x43,
	0x69, 0x63, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x9c, 0x86, 0xe5, 0xbd, 0xa2, 0xe5, 0xb1,
	0x95, 0xe7, 0xa4, 0xba, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0x52, 0x0d, 0x43, 0x69, 0x63, 0x6c,
	0x65, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x19, 0x52, 0x61, 0x6e,
	0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x61, 0x78, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5,
	0x18, 0x18, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xe6, 0x88, 0xbf, 0xe9, 0x97, 0xb4, 0xe4, 0xba,
	0xba, 0xe6, 0x95, 0xb0, 0xe6, 0x8e, 0xa7, 0xe5, 0x88, 0xb6, 0x52, 0x19, 0x52, 0x61, 0x6e, 0x6b,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x64, 0x0a, 0x18, 0x49, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x52,
	0x6f, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x42, 0x28, 0xea, 0xb5, 0x18, 0x24, 0xe6, 0x88, 0xbf,
	0xe9, 0x97, 0xb4, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xe4, 0xba, 0xba, 0xe6, 0x95, 0xb0, 0xe9,
	0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba, 0xe5, 0xbc, 0x80, 0xe5, 0x85,
	0xb3, 0x52, 0x18, 0x49, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x6f, 0x6f, 0x6d, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x47, 0x0a, 0x11, 0x52,
	0x61, 0x6e, 0x6b, 0x49, 0x63, 0x6f, 0x6e, 0x49, 0x6e, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe7, 0x99, 0xbe, 0xe5,
	0xbc, 0xba, 0xe6, 0xa6, 0x9c, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0,
	0x87, 0x52, 0x11, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x63, 0x6f, 0x6e, 0x49, 0x6e, 0x48, 0x75, 0x6e,
	0x64, 0x72, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x0a, 0x4d, 0x69, 0x6e, 0x48, 0x69, 0x64, 0x65, 0x45,
	0x6c, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe9, 0x9a,
	0x90, 0xe8, 0x97, 0x8f, 0xe5, 0x88, 0x86, 0xe4, 0xb8, 0x8b, 0xe9, 0x99, 0x90, 0x52, 0x0a, 0x4d,
	0x69, 0x6e, 0x48, 0x69, 0x64, 0x65, 0x45, 0x6c, 0x6f, 0x3a, 0x25, 0x8a, 0x97, 0x22, 0x02, 0x49,
	0x44, 0x92, 0x97, 0x22, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x92, 0x97, 0x22, 0x0b, 0x52, 0x61, 0x6e,
	0x6b, 0x2c, 0x20, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0xf0, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x02,
	0x22, 0xb9, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x62, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44,
	0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0xae, 0xb5, 0xe4,
	0xbd, 0x8d, 0xf2, 0xb5, 0x18, 0x0c, 0x45, 0x50, 0x76, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe9, 0x98, 0xb6,
	0xe6, 0x95, 0xb0, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x07, 0x50, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x0c, 0xe9, 0x98, 0xb6, 0xe4, 0xbd, 0x8d, 0xe4, 0xbf, 0x9d, 0xe6, 0x8a, 0xa4, 0x52, 0x07, 0x50,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x3a, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x22, 0xf5, 0x02, 0x0a,
	0x0f, 0x52, 0x65, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x4b, 0x44, 0x61, 0x74, 0x61, 0x62, 0x69, 0x6e,
	0x12, 0x32, 0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1e,
	0xea, 0xb5, 0x18, 0x06, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xc8, 0xc1, 0x18, 0x01, 0xf2, 0xb5,
	0x18, 0x0c, 0x45, 0x50, 0x76, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x52, 0x61, 0x6e, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x45, 0x6c, 0x6f, 0x4b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x11, 0xea, 0xb5, 0x18, 0x0d, 0xe9, 0x9a, 0x90, 0xe8, 0x97, 0x8f, 0xe5, 0x88,
	0x86, 0x4b, 0xe5, 0x80, 0xbc, 0x52, 0x04, 0x45, 0x6c, 0x6f, 0x4b, 0x12, 0x34, 0x0a, 0x09, 0x45,
	0x6c, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16,
	0xea, 0xb5, 0x18, 0x12, 0xe9, 0x9a, 0x90, 0xe8, 0x97, 0x8f, 0xe5, 0x88, 0x86, 0xe4, 0xb8, 0xa5,
	0xe8, 0x8b, 0x9b, 0xe5, 0xba, 0xa6, 0x52, 0x09, 0x45, 0x6c, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x27, 0x0a, 0x05, 0x53, 0x68, 0x6f, 0x77, 0x4b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x11, 0xea, 0xb5, 0x18, 0x0d, 0xe8, 0xa1, 0xa8, 0xe7, 0x8e, 0xb0, 0xe5, 0x88, 0x86, 0x4b,
	0xe5, 0x80, 0xbc, 0x52, 0x05, 0x53, 0x68, 0x6f, 0x77, 0x4b, 0x12, 0x36, 0x0a, 0x0a, 0x53, 0x68,
	0x6f, 0x77, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16,
	0xea, 0xb5, 0x18, 0x12, 0xe8, 0xa1, 0xa8, 0xe7, 0x8e, 0xb0, 0xe5, 0x88, 0x86, 0xe4, 0xb8, 0xa5,
	0xe8, 0x8b, 0x9b, 0xe5, 0xba, 0xa6, 0x52, 0x0a, 0x53, 0x68, 0x6f, 0x77, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x33, 0x0a, 0x0a, 0x53, 0x68, 0x6f, 0x77, 0x57, 0x69, 0x6e, 0x56, 0x61, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe8, 0x83, 0x9c, 0xe5,
	0x88, 0xa9, 0xe5, 0xbc, 0x82, 0xe5, 0x8a, 0xa8, 0xe5, 0x80, 0xbc, 0x52, 0x0a, 0x53, 0x68, 0x6f,
	0x77, 0x57, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x12, 0x35, 0x0a, 0x0b, 0x53, 0x68, 0x6f, 0x77, 0x4c,
	0x6f, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0xea, 0xb5,
	0x18, 0x0f, 0xe6, 0x88, 0x98, 0xe8, 0xb4, 0xa5, 0xe5, 0xbc, 0x82, 0xe5, 0x8a, 0xa8, 0xe5, 0x80,
	0xbc, 0x52, 0x0b, 0x53, 0x68, 0x6f, 0x77, 0x4c, 0x6f, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x3a, 0x04,
	0x88, 0xb5, 0x18, 0x01, 0x22, 0xaa, 0x03, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x45, 0x6c, 0x6f, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x69, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x48,
	0x69, 0x64, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe9, 0x9a, 0x90, 0xe8, 0x97, 0x8f, 0xe5, 0x88, 0x86, 0xe5,
	0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe5, 0x80, 0xbc, 0x52, 0x0b, 0x48, 0x69, 0x64, 0x65, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x48, 0x69, 0x64, 0x65, 0x4d, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe9, 0x9a, 0x90, 0xe8,
	0x97, 0x8f, 0xe5, 0x88, 0x86, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x8f, 0xe5, 0x80, 0xbc, 0x52, 0x07,
	0x48, 0x69, 0x64, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x07, 0x48, 0x69, 0x64, 0x65, 0x4d,
	0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe9, 0x9a,
	0x90, 0xe8, 0x97, 0x8f, 0xe5, 0x88, 0x86, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe5, 0x80, 0xbc,
	0x52, 0x07, 0x48, 0x69, 0x64, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x38, 0x0a, 0x0b, 0x53, 0x68, 0x6f,
	0x77, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16,
	0xea, 0xb5, 0x18, 0x12, 0xe8, 0xa1, 0xa8, 0xe7, 0x8e, 0xb0, 0xe5, 0x88, 0x86, 0xe5, 0x88, 0x9d,
	0xe5, 0xa7, 0x8b, 0xe5, 0x80, 0xbc, 0x52, 0x0b, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x69, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe8, 0xa1, 0xa8, 0xe7, 0x8e, 0xb0,
	0xe5, 0x88, 0x86, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x8f, 0xe5, 0x80, 0xbc, 0x52, 0x07, 0x53, 0x68,
	0x6f, 0x77, 0x4d, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x07, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x61, 0x78,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe8, 0xa1, 0xa8, 0xe7,
	0x8e, 0xb0, 0xe5, 0x88, 0x86, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe5, 0x80, 0xbc, 0x52, 0x07,
	0x53, 0x68, 0x6f, 0x77, 0x4d, 0x61, 0x78, 0x12, 0x52, 0x0a, 0x0f, 0x4b, 0x69, 0x6e, 0x67, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x28, 0xea, 0xb5, 0x18, 0x24, 0xe7, 0x8e, 0x8b, 0xe8, 0x80, 0x85, 0xe6, 0xae, 0xb5, 0xe4,
	0xbd, 0x8d, 0xe7, 0xa7, 0xaf, 0xe5, 0x88, 0x86, 0xe6, 0x98, 0x9f, 0xe6, 0x98, 0x9f, 0xe8, 0xbd,
	0xac, 0xe6, 0x8d, 0xa2, 0xe5, 0x88, 0xbb, 0xe5, 0xba, 0xa6, 0x52, 0x0f, 0x4b, 0x69, 0x6e, 0x67,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x3a, 0x04, 0x88, 0xb5, 0x18,
	0x01, 0x22, 0x90, 0x02, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x41,
	0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x62, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x08, 0x53,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e, 0xea,
	0xb5, 0x18, 0x06, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x08, 0x53,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x3b, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0xea, 0xb5, 0x18, 0x06, 0xe6,
	0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xf2, 0xb5, 0x18, 0x0d, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0xc8, 0xc1, 0x18, 0x02, 0x52, 0x08, 0x47, 0x61, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1e, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xf2, 0xb5,
	0x18, 0x0c, 0x45, 0x50, 0x76, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0xc8, 0xc1,
	0x18, 0x03, 0x52, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x24, 0x0a, 0x05, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x90, 0x8d,
	0xe6, 0xac, 0xa1, 0xc8, 0xc1, 0x18, 0x04, 0x52, 0x05, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x2e,
	0x0a, 0x0b, 0x44, 0x72, 0x6f, 0x70, 0x41, 0x77, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0x49,
	0x44, 0x52, 0x0b, 0x44, 0x72, 0x6f, 0x70, 0x41, 0x77, 0x61, 0x72, 0x64, 0x49, 0x44, 0x3a, 0x04,
	0x88, 0xb5, 0x18, 0x01, 0x22, 0xf3, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a,
	0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x3d,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x29, 0xea, 0xb5,
	0x18, 0x0c, 0xe4, 0xbf, 0xae, 0xe6, 0xad, 0xa3, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5,
	0x18, 0x15, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a,
	0x08, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x21, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0x8e, 0xa9, 0xe6, 0xb3, 0x95, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc,
	0x8f, 0xf2, 0xb5, 0x18, 0x0d, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x52, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x05,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x42, 0x20, 0xea, 0xb5, 0x18,
	0x06, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xda, 0xb5, 0x18, 0x02, 0x31, 0x30, 0xf2, 0xb5, 0x18,
	0x0c, 0x45, 0x50, 0x76, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x22, 0x92, 0x03, 0x0a, 0x08, 0x52,
	0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x31, 0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x52, 0x65, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x42, 0x04,
	0xd2, 0xc1, 0x18, 0x00, 0x52, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x40, 0x0a, 0x07, 0x50, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x52, 0x65,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x62, 0x69, 0x6e, 0x42, 0x04, 0xd2,
	0xc1, 0x18, 0x00, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x12, 0x36, 0x0a, 0x06,
	0x4b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x52,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x4b, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x06, 0x4b, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x45, 0x6c, 0x6f, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x52, 0x65, 0x73, 0x45, 0x6c, 0x6f, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x08, 0x45, 0x6c, 0x6f, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0b, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x77, 0x61,
	0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x77, 0x61, 0x72,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x62, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x0b,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x77, 0x61, 0x72, 0x64, 0x12, 0x52, 0x0a, 0x0f, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52,
	0x65, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x0f,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xac, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x69, 0x6e, 0x12, 0x2d, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1d, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0xf2, 0xb5, 0x18, 0x13, 0x52,
	0x45, 0x53, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x52, 0x02, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x0b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xea, 0xb5, 0x18,
	0x03, 0xe5, 0x80, 0xbc, 0x52, 0x0b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2f, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe5, 0xad, 0x97, 0xe7,
	0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0x52, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x0a, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0x22, 0x8b,
	0x01, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65,
	0x50, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x2c, 0x0a,
	0x03, 0x43, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0xea, 0xb5, 0x18, 0x12,
	0xe8, 0xbf, 0x9e, 0xe7, 0xbb, 0xad, 0xe6, 0x8b, 0x92, 0xe7, 0xbb, 0x9d, 0xe6, 0xac, 0xa1, 0xe6,
	0x95, 0xb0, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x03, 0x43, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x0b, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0xa6, 0x81, 0xe8, 0xb5, 0x9b, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0x52, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x3a,
	0x0b, 0x8a, 0x97, 0x22, 0x03, 0x43, 0x6e, 0x74, 0xf0, 0x97, 0x22, 0x01, 0x22, 0x9c, 0x01, 0x0a,
	0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x4d, 0x0a, 0x0c, 0x52, 0x65, 0x66,
	0x75, 0x73, 0x65, 0x50, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x52, 0x6f, 0x6f,
	0x6d, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x50, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x0c, 0x52, 0x65, 0x66, 0x75,
	0x73, 0x65, 0x50, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x41, 0x0a, 0x09, 0x52, 0x61, 0x6e, 0x6b,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x52, 0x65,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x61,
	0x6e, 0x6b, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x66, 0x67, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00,
	0x52, 0x09, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x3f, 0x0a, 0x15, 0x52,
	0x65, 0x73, 0x5f, 0x43, 0x68, 0x65, 0x73, 0x73, 0x5f, 0x53, 0x6c, 0x6f, 0x74, 0x5f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x12, 0x26, 0x0a, 0x07, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe6, 0x8a, 0x80, 0xe8, 0x83,
	0xbd, 0x49, 0x44, 0x52, 0x07, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x44, 0x22, 0x89, 0x01, 0x0a,
	0x14, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x43, 0x68, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x05, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0xb0, 0xba, 0xe5, 0xaf, 0xb8,
	0x52, 0x05, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x01, 0x58, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x0b, 0xea, 0xb5, 0x18, 0x07, 0xe5, 0x81, 0x8f, 0xe7, 0xa7, 0xbb, 0x58, 0x52,
	0x01, 0x58, 0x12, 0x19, 0x0a, 0x01, 0x59, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xea,
	0xb5, 0x18, 0x07, 0xe5, 0x81, 0x8f, 0xe7, 0xa7, 0xbb, 0x59, 0x52, 0x01, 0x59, 0x12, 0x19, 0x0a,
	0x01, 0x5a, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xea, 0xb5, 0x18, 0x07, 0xe5, 0x81,
	0x8f, 0xe7, 0xa7, 0xbb, 0x5a, 0x52, 0x01, 0x5a, 0x22, 0x40, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x44,
	0x54, 0x5f, 0x43, 0x68, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x28, 0x0a, 0x09, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0xa7, 0xbd, 0xe4, 0xbd, 0x8d, 0x52,
	0x09, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x6c, 0x6f, 0x74, 0x22, 0x71, 0x0a, 0x13, 0x52, 0x65,
	0x73, 0x44, 0x54, 0x5f, 0x43, 0x68, 0x65, 0x73, 0x73, 0x46, 0x75, 0x6e, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x17, 0xea, 0xb5, 0x18, 0x06, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x09, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d,
	0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x42, 0x15,
	0xea, 0xb5, 0x18, 0x0c, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0,
	0xda, 0xb5, 0x18, 0x01, 0x32, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xb8, 0x2b,
	0x0a, 0x17, 0x52, 0x65, 0x73, 0x43, 0x68, 0x65, 0x73, 0x73, 0x48, 0x65, 0x72, 0x6f, 0x43, 0x6f,
	0x6e, 0x66, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x06, 0x48, 0x65, 0x72,
	0x6f, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x02, 0x49,
	0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x06, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x44, 0x12, 0x30, 0x0a,
	0x10, 0x53, 0x76, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x55, 0x6e, 0x69, 0x71, 0x49,
	0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0xc8, 0xc1, 0x18, 0x02, 0x52, 0x10, 0x53,
	0x76, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x55, 0x6e, 0x69, 0x71, 0x49, 0x44, 0x12,
	0x28, 0x0a, 0x09, 0x48, 0x65, 0x72, 0x6f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0x52, 0x09,
	0x48, 0x65, 0x72, 0x6f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2d, 0x0a, 0x08, 0x48, 0x65, 0x72,
	0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xea, 0xb5, 0x18,
	0x09, 0xe6, 0xad, 0xa6, 0xe5, 0xb0, 0x86, 0xe5, 0x90, 0x8d, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x08,
	0x48, 0x65, 0x72, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x48, 0x65, 0x72, 0x6f,
	0x44, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe8,
	0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xf8, 0xb5, 0x18, 0x01, 0x52,
	0x07, 0x48, 0x65, 0x72, 0x6f, 0x44, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x08, 0x48, 0x65, 0x72, 0x6f,
	0x49, 0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c,
	0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe5, 0x9b, 0xbe, 0xe7, 0x89, 0x87, 0x52, 0x08, 0x48, 0x65,
	0x72, 0x6f, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x8d, 0x01, 0x0a, 0x0d, 0x43, 0x68, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c,
	0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x42, 0x4d, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0xa3,
	0x8b, 0xe5, 0xad, 0x90, 0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a, 0xda, 0xb5, 0x18, 0x26, 0x4c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x48, 0x45,
	0x53, 0x53, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x52, 0x45, 0x4c, 0x41,
	0x54, 0x49, 0x56, 0x45, 0xf2, 0xb5, 0x18, 0x0f, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x0d, 0x43, 0x68, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x48, 0x65, 0x72, 0x6f, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x0c, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe5, 0x93, 0x81, 0xe8, 0xb4, 0xa8, 0x52, 0x0b, 0x48,
	0x65, 0x72, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x08, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5,
	0x18, 0x08, 0xe6, 0x99, 0xae, 0xe6, 0x94, 0xbb, 0x49, 0x44, 0x52, 0x08, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x49, 0x64, 0x12, 0x67, 0x0a, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73,
	0x5f, 0x43, 0x68, 0x65, 0x73, 0x73, 0x5f, 0x53, 0x6c, 0x6f, 0x74, 0x5f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x42, 0x33, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0xa7, 0xbd, 0xe4, 0xbd, 0x8d, 0xda, 0xb5,
	0x18, 0x25, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58,
	0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x53, 0x4b, 0x49, 0x4c,
	0x4c, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x20, 0x0a,
	0x02, 0x48, 0x50, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5,
	0x9f, 0xba, 0xe7, 0xa1, 0x80, 0xe7, 0x94, 0x9f, 0xe5, 0x91, 0xbd, 0x52, 0x02, 0x48, 0x50, 0x12,
	0x31, 0x0a, 0x09, 0x50, 0x68, 0x79, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe5, 0x9f, 0xba, 0xe7, 0xa1, 0x80, 0xe6, 0x94,
	0xbb, 0xe5, 0x87, 0xbb, 0xe5, 0x8a, 0x9b, 0x52, 0x09, 0x50, 0x68, 0x79, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x12, 0x34, 0x0a, 0x09, 0x4d, 0x61, 0x67, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x9f, 0xba, 0xe7, 0xa1,
	0x80, 0xe6, 0xb3, 0x95, 0xe6, 0x9c, 0xaf, 0xe5, 0xbc, 0xba, 0xe5, 0xba, 0xa6, 0x52, 0x09, 0x4d,
	0x61, 0x67, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x30, 0x0a, 0x0a, 0x50, 0x68, 0x79, 0x44,
	0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe5, 0x9f, 0xba, 0xe7, 0xa1, 0x80, 0xe6, 0x8a, 0xa4, 0xe7, 0x94, 0xb2, 0x52, 0x0a,
	0x50, 0x68, 0x79, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x4d, 0x61,
	0x67, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x9f, 0xba, 0xe7, 0xa1, 0x80, 0xe6, 0x8a, 0x97, 0xe6, 0x80, 0xa7,
	0x52, 0x0a, 0x4d, 0x61, 0x67, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x09,
	0x4d, 0x6f, 0x76, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x9f, 0xba, 0xe7, 0xa1, 0x80, 0xe7, 0xa7, 0xbb, 0xe5, 0x8a,
	0xa8, 0xe9, 0x80, 0x9f, 0xe5, 0xba, 0xa6, 0x52, 0x09, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x9f, 0xba,
	0xe7, 0xa1, 0x80, 0xe6, 0x94, 0xbb, 0xe5, 0x87, 0xbb, 0xe9, 0x80, 0x9f, 0xe5, 0xba, 0xa6, 0x52,
	0x0b, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x0c,
	0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe5, 0x9f, 0xba, 0xe7, 0xa1, 0x80, 0xe6, 0x9a,
	0xb4, 0xe5, 0x87, 0xbb, 0xe7, 0x8e, 0x87, 0x52, 0x0c, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x52, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x0e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea,
	0xb5, 0x18, 0x12, 0xe5, 0x9f, 0xba, 0xe7, 0xa1, 0x80, 0xe6, 0x9a, 0xb4, 0xe5, 0x87, 0xbb, 0xe6,
	0x95, 0x88, 0xe6, 0x9e, 0x9c, 0x52, 0x0e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x3f, 0x0a, 0x10, 0x49, 0x73, 0x4e, 0x6f, 0x74, 0x53, 0x68,
	0x6f, 0x77, 0x49, 0x6e, 0x41, 0x74, 0x6c, 0x61, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe5, 0x9b, 0xbe, 0xe9, 0x89, 0xb4, 0xe4, 0xb8, 0x8d, 0xe5, 0xb1,
	0x95, 0xe7, 0xa4, 0xba, 0x52, 0x10, 0x49, 0x73, 0x4e, 0x6f, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x49,
	0x6e, 0x41, 0x74, 0x6c, 0x61, 0x73, 0x12, 0x3c, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea,
	0xb5, 0x18, 0x12, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe8,
	0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x0d, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x06, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe7, 0x9a, 0xae, 0xe8, 0x82, 0xa4,
	0x49, 0x44, 0x52, 0x06, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x4a, 0x0a, 0x08, 0x46, 0x75,
	0x6e, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x52,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x43, 0x68, 0x65,
	0x73, 0x73, 0x46, 0x75, 0x6e, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c,
	0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe5, 0x8a, 0x9f, 0xe8, 0x83, 0xbd, 0x52, 0x08, 0x46, 0x75,
	0x6e, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x09, 0x48, 0x65, 0x72, 0x6f, 0x50, 0x61,
	0x69, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe8,
	0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe5, 0x8d, 0x8a, 0xe8, 0xba, 0xab, 0xe5, 0x83, 0x8f, 0x52, 0x09,
	0x48, 0x65, 0x72, 0x6f, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x48, 0x65, 0x72,
	0x6f, 0x45, 0x69, 0x6b, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe6, 0x8f, 0x92, 0xe7, 0x94, 0xbb, 0x52, 0x09,
	0x48, 0x65, 0x72, 0x6f, 0x45, 0x69, 0x6b, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0c, 0x48, 0x65, 0x72,
	0x6f, 0x50, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe5, 0x8d, 0xa1, 0xe9, 0x9d,
	0xa2, 0x52, 0x0c, 0x48, 0x65, 0x72, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x12,
	0x36, 0x0a, 0x0d, 0x48, 0x65, 0x72, 0x6f, 0x41, 0x74, 0x6c, 0x61, 0x73, 0x49, 0x63, 0x6f, 0x6e,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x9b, 0xbe, 0xe9,
	0x89, 0xb4, 0xe5, 0xa4, 0xb4, 0xe5, 0x83, 0x8f, 0x52, 0x0d, 0x48, 0x65, 0x72, 0x6f, 0x41, 0x74,
	0x6c, 0x61, 0x73, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0a, 0x4e, 0x61, 0x6d, 0x65, 0x50,
	0x69, 0x6e, 0x59, 0x69, 0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xea, 0xb5, 0x18,
	0x0f, 0xe6, 0xad, 0xa6, 0xe5, 0xb0, 0x86, 0xe5, 0x90, 0x8d, 0xe6, 0x8b, 0xbc, 0xe9, 0x9f, 0xb3,
	0x52, 0x0a, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x69, 0x6e, 0x59, 0x69, 0x6e, 0x12, 0x63, 0x0a, 0x11,
	0x43, 0x61, 0x72, 0x64, 0x48, 0x69, 0x67, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x43, 0x68, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0xa3, 0x8b, 0xe5,
	0xad, 0x90, 0xe6, 0x8a, 0xbd, 0xe5, 0x8d, 0xa1, 0xe9, 0xab, 0x98, 0xe6, 0xa8, 0xa1, 0x52, 0x11,
	0x43, 0x61, 0x72, 0x64, 0x48, 0x69, 0x67, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x61, 0x0a, 0x10, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x52, 0x65,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x43, 0x68, 0x65, 0x73,
	0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12,
	0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe6, 0x8a, 0xbd, 0xe5, 0x8d, 0xa1, 0xe4, 0xbd, 0x8e, 0xe6,
	0xa8, 0xa1, 0x52, 0x10, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x09, 0x4d, 0x65, 0x73, 0x68, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x18, 0x68, 0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0xa8, 0xa1,
	0xe5, 0x9e, 0x8b, 0xe7, 0xbc, 0xa9, 0xe6, 0x94, 0xbe, 0xe7, 0xb3, 0xbb, 0xe6, 0x95, 0xb0, 0x52,
	0x09, 0x4d, 0x65, 0x73, 0x68, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x4c, 0x0a, 0x12, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x69, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe6, 0x99, 0xae, 0xe6,
	0x94, 0xbb, 0xe6, 0x94, 0xbb, 0xe5, 0x87, 0xbb, 0xe8, 0xb7, 0x9d, 0xe7, 0xa6, 0xbb, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x12, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x44, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x80,
	0xa7, 0xe5, 0x88, 0xab, 0x52, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x0b,
	0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x6b, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0x52, 0x0b, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x57, 0x0a, 0x09, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x49, 0x44, 0x18, 0x6e, 0x20,
	0x03, 0x28, 0x05, 0x42, 0x39, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xa2, 0xab, 0xe5, 0x8a, 0xa8, 0xe6,
	0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xda, 0xb5, 0x18, 0x25, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e,
	0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x48, 0x45,
	0x52, 0x4f, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x09,
	0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x07, 0x4d, 0x61, 0x69,
	0x6e, 0x4a, 0x6f, 0x62, 0x18, 0x77, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c,
	0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe8, 0x81, 0x8c, 0xe4, 0xb8, 0x9a, 0x52, 0x07, 0x4d, 0x61,
	0x69, 0x6e, 0x4a, 0x6f, 0x62, 0x12, 0x2a, 0x0a, 0x08, 0x41, 0x49, 0x5f, 0x43, 0x68, 0x65, 0x73,
	0x73, 0x18, 0x79, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xea, 0xb5, 0x18, 0x0b, 0xe8, 0x87, 0xaa,
	0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0x41, 0x49, 0x52, 0x07, 0x41, 0x49, 0x43, 0x68, 0x65, 0x73,
	0x73, 0x12, 0x40, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12,
	0xe6, 0x94, 0xbb, 0xe5, 0x87, 0xbb, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0xe6, 0x8f, 0x8f, 0xe8,
	0xbf, 0xb0, 0x52, 0x0f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x4a, 0x0a, 0x0a, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2a, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0x83, 0xbd,
	0xe9, 0x87, 0x8f, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x16, 0x52, 0x45, 0x53,
	0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x52, 0x0a, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x30, 0x0a, 0x0a, 0x49, 0x6e, 0x69, 0x74, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x7c, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe8,
	0x83, 0xbd, 0xe9, 0x87, 0x8f, 0x52, 0x0a, 0x49, 0x6e, 0x69, 0x74, 0x45, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x12, 0x28, 0x0a, 0x06, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x7d, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe8, 0x83, 0xbd,
	0xe9, 0x87, 0x8f, 0x52, 0x06, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x3b, 0x0a, 0x0f, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x81,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x94, 0xbb, 0xe5, 0x87,
	0xbb, 0xe5, 0x9b, 0x9e, 0xe8, 0x93, 0x9d, 0x52, 0x0f, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x4d,
	0x70, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x11, 0x48, 0x75, 0x72, 0x74,
	0x4d, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x18, 0x82, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe5, 0x8f, 0x97, 0xe4, 0xbc, 0xa4,
	0xe5, 0x9b, 0x9e, 0xe8, 0x93, 0x9d, 0xe4, 0xb8, 0x87, 0xe5, 0x88, 0x86, 0xe6, 0xaf, 0x94, 0x52,
	0x11, 0x48, 0x75, 0x72, 0x74, 0x4d, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x47, 0x0a, 0x12, 0x48, 0x75, 0x72, 0x74, 0x4d, 0x70, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x8f, 0x97, 0xe4, 0xbc, 0xa4, 0xe5, 0x9b, 0x9e, 0xe8, 0x93,
	0x9d, 0xe4, 0xb8, 0x8a, 0xe9, 0x99, 0x90, 0x52, 0x12, 0x48, 0x75, 0x72, 0x74, 0x4d, 0x70, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x42,
	0x6f, 0x72, 0x6e, 0x5f, 0x41, 0x67, 0x65, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x87, 0xba, 0xe7, 0x94, 0x9f, 0xe5, 0x8a, 0xa8, 0xe7, 0x94, 0xbb,
	0x52, 0x07, 0x42, 0x6f, 0x72, 0x6e, 0x41, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x52, 0x65, 0x76,
	0x69, 0x76, 0x65, 0x5f, 0x41, 0x67, 0x65, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xa4, 0x8d, 0xe6, 0xb4, 0xbb, 0xe5, 0x8a, 0xa8, 0xe7, 0x94, 0xbb,
	0x52, 0x09, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x41, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x43,
	0x68, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x73, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x0c, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe4, 0xbd, 0x8d, 0xe7, 0xbd, 0xae,
	0x52, 0x08, 0x43, 0x68, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x73, 0x12, 0x31, 0x0a, 0x0a, 0x46, 0x72,
	0x6f, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x89, 0x8d, 0xe6, 0x8e, 0x92, 0xe8, 0xaf, 0x84, 0xe5, 0x88,
	0x86, 0x52, 0x0a, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2f, 0x0a,
	0x09, 0x42, 0x61, 0x63, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x88, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x90, 0x8e, 0xe6, 0x8e, 0x92, 0xe8, 0xaf, 0x84,
	0xe5, 0x88, 0x86, 0x52, 0x09, 0x42, 0x61, 0x63, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x38,
	0x0a, 0x0c, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x89,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe6, 0x88, 0x98, 0xe6, 0x96,
	0x97, 0xe5, 0x8a, 0x9b, 0xe8, 0xaf, 0x84, 0xe5, 0x88, 0x86, 0x52, 0x0c, 0x41, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x55, 0x6c, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x18, 0x91, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xa4, 0xa7, 0xe6, 0x8b, 0x9b, 0xe6, 0xa7, 0xbd, 0xe4, 0xbd,
	0x8d, 0x52, 0x0c, 0x55, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x12,
	0x47, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x73, 0x18, 0x92, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54,
	0x5f, 0x43, 0x68, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x0f, 0xea, 0xb5, 0x18, 0x06, 0xe8, 0xbf, 0x9e, 0xe6, 0x8b, 0x9b, 0xda, 0xb5, 0x18, 0x01, 0x36,
	0x52, 0x06, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x73, 0x12, 0x43, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x45, 0x71, 0x75, 0x69, 0x70, 0x49, 0x44, 0x18, 0x93, 0x01, 0x20,
	0x03, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x8e, 0xa8, 0xe8, 0x8d, 0x90, 0xe8,
	0xa3, 0x85, 0xe5, 0xa4, 0x87, 0xda, 0xb5, 0x18, 0x02, 0x32, 0x30, 0x52, 0x10, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x45, 0x71, 0x75, 0x69, 0x70, 0x49, 0x44, 0x12, 0x4f, 0x0a,
	0x19, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0xa1, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0xa6, 0x81, 0xe6, 0xad, 0xa2, 0xe4, 0xb8, 0x8b,
	0xe9, 0x98, 0xb5, 0x52, 0x19, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x4c, 0x65,
	0x61, 0x76, 0x65, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x39,
	0x0a, 0x0e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x72, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0xa2, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xa1, 0x80,
	0xe6, 0x9d, 0xa1, 0xe9, 0xab, 0x98, 0xe5, 0xba, 0xa6, 0x52, 0x0e, 0x42, 0x6c, 0x6f, 0x6f, 0x64,
	0x42, 0x61, 0x72, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x77, 0x61, 0x69,
	0x74, 0x46, 0x6f, 0x72, 0x46, 0x69, 0x67, 0x68, 0x74, 0x18, 0xa3, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97, 0xe7, 0xad, 0x89, 0xe5,
	0xbe, 0x85, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0c, 0x77, 0x61, 0x69, 0x74, 0x46, 0x6f,
	0x72, 0x46, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2c, 0x0a, 0x09, 0x62, 0x4d, 0x61, 0x6e, 0x61, 0x4c,
	0x6f, 0x63, 0x6b, 0x18, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09,
	0xe6, 0xb3, 0x95, 0xe5, 0x8a, 0x9b, 0xe9, 0x94, 0x81, 0x52, 0x09, 0x62, 0x4d, 0x61, 0x6e, 0x61,
	0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x6f, 0x0a, 0x13, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x57, 0x65, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0xa5, 0x01, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x51, 0x55,
	0x49, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x42, 0x27, 0xea, 0xb5, 0x18, 0x1e, 0xe6, 0x9e, 0x81,
	0xe4, 0xbd, 0x8e, 0xe5, 0x8f, 0xaf, 0xe8, 0x83, 0xbd, 0xe7, 0xa9, 0xbf, 0xe6, 0x88, 0xb4, 0xe8,
	0xa3, 0x85, 0xe5, 0xa4, 0x87, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xda, 0xb5, 0x18, 0x01, 0x32,
	0x52, 0x13, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x57, 0x65, 0x61,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x09, 0x41, 0x49, 0x41, 0x74, 0x74, 0x72, 0x5f,
	0x41, 0x44, 0x18, 0xa6, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x27, 0xea, 0xb5, 0x18, 0x23, 0x41,
	0x49, 0xe7, 0x94, 0xa8, 0xe6, 0x94, 0xbb, 0xe5, 0x87, 0xbb, 0xe5, 0x8a, 0x9b, 0xe5, 0x8a, 0xa0,
	0xe6, 0x88, 0x90, 0xe6, 0xb5, 0xae, 0xe5, 0x8a, 0xa8, 0xe7, 0x99, 0xbe, 0xe5, 0x88, 0x86, 0xe6,
	0xaf, 0x94, 0x52, 0x08, 0x41, 0x49, 0x41, 0x74, 0x74, 0x72, 0x41, 0x44, 0x12, 0x48, 0x0a, 0x09,
	0x41, 0x49, 0x41, 0x74, 0x74, 0x72, 0x5f, 0x41, 0x50, 0x18, 0xa7, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x2a, 0xea, 0xb5, 0x18, 0x26, 0x41, 0x49, 0xe7, 0x94, 0xa8, 0xe6, 0xb3, 0x95, 0xe6, 0x9c,
	0xaf, 0xe5, 0xbc, 0xba, 0xe5, 0xba, 0xa6, 0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90, 0xe6, 0xb5, 0xae,
	0xe5, 0x8a, 0xa8, 0xe7, 0x99, 0xbe, 0xe5, 0x88, 0x86, 0xe6, 0xaf, 0x94, 0x52, 0x08, 0x41, 0x49,
	0x41, 0x74, 0x74, 0x72, 0x41, 0x50, 0x12, 0x4a, 0x0a, 0x0d, 0x41, 0x49, 0x41, 0x74, 0x74, 0x72,
	0x5f, 0x41, 0x44, 0x43, 0x72, 0x69, 0x74, 0x18, 0xa8, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x24,
	0xea, 0xb5, 0x18, 0x20, 0x41, 0x49, 0xe7, 0x94, 0xa8, 0xe6, 0x9a, 0xb4, 0xe5, 0x87, 0xbb, 0xe5,
	0x8a, 0xa0, 0xe6, 0x88, 0x90, 0xe6, 0xb5, 0xae, 0xe5, 0x8a, 0xa8, 0xe7, 0x99, 0xbe, 0xe5, 0x88,
	0x86, 0xe6, 0xaf, 0x94, 0x52, 0x0c, 0x41, 0x49, 0x41, 0x74, 0x74, 0x72, 0x41, 0x44, 0x43, 0x72,
	0x69, 0x74, 0x12, 0x50, 0x0a, 0x10, 0x41, 0x49, 0x41, 0x74, 0x74, 0x72, 0x5f, 0x41, 0x44, 0x44,
	0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x18, 0xa9, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x24, 0xea,
	0xb5, 0x18, 0x20, 0x41, 0x49, 0xe7, 0x94, 0xa8, 0xe6, 0x8a, 0xa4, 0xe7, 0x94, 0xb2, 0xe5, 0x8a,
	0xa0, 0xe6, 0x88, 0x90, 0xe6, 0xb5, 0xae, 0xe5, 0x8a, 0xa8, 0xe7, 0x99, 0xbe, 0xe5, 0x88, 0x86,
	0xe6, 0xaf, 0x94, 0x52, 0x0f, 0x41, 0x49, 0x41, 0x74, 0x74, 0x72, 0x41, 0x44, 0x44, 0x65, 0x66,
	0x65, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x10, 0x41, 0x49, 0x41, 0x74, 0x74, 0x72, 0x5f, 0x41,
	0x50, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x24, 0xea, 0xb5, 0x18, 0x20, 0x41, 0x49, 0xe7, 0x94, 0xa8, 0xe9, 0xad, 0x94, 0xe6, 0x8a, 0x97,
	0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90, 0xe6, 0xb5, 0xae, 0xe5, 0x8a, 0xa8, 0xe7, 0x99, 0xbe, 0xe5,
	0x88, 0x86, 0xe6, 0xaf, 0x94, 0x52, 0x0f, 0x41, 0x49, 0x41, 0x74, 0x74, 0x72, 0x41, 0x50, 0x44,
	0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x41, 0x49, 0x41, 0x74, 0x74, 0x72,
	0x5f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0xab, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x27, 0xea,
	0xb5, 0x18, 0x23, 0x41, 0x49, 0xe7, 0x94, 0xa8, 0xe6, 0xb3, 0x95, 0xe5, 0x8a, 0x9b, 0xe5, 0x80,
	0xbc, 0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90, 0xe6, 0xb5, 0xae, 0xe5, 0x8a, 0xa8, 0xe7, 0x99, 0xbe,
	0xe5, 0x88, 0x86, 0xe6, 0xaf, 0x94, 0x52, 0x0b, 0x41, 0x49, 0x41, 0x74, 0x74, 0x72, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x0b, 0x41, 0x49, 0x41, 0x74, 0x74, 0x72, 0x5f, 0x41, 0x44,
	0x48, 0x70, 0x18, 0xac, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2a, 0xea, 0xb5, 0x18, 0x26, 0x41,
	0x49, 0xe7, 0x94, 0xa8, 0xe7, 0x89, 0xa9, 0xe7, 0x90, 0x86, 0xe5, 0x90, 0xb8, 0xe8, 0xa1, 0x80,
	0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90, 0xe6, 0xb5, 0xae, 0xe5, 0x8a, 0xa8, 0xe7, 0x99, 0xbe, 0xe5,
	0x88, 0x86, 0xe6, 0xaf, 0x94, 0x52, 0x0a, 0x41, 0x49, 0x41, 0x74, 0x74, 0x72, 0x41, 0x44, 0x48,
	0x70, 0x12, 0x4c, 0x0a, 0x0b, 0x41, 0x49, 0x41, 0x74, 0x74, 0x72, 0x5f, 0x41, 0x50, 0x48, 0x70,
	0x18, 0xad, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2a, 0xea, 0xb5, 0x18, 0x26, 0x41, 0x49, 0xe7,
	0x94, 0xa8, 0xe6, 0xb3, 0x95, 0xe6, 0x9c, 0xaf, 0xe5, 0x90, 0xb8, 0xe8, 0xa1, 0x80, 0xe5, 0x8a,
	0xa0, 0xe6, 0x88, 0x90, 0xe6, 0xb5, 0xae, 0xe5, 0x8a, 0xa8, 0xe7, 0x99, 0xbe, 0xe5, 0x88, 0x86,
	0xe6, 0xaf, 0x94, 0x52, 0x0a, 0x41, 0x49, 0x41, 0x74, 0x74, 0x72, 0x41, 0x50, 0x48, 0x70, 0x12,
	0x52, 0x0a, 0x0e, 0x41, 0x49, 0x41, 0x74, 0x74, 0x72, 0x5f, 0x41, 0x44, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x18, 0xae, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2a, 0xea, 0xb5, 0x18, 0x26, 0x41, 0x49,
	0xe7, 0x94, 0xa8, 0xe6, 0x94, 0xbb, 0xe5, 0x87, 0xbb, 0xe9, 0x80, 0x9f, 0xe5, 0xba, 0xa6, 0xe5,
	0x8a, 0xa0, 0xe6, 0x88, 0x90, 0xe6, 0xb5, 0xae, 0xe5, 0x8a, 0xa8, 0xe7, 0x99, 0xbe, 0xe5, 0x88,
	0x86, 0xe6, 0xaf, 0x94, 0x52, 0x0d, 0x41, 0x49, 0x41, 0x74, 0x74, 0x72, 0x41, 0x44, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x09, 0x41, 0x49, 0x41, 0x74, 0x74, 0x72, 0x5f, 0x48, 0x50,
	0x18, 0xaf, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x27, 0xea, 0xb5, 0x18, 0x23, 0x41, 0x49, 0xe7,
	0x94, 0xa8, 0xe7, 0x94, 0x9f, 0xe5, 0x91, 0xbd, 0xe5, 0x80, 0xbc, 0xe5, 0x8a, 0xa0, 0xe6, 0x88,
	0x90, 0xe6, 0xb5, 0xae, 0xe5, 0x8a, 0xa8, 0xe7, 0x99, 0xbe, 0xe5, 0x88, 0x86, 0xe6, 0xaf, 0x94,
	0x52, 0x08, 0x41, 0x49, 0x41, 0x74, 0x74, 0x72, 0x48, 0x50, 0x12, 0x39, 0x0a, 0x0b, 0x63, 0x61,
	0x6e, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x70, 0x73, 0x18, 0xb0, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x98, 0xbe, 0xe7,
	0xa4, 0xba, 0xe5, 0xbc, 0xb9, 0xe7, 0xaa, 0x97, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x53, 0x68, 0x6f,
	0x77, 0x54, 0x69, 0x70, 0x73, 0x12, 0x36, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x18, 0xb1, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x13, 0xea, 0xb5, 0x18,
	0x0f, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe8, 0xae, 0xa1, 0xe6, 0x95, 0xb0, 0xe5, 0x99, 0xa8,
	0x52, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a,
	0x11, 0x49, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x65, 0x72,
	0x67, 0x79, 0x18, 0xb2, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe8,
	0xae, 0xa1, 0xe6, 0x95, 0xb0, 0xe5, 0x99, 0xa8, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe8, 0x83,
	0xbd, 0xe9, 0x87, 0x8f, 0x52, 0x11, 0x49, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x3a, 0x0a, 0x0a, 0x4d, 0x61, 0x78, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0xb3, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x19, 0xea, 0xb5,
	0x18, 0x15, 0xe8, 0xae, 0xa1, 0xe6, 0x95, 0xb0, 0xe5, 0x99, 0xa8, 0xe6, 0x9c, 0x80, 0xe5, 0xa4,
	0xa7, 0xe8, 0x83, 0xbd, 0xe9, 0x87, 0x8f, 0x52, 0x0a, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x65, 0x77,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xea, 0xb5,
	0x18, 0x0f, 0xe4, 0xb8, 0x96, 0xe7, 0x95, 0x8c, 0xe8, 0xa7, 0x82, 0xe7, 0x9f, 0xad, 0xe5, 0x8f,
	0xa5, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x0e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x65, 0x77,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x4b, 0x0a, 0x09, 0x68, 0x65, 0x72, 0x6f, 0x4d, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0xb5, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x52, 0x65, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x48, 0x65, 0x72, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x15, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe6, 0xa8, 0xa1, 0xe5,
	0xbc, 0x8f, 0xda, 0xb5, 0x18, 0x01, 0x32, 0x52, 0x09, 0x68, 0x65, 0x72, 0x6f, 0x4d, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x4b, 0x0a, 0x14, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x70, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xb6, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x94, 0xbb, 0xe5, 0x87, 0xbb, 0xe5, 0x9b, 0x9e,
	0xe8, 0x93, 0x9d, 0xe4, 0xb8, 0x8a, 0xe9, 0x99, 0x90, 0x52, 0x14, 0x44, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x4d, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x37, 0x0a, 0x0d, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x50, 0x69, 0x63, 0x6b,
	0x18, 0xb7, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0xa6, 0x81,
	0xe6, 0xad, 0xa2, 0xe9, 0x80, 0x89, 0xe5, 0x8f, 0x96, 0x52, 0x0d, 0x46, 0x6f, 0x72, 0x62, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x50, 0x69, 0x63, 0x6b, 0x12, 0x41, 0x0a, 0x0f, 0x48, 0x65, 0x72, 0x6f,
	0x50, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x45, 0x66, 0x66, 0x18, 0xb8, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe5, 0x8d,
	0xa1, 0xe9, 0x9d, 0xa2, 0xe7, 0x89, 0xb9, 0xe6, 0x95, 0x88, 0x52, 0x0f, 0x48, 0x65, 0x72, 0x6f,
	0x50, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x45, 0x66, 0x66, 0x12, 0x44, 0x0a, 0x11, 0x48,
	0x65, 0x72, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x53, 0x70, 0x69, 0x6e, 0x65,
	0x18, 0xb9, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x11, 0xe8, 0x8b, 0xb1,
	0xe9, 0x9b, 0x84, 0xe5, 0x8d, 0xa1, 0xe9, 0x9d, 0xa2, 0x53, 0x70, 0x69, 0x6e, 0x65, 0x52, 0x11,
	0x48, 0x65, 0x72, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x53, 0x70, 0x69, 0x6e,
	0x65, 0x12, 0x50, 0x0a, 0x14, 0x48, 0x65, 0x72, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x53, 0x70, 0x69, 0x6e, 0x65, 0x45, 0x66, 0x66, 0x18, 0xba, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1b, 0xea, 0xb5, 0x18, 0x17, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe5, 0x8d, 0xa1, 0xe9,
	0x9d, 0xa2, 0x53, 0x70, 0x69, 0x6e, 0x65, 0xe7, 0x89, 0xb9, 0xe6, 0x95, 0x88, 0x52, 0x14, 0x48,
	0x65, 0x72, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x53, 0x70, 0x69, 0x6e, 0x65,
	0x45, 0x66, 0x66, 0x12, 0x40, 0x0a, 0x10, 0x49, 0x73, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x43, 0x68, 0x65, 0x73, 0x73, 0x18, 0xbb, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x13,
	0xea, 0xb5, 0x18, 0x0f, 0xe4, 0xb8, 0x8d, 0xe5, 0x8f, 0x82, 0xe4, 0xb8, 0x8e, 0xe7, 0xbb, 0x93,
	0xe7, 0xae, 0x97, 0x52, 0x10, 0x49, 0x73, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x43, 0x68, 0x65, 0x73, 0x73, 0x12, 0x35, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0xbc, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe7, 0xbb, 0x93, 0xe7, 0xae, 0x97, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0x52, 0x0c,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x0e,
	0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x18, 0xbd,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x8d, 0xa0, 0xe7, 0x94,
	0xa8, 0xe7, 0x9a, 0x84, 0xe4, 0xba, 0xba, 0xe5, 0x8f, 0xa3, 0xe6, 0x95, 0xb0, 0x52, 0x0e, 0x50,
	0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x3f, 0x0a,
	0x11, 0x48, 0x65, 0x72, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8,
	0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe5, 0x8d, 0xa1, 0xe6, 0xa1, 0x86, 0x52, 0x11, 0x48, 0x65, 0x72,
	0x6f, 0x50, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x38,
	0x0a, 0x05, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x18, 0xbf, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x4c, 0x61, 0x79, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0xb1, 0x82, 0xe7, 0xba,
	0xa7, 0x52, 0x05, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x15, 0x49, 0x6e, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0xc0, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe5, 0x8f,
	0xaf, 0xe4, 0xb8, 0x8a, 0xe5, 0x9c, 0xba, 0xe7, 0x9a, 0x84, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7,
	0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x15, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x88, 0x01,
	0x8a, 0x97, 0x22, 0x06, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x44, 0x92, 0x97, 0x22, 0x09, 0x48, 0x65,
	0x72, 0x6f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x92, 0x97, 0x22, 0x16, 0x48, 0x65, 0x72, 0x6f, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x2c, 0x20, 0x48, 0x65, 0x72, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x92, 0x97, 0x22, 0x1b, 0x48, 0x65, 0x72, 0x6f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x2c, 0x20,
	0x49, 0x73, 0x4e, 0x6f, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x41, 0x74, 0x6c, 0x61, 0x73,
	0x92, 0x97, 0x22, 0x28, 0x48, 0x65, 0x72, 0x6f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x2c, 0x20, 0x48,
	0x65, 0x72, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2c, 0x20, 0x49, 0x73, 0x4e, 0x6f,
	0x74, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x41, 0x74, 0x6c, 0x61, 0x73, 0xf0, 0x97, 0x22, 0x01,
	0xf8, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x02, 0x22, 0xcf, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x73,
	0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x27, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90,
	0xe5, 0x8a, 0x9f, 0xe8, 0x83, 0xbd, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x09,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x8e, 0x92, 0xe5, 0xba,
	0x8f, 0xe8, 0xa7, 0x84, 0xe5, 0x88, 0x99, 0xf2, 0xb5, 0x18, 0x08, 0x53, 0x6f, 0x72, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x08, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x29, 0x0a,
	0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe4, 0xbc, 0x98, 0xe5, 0x85, 0x88, 0xe7, 0xba, 0xa7, 0x52, 0x08,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x3a, 0x10, 0x8a, 0x97, 0x22, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x98, 0x97, 0x22, 0x01, 0xf8, 0x97, 0x22, 0x01, 0x22, 0x3d, 0x0a, 0x13, 0x52, 0x65,
	0x73, 0x5f, 0x50, 0x72, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x12, 0x26, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0x52, 0x0a, 0x50,
	0x72, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x49, 0x44, 0x22, 0x9b, 0x01, 0x0a, 0x10, 0x52, 0x65,
	0x73, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x12, 0x16,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xea, 0xb5, 0x18, 0x02,
	0x49, 0x44, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe8, 0xa2, 0xab, 0xe5, 0x8a, 0xa8,
	0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x04, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x43, 0x0a, 0x12, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x50, 0x61, 0x73, 0x73,
	0x69, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13,
	0xea, 0xb5, 0x18, 0x0f, 0xe5, 0x94, 0xaf, 0xe4, 0xb8, 0x80, 0xe8, 0xa2, 0xab, 0xe5, 0x8a, 0xa8,
	0xe7, 0xbb, 0x84, 0x52, 0x12, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x50, 0x61, 0x73, 0x73, 0x69,
	0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xbb, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0xa7, 0xbd, 0xe4, 0xbd, 0x8d, 0x52, 0x04, 0x53, 0x6c,
	0x6f, 0x74, 0x12, 0x23, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x09, 0xea, 0xb5, 0x18, 0x05, 0xe7, 0xbb, 0x84, 0x49, 0x44, 0x52, 0x07,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x03, 0x44, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0,
	0x52, 0x03, 0x44, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x65,
	0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe9, 0xa2,
	0x9d, 0xe5, 0xa4, 0x96, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x09, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x44, 0x65, 0x73, 0x63, 0x22, 0xe3, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x50, 0x61, 0x73,
	0x73, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x04, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x43, 0x0a, 0x12, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x50, 0x61, 0x73, 0x73, 0x69,
	0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0xea,
	0xb5, 0x18, 0x0f, 0xe5, 0x94, 0xaf, 0xe4, 0xb8, 0x80, 0xe8, 0xa2, 0xab, 0xe5, 0x8a, 0xa8, 0xe7,
	0xbb, 0x84, 0x52, 0x12, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x53, 0x0a, 0x15, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76,
	0x65, 0x52, 0x6d, 0x76, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x1d, 0xea, 0xb5, 0x18, 0x14, 0xe6, 0x8b, 0x94, 0xe9, 0x99,
	0xa4, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0x49, 0x44, 0xda,
	0xb5, 0x18, 0x01, 0x33, 0x52, 0x15, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x52, 0x6d, 0x76,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x49, 0x44, 0x22, 0x74, 0x0a, 0x0a, 0x4c,
	0x6f, 0x72, 0x64, 0x41, 0x49, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x24, 0x0a, 0x06, 0x4c, 0x6f, 0x72,
	0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe9,
	0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0x49, 0x44, 0x52, 0x06, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x12,
	0x30, 0x0a, 0x0a, 0x4c, 0x6f, 0x72, 0x64, 0x41, 0x49, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0x93, 0x9d, 0xe5, 0x9b, 0xbe, 0x41,
	0x49, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0a, 0x4c, 0x6f, 0x72, 0x64, 0x41, 0x49, 0x50, 0x61, 0x74,
	0x68, 0x3a, 0x0e, 0x8a, 0x97, 0x22, 0x06, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x44, 0xf8, 0x97, 0x22,
	0x01, 0x22, 0x80, 0x03, 0x0a, 0x13, 0x41, 0x49, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x4d, 0x0a, 0x0b, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x49, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x42,
	0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0b, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5c, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x49,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe4, 0xba, 0xa4, 0xe6, 0xb5, 0x81, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe7, 0x9f,
	0xad, 0xe8, 0xaf, 0xad, 0xe6, 0xa6, 0x82, 0xe7, 0x8e, 0x87, 0xe7, 0x99, 0xbe, 0xe5, 0x88, 0x86,
	0xe6, 0xaf, 0x94, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a,
	0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe6, 0xa6,
	0x82, 0xe7, 0x8e, 0x87, 0xe7, 0x99, 0xbe, 0xe5, 0x88, 0x86, 0xe6, 0xaf, 0x94, 0x52, 0x0b, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xea, 0xb5, 0x18, 0x07,
	0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x31, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x12,
	0x23, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0b, 0xea, 0xb5, 0x18, 0x07, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x32, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x32, 0x22, 0x8a, 0x01, 0x0a, 0x11, 0x41, 0x49, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x10, 0x41, 0x6c,
	0x69, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0xad, 0x98, 0xe6, 0xb4, 0xbb,
	0xe7, 0x8e, 0xa9, 0xe5, 0xae, 0xb6, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x10, 0x41, 0x6c,
	0x69, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31,
	0x0a, 0x09, 0x77, 0x61, 0x74, 0x63, 0x68, 0x52, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe6, 0xa6, 0x82, 0xe7, 0x8e, 0x87, 0xe7, 0x99, 0xbe,
	0xe5, 0x88, 0x86, 0xe6, 0xaf, 0x94, 0x52, 0x09, 0x77, 0x61, 0x74, 0x63, 0x68, 0x52, 0x61, 0x74,
	0x65, 0x22, 0xa9, 0x02, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x41, 0x49, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x66, 0x67, 0x12, 0x16, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x06, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x67, 0x0a, 0x18, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x41, 0x49, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x61, 0x74,
	0x65, 0x42, 0x0f, 0xea, 0xb5, 0x18, 0x06, 0xe8, 0xa7, 0x82, 0xe6, 0x88, 0x98, 0xda, 0xb5, 0x18,
	0x01, 0x32, 0x52, 0x18, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0f,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe4, 0xba, 0xba, 0xe6, 0xa0,
	0xbc, 0xe6, 0x9d, 0x83, 0xe9, 0x87, 0x8d, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x41, 0x49, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0f, 0xea, 0xb5, 0x18, 0x06, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0xda, 0xb5, 0x18, 0x01, 0x35, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x3a, 0x0e, 0x8a,
	0x97, 0x22, 0x02, 0x49, 0x44, 0xf8, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x02, 0x22, 0x7b, 0x0a,
	0x0b, 0x41, 0x49, 0x41, 0x74, 0x74, 0x72, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x41, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x52, 0x65, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x49, 0x41, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x18, 0xea, 0xb5, 0x18, 0x06, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x0a, 0x41,
	0x49, 0x41, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x29, 0x0a, 0x05, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x13,
	0xea, 0xb5, 0x18, 0x0f, 0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90, 0xe7, 0x99, 0xbe, 0xe5, 0x88, 0x86,
	0xe6, 0xaf, 0x94, 0x52, 0x05, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x22, 0x64, 0x0a, 0x0c, 0x52, 0x65,
	0x73, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x12, 0x32, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1e, 0xea, 0xb5, 0x18, 0x06, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x10, 0x52, 0x45, 0x53, 0x5f, 0x46, 0x55, 0x4e, 0x43,
	0x45, 0x46, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xea,
	0xb5, 0x18, 0x06, 0xe6, 0x95, 0xb0, 0xe5, 0x80, 0xbc, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x8f, 0x04, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x5d, 0x0a, 0x08, 0x50, 0x72,
	0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x41, 0xea, 0xb5,
	0x18, 0x0c, 0xe5, 0xb1, 0x9e, 0xe6, 0x80, 0xa7, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xc8, 0xc1,
	0x18, 0x01, 0xf2, 0xb5, 0x18, 0x29, 0x52, 0x45, 0x53, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x45, 0x46,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x2c, 0x20, 0x52, 0x45, 0x53, 0x5f, 0x46, 0x55, 0x4e, 0x43,
	0x45, 0x46, 0x54, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52,
	0x08, 0x50, 0x72, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x90, 0x8d,
	0xe7, 0xa7, 0xb0, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xb5,
	0x18, 0x06, 0xe9, 0xa2, 0x9c, 0xe8, 0x89, 0xb2, 0x52, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x1e, 0x0a, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea,
	0xb5, 0x18, 0x06, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0x52, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x12,
	0x48, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x2a, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x95, 0xb0, 0xe5, 0x80, 0xbc, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x16, 0x52, 0x45, 0x53, 0x5f, 0x46, 0x55, 0x4e, 0x43,
	0x45, 0x46, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x09,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0xea,
	0xb5, 0x18, 0x12, 0xe7, 0xae, 0x80, 0xe5, 0x8d, 0x95, 0xe5, 0xb1, 0x9e, 0xe6, 0x80, 0xa7, 0xe6,
	0x8e, 0x92, 0xe5, 0xba, 0x8f, 0x52, 0x0a, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x6f, 0x72,
	0x74, 0x12, 0x36, 0x0a, 0x0a, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x6f, 0x72, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb,
	0x86, 0xe5, 0xb1, 0x9e, 0xe6, 0x80, 0xa7, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0x52, 0x0a, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x48, 0x69, 0x64,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe9, 0x9a, 0x90,
	0xe8, 0x97, 0x8f, 0x52, 0x04, 0x48, 0x69, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x0f, 0x4d, 0x61, 0x78,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba, 0xe6, 0x9c,
	0x80, 0xe5, 0xa4, 0xa7, 0xe5, 0x80, 0xbc, 0x52, 0x0f, 0x4d, 0x61, 0x78, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x18, 0x8a, 0x97, 0x22, 0x08, 0x50, 0x72,
	0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x92, 0x97, 0x22, 0x04, 0x48, 0x69, 0x64, 0x65, 0xf0, 0x97,
	0x22, 0x01, 0x22, 0xbb, 0x15, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x45, 0x71, 0x75, 0x69, 0x70, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x10, 0x53, 0x76, 0x72, 0x50, 0x6c, 0x61,
	0x79, 0x4d, 0x6f, 0x64, 0x55, 0x6e, 0x69, 0x71, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x04, 0xc8, 0xc1, 0x18, 0x02, 0x52, 0x10, 0x53, 0x76, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x4d,
	0x6f, 0x64, 0x55, 0x6e, 0x69, 0x71, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x07, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe8,
	0xa3, 0x85, 0xe5, 0xa4, 0x87, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x07, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x09, 0x45, 0x71, 0x75, 0x69, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xa3, 0x85,
	0xe5, 0xa4, 0x87, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x09, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x44, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c,
	0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0xe7, 0xae, 0x80, 0xe8, 0xbf, 0xb0, 0x52, 0x08, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x44, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x0b, 0x45, 0x71, 0x75, 0x69, 0x70, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18,
	0x0c, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xf8, 0xb5, 0x18,
	0x01, 0x52, 0x0b, 0x45, 0x71, 0x75, 0x69, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2e,
	0x0a, 0x09, 0x45, 0x71, 0x75, 0x69, 0x70, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0xe5, 0x9b, 0xbe,
	0xe6, 0xa0, 0x87, 0x52, 0x09, 0x45, 0x71, 0x75, 0x69, 0x70, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x34,
	0x0a, 0x0c, 0x45, 0x71, 0x75, 0x69, 0x70, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87,
	0xe5, 0x93, 0x81, 0xe9, 0x98, 0xb6, 0x52, 0x0c, 0x45, 0x71, 0x75, 0x69, 0x70, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x09, 0x41, 0x74, 0x6c, 0x61, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x9b, 0xbe,
	0xe9, 0x89, 0xb4, 0xe5, 0x88, 0x86, 0xe7, 0xb1, 0xbb, 0x52, 0x09, 0x41, 0x74, 0x6c, 0x61, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x10, 0x49, 0x73, 0x4e, 0x6f, 0x74, 0x53, 0x68, 0x6f,
	0x77, 0x49, 0x6e, 0x41, 0x74, 0x6c, 0x61, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x13,
	0xea, 0xb5, 0x18, 0x0f, 0xe5, 0x9b, 0xbe, 0xe9, 0x89, 0xb4, 0xe4, 0xb8, 0x8d, 0xe5, 0xb1, 0x95,
	0xe7, 0xa4, 0xba, 0x52, 0x10, 0x49, 0x73, 0x4e, 0x6f, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e,
	0x41, 0x74, 0x6c, 0x61, 0x73, 0x12, 0x4e, 0x0a, 0x13, 0x45, 0x71, 0x75, 0x69, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0xe8, 0x83,
	0x8c, 0xe5, 0x8c, 0x85, 0xe6, 0x8e, 0x92, 0xe5, 0x88, 0x97, 0xe9, 0xa1, 0xba, 0xe5, 0xba, 0x8f,
	0x52, 0x13, 0x45, 0x71, 0x75, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x37, 0x0a, 0x0c, 0x45, 0x71, 0x75, 0x69, 0x70, 0x42, 0x69,
	0x67, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xea, 0xb5, 0x18,
	0x0f, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0xe5, 0xa4, 0xa7, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87,
	0x52, 0x0c, 0x45, 0x71, 0x75, 0x69, 0x70, 0x42, 0x69, 0x67, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x4c,
	0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x1f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x0c, 0xe5,
	0xb1, 0x9e, 0xe6, 0x80, 0xa7, 0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90, 0xda, 0xb5, 0x18, 0x01, 0x33,
	0x52, 0x0a, 0x50, 0x72, 0x6f, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x09,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x18, 0x20, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x19, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf,
	0xb0, 0xda, 0xb5, 0x18, 0x01, 0x32, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x09, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x44, 0x65, 0x73, 0x63, 0x12, 0x28, 0x0a, 0x09, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x8e,
	0xa8, 0xe8, 0x8d, 0x90, 0x52, 0x09, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x12,
	0x39, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0xe5, 0x88,
	0x86, 0xe7, 0xb1, 0xbb, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x53, 0x0a, 0x0c, 0x50, 0x61,
	0x73, 0x73, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x6b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x50, 0x61,
	0x73, 0x73, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x0c,
	0xe8, 0xa2, 0xab, 0xe5, 0x8a, 0xa8, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xda, 0xb5, 0x18, 0x01,
	0x34, 0x52, 0x0c, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12,
	0x56, 0x0a, 0x0d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65,
	0x18, 0x6c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x52, 0x65, 0x73, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e,
	0x65, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0xe7, 0xbb, 0x84,
	0xe5, 0x90, 0x88, 0xda, 0xb5, 0x18, 0x01, 0x33, 0x52, 0x0d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x6d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x52,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x0c, 0xe4, 0xb8, 0xbb, 0xe5, 0x8a,
	0xa8, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xda, 0xb5, 0x18, 0x01, 0x32, 0x52, 0x0b, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x5b, 0x0a, 0x10, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x75, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x45,
	0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x42, 0x15, 0xea,
	0xb5, 0x18, 0x0c, 0xe9, 0x99, 0x84, 0xe5, 0x8a, 0xa0, 0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a, 0xda,
	0xb5, 0x18, 0x01, 0x32, 0x52, 0x10, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x49, 0x73, 0x4f, 0x6e, 0x6c, 0x79,
	0x18, 0x7e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe8, 0xa3, 0x85, 0xe5,
	0xa4, 0x87, 0xe5, 0x94, 0xaf, 0xe4, 0xb8, 0x80, 0xe6, 0x80, 0xa7, 0x52, 0x06, 0x49, 0x73, 0x4f,
	0x6e, 0x6c, 0x79, 0x12, 0x2b, 0x0a, 0x06, 0x50, 0x72, 0x65, 0x49, 0x64, 0x31, 0x18, 0x7f, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe5, 0x89, 0x8d, 0xe7, 0xbd, 0xae, 0xe8,
	0xa3, 0x85, 0xe5, 0xa4, 0x87, 0x31, 0x49, 0x44, 0x52, 0x06, 0x50, 0x72, 0x65, 0x49, 0x64, 0x31,
	0x12, 0x5d, 0x0a, 0x0b, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x80, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x45, 0x51,
	0x55, 0x49, 0x50, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x8d, 0x87, 0xe7, 0xba, 0xa7, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0x52, 0x0b, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x35, 0x0a, 0x0c, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x81, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x8d, 0x87, 0xe7,
	0xba, 0xa7, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x52, 0x0c, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x64, 0x0a, 0x0d, 0x45, 0x71, 0x75, 0x69, 0x70, 0x46,
	0x75, 0x6e, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f,
	0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x46, 0x55, 0x4e, 0x43,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe8, 0xa3, 0x85, 0xe5, 0xa4,
	0x87, 0xe5, 0x8a, 0x9f, 0xe8, 0x83, 0xbd, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0d, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x46, 0x75, 0x6e, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x11,
	0x53, 0x68, 0x6f, 0x77, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x98,
	0xbe, 0xe7, 0xa4, 0xba, 0x62, 0x75, 0x66, 0x66, 0xe5, 0xb1, 0x82, 0xe6, 0x95, 0xb0, 0x49, 0x44,
	0x52, 0x11, 0x53, 0x68, 0x6f, 0x77, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x0b, 0x43, 0x61, 0x6e, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x4f,
	0x66, 0x66, 0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe6,
	0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8f, 0xaf, 0xe6, 0x8b, 0x86, 0xe5, 0x8d, 0xb8, 0x52, 0x0b,
	0x43, 0x61, 0x6e, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x4f, 0x66, 0x66, 0x12, 0x43, 0x0a, 0x10, 0x54,
	0x61, 0x6b, 0x65, 0x6e, 0x4f, 0x66, 0x66, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x18,
	0x89, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x8b, 0x86, 0xe5,
	0x8d, 0xb8, 0xe6, 0xb6, 0x88, 0xe8, 0x80, 0x97, 0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81, 0x52, 0x10,
	0x54, 0x61, 0x6b, 0x65, 0x6e, 0x4f, 0x66, 0x66, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x69, 0x6e,
	0x12, 0x44, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x8a, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x51, 0x55,
	0x49, 0x50, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x0c, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7, 0xb1, 0xbb, 0xe5, 0x88, 0xab, 0x52, 0x07, 0x55,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x41, 0x49, 0x41, 0x74, 0x74, 0x72,
	0x73, 0x18, 0x8b, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x41, 0x49, 0x41, 0x74, 0x74, 0x72, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x42, 0x14,
	0xea, 0xb5, 0x18, 0x0b, 0x41, 0x49, 0xe7, 0x94, 0xa8, 0xe7, 0x89, 0xb9, 0xe6, 0x80, 0xa7, 0xda,
	0xb5, 0x18, 0x01, 0x35, 0x52, 0x07, 0x41, 0x49, 0x41, 0x74, 0x74, 0x72, 0x73, 0x12, 0x4b, 0x0a,
	0x13, 0x41, 0x49, 0x43, 0x61, 0x6e, 0x74, 0x57, 0x65, 0x61, 0x72, 0x44, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x18, 0xea, 0xb5, 0x18,
	0x14, 0x41, 0x49, 0xe4, 0xb8, 0x8d, 0xe5, 0x8f, 0xaf, 0xe9, 0x87, 0x8d, 0xe5, 0xa4, 0x8d, 0xe7,
	0xa9, 0xbf, 0xe6, 0x88, 0xb4, 0x52, 0x13, 0x41, 0x49, 0x43, 0x61, 0x6e, 0x74, 0x57, 0x65, 0x61,
	0x72, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x10, 0x53, 0x68,
	0x6f, 0x77, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4f, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x18, 0x8e,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x8d, 0x95, 0xe6, 0xac,
	0xa1, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0x42, 0x75, 0x66, 0x66, 0x49, 0x44, 0x52, 0x10, 0x53,
	0x68, 0x6f, 0x77, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4f, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x12,
	0x40, 0x0a, 0x0e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x65, 0x77, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x18, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xea, 0xb5, 0x18, 0x0f, 0xe4, 0xb8,
	0x96, 0xe7, 0x95, 0x8c, 0xe8, 0xa7, 0x82, 0xe7, 0x9f, 0xad, 0xe5, 0x8f, 0xa5, 0xf8, 0xb5, 0x18,
	0x01, 0x52, 0x0e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x65, 0x77, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x12, 0x2f, 0x0a, 0x09, 0x49, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x90,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x98, 0xaf, 0xe5, 0x90,
	0xa6, 0xe9, 0x9a, 0x90, 0xe5, 0xbd, 0xa2, 0x52, 0x09, 0x49, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x43, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x18, 0x91, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe4, 0xb8,
	0x8d, 0xe8, 0x83, 0xbd, 0xe7, 0xa9, 0xbf, 0xe6, 0x88, 0xb4, 0x52, 0x0b, 0x43, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x12, 0x39, 0x0a, 0x0f, 0x53, 0x6f, 0x72, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x54, 0x69, 0x70, 0x73, 0x18, 0x92, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x0a, 0x74, 0x69, 0x70, 0x73, 0xe6, 0x8e, 0x92, 0xe5, 0xba,
	0x8f, 0x52, 0x0f, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x54, 0x69,
	0x70, 0x73, 0x12, 0x36, 0x0a, 0x0b, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x93, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe8, 0xbe,
	0xb9, 0xe6, 0xa1, 0x86, 0xe7, 0xa8, 0x80, 0xe6, 0x9c, 0x89, 0xe5, 0xba, 0xa6, 0x52, 0x0b, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x5c, 0x0a, 0x0d, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x47, 0x72, 0x69, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x94, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x35, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0xa7, 0xbd, 0xe4, 0xbd, 0x8d, 0xe6, 0x8e,
	0xa9, 0xe7, 0xa0, 0x81, 0xf2, 0xb5, 0x18, 0x21, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a,
	0x45, 0x43, 0x54, 0x38, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x47, 0x52, 0x49, 0x44, 0x5f,
	0x4d, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0d, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x47, 0x72, 0x69, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x36, 0x0a, 0x08, 0x42, 0x72, 0x69, 0x65,
	0x66, 0x54, 0x61, 0x67, 0x18, 0x95, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x19, 0xea, 0xb5, 0x18,
	0x0c, 0xe7, 0xae, 0x80, 0xe8, 0xbf, 0xb0, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0xda, 0xb5, 0x18,
	0x01, 0x32, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x08, 0x42, 0x72, 0x69, 0x65, 0x66, 0x54, 0x61, 0x67,
	0x12, 0x51, 0x0a, 0x16, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x49, 0x44, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x18, 0xea, 0xb5, 0x18, 0x14, 0xe5, 0xb9, 0xbb, 0xe5, 0x8c, 0x96, 0xe6, 0xa8, 0xa1,
	0xe6, 0x9d, 0xbf, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0x49, 0x44, 0x52, 0x16, 0x50, 0x68, 0x61,
	0x6e, 0x74, 0x6f, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x49, 0x44, 0x3a, 0xca, 0x01, 0x8a, 0x97, 0x22, 0x07, 0x45, 0x71, 0x75, 0x69, 0x70, 0x49,
	0x44, 0x92, 0x97, 0x22, 0x09, 0x41, 0x74, 0x6c, 0x61, 0x73, 0x54, 0x79, 0x70, 0x65, 0x92, 0x97,
	0x22, 0x10, 0x49, 0x73, 0x4e, 0x6f, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x41, 0x74, 0x6c,
	0x61, 0x73, 0x92, 0x97, 0x22, 0x1b, 0x41, 0x74, 0x6c, 0x61, 0x73, 0x54, 0x79, 0x70, 0x65, 0x2c,
	0x20, 0x49, 0x73, 0x4e, 0x6f, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x41, 0x74, 0x6c, 0x61,
	0x73, 0x92, 0x97, 0x22, 0x19, 0x45, 0x71, 0x75, 0x69, 0x70, 0x49, 0x44, 0x2c, 0x20, 0x49, 0x73,
	0x4e, 0x6f, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x41, 0x74, 0x6c, 0x61, 0x73, 0x92, 0x97,
	0x22, 0x1e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2c, 0x20,
	0x49, 0x73, 0x4e, 0x6f, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x41, 0x74, 0x6c, 0x61, 0x73,
	0x92, 0x97, 0x22, 0x13, 0x50, 0x72, 0x65, 0x49, 0x64, 0x31, 0x2c, 0x20, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x92, 0x97, 0x22, 0x19, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2c, 0x20, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0xf0, 0x97, 0x22, 0x01, 0xf8, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x02,
	0x22, 0x41, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x5f, 0x46, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x4e,
	0x75, 0x6d, 0x5f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x09, 0x50, 0x65, 0x6f,
	0x70, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5,
	0x18, 0x06, 0xe4, 0xba, 0xba, 0xe6, 0x95, 0xb0, 0x52, 0x09, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65,
	0x4e, 0x75, 0x6d, 0x22, 0x79, 0x0a, 0x1b, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x43, 0x68, 0x65,
	0x73, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x30, 0x0a, 0x0a, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe4, 0xbd, 0x9c, 0xe7,
	0x94, 0xa8, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0x52, 0x0a, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe6, 0x95, 0x88, 0xe6,
	0x9e, 0x9c, 0x49, 0x44, 0x52, 0x08, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x44, 0x22, 0x3f,
	0x0a, 0x17, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x43, 0x68, 0x65, 0x73, 0x73, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x24, 0x0a, 0x07, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06,
	0xe6, 0x95, 0xb0, 0xe5, 0x80, 0xbc, 0x52, 0x07, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x44, 0x22,
	0xb2, 0x02, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x5f, 0x46, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x44,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x95,
	0x88, 0xe6, 0x9e, 0x9c, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x09,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x41, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x19, 0xea, 0xb5, 0x18, 0x15, 0xe6, 0x88, 0x98, 0xe5, 0x8a, 0x9b, 0xe6, 0x94, 0xbe, 0xe5, 0xa4,
	0xa7, 0xe4, 0xb8, 0x87, 0xe5, 0x88, 0x86, 0xe6, 0xaf, 0x94, 0x52, 0x0c, 0x41, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x43, 0x68, 0x65, 0x73, 0x73, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0f,
	0xea, 0xb5, 0x18, 0x06, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0xda, 0xb5, 0x18, 0x01, 0x33, 0x52,
	0x06, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x5b, 0x0a, 0x0c, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x43, 0x68,
	0x65, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42,
	0x15, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0x89, 0xb9, 0xe6, 0xae, 0x8a, 0xe5, 0x8f, 0x82, 0xe6, 0x95,
	0xb0, 0xda, 0xb5, 0x18, 0x01, 0x33, 0x52, 0x0c, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x22, 0x40, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x5f, 0x46, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x5f, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x24, 0x0a, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x93, 0x81, 0xe8, 0xb4, 0xa8, 0x52, 0x07, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x3f, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x5f, 0x46, 0x65,
	0x74, 0x74, 0x65, 0x72, 0x5f, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x49, 0x63, 0x6f, 0x6e, 0x12,
	0x26, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x08, 0x49,
	0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x22, 0x51, 0x0a, 0x0a, 0x46, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x43, 0x0a, 0x0a, 0x46, 0x65, 0x74, 0x74, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x52, 0x65, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x46, 0x65, 0x74, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x0a,
	0x46, 0x65, 0x74, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0x9c, 0x06, 0x0a, 0x15, 0x52,
	0x65, 0x73, 0x44, 0x54, 0x5f, 0x46, 0x65, 0x74, 0x74, 0x65, 0x72, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a, 0x12, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97, 0xe5, 0x87, 0x86, 0xe5,
	0xa4, 0x87, 0xe9, 0x9f, 0xb3, 0xe6, 0x95, 0x88, 0x52, 0x12, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x54, 0x0a, 0x16,
	0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xea, 0xb5,
	0x18, 0x18, 0xe5, 0xb8, 0xb8, 0xe8, 0xa7, 0x84, 0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97, 0xe5, 0xbc,
	0x80, 0xe5, 0xa7, 0x8b, 0xe9, 0x9f, 0xb3, 0xe6, 0x95, 0x88, 0x52, 0x16, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x5e, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x57, 0x69,
	0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe8, 0xbf, 0x9e,
	0xe8, 0x83, 0x9c, 0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe9,
	0x9f, 0xb3, 0xe6, 0x95, 0x88, 0x52, 0x1b, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x57,
	0x69, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x60, 0x0a, 0x1c, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x61,
	0x69, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe8, 0xbf,
	0x9e, 0xe8, 0xb4, 0xa5, 0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b,
	0xe9, 0x9f, 0xb3, 0xe6, 0x95, 0x88, 0x52, 0x1c, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,
	0x46, 0x61, 0x69, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x3c, 0x0a, 0x0d, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x57, 0x69, 0x6e,
	0x53, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18,
	0x12, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe8, 0x83, 0x9c, 0xe5, 0x88, 0xa9, 0xe9, 0x9f, 0xb3,
	0xe6, 0x95, 0x88, 0x52, 0x0d, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x57, 0x69, 0x6e, 0x53, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x3e, 0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x53,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12,
	0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe9, 0x9f, 0xb3, 0xe6,
	0x95, 0x88, 0x52, 0x0e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x53, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x44, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x32, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x73, 0x65, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea,
	0xb5, 0x18, 0x12, 0xe4, 0xba, 0x8c, 0xe6, 0x98, 0x9f, 0xe5, 0x90, 0x88, 0xe6, 0x88, 0x90, 0xe9,
	0x9f, 0xb3, 0xe6, 0x95, 0x88, 0x52, 0x11, 0x53, 0x74, 0x61, 0x72, 0x32, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x44, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x72,
	0x33, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe4, 0xb8, 0x89, 0xe6, 0x98, 0x9f, 0xe5,
	0x90, 0x88, 0xe6, 0x88, 0x90, 0xe9, 0x9f, 0xb3, 0xe6, 0x95, 0x88, 0x52, 0x11, 0x53, 0x74, 0x61,
	0x72, 0x33, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x25,
	0x0a, 0x06, 0x57, 0x69, 0x6e, 0x4d, 0x73, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d,
	0xea, 0xb5, 0x18, 0x09, 0xe8, 0x83, 0x9c, 0xe5, 0x88, 0xa9, 0xe8, 0xaf, 0xad, 0x52, 0x06, 0x57,
	0x69, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x32, 0x0a, 0x0b, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c,
	0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a, 0xe6, 0xbf, 0x80, 0xe6, 0xb4, 0xbb, 0x52, 0x0b, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x3e, 0x0a, 0x0e, 0x54, 0x6f, 0x70,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe9, 0xa1, 0xb6, 0xe5, 0xb1, 0x82, 0xe7, 0xbe, 0x81,
	0xe7, 0xbb, 0x8a, 0xe6, 0xbf, 0x80, 0xe6, 0xb4, 0xbb, 0x52, 0x0e, 0x54, 0x6f, 0x70, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x22, 0x99, 0x0f, 0x0a, 0x14, 0x52, 0x65,
	0x73, 0x46, 0x65, 0x74, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x69, 0x6e, 0x12, 0x30, 0x0a, 0x10, 0x53, 0x76, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64,
	0x55, 0x6e, 0x69, 0x71, 0x49, 0x44, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0xc8, 0xc1,
	0x18, 0x02, 0x52, 0x10, 0x53, 0x76, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x55, 0x6e,
	0x69, 0x71, 0x49, 0x44, 0x12, 0x5d, 0x0a, 0x08, 0x46, 0x65, 0x74, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44,
	0x42, 0x27, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0x81, 0x8c, 0xe4, 0xb8, 0x9a, 0xe9, 0x98, 0xb5, 0xe8,
	0x90, 0xa5, 0xc8, 0xc1, 0x18, 0x01, 0xf2, 0xb5, 0x18, 0x0f, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45,
	0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x46, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x45, 0x0a, 0x0a, 0x46, 0x65, 0x74, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x25, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0xbe, 0x81,
	0xe7, 0xbb, 0x8a, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x11, 0x52, 0x45, 0x53,
	0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0a,
	0x46, 0x65, 0x74, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x46, 0x65,
	0x74, 0x74, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16,
	0xea, 0xb5, 0x18, 0x12, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a,
	0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0x52, 0x0a, 0x46, 0x65, 0x74, 0x74, 0x65, 0x72, 0x49, 0x63,
	0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0a, 0x46, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x98, 0xbe, 0xe7,
	0xa4, 0xba, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x0a, 0x46, 0x65,
	0x74, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x46, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x44, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18,
	0x0c, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xf8, 0xb5, 0x18,
	0x01, 0x52, 0x09, 0x46, 0x65, 0x74, 0x74, 0x65, 0x72, 0x44, 0x65, 0x73, 0x12, 0x7c, 0x0a, 0x0f,
	0x46, 0x65, 0x74, 0x74, 0x65, 0x72, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x52, 0x65, 0x73, 0x5f, 0x46, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x4e, 0x75, 0x6d, 0x5f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x32, 0xea, 0xb5, 0x18, 0x09, 0xe7, 0xbe, 0x81, 0xe7, 0xbb,
	0x8a, 0xe5, 0xb1, 0x82, 0xda, 0xb5, 0x18, 0x21, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x52,
	0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x46, 0x45, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x41,
	0x59, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x0f, 0x46, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x6f, 0x0a, 0x0c, 0x46, 0x65,
	0x74, 0x74, 0x65, 0x72, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x5f, 0x46,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x2f, 0xea, 0xb5,
	0x18, 0x06, 0xe5, 0xb1, 0x82, 0xe6, 0x95, 0xb0, 0xda, 0xb5, 0x18, 0x21, 0x4c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x46, 0x45, 0x54, 0x54, 0x45,
	0x52, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x0c, 0x46,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x88, 0x01, 0x0a, 0x12,
	0x46, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x5f, 0x46, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x35, 0xea, 0xb5, 0x18,
	0x0c, 0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a, 0xe5, 0xb1, 0x82, 0xe6, 0x95, 0xb0, 0xda, 0xb5, 0x18,
	0x21, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x46, 0x45, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x52, 0x12, 0x46, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x7f, 0x0a, 0x0f, 0x46, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x5f, 0x46, 0x65,
	0x74, 0x74, 0x65, 0x72, 0x5f, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x49, 0x63, 0x6f, 0x6e, 0x42,
	0x35, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0,
	0x87, 0xda, 0xb5, 0x18, 0x21, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x52, 0x45, 0x53, 0x5f,
	0x4d, 0x41, 0x58, 0x5f, 0x46, 0x45, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52,
	0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x0f, 0x46, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x08, 0x49, 0x73, 0x48, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe5,
	0x9b, 0xbe, 0xe9, 0x89, 0xb4, 0xe4, 0xb8, 0x8d, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0x52, 0x08,
	0x49, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x0e, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0xe8, 0xb7, 0xaf, 0xe5,
	0xbe, 0x84, 0x52, 0x0e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x2c, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x8d, 0xa1, 0xe7, 0x89, 0x8c,
	0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0x52, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x48, 0x0a, 0x09, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65,
	0x73, 0x44, 0x54, 0x5f, 0x46, 0x65, 0x74, 0x74, 0x65, 0x72, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe9, 0x9f, 0xb3, 0xe6, 0x95, 0x88, 0x52,
	0x09, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a, 0x0d, 0x4e, 0x6f,
	0x50, 0x6c, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x1f, 0xea, 0xb5, 0x18, 0x1b, 0xe5, 0xa4, 0x9a, 0xe5, 0x90, 0x8d, 0xe5, 0x90, 0x8c,
	0xe5, 0xb1, 0x82, 0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a, 0xe6, 0x97, 0xa0, 0xe5, 0x8a, 0xa0, 0xe6,
	0x88, 0x90, 0x52, 0x0d, 0x4e, 0x6f, 0x50, 0x6c, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x4d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x8f, 0xaf,
	0xe5, 0x81, 0x9a, 0xe4, 0xb8, 0xba, 0xe4, 0xb8, 0xbb, 0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a, 0x52,
	0x0c, 0x4d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x68, 0x0a,
	0x1c, 0x46, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x75, 0x66, 0x66, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x24, 0xea, 0xb5, 0x18, 0x20, 0xe5, 0xbc, 0x80, 0xe6, 0x88, 0x98, 0xe9,
	0x98, 0xb6, 0xe6, 0xae, 0xb5, 0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a, 0xe6, 0xbf, 0x80, 0xe6, 0xb4,
	0xbb, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0x49, 0x44, 0x52, 0x1c, 0x46, 0x69, 0x67, 0x68, 0x74,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x42, 0x75, 0x66, 0x66, 0x12, 0x32, 0x0a, 0x0b, 0x41, 0x75, 0x78, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe8, 0xbe, 0x85, 0xe5, 0x8a, 0xa9, 0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a, 0x52, 0x0b,
	0x41, 0x75, 0x78, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x42,
	0x75, 0x66, 0x66, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c,
	0xe7, 0x94, 0x9f, 0xe6, 0x95, 0x88, 0xe9, 0x98, 0xb6, 0xe6, 0xae, 0xb5, 0x52, 0x0f, 0x42, 0x75,
	0x66, 0x66, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x4b, 0x0a,
	0x0d, 0x49, 0x73, 0x42, 0x75, 0x66, 0x66, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x25, 0xea, 0xb5, 0x18, 0x21, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6,
	0xe5, 0x85, 0x81, 0xe8, 0xae, 0xb8, 0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97, 0xe4, 0xb8, 0xad, 0xe6,
	0x96, 0xb0, 0xe5, 0xa2, 0x9e, 0xe5, 0xb1, 0x82, 0xe6, 0x95, 0xb0, 0x52, 0x0d, 0x49, 0x73, 0x42,
	0x75, 0x66, 0x66, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x69, 0x6e,
	0x68, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x44, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x18, 0xea, 0xb5, 0x18, 0x14, 0xe5, 0x9b, 0xba, 0xe6, 0x9c,
	0x89, 0xe8, 0x83, 0xbd, 0xe5, 0x8a, 0x9b, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0x49, 0x44, 0x52,
	0x11, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x49, 0x44, 0x12, 0x3f, 0x0a, 0x0e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x65, 0x77, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xea, 0xb5, 0x18, 0x0f,
	0xe4, 0xb8, 0x96, 0xe7, 0x95, 0x8c, 0xe8, 0xa7, 0x82, 0xe7, 0x9f, 0xad, 0xe5, 0x8f, 0xa5, 0xf8,
	0xb5, 0x18, 0x01, 0x52, 0x0e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x65, 0x77, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x12, 0x56, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x52, 0x65, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0xbe, 0x81, 0xe7, 0xbb,
	0x8a, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xda, 0xb5, 0x18, 0x01, 0x34, 0x52, 0x0d, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x15, 0x62,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x4a, 0x69, 0x62, 0x61, 0x6e, 0x56,
	0x6f, 0x69, 0x63, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x42, 0x22, 0xea, 0xb5, 0x18, 0x1e,
	0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe6, 0x9c, 0x80, 0xe9,
	0xab, 0x98, 0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a, 0xe8, 0xaf, 0xad, 0xe9, 0x9f, 0xb3, 0x52, 0x15,
	0x62, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x4a, 0x69, 0x62, 0x61, 0x6e,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0x3e, 0x8a, 0x97, 0x22, 0x08, 0x46, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x92, 0x97, 0x22, 0x0a, 0x46, 0x65, 0x74, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x92, 0x97, 0x22, 0x14, 0x46, 0x65, 0x74, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x2c,
	0x20, 0x49, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0xf0, 0x97, 0x22, 0x01, 0xf8, 0x97, 0x22,
	0x01, 0x98, 0x97, 0x22, 0x02, 0x22, 0xce, 0x02, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x45, 0x6d, 0x62,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x08, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3,
	0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x08, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44,
	0x12, 0x2d, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3,
	0xe5, 0x90, 0x8d, 0x52, 0x0a, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x07, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0xe9, 0xa1, 0xba, 0xe5,
	0xba, 0x8f, 0x52, 0x07, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x6f, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x49,
	0x73, 0x53, 0x68, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x0c, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0x52, 0x06, 0x49,
	0x73, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x34, 0x0a, 0x0a, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49,
	0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x10, 0xe8,
	0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0x69, 0x63, 0x6f, 0x6e, 0xe9, 0x80, 0x89, 0xe4, 0xb8, 0xad, 0x52,
	0x0a, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0c, 0x55,
	0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x17, 0xea, 0xb5, 0x18, 0x13, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0x69, 0x63, 0x6f,
	0x6e, 0xe6, 0x9c, 0xaa, 0xe9, 0x80, 0x89, 0xe4, 0xb8, 0xad, 0x52, 0x0c, 0x55, 0x6e, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x3a, 0x0c, 0x8a, 0x97, 0x22, 0x08, 0x53, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0xea, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x4c, 0x69,
	0x6e, 0x65, 0x75, 0x70, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0x52,
	0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x4a, 0x0a, 0x06, 0x45, 0x71, 0x75, 0x69, 0x70, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x32, 0xea, 0xb5, 0x18, 0x06, 0xe8, 0xa3, 0x85, 0xe5,
	0xa4, 0x87, 0xda, 0xb5, 0x18, 0x24, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x52, 0x45, 0x53,
	0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x55, 0x50, 0x5f, 0x48, 0x45, 0x52, 0x4f,
	0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x4e, 0x55, 0x4d, 0x52, 0x06, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x73, 0x12, 0x29, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe9, 0x98, 0xb5, 0xe5, 0xae, 0xb9,
	0xe4, 0xbd, 0x8d, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a,
	0x08, 0x49, 0x73, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x08, 0xea, 0xb5, 0x18, 0x04, 0x63, 0xe4, 0xbd, 0x8d, 0x52, 0x08, 0x49, 0x73, 0x43, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x22, 0xd1, 0x06, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x53, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x1a,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x02,
	0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x08, 0x53, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5,
	0x18, 0x08, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0x69, 0x64, 0x52, 0x08, 0x53, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x49, 0x0a, 0x0e, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x47, 0x61,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x21, 0xea, 0xb5,
	0x18, 0x06, 0xe7, 0x8e, 0xa9, 0xe6, 0xb3, 0x95, 0xf2, 0xb5, 0x18, 0x13, 0x43, 0x4f, 0x4d, 0x5f,
	0x4c, 0x49, 0x4e, 0x45, 0x55, 0x50, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x54, 0x59, 0x50, 0x45, 0x52,
	0x0e, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x28, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea,
	0xb5, 0x18, 0x0c, 0xe9, 0x98, 0xb5, 0xe5, 0xae, 0xb9, 0xe5, 0x90, 0x8d, 0xe5, 0xad, 0x97, 0xf8,
	0xb5, 0x18, 0x01, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x4c, 0x6f, 0x72,
	0x64, 0x49, 0x44, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x27, 0xea, 0xb5, 0x18, 0x08, 0xe9,
	0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0x69, 0x64, 0xda, 0xb5, 0x18, 0x17, 0x4c, 0x65, 0x67, 0x61, 0x63,
	0x79, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x4e,
	0x55, 0x4d, 0x52, 0x06, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x08, 0x4e, 0x65,
	0x77, 0x43, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5,
	0x18, 0x06, 0xe6, 0x96, 0xb0, 0xe6, 0x89, 0x8b, 0x52, 0x08, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6d,
	0x65, 0x72, 0x12, 0x24, 0x0a, 0x07, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe8, 0xbf, 0x9b, 0xe9, 0x98, 0xb6, 0x52,
	0x07, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x45, 0x71, 0x75, 0x69, 0x70, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0d, 0x42, 0x39, 0xea, 0xb5, 0x18, 0x0c, 0xe4, 0xbc, 0x98, 0xe5, 0x85, 0x88, 0xe8, 0xa3, 0x85,
	0xe5, 0xa4, 0x87, 0xda, 0xb5, 0x18, 0x25, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x52, 0x45,
	0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x55, 0x50, 0x5f, 0x50, 0x52, 0x45,
	0x46, 0x45, 0x52, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x52, 0x0f, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x45, 0x71, 0x75, 0x69, 0x70, 0x73, 0x12, 0x70, 0x0a,
	0x0b, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x48, 0x65, 0x72, 0x6f, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73,
	0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x32,
	0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x9c, 0x80, 0xe7, 0xbb, 0x88, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84,
	0xda, 0xb5, 0x18, 0x1e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x4d,
	0x41, 0x58, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x55, 0x50, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x4e,
	0x55, 0x4d, 0x52, 0x0b, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x48, 0x65, 0x72, 0x6f, 0x65, 0x73, 0x12,
	0x70, 0x0a, 0x0b, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x48, 0x65, 0x72, 0x6f, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52,
	0x65, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x32, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xbf, 0x87, 0xe6, 0xb8, 0xa1, 0xe8, 0x8b, 0xb1, 0xe9,
	0x9b, 0x84, 0xda, 0xb5, 0x18, 0x1e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x52, 0x45, 0x53,
	0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x55, 0x50, 0x5f, 0x48, 0x45, 0x52, 0x4f,
	0x5f, 0x4e, 0x55, 0x4d, 0x52, 0x0b, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x48, 0x65, 0x72, 0x6f, 0x65,
	0x73, 0x12, 0x57, 0x0a, 0x0a, 0x4c, 0x69, 0x6e, 0x65, 0x55, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x42, 0x20, 0xea, 0xb5,
	0x18, 0x0c, 0xe9, 0x98, 0xb5, 0xe5, 0xae, 0xb9, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5,
	0x18, 0x0c, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0a,
	0x4c, 0x69, 0x6e, 0x65, 0x55, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x0b, 0x54, 0x68,
	0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x0f, 0xea, 0xb5, 0x18, 0x0b, 0xe7, 0xbc, 0xa9, 0xe7, 0x95, 0xa5, 0xe5, 0x9b, 0xbe, 0x49, 0x44,
	0x52, 0x0b, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x49, 0x44, 0x3a, 0x18, 0xf0,
	0x97, 0x22, 0x01, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0x92, 0x97, 0x22, 0x0a, 0x4c, 0x69, 0x6e,
	0x65, 0x55, 0x70, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb7, 0x02, 0x0a, 0x1b, 0x52, 0x65, 0x73, 0x53,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x54, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x43, 0x66, 0x67, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x60, 0x0a, 0x0d, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x52, 0x65, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x49, 0x44, 0x42, 0x20, 0xea, 0xb5, 0x18, 0x09, 0xe4, 0xb8, 0xbb, 0xe7, 0xbe, 0x81,
	0xe7, 0xbb, 0x8a, 0xf2, 0xb5, 0x18, 0x0f, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x0d, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xf8,
	0xb5, 0x18, 0x01, 0x52, 0x04, 0x44, 0x65, 0x73, 0x63, 0x12, 0x3e, 0x0a, 0x0d, 0x43, 0x48, 0x65,
	0x72, 0x6f, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x18, 0xea, 0xb5, 0x18, 0x14, 0x43, 0xe4, 0xbd, 0x8d, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84,
	0x49, 0x63, 0x6f, 0x6e, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x0d, 0x43, 0x48, 0x65, 0x72,
	0x6f, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x07, 0x42, 0x67, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c,
	0xe8, 0x83, 0x8c, 0xe6, 0x99, 0xaf, 0xe9, 0xa2, 0x9c, 0xe8, 0x89, 0xb2, 0x52, 0x07, 0x42, 0x67,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x0a, 0xf0, 0x97, 0x22, 0x01, 0x8a, 0x97, 0x22, 0x02, 0x49,
	0x44, 0x22, 0x57, 0x0a, 0x0a, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x12,
	0x49, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x52, 0x65, 0x73, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x0c, 0x53, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x22, 0xa5, 0x02, 0x0a, 0x1d, 0x52,
	0x65, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x06,
	0x4c, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x08, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x06,
	0x4c, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x08, 0x4c, 0x6f, 0x72, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe9, 0xa2,
	0x86, 0xe4, 0xb8, 0xbb, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x08, 0x4c, 0x6f, 0x72, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x63, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x0a, 0xe5, 0xa4, 0xb4, 0xe5,
	0x83, 0x8f, 0x49, 0x43, 0x4f, 0x4e, 0x52, 0x08, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x63, 0x6f, 0x6e,
	0x12, 0x36, 0x0a, 0x0a, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x44, 0x72, 0x6f, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe9, 0x87, 0x8d, 0xe5, 0xa4, 0x8d,
	0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0x52, 0x0a, 0x44, 0x65,
	0x63, 0x6f, 0x6d, 0x70, 0x44, 0x72, 0x6f, 0x70, 0x12, 0x30, 0x0a, 0x0a, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x50, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x0a,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x50, 0x61, 0x74, 0x68, 0x3a, 0x16, 0x8a, 0x97, 0x22, 0x06,
	0x4c, 0x6f, 0x72, 0x64, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0xf8, 0x97, 0x22, 0x01, 0x98, 0x97,
	0x22, 0x02, 0x22, 0xbd, 0x08, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x28, 0x0a,
	0x06, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea,
	0xb5, 0x18, 0x08, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52,
	0x06, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x07, 0x41, 0x63, 0x74, 0x6f, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0xe5, 0xb1,
	0x80, 0xe5, 0x86, 0x85, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0x49, 0x44, 0x52, 0x07, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x08, 0x4c, 0x6f, 0x72, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe9, 0xa2, 0x86,
	0xe4, 0xb8, 0xbb, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x08, 0x4c,
	0x6f, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x44, 0x65, 0x63, 0x6f, 0x6d,
	0x70, 0x44, 0x72, 0x6f, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18,
	0x12, 0xe9, 0x87, 0x8d, 0xe5, 0xa4, 0x8d, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x8e, 0x89,
	0xe8, 0x90, 0xbd, 0x52, 0x0a, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x44, 0x72, 0x6f, 0x70, 0x12,
	0x39, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x0d, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x12, 0x36, 0x0a, 0x0c, 0x55, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0xe5, 0xa4, 0xb4, 0xe5,
	0x83, 0x8f, 0x49, 0x44, 0x52, 0x0c, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64,
	0x49, 0x44, 0x12, 0x39, 0x0a, 0x0c, 0x41, 0x77, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x11, 0xe9, 0xa2,
	0x86, 0xe4, 0xb8, 0xbb, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe7, 0xbb, 0x84, 0x49, 0x44, 0x52,
	0x0c, 0x41, 0x77, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x30, 0x0a,
	0x07, 0x41, 0x47, 0x45, 0x50, 0x61, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16,
	0xea, 0xb5, 0x18, 0x12, 0x41, 0x47, 0x45, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0xe5, 0xa4, 0xb9,
	0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x07, 0x41, 0x47, 0x45, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x36, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x18, 0xea, 0xb5, 0x18, 0x14, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe9, 0x80,
	0x89, 0xe6, 0x8b, 0xa9, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0x49, 0x44, 0x52, 0x09, 0x53, 0x6f,
	0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x49, 0x73, 0x4e, 0x65, 0x77,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x6f, 0x72, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe6, 0x96, 0xb0, 0xe6, 0x89, 0x8b, 0xe5, 0x90, 0x91, 0xe6,
	0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0x52, 0x0f, 0x49, 0x73, 0x4e,
	0x65, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x6f, 0x72, 0x64, 0x12, 0x34, 0x0a, 0x09,
	0x4d, 0x65, 0x73, 0x68, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0xa8, 0xa1, 0xe5, 0x9e, 0x8b, 0xe7, 0xbc, 0xa9, 0xe6, 0x94,
	0xbe, 0xe7, 0xb3, 0xbb, 0xe6, 0x95, 0xb0, 0x52, 0x09, 0x4d, 0x65, 0x73, 0x68, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x6e, 0x4c, 0x6f, 0x72, 0x64, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe6,
	0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0xe7, 0x86, 0x9f, 0xe7, 0xbb,
	0x83, 0xe5, 0xba, 0xa6, 0x52, 0x0d, 0x4f, 0x70, 0x65, 0x6e, 0x4c, 0x6f, 0x72, 0x64, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x52, 0x65, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe6, 0xb8, 0xb8,
	0xe6, 0x88, 0x8f, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xe7, 0xbb, 0x84, 0x52, 0x0d, 0x47, 0x61,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3d, 0x0a, 0x0e, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x49, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x11, 0xe8, 0xa1, 0x8c, 0xe4, 0xb8, 0xba, 0xe6,
	0xa0, 0x91, 0x41, 0x49, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0x52, 0x0e, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x49, 0x12, 0x42, 0x0a, 0x0d, 0x4f, 0x70,
	0x65, 0x6e, 0x4c, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xbc, 0x80,
	0xe5, 0x90, 0xaf, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe6, 0xa1, 0xa3, 0xe6, 0xa1, 0x88, 0x52,
	0x0d, 0x4f, 0x70, 0x65, 0x6e, 0x4c, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x3c,
	0x0a, 0x0a, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0xea, 0xb5, 0x18, 0x00,
	0x52, 0x0a, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x3a, 0x74, 0x8a, 0x97,
	0x22, 0x06, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x92, 0x97, 0x22, 0x12, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x92, 0x97,
	0x22, 0x16, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x92, 0x97, 0x22, 0x2a, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x2c, 0x20,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x53, 0x68, 0x6f, 0x77, 0xf0, 0x97, 0x22, 0x01, 0xf8, 0x97, 0x22, 0x01, 0x98, 0x97,
	0x22, 0x01, 0x22, 0xe4, 0x0b, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x07, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x08, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x07, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x06, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe6, 0xa3, 0x8b, 0xe6,
	0x89, 0x8b, 0x49, 0x44, 0x52, 0x06, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x0a,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe7, 0xad, 0x89, 0xe7,
	0xba, 0xa7, 0x52, 0x0a, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x24,
	0x0a, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0x52, 0x04,
	0x49, 0x63, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe5, 0x90,
	0x8d, 0xe7, 0xa7, 0xb0, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x04, 0x44, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5,
	0x18, 0x0c, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xf8, 0xb5,
	0x18, 0x01, 0x52, 0x04, 0x44, 0x65, 0x73, 0x63, 0x12, 0x47, 0x0a, 0x08, 0x43, 0x6f, 0x73, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2b, 0xea, 0xb5, 0x18, 0x12,
	0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe6, 0xb6, 0x88, 0xe8, 0x80, 0x97, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x11, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43,
	0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x43, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x34, 0x0a, 0x09, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd,
	0xe6, 0xb6, 0x88, 0xe8, 0x80, 0x97, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x52, 0x09, 0x43, 0x6f,
	0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x69, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x52,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x28, 0xea, 0xb5, 0x18,
	0x0c, 0xe4, 0xba, 0xa4, 0xe4, 0xba, 0x92, 0xe6, 0x96, 0xb9, 0xe5, 0xbc, 0x8f, 0xf2, 0xb5, 0x18,
	0x14, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x7d, 0x0a, 0x10, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x52,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x42, 0x2d, 0xea, 0xb5, 0x18, 0x0c, 0xe4, 0xba, 0xa4, 0xe4, 0xba, 0x92, 0xe5, 0x8f, 0x82, 0xe6,
	0x95, 0xb0, 0xf2, 0xb5, 0x18, 0x19, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52,
	0x10, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x26, 0x0a, 0x08, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x86, 0xb7, 0xe5, 0x8d, 0xb4, 0x52,
	0x08, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x47, 0x0a, 0x0e, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x50, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x1f, 0xea, 0xb5, 0x18, 0x1b, 0xe5, 0x8d, 0x95, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88,
	0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0xe9, 0x99, 0x90, 0xe5,
	0x88, 0xb6, 0x52, 0x0e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x50, 0x65, 0x72, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe6, 0x95, 0xb4,
	0xe5, 0x9c, 0xba, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0xe9,
	0x99, 0x90, 0xe5, 0x88, 0xb6, 0x52, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x50, 0x68, 0x61, 0x73, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0x94, 0x9f, 0xe6, 0x95, 0x88, 0xe9, 0x98, 0xb6,
	0xe6, 0xae, 0xb5, 0x52, 0x05, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x42, 0x70,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c,
	0xe8, 0x93, 0x9d, 0xe5, 0x9b, 0xbe, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x06, 0x42, 0x70,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x6f, 0x0a, 0x0d, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x52, 0x65,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x49, 0x6e, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x2c, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x8a,
	0x80, 0xe8, 0x83, 0xbd, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0xf2, 0xb5, 0x18, 0x12, 0x45, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x0a, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65,
	0x64, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe5,
	0xbc, 0xba, 0xe5, 0x8c, 0x96, 0x49, 0x44, 0x52, 0x0a, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65,
	0x64, 0x49, 0x44, 0x12, 0x48, 0x0a, 0x11, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x73, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a,
	0xea, 0xb5, 0x18, 0x16, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe6, 0xb6, 0x88, 0xe8, 0x80, 0x97,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x11, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x43, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x59, 0x0a,
	0x0a, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x69, 0x74, 0x42, 0x21, 0xea, 0xb5, 0x18, 0x0c, 0xe7,
	0x94, 0x9f, 0xe6, 0x95, 0x88, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xf2, 0xb5, 0x18, 0x0d, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x69, 0x74, 0x52, 0x0a, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x57, 0x6f, 0x72, 0x6c,
	0x64, 0x56, 0x69, 0x65, 0x77, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x17, 0xea, 0xb5, 0x18, 0x0f, 0xe4, 0xb8, 0x96, 0xe7, 0x95, 0x8c, 0xe8, 0xa7, 0x82, 0xe7,
	0x9f, 0xad, 0xe5, 0x8f, 0xa5, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x0e, 0x57, 0x6f, 0x72, 0x6c, 0x64,
	0x56, 0x69, 0x65, 0x77, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x6d, 0x0a, 0x0a, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x50, 0x68, 0x61, 0x73, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x2e, 0xea, 0xb5,
	0x18, 0x12, 0xe7, 0x94, 0x9f, 0xe6, 0x95, 0x88, 0xe9, 0x98, 0xb6, 0xe6, 0xae, 0xb5, 0xe5, 0x8f,
	0x82, 0xe6, 0x95, 0xb0, 0xf2, 0xb5, 0x18, 0x14, 0x45, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x50, 0x68, 0x61, 0x73, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0a, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x6f, 0x8a, 0x97, 0x22, 0x1e, 0x4c, 0x6f,
	0x72, 0x64, 0x49, 0x44, 0x2c, 0x20, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x2c, 0x20, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x49, 0x44, 0x92, 0x97, 0x22, 0x06,
	0x4c, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x92, 0x97, 0x22, 0x12, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x44,
	0x2c, 0x20, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x49, 0x44, 0x92, 0x97, 0x22, 0x12,
	0x4c, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x2c, 0x20, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x92, 0x97, 0x22, 0x07, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x44, 0x98, 0x97, 0x22,
	0x01, 0xf0, 0x97, 0x22, 0x01, 0xf8, 0x97, 0x22, 0x01, 0x22, 0x9d, 0x02, 0x0a, 0x27, 0x52, 0x65,
	0x73, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45,
	0x78, 0x70, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x63, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x3d, 0xea, 0xb5,
	0x18, 0x0c, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5,
	0x18, 0x29, 0x45, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x45, 0x78, 0x70, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6c, 0x0a, 0x0f, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0d, 0x42, 0x42, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe5,
	0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xda, 0xb5, 0x18, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e,
	0x52, 0x45, 0x53, 0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x45,
	0x58, 0x50, 0x5f, 0x47, 0x41, 0x54, 0x48, 0x45, 0x52, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x45,
	0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xea, 0xb5, 0x18, 0x03, 0xe5, 0x80,
	0xbc, 0x52, 0x06, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x22, 0xad, 0x04, 0x0a, 0x18, 0x52, 0x65,
	0x73, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x06, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe6, 0xa3, 0x8b, 0xe6,
	0x89, 0x8b, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x06, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x44,
	0x12, 0x30, 0x0a, 0x0a, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe5, 0xbc, 0xba, 0xe5, 0x8c, 0x96,
	0x49, 0x44, 0xc8, 0xc1, 0x18, 0x02, 0x52, 0x0a, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x64,
	0x49, 0x44, 0x12, 0x2c, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7,
	0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0x52, 0x08, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x59, 0x0a, 0x0a, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x45, 0x78, 0x70, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0d, 0x42, 0x39, 0xea, 0xb5, 0x18, 0x12, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7,
	0xe6, 0x89, 0x80, 0xe9, 0x9c, 0x80, 0xe7, 0xbb, 0x8f, 0xe9, 0xaa, 0x8c, 0xda, 0xb5, 0x18, 0x1f,
	0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52,
	0x0a, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x45, 0x78, 0x70, 0x12, 0xa8, 0x01, 0x0a, 0x17,
	0x45, 0x78, 0x70, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x4c, 0x6f, 0x72, 0x64, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x78, 0x70, 0x47, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x3c, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0xbb, 0x8f, 0xe9, 0xaa, 0x8c, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f,
	0x96, 0xda, 0xb5, 0x18, 0x28, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x52, 0x45, 0x53, 0x5f,
	0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x47,
	0x41, 0x54, 0x48, 0x45, 0x52, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x17, 0x45,
	0x78, 0x70, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x57, 0x0a, 0x09, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44,
	0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x39, 0xea, 0xb5, 0x18, 0x12, 0xe6,
	0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf,
	0xb0, 0xda, 0xb5, 0x18, 0x1f, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x52, 0x45, 0x53, 0x5f,
	0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x52, 0x09, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x3a,
	0x28, 0x8a, 0x97, 0x22, 0x12, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x2c, 0x20, 0x45, 0x6e, 0x68,
	0x61, 0x6e, 0x63, 0x65, 0x64, 0x49, 0x44, 0x92, 0x97, 0x22, 0x06, 0x4c, 0x6f, 0x72, 0x64, 0x49,
	0x44, 0xf8, 0x97, 0x22, 0x01, 0xf0, 0x97, 0x22, 0x01, 0x22, 0x99, 0x13, 0x0a, 0x12, 0x52, 0x65,
	0x73, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e,
	0x12, 0x28, 0x0a, 0x06, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe7, 0x9a, 0xae, 0xe8, 0x82, 0xa4, 0x49, 0x44, 0xc8, 0xc1,
	0x18, 0x01, 0x52, 0x06, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x06, 0x4c, 0x6f,
	0x72, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08,
	0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0x49, 0x44, 0x52, 0x06, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x44,
	0x12, 0x36, 0x0a, 0x0a, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x44, 0x72, 0x6f, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe9, 0x87, 0x8d, 0xe5, 0xa4, 0x8d,
	0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0x52, 0x0a, 0x44, 0x65,
	0x63, 0x6f, 0x6d, 0x70, 0x44, 0x72, 0x6f, 0x70, 0x12, 0x2e, 0x0a, 0x09, 0x53, 0x6b, 0x69, 0x6e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x0c, 0xe7, 0x9a, 0xae, 0xe8, 0x82, 0xa4, 0xe7, 0xb4, 0xa2, 0xe5, 0xbc, 0x95, 0x52, 0x09, 0x53,
	0x6b, 0x69, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x04, 0x49, 0x63, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0x89, 0xa9, 0xe5,
	0x93, 0x81, 0xe5, 0xa4, 0xb4, 0xe5, 0x83, 0x8f, 0x52, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x29,
	0x0a, 0x08, 0x50, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe5, 0x8d, 0x8a, 0xe8, 0xba, 0xab, 0xe5, 0x83, 0x8f, 0x52,
	0x08, 0x50, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x12, 0x4e, 0x0a, 0x0b, 0x49, 0x74, 0x65,
	0x6d, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2c,
	0xea, 0xb5, 0x18, 0x0f, 0xe7, 0x89, 0xa9, 0xe5, 0x93, 0x81, 0xe5, 0x93, 0x81, 0xe8, 0xb4, 0xa8,
	0xe8, 0x89, 0xb2, 0xf2, 0xb5, 0x18, 0x15, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f,
	0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0b, 0x49, 0x74,
	0x65, 0x6d, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x06, 0x5a, 0x4c, 0x53,
	0x6b, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6,
	0x88, 0x98, 0xe4, 0xbb, 0xa4, 0xe9, 0x9b, 0xb6, 0xe6, 0x97, 0xb6, 0xe5, 0x8e, 0x9f, 0xe7, 0x94,
	0xbb, 0x52, 0x06, 0x5a, 0x4c, 0x53, 0x6b, 0x69, 0x6e, 0x12, 0x2b, 0x0a, 0x09, 0x53, 0x6d, 0x61,
	0x6c, 0x6c, 0x53, 0x6b, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xea, 0xb5,
	0x18, 0x09, 0xe5, 0xb0, 0x8f, 0xe5, 0x8e, 0x9f, 0xe7, 0x94, 0xbb, 0x52, 0x09, 0x53, 0x6d, 0x61,
	0x6c, 0x6c, 0x53, 0x6b, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x07, 0x42, 0x69, 0x67, 0x53, 0x6b, 0x69,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe5, 0xa4, 0xa7,
	0xe5, 0x8e, 0x9f, 0xe7, 0x94, 0xbb, 0x52, 0x07, 0x42, 0x69, 0x67, 0x53, 0x6b, 0x69, 0x6e, 0x12,
	0x22, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xea,
	0xb5, 0x18, 0x06, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0x89, 0xa9, 0xe5, 0x93,
	0x81, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x08, 0x4e, 0x69, 0x63,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x63, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xf8,
	0xb5, 0x18, 0x01, 0x52, 0x04, 0x44, 0x65, 0x73, 0x63, 0x12, 0x2c, 0x0a, 0x08, 0x53, 0x6b, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x0c, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x08, 0x53,
	0x6b, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x98, 0xbe, 0xe7,
	0xa4, 0xba, 0xe9, 0xa1, 0xba, 0xe5, 0xba, 0x8f, 0x52, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x30, 0x0a, 0x0a, 0x53, 0x68, 0x6f, 0x77, 0x42, 0x47, 0x50, 0x61, 0x74, 0x68, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0xe8,
	0x83, 0x8c, 0xe6, 0x99, 0xaf, 0x52, 0x0a, 0x53, 0x68, 0x6f, 0x77, 0x42, 0x47, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x40, 0x0a, 0x0f, 0x53, 0x68, 0x6f, 0x77, 0x42, 0x47, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12,
	0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0xe8, 0x83, 0x8c, 0xe6, 0x99, 0xaf, 0xe7, 0x81, 0xaf, 0xe5,
	0x85, 0x89, 0x52, 0x0f, 0x53, 0x68, 0x6f, 0x77, 0x42, 0x47, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x51, 0x0a, 0x0e, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x53, 0x68, 0x6f, 0x77, 0x58, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x42, 0x29, 0xea, 0xb5, 0x18,
	0x25, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe7, 0x95, 0x8c,
	0xe9, 0x9d, 0xa2, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0xe4, 0xbd, 0x8d, 0xe7, 0xbd, 0xae, 0xe5,
	0x81, 0x8f, 0xe7, 0xa7, 0xbb, 0x58, 0x52, 0x0e, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x53, 0x68, 0x6f, 0x77, 0x58, 0x12, 0x51, 0x0a, 0x0e, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x53, 0x68, 0x6f, 0x77, 0x59, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x42, 0x29,
	0xea, 0xb5, 0x18, 0x25, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0xe7, 0x95, 0x8c, 0xe9, 0x9d, 0xa2, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0xe4, 0xbd, 0x8d, 0xe7,
	0xbd, 0xae, 0xe5, 0x81, 0x8f, 0xe7, 0xa7, 0xbb, 0x59, 0x52, 0x0e, 0x4c, 0x6f, 0x72, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x53, 0x68, 0x6f, 0x77, 0x59, 0x12, 0x51, 0x0a, 0x0e, 0x4c, 0x6f, 0x72,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x53, 0x68, 0x6f, 0x77, 0x5a, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x02, 0x42, 0x29, 0xea, 0xb5, 0x18, 0x25, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0xe7, 0x95, 0x8c, 0xe9, 0x9d, 0xa2, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0xe4,
	0xbd, 0x8d, 0xe7, 0xbd, 0xae, 0xe5, 0x81, 0x8f, 0xe7, 0xa7, 0xbb, 0x5a, 0x52, 0x0e, 0x4c, 0x6f,
	0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x53, 0x68, 0x6f, 0x77, 0x5a, 0x12, 0x5d, 0x0a, 0x19,
	0x4c, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x53, 0x68, 0x6f, 0x77, 0x48, 0x69, 0x67,
	0x68, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x67, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1f, 0xea, 0xb5, 0x18, 0x1b, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0xe7, 0x95, 0x8c, 0xe9, 0x9d, 0xa2, 0xe7, 0x89, 0xb9, 0xe5, 0x86, 0x99, 0x41, 0x67, 0x65,
	0x52, 0x19, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x53, 0x68, 0x6f, 0x77, 0x48,
	0x69, 0x67, 0x68, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x67, 0x65, 0x12, 0x53, 0x0a, 0x14, 0x4c,
	0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x53, 0x68, 0x6f, 0x77, 0x42, 0x6f, 0x72, 0x6e,
	0x41, 0x67, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xea, 0xb5, 0x18, 0x1b, 0xe9,
	0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe7, 0x95, 0x8c, 0xe9, 0x9d,
	0xa2, 0xe5, 0x87, 0xba, 0xe7, 0x94, 0x9f, 0x41, 0x67, 0x65, 0x52, 0x14, 0x4c, 0x6f, 0x72, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x53, 0x68, 0x6f, 0x77, 0x42, 0x6f, 0x72, 0x6e, 0x41, 0x67, 0x65,
	0x12, 0x47, 0x0a, 0x14, 0x57, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x64,
	0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13,
	0xea, 0xb5, 0x18, 0x0f, 0xe8, 0xa7, 0x82, 0xe6, 0x88, 0x98, 0xe5, 0xb0, 0x8f, 0xe5, 0xa4, 0xb4,
	0xe5, 0x83, 0x8f, 0x52, 0x14, 0x57, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x61,
	0x64, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x0b, 0x53, 0x6b, 0x69,
	0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x0c, 0xe7, 0x9a, 0xae, 0xe8, 0x82, 0xa4, 0xe5, 0x93, 0x81, 0xe8, 0xb4, 0xa8,
	0x52, 0x0b, 0x53, 0x6b, 0x69, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x52, 0x0a,
	0x06, 0x47, 0x65, 0x74, 0x57, 0x61, 0x79, 0x18, 0x21, 0x20, 0x03, 0x28, 0x05, 0x42, 0x3a, 0xea,
	0xb5, 0x18, 0x0c, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0xb8, 0xa0, 0xe9, 0x81, 0x93, 0xda,
	0xb5, 0x18, 0x1b, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41,
	0x58, 0x5f, 0x47, 0x45, 0x54, 0x57, 0x41, 0x59, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0xf2, 0xb5,
	0x18, 0x07, 0x45, 0x47, 0x65, 0x74, 0x57, 0x61, 0x79, 0x52, 0x06, 0x47, 0x65, 0x74, 0x57, 0x61,
	0x79, 0x12, 0x42, 0x0a, 0x0e, 0x4c, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x49,
	0x63, 0x6f, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xea, 0xb5, 0x18, 0x16, 0xe6,
	0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe9, 0x80, 0x89, 0xe6, 0x8b, 0xa9, 0xe7, 0x9a, 0xae, 0xe8, 0x82,
	0xa4, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x0e, 0x4c, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x6f, 0x6f, 0x73,
	0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0f, 0x4c, 0x6f, 0x72, 0x64, 0x43, 0x75, 0x74,
	0x73, 0x63, 0x65, 0x6e, 0x65, 0x41, 0x67, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13,
	0xea, 0xb5, 0x18, 0x0f, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0xe8, 0xbf, 0x87, 0xe5, 0x9c, 0xba,
	0x41, 0x67, 0x65, 0x52, 0x0f, 0x4c, 0x6f, 0x72, 0x64, 0x43, 0x75, 0x74, 0x73, 0x63, 0x65, 0x6e,
	0x65, 0x41, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x4c, 0x6f, 0x61, 0x64, 0x4c, 0x6f, 0x72, 0x64,
	0x49, 0x63, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xea, 0xb5, 0x18, 0x13,
	0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe7, 0xab, 0x8b,
	0xe7, 0xbb, 0x98, 0x52, 0x0c, 0x4c, 0x6f, 0x61, 0x64, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x63, 0x6f,
	0x6e, 0x12, 0x40, 0x0a, 0x0f, 0x4a, 0x75, 0x6d, 0x70, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12,
	0xe5, 0x89, 0x8d, 0xe5, 0xbe, 0x80, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe5, 0x8f, 0x82, 0xe6,
	0x95, 0xb0, 0x52, 0x0f, 0x4a, 0x75, 0x6d, 0x70, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x26, 0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0xa7, 0xbb, 0xe5, 0x8a, 0xa8, 0xe9, 0x80,
	0x9f, 0xe5, 0xba, 0xa6, 0x52, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x0b, 0x50,
	0x6c, 0x61, 0x79, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x0f, 0xea, 0xb5, 0x18, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x6f,
	0x70, 0x52, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x37,
	0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x72, 0x61, 0x67, 0x41, 0x67, 0x65, 0x18, 0x2c,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b,
	0xe6, 0x8b, 0x96, 0xe6, 0x8b, 0xbd, 0x41, 0x67, 0x65, 0x52, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x72, 0x61, 0x67, 0x41, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x45, 0x6e, 0x64, 0x44, 0x72,
	0x61, 0x67, 0x41, 0x67, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xea, 0xb5, 0x18,
	0x0f, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe6, 0x8b, 0x96, 0xe6, 0x8b, 0xbd, 0x41, 0x67, 0x65,
	0x52, 0x0a, 0x45, 0x6e, 0x64, 0x44, 0x72, 0x61, 0x67, 0x41, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x0b,
	0x53, 0x63, 0x61, 0x72, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x26, 0xea, 0xb5, 0x18, 0x09, 0xe7, 0xa8, 0x80, 0xe6, 0x9c, 0x89, 0xe5, 0xba, 0xa6,
	0xf2, 0xb5, 0x18, 0x15, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x43, 0x41, 0x52, 0x43, 0x45, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0b, 0x53, 0x63, 0x61, 0x72, 0x63,
	0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3f, 0x0a, 0x0f, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x64,
	0x6c, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x67, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x15, 0xea, 0xb5, 0x18, 0x11, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0x49, 0x64, 0x6c, 0x65, 0x53,
	0x68, 0x6f, 0x77, 0x41, 0x67, 0x65, 0x52, 0x0f, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x6c, 0x65,
	0x53, 0x68, 0x6f, 0x77, 0x41, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x4d, 0x69, 0x6e, 0x69, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe6, 0xb5, 0xb7, 0xe6, 0x8a,
	0xa5, 0xe7, 0xab, 0x8b, 0xe7, 0xbb, 0x98, 0x52, 0x0e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x4d,
	0x69, 0x6e, 0x69, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0c, 0x4d, 0x6f, 0x76, 0x65, 0x43,
	0x68, 0x65, 0x73, 0x73, 0x41, 0x67, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xea,
	0xb5, 0x18, 0x0f, 0xe7, 0xa7, 0xbb, 0xe5, 0x8a, 0xa8, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0x41,
	0x67, 0x65, 0x52, 0x0c, 0x4d, 0x6f, 0x76, 0x65, 0x43, 0x68, 0x65, 0x73, 0x73, 0x41, 0x67, 0x65,
	0x12, 0x3c, 0x0a, 0x0a, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x34,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52,
	0x65, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0xea, 0xb5,
	0x18, 0x00, 0x52, 0x0a, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46,
	0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50,
	0x61, 0x6e, 0x65, 0x6c, 0x18, 0x35, 0x20, 0x01, 0x28, 0x08, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12,
	0xe6, 0x9b, 0xb4, 0xe6, 0x94, 0xb9, 0xe6, 0xa1, 0xa3, 0xe6, 0xa1, 0x88, 0xe9, 0x9d, 0xa2, 0xe6,
	0x9d, 0xbf, 0x52, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x3a, 0x8c, 0x01, 0x8a, 0x97, 0x22, 0x06, 0x53, 0x6b, 0x69,
	0x6e, 0x49, 0x44, 0x92, 0x97, 0x22, 0x16, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x92, 0x97, 0x22,
	0x11, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x2c, 0x20, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x92, 0x97, 0x22, 0x1e, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x2c, 0x20, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x53, 0x68, 0x6f, 0x77, 0x92, 0x97, 0x22, 0x21, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x2c, 0x20, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x98, 0x97, 0x22, 0x01, 0xf8, 0x97, 0x22,
	0x01, 0xf0, 0x97, 0x22, 0x01, 0x22, 0x5e, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x4c, 0x6f, 0x72, 0x64,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x24, 0x0a, 0x05, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x06,
	0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x22, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0e, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0xf8, 0xb5, 0x18, 0x01, 0x52,
	0x04, 0x44, 0x65, 0x73, 0x63, 0x22, 0x9e, 0x02, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x4c, 0x6f, 0x72,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x22, 0x0a, 0x04, 0x46, 0x69,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x86,
	0x85, 0xe5, 0xae, 0xb9, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x44,
	0x0a, 0x0f, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xea, 0xb5, 0x18, 0x12, 0xe8, 0xa7, 0xa3,
	0xe9, 0x94, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xf8,
	0xb5, 0x18, 0x01, 0x52, 0x0f, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xf8, 0xb5,
	0x18, 0x01, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x55, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x52,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xa7, 0xa3, 0xe9, 0x94, 0x81, 0xe6, 0x9d,
	0xa1, 0xe4, 0xbb, 0xb6, 0x52, 0x0a, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64,
	0x12, 0x34, 0x0a, 0x0b, 0x41, 0x77, 0x61, 0x72, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0xe5, 0xa5, 0x96, 0xe5, 0x8a,
	0xb1, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0x49, 0x44, 0x52, 0x0b, 0x41, 0x77, 0x61, 0x72, 0x64,
	0x44, 0x72, 0x6f, 0x70, 0x49, 0x44, 0x22, 0xa5, 0x03, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x4c, 0x6f,
	0x72, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x28, 0x0a,
	0x06, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea,
	0xb5, 0x18, 0x08, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52,
	0x06, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x06, 0x53, 0x6b, 0x69, 0x6e, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x0e, 0xe6, 0xa3, 0x8b,
	0xe6, 0x89, 0x8b, 0xe7, 0x9a, 0xae, 0xe8, 0x82, 0xa4, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x02, 0x52,
	0x06, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0xa7, 0x93, 0xe5, 0x90,
	0x8d, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x13,
	0x52, 0x65, 0x73, 0x4c, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x52, 0x65, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x4c, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x31, 0xea, 0xb5, 0x18, 0x06, 0xe8, 0xb5, 0x84, 0xe6,
	0x96, 0x99, 0xda, 0xb5, 0x18, 0x23, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x52, 0x45, 0x53,
	0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x53, 0x5f, 0x49, 0x54,
	0x45, 0x4d, 0x53, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x13, 0x52, 0x65, 0x73, 0x4c, 0x6f,
	0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x77,
	0x0a, 0x11, 0x52, 0x65, 0x73, 0x4c, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x52, 0x65, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x4c, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x49, 0x74, 0x65, 0x6d, 0x42, 0x2e, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0xa1, 0xa3, 0xe6, 0xa1, 0x88,
	0xda, 0xb5, 0x18, 0x20, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x4c,
	0x4f, 0x52, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x53, 0x5f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x52, 0x11, 0x52, 0x65, 0x73, 0x4c, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x3a, 0x15, 0x8a, 0x97, 0x22, 0x0d, 0x4c, 0x6f, 0x72,
	0x64, 0x49, 0x44, 0x2c, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0x22, 0x71,
	0x0a, 0x1b, 0x53, 0x54, 0x4c, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6e, 0x64, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a,
	0x08, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0e, 0xea, 0xb5, 0x18, 0x06, 0xe9, 0x97, 0xae, 0xe9, 0xa2, 0x98, 0xf8, 0xb5, 0x18, 0x01, 0x52,
	0x08, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x06, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x06, 0xe7,
	0xad, 0x94, 0xe6, 0xa1, 0x88, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x06, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x22, 0x88, 0x08, 0x0a, 0x1f, 0x52, 0x65, 0x73, 0x4c, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x06, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe6, 0xa3, 0x8b, 0xe6, 0x89,
	0x8b, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x06, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x12,
	0x2e, 0x0a, 0x06, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x16, 0xea, 0xb5, 0x18, 0x0e, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe7, 0x9a, 0xae, 0xe8, 0x82,
	0xa4, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x02, 0x52, 0x06, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xea,
	0xb5, 0x18, 0x06, 0xe5, 0xa7, 0x93, 0xe5, 0x90, 0x8d, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xea, 0xb5, 0x18,
	0x09, 0xe5, 0xbc, 0x80, 0xe5, 0x9c, 0xba, 0xe7, 0x99, 0xbd, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x0e,
	0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x52,
	0x0a, 0x10, 0x41, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f,
	0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x8f, 0x90, 0xe9, 0x97, 0xae, 0xe6, 0xb6, 0x88, 0xe8, 0x80, 0x97,
	0x52, 0x10, 0x41, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f,
	0x73, 0x74, 0x12, 0x52, 0x0a, 0x17, 0x41, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x41, 0x77, 0x61, 0x72, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x44, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x18, 0xea, 0xb5, 0x18, 0x14, 0xe6, 0x8f, 0x90, 0xe9, 0x97, 0xae, 0xe5,
	0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0x49, 0x44, 0x52, 0x17, 0x41,
	0x73, 0x6b, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x77, 0x61, 0x72, 0x64,
	0x44, 0x72, 0x6f, 0x70, 0x49, 0x44, 0x12, 0x60, 0x0a, 0x14, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52,
	0x65, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12,
	0xe5, 0x88, 0xb7, 0xe6, 0x96, 0xb0, 0xe9, 0x97, 0xae, 0xe9, 0xa2, 0x98, 0xe6, 0xb6, 0x88, 0xe8,
	0x80, 0x97, 0x52, 0x14, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0f, 0x53, 0x68, 0x6f, 0x77,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe5, 0x8f, 0xaf, 0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba,
	0xe9, 0x97, 0xae, 0xe9, 0xa2, 0x98, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x0f, 0x53, 0x68,
	0x6f, 0x77, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x50, 0x0a,
	0x14, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18,
	0x18, 0xe6, 0xaf, 0x8f, 0xe6, 0xac, 0xa1, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe7, 0x9a, 0x84,
	0xe9, 0x97, 0xae, 0xe9, 0xa2, 0x98, 0xe6, 0x95, 0xb0, 0x52, 0x14, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x12,
	0x3b, 0x0a, 0x0e, 0x41, 0x6c, 0x6c, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75,
	0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe6, 0x80, 0xbb,
	0xe9, 0x97, 0xae, 0xe9, 0xa2, 0x98, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x0e, 0x41, 0x6c,
	0x6c, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x65, 0x0a, 0x06,
	0x51, 0x41, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x52,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x54, 0x4c, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x27, 0xea, 0xb5, 0x18, 0x06, 0xe9, 0x97, 0xae, 0xe9, 0xa2, 0x98, 0xda, 0xb5,
	0x18, 0x19, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x4c, 0x4f, 0x52,
	0x44, 0x5f, 0x51, 0x5f, 0x41, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x06, 0x51, 0x41, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x11, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe7, 0xbb, 0x93, 0xe8, 0xaf, 0xad,
	0x52, 0x11, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xae, 0x8c, 0xe7, 0xbb, 0x93, 0xe7, 0xbb, 0x93, 0xe8, 0xaf,
	0xad, 0x52, 0x12, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x63, 0x6c,
	0x75, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x6f, 0x6e, 0x41, 0x77, 0x61, 0x72, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x44, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x18, 0xea, 0xb5, 0x18, 0x14, 0xe7, 0xbb, 0x93, 0xe8, 0xaf, 0xad,
	0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0x49, 0x44, 0x52, 0x15,
	0x43, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x77, 0x61, 0x72, 0x64, 0x44,
	0x72, 0x6f, 0x70, 0x49, 0x44, 0x3a, 0x15, 0x8a, 0x97, 0x22, 0x0d, 0x4c, 0x6f, 0x72, 0x64, 0x49,
	0x44, 0x2c, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0x22, 0x8e, 0x01, 0x0a,
	0x16, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x4c, 0x6f, 0x72, 0x64, 0x4f, 0x75, 0x74, 0x67, 0x61,
	0x6d, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x24, 0x0a, 0x04, 0x53, 0x68, 0x6f, 0x77, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0xa3, 0x8b, 0xe6, 0x89,
	0x8b, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0x52, 0x04, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x26, 0x0a,
	0x05, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe8, 0xa7, 0xa6, 0xe6, 0x91, 0xb8, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0x52, 0x05,
	0x54, 0x6f, 0x75, 0x63, 0x68, 0x12, 0x26, 0x0a, 0x05, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b,
	0xe6, 0x95, 0x85, 0xe4, 0xba, 0x8b, 0x52, 0x05, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xfd, 0x07,
	0x0a, 0x15, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x67, 0x61,
	0x6d, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x24, 0x0a, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xea, 0xb5, 0x18, 0x04, 0x42,
	0x61, 0x6e, 0x6b, 0x52, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a,
	0x0a, 0x4c, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe9, 0x80, 0x89, 0xe6, 0x8b, 0xa9, 0xe8, 0xaf, 0xad,
	0xe9, 0x9f, 0xb3, 0x52, 0x0a, 0x4c, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xbc, 0x80, 0xe5, 0x9c, 0xba, 0xe8, 0xaf,
	0xad, 0xe9, 0x9f, 0xb3, 0x52, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x28, 0x0a, 0x06, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x94, 0xbb, 0xe5, 0x87, 0xbb, 0xe9, 0x9f, 0xb3, 0xe6, 0x95,
	0x88, 0x52, 0x06, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x32, 0x0a, 0x0a, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x56, 0x4f, 0x31, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xea,
	0xb5, 0x18, 0x0e, 0x31, 0x50, 0xe6, 0x94, 0xbb, 0xe5, 0x87, 0xbb, 0xe8, 0xaf, 0xad, 0xe9, 0x9f,
	0xb3, 0x52, 0x0a, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x56, 0x4f, 0x31, 0x70, 0x12, 0x22, 0x0a,
	0x03, 0x48, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c,
	0xe5, 0x8f, 0x97, 0xe5, 0x87, 0xbb, 0xe9, 0x9f, 0xb3, 0xe6, 0x95, 0x88, 0x52, 0x03, 0x48, 0x69,
	0x74, 0x12, 0x2c, 0x0a, 0x07, 0x48, 0x69, 0x74, 0x56, 0x4f, 0x31, 0x70, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0x31, 0x50, 0xe5, 0x8f, 0x97, 0xe5, 0x87, 0xbb,
	0xe8, 0xaf, 0xad, 0xe9, 0x9f, 0xb3, 0x52, 0x07, 0x48, 0x69, 0x74, 0x56, 0x4f, 0x31, 0x70, 0x12,
	0x32, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x56, 0x4f, 0x33, 0x70, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0x33, 0x50, 0xe6, 0x94, 0xbb, 0xe5, 0x87,
	0xbb, 0xe8, 0xaf, 0xad, 0xe9, 0x9f, 0xb3, 0x52, 0x0a, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x56,
	0x4f, 0x33, 0x70, 0x12, 0x2c, 0x0a, 0x07, 0x48, 0x69, 0x74, 0x56, 0x4f, 0x33, 0x70, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0x33, 0x50, 0xe5, 0x8f, 0x97, 0xe5,
	0x87, 0xbb, 0xe8, 0xaf, 0xad, 0xe9, 0x9f, 0xb3, 0x52, 0x07, 0x48, 0x69, 0x74, 0x56, 0x4f, 0x33,
	0x70, 0x12, 0x28, 0x0a, 0x06, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe5, 0x88, 0x87,
	0xe6, 0x8d, 0xa2, 0x52, 0x06, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x34, 0x0a, 0x0c, 0x43,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x6f, 0x75, 0x73, 0x57, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x8f, 0x96, 0xe5, 0xbe, 0x97, 0xe8, 0xbf, 0x9e,
	0xe8, 0x83, 0x9c, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x6f, 0x75, 0x73, 0x57, 0x69,
	0x6e, 0x12, 0x32, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x6f, 0x75, 0x73, 0x65, 0x4c,
	0x6f, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe8,
	0xbf, 0x9e, 0xe8, 0xb4, 0xa5, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x6f, 0x75, 0x73,
	0x65, 0x4c, 0x6f, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x16, 0x57, 0x69, 0x6e, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x6f, 0x75, 0x73, 0x65, 0x4c, 0x6f, 0x73, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe8, 0xbf, 0x9e, 0xe8, 0xb4,
	0xa5, 0xe5, 0x90, 0x8e, 0xe5, 0x8f, 0x96, 0xe5, 0xbe, 0x97, 0xe8, 0x83, 0x9c, 0xe5, 0x88, 0xa9,
	0x52, 0x16, 0x57, 0x69, 0x6e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x6f, 0x75, 0x73, 0x65, 0x4c, 0x6f, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x16, 0x4c, 0x6f, 0x73, 0x65,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x6f, 0x75, 0x73, 0x65, 0x57,
	0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe8, 0xbf,
	0x9e, 0xe8, 0x83, 0x9c, 0xe5, 0x90, 0x8e, 0xe6, 0x88, 0x98, 0xe8, 0xb4, 0xa5, 0x52, 0x16, 0x4c,
	0x6f, 0x73, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x6f, 0x75,
	0x73, 0x65, 0x57, 0x69, 0x6e, 0x12, 0x5c, 0x0a, 0x1d, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x6f, 0x75, 0x73, 0x57, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5,
	0x18, 0x12, 0xe7, 0xbb, 0x88, 0xe7, 0xbb, 0x93, 0xe5, 0xaf, 0xb9, 0xe6, 0x89, 0x8b, 0xe8, 0xbf,
	0x9e, 0xe8, 0x83, 0x9c, 0x52, 0x1d, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x4f,
	0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x6f, 0x75, 0x73,
	0x57, 0x69, 0x6e, 0x12, 0x34, 0x0a, 0x0c, 0x4b, 0x69, 0x6c, 0x6c, 0x4f, 0x70, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5,
	0x87, 0xbb, 0xe6, 0x9d, 0x80, 0xe6, 0x95, 0x8c, 0xe4, 0xba, 0xba, 0x52, 0x0c, 0x4b, 0x69, 0x6c,
	0x6c, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6,
	0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe4, 0xb8, 0x93, 0xe5, 0xb1, 0x9e, 0xe5, 0xa4, 0xa9, 0xe8, 0xb5,
	0x8b, 0x52, 0x10, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x61, 0x6c,
	0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x4a, 0x69, 0x42,
	0x61, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe8, 0x8e,
	0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x9c, 0x80, 0xe9, 0xab, 0x98, 0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a,
	0x52, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x4a, 0x69, 0x42, 0x61, 0x6e, 0x22, 0xad, 0x06,
	0x0a, 0x16, 0x52, 0x65, 0x73, 0x4c, 0x6f, 0x72, 0x64, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x66,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x06, 0x4c, 0x6f, 0x72, 0x64,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe9, 0xa2,
	0x86, 0xe4, 0xb8, 0xbb, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x06, 0x4c, 0x6f, 0x72, 0x64,
	0x49, 0x44, 0x12, 0x4f, 0x0a, 0x0c, 0x4f, 0x75, 0x74, 0x67, 0x61, 0x6d, 0x65, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x4c, 0x6f, 0x72, 0x64, 0x4f, 0x75, 0x74,
	0x67, 0x61, 0x6d, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe5,
	0xb1, 0x80, 0xe5, 0xa4, 0x96, 0x52, 0x0c, 0x4f, 0x75, 0x74, 0x67, 0x61, 0x6d, 0x65, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x12, 0x4c, 0x0a, 0x0b, 0x49, 0x6e, 0x67, 0x61, 0x6d, 0x65, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x67,
	0x61, 0x6d, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0xb1,
	0x80, 0xe5, 0x86, 0x85, 0x52, 0x0b, 0x49, 0x6e, 0x67, 0x61, 0x6d, 0x65, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x12, 0x2e, 0x0a, 0x09, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0x9a, 0xae, 0xe8, 0x82, 0xa4,
	0xe7, 0xb4, 0xa2, 0xe5, 0xbc, 0x95, 0x52, 0x09, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x63, 0x0a, 0x16, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x48, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2b, 0xea, 0xb5, 0x18, 0x27, 0xe5, 0xaf, 0xb9, 0xe5, 0xb1, 0x80, 0xe7, 0xbb, 0x93,
	0xe6, 0x9d, 0x9f, 0xe8, 0xaf, 0xad, 0xe9, 0x9f, 0xb3, 0xef, 0xbc, 0x9a, 0xe6, 0xbb, 0xa1, 0xe8,
	0xa1, 0x80, 0xe7, 0xa2, 0xbe, 0xe5, 0x8e, 0x8b, 0xe5, 0x90, 0x83, 0xe9, 0xb8, 0xa1, 0x52, 0x16,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x46, 0x75, 0x6c, 0x6c, 0x48, 0x70, 0x12, 0x61, 0x0a, 0x15, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x6f, 0x77, 0x48, 0x50, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xea, 0xb5, 0x18, 0x27, 0xe5, 0xaf, 0xb9, 0xe5, 0xb1,
	0x80, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe8, 0xaf, 0xad, 0xe9, 0x9f, 0xb3, 0xef, 0xbc, 0x9a,
	0xe7, 0xbb, 0x9d, 0xe5, 0x9c, 0xb0, 0xe7, 0xbf, 0xbb, 0xe7, 0x9b, 0x98, 0xe5, 0x90, 0x83, 0xe9,
	0xb8, 0xa1, 0x52, 0x15, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x4c, 0x6f, 0x77, 0x48, 0x50, 0x12, 0x5d, 0x0a, 0x16, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xea, 0xb5, 0x18, 0x21, 0xe5,
	0xaf, 0xb9, 0xe5, 0xb1, 0x80, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe8, 0xaf, 0xad, 0xe9, 0x9f,
	0xb3, 0xef, 0xbc, 0x9a, 0xe5, 0x85, 0xb6, 0xe4, 0xbb, 0x96, 0xe5, 0x90, 0x83, 0xe9, 0xb8, 0xa1,
	0x52, 0x16, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12, 0x6c, 0x0a, 0x19, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x54, 0x6f, 0x46,
	0x6f, 0x75, 0x72, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xea, 0xb5, 0x18,
	0x2a, 0xe5, 0xaf, 0xb9, 0xe5, 0xb1, 0x80, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe8, 0xaf, 0xad,
	0xe9, 0x9f, 0xb3, 0xef, 0xbc, 0x9a, 0xe7, 0xac, 0xac, 0xe4, 0xba, 0x8c, 0xe5, 0x90, 0x8d, 0xe5,
	0x92, 0x8c, 0xe7, 0xac, 0xac, 0xe5, 0x9b, 0x9b, 0xe5, 0x90, 0x8d, 0x52, 0x19, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x54, 0x6f,
	0x46, 0x6f, 0x75, 0x72, 0x74, 0x68, 0x12, 0x6a, 0x0a, 0x18, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x6f, 0x75, 0x72, 0x74, 0x68, 0x54, 0x6f, 0x45, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xea, 0xb5, 0x18, 0x2a, 0xe5, 0xaf,
	0xb9, 0xe5, 0xb1, 0x80, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe8, 0xaf, 0xad, 0xe9, 0x9f, 0xb3,
	0xef, 0xbc, 0x9a, 0xe7, 0xac, 0xac, 0xe5, 0x9b, 0x9b, 0xe5, 0x90, 0x8d, 0xe5, 0x88, 0xb0, 0xe7,
	0xac, 0xac, 0xe5, 0x85, 0xab, 0xe5, 0x90, 0x8d, 0x52, 0x18, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x6f, 0x75, 0x72, 0x74, 0x68, 0x54, 0x6f, 0x45, 0x69, 0x67,
	0x68, 0x74, 0x3a, 0x19, 0x8a, 0x97, 0x22, 0x11, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x2c, 0x20,
	0x53, 0x6b, 0x69, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0xf0, 0x97, 0x22, 0x01, 0x22, 0xc9, 0x03,
	0x0a, 0x1b, 0x52, 0x65, 0x73, 0x4c, 0x6f, 0x72, 0x64, 0x4a, 0x69, 0x42, 0x61, 0x6e, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x43, 0x66, 0x67, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x2c, 0x0a,
	0x07, 0x4c, 0x6f, 0x72, 0x64, 0x41, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x12,
	0xea, 0xb5, 0x18, 0x0a, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0x41, 0x5f, 0x49, 0x44, 0xc8, 0xc1,
	0x18, 0x01, 0x52, 0x07, 0x4c, 0x6f, 0x72, 0x64, 0x41, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x0a, 0x53,
	0x6b, 0x69, 0x6e, 0x41, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x18, 0xea, 0xb5, 0x18, 0x14, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0x41, 0x5f, 0xe7, 0x9a, 0xae,
	0xe8, 0x82, 0xa4, 0xe7, 0xb4, 0xa2, 0xe5, 0xbc, 0x95, 0x52, 0x0a, 0x53, 0x6b, 0x69, 0x6e, 0x41,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28, 0x0a, 0x07, 0x4c, 0x6f, 0x72, 0x64, 0x42, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x0a, 0xe9, 0xa2, 0x86, 0xe4,
	0xb8, 0xbb, 0x42, 0x5f, 0x49, 0x44, 0x52, 0x07, 0x4c, 0x6f, 0x72, 0x64, 0x42, 0x49, 0x44, 0x12,
	0x38, 0x0a, 0x0a, 0x53, 0x6b, 0x69, 0x6e, 0x42, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x18, 0xea, 0xb5, 0x18, 0x14, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0x42,
	0x5f, 0xe7, 0x9a, 0xae, 0xe8, 0x82, 0xa4, 0xe7, 0xb4, 0xa2, 0xe5, 0xbc, 0x95, 0x52, 0x0a, 0x53,
	0x6b, 0x69, 0x6e, 0x42, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x40, 0x0a, 0x09, 0x4a, 0x69, 0x42,
	0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x22, 0xea, 0xb5,
	0x18, 0x0c, 0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5,
	0x18, 0x0e, 0x45, 0x4c, 0x6f, 0x72, 0x64, 0x4a, 0x69, 0x42, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x4a, 0x69, 0x42, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x56,
	0x6f, 0x69, 0x63, 0x65, 0x41, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xea, 0xb5, 0x18,
	0x07, 0xe8, 0xaf, 0xad, 0xe9, 0x9f, 0xb3, 0x41, 0x52, 0x06, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x41,
	0x12, 0x23, 0x0a, 0x06, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0b, 0xea, 0xb5, 0x18, 0x07, 0xe8, 0xaf, 0xad, 0xe9, 0x9f, 0xb3, 0x42, 0x52, 0x06, 0x56,
	0x6f, 0x69, 0x63, 0x65, 0x42, 0x3a, 0x52, 0x8a, 0x97, 0x22, 0x33, 0x4c, 0x6f, 0x72, 0x64, 0x41,
	0x49, 0x44, 0x2c, 0x20, 0x53, 0x6b, 0x69, 0x6e, 0x41, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x2c, 0x20,
	0x4c, 0x6f, 0x72, 0x64, 0x42, 0x49, 0x44, 0x2c, 0x20, 0x53, 0x6b, 0x69, 0x6e, 0x42, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x2c, 0x20, 0x4a, 0x69, 0x42, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x92, 0x97,
	0x22, 0x13, 0x4c, 0x6f, 0x72, 0x64, 0x41, 0x49, 0x44, 0x2c, 0x20, 0x53, 0x6b, 0x69, 0x6e, 0x41,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0xf0, 0x97, 0x22, 0x01, 0x22, 0xdc, 0x02, 0x0a, 0x1d, 0x52, 0x65,
	0x73, 0x4c, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x43, 0x66, 0x67, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe8, 0xaf, 0xad,
	0xe9, 0x9f, 0xb3, 0x49, 0x44, 0x52, 0x02, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x05, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xaf,
	0xad, 0xe9, 0x9f, 0xb3, 0xe9, 0xa1, 0xba, 0xe5, 0xba, 0x8f, 0x52, 0x05, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x2e, 0x0a, 0x06, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x0e, 0xe5, 0xaf, 0xb9, 0xe5, 0xba, 0x94, 0xe6, 0xa3, 0x8b,
	0xe6, 0x89, 0x8b, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x06, 0x4c, 0x6f, 0x72, 0x64, 0x49,
	0x44, 0x12, 0x2a, 0x0a, 0x06, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0xe5, 0xaf, 0xb9, 0xe5, 0xba, 0x94, 0xe7, 0x9a, 0xae,
	0xe8, 0x82, 0xa4, 0x49, 0x44, 0x52, 0x06, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x2a, 0x0a,
	0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5,
	0x18, 0x0c, 0xe8, 0xaf, 0xad, 0xe9, 0x9f, 0xb3, 0xe6, 0xa0, 0x87, 0xe9, 0xa2, 0x98, 0xf8, 0xb5,
	0x18, 0x01, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x54, 0x65, 0x78,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xaf, 0xad,
	0xe9, 0x9f, 0xb3, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x26, 0x0a, 0x05, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xaf, 0xb9, 0xe5, 0xba, 0x94, 0xe8, 0xaf,
	0xad, 0xe9, 0x9f, 0xb3, 0x52, 0x05, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0x1b, 0x8a, 0x97, 0x22,
	0x02, 0x49, 0x44, 0x92, 0x97, 0x22, 0x0d, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x2c, 0x53, 0x6b,
	0x69, 0x6e, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0x22, 0xcc, 0x01, 0x0a, 0x1f, 0x52, 0x65, 0x73,
	0x4c, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x69, 0x6e, 0x12, 0x48, 0x0a, 0x08,
	0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xaf, 0xb9, 0xe5,
	0xb1, 0x80, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x08, 0x47, 0x61,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xaf, 0xb9, 0xe5, 0xb1, 0x80,
	0xe6, 0x8e, 0x92, 0xe5, 0x90, 0x8d, 0xc8, 0xc1, 0x18, 0x02, 0x52, 0x04, 0x52, 0x61, 0x6e, 0x6b,
	0x12, 0x23, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe7, 0x86, 0x9f, 0xe7, 0xbb, 0x83, 0xe5, 0xba, 0xa6, 0x52, 0x05,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x3a, 0x10, 0x92, 0x97, 0x22, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0xf0, 0x97, 0x22, 0x01, 0x22, 0x9c, 0x03, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x4c,
	0x6f, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x69, 0x6e, 0x12, 0x51, 0x0a, 0x0c, 0x4c, 0x6f, 0x72, 0x64, 0x52, 0x61,
	0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2d, 0xea, 0xb5,
	0x18, 0x0c, 0xe6, 0x88, 0x98, 0xe5, 0x8a, 0x9b, 0xe6, 0xa6, 0x9c, 0xe5, 0x8d, 0x95, 0xf2, 0xb5,
	0x18, 0x19, 0x45, 0x52, 0x61, 0x6e, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x54, 0x79,
	0x70, 0x65, 0x4c, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x0c, 0x4c, 0x6f, 0x72,
	0x64, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x4c, 0x6f, 0x77,
	0x52, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x9c, 0x80, 0xe4, 0xbd, 0x8e, 0xe6, 0x8e, 0x92, 0xe5, 0x90,
	0x8d, 0x52, 0x0c, 0x4c, 0x6f, 0x77, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x34, 0x0a, 0x0c, 0x54, 0x6f, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x9c, 0x80, 0xe9, 0xab,
	0x98, 0xe6, 0x8e, 0x92, 0xe5, 0x90, 0x8d, 0x52, 0x0c, 0x54, 0x6f, 0x70, 0x52, 0x61, 0x6e, 0x6b,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x32, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x9b, 0xbe,
	0xe6, 0xa0, 0x87, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52,
	0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x0b, 0x4d, 0x69, 0x6e,
	0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16,
	0xea, 0xb5, 0x18, 0x12, 0xe7, 0xbc, 0xa9, 0xe7, 0x95, 0xa5, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87,
	0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x0b, 0x4d, 0x69, 0x6e, 0x49, 0x63, 0x6f, 0x6e, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x3b, 0x0a, 0x0b, 0x42, 0x69, 0x67, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe5, 0xa4,
	0xa7, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0xb7, 0xaf,
	0xe5, 0xbe, 0x84, 0x52, 0x0b, 0x42, 0x69, 0x67, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68,
	0x3a, 0x14, 0xf0, 0x97, 0x22, 0x01, 0x92, 0x97, 0x22, 0x0c, 0x4c, 0x6f, 0x72, 0x64, 0x52, 0x61,
	0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0x98, 0x03, 0x0a, 0x1e, 0x52, 0x65, 0x73, 0x4c, 0x6f,
	0x72, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x69, 0x6e, 0x12, 0x2d, 0x0a, 0x05, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0xea, 0xb5, 0x18, 0x0f, 0xe7, 0x86,
	0x9f, 0xe7, 0xbb, 0x83, 0xe5, 0xba, 0xa6, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0xc8, 0xc1, 0x18,
	0x01, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x09, 0x4c, 0x76, 0x55, 0x70,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x0c, 0xe5, 0x8d, 0x87, 0xe7, 0xba, 0xa7, 0xe7, 0xa7, 0xaf, 0xe5, 0x88, 0x86, 0x52, 0x09, 0x4c,
	0x76, 0x55, 0x70, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x42, 0x69, 0x67, 0x49,
	0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea,
	0xb5, 0x18, 0x12, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8,
	0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x0b, 0x42, 0x69, 0x67, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x32, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe7, 0xbc, 0xa9, 0xe7, 0x95, 0xa5,
	0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x08, 0x49, 0x63,
	0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x50, 0x0a, 0x0b, 0x55, 0x6e, 0x4c, 0x6f, 0x63, 0x6b,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x52, 0x65,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63,
	0x69, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x0f, 0xea, 0xb5, 0x18, 0x06,
	0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xda, 0xb5, 0x18, 0x01, 0x33, 0x52, 0x0b, 0x55, 0x6e, 0x4c,
	0x6f, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x4d, 0x61, 0x78, 0x42,
	0x69, 0x67, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe8, 0xb6, 0x85, 0xe5, 0xa4, 0xa7, 0xe5, 0x9b, 0xbe, 0xe6,
	0xa0, 0x87, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x0e,
	0x4d, 0x61, 0x78, 0x42, 0x69, 0x67, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x3a, 0x11,
	0xf0, 0x97, 0x22, 0x01, 0x8a, 0x97, 0x22, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x98, 0x97, 0x22,
	0x02, 0x22, 0x85, 0x01, 0x0a, 0x14, 0x4c, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63,
	0x69, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x3c, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x28, 0xea, 0xb5, 0x18, 0x06, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x1a, 0x45, 0x4c, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x55, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x0f, 0xea, 0xb5,
	0x18, 0x06, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xda, 0xb5, 0x18, 0x01, 0x33, 0x52, 0x0a, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa5, 0x08, 0x0a, 0x19, 0x52, 0x65,
	0x73, 0x4c, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x69, 0x6e, 0x12, 0x3d, 0x0a, 0x0c, 0x49, 0x6e, 0x69, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea,
	0xb5, 0x18, 0x15, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe6,
	0xb4, 0xbb, 0xe8, 0xb7, 0x83, 0xe5, 0xba, 0xa6, 0x52, 0x0c, 0x49, 0x6e, 0x69, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x4d, 0x61, 0x78, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18,
	0x15, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe6, 0xb4, 0xbb,
	0xe8, 0xb7, 0x83, 0xe5, 0xba, 0xa6, 0x52, 0x0b, 0x4d, 0x61, 0x78, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43,
	0x68, 0x67, 0x42, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5,
	0x18, 0x15, 0xe6, 0xb4, 0xbb, 0xe8, 0xb7, 0x83, 0xe5, 0xba, 0xa6, 0xe5, 0x8f, 0x98, 0xe5, 0x8c,
	0x96, 0xe5, 0x9f, 0xba, 0xe6, 0x95, 0xb0, 0x52, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x43, 0x68, 0x67, 0x42, 0x61, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x12, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe6, 0xb4, 0xbb, 0xe8, 0xb7, 0x83,
	0xe5, 0xba, 0xa6, 0xe8, 0xa1, 0xb0, 0xe5, 0x87, 0x8f, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52,
	0x12, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x15, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe6, 0x88, 0x98, 0xe7, 0xbb, 0xa9, 0xe7, 0xa7,
	0xaf, 0xe5, 0x88, 0x86, 0xe8, 0xa1, 0xb0, 0xe5, 0x87, 0x8f, 0xe5, 0x9c, 0xba, 0xe6, 0xac, 0xa1,
	0x52, 0x15, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x64, 0x75, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x51, 0x0a, 0x10, 0x4c, 0x6f, 0x77, 0x52, 0x61,
	0x6e, 0x6b, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x25, 0xea, 0xb5, 0x18, 0x21, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe5, 0x88, 0x9d,
	0xe7, 0xba, 0xa7, 0xe6, 0x8e, 0x92, 0xe8, 0xa1, 0x8c, 0xe6, 0xa6, 0x9c, 0xe4, 0xb8, 0x8a, 0xe6,
	0xa6, 0x9c, 0xe5, 0x90, 0x8d, 0xe6, 0xac, 0xa1, 0x52, 0x10, 0x4c, 0x6f, 0x77, 0x52, 0x61, 0x6e,
	0x6b, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x10, 0x4c, 0x6f,
	0x77, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x25, 0xea, 0xb5, 0x18, 0x21, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b,
	0xe5, 0x88, 0x9d, 0xe7, 0xba, 0xa7, 0xe6, 0x8e, 0x92, 0xe8, 0xa1, 0x8c, 0xe6, 0xa6, 0x9c, 0xe5,
	0xb1, 0x95, 0xe7, 0xa4, 0xba, 0xe5, 0x90, 0x8d, 0xe6, 0xac, 0xa1, 0x52, 0x10, 0x4c, 0x6f, 0x77,
	0x52, 0x61, 0x6e, 0x6b, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x51, 0x0a,
	0x10, 0x4d, 0x69, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x25, 0xea, 0xb5, 0x18, 0x21, 0xe6, 0xa3, 0x8b,
	0xe6, 0x89, 0x8b, 0xe4, 0xb8, 0xad, 0xe7, 0xba, 0xa7, 0xe6, 0x8e, 0x92, 0xe8, 0xa1, 0x8c, 0xe6,
	0xa6, 0x9c, 0xe4, 0xb8, 0x8a, 0xe6, 0xa6, 0x9c, 0xe5, 0x90, 0x8d, 0xe6, 0xac, 0xa1, 0x52, 0x10,
	0x4d, 0x69, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x51, 0x0a, 0x10, 0x4d, 0x69, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x68, 0x6f, 0x77, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x25, 0xea, 0xb5, 0x18, 0x21,
	0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe4, 0xb8, 0xad, 0xe7, 0xba, 0xa7, 0xe6, 0x8e, 0x92, 0xe8,
	0xa1, 0x8c, 0xe6, 0xa6, 0x9c, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0xe5, 0x90, 0x8d, 0xe6, 0xac,
	0xa1, 0x52, 0x10, 0x4d, 0x69, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x55, 0x0a, 0x12, 0x48, 0x69, 0x67, 0x68, 0x74, 0x52, 0x61, 0x6e, 0x6b,
	0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x25, 0xea, 0xb5, 0x18, 0x21, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe9, 0xab, 0x98, 0xe7, 0xba,
	0xa7, 0xe6, 0x8e, 0x92, 0xe8, 0xa1, 0x8c, 0xe6, 0xa6, 0x9c, 0xe4, 0xb8, 0x8a, 0xe6, 0xa6, 0x9c,
	0xe5, 0x90, 0x8d, 0xe6, 0xac, 0xa1, 0x52, 0x12, 0x48, 0x69, 0x67, 0x68, 0x74, 0x52, 0x61, 0x6e,
	0x6b, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x55, 0x0a, 0x12, 0x48, 0x69,
	0x67, 0x68, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x25, 0xea, 0xb5, 0x18, 0x21, 0xe6, 0xa3, 0x8b, 0xe6,
	0x89, 0x8b, 0xe9, 0xab, 0x98, 0xe7, 0xba, 0xa7, 0xe6, 0x8e, 0x92, 0xe8, 0xa1, 0x8c, 0xe6, 0xa6,
	0x9c, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0xe5, 0x90, 0x8d, 0xe6, 0xac, 0xa1, 0x52, 0x12, 0x48,
	0x69, 0x67, 0x68, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x51, 0x0a, 0x10, 0x54, 0x6f, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x4a, 0x6f, 0x69, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x25, 0xea, 0xb5, 0x18,
	0x21, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe5, 0x9b, 0xbd, 0xe6, 0x9c, 0x8d, 0xe6, 0x8e, 0x92,
	0xe8, 0xa1, 0x8c, 0xe6, 0xa6, 0x9c, 0xe4, 0xb8, 0x8a, 0xe6, 0xa6, 0x9c, 0xe5, 0x90, 0x8d, 0xe6,
	0xac, 0xa1, 0x52, 0x10, 0x54, 0x6f, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x4a, 0x6f, 0x69, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x10, 0x54, 0x6f, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x53,
	0x68, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x25,
	0xea, 0xb5, 0x18, 0x21, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe5, 0x9b, 0xbd, 0xe6, 0x9c, 0x8d,
	0xe6, 0x8e, 0x92, 0xe8, 0xa1, 0x8c, 0xe6, 0xa6, 0x9c, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0xe5,
	0x90, 0x8d, 0xe6, 0xac, 0xa1, 0x52, 0x10, 0x54, 0x6f, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x68,
	0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x08, 0xf0, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22,
	0x02, 0x22, 0xb6, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x4c, 0x6f, 0x72, 0x64, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x62, 0x69, 0x6e,
	0x12, 0x32, 0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1e,
	0xea, 0xb5, 0x18, 0x06, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xc8, 0xc1, 0x18, 0x01, 0xf2, 0xb5,
	0x18, 0x0c, 0x45, 0x50, 0x76, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x52, 0x61, 0x6e, 0x6b, 0x12, 0x28, 0x0a, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x9d, 0x83, 0xe9, 0x87, 0x8d,
	0xe7, 0xb3, 0xbb, 0xe6, 0x95, 0xb0, 0x52, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3a,
	0x0a, 0x0f, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0xa7, 0xaf,
	0xe5, 0x88, 0x86, 0xe4, 0xb8, 0x8a, 0xe9, 0x99, 0x90, 0x52, 0x0f, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x84, 0x02, 0x0a, 0x17, 0x52,
	0x65, 0x73, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x08, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x06, 0xe8, 0xb5,
	0x9b, 0xe5, 0xad, 0xa3, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x08, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x3b, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f,
	0xf2, 0xb5, 0x18, 0x0d, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0xc8, 0xc1, 0x18, 0x02, 0x52, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x32, 0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1e, 0xea,
	0xb5, 0x18, 0x06, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xf2, 0xb5, 0x18, 0x0c, 0x45, 0x50, 0x76,
	0x70, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0xc8, 0xc1, 0x18, 0x03, 0x52, 0x04, 0x52,
	0x61, 0x6e, 0x6b, 0x12, 0x24, 0x0a, 0x05, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x90, 0x8d, 0xe6, 0xac, 0xa1, 0xc8, 0xc1,
	0x18, 0x04, 0x52, 0x05, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xa1,
	0xa8, 0xe7, 0x8e, 0xb0, 0xe7, 0xa7, 0xaf, 0xe5, 0x88, 0x86, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x22, 0xcd, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x73, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x68, 0x6f,
	0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x74, 0x72, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x69,
	0x6e, 0x12, 0x36, 0x0a, 0x0a, 0x4d, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x9c, 0x80, 0xe5, 0xb0,
	0x8f, 0xe5, 0xaf, 0xb9, 0xe5, 0xb1, 0x80, 0xe5, 0x9c, 0xba, 0xe6, 0xac, 0xa1, 0x52, 0x0a, 0x4d,
	0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x36, 0x0a, 0x0a, 0x4d, 0x61, 0x78,
	0x47, 0x61, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea,
	0xb5, 0x18, 0x12, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe5, 0xaf, 0xb9, 0xe5, 0xb1, 0x80, 0xe5,
	0x9c, 0xba, 0xe6, 0xac, 0xa1, 0x52, 0x0a, 0x4d, 0x61, 0x78, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x75,
	0x6d, 0x12, 0x3e, 0x0a, 0x11, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe4, 0xbf, 0xae, 0xe6, 0xad, 0xa3, 0xe7, 0xb3, 0xbb, 0xe6, 0x95, 0xb0, 0x52, 0x11,
	0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x22, 0xcd, 0x02, 0x0a, 0x1b, 0x52, 0x65, 0x73, 0x4c, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x62, 0x69,
	0x6e, 0x12, 0x2c, 0x0a, 0x08, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0x49,
	0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x08, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x6c, 0x0a, 0x0f, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x42, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x8e,
	0x86, 0xe5, 0x8f, 0xb2, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xda, 0xb5, 0x18, 0x2e, 0x4c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x2e, 0x4c, 0x4f, 0x52, 0x44, 0x52, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x53, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x53, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x4e, 0x54, 0x52, 0x0f, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x44, 0x0a,
	0x11, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x61,
	0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0xa0,
	0x87, 0xe5, 0x87, 0x86, 0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97, 0xe6, 0x8e, 0x92, 0xe5, 0x90, 0x8d,
	0x52, 0x11, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x42,
	0x61, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x12, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97, 0xe7, 0xbb, 0x93, 0xe7, 0xae,
	0x97, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe4, 0xba, 0xba, 0xe6, 0x95, 0xb0, 0x52, 0x12, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x78, 0x4e, 0x75,
	0x6d, 0x22, 0x9e, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x73, 0x4c, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x69, 0x6e, 0x12, 0x20, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x08, 0xe7, 0xa7, 0xb0, 0xe5, 0x8f, 0xb7, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0xa7, 0xb0, 0xe5, 0x8f, 0xb7, 0xe5, 0x90,
	0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x0c, 0xe7, 0xa7, 0xb0, 0xe5, 0x8f, 0xb7, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0x52, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3a, 0x0a, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0xf0, 0x97,
	0x22, 0x01, 0x22, 0x8f, 0x02, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x4c, 0x6f, 0x72, 0x64, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69,
	0x6e, 0x12, 0x20, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea,
	0xb5, 0x18, 0x08, 0xe6, 0xa6, 0x9c, 0xe5, 0x8d, 0x95, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x0e, 0x41, 0x70, 0x6f, 0x6c, 0x6c, 0x6f, 0x52, 0x61, 0x6e,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18,
	0x12, 0x61, 0x70, 0x6f, 0x6c, 0x6c, 0x6f, 0xe6, 0xa6, 0x9c, 0xe5, 0x8d, 0x95, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0x52, 0x0e, 0x41, 0x70, 0x6f, 0x6c, 0x6c, 0x6f, 0x52, 0x61, 0x6e, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x41, 0x70, 0x6f, 0x6c, 0x6c, 0x6f, 0x52, 0x61, 0x6e,
	0x6b, 0x49, 0x6e, 0x73, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5,
	0x18, 0x12, 0x61, 0x70, 0x6f, 0x6c, 0x6c, 0x6f, 0xe6, 0xa6, 0x9c, 0xe5, 0x8d, 0x95, 0xe5, 0xae,
	0x9e, 0xe4, 0xbe, 0x8b, 0x52, 0x0f, 0x41, 0x70, 0x6f, 0x6c, 0x6c, 0x6f, 0x52, 0x61, 0x6e, 0x6b,
	0x49, 0x6e, 0x73, 0x49, 0x44, 0x12, 0x47, 0x0a, 0x11, 0x41, 0x70, 0x6f, 0x6c, 0x6c, 0x6f, 0x53,
	0x75, 0x62, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0x61, 0x70, 0x6f, 0x6c, 0x6c, 0x6f, 0xe5, 0xad, 0x90, 0xe6,
	0xa6, 0x9c, 0xe5, 0x8d, 0x95, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x11, 0x41, 0x70, 0x6f,
	0x6c, 0x6c, 0x6f, 0x53, 0x75, 0x62, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x04,
	0x88, 0xb5, 0x18, 0x01, 0x22, 0x6c, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x4c, 0x6f, 0x72, 0x64, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x29, 0x0a, 0x07, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0f, 0xea, 0xb5,
	0x18, 0x0b, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe7, 0xbb, 0x84, 0x49, 0x44, 0x52, 0x07, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x06, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe6, 0xa3, 0x8b, 0xe6,
	0x89, 0x8b, 0x49, 0x44, 0x52, 0x06, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x3a, 0x04, 0x88, 0xb5,
	0x18, 0x01, 0x22, 0xed, 0x09, 0x0a, 0x08, 0x4c, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x12,
	0x41, 0x0a, 0x08, 0x4c, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x4c,
	0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x08, 0x4c, 0x6f, 0x72, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x3d, 0x0a, 0x08, 0x53, 0x6b, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52,
	0x65, 0x73, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69,
	0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x08, 0x53, 0x6b, 0x69, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x6a, 0x0a, 0x18, 0x4c, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69,
	0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x66, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65,
	0x73, 0x4c, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x69, 0x6e, 0x42, 0x04, 0xd2,
	0xc1, 0x18, 0x00, 0x52, 0x18, 0x4c, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69,
	0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x66, 0x67, 0x12, 0x67, 0x0a,
	0x17, 0x4c, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x66, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x4c, 0x6f, 0x72, 0x64,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x17, 0x4c,
	0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x43, 0x66, 0x67, 0x12, 0x58, 0x0a, 0x12, 0x4c, 0x6f, 0x72, 0x64, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x66, 0x67, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73,
	0x4c, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x12, 0x4c, 0x6f,
	0x72, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x66, 0x67,
	0x12, 0x5b, 0x0a, 0x13, 0x4c, 0x6f, 0x72, 0x64, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x43, 0x66, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x4c, 0x6f, 0x72, 0x64, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x13, 0x4c, 0x6f, 0x72, 0x64, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x43, 0x66, 0x67, 0x12, 0x52, 0x0a,
	0x10, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x66,
	0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x52, 0x65, 0x73, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52,
	0x10, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x66,
	0x67, 0x12, 0x5e, 0x0a, 0x14, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x43, 0x74, 0x72, 0x6c, 0x43, 0x66, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x4c, 0x6f, 0x72,
	0x64, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x74, 0x72, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x14, 0x4c, 0x6f, 0x72,
	0x64, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x74, 0x72, 0x6c, 0x43, 0x66,
	0x67, 0x12, 0x5e, 0x0a, 0x14, 0x4c, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x43, 0x66, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x4c, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x14, 0x4c, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x43, 0x66,
	0x67, 0x12, 0x61, 0x0a, 0x15, 0x4c, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x61,
	0x6e, 0x6b, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x43, 0x66, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x4c, 0x6f,
	0x72, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x15, 0x4c,
	0x6f, 0x72, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x43, 0x66, 0x67, 0x12, 0x5b, 0x0a, 0x13, 0x4c, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x61, 0x70, 0x43, 0x66, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x4c,
	0x6f, 0x72, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x61, 0x70, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x13, 0x4c, 0x6f,
	0x72, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x61, 0x70, 0x43, 0x66,
	0x67, 0x12, 0x43, 0x0a, 0x0b, 0x4c, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x66, 0x67,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x52, 0x65, 0x73, 0x4c, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x0b, 0x4c, 0x6f, 0x72, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x43, 0x66, 0x67, 0x12, 0x6a, 0x0a, 0x18, 0x4c, 0x6f, 0x72, 0x64, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x43,
	0x66, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x4c, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x18, 0x4c, 0x6f, 0x72, 0x64, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x43,
	0x66, 0x67, 0x12, 0x4e, 0x0a, 0x10, 0x4c, 0x6f, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x52,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x4c, 0x6f, 0x72, 0x64, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00,
	0x52, 0x10, 0x4c, 0x6f, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x69, 0x6e, 0x22, 0x38, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x44, 0x54, 0x4c, 0x6f, 0x72, 0x64, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x05, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe8,
	0xbd, 0xae, 0xe6, 0xac, 0xa1, 0x52, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x5a, 0x0a, 0x18,
	0x52, 0x65, 0x73, 0x44, 0x54, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x41,
	0x49, 0x4f, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0xbc, 0x80,
	0xe5, 0xa7, 0x8b, 0x52, 0x05, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x03, 0x45, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe7, 0xbb, 0x93,
	0xe6, 0x9d, 0x9f, 0x52, 0x03, 0x45, 0x6e, 0x64, 0x22, 0xa7, 0x08, 0x0a, 0x17, 0x52, 0x65, 0x73,
	0x50, 0x56, 0x50, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x43, 0x66, 0x67, 0x12, 0x28, 0x0a, 0x06, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f,
	0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x06, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x28,
	0x0a, 0x08, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0x49, 0x44, 0x52, 0x08,
	0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x3d, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x21, 0xea, 0xb5, 0x18, 0x0c,
	0xe7, 0x8e, 0xa9, 0xe6, 0xb3, 0x95, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xf2, 0xb5, 0x18, 0x0d,
	0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x08, 0x47,
	0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x20, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x9c, 0x80, 0xe4, 0xbd,
	0x8e, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xf2, 0xb5, 0x18, 0x0c, 0x45, 0x50, 0x76, 0x70, 0x52,
	0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x56, 0x0a,
	0x17, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x72,
	0x64, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c,
	0xea, 0xb5, 0x18, 0x18, 0xe7, 0xa6, 0x81, 0xe6, 0xad, 0xa2, 0xe9, 0x87, 0x8d, 0xe5, 0xa4, 0x8d,
	0xe9, 0x80, 0x89, 0xe6, 0x8b, 0xa9, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0x52, 0x17, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x4c, 0x0a, 0x15, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe7, 0xa6, 0x81, 0xe6, 0xad, 0xa2,
	0xe5, 0x8f, 0x96, 0xe6, 0xb6, 0x88, 0xe9, 0x80, 0x89, 0xe6, 0x8b, 0xa9, 0x52, 0x15, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x12, 0x4b, 0x0a, 0x10, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0xea,
	0xb5, 0x18, 0x1b, 0xe7, 0xa1, 0xae, 0xe8, 0xae, 0xa4, 0xe5, 0x90, 0x8e, 0xe6, 0x8f, 0x90, 0xe5,
	0x89, 0x8d, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe9, 0x98, 0xb6, 0xe6, 0xae, 0xb5, 0x52, 0x10,
	0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x12, 0x68, 0x0a, 0x09, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65,
	0x73, 0x44, 0x54, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x42, 0x2b, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0xba, 0x8f, 0xe5, 0x8f, 0xb7, 0xda, 0xb5,
	0x18, 0x1d, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58,
	0x5f, 0x50, 0x56, 0x50, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4e, 0x55, 0x4d, 0x52,
	0x09, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x42, 0x61,
	0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe7, 0xa6, 0x81, 0xe7, 0x94, 0xa8, 0xe8, 0xbd, 0xae, 0xe6, 0xac, 0xa1, 0x52, 0x08,
	0x42, 0x61, 0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x54, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53,
	0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe6, 0xaf,
	0x8f, 0xe8, 0xbd, 0xae, 0xe6, 0x8a, 0xa2, 0xe9, 0x80, 0x89, 0xe9, 0x98, 0xb6, 0xe6, 0xae, 0xb5,
	0xe6, 0x97, 0xb6, 0xe9, 0x95, 0xbf, 0x52, 0x16, 0x53, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x12, 0x67,
	0x0a, 0x10, 0x53, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x41, 0x49,
	0x4f, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x41, 0x49, 0x4f, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x18, 0xea, 0xb5, 0x18,
	0x14, 0xe6, 0x8a, 0xa2, 0xe9, 0x80, 0x89, 0xe9, 0x98, 0xb6, 0xe6, 0xae, 0xb5, 0x41, 0x49, 0xe6,
	0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0x52, 0x10, 0x53, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x41, 0x49, 0x4f, 0x70, 0x12, 0x46, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x42, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe7, 0xa6, 0x81, 0xe7, 0x94, 0xa8, 0xe9,
	0x98, 0xb6, 0xe6, 0xae, 0xb5, 0xe6, 0x97, 0xb6, 0xe9, 0x95, 0xbf, 0x52, 0x12, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x42, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x12,
	0x5f, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x61, 0x6e, 0x41, 0x49, 0x4f, 0x70, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x52, 0x65, 0x73, 0x44, 0x54, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x41,
	0x49, 0x4f, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x18, 0xea, 0xb5, 0x18, 0x14, 0xe7, 0xa6,
	0x81, 0xe7, 0x94, 0xa8, 0xe9, 0x98, 0xb6, 0xe6, 0xae, 0xb5, 0x41, 0x49, 0xe6, 0x93, 0x8d, 0xe4,
	0xbd, 0x9c, 0x52, 0x0c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x61, 0x6e, 0x41, 0x49, 0x4f, 0x70,
	0x12, 0x50, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c,
	0xea, 0xb5, 0x18, 0x18, 0xe6, 0x9c, 0x80, 0xe7, 0xbb, 0x88, 0xe8, 0xb0, 0x83, 0xe6, 0x95, 0xb4,
	0xe9, 0x98, 0xb6, 0xe6, 0xae, 0xb5, 0xe6, 0x97, 0xb6, 0xe9, 0x95, 0xbf, 0x52, 0x14, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53,
	0x65, 0x63, 0x22, 0x6f, 0x0a, 0x11, 0x50, 0x76, 0x70, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x5a, 0x0a, 0x14, 0x50, 0x56, 0x50, 0x4c, 0x6f,
	0x72, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x66, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x52, 0x65, 0x73, 0x50, 0x56, 0x50, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x43, 0x66, 0x67, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x14, 0x50,
	0x56, 0x50, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x43, 0x66, 0x67, 0x22, 0x74, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x54, 0x65, 0x78, 0x74, 0x43, 0x66, 0x67, 0x12, 0x1a, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x02, 0x49,
	0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c,
	0xe6, 0x96, 0x87, 0xe6, 0x9c, 0xac, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0xf8, 0xb5, 0x18, 0x01,
	0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3a, 0x0e, 0x8a, 0x97, 0x22, 0x02, 0x49,
	0x44, 0xf0, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x02, 0x22, 0x82, 0x06, 0x0a, 0x0c, 0x52, 0x65,
	0x73, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x66, 0x67, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0xc8, 0xc1,
	0x18, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x05, 0x45, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0xa4, 0x87, 0xe6, 0xb3,
	0xa8, 0x52, 0x05, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x2e, 0x0a, 0x08, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x43, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e,
	0xe5, 0xaf, 0xb9, 0xe5, 0xb1, 0x80, 0xe9, 0x82, 0x80, 0xe8, 0xaf, 0xb7, 0x63, 0x64, 0x52, 0x08,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x44, 0x12, 0x32, 0x0a, 0x08, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12,
	0xe8, 0xa7, 0x82, 0xe6, 0x88, 0x98, 0xe4, 0xba, 0xba, 0xe6, 0x95, 0xb0, 0xe4, 0xb8, 0x8a, 0xe9,
	0x99, 0x90, 0x52, 0x08, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x75, 0x6d, 0x12, 0x34, 0x0a, 0x09,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0xa5, 0xbd, 0xe5, 0x8f, 0x8b, 0xe6, 0x95, 0xb0, 0xe9, 0x87,
	0x8f, 0xe4, 0xb8, 0x8a, 0xe9, 0x99, 0x90, 0x52, 0x09, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4e,
	0x75, 0x6d, 0x12, 0x42, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x65, 0x78, 0x74,
	0x4e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe9,
	0xaa, 0x8c, 0xe8, 0xaf, 0x81, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0xad, 0x97, 0xe6, 0x95,
	0xb0, 0xe4, 0xb8, 0x8a, 0xe9, 0x99, 0x90, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54,
	0x65, 0x78, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x44, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x65, 0x78, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c,
	0xea, 0xb5, 0x18, 0x18, 0xe7, 0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0xe7, 0x95, 0x99, 0xe5, 0xad, 0x98, 0xe4, 0xb8, 0x8a, 0xe9, 0x99, 0x90, 0x52, 0x0e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x65, 0x78, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x3d, 0x0a, 0x0c,
	0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe9, 0xbb, 0x91, 0xe5, 0x90, 0x8d, 0xe5, 0x8d,
	0x95, 0xe4, 0xba, 0xba, 0xe6, 0x95, 0xb0, 0xe4, 0xb8, 0x8a, 0xe9, 0x99, 0x90, 0x52, 0x0c, 0x42,
	0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x39, 0x0a, 0x0d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe7, 0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0xe6, 0x9c,
	0x89, 0xe6, 0x95, 0x88, 0xe6, 0x9c, 0x9f, 0x52, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x45, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x47, 0x61, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0xea,
	0xb5, 0x18, 0x1b, 0xe6, 0x9c, 0x80, 0xe8, 0xbf, 0x91, 0xe6, 0xb8, 0xb8, 0xe6, 0x88, 0x8f, 0xe5,
	0xb1, 0x95, 0xe7, 0xa4, 0xba, 0xe5, 0xaf, 0xb9, 0xe5, 0xb1, 0x80, 0xe6, 0x95, 0xb0, 0x52, 0x0d,
	0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x45, 0x0a,
	0x0c, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x21, 0xea, 0xb5, 0x18, 0x1d, 0xe6, 0x8e, 0xa8, 0xe8, 0x8d, 0x90, 0xe5,
	0xa5, 0xbd, 0xe5, 0x8f, 0x8b, 0x33, 0x30, 0xe5, 0xa4, 0xa9, 0xe5, 0x86, 0x85, 0xe5, 0x9c, 0xba,
	0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x52, 0x0c, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x4e, 0x75, 0x6d, 0x12, 0x3a, 0x0a, 0x09, 0x4e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x4e, 0x75,
	0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe9, 0x99, 0x84,
	0xe8, 0xbf, 0x91, 0xe7, 0x8e, 0xa9, 0xe5, 0xae, 0xb6, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0xe4,
	0xba, 0xba, 0xe6, 0x95, 0xb0, 0x52, 0x09, 0x4e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x4e, 0x75, 0x6d,
	0x12, 0x40, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xea, 0xb5, 0x18, 0x18, 0xe5, 0xaf, 0xb9, 0xe5, 0xb1, 0x80,
	0xe9, 0xa2, 0x84, 0xe7, 0xba, 0xa6, 0xe9, 0x82, 0x80, 0xe8, 0xaf, 0xb7, 0xe6, 0x96, 0x87, 0xe6,
	0x9c, 0xac, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x65,
	0x78, 0x74, 0x3a, 0x0a, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0x22, 0x49,
	0x0a, 0x0a, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x3b, 0x0a, 0x0a,
	0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x53, 0x6f,
	0x63, 0x69, 0x61, 0x6c, 0x43, 0x66, 0x67, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x0a, 0x53,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0xdd, 0x05, 0x0a, 0x1f, 0x52, 0x65,
	0x73, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x43, 0x68, 0x65, 0x73,
	0x73, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x20, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe6,
	0xa3, 0x8b, 0xe7, 0x9b, 0x98, 0x69, 0x64, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x24, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea,
	0xb5, 0x18, 0x0c, 0xe6, 0xa3, 0x8b, 0xe7, 0x9b, 0x98, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x4d, 0x69, 0x6e, 0x69, 0x49, 0x63, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe6, 0xa3, 0x8b,
	0xe7, 0x9b, 0x98, 0xe9, 0x81, 0x93, 0xe5, 0x85, 0xb7, 0xe5, 0x9b, 0xbe, 0x52, 0x08, 0x4d, 0x69,
	0x6e, 0x69, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0xa3, 0x8b, 0xe7, 0x9b, 0x98,
	0xe5, 0xb0, 0x8f, 0xe5, 0x9b, 0xbe, 0x52, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x07,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x29, 0xea,
	0xb5, 0x18, 0x0c, 0xe6, 0xa3, 0x8b, 0xe7, 0x9b, 0x98, 0xe5, 0x93, 0x81, 0xe8, 0xb4, 0xa8, 0xf2,
	0xb5, 0x18, 0x15, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x51, 0x55, 0x41, 0x4c,
	0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x36, 0x0a, 0x0a, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x44, 0x72, 0x6f, 0x70, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe9, 0x87, 0x8d, 0xe5, 0xa4,
	0x8d, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0x52, 0x0a, 0x44,
	0x65, 0x63, 0x6f, 0x6d, 0x70, 0x44, 0x72, 0x6f, 0x70, 0x12, 0x24, 0x0a, 0x04, 0x44, 0x65, 0x73,
	0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0xa3, 0x8b,
	0xe7, 0x9b, 0x98, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x04, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x24, 0x0a, 0x04, 0x4a, 0x75, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea,
	0xb5, 0x18, 0x0c, 0xe5, 0x89, 0x8d, 0xe5, 0xbe, 0x80, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x52,
	0x04, 0x4a, 0x75, 0x6d, 0x70, 0x12, 0x2c, 0x0a, 0x08, 0x4a, 0x75, 0x6d, 0x70, 0x44, 0x65, 0x73,
	0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x89, 0x8d,
	0xe5, 0xbe, 0x80, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x08, 0x4a, 0x75, 0x6d, 0x70, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x29, 0x0a, 0x07, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x0f, 0xea, 0xb5, 0x18, 0x0b, 0xe5, 0x9c, 0xba, 0xe6, 0x99, 0xaf,
	0xe8, 0xa1, 0xa8, 0x49, 0x44, 0x52, 0x07, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x56,
	0x0a, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe6, 0xb8, 0xb8, 0xe6, 0x88, 0x8f, 0xe6, 0xa8,
	0xa1, 0xe5, 0xbc, 0x8f, 0xe7, 0xbb, 0x84, 0x52, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x48, 0x0a, 0x0b, 0x53, 0x63, 0x61, 0x72, 0x63, 0x65,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0xea, 0xb5, 0x18,
	0x09, 0xe7, 0xa8, 0x80, 0xe6, 0x9c, 0x89, 0xe5, 0xba, 0xa6, 0xf2, 0xb5, 0x18, 0x15, 0x52, 0x45,
	0x53, 0x5f, 0x53, 0x43, 0x41, 0x52, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x52, 0x0b, 0x53, 0x63, 0x61, 0x72, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x3c, 0x0a, 0x0a, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52,
	0x65, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0xea, 0xb5,
	0x18, 0x00, 0x52, 0x0a, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x3a, 0x19,
	0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0x92, 0x97, 0x22, 0x07, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49,
	0x44, 0xf0, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x02, 0x22, 0xc8, 0x05, 0x0a, 0x1a, 0x52, 0x65,
	0x73, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x69, 0x6e, 0x12, 0x5a, 0x0a, 0x0d, 0x47, 0x61, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x42, 0x17, 0xea, 0xb5,
	0x18, 0x0f, 0xe6, 0xb8, 0xb8, 0xe6, 0x88, 0x8f, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xe7, 0xbb,
	0x84, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x3e, 0x0a, 0x11, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43,
	0x68, 0x65, 0x73, 0x73, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0xa3, 0x8b, 0xe7, 0x9b,
	0x98, 0x52, 0x11, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x65, 0x73, 0x73, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x12, 0x4a, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73,
	0x65, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe6, 0x89, 0x8b, 0xe5, 0x8a, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94,
	0xa8, 0xe8, 0xa1, 0xa8, 0xe6, 0x83, 0x85, 0xe4, 0xb8, 0xaa, 0xe6, 0x95, 0xb0, 0x52, 0x11, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x4e, 0x75, 0x6d,
	0x12, 0x4c, 0x0a, 0x15, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x16, 0xea, 0xb5, 0x18, 0x12, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0x94, 0xbb, 0xe5, 0x87,
	0xbb, 0xe7, 0x89, 0xb9, 0xe6, 0x95, 0x88, 0x52, 0x15, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x36,
	0x0a, 0x0d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe9, 0xbb, 0x98, 0xe8, 0xae,
	0xa4, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0x52, 0x0d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x4c, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x0b, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x54, 0x69, 0x70, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xea, 0xb5, 0x18,
	0x0f, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0x8f, 0x90, 0xe7, 0xa4, 0xba, 0xe8, 0xaf, 0xad,
	0x52, 0x0b, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x69, 0x70, 0x73, 0x12, 0x46, 0x0a,
	0x0f, 0x45, 0x66, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe7, 0x89, 0xb9, 0xe6,
	0x95, 0x88, 0xe6, 0x92, 0xad, 0xe6, 0x94, 0xbe, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe9, 0x97,
	0xb4, 0xe9, 0x9a, 0x94, 0x52, 0x0f, 0x45, 0x66, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x58, 0x0a, 0x15, 0x4d, 0x61, 0x69, 0x6e, 0x55, 0x49, 0x45,
	0x66, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x02, 0x42, 0x22, 0xea, 0xb5, 0x18, 0x1e, 0xe4, 0xb8, 0xbb, 0xe9, 0xa1, 0xb5,
	0xe7, 0x89, 0xb9, 0xe6, 0x95, 0x88, 0xe6, 0x92, 0xad, 0xe6, 0x94, 0xbe, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0xe9, 0x97, 0xb4, 0xe9, 0x9a, 0x94, 0x52, 0x15, 0x4d, 0x61, 0x69, 0x6e, 0x55, 0x49,
	0x45, 0x66, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x44, 0x0a, 0x11, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x45,
	0x66, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12,
	0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xbc, 0xa0, 0xe9, 0x80, 0x81, 0xe7, 0x89, 0xb9, 0xe6,
	0x95, 0x88, 0x52, 0x11, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x45, 0x66, 0x74, 0x49, 0x44, 0x3a, 0x1d, 0x8a, 0x97, 0x22, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xf0, 0x97, 0x22, 0x01, 0xf8, 0x97, 0x22, 0x01,
	0x98, 0x97, 0x22, 0x02, 0x22, 0xe2, 0x04, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x43, 0x68, 0x65, 0x73,
	0x73, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69,
	0x6e, 0x12, 0x20, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea,
	0xb5, 0x18, 0x08, 0xe9, 0x83, 0xa8, 0xe4, 0xbb, 0xb6, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe9, 0x83, 0xa8, 0xe4, 0xbb, 0xb6, 0xe5, 0x90, 0x8d,
	0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x44, 0x65, 0x73,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe9, 0x83, 0xa8,
	0xe4, 0xbb, 0xb6, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x04, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x3b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x27, 0xea,
	0xb5, 0x18, 0x0c, 0xe9, 0x83, 0xa8, 0xe4, 0xbb, 0xb6, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2,
	0xb5, 0x18, 0x13, 0x45, 0x43, 0x68, 0x65, 0x73, 0x73, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x61,
	0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x04,
	0x49, 0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x0a,
	0xe9, 0x83, 0xa8, 0xe4, 0xbb, 0xb6, 0x49, 0x43, 0x4f, 0x4e, 0x52, 0x04, 0x49, 0x63, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x02, 0x42, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe9, 0x83, 0xa8, 0xe4, 0xbb, 0xb6, 0xe5, 0xa4, 0xa7, 0xe5, 0x9b, 0xbe, 0x52, 0x02,
	0x42, 0x67, 0x12, 0x36, 0x0a, 0x07, 0x55, 0x72, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe9, 0x83, 0xa8, 0xe4, 0xbb, 0xb6, 0xe6,
	0xa8, 0xa1, 0xe5, 0x9e, 0x8b, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe,
	0x84, 0x52, 0x07, 0x55, 0x72, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x43, 0x0a, 0x07, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x29, 0xea, 0xb5, 0x18,
	0x0c, 0xe9, 0x83, 0xa8, 0xe4, 0xbb, 0xb6, 0xe5, 0x93, 0x81, 0xe8, 0xb4, 0xa8, 0xf2, 0xb5, 0x18,
	0x15, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x36, 0x0a, 0x0a, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x44, 0x72, 0x6f, 0x70, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe9, 0x87, 0x8d, 0xe5, 0xa4, 0x8d, 0xe8,
	0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0x52, 0x0a, 0x44, 0x65, 0x63,
	0x6f, 0x6d, 0x70, 0x44, 0x72, 0x6f, 0x70, 0x12, 0x24, 0x0a, 0x04, 0x4a, 0x75, 0x6d, 0x70, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x89, 0x8d, 0xe5, 0xbe,
	0x80, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x52, 0x04, 0x4a, 0x75, 0x6d, 0x70, 0x12, 0x2c, 0x0a,
	0x08, 0x4a, 0x75, 0x6d, 0x70, 0x44, 0x65, 0x73, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x89, 0x8d, 0xe5, 0xbe, 0x80, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf,
	0xb0, 0x52, 0x08, 0x4a, 0x75, 0x6d, 0x70, 0x44, 0x65, 0x73, 0x63, 0x12, 0x3c, 0x0a, 0x0a, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0xea, 0xb5, 0x18, 0x00, 0x52, 0x0a, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x3a, 0x0e, 0x8a, 0x97, 0x22, 0x02, 0x49,
	0x44, 0xf0, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x02, 0x22, 0xc1, 0x01, 0x0a, 0x1b, 0x52, 0x65,
	0x73, 0x43, 0x68, 0x65, 0x73, 0x73, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x53,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe6, 0xa3, 0x8b, 0xe7, 0x9b,
	0x98, 0x49, 0x44, 0x52, 0x02, 0x49, 0x44, 0x12, 0x49, 0x0a, 0x08, 0x41, 0x72, 0x65, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2d, 0xea, 0xb5, 0x18, 0x12, 0xe5,
	0xbc, 0x80, 0xe6, 0x94, 0xbe, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe5, 0x8c, 0xba, 0xe5, 0x9f,
	0x9f, 0xf2, 0xb5, 0x18, 0x13, 0x45, 0x43, 0x68, 0x65, 0x73, 0x73, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x41, 0x72, 0x65, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x41, 0x72, 0x65, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x11, 0xe5, 0x8f, 0xaf, 0xe6, 0x94, 0xbe, 0xe7, 0xbd,
	0xae, 0xe9, 0x83, 0xa8, 0xe4, 0xbb, 0xb6, 0x49, 0x44, 0x52, 0x06, 0x50, 0x61, 0x72, 0x74, 0x49,
	0x44, 0x3a, 0x0a, 0x92, 0x97, 0x22, 0x02, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0x22, 0xdd, 0x01,
	0x0a, 0x10, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x49, 0x63, 0x6f, 0x6e, 0x43,
	0x66, 0x67, 0x12, 0x16, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x04, 0x49, 0x63,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x9b,
	0xbe, 0xe6, 0xa0, 0x87, 0x52, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x07, 0x49, 0x63,
	0x6f, 0x6e, 0x45, 0x78, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xea, 0xb5, 0x18,
	0x0d, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0x31, 0x52, 0x07,
	0x49, 0x63, 0x6f, 0x6e, 0x45, 0x78, 0x31, 0x12, 0x2b, 0x0a, 0x07, 0x49, 0x63, 0x6f, 0x6e, 0x45,
	0x78, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xea, 0xb5, 0x18, 0x0d, 0xe6, 0x89,
	0xa9, 0xe5, 0xb1, 0x95, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0x32, 0x52, 0x07, 0x49, 0x63, 0x6f,
	0x6e, 0x45, 0x78, 0x32, 0x12, 0x2b, 0x0a, 0x07, 0x49, 0x63, 0x6f, 0x6e, 0x45, 0x78, 0x33, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xea, 0xb5, 0x18, 0x0d, 0xe6, 0x89, 0xa9, 0xe5, 0xb1,
	0x95, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0x33, 0x52, 0x07, 0x49, 0x63, 0x6f, 0x6e, 0x45, 0x78,
	0x33, 0x3a, 0x0a, 0x92, 0x97, 0x22, 0x02, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0x22, 0xaa, 0x06,
	0x0a, 0x1a, 0x52, 0x65, 0x73, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x65,
	0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe8, 0xa1,
	0xa8, 0xe6, 0x83, 0x85, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x24,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe8, 0xa1, 0xa8, 0xe6, 0x83, 0x85, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xa1, 0xa8, 0xe6, 0x83, 0x85, 0xe6, 0x8f,
	0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x04, 0x44, 0x65, 0x73, 0x63, 0x12, 0x22, 0x0a, 0x04, 0x49, 0x63,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x0a, 0xe8, 0xa1,
	0xa8, 0xe6, 0x83, 0x85, 0x49, 0x43, 0x4f, 0x4e, 0x52, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x02, 0x42, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c,
	0xe8, 0xa1, 0xa8, 0xe6, 0x83, 0x85, 0xe5, 0xa4, 0xa7, 0xe5, 0x9b, 0xbe, 0x52, 0x02, 0x42, 0x67,
	0x12, 0x30, 0x0a, 0x07, 0x55, 0x72, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe8, 0xa1, 0xa8, 0xe6, 0x83, 0x85, 0xe8, 0xb5, 0x84,
	0xe6, 0xba, 0x90, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x07, 0x55, 0x72, 0x6c, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x43, 0x0a, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x29, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xa1, 0xa8, 0xe6, 0x83, 0x85, 0xe5,
	0x93, 0x81, 0xe8, 0xb4, 0xa8, 0xf2, 0xb5, 0x18, 0x15, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f,
	0x50, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x07,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x0a, 0x44, 0x65, 0x63, 0x6f, 0x6d,
	0x70, 0x44, 0x72, 0x6f, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18,
	0x12, 0xe9, 0x87, 0x8d, 0xe5, 0xa4, 0x8d, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x8e, 0x89,
	0xe8, 0x90, 0xbd, 0x52, 0x0a, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x44, 0x72, 0x6f, 0x70, 0x12,
	0x24, 0x0a, 0x04, 0x4a, 0x75, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea,
	0xb5, 0x18, 0x0c, 0xe5, 0x89, 0x8d, 0xe5, 0xbe, 0x80, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x52,
	0x04, 0x4a, 0x75, 0x6d, 0x70, 0x12, 0x2c, 0x0a, 0x08, 0x4a, 0x75, 0x6d, 0x70, 0x44, 0x65, 0x73,
	0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x89, 0x8d,
	0xe5, 0xbe, 0x80, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x08, 0x4a, 0x75, 0x6d, 0x70, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x3c, 0x0a, 0x10, 0x4f, 0x75, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea,
	0xb5, 0x18, 0x0c, 0xe5, 0xb1, 0x80, 0xe5, 0xa4, 0x96, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0x52,
	0x10, 0x4f, 0x75, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x4a, 0x0a, 0x14, 0x4f, 0x75, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x69, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0xb1, 0x80, 0xe5, 0xa4, 0x96, 0xe8, 0xb5, 0x84, 0xe6, 0xba,
	0x90, 0xe5, 0x8a, 0xa8, 0xe7, 0x94, 0xbb, 0x52, 0x14, 0x4f, 0x75, 0x74, 0x47, 0x61, 0x6d, 0x65,
	0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x62, 0x0a,
	0x13, 0x61, 0x69, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x52, 0x65, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x49, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0x41, 0x49,
	0xe4, 0xba, 0xa4, 0xe6, 0xb5, 0x81, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x13, 0x61, 0x69,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x52, 0x65, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0xea,
	0xb5, 0x18, 0x00, 0x52, 0x0a, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x3a,
	0x29, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0x92, 0x97, 0x22, 0x13, 0x61, 0x69, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0xf0, 0x97,
	0x22, 0x01, 0xf8, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x02, 0x22, 0xa4, 0x0c, 0x0a, 0x1f, 0x52,
	0x65, 0x73, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x45, 0x66, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x20,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08,
	0xe7, 0x89, 0xb9, 0xe6, 0x95, 0x88, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x24, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x0c, 0xe7, 0x89, 0xb9, 0xe6, 0x95, 0x88, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x63, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0x89, 0xb9, 0xe6, 0x95, 0x88,
	0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x04, 0x44, 0x65, 0x73, 0x63, 0x12, 0x41, 0x0a, 0x05,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x52, 0x65,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x66,
	0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0x89, 0xb9, 0xe6,
	0x95, 0x88, 0xe5, 0x88, 0x86, 0xe7, 0xb1, 0xbb, 0x52, 0x05, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x3e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x45, 0x66, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0x89, 0xb9,
	0xe6, 0x95, 0x88, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x34, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe7, 0x89, 0xb9, 0xe6, 0x95, 0x88, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x52, 0x09, 0x54, 0x79, 0x70, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x22, 0x0a, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x0a, 0xe7, 0x89, 0xb9, 0xe6, 0x95, 0x88, 0x49,
	0x43, 0x4f, 0x4e, 0x52, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x02, 0x42, 0x67, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0x89, 0xb9, 0xe6, 0x95,
	0x88, 0xe5, 0xa4, 0xa7, 0xe5, 0x9b, 0xbe, 0x52, 0x02, 0x42, 0x67, 0x12, 0x30, 0x0a, 0x07, 0x55,
	0x72, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5,
	0x18, 0x12, 0xe7, 0x89, 0xb9, 0xe6, 0x95, 0x88, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0xb7,
	0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x07, 0x55, 0x72, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x43, 0x0a,
	0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x29,
	0xea, 0xb5, 0x18, 0x0c, 0xe7, 0x89, 0xb9, 0xe6, 0x95, 0x88, 0xe5, 0x93, 0x81, 0xe8, 0xb4, 0xa8,
	0xf2, 0xb5, 0x18, 0x15, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x51, 0x55, 0x41,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x36, 0x0a, 0x0a, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x44, 0x72, 0x6f, 0x70,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe9, 0x87, 0x8d, 0xe5,
	0xa4, 0x8d, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0x52, 0x0a,
	0x44, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x44, 0x72, 0x6f, 0x70, 0x12, 0x24, 0x0a, 0x04, 0x4a, 0x75,
	0x6d, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x89,
	0x8d, 0xe5, 0xbe, 0x80, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x52, 0x04, 0x4a, 0x75, 0x6d, 0x70,
	0x12, 0x2c, 0x0a, 0x08, 0x4a, 0x75, 0x6d, 0x70, 0x44, 0x65, 0x73, 0x63, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x89, 0x8d, 0xe5, 0xbe, 0x80, 0xe6, 0x8f,
	0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x08, 0x4a, 0x75, 0x6d, 0x70, 0x44, 0x65, 0x73, 0x63, 0x12, 0x30,
	0x0a, 0x0a, 0x62, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xad, 0x90, 0xe5, 0xbc, 0xb9, 0xe7, 0x89,
	0xb9, 0xe6, 0x95, 0x88, 0x52, 0x0a, 0x62, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x2a, 0x0a, 0x07, 0x68, 0x69, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x8f, 0x97, 0xe5, 0x87, 0xbb, 0xe7, 0x89, 0xb9,
	0xe6, 0x95, 0x88, 0x52, 0x07, 0x68, 0x69, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x07,
	0x77, 0x69, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea,
	0xb5, 0x18, 0x0c, 0xe8, 0x83, 0x9c, 0xe5, 0x88, 0xa9, 0xe7, 0x89, 0xb9, 0xe6, 0x95, 0x88, 0x52,
	0x07, 0x77, 0x69, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2b, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x41, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xea, 0xb5, 0x18,
	0x09, 0xe6, 0x94, 0xbb, 0xe5, 0x87, 0xbb, 0x41, 0x67, 0x65, 0x52, 0x09, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x41, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x41, 0x67, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe8, 0x83, 0x9c, 0xe5, 0x88,
	0xa9, 0x41, 0x67, 0x65, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x41, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x0b,
	0x53, 0x63, 0x61, 0x72, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x26, 0xea, 0xb5, 0x18, 0x09, 0xe7, 0xa8, 0x80, 0xe6, 0x9c, 0x89, 0xe5, 0xba, 0xa6,
	0xf2, 0xb5, 0x18, 0x15, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x43, 0x41, 0x52, 0x43, 0x45, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0b, 0x53, 0x63, 0x61, 0x72, 0x63,
	0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x34, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x4a, 0x75, 0x6d,
	0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe8, 0xb7, 0xb3, 0xe8, 0xbd, 0xac, 0x52, 0x0c,
	0x55, 0x73, 0x65, 0x4a, 0x75, 0x6d, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x3c, 0x0a, 0x0a,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0xea, 0xb5, 0x18, 0x00, 0x52, 0x0a,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x0e, 0x42, 0x6f,
	0x72, 0x6e, 0x48, 0x61, 0x76, 0x65, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x18, 0xea, 0xb5, 0x18, 0x14, 0xe5, 0x87, 0xba, 0xe7, 0x94, 0x9f, 0xe6, 0x8b,
	0xa5, 0xe6, 0x9c, 0x89, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0x49, 0x44, 0x52, 0x0e, 0x42, 0x6f,
	0x72, 0x6e, 0x48, 0x61, 0x76, 0x65, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x10,
	0x54, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe4, 0xbc, 0xa0, 0xe9,
	0x80, 0x81, 0x41, 0x67, 0x65, 0x52, 0x10, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x12, 0x4d, 0x0a, 0x14, 0x48, 0x6f, 0x73, 0x74, 0x54,
	0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe4, 0xb8, 0xbb, 0xe5, 0x9c,
	0xba, 0xe5, 0x87, 0x86, 0xe5, 0xa4, 0x87, 0xe4, 0xbc, 0xa0, 0xe9, 0x80, 0x81, 0x41, 0x67, 0x65,
	0x52, 0x14, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x12, 0x4d, 0x0a, 0x14, 0x41, 0x77, 0x61, 0x79, 0x54, 0x65,
	0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe5, 0xae, 0xa2, 0xe5, 0x9c, 0xba,
	0xe5, 0x87, 0x86, 0xe5, 0xa4, 0x87, 0xe4, 0xbc, 0xa0, 0xe9, 0x80, 0x81, 0x41, 0x67, 0x65, 0x52,
	0x14, 0x41, 0x77, 0x61, 0x79, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x67, 0x65, 0x12, 0x57, 0x0a, 0x16, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x65, 0x74, 0x41, 0x67, 0x65, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xea, 0xb5, 0x18, 0x1b, 0xe6, 0x88, 0x98, 0xe6, 0x96,
	0x97, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe7, 0xa6, 0xbb, 0xe5, 0xbc, 0x80, 0xe6, 0x88, 0x98,
	0xe5, 0x9c, 0xba, 0x41, 0x67, 0x65, 0x52, 0x16, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x65, 0x74, 0x41, 0x67, 0x65, 0x12, 0x55,
	0x0a, 0x15, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x41, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xea,
	0xb5, 0x18, 0x1b, 0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe4, 0xb8, 0xbb, 0xe5, 0x9c, 0xba, 0x41, 0x67, 0x65, 0x52, 0x15,
	0x54, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x41, 0x67, 0x65, 0x3a, 0x2a, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0x92, 0x97, 0x22,
	0x05, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x92, 0x97, 0x22, 0x0b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x2c,
	0x20, 0x54, 0x79, 0x70, 0x65, 0xf0, 0x97, 0x22, 0x01, 0xf8, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22,
	0x02, 0x22, 0x88, 0x04, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x69, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x69, 0x6e, 0x12,
	0x65, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e,
	0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x69,
	0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x1d, 0xea, 0xb5, 0x18, 0x15, 0xe4, 0xb8, 0xaa, 0xe6, 0x80, 0xa7, 0xe5, 0x8c, 0x96,
	0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xc8, 0xc1, 0x18, 0x01,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x65,
	0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x96,
	0x87, 0xe6, 0x9c, 0xac, 0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x08,
	0x53, 0x68, 0x6f, 0x77, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c,
	0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x08, 0x49, 0x63,
	0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x22, 0x95, 0x02, 0x0a, 0x0f, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x1a, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x69, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x73, 0x73, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x10, 0x01, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe6, 0xa3, 0x8b, 0xe7, 0x9b, 0x98,
	0x12, 0x2f, 0x0a, 0x19, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x45, 0x66, 0x74, 0x10, 0x02, 0x1a,
	0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x94, 0xbb, 0xe5, 0x87, 0xbb, 0xe7, 0x89, 0xb9, 0xe6, 0x95,
	0x88, 0x12, 0x30, 0x0a, 0x1a, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x66, 0x74, 0x10,
	0x03, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0x83, 0x9c, 0xe5, 0x88, 0xa9, 0xe7, 0x89, 0xb9,
	0xe6, 0x95, 0x88, 0x12, 0x32, 0x0a, 0x1c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x45, 0x66, 0x74, 0x10, 0x04, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe4, 0xbc, 0xa0, 0xe9, 0x80,
	0x81, 0xe7, 0x89, 0xb9, 0xe6, 0x95, 0x88, 0x12, 0x25, 0x0a, 0x15, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x6d, 0x6f, 0x6a, 0x69,
	0x10, 0x05, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe8, 0xa1, 0xa8, 0xe6, 0x83, 0x85, 0x3a, 0x0c,
	0x8a, 0x97, 0x22, 0x04, 0x54, 0x79, 0x70, 0x65, 0xf0, 0x97, 0x22, 0x01, 0x22, 0xb8, 0x04, 0x0a,
	0x0f, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x12, 0x54, 0x0a, 0x0d, 0x43, 0x68, 0x65, 0x73, 0x73, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x66,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x52, 0x65, 0x73, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x65,
	0x43, 0x68, 0x65, 0x73, 0x73, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69,
	0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x0d, 0x43, 0x68, 0x65, 0x73, 0x73, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x43, 0x66, 0x67, 0x12, 0x5b, 0x0a, 0x13, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x6c, 0x69, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x43, 0x66, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65,
	0x73, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x13,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x43, 0x66, 0x67, 0x12, 0x5d, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x73, 0x73, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x50, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73,
	0x43, 0x68, 0x65, 0x73, 0x73, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x15, 0x43, 0x68, 0x65,
	0x73, 0x73, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x69, 0x6e, 0x12, 0x66, 0x0a, 0x18, 0x43, 0x68, 0x65, 0x73, 0x73, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x50, 0x61, 0x72, 0x74, 0x53, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52,
	0x65, 0x73, 0x43, 0x68, 0x65, 0x73, 0x73, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74,
	0x53, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00,
	0x52, 0x18, 0x43, 0x68, 0x65, 0x73, 0x73, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74,
	0x53, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x4d, 0x0a, 0x0c, 0x45, 0x6d,
	0x6f, 0x6a, 0x69, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x0c, 0x45, 0x6d, 0x6f,
	0x6a, 0x69, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x5c, 0x0a, 0x11, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x45, 0x66, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52,
	0x65, 0x73, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x45, 0x66, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x42, 0x04,
	0xd2, 0xc1, 0x18, 0x00, 0x52, 0x11, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x66, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x22, 0xb5, 0x03, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x43,
	0x68, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x07, 0x43,
	0x68, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x08, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x07,
	0x43, 0x68, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x06, 0x48, 0x65, 0x72, 0x6f, 0x49,
	0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0xe5, 0xaf, 0xb9,
	0xe5, 0xba, 0x94, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0x49, 0x44, 0x52, 0x06, 0x48, 0x65, 0x72,
	0x6f, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x08, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe8, 0xb5, 0x9b, 0xe5, 0xad,
	0xa3, 0x49, 0x44, 0x52, 0x08, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x4e, 0x0a,
	0x0d, 0x50, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x55, 0x6e, 0x69, 0x71, 0x49, 0x44, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x28, 0xea, 0xb5, 0x18, 0x14, 0xe5, 0xb1, 0x80, 0xe5, 0x86, 0x85,
	0xe7, 0x8e, 0xa9, 0xe6, 0xb3, 0x95, 0xe5, 0x94, 0xaf, 0xe4, 0xb8, 0x80, 0x49, 0x44, 0xf2, 0xb5,
	0x18, 0x0c, 0x50, 0x4c, 0x41, 0x59, 0x4d, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0d,
	0x50, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x55, 0x6e, 0x69, 0x71, 0x49, 0x44, 0x12, 0x24, 0x0a,
	0x06, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea,
	0xb5, 0x18, 0x08, 0xe7, 0x9a, 0xae, 0xe8, 0x82, 0xa4, 0x49, 0x44, 0x52, 0x06, 0x53, 0x6b, 0x69,
	0x6e, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x09, 0x43, 0x68, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0xa3, 0x8b, 0xe5,
	0xad, 0x90, 0xe5, 0x90, 0x8d, 0xe5, 0xad, 0x97, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x09, 0x43, 0x68,
	0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe5, 0xb1, 0x80, 0xe5, 0xa4, 0x96, 0xe6, 0x92, 0xad, 0xe6,
	0x8a, 0xa5, 0xe4, 0xbd, 0x8d, 0xe7, 0xbd, 0xae, 0xe5, 0x81, 0x8f, 0xe7, 0xa7, 0xbb, 0x52, 0x0f,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x3a,
	0x2e, 0x8a, 0x97, 0x22, 0x07, 0x43, 0x68, 0x65, 0x73, 0x73, 0x49, 0x44, 0x92, 0x97, 0x22, 0x08,
	0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x92, 0x97, 0x22, 0x0f, 0x53, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x49, 0x44, 0x2c, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0x22,
	0xad, 0x04, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x43, 0x68, 0x65, 0x73, 0x73, 0x53, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x08, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xc8, 0xc1, 0x18, 0x01, 0xea, 0xb5,
	0x18, 0x08, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0x49, 0x44, 0x52, 0x08, 0x53, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x49, 0x0a, 0x0f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xea,
	0xb5, 0x18, 0x1b, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4,
	0xb9, 0x89, 0xe5, 0x9c, 0xba, 0xe6, 0x99, 0xaf, 0xe6, 0xa8, 0xa1, 0xe5, 0x9e, 0x8b, 0x52, 0x0f,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x49, 0x0a, 0x0f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x42, 0x61, 0x64, 0x67, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xea, 0xb5, 0x18, 0x1b, 0xe8, 0xb5,
	0x9b, 0xe5, 0xad, 0xa3, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe5, 0xbe, 0xbd,
	0xe7, 0xab, 0xa0, 0xe6, 0xa8, 0xa1, 0xe5, 0x9e, 0x8b, 0x52, 0x0f, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x42, 0x61, 0x64, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x0b, 0x53, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0,
	0x87, 0x52, 0x0b, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x4d,
	0x0a, 0x0b, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x2b, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x88, 0xb7, 0xe6, 0x96, 0xb0, 0xe7,
	0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x17, 0x45, 0x43, 0x68, 0x65, 0x73, 0x73, 0x53,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a,
	0x0b, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe7, 0x89, 0xb9, 0xe6, 0xae, 0x8a, 0xe8, 0xb5,
	0x9b, 0xe5, 0xad, 0xa3, 0xe5, 0x90, 0x8d, 0xe5, 0xad, 0x97, 0x52, 0x0b, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x53,
	0x68, 0x6f, 0x77, 0x4e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5,
	0x18, 0x18, 0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe5, 0x90, 0x88, 0xe6, 0x88, 0x90, 0xe6, 0x98,
	0xbe, 0xe7, 0xa4, 0xba, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x0b, 0x43, 0x6f, 0x6d, 0x70,
	0x53, 0x68, 0x6f, 0x77, 0x4e, 0x75, 0x6d, 0x12, 0x40, 0x0a, 0x0f, 0x4a, 0x75, 0x6d, 0x70, 0x41,
	0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe8, 0xb7, 0xb3, 0xe8, 0xbd, 0xac, 0xe6, 0x88, 0x90, 0xe5,
	0xb0, 0xb1, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0f, 0x4a, 0x75, 0x6d, 0x70, 0x41, 0x63,
	0x68, 0x69, 0x65, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x14, 0x8a, 0x97, 0x22, 0x08, 0x53,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x98, 0x97, 0x22, 0x02, 0xf0, 0x97, 0x22, 0x01, 0x22,
	0xf7, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x43, 0x68, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0xc8, 0xc1, 0x18,
	0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x57, 0x0a, 0x18, 0x53, 0x54, 0x41, 0x63, 0x6e, 0x74, 0x43,
	0x68, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xea, 0xb5, 0x18, 0x17, 0x53, 0x54, 0x41,
	0x63, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0xe5, 0x90, 0x8d, 0x52, 0x18, 0x53, 0x54, 0x41, 0x63, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x73,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x04, 0x44, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xea, 0xb5,
	0x18, 0x09, 0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba, 0xe5, 0x90, 0x8d, 0xf8, 0xb5, 0x18, 0x01, 0x52,
	0x04, 0x44, 0x65, 0x73, 0x63, 0x12, 0x28, 0x0a, 0x06, 0x49, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x98, 0xaf, 0xe5, 0x90,
	0xa6, 0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba, 0x52, 0x06, 0x49, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x3a,
	0x18, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0x92, 0x97, 0x22, 0x06, 0x49, 0x73, 0x53, 0x68, 0x6f,
	0x77, 0xf0, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x02, 0x22, 0x5c, 0x0a, 0x10, 0x52, 0x65, 0x73,
	0x43, 0x68, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x02, 0x49,
	0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x08, 0x43, 0x68, 0x65,
	0x73, 0x73, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x06, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xda, 0xb5, 0x18, 0x02, 0x31, 0x32, 0x52, 0x08, 0x43,
	0x68, 0x65, 0x73, 0x73, 0x49, 0x44, 0x73, 0x22, 0x80, 0x09, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x43,
	0x68, 0x65, 0x73, 0x73, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x0a, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe9, 0x85, 0x8d,
	0xe9, 0xa5, 0xb0, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x0a, 0x44, 0x65, 0x63, 0x6f, 0x72,
	0x61, 0x74, 0x65, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x08, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe8, 0xb5, 0x9b,
	0xe5, 0xad, 0xa3, 0x49, 0x44, 0x52, 0x08, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x2c, 0x0a, 0x07, 0x43, 0x68, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0xe5, 0xb1, 0x80, 0xe5, 0xa4, 0x96, 0xe8, 0x8b, 0xb1, 0xe9,
	0x9b, 0x84, 0x49, 0x44, 0x52, 0x07, 0x43, 0x68, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x58, 0x0a,
	0x0c, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x4f,
	0x4d, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x44, 0x45, 0x43, 0x4f, 0x52, 0x41, 0x54, 0x45, 0x5f,
	0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe9, 0x85, 0x8d,
	0xe9, 0xa5, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0c, 0x44, 0x65, 0x63, 0x6f, 0x72,
	0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x43, 0x6f,
	0x6d, 0x62, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x0c, 0xe8, 0x83, 0xbd, 0xe5, 0x90, 0xa6, 0xe5, 0x90, 0x88, 0xe6, 0x88, 0x90, 0x52, 0x0a, 0x43,
	0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x12, 0x5d, 0x0a, 0x07, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x52, 0x65, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x51, 0x55,
	0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x42, 0x23, 0xea, 0xb5, 0x18, 0x06,
	0xe5, 0x93, 0x81, 0xe8, 0xb4, 0xa8, 0xf2, 0xb5, 0x18, 0x15, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52,
	0x4f, 0x50, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52,
	0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x0c, 0x44, 0x65, 0x63, 0x6f,
	0x72, 0x61, 0x74, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16,
	0xea, 0xb5, 0x18, 0x12, 0xe9, 0x85, 0x8d, 0xe9, 0xa5, 0xb0, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87,
	0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x0c, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x65,
	0x49, 0x63, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0c, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c,
	0xe9, 0x85, 0x8d, 0xe9, 0xa5, 0xb0, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xf8, 0xb5, 0x18, 0x01,
	0x52, 0x0c, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x57, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1a, 0xea, 0xb5, 0x18, 0x12, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0xb8,
	0xa0, 0xe9, 0x81, 0x93, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x0a,
	0x47, 0x65, 0x74, 0x57, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x0a, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14,
	0xea, 0xb5, 0x18, 0x0c, 0xe7, 0xae, 0x80, 0xe7, 0x9f, 0xad, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0,
	0xf8, 0xb5, 0x18, 0x01, 0x52, 0x0a, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x46, 0x0a, 0x0f, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x69, 0x67, 0x49,
	0x63, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe9,
	0x85, 0x8d, 0xe9, 0xa5, 0xb0, 0xe9, 0x81, 0x93, 0xe5, 0x85, 0xb7, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0,
	0x87, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x0f, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74,
	0x65, 0x42, 0x69, 0x67, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0b, 0x54, 0x69, 0x70, 0x73,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xea,
	0xb5, 0x18, 0x10, 0x54, 0x69, 0x70, 0x73, 0xe6, 0x8f, 0x90, 0xe7, 0xa4, 0xba, 0xe5, 0x86, 0x85,
	0xe5, 0xae, 0xb9, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x54, 0x69, 0x70, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x49, 0x6e, 0x66,
	0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x0c, 0xe8, 0xaf, 0xad, 0xe9, 0x9f, 0xb3, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0d, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x10,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xaf, 0xad, 0xe9,
	0x9f, 0xb3, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x10, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x4a,
	0x0a, 0x14, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5,
	0x18, 0x12, 0xe8, 0xb6, 0x85, 0xe7, 0xa5, 0x9e, 0xe6, 0x92, 0xad, 0xe6, 0x8a, 0xa5, 0xe8, 0xb5,
	0x84, 0xe6, 0xba, 0x90, 0x52, 0x14, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x46, 0x0a, 0x12, 0x4b, 0x69,
	0x6c, 0x6c, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x87, 0xbb, 0xe6,
	0x9d, 0x80, 0xe6, 0x92, 0xad, 0xe6, 0x8a, 0xa5, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0x52, 0x12,
	0x4b, 0x69, 0x6c, 0x6c, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x4a, 0x75, 0x6d, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xb7, 0xb3, 0xe8, 0xbd,
	0xac, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x52, 0x09, 0x4a, 0x75, 0x6d, 0x70, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x46, 0x8a, 0x97, 0x22, 0x0a, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x65,
	0x49, 0x44, 0x92, 0x97, 0x22, 0x10, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x2c, 0x43,
	0x68, 0x65, 0x73, 0x73, 0x49, 0x44, 0x92, 0x97, 0x22, 0x08, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x49, 0x44, 0x92, 0x97, 0x22, 0x0c, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0xf0, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x02, 0x22, 0xe1, 0x02, 0x0a, 0x1d, 0x52,
	0x65, 0x73, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x0b,
	0x48, 0x65, 0x72, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe5, 0x93, 0x81,
	0xe8, 0xb4, 0xa8, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x0b, 0x48, 0x65, 0x72, 0x6f, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x5c, 0x0a, 0x0c, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x52, 0x65, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x4f, 0x4d, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x44, 0x45,
	0x43, 0x4f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x42, 0x14,
	0xea, 0xb5, 0x18, 0x0c, 0xe9, 0x85, 0x8d, 0xe9, 0xa5, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0xc8, 0xc1, 0x18, 0x02, 0x52, 0x0c, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x47, 0x61, 0x69,
	0x6e, 0x46, 0x72, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18,
	0x15, 0xe5, 0x88, 0x86, 0xe8, 0xa7, 0xa3, 0xe8, 0x8e, 0xb7, 0xe5, 0xbe, 0x97, 0xe7, 0xa2, 0x8e,
	0xe7, 0x89, 0x87, 0xe6, 0x95, 0xb0, 0x52, 0x0f, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x47,
	0x61, 0x69, 0x6e, 0x46, 0x72, 0x61, 0x67, 0x12, 0x43, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x62, 0x69,
	0x6e, 0x65, 0x4e, 0x65, 0x65, 0x64, 0x46, 0x72, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe5, 0x90, 0x88, 0xe6, 0x88, 0x90, 0xe9, 0x9c, 0x80, 0xe8,
	0xa6, 0x81, 0xe7, 0xa2, 0x8e, 0xe7, 0x89, 0x87, 0xe6, 0x95, 0xb0, 0x52, 0x0f, 0x43, 0x6f, 0x6d,
	0x62, 0x69, 0x6e, 0x65, 0x4e, 0x65, 0x65, 0x64, 0x46, 0x72, 0x61, 0x67, 0x3a, 0x20, 0x92, 0x97,
	0x22, 0x18, 0x48, 0x65, 0x72, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2c, 0x44, 0x65,
	0x63, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0xf0, 0x97, 0x22, 0x01, 0x22, 0x86,
	0x02, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x08, 0x53,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea,
	0xb5, 0x18, 0x08, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0x49, 0x44, 0x52, 0x08, 0x53, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x0d, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5,
	0x18, 0x08, 0xe6, 0x88, 0x90, 0xe5, 0xb0, 0xb1, 0x49, 0x44, 0x52, 0x0d, 0x41, 0x63, 0x68, 0x69,
	0x65, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x0b, 0x48, 0x65, 0x72,
	0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x0c, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe5, 0x93, 0x81, 0xe8, 0xb4, 0xa8,
	0x52, 0x0b, 0x48, 0x65, 0x72, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a,
	0x09, 0x4a, 0x75, 0x6d, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xb7, 0xb3, 0xe8, 0xbd, 0xac, 0xe5, 0x8f, 0x82, 0xe6,
	0x95, 0xb0, 0x52, 0x09, 0x4a, 0x75, 0x6d, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x28, 0x92,
	0x97, 0x22, 0x08, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x92, 0x97, 0x22, 0x14, 0x53,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x2c, 0x48, 0x65, 0x72, 0x6f, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0xf0, 0x97, 0x22, 0x01, 0x22, 0xcb, 0x04, 0x0a, 0x09, 0x43, 0x68, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x3c, 0x0a, 0x09, 0x43, 0x68, 0x65, 0x73, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x43, 0x68, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x09, 0x43, 0x68, 0x65, 0x73, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x5a, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x43, 0x68,
	0x65, 0x73, 0x73, 0x48, 0x65, 0x72, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x43,
	0x68, 0x65, 0x73, 0x73, 0x48, 0x65, 0x72, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x14, 0x50, 0x6c, 0x61, 0x79, 0x4d,
	0x6f, 0x64, 0x43, 0x68, 0x65, 0x73, 0x73, 0x48, 0x65, 0x72, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x12,
	0x4b, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x73, 0x73, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x43, 0x68, 0x65, 0x73, 0x73, 0x53, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x0f, 0x43, 0x68, 0x65,
	0x73, 0x73, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x54, 0x0a, 0x12,
	0x43, 0x68, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x43, 0x68, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x12,
	0x43, 0x68, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x45, 0x0a, 0x0d, 0x43, 0x68, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x62, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x52, 0x65, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x43, 0x68, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x62,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x0d, 0x43, 0x68, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x6d, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x54, 0x0a, 0x11, 0x43, 0x68, 0x65,
	0x73, 0x73, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52,
	0x65, 0x73, 0x43, 0x68, 0x65, 0x73, 0x73, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x11, 0x43, 0x68,
	0x65, 0x73, 0x73, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x64, 0x0a, 0x16, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x62, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x65, 0x63,
	0x6f, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x16, 0x44,
	0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x22, 0x49, 0x0a, 0x09, 0x45, 0x71, 0x75, 0x69, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x12, 0x3c, 0x0a, 0x09, 0x45, 0x71, 0x75, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x52, 0x65, 0x73, 0x45, 0x71, 0x75, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x42,
	0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x09, 0x45, 0x71, 0x75, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x22, 0xfb, 0x08, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x57, 0x65,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x06, 0x57, 0x65, 0x61,
	0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe6,
	0xb4, 0xbb, 0xe5, 0x8a, 0xa8, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x06, 0x57, 0x65, 0x61,
	0x6c, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x08, 0x57, 0x65, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1d, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0xb4, 0xbb, 0xe5, 0x8a,
	0xa8, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x09, 0x45, 0x57, 0x65, 0x61, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x57, 0x65, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4b,
	0x0a, 0x11, 0x57, 0x65, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xea, 0xb5, 0x18, 0x15, 0xe6,
	0xb4, 0xbb, 0xe5, 0x8a, 0xa8, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xe5, 0x89, 0xaf, 0xe6, 0xa0,
	0x87, 0xe9, 0xa2, 0x98, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x11, 0x57, 0x65, 0x61, 0x6c, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x57,
	0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea,
	0xb5, 0x18, 0x0c, 0xe6, 0xb4, 0xbb, 0xe5, 0x8a, 0xa8, 0xe6, 0xa0, 0x87, 0xe9, 0xa2, 0x98, 0xf8,
	0xb5, 0x18, 0x01, 0x52, 0x08, 0x57, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a,
	0x08, 0x57, 0x65, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0xb4, 0xbb, 0xe5, 0x8a, 0xa8, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf,
	0xb0, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x08, 0x57, 0x65, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x42, 0x0a, 0x0b, 0x57, 0x65, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x44, 0x65, 0x73, 0x63, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xea, 0xb5, 0x18, 0x18, 0xe6, 0xb4, 0xbb, 0xe5, 0x8a, 0xa8,
	0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe9, 0xa1, 0xb5, 0xe7, 0xad, 0xbe, 0xe6, 0x8f, 0x8f, 0xe8,
	0xbf, 0xb0, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x57, 0x65, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x3e, 0x0a, 0x0b, 0x57, 0x65, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe6, 0xb4,
	0xbb, 0xe5, 0x8a, 0xa8, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe9, 0xa1, 0xb5, 0xe7, 0xad, 0xbe,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0b, 0x57, 0x65, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x49, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6,
	0x98, 0xbe, 0xe7, 0xa4, 0xba, 0x52, 0x06, 0x49, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x28, 0x0a,
	0x06, 0x53, 0x6f, 0x72, 0x74, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea,
	0xb5, 0x18, 0x0c, 0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0x52,
	0x06, 0x53, 0x6f, 0x72, 0x74, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x09, 0x49, 0x73, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c,
	0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x8e, 0xa8, 0xe8, 0x8d, 0x90, 0x52, 0x09, 0x49, 0x73,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x44,
	0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x97,
	0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x07,
	0x54, 0x69, 0x6d, 0x65, 0x44, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12,
	0xe6, 0xb4, 0xbb, 0xe5, 0x8a, 0xa8, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a,
	0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16,
	0xea, 0xb5, 0x18, 0x12, 0xe6, 0xb4, 0xbb, 0xe5, 0x8a, 0xa8, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f,
	0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x47, 0x65, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x47, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x47, 0x65,
	0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x47, 0x65, 0x6e, 0x12, 0x32, 0x0a, 0x08, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0xb4, 0xbb, 0xe5, 0x8a,
	0xa8, 0xe5, 0x88, 0xb7, 0xe5, 0x87, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x08, 0x53,
	0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x45, 0x6e, 0x74, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6,
	0xb4, 0xbb, 0xe5, 0x8a, 0xa8, 0xe5, 0x85, 0xa5, 0xe5, 0x8f, 0xa3, 0x52, 0x08, 0x45, 0x6e, 0x74,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x28, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0xbe,
	0xaa, 0xe7, 0x8e, 0xaf, 0xe5, 0x91, 0xa8, 0xe6, 0x9c, 0x9f, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0xf2, 0xb5, 0x18, 0x0e, 0x45, 0x57, 0x65, 0x61, 0x6c, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a,
	0x0a, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0xbe, 0xaa, 0xe7, 0x8e, 0xaf, 0xe5, 0x91, 0xa8,
	0xe6, 0x9c, 0x9f, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x52, 0x0a, 0x43, 0x79, 0x63, 0x6c, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x36, 0x0a, 0x0a, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5,
	0x8a, 0xa0, 0xe8, 0xbd, 0xbd, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0xe9, 0x99, 0x90, 0xe5, 0x88,
	0xb6, 0x52, 0x0a, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3f, 0x0a,
	0x0d, 0x57, 0x65, 0x61, 0x6c, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe6, 0xb4, 0xbb, 0xe5, 0x8a, 0xa8,
	0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe5, 0xad, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52,
	0x0d, 0x57, 0x65, 0x61, 0x6c, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0e,
	0x8a, 0x97, 0x22, 0x06, 0x57, 0x65, 0x61, 0x6c, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0x22, 0xac,
	0x05, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x57, 0x65, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a,
	0xa1, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12,
	0x36, 0x0a, 0x0c, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x57, 0x65, 0x61, 0x6c, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0xe6, 0x89, 0x80, 0xe5, 0xb1,
	0x9e, 0xe6, 0xb4, 0xbb, 0xe5, 0x8a, 0xa8, 0x49, 0x44, 0x52, 0x0c, 0x42, 0x65, 0x6c, 0x6f, 0x6e,
	0x67, 0x57, 0x65, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12,
	0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a,
	0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16,
	0xea, 0xb5, 0x18, 0x12, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f,
	0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x47, 0x65, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x47, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x47, 0x65,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x47, 0x65, 0x6e, 0x12, 0x32, 0x0a, 0x08, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a,
	0xa1, 0xe5, 0x88, 0xb7, 0xe5, 0x87, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x08, 0x53,
	0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x43, 0x6f, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x52, 0x65,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xae, 0x8c, 0xe6, 0x88, 0x90, 0xe6, 0x9d, 0xa1,
	0xe4, 0xbb, 0xb6, 0x52, 0x0a, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x12,
	0x34, 0x0a, 0x0b, 0x41, 0x77, 0x61, 0x72, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x44, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0xe5, 0xae, 0x8c, 0xe6, 0x88, 0x90,
	0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0x49, 0x44, 0x52, 0x0b, 0x41, 0x77, 0x61, 0x72, 0x64, 0x44,
	0x72, 0x6f, 0x70, 0x49, 0x44, 0x12, 0x46, 0x0a, 0x0a, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43,
	0x6f, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x52, 0x65, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xa7, 0xa3, 0xe9, 0x94, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb,
	0xb6, 0x52, 0x0a, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x12, 0x40, 0x0a,
	0x0d, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x44, 0x65, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0xae, 0x8c, 0xe6, 0x88, 0x90,
	0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xf8, 0xb5, 0x18, 0x01,
	0x52, 0x0d, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x44, 0x65, 0x73, 0x12,
	0x3c, 0x0a, 0x0c, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x18, 0xea, 0xb5, 0x18, 0x14, 0xe6, 0x89, 0x80, 0xe5, 0xb1,
	0x9e, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe7, 0xb1, 0xbb, 0xe5, 0x88, 0xab, 0x49, 0x44, 0x52,
	0x0c, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x3a, 0x0e, 0x8a,
	0x97, 0x22, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0x22, 0x88, 0x05,
	0x0a, 0x16, 0x52, 0x65, 0x73, 0x57, 0x65, 0x61, 0x6c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x08, 0xe5, 0x85, 0x91, 0xe6, 0x8d, 0xa2, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x0a,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x0c, 0x42, 0x65,
	0x6c, 0x6f, 0x6e, 0x67, 0x57, 0x65, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe6, 0xb4, 0xbb, 0xe5,
	0x8a, 0xa8, 0x49, 0x44, 0x52, 0x0c, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x57, 0x65, 0x61, 0x6c,
	0x49, 0x44, 0x12, 0x40, 0x0a, 0x0e, 0x42, 0x69, 0x6e, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x57, 0x65,
	0x61, 0x6c, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x18, 0xea, 0xb5, 0x18, 0x14,
	0xe7, 0xbb, 0x91, 0xe5, 0xae, 0x9a, 0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba, 0xe6, 0xb4, 0xbb, 0xe5,
	0x8a, 0xa8, 0x49, 0x44, 0x52, 0x0e, 0x42, 0x69, 0x6e, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x57, 0x65,
	0x61, 0x6c, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x85, 0x91,
	0xe6, 0x8d, 0xa2, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52,
	0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18,
	0x12, 0xe5, 0x85, 0x91, 0xe6, 0x8d, 0xa2, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe6, 0x97, 0xb6,
	0xe9, 0x97, 0xb4, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x47, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x47, 0x65, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x47, 0x65, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x47, 0x65, 0x6e,
	0x12, 0x32, 0x0a, 0x08, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x85, 0x91, 0xe6, 0x8d, 0xa2, 0xe5, 0x88,
	0xb7, 0xe5, 0x87, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x08, 0x53, 0x68, 0x6f, 0x77,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x52, 0x65, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x8d, 0x95, 0xe6, 0xac, 0xa1, 0xe5, 0x85, 0x91, 0xe6,
	0x8d, 0xa2, 0xe7, 0x89, 0xa9, 0xe5, 0x93, 0x81, 0x52, 0x0c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x48, 0x0a, 0x08, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x16,
	0xea, 0xb5, 0x18, 0x12, 0xe5, 0x8d, 0x95, 0xe6, 0xac, 0xa1, 0xe6, 0xb6, 0x88, 0xe8, 0x80, 0x97,
	0xe7, 0x89, 0xa9, 0xe5, 0x93, 0x81, 0x52, 0x08, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x32, 0x0a, 0x08, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x85, 0x91, 0xe6, 0x8d, 0xa2, 0xe6, 0xac,
	0xa1, 0xe6, 0x95, 0xb0, 0xe4, 0xb8, 0x8a, 0xe9, 0x99, 0x90, 0x52, 0x08, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x43, 0x6e, 0x74, 0x3a, 0x12, 0x8a, 0x97, 0x22, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0x22, 0xf1, 0x01, 0x0a, 0x08, 0x57, 0x65, 0x61,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x4b, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x57,
	0x65, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x57, 0x65, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1,
	0x18, 0x00, 0x52, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x57, 0x65, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x45, 0x0a, 0x0c, 0x57, 0x65, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x57, 0x65, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x0c, 0x57, 0x65, 0x61,
	0x6c, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x51, 0x0a, 0x10, 0x57, 0x65, 0x61,
	0x6c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65,
	0x73, 0x57, 0x65, 0x61, 0x6c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x10, 0x57, 0x65, 0x61, 0x6c,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0xd8, 0x05, 0x0a,
	0x18, 0x52, 0x65, 0x73, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x43,
	0x66, 0x67, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x06, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe6,
	0x88, 0x90, 0xe5, 0xb0, 0xb1, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x06, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x09, 0x4e, 0x78, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0xe5, 0x90, 0x8e, 0xe7,
	0xbb, 0xad, 0xe6, 0x88, 0x90, 0xe5, 0xb0, 0xb1, 0x49, 0x44, 0x52, 0x09, 0x4e, 0x78, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x42, 0x0a, 0x0e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xea,
	0xb5, 0x18, 0x12, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0xe6,
	0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x0e, 0x41, 0x63, 0x68, 0x69, 0x65,
	0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x05, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xea, 0xb5, 0x18, 0x09, 0xe6, 0x88,
	0x90, 0xe5, 0xb0, 0xb1, 0xe5, 0x90, 0x8d, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x05, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe5, 0xae, 0x8c, 0xe6, 0x88, 0x90, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x52, 0x0a,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x12, 0x32, 0x0a, 0x0b, 0x41, 0x77,
	0x61, 0x72, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe6, 0x8e, 0x89, 0xe8, 0x90,
	0xbd, 0x52, 0x0b, 0x41, 0x77, 0x61, 0x72, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x44, 0x12, 0x2c,
	0x0a, 0x08, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe8, 0xb5, 0x9b, 0xe5,
	0xad, 0xa3, 0x52, 0x08, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x0c,
	0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe7, 0x82,
	0xb9, 0xe6, 0x95, 0xb0, 0x52, 0x0c, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x49, 0x44,
	0x52, 0x06, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x45, 0x0a, 0x0c, 0x41, 0x63, 0x68, 0x69,
	0x65, 0x76, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x21,
	0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x88, 0x90, 0xe5, 0xb0, 0xb1, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7,
	0xf2, 0xb5, 0x18, 0x0d, 0x45, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x52, 0x0c, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x3c, 0x0a, 0x0d, 0x49, 0x73, 0x48, 0x69, 0x64, 0x65, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x98, 0xaf, 0xe5,
	0x90, 0xa6, 0xe9, 0x9a, 0x90, 0xe8, 0x97, 0x8f, 0xe6, 0x88, 0x90, 0xe5, 0xb0, 0xb1, 0x52, 0x0d,
	0x49, 0x73, 0x48, 0x69, 0x64, 0x65, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x12, 0x3a, 0x0a,
	0x0c, 0x49, 0x73, 0x45, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe7,
	0xbb, 0x9d, 0xe7, 0x89, 0x88, 0xe6, 0x88, 0x90, 0xe5, 0xb0, 0xb1, 0x52, 0x0c, 0x49, 0x73, 0x45,
	0x6e, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x2c, 0x8a, 0x97, 0x22, 0x06, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x44, 0x92, 0x97, 0x22, 0x06, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x92,
	0x97, 0x22, 0x0c, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0xf0,
	0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x02, 0x22, 0xb3, 0x02, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x41,
	0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x66, 0x67, 0x12, 0x24, 0x0a,
	0x06, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea,
	0xb5, 0x18, 0x08, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x49, 0x44, 0x52, 0x06, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0x52, 0x08, 0x54, 0x79, 0x70, 0x65, 0x49, 0x63, 0x6f,
	0x6e, 0x12, 0x39, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xea, 0xb5, 0x18, 0x0f, 0xe5, 0xad, 0x90, 0xe5,
	0x88, 0x86, 0xe7, 0xb1, 0xbb, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xf8, 0xb5, 0x18, 0x01, 0x52,
	0x0b, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0d,
	0x54, 0x79, 0x70, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1a, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe5,
	0x88, 0x86, 0xe7, 0xb1, 0xbb, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xf8, 0xb5, 0x18, 0x01, 0x52,
	0x0d, 0x54, 0x79, 0x70, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39,
	0x0a, 0x0d, 0x54, 0x79, 0x70, 0x65, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x49, 0x63, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0xe5, 0xb0, 0x8f, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0x52, 0x0d, 0x54, 0x79, 0x70, 0x65,
	0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x49, 0x63, 0x6f, 0x6e, 0x3a, 0x12, 0x8a, 0x97, 0x22, 0x06, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x02, 0x22, 0x82, 0x01,
	0x0a, 0x16, 0x52, 0x65, 0x73, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x06, 0xe7, 0xad, 0x89,
	0xe7, 0xba, 0xa7, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x33,
	0x0a, 0x07, 0x4e, 0x65, 0x65, 0x64, 0x45, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x19, 0xea, 0xb5, 0x18, 0x15, 0xe5, 0x8d, 0x87, 0xe7, 0xba, 0xa7, 0xe9, 0x9c, 0x80, 0xe8, 0xa6,
	0x81, 0xe7, 0x9a, 0x84, 0xe7, 0xbb, 0x8f, 0xe9, 0xaa, 0x8c, 0x52, 0x07, 0x4e, 0x65, 0x65, 0x64,
	0x45, 0x78, 0x70, 0x3a, 0x0d, 0x8a, 0x97, 0x22, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0xf0, 0x97,
	0x22, 0x01, 0x22, 0xaf, 0x01, 0x0a, 0x0b, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x12, 0x4f, 0x0a, 0x0e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x43, 0x66, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x52, 0x65, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x43, 0x66, 0x67, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x42, 0x04, 0xd2,
	0xc1, 0x18, 0x00, 0x52, 0x0e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x43, 0x66, 0x67, 0x12, 0x4f, 0x0a, 0x0f, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x43, 0x66, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x52,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76,
	0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x42, 0x04, 0xd2,
	0xc1, 0x18, 0x00, 0x52, 0x0f, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x43, 0x66, 0x67, 0x22, 0xea, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x12, 0x22, 0x0a, 0x06, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0xb8, 0xb8, 0xe8, 0xa7, 0x84,
	0x52, 0x06, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x65, 0x57, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea,
	0xb5, 0x18, 0x06, 0xe8, 0xbf, 0x9e, 0xe8, 0x83, 0x9c, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x75, 0x65, 0x57, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x65, 0x4c, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xb5,
	0x18, 0x06, 0xe8, 0xbf, 0x9e, 0xe8, 0xb4, 0xa5, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x65, 0x4c, 0x6f, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x57, 0x68, 0x69, 0x74, 0x65, 0x48,
	0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe7, 0x99,
	0xbd, 0xe7, 0x83, 0xad, 0xe5, 0x8c, 0x96, 0x52, 0x08, 0x57, 0x68, 0x69, 0x74, 0x65, 0x48, 0x6f,
	0x74, 0x12, 0x1e, 0x0a, 0x04, 0x44, 0x75, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x86, 0xb3, 0xe6, 0x96, 0x97, 0x52, 0x04, 0x44, 0x75, 0x65,
	0x6c, 0x22, 0xbd, 0x03, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x51, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44,
	0x54, 0x5f, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x42, 0x11, 0xea, 0xb5, 0x18, 0x0d, 0xe5, 0x87, 0x86,
	0xe5, 0xa4, 0x87, 0xe9, 0x98, 0xb6, 0xe6, 0xae, 0xb5, 0x5f, 0x52, 0x07, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x12, 0x53, 0x0a, 0x08, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x42, 0x11, 0xea, 0xb5, 0x18,
	0x0d, 0xe4, 0xbc, 0xa0, 0xe9, 0x80, 0x81, 0xe9, 0x98, 0xb6, 0xe6, 0xae, 0xb5, 0x5f, 0x52, 0x08,
	0x54, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x4b, 0x0a, 0x04, 0x52, 0x61, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x42, 0x11, 0xea, 0xb5,
	0x18, 0x0d, 0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97, 0xe9, 0x98, 0xb6, 0xe6, 0xae, 0xb5, 0x5f, 0x52,
	0x04, 0x52, 0x61, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x57, 0x69,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x42, 0x11, 0xea,
	0xb5, 0x18, 0x0d, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe8, 0x83, 0x9c, 0xe5, 0x88, 0xa9, 0x5f,
	0x52, 0x08, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x57, 0x69, 0x6e, 0x12, 0x55, 0x0a, 0x09, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x4c, 0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x42, 0x11, 0xea, 0xb5, 0x18, 0x0d, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe5,
	0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x5f, 0x52, 0x09, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x6f, 0x73,
	0x65, 0x22, 0x93, 0x02, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x42, 0x6f, 0x73, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24,
	0x0a, 0x07, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x87, 0x86, 0xe5, 0xa4, 0x87, 0x52, 0x07, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x08, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe4, 0xbc, 0xa0, 0xe9,
	0x80, 0x81, 0x52, 0x08, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x04,
	0x52, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06,
	0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97, 0x52, 0x04, 0x52, 0x61, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x08,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x57, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe8, 0x83, 0x9c, 0xe5, 0x88, 0xa9,
	0x52, 0x08, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x57, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x09, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x4c, 0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea,
	0xb5, 0x18, 0x0c, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52,
	0x09, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x6f, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x42, 0x6f,
	0x73, 0x73, 0x41, 0x77, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xea,
	0xb5, 0x18, 0x09, 0xe9, 0x80, 0x89, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0x52, 0x09, 0x42, 0x6f,
	0x73, 0x73, 0x41, 0x77, 0x61, 0x72, 0x64, 0x22, 0xee, 0x08, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x66, 0x67, 0x12, 0x1a, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44,
	0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x04, 0x42, 0x61, 0x6e, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x0a, 0x42, 0x61, 0x6e, 0x6b,
	0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0x52, 0x04, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x28, 0x0a, 0x06,
	0x45, 0x78, 0x43, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe4, 0xb8, 0x89, 0xe6, 0xac, 0xa1, 0xe6, 0x8d, 0xa2, 0xe7, 0x89, 0x8c, 0x52, 0x06,
	0x45, 0x78, 0x43, 0x61, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x07, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x8b, 0x8d,
	0xe5, 0x8d, 0x96, 0x52, 0x07, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x08,
	0x4c, 0x6f, 0x72, 0x64, 0x47, 0x69, 0x66, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xea, 0xb5, 0x18, 0x06, 0xe9, 0xa2, 0x86, 0xe5, 0xa5, 0x96, 0x52, 0x08, 0x4c, 0x6f, 0x72, 0x64,
	0x47, 0x69, 0x66, 0x74, 0x12, 0x48, 0x0a, 0x06, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52,
	0x65, 0x73, 0x44, 0x54, 0x5f, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0b, 0xea, 0xb5, 0x18, 0x07, 0xe6,
	0x88, 0x98, 0xe6, 0x96, 0x97, 0x5f, 0x52, 0x06, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x4e,
	0x0a, 0x0a, 0x42, 0x6f, 0x73, 0x73, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73,
	0x44, 0x54, 0x5f, 0x42, 0x6f, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0b, 0xea, 0xb5, 0x18, 0x07, 0xe6, 0x89, 0x93, 0xe9, 0x87,
	0x8e, 0x5f, 0x52, 0x0a, 0x42, 0x6f, 0x73, 0x73, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x55,
	0x0a, 0x12, 0x49, 0x6e, 0x67, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x50, 0x6c, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xea, 0xb5, 0x18, 0x21,
	0x5b, 0xe6, 0x97, 0xa0, 0xe4, 0xba, 0xa4, 0xe4, 0xba, 0x92, 0x2c, 0xe9, 0xbb, 0x98, 0xe8, 0xae,
	0xa4, 0x5d, 0xe6, 0xa3, 0x8b, 0xe7, 0x9b, 0x98, 0xe7, 0x8e, 0xaf, 0xe5, 0xa2, 0x83, 0xe9, 0x9f,
	0xb3, 0x52, 0x12, 0x49, 0x6e, 0x67, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x50, 0x6c, 0x61, 0x79, 0x12, 0x58, 0x0a, 0x17, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x6c, 0x61, 0x79,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xea, 0xb5, 0x18, 0x1a, 0x5b, 0xe6, 0x9c, 0x89,
	0xe4, 0xba, 0xa4, 0xe4, 0xba, 0x92, 0x5d, 0xe6, 0xa3, 0x8b, 0xe7, 0x9b, 0x98, 0xe7, 0x8e, 0xaf,
	0xe5, 0xa2, 0x83, 0xe9, 0x9f, 0xb3, 0x52, 0x17, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x12,
	0x49, 0x0a, 0x12, 0x49, 0x6e, 0x67, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x53, 0x74, 0x6f, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xea, 0xb5, 0x18,
	0x15, 0xe6, 0xa3, 0x8b, 0xe7, 0x9b, 0x98, 0xe7, 0x8e, 0xaf, 0xe5, 0xa2, 0x83, 0xe9, 0x9f, 0xb3,
	0xe5, 0x81, 0x9c, 0xe6, 0xad, 0xa2, 0x52, 0x12, 0x49, 0x6e, 0x67, 0x61, 0x6d, 0x65, 0x45, 0x6e,
	0x76, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x47, 0x0a, 0x10, 0x48, 0x6f,
	0x73, 0x74, 0x45, 0x6e, 0x76, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xea, 0xb5, 0x18, 0x17, 0x5b, 0xe4, 0xb8, 0xbb, 0xe5, 0x9c,
	0xba, 0x5d, 0xe6, 0xa3, 0x8b, 0xe7, 0x9b, 0x98, 0xe7, 0x8e, 0xaf, 0xe5, 0xa2, 0x83, 0xe9, 0x9f,
	0xb3, 0x52, 0x10, 0x48, 0x6f, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50,
	0x6c, 0x61, 0x79, 0x12, 0x4d, 0x0a, 0x10, 0x48, 0x6f, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x53, 0x74, 0x6f, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xea,
	0xb5, 0x18, 0x1d, 0x5b, 0xe4, 0xb8, 0xbb, 0xe5, 0x9c, 0xba, 0x5d, 0xe6, 0xa3, 0x8b, 0xe7, 0x9b,
	0x98, 0xe7, 0x8e, 0xaf, 0xe5, 0xa2, 0x83, 0xe9, 0x9f, 0xb3, 0xe5, 0x81, 0x9c, 0xe6, 0xad, 0xa2,
	0x52, 0x10, 0x48, 0x6f, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74,
	0x6f, 0x70, 0x12, 0x49, 0x0a, 0x11, 0x47, 0x75, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xea,
	0xb5, 0x18, 0x17, 0x5b, 0xe5, 0xae, 0xa2, 0xe5, 0x9c, 0xba, 0x5d, 0xe6, 0xa3, 0x8b, 0xe7, 0x9b,
	0x98, 0xe7, 0x8e, 0xaf, 0xe5, 0xa2, 0x83, 0xe9, 0x9f, 0xb3, 0x52, 0x11, 0x47, 0x75, 0x65, 0x73,
	0x74, 0x45, 0x6e, 0x76, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x12, 0x4f, 0x0a,
	0x11, 0x47, 0x75, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74,
	0x6f, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xea, 0xb5, 0x18, 0x1d, 0x5b, 0xe5,
	0xae, 0xa2, 0xe5, 0x9c, 0xba, 0x5d, 0xe6, 0xa3, 0x8b, 0xe7, 0x9b, 0x98, 0xe7, 0x8e, 0xaf, 0xe5,
	0xa2, 0x83, 0xe9, 0x9f, 0xb3, 0xe5, 0x81, 0x9c, 0xe6, 0xad, 0xa2, 0x52, 0x11, 0x47, 0x75, 0x65,
	0x73, 0x74, 0x45, 0x6e, 0x76, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x4e,
	0x0a, 0x13, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x50, 0x6c, 0x61, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xea, 0xb5, 0x18,
	0x18, 0x5b, 0xe6, 0x89, 0x93, 0xe9, 0x87, 0x8e, 0x26, 0xe6, 0x8b, 0x8d, 0xe5, 0x8d, 0x96, 0x5d,
	0xe7, 0x8e, 0xaf, 0xe5, 0xa2, 0x83, 0xe9, 0x9f, 0xb3, 0x52, 0x13, 0x41, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x12, 0x54,
	0x0a, 0x13, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x53, 0x74, 0x6f, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xea, 0xb5, 0x18,
	0x1e, 0x5b, 0xe6, 0x89, 0x93, 0xe9, 0x87, 0x8e, 0x26, 0xe6, 0x8b, 0x8d, 0xe5, 0x8d, 0x96, 0x5d,
	0xe7, 0x8e, 0xaf, 0xe5, 0xa2, 0x83, 0xe9, 0x9f, 0xb3, 0xe5, 0x81, 0x9c, 0xe6, 0xad, 0xa2, 0x52,
	0x13, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x53, 0x74, 0x6f, 0x70, 0x12, 0x26, 0x0a, 0x05, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe4, 0xb8, 0xbb, 0xe9, 0xa2, 0x98, 0xe9,
	0x9f, 0xb3, 0xe4, 0xb9, 0x90, 0x52, 0x05, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x3a, 0x0a, 0xf0, 0x97,
	0x22, 0x01, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0x22, 0xa0, 0x04, 0x0a, 0x0b, 0x52, 0x65, 0x73,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x43, 0x66, 0x67, 0x12, 0x2a, 0x0a, 0x07, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe5,
	0x9c, 0xba, 0xe6, 0x99, 0xaf, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x07, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x90, 0x8d, 0xe5, 0xad, 0x97, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x9c, 0xba,
	0xe6, 0x99, 0xaf, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52,
	0x09, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x09, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea,
	0xb5, 0x18, 0x06, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x09, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0xe9, 0x9f, 0xb3, 0xe6, 0x95,
	0x88, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x49, 0x44, 0x52, 0x07, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x49, 0x44, 0x12, 0x41, 0x0a, 0x11, 0x49, 0x6e, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x42,
	0x65, 0x67, 0x69, 0x6e, 0x41, 0x47, 0x45, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xea,
	0xb5, 0x18, 0x0f, 0xe6, 0x88, 0x98, 0xe5, 0x89, 0x8d, 0xe8, 0xa1, 0xa8, 0xe6, 0xbc, 0x94, 0x41,
	0x47, 0x45, 0x52, 0x11, 0x49, 0x6e, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x41, 0x47, 0x45, 0x12, 0x37, 0x0a, 0x0c, 0x49, 0x6e, 0x67, 0x61, 0x6d, 0x65, 0x57,
	0x69, 0x6e, 0x41, 0x47, 0x45, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xea, 0xb5, 0x18,
	0x0f, 0xe8, 0x83, 0x9c, 0xe5, 0x88, 0xa9, 0xe8, 0xa1, 0xa8, 0xe6, 0xbc, 0x94, 0x41, 0x47, 0x45,
	0x52, 0x0c, 0x49, 0x6e, 0x67, 0x61, 0x6d, 0x65, 0x57, 0x69, 0x6e, 0x41, 0x47, 0x45, 0x12, 0x4f,
	0x0a, 0x15, 0x49, 0x6e, 0x67, 0x61, 0x6d, 0x65, 0x57, 0x69, 0x6e, 0x41, 0x6e, 0x69, 0x61, 0x6d,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x47, 0x45, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xea,
	0xb5, 0x18, 0x15, 0xe8, 0x83, 0x9c, 0xe5, 0x88, 0xa9, 0xe8, 0xa1, 0xa8, 0xe6, 0xbc, 0x94, 0xe5,
	0x8a, 0xa8, 0xe7, 0x94, 0xbb, 0x41, 0x47, 0x45, 0x52, 0x15, 0x49, 0x6e, 0x67, 0x61, 0x6d, 0x65,
	0x57, 0x69, 0x6e, 0x41, 0x6e, 0x69, 0x61, 0x6d, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x47, 0x45, 0x12,
	0x51, 0x0a, 0x16, 0x49, 0x6e, 0x67, 0x61, 0x6d, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x41, 0x6e, 0x69,
	0x61, 0x6d, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x47, 0x45, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x19, 0xea, 0xb5, 0x18, 0x15, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe8, 0xa1, 0xa8, 0xe6, 0xbc,
	0x94, 0xe5, 0x8a, 0xa8, 0xe7, 0x94, 0xbb, 0x41, 0x47, 0x45, 0x52, 0x16, 0x49, 0x6e, 0x67, 0x61,
	0x6d, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x41, 0x6e, 0x69, 0x61, 0x6d, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x47, 0x45, 0x3a, 0x17, 0x8a, 0x97, 0x22, 0x07, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x44, 0xf8,
	0x97, 0x22, 0x01, 0xf0, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x01, 0x22, 0xae, 0x01, 0x0a, 0x1e,
	0x52, 0x65, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x42, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1a,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x02,
	0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x0a, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0,
	0x52, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x07,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea,
	0xb5, 0x18, 0x0c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0xa1, 0xa3, 0xe4, 0xbd, 0x8d, 0x52,
	0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x3a, 0x12, 0x8a, 0x97, 0x22, 0x0a, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0xf0, 0x97, 0x22, 0x01, 0x22, 0x93, 0x01, 0x0a,
	0x0e, 0x52, 0x65, 0x73, 0x53, 0x4f, 0x43, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x66, 0x67, 0x12,
	0x28, 0x0a, 0x07, 0x53, 0x4f, 0x43, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0e, 0xea, 0xb5, 0x18, 0x06, 0x53, 0x4f, 0x43, 0xe5, 0x90, 0x8d, 0xc8, 0xc1, 0x18, 0x01,
	0x52, 0x07, 0x53, 0x4f, 0x43, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x88,
	0x86, 0xe6, 0x95, 0xb0, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5,
	0x18, 0x06, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0x52, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x3a, 0x0f, 0x8a, 0x97, 0x22, 0x07, 0x53, 0x4f, 0x43, 0x4e, 0x61, 0x6d, 0x65, 0xf0, 0x97,
	0x22, 0x01, 0x22, 0xcc, 0x05, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x44, 0x0a, 0x08, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x28, 0xea, 0xb5, 0x18, 0x06, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0xc8, 0xc1, 0x18, 0x02, 0xf2, 0xb5, 0x18, 0x16, 0x45, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52,
	0x08, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x47, 0x61, 0x6d,
	0x65, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0x8e, 0xa9, 0xe6, 0xb3, 0x95, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0xc8, 0xc1, 0x18, 0x03, 0x52, 0x0c, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x8e, 0x92, 0xe8, 0xa1, 0x8c, 0xe6, 0xa6, 0x9c,
	0xe5, 0x90, 0x8d, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a,
	0x07, 0x53, 0x68, 0x6f, 0x77, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f,
	0x52, 0x07, 0x53, 0x68, 0x6f, 0x77, 0x4e, 0x75, 0x6d, 0x12, 0x57, 0x0a, 0x08, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x3b, 0xea, 0xb5, 0x18,
	0x06, 0xe5, 0x8a, 0x9f, 0xe8, 0x83, 0xbd, 0xda, 0xb5, 0x18, 0x1a, 0x4c, 0x65, 0x67, 0x61, 0x63,
	0x79, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x54, 0x53,
	0x5f, 0x46, 0x55, 0x4e, 0x43, 0xf2, 0xb5, 0x18, 0x0f, 0x45, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0c, 0x49, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x98,
	0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba, 0xe5, 0xa5, 0xbd, 0xe5, 0x8f, 0x8b,
	0x52, 0x0c, 0x49, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x3c,
	0x0a, 0x0d, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x4e, 0x75, 0x6d, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0xa5, 0xbd, 0xe5, 0x8f,
	0x8b, 0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x0d, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x4e, 0x75, 0x6d, 0x12, 0x69, 0x0a, 0x0e,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0d, 0x42, 0x41, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xa5, 0xbd, 0xe5, 0x8f, 0x8b,
	0xe5, 0x8a, 0x9f, 0xe8, 0x83, 0xbd, 0xda, 0xb5, 0x18, 0x1a, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x2e, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x54, 0x53, 0x5f,
	0x46, 0x55, 0x4e, 0x43, 0xf2, 0xb5, 0x18, 0x0f, 0x45, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x06, 0x49, 0x73, 0x4f, 0x70, 0x65,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x98, 0xaf,
	0xe5, 0x90, 0xa6, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0x52, 0x06, 0x49, 0x73, 0x4f, 0x70, 0x65,
	0x6e, 0x12, 0x42, 0x0a, 0x0d, 0x49, 0x73, 0x41, 0x62, 0x73, 0x6f, 0x72, 0x62, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe6, 0x98,
	0xaf, 0xe5, 0x90, 0xa6, 0xe7, 0xba, 0xb3, 0xe5, 0x85, 0xa5, 0xe5, 0x85, 0xb6, 0xe4, 0xbb, 0x96,
	0xe6, 0xa6, 0x9c, 0xe5, 0x8d, 0x95, 0x52, 0x0d, 0x49, 0x73, 0x41, 0x62, 0x73, 0x6f, 0x72, 0x62,
	0x4f, 0x74, 0x68, 0x65, 0x72, 0x3a, 0x1a, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0x92, 0x97, 0x22,
	0x08, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0xf0, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22,
	0x02, 0x22, 0x93, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64,
	0x52, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x78, 0x44, 0x61, 0x74, 0x61, 0x62, 0x69, 0x6e, 0x12, 0x2e,
	0x0a, 0x09, 0x58, 0x44, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0x58, 0x44, 0xe6, 0x8e, 0x92, 0xe5, 0x90, 0x8d, 0xc8,
	0xc1, 0x18, 0x01, 0x52, 0x09, 0x58, 0x44, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x78, 0x12, 0x30,
	0x0a, 0x0a, 0x4e, 0x65, 0x77, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba, 0xe6, 0x8e,
	0x92, 0xe5, 0x90, 0x8d, 0x52, 0x0a, 0x4e, 0x65, 0x77, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x78,
	0x3a, 0x15, 0x92, 0x97, 0x22, 0x09, 0x58, 0x44, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x78, 0xf0,
	0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x02, 0x22, 0xce, 0x02, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x52,
	0x61, 0x6e, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x69, 0x6e, 0x12, 0x41,
	0x0a, 0x08, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x25, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0xa6, 0x9c, 0xe5, 0x8d, 0x95, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0xc8, 0xc1, 0x18, 0x01, 0xf2, 0xb5, 0x18, 0x0d, 0x45, 0x52, 0x61, 0x6e, 0x6b, 0x6c,
	0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x56, 0x0a, 0x0b, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x34, 0xea, 0xb5, 0x18, 0x0f, 0xe6, 0xa6, 0x9c, 0xe5,
	0x8d, 0x95, 0xe5, 0xad, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xc8, 0xc1, 0x18, 0x02, 0xf2,
	0xb5, 0x18, 0x19, 0x45, 0x52, 0x61, 0x6e, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x54,
	0x79, 0x70, 0x65, 0x4c, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x0b, 0x52, 0x61,
	0x6e, 0x6b, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0xa6, 0x9c,
	0xe5, 0x8d, 0x95, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x47, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x27, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0xbb, 0x93, 0xe7, 0xae, 0x97, 0xe7,
	0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x13, 0x45, 0x52, 0x61, 0x6e, 0x6b, 0x6c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x0c, 0xe7, 0xbb, 0x93, 0xe7, 0xae, 0x97, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x09, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0x89, 0x03, 0x0a, 0x18, 0x52, 0x65, 0x73,
	0x52, 0x61, 0x6e, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x69, 0x6e, 0x12, 0x41, 0x0a, 0x08, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x25, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0xa6, 0x9c,
	0xe5, 0x8d, 0x95, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xc8, 0xc1, 0x18, 0x01, 0xf2, 0xb5, 0x18,
	0x0d, 0x45, 0x52, 0x61, 0x6e, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x56, 0x0a, 0x0b, 0x52, 0x61, 0x6e, 0x6b,
	0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x34, 0xea,
	0xb5, 0x18, 0x0f, 0xe6, 0xa6, 0x9c, 0xe5, 0x8d, 0x95, 0xe5, 0xad, 0x90, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0xc8, 0xc1, 0x18, 0x02, 0xf2, 0xb5, 0x18, 0x19, 0x45, 0x52, 0x61, 0x6e, 0x6b, 0x6c,
	0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x6f, 0x72, 0x64, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x52, 0x0b, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x30, 0x0a, 0x08, 0x4d, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x8f, 0xe6, 0x8e,
	0x92, 0xe5, 0x90, 0x8d, 0xc8, 0xc1, 0x18, 0x03, 0x52, 0x08, 0x4d, 0x69, 0x6e, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7,
	0xe6, 0x8e, 0x92, 0xe5, 0x90, 0x8d, 0xc8, 0xc1, 0x18, 0x04, 0x52, 0x08, 0x4d, 0x61, 0x78, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe6, 0x8e, 0x92, 0xe8, 0xa1,
	0x8c, 0xe6, 0xa6, 0x9c, 0xe7, 0xa7, 0xb0, 0xe5, 0x8f, 0xb7, 0x52, 0x07, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x49, 0x44, 0x12, 0x3f, 0x0a, 0x05, 0x41, 0x77, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73,
	0x47, 0x61, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe6, 0x8e,
	0x92, 0xe8, 0xa1, 0x8c, 0xe6, 0xa6, 0x9c, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0x52, 0x05, 0x41,
	0x77, 0x61, 0x72, 0x64, 0x22, 0xaa, 0x01, 0x0a, 0x0c, 0x52, 0x61, 0x6e, 0x6b, 0x6c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x43, 0x0a, 0x0b, 0x52, 0x61, 0x6e, 0x6b, 0x6c, 0x69, 0x73,
	0x74, 0x43, 0x66, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x52, 0x65, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x6c, 0x69, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x0b, 0x52,
	0x61, 0x6e, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x66, 0x67, 0x12, 0x55, 0x0a, 0x11, 0x52, 0x61,
	0x6e, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x66, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x52, 0x65, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x11,
	0x52, 0x61, 0x6e, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x66,
	0x67, 0x22, 0xe6, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x03, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xc8,
	0xc1, 0x18, 0x01, 0x52, 0x03, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe4, 0xbb, 0xb7,
	0xe6, 0xa0, 0xbc, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x49, 0x63,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x9b,
	0xbe, 0xe6, 0xa0, 0x87, 0x52, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x06, 0x49, 0x73,
	0x4f, 0x70, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c,
	0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0x52, 0x06, 0x49, 0x73,
	0x4f, 0x70, 0x65, 0x6e, 0x12, 0x2d, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xea, 0xb5, 0x18, 0x0b, 0x49, 0x41, 0x50,
	0xe7, 0x89, 0xa9, 0xe5, 0x93, 0x81, 0x49, 0x44, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x44, 0x3a, 0x15, 0x8a, 0x97, 0x22, 0x03, 0x4e, 0x75, 0x6d, 0x92, 0x97, 0x22, 0x06,
	0x49, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0xf0, 0x97, 0x22, 0x01, 0x22, 0x88, 0x01, 0x0a, 0x16, 0x52,
	0x65, 0x73, 0x43, 0x6c, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x6f, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x66, 0x67, 0x12, 0x29, 0x0a, 0x07, 0x47, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xea, 0xb5, 0x18, 0x07, 0x47, 0x4f, 0x70, 0x65,
	0x6e, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x07, 0x47, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x44,
	0x12, 0x3d, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x21, 0xea, 0xb5, 0x18, 0x08, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0xf2, 0xb5, 0x18, 0x11, 0x43, 0x4f, 0x4d, 0x5f, 0x43, 0x4c, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x52, 0x08, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x3a,
	0x04, 0x88, 0xb5, 0x18, 0x01, 0x22, 0x5d, 0x0a, 0x0a, 0x43, 0x6c, 0x74, 0x4c, 0x6f, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x12, 0x4f, 0x0a, 0x0f, 0x43, 0x6c, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x4c, 0x6f, 0x67, 0x43, 0x66, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x52,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x43, 0x6c, 0x74, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x66, 0x67, 0x42, 0x04, 0xd2,
	0xc1, 0x18, 0x00, 0x52, 0x0f, 0x43, 0x6c, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x6f,
	0x67, 0x43, 0x66, 0x67, 0x22, 0xa2, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x73, 0x48, 0x65, 0x72, 0x6f,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x63, 0x6f, 0x6e, 0x43, 0x66, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x28, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x09,
	0x49, 0x63, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0d, 0xea, 0xb5, 0x18, 0x09, 0x49, 0x63, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x09,
	0x49, 0x63, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x0e, 0x8a, 0x97, 0x22, 0x02, 0x49,
	0x44, 0xf0, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x02, 0x22, 0xdc, 0x01, 0x0a, 0x1f, 0x52, 0x65,
	0x73, 0x43, 0x68, 0x65, 0x73, 0x73, 0x48, 0x65, 0x72, 0x6f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x41, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x62, 0x69, 0x6e, 0x12, 0x32, 0x0a,
	0x0c, 0x43, 0x68, 0x65, 0x73, 0x73, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x93, 0x81, 0xe8, 0xb4, 0xa8, 0xc8,
	0xc1, 0x18, 0x01, 0x52, 0x0c, 0x43, 0x68, 0x65, 0x73, 0x73, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x2c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x98, 0x9f, 0xe7, 0xba, 0xa7,
	0xc8, 0xc1, 0x18, 0x02, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x36, 0x0a, 0x0c, 0x41, 0x77, 0x61, 0x72, 0x64, 0x43, 0x68, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0xe5, 0xa5, 0x96, 0xe5, 0x8a,
	0xb1, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0x49, 0x44, 0x52, 0x0c, 0x41, 0x77, 0x61, 0x72, 0x64,
	0x43, 0x68, 0x65, 0x73, 0x73, 0x49, 0x44, 0x3a, 0x1f, 0x8a, 0x97, 0x22, 0x17, 0x43, 0x68, 0x65,
	0x73, 0x73, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2c, 0x20, 0x53, 0x74, 0x61, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0xf8, 0x97, 0x22, 0x01, 0x22, 0x48, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x44,
	0x54, 0x5f, 0x4e, 0x42, 0x41, 0x49, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x90, 0x8d, 0xe5, 0xad, 0x97, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x68, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x4e, 0x42, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x06, 0x4c, 0x6f, 0x72, 0x64,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe6, 0xa3,
	0x8b, 0xe6, 0x89, 0x8b, 0x49, 0x44, 0x52, 0x06, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x12, 0x2c,
	0x0a, 0x08, 0x49, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe9, 0x87, 0x91, 0xe5,
	0xb8, 0x81, 0x52, 0x08, 0x49, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x22, 0x8d, 0x03, 0x0a,
	0x08, 0x52, 0x65, 0x73, 0x4e, 0x42, 0x43, 0x66, 0x67, 0x12, 0x2a, 0x0a, 0x07, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08,
	0xe5, 0x85, 0xb3, 0xe5, 0x8d, 0xa1, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x07, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0xea, 0xb5,
	0x18, 0x0f, 0xe8, 0xb5, 0xb7, 0xe5, 0xa7, 0x8b, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe6, 0x95,
	0xb0, 0x52, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d,
	0x12, 0x2f, 0x0a, 0x02, 0x41, 0x49, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x52,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x4e, 0x42, 0x41,
	0x49, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x06, 0xea, 0xb5, 0x18, 0x02, 0x41, 0x49, 0x52, 0x02, 0x41,
	0x49, 0x12, 0x44, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44,
	0x54, 0x5f, 0x4e, 0x42, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0f,
	0xea, 0xb5, 0x18, 0x06, 0xe7, 0x8e, 0xa9, 0xe5, 0xae, 0xb6, 0xda, 0xb5, 0x18, 0x01, 0x32, 0x52,
	0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0d, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x80, 0xbb, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe6, 0x95, 0xb0,
	0x52, 0x0d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x12,
	0x52, 0x0a, 0x15, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x72, 0x6f, 0x70, 0x42, 0x65,
	0x67, 0x69, 0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1c,
	0xea, 0xb5, 0x18, 0x18, 0xe6, 0x8b, 0x8d, 0xe5, 0x8d, 0x96, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd,
	0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe8, 0xbd, 0xae, 0xe6, 0xac, 0xa1, 0x52, 0x15, 0x41, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x72, 0x6f, 0x70, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x3a, 0x17, 0x8a, 0x97, 0x22, 0x07, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x44,
	0xf0, 0x97, 0x22, 0x01, 0xf8, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x02, 0x22, 0xc7, 0x02, 0x0a,
	0x0d, 0x52, 0x65, 0x73, 0x4e, 0x42, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x66, 0x67, 0x12, 0x2d,
	0x0a, 0x08, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x11, 0xea, 0xb5, 0x18, 0x09, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe6, 0x95, 0xb0, 0xc8,
	0xc1, 0x18, 0x01, 0x52, 0x08, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x2a, 0x0a,
	0x07, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x08, 0xe5, 0x85, 0xb3, 0xe5, 0x8d, 0xa1, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x02,
	0x52, 0x07, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x0d, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe9, 0x98, 0xb6, 0xe6, 0xae, 0xb5, 0xe5, 0x9b, 0xbe, 0xe6,
	0xa0, 0x87, 0xe5, 0x90, 0x8d, 0x52, 0x0d, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x63, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x63, 0x6f,
	0x6e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe9, 0x98, 0xb6, 0xe6, 0xae, 0xb5, 0xe5, 0x9b, 0xbe,
	0xe6, 0xa0, 0x87, 0xe7, 0x89, 0xb9, 0xe6, 0x95, 0x88, 0xe5, 0x90, 0x8d, 0x52, 0x13, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x36, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x9b, 0x9e, 0xe5, 0x90,
	0x88, 0xe8, 0xbf, 0x9b, 0xe5, 0xba, 0xa6, 0xe5, 0x90, 0x88, 0xe5, 0xb9, 0xb6, 0x52, 0x0a, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x3a, 0x1b, 0x8a, 0x97, 0x22, 0x08, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x92, 0x97, 0x22, 0x07, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0x22, 0xab, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x4e, 0x42,
	0x53, 0x68, 0x6f, 0x70, 0x43, 0x66, 0x67, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x0c, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe5,
	0x88, 0xb7, 0xe6, 0x96, 0xb0, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0xc8, 0xc1, 0x18, 0x02, 0x52,
	0x0c, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a,
	0x07, 0x43, 0x68, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x11,
	0xea, 0xb5, 0x18, 0x08, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0x49, 0x44, 0xda, 0xb5, 0x18, 0x01,
	0x36, 0x52, 0x07, 0x43, 0x68, 0x65, 0x73, 0x73, 0x49, 0x44, 0x3a, 0x18, 0x8a, 0x97, 0x22, 0x10,
	0x49, 0x44, 0x2c, 0x20, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0xf8, 0x97, 0x22, 0x01, 0x22, 0x7a, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x4e, 0x42,
	0x43, 0x68, 0x65, 0x73, 0x73, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x12, 0x16,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xea, 0xb5, 0x18, 0x02,
	0x49, 0x44, 0x52, 0x02, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x06, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x58,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xea, 0xb5, 0x18, 0x07, 0x58, 0xe5, 0x9d, 0x90,
	0xe6, 0xa0, 0x87, 0x52, 0x06, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x58, 0x12, 0x23, 0x0a, 0x06, 0x43,
	0x6f, 0x6f, 0x72, 0x64, 0x5a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xea, 0xb5, 0x18,
	0x07, 0x5a, 0xe5, 0x9d, 0x90, 0xe6, 0xa0, 0x87, 0x52, 0x06, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x5a,
	0x22, 0xa9, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x4e, 0x42, 0x43, 0x68, 0x65, 0x73, 0x73, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x43, 0x66, 0x67, 0x12, 0x2c, 0x0a, 0x08, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea,
	0xb5, 0x18, 0x08, 0xe6, 0x91, 0x86, 0xe6, 0x94, 0xbe, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52,
	0x08, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x4f, 0x0a, 0x09, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x52,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x4e, 0x42, 0x43,
	0x68, 0x65, 0x73, 0x73, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x42, 0x10, 0xea,
	0xb5, 0x18, 0x06, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xda, 0xb5, 0x18, 0x02, 0x31, 0x30, 0x52,
	0x09, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x3a, 0x10, 0x8a, 0x97, 0x22, 0x08,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x49, 0x44, 0xf8, 0x97, 0x22, 0x01, 0x22, 0xd5, 0x03, 0x0a,
	0x13, 0x52, 0x65, 0x73, 0x4e, 0x42, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x43, 0x66, 0x67, 0x12, 0x2d, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0xea, 0xb5, 0x18, 0x09, 0xe5, 0x9b, 0x9e, 0xe5,
	0x90, 0x88, 0xe6, 0x95, 0xb0, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x08, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x4e, 0x75, 0x6d, 0x12, 0x2c, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe7, 0x8e, 0xa9, 0xe5, 0xae,
	0xb6, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x02, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x30, 0x0a, 0x09, 0x53, 0x68, 0x6f, 0x70, 0x43, 0x66, 0x67, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0xe5, 0x95, 0x86, 0xe5, 0xba, 0x97,
	0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x49, 0x44, 0x52, 0x09, 0x53, 0x68, 0x6f, 0x70, 0x43, 0x66,
	0x67, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x0d, 0x43, 0x68, 0x65, 0x73, 0x73, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e,
	0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe6, 0x91, 0x86, 0xe6, 0x94, 0xbe, 0x49, 0x44, 0x52, 0x0d,
	0x43, 0x68, 0x65, 0x73, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x32, 0x0a,
	0x0a, 0x43, 0x68, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x73, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe4, 0xbd, 0x8d,
	0xe7, 0xbd, 0xae, 0x49, 0x44, 0x52, 0x0a, 0x43, 0x68, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x73, 0x49,
	0x44, 0x12, 0x28, 0x0a, 0x06, 0x49, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xb8, 0xbb,
	0xe5, 0x9c, 0xba, 0x52, 0x06, 0x49, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x10, 0x41,
	0x64, 0x64, 0x45, 0x71, 0x75, 0x69, 0x70, 0x43, 0x66, 0x67, 0x49, 0x44, 0x41, 0x72, 0x72, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a,
	0xa0, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0xda, 0xb5, 0x18, 0x01, 0x33, 0x52, 0x10, 0x41, 0x64,
	0x64, 0x45, 0x71, 0x75, 0x69, 0x70, 0x43, 0x66, 0x67, 0x49, 0x44, 0x41, 0x72, 0x72, 0x12, 0x38,
	0x0a, 0x0b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x41, 0x64, 0x64, 0x45, 0x78, 0x70, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe5,
	0xa2, 0x9e, 0xe5, 0x8a, 0xa0, 0xe7, 0xbb, 0x8f, 0xe9, 0xaa, 0x8c, 0x52, 0x0b, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x41, 0x64, 0x64, 0x45, 0x78, 0x70, 0x3a, 0x1a, 0x8a, 0x97, 0x22, 0x12, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x2c, 0x20, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44,
	0xf8, 0x97, 0x22, 0x01, 0x22, 0x91, 0x02, 0x0a, 0x1d, 0x52, 0x65, 0x73, 0x4e, 0x42, 0x43, 0x68,
	0x65, 0x73, 0x73, 0x48, 0x65, 0x72, 0x6f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x41, 0x77,
	0x61, 0x72, 0x64, 0x43, 0x66, 0x67, 0x12, 0x2a, 0x0a, 0x07, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe5, 0x85, 0xb3,
	0xe5, 0x8d, 0xa1, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x07, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x49, 0x44, 0x12, 0x2a, 0x0a, 0x07, 0x43, 0x68, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0x49,
	0x44, 0xc8, 0xc1, 0x18, 0x02, 0x52, 0x07, 0x43, 0x68, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x38,
	0x0a, 0x0c, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x8d, 0x87, 0xe7, 0xba, 0xa7,
	0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0xc8, 0xc1, 0x18, 0x03, 0x52, 0x0c, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0c, 0x41, 0x77, 0x61, 0x72,
	0x64, 0x43, 0x68, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x12,
	0xea, 0xb5, 0x18, 0x0e, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90,
	0x49, 0x44, 0x52, 0x0c, 0x41, 0x77, 0x61, 0x72, 0x64, 0x43, 0x68, 0x65, 0x73, 0x73, 0x49, 0x44,
	0x3a, 0x26, 0x8a, 0x97, 0x22, 0x1e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x44, 0x2c, 0x20, 0x43,
	0x68, 0x65, 0x73, 0x73, 0x49, 0x44, 0x2c, 0x20, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0xf8, 0x97, 0x22, 0x01, 0x22, 0x8b, 0x01, 0x0a, 0x22, 0x52, 0x65, 0x73,
	0x44, 0x54, 0x5f, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x65, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x3c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x28, 0xea,
	0xb5, 0x18, 0x06, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x1a, 0x45, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x54, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a,
	0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x0f, 0xea,
	0xb5, 0x18, 0x06, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xda, 0xb5, 0x18, 0x01, 0x32, 0x52, 0x06,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xb6, 0x02, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x66,
	0x67, 0x12, 0x66, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47,
	0x75, 0x69, 0x64, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0x8e, 0xa9, 0xe5, 0xae, 0xb6,
	0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xda, 0xb5, 0x18, 0x01, 0x35, 0x52, 0x0c, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0xc8, 0xc1, 0x18,
	0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x0f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x16,
	0xea, 0xb5, 0x18, 0x12, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae,
	0xe5, 0x90, 0xaf, 0xe7, 0x94, 0xa8, 0x52, 0x0f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x79,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x46, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x48, 0x65, 0x6c, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe8, 0xa7, 0x84, 0xe5, 0x88, 0x99, 0xe6, 0xa0, 0x87, 0xe7,
	0xad, 0xbe, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xa4, 0x96, 0xe6, 0x98, 0xbe, 0x52, 0x0f,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x3a,
	0x0e, 0xf0, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x02, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0x22,
	0x9a, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x47, 0x75, 0x69, 0x64, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x23, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0d,
	0xea, 0xb5, 0x18, 0x09, 0xe6, 0xad, 0xa3, 0xe5, 0xb8, 0xb8, 0xe5, 0x80, 0xbc, 0x52, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe4, 0xb8,
	0x8b, 0xe9, 0x99, 0x90, 0x52, 0x0a, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x2a, 0x0a, 0x0a, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe4, 0xb8, 0x8a, 0xe9, 0x99, 0x90,
	0x52, 0x0a, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xb5, 0x02, 0x0a,
	0x1b, 0x52, 0x65, 0x73, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x65,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x43, 0x66, 0x67, 0x12, 0x1a, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44,
	0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x0b, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x4e, 0x75, 0x6d, 0x53, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xea,
	0xb5, 0x18, 0x09, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe6, 0x95, 0xb0, 0x52, 0x0b, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x53, 0x74, 0x72, 0x12, 0x58, 0x0a, 0x0d, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x32, 0xea, 0xb5, 0x18, 0x0c, 0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x1a, 0x45, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x75,
	0x69, 0x64, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65,
	0xc8, 0xc1, 0x18, 0x02, 0x52, 0x0d, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x09, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x75,
	0x69, 0x64, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x0a, 0xea, 0xb5,
	0x18, 0x06, 0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc, 0x52, 0x09, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x3a, 0x1f, 0x92, 0x97, 0x22, 0x02, 0x49, 0x44, 0x92, 0x97, 0x22, 0x11, 0x49,
	0x44, 0x2c, 0x20, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65,
	0xf0, 0x97, 0x22, 0x01, 0x22, 0xd2, 0x01, 0x0a, 0x27, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x65, 0x54, 0x69, 0x70, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x56, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x30, 0xea, 0xb5, 0x18, 0x06, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x22, 0x45, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47,
	0x75, 0x69, 0x64, 0x65, 0x54, 0x69, 0x70, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0f, 0xea, 0xb5, 0x18, 0x06,
	0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xda, 0xb5, 0x18, 0x01, 0x35, 0x52, 0x08, 0x53, 0x74, 0x72,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x22, 0x0a, 0x06, 0x54, 0x4c, 0x6f, 0x67, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0x54, 0x4c, 0x6f, 0x67, 0x49,
	0x44, 0x52, 0x06, 0x54, 0x4c, 0x6f, 0x67, 0x49, 0x44, 0x22, 0x94, 0x01, 0x0a, 0x23, 0x52, 0x65,
	0x73, 0x44, 0x54, 0x5f, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x65,
	0x54, 0x69, 0x70, 0x50, 0x72, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x2c, 0xea, 0xb5, 0x18, 0x06, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x1e, 0x45,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x65, 0x54, 0x69, 0x70, 0x50,
	0x72, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0f, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x8f, 0x82, 0xe6, 0x95,
	0xb0, 0xda, 0xb5, 0x18, 0x01, 0x32, 0x52, 0x08, 0x53, 0x74, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x22, 0xc9, 0x03, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x44, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x65, 0x54, 0x69, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x38,
	0x0a, 0x0e, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xb7, 0xaf, 0xe5,
	0xbe, 0x84, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0e, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x41, 0x6c, 0x69, 0x67,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x0c, 0xe5, 0xaf, 0xb9, 0xe9, 0xbd, 0x90, 0xe6, 0x96, 0xb9, 0xe5, 0xbc, 0x8f, 0x52, 0x09, 0x41,
	0x6c, 0x69, 0x67, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x43, 0x66, 0x67, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe9, 0x85, 0x8d,
	0xe7, 0xbd, 0xae, 0x49, 0x44, 0x52, 0x05, 0x43, 0x66, 0x67, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x0b,
	0x55, 0x49, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0x52, 0x0b, 0x55, 0x49, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x66, 0x0a, 0x10, 0x55, 0x49, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x73, 0x70, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x3a, 0xea, 0xb5, 0x18, 0x12,
	0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x9c, 0xf2, 0xb5, 0x18, 0x20, 0x45, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x75,
	0x69, 0x64, 0x65, 0x54, 0x69, 0x70, 0x55, 0x49, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x73, 0x70,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x10, 0x55, 0x49, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x73, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x22, 0x0a, 0x06, 0x54, 0x4c, 0x6f, 0x67,
	0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0x54, 0x4c,
	0x6f, 0x67, 0x49, 0x44, 0x52, 0x06, 0x54, 0x4c, 0x6f, 0x67, 0x49, 0x44, 0x12, 0x5e, 0x0a, 0x0a,
	0x50, 0x72, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54,
	0x5f, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x65, 0x54, 0x69, 0x70,
	0x50, 0x72, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x89, 0x8d, 0xe7, 0xbd, 0xae, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c,
	0x52, 0x0a, 0x50, 0x72, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x22, 0xbf, 0x04, 0x0a,
	0x1a, 0x52, 0x65, 0x73, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x65,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x42, 0x70, 0x43, 0x66, 0x67, 0x12, 0x1a, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0xc8,
	0xc1, 0x18, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x0a, 0x49, 0x73, 0x4c, 0x61, 0x79,
	0x65, 0x72, 0x32, 0x55, 0x49, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x0c, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xbc, 0xb9, 0xe7, 0xaa, 0x97, 0x52, 0x0a, 0x49,
	0x73, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x32, 0x55, 0x49, 0x12, 0x34, 0x0a, 0x0c, 0x4c, 0x61, 0x79,
	0x65, 0x72, 0x32, 0x55, 0x49, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xbc, 0xb9, 0xe7, 0xaa, 0x97, 0xe5, 0x90, 0x8d, 0xe5, 0xad,
	0x97, 0x52, 0x0c, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x32, 0x55, 0x49, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x58, 0x0a, 0x09, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x54, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73,
	0x44, 0x54, 0x5f, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x65, 0x54,
	0x69, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x85, 0xb3, 0xe9,
	0x97, 0xad, 0xe6, 0x9c, 0x9f, 0xe9, 0x97, 0xb4, 0xe6, 0x8f, 0x90, 0xe7, 0xa4, 0xba, 0x52, 0x09,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x54, 0x69, 0x70, 0x12, 0x58, 0x0a, 0x09, 0x4f, 0x70, 0x65,
	0x6e, 0x65, 0x64, 0x54, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x52,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x65, 0x54, 0x69, 0x70, 0x49, 0x74, 0x65, 0x6d,
	0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x89, 0x93, 0xe5, 0xbc, 0x80, 0xe6, 0x9c, 0x9f, 0xe9,
	0x97, 0xb4, 0xe6, 0x8f, 0x90, 0xe7, 0xa4, 0xba, 0x52, 0x09, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64,
	0x54, 0x69, 0x70, 0x12, 0x71, 0x0a, 0x0f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x52,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x65, 0x54, 0x69, 0x70, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x15,
	0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x85, 0xb3, 0xe9, 0x97, 0xad, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6,
	0xda, 0xb5, 0x18, 0x01, 0x32, 0x52, 0x0f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x70, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e,
	0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x8f, 0x90, 0xe7, 0xa4, 0xba, 0x49, 0x44, 0x52, 0x0a,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x69, 0x70, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x0b, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xb6, 0x85, 0xe6, 0x97, 0xb6, 0xe6, 0x97, 0xb6, 0xe9, 0x95,
	0xbf, 0x52, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x73, 0x3a, 0x0e,
	0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x01, 0x22, 0x8c,
	0x01, 0x0a, 0x21, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x4e, 0x42, 0x48, 0x65, 0x6c, 0x70, 0x55,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x3e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x2a, 0xea, 0xb5, 0x18, 0x06, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5,
	0x18, 0x1c, 0x45, 0x4e, 0x42, 0x48, 0x65, 0x6c, 0x70, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0d, 0x42, 0x0f, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0,
	0xda, 0xb5, 0x18, 0x01, 0x33, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xb6, 0x04,
	0x0a, 0x0f, 0x52, 0x65, 0x73, 0x4e, 0x42, 0x48, 0x65, 0x6c, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x16, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xea,
	0xb5, 0x18, 0x02, 0x49, 0x44, 0x52, 0x02, 0x49, 0x44, 0x12, 0x6f, 0x0a, 0x0e, 0x55, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44,
	0x54, 0x5f, 0x4e, 0x42, 0x48, 0x65, 0x6c, 0x70, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x1b, 0xea,
	0xb5, 0x18, 0x12, 0xe8, 0xa7, 0xa3, 0xe9, 0x94, 0x81, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe6,
	0x97, 0xb6, 0xe6, 0x9c, 0xba, 0xda, 0xb5, 0x18, 0x01, 0x32, 0x52, 0x0e, 0x55, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x12, 0x57, 0x0a, 0x14, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x61, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x44, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x23, 0xea, 0xb5, 0x18, 0x1a, 0xe9, 0xbb,
	0x98, 0xe8, 0xae, 0xa4, 0xe5, 0xb7, 0xb2, 0xe8, 0xaf, 0xbb, 0xe7, 0x8e, 0xa9, 0xe5, 0xae, 0xb6,
	0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0x49, 0x44, 0xda, 0xb5, 0x18, 0x01, 0x33, 0x52, 0x14, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x61, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x44, 0x73, 0x12, 0x22, 0x0a, 0x06, 0x54, 0x4c, 0x6f, 0x67, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0x54, 0x4c, 0x6f, 0x67, 0x49, 0x44, 0x52,
	0x06, 0x54, 0x4c, 0x6f, 0x67, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x08, 0x54, 0x69, 0x70, 0x43, 0x66,
	0x67, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0xe6,
	0x8f, 0x90, 0xe7, 0xa4, 0xba, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x49, 0x44, 0x52, 0x08, 0x54,
	0x69, 0x70, 0x43, 0x66, 0x67, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x0f, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe8, 0xae, 0xbe, 0xe7,
	0xbd, 0xae, 0xe5, 0x90, 0xaf, 0xe7, 0x94, 0xa8, 0x52, 0x0f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x42, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a, 0x0d, 0x54, 0x61, 0x67,
	0x49, 0x44, 0x73, 0x34, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d,
	0x42, 0x1d, 0xea, 0xb5, 0x18, 0x14, 0xe8, 0xa7, 0xa3, 0xe9, 0x94, 0x81, 0xe6, 0x89, 0x80, 0xe9,
	0x9c, 0x80, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0x49, 0x44, 0xda, 0xb5, 0x18, 0x01, 0x35, 0x52,
	0x0d, 0x54, 0x61, 0x67, 0x49, 0x44, 0x73, 0x34, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x26,
	0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84, 0x49, 0x44, 0x52, 0x07, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5,
	0x88, 0x86, 0xe7, 0xbb, 0x84, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x09, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x0e, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0xf0, 0x97,
	0x22, 0x01, 0x98, 0x97, 0x22, 0x02, 0x22, 0x82, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x73, 0x44, 0x54,
	0x5f, 0x4e, 0x42, 0x55, 0x49, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x55, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x39, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x25, 0xea, 0xb5, 0x18, 0x06, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0xf2, 0xb5, 0x18, 0x17, 0x45, 0x4e, 0x42, 0x55, 0x49, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x69,
	0x6e, 0x74, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0d, 0x42, 0x0f, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xda, 0xb5,
	0x18, 0x01, 0x32, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xba, 0x01, 0x0a, 0x1c,
	0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x4e, 0x42, 0x55, 0x49, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x69,
	0x6e, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x39, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x25, 0xea, 0xb5, 0x18, 0x06,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x17, 0x45, 0x4e, 0x42, 0x55, 0x49, 0x4e,
	0x61, 0x6d, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x0f, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x8f, 0x82,
	0xe6, 0x95, 0xb0, 0xda, 0xb5, 0x18, 0x01, 0x32, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x36, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x18, 0xea, 0xb5, 0x18, 0x0f, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4,
	0xb8, 0xb2, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xda, 0xb5, 0x18, 0x01, 0x32, 0x52, 0x09, 0x53,
	0x74, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xb8, 0x04, 0x0a, 0x12, 0x52, 0x65, 0x73,
	0x4e, 0x42, 0x55, 0x49, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x43, 0x66, 0x67, 0x12,
	0x16, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xea, 0xb5, 0x18,
	0x02, 0x49, 0x44, 0x52, 0x02, 0x49, 0x44, 0x12, 0x4f, 0x0a, 0x06, 0x55, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x4e, 0x42, 0x55, 0x49, 0x4e, 0x61, 0x6d, 0x65,
	0x48, 0x69, 0x6e, 0x74, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xa7, 0xa3, 0xe9, 0x94, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6,
	0x52, 0x06, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x4f, 0x0a, 0x06, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x4e, 0x42, 0x55, 0x49, 0x4e, 0x61, 0x6d,
	0x65, 0x48, 0x69, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x42,
	0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xae, 0x8c, 0xe6, 0x88, 0x90, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb,
	0xb6, 0x52, 0x06, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x38, 0x0a, 0x0d, 0x55, 0x49, 0x50,
	0x61, 0x74, 0x68, 0x45, 0x6e, 0x75, 0x6d, 0x53, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0x55, 0x49, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0xe6, 0x9e,
	0x9a, 0xe4, 0xb8, 0xbe, 0x52, 0x0d, 0x55, 0x49, 0x50, 0x61, 0x74, 0x68, 0x45, 0x6e, 0x75, 0x6d,
	0x53, 0x74, 0x72, 0x12, 0x3e, 0x0a, 0x10, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x49, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xea,
	0xb5, 0x18, 0x0e, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0x55, 0x49, 0xe5, 0xbc, 0xb9, 0xe7, 0xaa,
	0x97, 0x52, 0x10, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x49, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x48, 0x69, 0x6e, 0x74, 0x54, 0x78, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x8f, 0x90, 0xe7, 0xa4, 0xba,
	0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x07, 0x48, 0x69, 0x6e, 0x74,
	0x54, 0x78, 0x74, 0x12, 0x42, 0x0a, 0x07, 0x48, 0x69, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x28, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x8f, 0x90, 0xe7, 0xa4, 0xba,
	0xe6, 0x96, 0xb9, 0xe5, 0x90, 0x91, 0xf2, 0xb5, 0x18, 0x14, 0x45, 0x4e, 0x42, 0x55, 0x49, 0x4e,
	0x61, 0x6d, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07,
	0x48, 0x69, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x12, 0x35, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06,
	0xe5, 0x81, 0x8f, 0xe7, 0xa7, 0xbb, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x33,
	0x0a, 0x0a, 0x4c, 0x69, 0x6e, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe6, 0x8f, 0x90, 0xe7, 0xa4, 0xba, 0xe7, 0xba,
	0xbf, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0x52, 0x0a, 0x4c, 0x69, 0x6e, 0x65, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x3a, 0x0e, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0x98,
	0x97, 0x22, 0x02, 0x22, 0x5b, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x44, 0x54, 0x41, 0x49, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x29, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x06, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18,
	0x07, 0x45, 0x41, 0x49, 0x54, 0x59, 0x50, 0x45, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xea,
	0xb5, 0x18, 0x06, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x52, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x22, 0xc6, 0x01, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x49, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x79, 0x43, 0x68, 0x67, 0x12, 0x37, 0x0a, 0x0c, 0x4d, 0x69, 0x6e, 0x52, 0x61, 0x6e,
	0x6b, 0x4e, 0x6f, 0x43, 0x68, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x42, 0x13, 0xea, 0xb5,
	0x18, 0x0f, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x8f, 0xe6, 0x8e, 0x92, 0xe5, 0x90, 0x8d, 0xe5, 0x80,
	0xbc, 0x52, 0x0c, 0x4d, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x4e, 0x6f, 0x43, 0x68, 0x67, 0x12,
	0x37, 0x0a, 0x0c, 0x4d, 0x61, 0x78, 0x52, 0x61, 0x6e, 0x6b, 0x4e, 0x6f, 0x43, 0x68, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe6, 0x9c, 0x80, 0xe5, 0xa4,
	0xa7, 0xe6, 0x8e, 0x92, 0xe5, 0x90, 0x8d, 0xe5, 0x80, 0xbc, 0x52, 0x0c, 0x4d, 0x61, 0x78, 0x52,
	0x61, 0x6e, 0x6b, 0x4e, 0x6f, 0x43, 0x68, 0x67, 0x12, 0x3f, 0x0a, 0x0d, 0x44, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x43, 0x68, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x19, 0xea, 0xb5, 0x18, 0x15, 0xe9, 0x9a, 0xbe, 0xe5, 0xba, 0xa6, 0xe7, 0xad, 0x89, 0xe7, 0xba,
	0xa7, 0xe5, 0x8f, 0x98, 0xe6, 0x9b, 0xb4, 0xe5, 0x80, 0xbc, 0x52, 0x0d, 0x44, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x43, 0x68, 0x67, 0x22, 0xd8, 0x01, 0x0a, 0x12, 0x52, 0x65,
	0x73, 0x41, 0x49, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x43, 0x66, 0x67,
	0x12, 0x38, 0x0a, 0x0c, 0x41, 0x49, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe9, 0x9a, 0xbe, 0xe5,
	0xba, 0xa6, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x0c, 0x41, 0x49,
	0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x07, 0x41, 0x49,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x52, 0x65,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x41, 0x49, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x42, 0x06, 0xea, 0xb5, 0x18, 0x02, 0x41, 0x49, 0x52, 0x07, 0x41, 0x49, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x4f, 0x0a, 0x10, 0x47, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65,
	0x41, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x41, 0x49, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe4, 0xbf, 0x9d, 0xe5, 0xba, 0x95,
	0x41, 0x49, 0x52, 0x10, 0x47, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x41, 0x49, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x22, 0x88, 0x03, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x41, 0x49, 0x44, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x43, 0x68, 0x67, 0x43, 0x66, 0x67, 0x12, 0x32,
	0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1e, 0xea, 0xb5,
	0x18, 0x06, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xf2, 0xb5, 0x18, 0x0c, 0x45, 0x50, 0x76, 0x70,
	0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x04, 0x52, 0x61,
	0x6e, 0x6b, 0x12, 0x24, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x06, 0xe9, 0x98, 0xb6, 0xe6, 0x95, 0xb0, 0xc8, 0xc1, 0x18,
	0x02, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3e, 0x0a, 0x0e, 0x42, 0x61, 0x73, 0x65,
	0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x9f, 0xba, 0xe5, 0x87, 0x86, 0xe9, 0x9a, 0xbe, 0xe5,
	0xba, 0xa6, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0x52, 0x0e, 0x42, 0x61, 0x73, 0x65, 0x44, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x0d, 0x49, 0x73, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8f, 0x98, 0xe6, 0x9b,
	0xb4, 0xe5, 0x85, 0xb3, 0xe9, 0x97, 0xad, 0x52, 0x0d, 0x49, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x43, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c,
	0xea, 0xb5, 0x18, 0x18, 0xe5, 0x8f, 0x98, 0xe6, 0x9b, 0xb4, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x91,
	0xe5, 0xaf, 0xb9, 0xe6, 0x88, 0x98, 0xe4, 0xba, 0xba, 0xe6, 0xac, 0xa1, 0x52, 0x0e, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x43, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x51, 0x0a, 0x0d,
	0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x43, 0x68, 0x67, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x54,
	0x41, 0x49, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x43, 0x68, 0x67, 0x42,
	0x0f, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x8f, 0x98, 0xe6, 0x9b, 0xb4, 0xda, 0xb5, 0x18, 0x01, 0x33,
	0x52, 0x0d, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x43, 0x68, 0x67, 0x22,
	0x53, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x44, 0x54, 0x57, 0x61, 0x72, 0x6d, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x12, 0x1c, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c,
	0xea, 0xb5, 0x18, 0x08, 0xe6, 0x96, 0xb9, 0xe6, 0xa1, 0x88, 0x49, 0x44, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x9d, 0x83, 0xe9, 0x87, 0x8d, 0x52, 0x06, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x22, 0xed, 0x02, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x57, 0x61, 0x72, 0x6d,
	0x41, 0x49, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x43, 0x66, 0x67, 0x12, 0x26, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x0e, 0xe6,
	0xb8, 0xa9, 0xe6, 0x9a, 0x96, 0xe7, 0xad, 0x96, 0xe7, 0x95, 0xa5, 0x49, 0x44, 0xc8, 0xc1, 0x18,
	0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x05, 0x41, 0x49, 0x4e, 0x75, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0x41, 0x49, 0xe6, 0x95, 0xb0, 0xe9,
	0x87, 0x8f, 0x52, 0x05, 0x41, 0x49, 0x4e, 0x75, 0x6d, 0x12, 0x42, 0x0a, 0x12, 0x41, 0x49, 0x44,
	0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0x41, 0x49, 0xe9, 0x9a, 0xbe,
	0xe5, 0xba, 0xa6, 0xe5, 0x81, 0x8f, 0xe7, 0xa7, 0xbb, 0x52, 0x12, 0x41, 0x49, 0x44, 0x69, 0x66,
	0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x49, 0x0a,
	0x0a, 0x57, 0x61, 0x72, 0x6d, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44,
	0x54, 0x57, 0x61, 0x72, 0x6d, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x0f, 0xea, 0xb5, 0x18,
	0x06, 0xe5, 0x89, 0xa7, 0xe6, 0x9c, 0xac, 0xda, 0xb5, 0x18, 0x01, 0x35, 0x52, 0x0a, 0x57, 0x61,
	0x72, 0x6d, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x48, 0x0a, 0x0b, 0x41, 0x49, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0xea,
	0xb5, 0x18, 0x0e, 0x41, 0x49, 0xe6, 0x8a, 0x95, 0xe6, 0x94, 0xbe, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc,
	0x8f, 0xf2, 0xb5, 0x18, 0x10, 0x45, 0x57, 0x61, 0x72, 0x6d, 0x41, 0x49, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x41, 0x49, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x41, 0x49, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x0a, 0x41, 0x49, 0xe5, 0x89, 0xa7, 0xe6,
	0x9c, 0xac, 0x49, 0x44, 0x52, 0x08, 0x41, 0x49, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3a, 0x04,
	0x88, 0xb5, 0x18, 0x01, 0x22, 0xde, 0x02, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x4c, 0x6f, 0x72, 0x64,
	0x55, 0x73, 0x65, 0x57, 0x61, 0x72, 0x6d, 0x53, 0x63, 0x72, 0x69, 0x70, 0x43, 0x68, 0x67, 0x43,
	0x66, 0x67, 0x12, 0x32, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0xe6, 0xb8, 0xa9, 0xe6,
	0x9a, 0x96, 0xe7, 0xad, 0x96, 0xe7, 0x95, 0xa5, 0x49, 0x44, 0x52, 0x0a, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x06, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe9, 0xa2, 0x86, 0xe4,
	0xb8, 0xbb, 0x49, 0x44, 0x52, 0x06, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x06,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5,
	0x18, 0x06, 0xe6, 0x9d, 0x83, 0xe9, 0x87, 0x8d, 0x52, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x44, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x50, 0x56, 0x50,
	0x4c, 0x6f, 0x72, 0x64, 0x55, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x0c, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x07, 0x55,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe4, 0xbd,
	0xbf, 0xe7, 0x94, 0xa8, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x52, 0x08, 0x55, 0x73, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x49, 0x0a, 0x0a, 0x57, 0x61, 0x72, 0x6d, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x57, 0x61, 0x72, 0x6d, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x42, 0x0f, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x89, 0xa7, 0xe6, 0x9c, 0xac, 0xda, 0xb5,
	0x18, 0x01, 0x35, 0x52, 0x0a, 0x57, 0x61, 0x72, 0x6d, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3a,
	0x04, 0x88, 0xb5, 0x18, 0x01, 0x22, 0x86, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x57, 0x61, 0x72,
	0x6d, 0x45, 0x4d, 0x41, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x43, 0x66, 0x67, 0x12, 0x32, 0x0a, 0x04,
	0x52, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1e, 0xea, 0xb5, 0x18, 0x06,
	0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xc8, 0xc1, 0x18, 0x01, 0xf2, 0xb5, 0x18, 0x0c, 0x45, 0x50,
	0x76, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x52, 0x61, 0x6e, 0x6b,
	0x12, 0x36, 0x0a, 0x09, 0x57, 0x61, 0x72, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x05, 0x42, 0x18, 0xea, 0xb5, 0x18, 0x0f, 0xe8, 0x83, 0x9c, 0xe8, 0xb4, 0x9f, 0xe5,
	0x88, 0x86, 0xe5, 0x90, 0x8d, 0xe6, 0xac, 0xa1, 0xda, 0xb5, 0x18, 0x01, 0x38, 0x52, 0x09, 0x57,
	0x61, 0x72, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x3a, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x22, 0x67,
	0x0a, 0x0d, 0x52, 0x65, 0x73, 0x44, 0x54, 0x57, 0x61, 0x72, 0x6d, 0x42, 0x61, 0x63, 0x6b, 0x12,
	0x26, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe9, 0x97, 0xb4, 0xe9, 0x9a, 0x94, 0x52, 0x08, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x0c, 0x57, 0x61, 0x72, 0x6d, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea,
	0xb5, 0x18, 0x06, 0xe7, 0xad, 0x96, 0xe7, 0x95, 0xa5, 0x52, 0x0c, 0x57, 0x61, 0x72, 0x6d, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0x61, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x44, 0x54,
	0x57, 0x61, 0x72, 0x6d, 0x45, 0x4d, 0x41, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12,
	0x19, 0x0a, 0x04, 0x45, 0x4d, 0x41, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0xea,
	0xb5, 0x18, 0x01, 0x4e, 0x52, 0x04, 0x45, 0x4d, 0x41, 0x4e, 0x12, 0x2e, 0x0a, 0x0c, 0x57, 0x61,
	0x72, 0x6d, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe7, 0xad, 0x96, 0xe7, 0x95, 0xa5, 0x52, 0x0c, 0x57, 0x61,
	0x72, 0x6d, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0x95, 0x04, 0x0a, 0x10, 0x52,
	0x65, 0x73, 0x57, 0x61, 0x72, 0x6d, 0x41, 0x49, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x66, 0x67, 0x12,
	0x32, 0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1e, 0xea,
	0xb5, 0x18, 0x06, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xc8, 0xc1, 0x18, 0x01, 0xf2, 0xb5, 0x18,
	0x0c, 0x45, 0x50, 0x76, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x52,
	0x61, 0x6e, 0x6b, 0x12, 0x40, 0x0a, 0x03, 0x45, 0x4d, 0x41, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54,
	0x57, 0x61, 0x72, 0x6d, 0x45, 0x4d, 0x41, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42,
	0x0f, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x9d, 0x87, 0xe7, 0xba, 0xbf, 0xda, 0xb5, 0x18, 0x01, 0x34,
	0x52, 0x03, 0x45, 0x4d, 0x41, 0x12, 0x4c, 0x0a, 0x08, 0x57, 0x61, 0x72, 0x6d, 0x42, 0x61, 0x63,
	0x6b, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x57, 0x61, 0x72, 0x6d, 0x42, 0x61, 0x63, 0x6b, 0x42,
	0x18, 0xea, 0xb5, 0x18, 0x0f, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe5, 0x86, 0x85, 0xe5, 0x9b,
	0x9e, 0xe6, 0xb5, 0x81, 0xda, 0xb5, 0x18, 0x01, 0x32, 0x52, 0x08, 0x57, 0x61, 0x72, 0x6d, 0x42,
	0x61, 0x63, 0x6b, 0x12, 0x46, 0x0a, 0x12, 0x46, 0x61, 0x69, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x16, 0xea, 0xb5, 0x18, 0x12, 0xe8, 0xbf, 0x9e, 0xe7, 0xbb, 0xad, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4,
	0xa5, 0xe5, 0x88, 0x86, 0xe6, 0x95, 0xb0, 0x52, 0x12, 0x46, 0x61, 0x69, 0x6c, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x4c, 0x0a, 0x15, 0x46,
	0x61, 0x69, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12,
	0xe8, 0xbf, 0x9e, 0xe7, 0xbb, 0xad, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe7, 0xad, 0x96, 0xe7,
	0x95, 0xa5, 0x52, 0x15, 0x46, 0x61, 0x69, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x23, 0x0a, 0x06, 0x53, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0b, 0xea, 0xb5, 0x18, 0x07, 0x53,
	0xe5, 0x9b, 0xa0, 0xe5, 0xad, 0x90, 0x52, 0x06, 0x53, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x3a,
	0x0a, 0x0f, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xa7, 0xa6,
	0xe5, 0x8f, 0x91, 0xe9, 0x97, 0xb4, 0xe9, 0x9a, 0x94, 0x52, 0x0f, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x40, 0x0a, 0x0c, 0x4d, 0x69,
	0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe6, 0x8e, 0x92, 0xe4, 0xbd, 0x8d, 0xe8, 0xb5, 0x9b, 0xe6,
	0x9c, 0x80, 0xe5, 0xb0, 0x8f, 0xe5, 0x9c, 0xba, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x52, 0x0c,
	0x4d, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x04, 0x88, 0xb5,
	0x18, 0x01, 0x22, 0xb2, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x44, 0x54, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x4d, 0x69, 0x6e,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x8f, 0xe6, 0x80, 0xbb, 0xe5,
	0x88, 0x86, 0xe5, 0x80, 0xbc, 0x52, 0x0d, 0x4d, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x4d, 0x61, 0x78, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18,
	0x0f, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe6, 0x80, 0xbb, 0xe5, 0x88, 0x86, 0xe5, 0x80, 0xbc,
	0x52, 0x0d, 0x4d, 0x61, 0x78, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x26, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x06, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0x52, 0x0a, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x44, 0x22, 0xfd, 0x03, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x57,
	0x61, 0x72, 0x6d, 0x41, 0x49, 0x43, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea,
	0xb5, 0x18, 0x02, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x22, 0x0a,
	0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea,
	0xb5, 0x18, 0x06, 0xe6, 0x9d, 0x83, 0xe9, 0x87, 0x8d, 0x52, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x44, 0x0a, 0x09, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x88, 0xa4, 0xe5, 0xae, 0x9a,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x12, 0x45, 0x41, 0x49, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x43, 0x68, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x0c, 0xe5, 0x88, 0xa4, 0xe5, 0xae, 0x9a, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x52, 0x0a, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x64, 0x0a, 0x09, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x52,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x30, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x88, 0xa4, 0xe5, 0xae, 0x9a, 0xe6, 0x9d,
	0xa1, 0xe4, 0xbb, 0xb6, 0xda, 0xb5, 0x18, 0x1c, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x52,
	0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x41, 0x49, 0x43, 0x48, 0x4b, 0x43, 0x4f, 0x4e, 0x44,
	0x5f, 0x4e, 0x55, 0x4d, 0x52, 0x09, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x12,
	0x42, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x18, 0xea, 0xb5, 0x18, 0x14, 0xe6, 0xb8,
	0xa9, 0xe6, 0x9a, 0x96, 0xe7, 0xad, 0x96, 0xe7, 0x95, 0xa5, 0xe8, 0xaf, 0x84, 0xe5, 0x88, 0x86,
	0x49, 0x44, 0x52, 0x0f, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x49, 0x44, 0x12, 0x7c, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x31, 0xea, 0xb5, 0x18,
	0x0c, 0xe6, 0xb8, 0xa9, 0xe6, 0x9a, 0x96, 0xe7, 0xad, 0x96, 0xe7, 0x95, 0xa5, 0xda, 0xb5, 0x18,
	0x1d, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x41, 0x49, 0x43, 0x48, 0x4b, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x52, 0x11,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x3a, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x22, 0xb8, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x57,
	0x61, 0x72, 0x6d, 0x41, 0x49, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe8, 0xaf, 0x84, 0xe5, 0x88, 0x86, 0x49,
	0x44, 0x52, 0x07, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x44, 0x12, 0x44, 0x0a, 0x09, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xaf, 0x84, 0xe5, 0x88, 0x86, 0xe6,
	0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x52, 0x09, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x12, 0x2a, 0x0a, 0x0a, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x88, 0x86, 0xe5, 0x80, 0xbc,
	0x52, 0x0a, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x04, 0x88, 0xb5,
	0x18, 0x01, 0x22, 0xe7, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x41, 0x49, 0x45, 0x78, 0x74, 0x72, 0x61, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x37, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x49, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x46, 0x6c, 0x61, 0x67, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0x46, 0x6c, 0x61, 0x67, 0x49, 0x44,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x43, 0x0a, 0x0c, 0x4d, 0x61, 0x78, 0x52, 0x61, 0x6e, 0x6b, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0xea, 0xb5, 0x18, 0x1b,
	0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xe5, 0x88, 0x86, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x88, 0xe4,
	0xb8, 0x8d, 0xe5, 0xa4, 0xa7, 0xe4, 0xba, 0x8e, 0xef, 0xbc, 0x89, 0x52, 0x0c, 0x4d, 0x61, 0x78,
	0x52, 0x61, 0x6e, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x51, 0x0a, 0x10, 0x4d, 0x61, 0x78,
	0x52, 0x61, 0x6e, 0x6b, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x25, 0xea, 0xb5, 0x18, 0x21, 0xe6, 0x8e, 0x92, 0xe4, 0xbd, 0x8d, 0xe8,
	0xb5, 0x9b, 0xe5, 0xaf, 0xb9, 0xe5, 0xb1, 0x80, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x88, 0xe4, 0xb8,
	0x8d, 0xe5, 0xa4, 0xa7, 0xe4, 0xba, 0x8e, 0xef, 0xbc, 0x89, 0x52, 0x10, 0x4d, 0x61, 0x78, 0x52,
	0x61, 0x6e, 0x6b, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc2, 0x06, 0x0a,
	0x0a, 0x57, 0x61, 0x72, 0x6d, 0x41, 0x49, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x51, 0x0a, 0x11, 0x57,
	0x61, 0x72, 0x6d, 0x41, 0x49, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x43, 0x66, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x52, 0x65, 0x73, 0x57, 0x61, 0x72, 0x6d, 0x41, 0x49, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x43, 0x66, 0x67, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x11, 0x57, 0x61, 0x72,
	0x6d, 0x41, 0x49, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x43, 0x66, 0x67, 0x12, 0x45,
	0x0a, 0x0d, 0x57, 0x61, 0x72, 0x6d, 0x41, 0x49, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x66, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x52, 0x65, 0x73, 0x57, 0x61, 0x72, 0x6d, 0x41, 0x49, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x66, 0x67,
	0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x0d, 0x57, 0x61, 0x72, 0x6d, 0x41, 0x49, 0x52, 0x75,
	0x6c, 0x65, 0x43, 0x66, 0x67, 0x12, 0x4b, 0x0a, 0x0f, 0x57, 0x61, 0x72, 0x6d, 0x45, 0x4d, 0x41,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x43, 0x66, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x57, 0x61, 0x72, 0x6d,
	0x45, 0x4d, 0x41, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x43, 0x66, 0x67, 0x42, 0x04, 0xd2, 0xc1, 0x18,
	0x00, 0x52, 0x0f, 0x57, 0x61, 0x72, 0x6d, 0x45, 0x4d, 0x41, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x43,
	0x66, 0x67, 0x12, 0x44, 0x0a, 0x0c, 0x57, 0x61, 0x72, 0x6d, 0x41, 0x49, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x49, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x53, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x0c, 0x57, 0x61, 0x72, 0x6d,
	0x41, 0x49, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x4b, 0x0a, 0x0f, 0x41, 0x49, 0x44, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x43, 0x66, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x41,
	0x49, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x43, 0x66, 0x67, 0x42, 0x04,
	0xd2, 0xc1, 0x18, 0x00, 0x52, 0x0f, 0x41, 0x49, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x43, 0x66, 0x67, 0x12, 0x54, 0x0a, 0x12, 0x41, 0x49, 0x44, 0x69, 0x66, 0x66, 0x69,
	0x63, 0x75, 0x6c, 0x74, 0x79, 0x43, 0x68, 0x67, 0x43, 0x66, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x41,
	0x49, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x43, 0x68, 0x67, 0x43, 0x66,
	0x67, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x12, 0x41, 0x49, 0x44, 0x69, 0x66, 0x66, 0x69,
	0x63, 0x75, 0x6c, 0x74, 0x79, 0x43, 0x68, 0x67, 0x43, 0x66, 0x67, 0x12, 0x54, 0x0a, 0x12, 0x57,
	0x61, 0x72, 0x6d, 0x41, 0x49, 0x43, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x52, 0x65, 0x73, 0x57, 0x61, 0x72, 0x6d, 0x41, 0x49, 0x43, 0x6f, 0x6e, 0x64, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x12, 0x57,
	0x61, 0x72, 0x6d, 0x41, 0x49, 0x43, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x12, 0x57, 0x0a, 0x13, 0x57, 0x61, 0x72, 0x6d, 0x41, 0x49, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x57, 0x61, 0x72, 0x6d,
	0x41, 0x49, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x42,
	0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x13, 0x57, 0x61, 0x72, 0x6d, 0x41, 0x49, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x62, 0x0a, 0x17, 0x4c, 0x6f,
	0x72, 0x64, 0x55, 0x73, 0x65, 0x57, 0x61, 0x72, 0x6d, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43,
	0x68, 0x67, 0x43, 0x66, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x52, 0x65,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x4c, 0x6f, 0x72, 0x64, 0x55, 0x73, 0x65,
	0x57, 0x61, 0x72, 0x6d, 0x53, 0x63, 0x72, 0x69, 0x70, 0x43, 0x68, 0x67, 0x43, 0x66, 0x67, 0x42,
	0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x17, 0x4c, 0x6f, 0x72, 0x64, 0x55, 0x73, 0x65, 0x57, 0x61,
	0x72, 0x6d, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x68, 0x67, 0x43, 0x66, 0x67, 0x12, 0x51,
	0x0a, 0x11, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x49, 0x45, 0x78, 0x74, 0x72, 0x61, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x52, 0x65, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x49, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x46, 0x6c, 0x61, 0x67, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x11,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x49, 0x45, 0x78, 0x74, 0x72, 0x61, 0x46, 0x6c, 0x61,
	0x67, 0x22, 0xa9, 0x03, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x4e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x47,
	0x72, 0x70, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x2d, 0x0a, 0x07, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0b,
	0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe7, 0xbb, 0x84, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52,
	0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xea, 0xb5, 0x18,
	0x0f, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe7, 0xbb, 0x84, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0,
	0xf8, 0xb5, 0x18, 0x01, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x35, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x17, 0xea, 0xb5, 0x18, 0x0f, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe7, 0xbb,
	0x84, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x09, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x44, 0x65, 0x73, 0x63, 0x12, 0x34, 0x0a, 0x0b, 0x41, 0x77, 0x61, 0x72, 0x64, 0x44,
	0x72, 0x6f, 0x70, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x12, 0xea, 0xb5, 0x18,
	0x0e, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0x49, 0x44, 0x52,
	0x0b, 0x41, 0x77, 0x61, 0x72, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x44, 0x12, 0x46, 0x0a, 0x0a,
	0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x43, 0x6f,
	0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xa7, 0xa3, 0xe9,
	0x94, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x52, 0x0a, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x43, 0x6f, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x47, 0x72, 0x70, 0x42, 0x67, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0x83, 0x8c,
	0xe6, 0x99, 0xaf, 0xe5, 0x8e, 0x9f, 0xe7, 0x94, 0xbb, 0x52, 0x09, 0x47, 0x72, 0x70, 0x42, 0x67,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x0b, 0x47, 0x72, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5,
	0x88, 0x86, 0xe7, 0xbb, 0x84, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0x52, 0x0b, 0x47, 0x72, 0x70,
	0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x74, 0x68, 0x3a, 0x13, 0x8a, 0x97, 0x22, 0x07, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x02, 0x22, 0x8a, 0x04,
	0x0a, 0x14, 0x52, 0x65, 0x73, 0x4e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe4, 0xbb, 0xbb, 0xe5,
	0x8a, 0xa1, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44,
	0x12, 0x31, 0x0a, 0x0b, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x47, 0x72, 0x70, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0f, 0xea, 0xb5, 0x18, 0x0b, 0xe6, 0x89, 0x80, 0xe5, 0xb1,
	0x9e, 0xe7, 0xbb, 0x84, 0x49, 0x44, 0x52, 0x0b, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x47, 0x72,
	0x70, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe5, 0x90, 0x8d,
	0xe7, 0xa7, 0xb0, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x04, 0x44, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18,
	0x0c, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xf8, 0xb5, 0x18,
	0x01, 0x52, 0x04, 0x44, 0x65, 0x73, 0x63, 0x12, 0x46, 0x0a, 0x0a, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x43, 0x6f, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x52, 0x65,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xae, 0x8c, 0xe6, 0x88, 0x90, 0xe6, 0x9d, 0xa1,
	0xe4, 0xbb, 0xb6, 0x52, 0x0a, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x12,
	0x2c, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe5, 0x9b, 0xbe,
	0xe6, 0xa0, 0x87, 0x52, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2e, 0x0a,
	0x09, 0x4a, 0x75, 0x6d, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xb7, 0xb3, 0xe8, 0xbd, 0xac, 0xe5, 0x8f, 0x82, 0xe6,
	0x95, 0xb0, 0x52, 0x09, 0x4a, 0x75, 0x6d, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x34, 0x0a,
	0x0b, 0x41, 0x77, 0x61, 0x72, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe6, 0x8e,
	0x89, 0xe8, 0x90, 0xbd, 0x49, 0x44, 0x52, 0x0b, 0x41, 0x77, 0x61, 0x72, 0x64, 0x44, 0x72, 0x6f,
	0x70, 0x49, 0x44, 0x12, 0x46, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x45, 0x4e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1d, 0x8a, 0x97, 0x22,
	0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0x92, 0x97, 0x22, 0x0b, 0x42,
	0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x47, 0x72, 0x70, 0x49, 0x44, 0x22, 0xaf, 0x01, 0x0a, 0x0a, 0x4e,
	0x65, 0x77, 0x62, 0x69, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x4e, 0x0a, 0x10, 0x4e, 0x65, 0x77,
	0x62, 0x69, 0x65, 0x47, 0x72, 0x70, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65,
	0x73, 0x4e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x47, 0x72, 0x70, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69,
	0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x10, 0x4e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x47,
	0x72, 0x70, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x51, 0x0a, 0x11, 0x4e, 0x65, 0x77,
	0x62, 0x69, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52,
	0x65, 0x73, 0x4e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x11, 0x4e, 0x65, 0x77, 0x62, 0x69,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x22, 0x98, 0x01, 0x0a,
	0x1a, 0x52, 0x65, 0x73, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6c,
	0x61, 0x79, 0x4d, 0x6f, 0x64, 0x4b, 0x65, 0x79, 0x43, 0x66, 0x67, 0x12, 0x25, 0x0a, 0x05, 0x54,
	0x65, 0x73, 0x74, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0f, 0xea, 0xb5, 0x18, 0x07,
	0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0x31, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x05, 0x54, 0x65, 0x73,
	0x74, 0x31, 0x12, 0x30, 0x0a, 0x10, 0x53, 0x76, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64,
	0x55, 0x6e, 0x69, 0x71, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0xc8, 0xc1,
	0x18, 0x02, 0x52, 0x10, 0x53, 0x76, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x55, 0x6e,
	0x69, 0x71, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x05, 0x54, 0x65, 0x73, 0x74, 0x32, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x0b, 0xea, 0xb5, 0x18, 0x07, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0x32,
	0x52, 0x05, 0x54, 0x65, 0x73, 0x74, 0x32, 0x22, 0x4f, 0x0a, 0x08, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x12, 0x43, 0x0a, 0x07, 0x54, 0x65, 0x73, 0x74, 0x43, 0x66, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52,
	0x65, 0x73, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79,
	0x4d, 0x6f, 0x64, 0x4b, 0x65, 0x79, 0x43, 0x66, 0x67, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52,
	0x07, 0x54, 0x65, 0x73, 0x74, 0x43, 0x66, 0x67, 0x22, 0x99, 0x08, 0x0a, 0x15, 0x52, 0x65, 0x73,
	0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x43, 0x66, 0x67, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x69, 0x6e, 0x12, 0x20, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x08, 0xe5, 0x8d, 0xa1, 0xe5, 0x8c, 0x85, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x08, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe8, 0xb5, 0x9b, 0xe5,
	0xad, 0xa3, 0x49, 0x44, 0x52, 0x08, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x2c,
	0x0a, 0x0a, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe5, 0x8d, 0xa1, 0xe6, 0xb1, 0xa0, 0x49, 0x44,
	0x52, 0x0a, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x3c, 0x0a, 0x0d,
	0x4f, 0x70, 0x65, 0x6e, 0x47, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0xe5,
	0xb9, 0xb8, 0xe8, 0xbf, 0x90, 0xe5, 0x8a, 0x9f, 0xe8, 0x83, 0xbd, 0x52, 0x0d, 0x4f, 0x70, 0x65,
	0x6e, 0x47, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x47, 0x75,
	0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x43, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0xb9, 0xb8, 0xe8, 0xbf, 0x90, 0xe8, 0xa7, 0xa6, 0xe5,
	0x8f, 0x91, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x52, 0x0c, 0x47, 0x75, 0x61, 0x72, 0x61, 0x6e,
	0x74, 0x65, 0x65, 0x43, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x13, 0x47, 0x75, 0x61, 0x72, 0x61, 0x6e,
	0x74, 0x65, 0x65, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x18, 0xea, 0xb5, 0x18, 0x14, 0xe5, 0x8e, 0xbb, 0xe9, 0x87, 0x8d, 0xe5,
	0xb9, 0xb8, 0xe8, 0xbf, 0x90, 0xe5, 0x8d, 0xa1, 0xe6, 0xb1, 0xa0, 0x49, 0x44, 0x52, 0x13, 0x47,
	0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x6f, 0x6c,
	0x49, 0x44, 0x12, 0x28, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x8d, 0xa1, 0xe5, 0x8c, 0x85, 0xe5, 0x90, 0x8d, 0xe5,
	0xad, 0x97, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x08,
	0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61,
	0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x8d, 0xa1, 0xe5,
	0x8c, 0x85, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x08, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0e, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xf8, 0xb5, 0x18, 0x01,
	0x52, 0x04, 0x44, 0x65, 0x73, 0x63, 0x12, 0x33, 0x0a, 0x09, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f,
	0x70, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x11, 0xe6,
	0xb6, 0x88, 0xe8, 0x80, 0x97, 0xe7, 0x9a, 0x84, 0xe9, 0x92, 0xa5, 0xe5, 0x8c, 0x99, 0x49, 0x44,
	0x52, 0x09, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x49, 0x44, 0x12, 0x3c, 0x0a, 0x08, 0x43,
	0x6f, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0xb6, 0x88, 0xe8, 0x80, 0x97, 0x52,
	0x08, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x48, 0x0a, 0x13, 0x4f, 0x6e, 0x63,
	0x65, 0x44, 0x72, 0x61, 0x77, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x8a, 0xbd, 0xe4,
	0xb8, 0xad, 0xe7, 0x9a, 0x84, 0xe9, 0x85, 0x8d, 0xe9, 0xa5, 0xb0, 0xe6, 0x95, 0xb0, 0x52, 0x13,
	0x4f, 0x6e, 0x63, 0x65, 0x44, 0x72, 0x61, 0x77, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x65,
	0x4e, 0x75, 0x6d, 0x12, 0x65, 0x0a, 0x14, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4b,
	0x65, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x47,
	0x61, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x1b, 0xea, 0xb5, 0x18, 0x12, 0xe9, 0x92, 0xa5,
	0xe5, 0x8c, 0x99, 0xe5, 0x85, 0x91, 0xe6, 0x8d, 0xa2, 0xe6, 0xb6, 0x88, 0xe8, 0x80, 0x97, 0xda,
	0xb5, 0x18, 0x01, 0x32, 0x52, 0x14, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4b, 0x65,
	0x79, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x53, 0x0a, 0x14, 0x43, 0x61,
	0x6e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x47, 0x61,
	0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0xea, 0xb5, 0x18, 0x1b, 0xe8, 0x83,
	0xbd, 0xe5, 0x90, 0xa6, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe5, 0x86, 0x85, 0xe5, 0x85, 0x91,
	0xe6, 0x8d, 0xa2, 0xe9, 0x92, 0xa5, 0xe5, 0x8c, 0x99, 0x52, 0x14, 0x43, 0x61, 0x6e, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x12,
	0x3d, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x70, 0x43, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe9, 0x81, 0x93, 0xe5, 0x85,
	0xb7, 0xe5, 0x9f, 0x8e, 0xe8, 0xb4, 0xad, 0xe4, 0xb9, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0x52, 0x0c, 0x50, 0x72, 0x6f, 0x70, 0x43, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b,
	0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x70, 0x43, 0x69, 0x74, 0x79, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1b, 0xea, 0xb5, 0x18, 0x17, 0xe9, 0x81, 0x93, 0xe5, 0x85, 0xb7, 0xe5, 0x9f,
	0x8e, 0xe8, 0xb4, 0xad, 0xe4, 0xb9, 0xb0, 0xe7, 0x89, 0xa9, 0xe5, 0x93, 0x81, 0x49, 0x44, 0x52,
	0x0a, 0x50, 0x72, 0x6f, 0x70, 0x43, 0x69, 0x74, 0x79, 0x49, 0x44, 0x3a, 0x37, 0x8a, 0x97, 0x22,
	0x02, 0x49, 0x44, 0x92, 0x97, 0x22, 0x08, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x92,
	0x97, 0x22, 0x08, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x92, 0x97, 0x22, 0x11, 0x53,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x2c, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0xf0, 0x97, 0x22, 0x01, 0x22, 0x56, 0x0a, 0x0c, 0x44, 0x72, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x12, 0x46, 0x0a, 0x0b, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x63, 0x6b,
	0x43, 0x66, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x52, 0x65, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x43,
	0x66, 0x67, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52,
	0x0b, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x43, 0x66, 0x67, 0x22, 0x7d, 0x0a, 0x0d,
	0x48, 0x65, 0x6c, 0x70, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x61, 0x62, 0x12, 0x46, 0x0a,
	0x07, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x48, 0x65, 0x6c, 0x70, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x06,
	0xe6, 0xae, 0xb5, 0xe8, 0x90, 0xbd, 0xda, 0xb5, 0x18, 0x02, 0x31, 0x30, 0x52, 0x07, 0x50, 0x61,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x54, 0x61, 0x62, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x90, 0x8d, 0xe7,
	0xa7, 0xb0, 0x52, 0x07, 0x54, 0x61, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd0, 0x01, 0x0a, 0x11,
	0x48, 0x65, 0x6c, 0x70, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x32, 0x0a, 0x0c, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0xa0, 0x87,
	0xe9, 0xa2, 0x98, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x0c, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe9, 0x85,
	0x8d, 0xe5, 0x9b, 0xbe, 0xe8, 0xa7, 0x84, 0xe5, 0x88, 0x99, 0x52, 0x09, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0xad, 0xa3, 0xe6,
	0x96, 0x87, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x2d, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x0f, 0xea, 0xb5, 0x18, 0x06, 0xe9, 0x85, 0x8d, 0xe5, 0x9b, 0xbe, 0xda, 0xb5,
	0x18, 0x01, 0x33, 0x52, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0xfe,
	0x01, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x48, 0x65, 0x6c, 0x70, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x43, 0x66, 0x67, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x40, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x30, 0xea, 0xb5, 0x18, 0x14, 0xe5, 0xb8, 0xae, 0xe5,
	0x8a, 0xa9, 0xe9, 0x9d, 0xa2, 0xe6, 0x9d, 0xbf, 0xe5, 0x85, 0xa5, 0xe5, 0x8f, 0xa3, 0x49, 0x44,
	0xf2, 0xb5, 0x18, 0x14, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x65, 0x6c, 0x70, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x49, 0x44, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x02, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x05,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xea, 0xb5, 0x18,
	0x06, 0xe6, 0xa0, 0x87, 0xe9, 0xa2, 0x98, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x05, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x54, 0x61, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe9, 0xa1, 0xb5, 0xe7, 0xad, 0xbe,
	0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x08, 0x54, 0x61, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x41, 0x0a, 0x07, 0x54, 0x61, 0x62, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x48, 0x65, 0x6c, 0x70,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x61, 0x62, 0x42, 0x0f, 0xea, 0xb5, 0x18, 0x06, 0xe9,
	0xa1, 0xb5, 0xe7, 0xad, 0xbe, 0xda, 0xb5, 0x18, 0x01, 0x31, 0x52, 0x07, 0x54, 0x61, 0x62, 0x44,
	0x61, 0x74, 0x61, 0x3a, 0x0a, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0x22,
	0xa6, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x4e, 0x42, 0x47, 0x75, 0x69, 0x64, 0x65, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x31, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1d, 0xea, 0xb5, 0x18,
	0x06, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x0f, 0x4e, 0x42, 0x5f, 0x54, 0x52,
	0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x56, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x42,
	0x40, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xda, 0xb5, 0x18, 0x32, 0x4c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4e, 0x45,
	0x57, 0x42, 0x49, 0x45, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47,
	0x45, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x55,
	0x4d, 0x52, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x22, 0xb2, 0x01, 0x0a, 0x1e, 0x52, 0x65, 0x73,
	0x4e, 0x42, 0x47, 0x75, 0x69, 0x64, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x33, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0xea, 0xb5, 0x18, 0x06, 0xe7,
	0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x11, 0x4e, 0x42, 0x5f, 0x43, 0x4f, 0x4e, 0x44,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x5b, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x42,
	0x45, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xda, 0xb5, 0x18, 0x37, 0x4c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4e, 0x45,
	0x57, 0x42, 0x49, 0x45, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47,
	0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x4e, 0x55, 0x4d, 0x52, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x22, 0xbd, 0x07,
	0x0a, 0x1c, 0x52, 0x65, 0x73, 0x4e, 0x42, 0x47, 0x75, 0x69, 0x64, 0x65, 0x4d, 0x61, 0x69, 0x6e,
	0x4c, 0x69, 0x6e, 0x65, 0x43, 0x66, 0x67, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x1a,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xc8, 0xc1, 0x18, 0x01,
	0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0x52, 0x02, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x08, 0x4d, 0x69,
	0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5,
	0x18, 0x12, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0xe4, 0xb8,
	0x8b, 0xe9, 0x99, 0x90, 0x52, 0x08, 0x4d, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x32,
	0x0a, 0x08, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe7, 0xad, 0x89, 0xe7,
	0xba, 0xa7, 0xe4, 0xb8, 0x8a, 0xe9, 0x99, 0x90, 0x52, 0x08, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x30, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x6b, 0x69, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe4, 0xb8, 0x8d, 0xe5,
	0x8f, 0xaf, 0xe8, 0xb7, 0xb3, 0xe8, 0xbf, 0x87, 0x52, 0x0a, 0x43, 0x61, 0x6e, 0x4e, 0x6f, 0x74,
	0x53, 0x6b, 0x69, 0x70, 0x12, 0x3c, 0x0a, 0x08, 0x53, 0x61, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x20, 0xea, 0xb5, 0x18, 0x0c, 0xe4, 0xbf, 0x9d, 0xe5,
	0xad, 0x98, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x0c, 0x4e, 0x42, 0x5f, 0x53,
	0x41, 0x56, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x08, 0x53, 0x61, 0x76, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x42, 0x70, 0x50, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0x93, 0x9d, 0xe5, 0x9b, 0xbe, 0xe8, 0xb7,
	0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x06, 0x42, 0x70, 0x50, 0x61, 0x74, 0x68, 0x12, 0x7a, 0x0a, 0x08,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x4e, 0x42, 0x47, 0x75,
	0x69, 0x64, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x42, 0x3a, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe6, 0x97,
	0xb6, 0xe6, 0x9c, 0xba, 0xda, 0xb5, 0x18, 0x26, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x52,
	0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4e, 0x45, 0x57, 0x42, 0x49, 0x45, 0x5f, 0x54, 0x52,
	0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x52, 0x08,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x12, 0x88, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x4e, 0x42, 0x47, 0x75, 0x69,
	0x64, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x3f, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xa7, 0xa6, 0xe5,
	0x8f, 0x91, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xda, 0xb5, 0x18, 0x2b, 0x4c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4e, 0x45, 0x57, 0x42, 0x49,
	0x45, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x55, 0x4d, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x95, 0x01, 0x0a, 0x0e, 0x53, 0x6b, 0x69, 0x70, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x52,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x4e, 0x42, 0x47, 0x75, 0x69, 0x64,
	0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x44, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xb7, 0xb3, 0xe8, 0xbf,
	0x87, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xda, 0xb5, 0x18, 0x30, 0x4c, 0x65, 0x67, 0x61, 0x63,
	0x79, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4e, 0x45, 0x57, 0x42, 0x49, 0x45,
	0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x43, 0x4f,
	0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x55, 0x4d, 0x52, 0x0e, 0x53, 0x6b, 0x69,
	0x70, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x08, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0xea,
	0xb5, 0x18, 0x09, 0xe4, 0xbc, 0x98, 0xe5, 0x85, 0x88, 0xe7, 0xba, 0xa7, 0x52, 0x08, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x09, 0x49, 0x73, 0x4f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe4,
	0xb8, 0x8b, 0xe6, 0x9e, 0xb6, 0x52, 0x09, 0x49, 0x73, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x32, 0x0a, 0x08, 0x49, 0x73, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xb1,
	0x80, 0xe5, 0x86, 0x85, 0xe5, 0xbc, 0x95, 0xe5, 0xaf, 0xbc, 0x52, 0x08, 0x49, 0x73, 0x49, 0x6e,
	0x47, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x49, 0x73, 0x4f, 0x75, 0x74, 0x47, 0x61, 0x6d,
	0x65, 0x57, 0x65, 0x61, 0x6b, 0x42, 0x6f, 0x6f, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x19, 0xea, 0xb5, 0x18, 0x15, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xb1, 0x80, 0xe5, 0xa4,
	0x96, 0xe5, 0xbc, 0xb1, 0xe5, 0xbc, 0x95, 0xe5, 0xaf, 0xbc, 0x52, 0x11, 0x49, 0x73, 0x4f, 0x75,
	0x74, 0x47, 0x61, 0x6d, 0x65, 0x57, 0x65, 0x61, 0x6b, 0x42, 0x6f, 0x6f, 0x74, 0x3a, 0x0e, 0xf0,
	0x97, 0x22, 0x01, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0x98, 0x97, 0x22, 0x02, 0x22, 0xfe, 0x01,
	0x0a, 0x17, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x4e, 0x42, 0x47, 0x75, 0x69, 0x64, 0x65, 0x49,
	0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x90, 0x8d,
	0xe5, 0xad, 0x97, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a,
	0x0f, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x65, 0x78, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x74, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x90, 0x8d, 0xe5,
	0xad, 0x97, 0xe9, 0xa2, 0x9c, 0xe8, 0x89, 0xb2, 0x52, 0x0f, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x65,
	0x78, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x12, 0x38, 0x0a, 0x0b, 0x4e, 0x61, 0x6d,
	0x65, 0x42, 0x47, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16,
	0xea, 0xb5, 0x18, 0x12, 0xe5, 0x90, 0x8d, 0xe5, 0xad, 0x97, 0xe8, 0x83, 0x8c, 0xe6, 0x99, 0xaf,
	0xe6, 0xa0, 0xb7, 0xe5, 0xbc, 0x8f, 0x52, 0x0b, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x47, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x03, 0x44, 0x69, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x1f, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x96, 0xb9, 0xe5, 0x90, 0x91, 0xf2, 0xb5, 0x18, 0x11,
	0x4e, 0x42, 0x5f, 0x49, 0x4e, 0x54, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x52, 0x5f, 0x44, 0x49,
	0x52, 0x52, 0x03, 0x44, 0x69, 0x72, 0x12, 0x16, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x06, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0x52, 0x02, 0x49, 0x44, 0x22, 0xc8,
	0x03, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x4e, 0x42, 0x47, 0x75, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x74,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x66, 0x67, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xc8, 0xc1, 0x18, 0x01, 0xea, 0xb5, 0x18, 0x02, 0x49,
	0x44, 0x52, 0x02, 0x49, 0x44, 0x12, 0x4f, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x52, 0x65, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x4e, 0x42, 0x47, 0x75, 0x69, 0x64,
	0x65, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x42, 0x0d, 0xea, 0xb5, 0x18,
	0x09, 0xe5, 0xbc, 0x95, 0xe5, 0xaf, 0xbc, 0xe5, 0x91, 0x98, 0x52, 0x0a, 0x49, 0x6e, 0x74, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe4, 0xbb, 0x8b, 0xe7, 0xbb, 0x8d,
	0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x38, 0x0a, 0x0e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xaf,
	0xad, 0xe9, 0x9f, 0xb3, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0x52, 0x0e, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x50, 0x6f,
	0x73, 0x58, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x10, 0xe5, 0xaf,
	0xb9, 0xe8, 0xaf, 0x9d, 0xe6, 0xa1, 0x86, 0xe4, 0xbd, 0x8d, 0xe7, 0xbd, 0xae, 0x58, 0x52, 0x04,
	0x50, 0x6f, 0x73, 0x58, 0x12, 0x28, 0x0a, 0x04, 0x50, 0x6f, 0x73, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x10, 0xe5, 0xaf, 0xb9, 0xe8, 0xaf, 0x9d, 0xe6, 0xa1,
	0x86, 0xe4, 0xbd, 0x8d, 0xe7, 0xbd, 0xae, 0x59, 0x52, 0x04, 0x50, 0x6f, 0x73, 0x79, 0x12, 0x2d,
	0x0a, 0x0a, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe9, 0x94, 0x9a, 0xe7, 0x82, 0xb9, 0xe5, 0x90,
	0x8d, 0x52, 0x0a, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a,
	0x13, 0x4f, 0x70, 0x54, 0x69, 0x70, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18,
	0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe6, 0x8f, 0x90, 0xe7, 0xa4, 0xba, 0xe8, 0xaf, 0xad, 0xe9,
	0x9f, 0xb3, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0x52, 0x13, 0x4f, 0x70, 0x54, 0x69, 0x70, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x0a, 0x8a,
	0x97, 0x22, 0x02, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0x22, 0xf8, 0x01, 0x0a, 0x14, 0x52, 0x65,
	0x73, 0x4e, 0x42, 0x47, 0x75, 0x69, 0x64, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x75, 0x72, 0x65, 0x43,
	0x66, 0x67, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a,
	0xc8, 0xc1, 0x18, 0x01, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0x52, 0x02, 0x49, 0x44, 0x12, 0x38,
	0x0a, 0x0b, 0x53, 0x68, 0x6f, 0x77, 0x46, 0x69, 0x6e, 0x67, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6,
	0x98, 0xbe, 0xe7, 0xa4, 0xba, 0xe6, 0x89, 0x8b, 0xe6, 0x8c, 0x87, 0x52, 0x0b, 0x53, 0x68, 0x6f,
	0x77, 0x46, 0x69, 0x6e, 0x67, 0x75, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x46, 0x69, 0x6e, 0x67,
	0x75, 0x72, 0x65, 0x44, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe6, 0x89, 0x8b, 0xe6, 0x8c, 0x87, 0xe6, 0x96, 0xb9, 0xe5, 0x90, 0x91, 0x52, 0x0a,
	0x46, 0x69, 0x6e, 0x67, 0x75, 0x72, 0x65, 0x44, 0x69, 0x72, 0x12, 0x25, 0x0a, 0x04, 0x50, 0x6f,
	0x73, 0x58, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0xea, 0xb5, 0x18, 0x0d, 0xe6, 0x89,
	0x8b, 0xe6, 0x8c, 0x87, 0xe5, 0x81, 0x8f, 0xe7, 0xa7, 0xbb, 0x58, 0x52, 0x04, 0x50, 0x6f, 0x73,
	0x58, 0x12, 0x25, 0x0a, 0x04, 0x50, 0x6f, 0x73, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x11, 0xea, 0xb5, 0x18, 0x0d, 0xe6, 0x89, 0x8b, 0xe6, 0x8c, 0x87, 0xe5, 0x81, 0x8f, 0xe7, 0xa7,
	0xbb, 0x59, 0x52, 0x04, 0x50, 0x6f, 0x73, 0x79, 0x3a, 0x0a, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44,
	0xf0, 0x97, 0x22, 0x01, 0x22, 0x34, 0x0a, 0x08, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44,
	0x12, 0x13, 0x0a, 0x01, 0x58, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x42, 0x05, 0xea, 0xb5, 0x18,
	0x01, 0x58, 0x52, 0x01, 0x58, 0x12, 0x13, 0x0a, 0x01, 0x59, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x42, 0x05, 0xea, 0xb5, 0x18, 0x01, 0x59, 0x52, 0x01, 0x59, 0x22, 0x82, 0x01, 0x0a, 0x0b, 0x52,
	0x65, 0x73, 0x44, 0x54, 0x5f, 0x4e, 0x42, 0x54, 0x69, 0x70, 0x12, 0x3c, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x28, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xaf,
	0xb9, 0xe9, 0xbd, 0x90, 0xe6, 0x96, 0xb9, 0xe5, 0xbc, 0x8f, 0xf2, 0xb5, 0x18, 0x14, 0x54, 0x75,
	0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x69, 0x70, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x42, 0x0a, 0xea, 0xb5, 0x18,
	0x06, 0xe5, 0x81, 0x8f, 0xe7, 0xa7, 0xbb, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22,
	0xcf, 0x02, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x4e, 0x42, 0x46, 0x69, 0x6e, 0x67,
	0x75, 0x72, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x21, 0xea, 0xb5, 0x18, 0x06, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18,
	0x13, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x6e, 0x67, 0x75, 0x72, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x44, 0x69,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2a, 0xea, 0xb5, 0x18,
	0x0c, 0xe6, 0x96, 0xb9, 0xe5, 0x90, 0x91, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18,
	0x16, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x6e, 0x67, 0x75, 0x72, 0x65,
	0x44, 0x69, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x44, 0x69, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x35, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x32, 0x44, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x81, 0x8f, 0xe7, 0xa7, 0xbb, 0x52,
	0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x41, 0x0a, 0x09, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x52, 0x65, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x42, 0x10, 0xea,
	0xb5, 0x18, 0x0c, 0xe8, 0xbe, 0xb9, 0xe6, 0xa1, 0x86, 0xe5, 0xa4, 0xa7, 0xe5, 0xb0, 0x8f, 0x52,
	0x09, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x32, 0x44, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xbe, 0xb9, 0xe6, 0xa1, 0x86, 0xe5, 0x81,
	0x8f, 0xe7, 0xa7, 0xbb, 0x52, 0x0b, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x22, 0xad, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x4e, 0x42, 0x47, 0x75, 0x69, 0x64, 0x65,
	0x55, 0x49, 0x43, 0x66, 0x67, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x0a, 0xc8, 0xc1, 0x18, 0x01, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x32, 0x0a, 0x03, 0x54, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x4e,
	0x42, 0x54, 0x69, 0x70, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x8f, 0x90, 0xe7, 0xa4, 0xba,
	0x52, 0x03, 0x54, 0x69, 0x70, 0x12, 0x3e, 0x0a, 0x07, 0x46, 0x69, 0x6e, 0x67, 0x75, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x4e, 0x42, 0x46, 0x69, 0x6e, 0x67, 0x75, 0x72, 0x65,
	0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x89, 0x8b, 0xe6, 0x8c, 0x87, 0x52, 0x07, 0x46, 0x69,
	0x6e, 0x67, 0x75, 0x72, 0x65, 0x3a, 0x0a, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0xf0, 0x97, 0x22,
	0x01, 0x22, 0xbe, 0x02, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x4e, 0x42, 0x47, 0x75, 0x69, 0x64, 0x65,
	0x54, 0x69, 0x70, 0x43, 0x66, 0x67, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x0a, 0xc8, 0xc1, 0x18, 0x01, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x24, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0xa0, 0x87, 0xe9, 0xa2, 0x98, 0xf8, 0xb5, 0x18,
	0x01, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x86, 0x85, 0xe5,
	0xae, 0xb9, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a, 0x09,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x9b, 0xbe, 0xe7, 0x89, 0x87, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe,
	0x84, 0x52, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x0e,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xaf, 0xad, 0xe9, 0x9f, 0xb3,
	0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0x52, 0x0e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x13, 0x4f, 0x70, 0x54, 0x69, 0x70, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe6,
	0x8f, 0x90, 0xe7, 0xa4, 0xba, 0xe8, 0xaf, 0xad, 0xe9, 0x9f, 0xb3, 0xe4, 0xba, 0x8b, 0xe4, 0xbb,
	0xb6, 0x52, 0x13, 0x4f, 0x70, 0x54, 0x69, 0x70, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x0a, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0xf0, 0x97,
	0x22, 0x01, 0x22, 0x94, 0x03, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x4e, 0x42, 0x47, 0x75, 0x69, 0x64,
	0x65, 0x54, 0x6c, 0x6f, 0x67, 0x43, 0x66, 0x67, 0x12, 0x22, 0x0a, 0x06, 0x53, 0x74, 0x65, 0x70,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xc8, 0xc1, 0x18, 0x01, 0xea, 0xb5,
	0x18, 0x02, 0x49, 0x44, 0x52, 0x06, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x06,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x42, 0x0f, 0xea, 0xb5,
	0x18, 0x06, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xda, 0xb5, 0x18, 0x01, 0x35, 0x52, 0x06, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x4e, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x53,
	0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0xea,
	0xb5, 0x18, 0x0f, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe5, 0x85, 0xb3, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x0f, 0x45, 0x4e, 0x42, 0x47, 0x75, 0x69, 0x64, 0x65, 0x46, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x53, 0x74, 0x65,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x49, 0x73, 0x44, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0xea,
	0xb5, 0x18, 0x15, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xb8, 0xba, 0xe5, 0x8a, 0xa8, 0xe6,
	0x80, 0x81, 0xe5, 0xbc, 0x95, 0xe5, 0xaf, 0xbc, 0x52, 0x0e, 0x49, 0x73, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x54, 0x6c, 0x6f, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x24, 0xea, 0xb5, 0x18, 0x0c,
	0xe6, 0x97, 0xa5, 0xe5, 0xbf, 0x97, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x10,
	0x45, 0x4e, 0x42, 0x47, 0x75, 0x69, 0x64, 0x65, 0x54, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x54, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x49, 0x73,
	0x44, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x65, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x1f, 0xea, 0xb5, 0x18, 0x1b, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4,
	0xb8, 0xba, 0xe9, 0x87, 0x8d, 0xe5, 0xa4, 0x8d, 0xe4, 0xb8, 0x8a, 0xe6, 0x8a, 0xa5, 0xe5, 0xbc,
	0x95, 0xe5, 0xaf, 0xbc, 0x52, 0x0f, 0x49, 0x73, 0x44, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x74, 0x65, 0x70, 0x3a, 0x12, 0x8a, 0x97, 0x22, 0x06, 0x53, 0x74, 0x65, 0x70, 0x49,
	0x44, 0xf0, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x02, 0x22, 0xb2, 0x01, 0x0a, 0x0f, 0x4e, 0x65,
	0x77, 0x62, 0x69, 0x65, 0x47, 0x75, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x53, 0x0a,
	0x0e, 0x4e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x47, 0x75, 0x69, 0x64, 0x65, 0x43, 0x66, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x52, 0x65, 0x73, 0x4e, 0x42, 0x47, 0x75, 0x69, 0x64, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x4c, 0x69,
	0x6e, 0x65, 0x43, 0x66, 0x67, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1,
	0x18, 0x00, 0x52, 0x0e, 0x4e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x47, 0x75, 0x69, 0x64, 0x65, 0x43,
	0x66, 0x67, 0x12, 0x4a, 0x0a, 0x0f, 0x4e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x47, 0x75, 0x69, 0x64,
	0x65, 0x54, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x52, 0x65,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x4e, 0x42, 0x47, 0x75, 0x69, 0x64, 0x65,
	0x54, 0x6c, 0x6f, 0x67, 0x43, 0x66, 0x67, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x0f, 0x4e,
	0x65, 0x77, 0x62, 0x69, 0x65, 0x47, 0x75, 0x69, 0x64, 0x65, 0x54, 0x6c, 0x6f, 0x67, 0x22, 0x90,
	0x01, 0x0a, 0x10, 0x4e, 0x42, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18,
	0x0c, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xf8, 0xb5, 0x18,
	0x01, 0x52, 0x0e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x3e, 0x0a, 0x0e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5,
	0xaf, 0xb9, 0xe5, 0xba, 0x94, 0xe8, 0xaf, 0xad, 0xe9, 0x9f, 0xb3, 0xe4, 0xba, 0x8b, 0xe4, 0xbb,
	0xb6, 0x52, 0x0e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0xf5, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x4e, 0x42, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x47, 0x0a, 0x0e,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x97, 0xb6, 0xe6, 0x9c, 0xba,
	0xf2, 0xb5, 0x18, 0x11, 0x4e, 0x42, 0x5f, 0x41, 0x44, 0x44, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x53, 0x70, 0x69, 0x6e, 0x65, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe7, 0x9a, 0xae, 0xe8,
	0x82, 0xa4, 0x49, 0x44, 0x52, 0x07, 0x53, 0x70, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x52, 0x0a,
	0x0e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x4e, 0x42, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x0f, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xda, 0xb5, 0x18, 0x01,
	0x36, 0x52, 0x0e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x3a, 0x16, 0x8a, 0x97, 0x22, 0x0e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0xf0, 0x97, 0x22, 0x01, 0x22, 0x73, 0x0a, 0x15, 0x52, 0x65, 0x73,
	0x4e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x69, 0x6e, 0x12, 0x2f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f,
	0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0xf2, 0xb5, 0x18, 0x15, 0x52, 0x45, 0x53, 0x5f, 0x4e, 0x45,
	0x57, 0x42, 0x49, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x07, 0xea, 0xb5, 0x18, 0x03, 0xe5, 0x80, 0xbc, 0x52, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x0a, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0x22, 0x99,
	0x01, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x4f, 0x0a, 0x09, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x57, 0x45,
	0x49, 0x47, 0x48, 0x54, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x42,
	0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x52, 0x09, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x0e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a,
	0xea, 0xb5, 0x18, 0x06, 0xe6, 0x95, 0xb0, 0xe5, 0x80, 0xbc, 0x52, 0x0e, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8b, 0x0b, 0x0a, 0x0c, 0x52,
	0x65, 0x73, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x43, 0x66, 0x67, 0x12, 0x20, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe5, 0xa4, 0xa9,
	0xe8, 0xb5, 0x8b, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x04, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xb5, 0x18,
	0x06, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0x52, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xea, 0xb5, 0x18,
	0x09, 0xe5, 0xa4, 0xa9, 0xe8, 0xb5, 0x8b, 0xe5, 0x90, 0x8d, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x5d, 0x0a, 0x0c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x39, 0xea, 0xb5, 0x18, 0x18, 0xe5, 0xa4, 0xa9, 0xe8,
	0xb5, 0x8b, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x19, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x41, 0x4c, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x53, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x52, 0x0c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x38, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x41, 0x4c, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x10, 0x53, 0x61, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe5, 0x90, 0x8c, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x52, 0x10,
	0x53, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x32, 0x0a, 0x0b, 0x53, 0x68, 0x6f, 0x77, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xa4, 0x96, 0xe6, 0x98,
	0xbe, 0xe5, 0x93, 0x81, 0xe8, 0xb4, 0xa8, 0x52, 0x0b, 0x53, 0x68, 0x6f, 0x77, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x93, 0x81, 0xe8, 0xb4,
	0xa8, 0x52, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x08, 0x4d, 0x61,
	0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x08,
	0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x11, 0x4f, 0x72, 0x67, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe6,
	0x9d, 0x83, 0xe9, 0x87, 0x8d, 0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90, 0x52, 0x11, 0x4f, 0x72, 0x67,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62,
	0x0a, 0x0f, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x42, 0x1b, 0xea, 0xb5, 0x18, 0x12, 0xe9, 0x9a, 0x8f, 0xe6, 0x9c, 0xba,
	0xe6, 0x9d, 0x83, 0xe9, 0x87, 0x8d, 0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90, 0xda, 0xb5, 0x18, 0x01,
	0x32, 0x52, 0x0f, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x65, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb,
	0x86, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x09, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44,
	0x65, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0xae, 0x80, 0xe8, 0xa6,
	0x81, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x09, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44,
	0x65, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x45, 0x66, 0x66, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x95, 0x88, 0xe6, 0x9e,
	0x9c, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xda, 0xb5, 0x18, 0x01, 0x32, 0x52, 0x09, 0x45, 0x66,
	0x66, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x42, 0x75, 0x66, 0x66, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e, 0xea, 0xb5, 0x18,
	0x0a, 0xe7, 0xa7, 0xbb, 0xe9, 0x99, 0xa4, 0x42, 0x75, 0x66, 0x66, 0x52, 0x0a, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x42, 0x75, 0x66, 0x66, 0x12, 0x51, 0x0a, 0x0a, 0x55, 0x6e, 0x4c, 0x6f, 0x63,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x52, 0x65,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54,
	0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe8, 0xa7, 0xa3, 0xe9, 0x94, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x52, 0x0a,
	0x55, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x55, 0x6e,
	0x4c, 0x6f, 0x63, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0d,
	0x42, 0x28, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xbe, 0xbe, 0xe6, 0x88, 0x90, 0xe5, 0x8f, 0x82, 0xe6,
	0x95, 0xb0, 0xda, 0xb5, 0x18, 0x01, 0x36, 0xf2, 0xb5, 0x18, 0x0f, 0x52, 0x45, 0x53, 0x5f, 0x52,
	0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x0c, 0x55, 0x6e, 0x4c, 0x6f,
	0x63, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x68, 0x0a, 0x1c, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x42, 0x75, 0x66, 0x66, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x24,
	0xea, 0xb5, 0x18, 0x20, 0xe5, 0xa4, 0x87, 0xe6, 0x88, 0x98, 0xe9, 0x98, 0xb6, 0xe6, 0xae, 0xb5,
	0xe5, 0xa4, 0xa9, 0xe8, 0xb5, 0x8b, 0xe6, 0xbf, 0x80, 0xe6, 0xb4, 0xbb, 0xe6, 0x95, 0x88, 0xe6,
	0x9e, 0x9c, 0x49, 0x44, 0x52, 0x1c, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x75,
	0x66, 0x66, 0x12, 0x64, 0x0a, 0x1a, 0x46, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x75, 0x66, 0x66,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x24, 0xea, 0xb5, 0x18, 0x20, 0xe5, 0xbc, 0x80, 0xe6,
	0x88, 0x98, 0xe9, 0x98, 0xb6, 0xe6, 0xae, 0xb5, 0xe5, 0xa4, 0xa9, 0xe8, 0xb5, 0x8b, 0xe6, 0xbf,
	0x80, 0xe6, 0xb4, 0xbb, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0x49, 0x44, 0x52, 0x1a, 0x46, 0x69,
	0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x42, 0x75, 0x66, 0x66, 0x12, 0x69, 0x0a, 0x13, 0x49, 0x6e, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x42, 0x75, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x37, 0xea, 0xb5, 0x18, 0x18, 0xe5, 0xbc, 0x80, 0xe6, 0x88,
	0x98, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90, 0xe7, 0xb1, 0xbb,
	0xe5, 0x88, 0xab, 0xf2, 0xb5, 0x18, 0x17, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e,
	0x54, 0x5f, 0x41, 0x44, 0x44, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x13,
	0x49, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x42, 0x75, 0x66, 0x66, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x0a, 0x42, 0x75, 0x66, 0x66, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x28, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x8a, 0xa0,
	0xe6, 0x88, 0x90, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xda, 0xb5, 0x18, 0x01, 0x36, 0xf2, 0xb5,
	0x18, 0x0f, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49,
	0x44, 0x52, 0x0a, 0x42, 0x75, 0x66, 0x66, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x3a, 0x19, 0x8a,
	0x97, 0x22, 0x02, 0x49, 0x44, 0x92, 0x97, 0x22, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0xf0, 0x97, 0x22, 0x01, 0xf8, 0x97, 0x22, 0x01, 0x22, 0x7e, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x44,
	0x54, 0x5f, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x2e, 0x0a, 0x09, 0x6c, 0x69, 0x66, 0x74, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x8f, 0x90,
	0xe5, 0x8d, 0x87, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0x52, 0x09, 0x6c, 0x69, 0x66, 0x74, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x32, 0x0a, 0x0e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5,
	0x18, 0x06, 0xe6, 0x9d, 0x83, 0xe9, 0x87, 0x8d, 0x52, 0x0e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc2, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x73,
	0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x1a, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x02, 0x49,
	0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x05, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xa4,
	0xa9, 0xe8, 0xb5, 0x8b, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x5e, 0x0a, 0x0d, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x15, 0xea, 0xb5, 0x18,
	0x0c, 0xe9, 0x87, 0x8d, 0xe9, 0x93, 0xb8, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xda, 0xb5, 0x18,
	0x01, 0x33, 0x52, 0x0d, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x3a, 0x0a, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0xf8, 0x97, 0x22, 0x01, 0x22, 0x9a, 0x03,
	0x0a, 0x10, 0x52, 0x65, 0x73, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a,
	0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x20,
	0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea,
	0xb5, 0x18, 0x06, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x3c, 0x0a, 0x0e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x31, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x10, 0x31, 0xe7,
	0xba, 0xa7, 0xe5, 0x93, 0x81, 0xe8, 0xb4, 0xa8, 0xe6, 0x9d, 0x83, 0xe9, 0x87, 0x8d, 0x52, 0x0e,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x31, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3c,
	0x0a, 0x0e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x32, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x10, 0x32, 0xe7, 0xba, 0xa7,
	0xe5, 0x93, 0x81, 0xe8, 0xb4, 0xa8, 0xe6, 0x9d, 0x83, 0xe9, 0x87, 0x8d, 0x52, 0x0e, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x32, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3c, 0x0a, 0x0e,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x33, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x10, 0x33, 0xe7, 0xba, 0xa7, 0xe5, 0x93,
	0x81, 0xe8, 0xb4, 0xa8, 0xe6, 0x9d, 0x83, 0xe9, 0x87, 0x8d, 0x52, 0x0e, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x33, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3c, 0x0a, 0x0e, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x34, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x10, 0x34, 0xe7, 0xba, 0xa7, 0xe5, 0x93, 0x81, 0xe8,
	0xb4, 0xa8, 0xe6, 0x9d, 0x83, 0xe9, 0x87, 0x8d, 0x52, 0x0e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x34, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3c, 0x0a, 0x0e, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x35, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x14, 0xea, 0xb5, 0x18, 0x10, 0x35, 0xe7, 0xba, 0xa7, 0xe5, 0x93, 0x81, 0xe8, 0xb4, 0xa8,
	0xe6, 0x9d, 0x83, 0xe9, 0x87, 0x8d, 0x52, 0x0e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x35,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x12, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0xf8, 0x97,
	0x22, 0x01, 0xf0, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x02, 0x22, 0x8f, 0x04, 0x0a, 0x13, 0x52,
	0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x53, 0x6c,
	0x6f, 0x74, 0x12, 0x24, 0x0a, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x93, 0x81, 0xe8, 0xb4, 0xa8, 0x52,
	0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x95, 0xb0,
	0xe9, 0x87, 0x8f, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0f, 0x4d, 0x61,
	0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0d, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x09, 0xe5, 0xbc, 0xba, 0xe5, 0x88, 0xb6, 0xe7,
	0xbb, 0x84, 0xda, 0xb5, 0x18, 0x01, 0x33, 0x52, 0x0f, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x56, 0x0a, 0x17, 0x49, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe5,
	0xbf, 0xbd, 0xe7, 0x95, 0xa5, 0xe5, 0xa4, 0xa9, 0xe8, 0xb5, 0x8b, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb,
	0xb6, 0xe5, 0x88, 0xa4, 0xe6, 0x96, 0xad, 0x52, 0x17, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x54,
	0x61, 0x6c, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x66, 0x0a, 0x1f, 0x49, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x45, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x57, 0x68, 0x65, 0x6e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe8,
	0x90, 0xbd, 0xe9, 0x80, 0x89, 0xe5, 0xa4, 0xa9, 0xe8, 0xb5, 0x8b, 0xe6, 0x8e, 0x92, 0xe9, 0x99,
	0xa4, 0xe4, 0xba, 0x92, 0xe6, 0x96, 0xa5, 0x52, 0x1f, 0x49, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x57, 0x68, 0x65, 0x6e, 0x45, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x12, 0x2c, 0x0a, 0x08, 0x45, 0x6e, 0x67, 0x61,
	0x67, 0x65, 0x47, 0x4c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c,
	0xe6, 0xbf, 0x80, 0xe6, 0xb4, 0xbb, 0xe8, 0x93, 0x9d, 0xe5, 0x9b, 0xbe, 0x52, 0x08, 0x45, 0x6e,
	0x67, 0x61, 0x67, 0x65, 0x47, 0x4c, 0x12, 0x38, 0x0a, 0x0f, 0x53, 0x6c, 0x6f, 0x74, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0e, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xf8, 0xb5, 0x18, 0x01, 0x52,
	0x0f, 0x53, 0x6c, 0x6f, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x40, 0x0a, 0x0d, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x6c, 0x6f, 0x74, 0x54, 0x69,
	0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0xbc, 0x80,
	0xe6, 0xa7, 0xbd, 0xe7, 0x9a, 0x84, 0x74, 0x69, 0x70, 0xe6, 0x8f, 0x90, 0xe7, 0xa4, 0xba, 0xf8,
	0xb5, 0x18, 0x01, 0x52, 0x0d, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x6c, 0x6f, 0x74, 0x54,
	0x69, 0x70, 0x3a, 0x08, 0xf0, 0x97, 0x22, 0x01, 0xf8, 0x97, 0x22, 0x01, 0x22, 0x96, 0x02, 0x0a,
	0x18, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74,
	0x53, 0x6c, 0x6f, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x29, 0x0a, 0x07, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0f, 0xea, 0xb5, 0x18, 0x0b,
	0xe6, 0xa7, 0xbd, 0xe4, 0xbd, 0x8d, 0xe7, 0xbb, 0x84, 0x49, 0x44, 0x52, 0x07, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe6, 0xa7, 0xbd, 0xe4, 0xbd, 0x8d, 0xe7, 0xbb,
	0x84, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea,
	0xb5, 0x18, 0x06, 0xe6, 0x9d, 0x83, 0xe9, 0x87, 0x8d, 0x52, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x20, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x05, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x05, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x53, 0x6c, 0x6f, 0x74,
	0x42, 0x0f, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0xa7, 0xbd, 0xe4, 0xbd, 0x8d, 0xda, 0xb5, 0x18, 0x01,
	0x38, 0x52, 0x05, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x3a, 0x1b, 0x8a, 0x97, 0x22, 0x07, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x92, 0x97, 0x22, 0x04, 0x54, 0x79, 0x70, 0x65, 0xf0, 0x97, 0x22,
	0x01, 0xf8, 0x97, 0x22, 0x01, 0x22, 0x9a, 0x0b, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe5, 0xa4, 0xa9, 0xe8, 0xb5,
	0x8b, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x10, 0x53,
	0x76, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x55, 0x6e, 0x69, 0x71, 0x49, 0x44, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0xc8, 0xc1, 0x18, 0x02, 0x52, 0x10, 0x53, 0x76, 0x72,
	0x50, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x55, 0x6e, 0x69, 0x71, 0x49, 0x44, 0x12, 0x22, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xea, 0xb5, 0x18,
	0x06, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0x52, 0x04, 0x49, 0x63, 0x6f,
	0x6e, 0x12, 0x30, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x8f, 0x8f, 0xe8,
	0xbf, 0xb0, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x91, 0x98, 0xe8, 0xa6, 0x81,
	0xf8, 0xb5, 0x18, 0x01, 0x52, 0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x28, 0x0a,
	0x06, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea,
	0xb5, 0x18, 0x0c, 0xe4, 0xb8, 0x93, 0xe5, 0xb1, 0x9e, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0x52,
	0x06, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x93,
	0x81, 0xe8, 0xb4, 0xa8, 0x52, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a,
	0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea,
	0xb5, 0x18, 0x06, 0xe6, 0x9d, 0x83, 0xe9, 0x87, 0x8d, 0x52, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x2d, 0x0a, 0x0a, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe5, 0x90, 0x8c, 0xe7, 0xb1,
	0xbb, 0xe7, 0xbb, 0x84, 0x52, 0x0a, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x2d, 0x0a, 0x0a, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe5, 0x90, 0x8c, 0xe5, 0x90, 0x8d,
	0xe7, 0xbb, 0x84, 0x52, 0x0a, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x42, 0x0a, 0x12, 0x49, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x78, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x12, 0xea, 0xb5, 0x18,
	0x09, 0xe4, 0xba, 0x92, 0xe6, 0x96, 0xa5, 0xe7, 0xbb, 0x84, 0xda, 0xb5, 0x18, 0x01, 0x32, 0x52,
	0x12, 0x49, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x78, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x12, 0x48, 0x0a, 0x12, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x74, 0x4d, 0x75,
	0x74, 0x65, 0x78, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0d, 0x42,
	0x18, 0xea, 0xb5, 0x18, 0x0f, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe4, 0xba, 0x92, 0xe6, 0x96,
	0xa5, 0xe7, 0xbb, 0x84, 0xda, 0xb5, 0x18, 0x01, 0x32, 0x52, 0x12, 0x45, 0x78, 0x70, 0x6c, 0x69,
	0x63, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x78, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x35, 0x0a,
	0x0e, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe5, 0xbc, 0xba, 0xe5, 0x88,
	0xb6, 0xe7, 0xbb, 0x84, 0x52, 0x0e, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x32, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x47, 0x4c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6,
	0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe8, 0x93, 0x9d, 0xe5, 0x9b, 0xbe, 0x52, 0x0b, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x47, 0x4c, 0x12, 0x2a, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x47, 0x4c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe9,
	0x80, 0xbb, 0xe8, 0xbe, 0x91, 0xe8, 0x93, 0x9d, 0xe5, 0x9b, 0xbe, 0x52, 0x07, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x47, 0x4c, 0x12, 0x3f, 0x0a, 0x0e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x65,
	0x77, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xea, 0xb5,
	0x18, 0x0f, 0xe4, 0xb8, 0x96, 0xe7, 0x95, 0x8c, 0xe8, 0xa7, 0x82, 0xe7, 0x9f, 0xad, 0xe5, 0x8f,
	0xa5, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x0e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x65, 0x77,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x4f, 0x0a, 0x17, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x72,
	0x65, 0x41, 0x49, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x11, 0xe8, 0xa1, 0x8c, 0xe4,
	0xb8, 0xba, 0xe6, 0xa0, 0x91, 0x41, 0x49, 0xe5, 0x90, 0xaf, 0xe7, 0x94, 0xa8, 0x52, 0x17, 0x47,
	0x61, 0x6d, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x41, 0x49, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x50, 0x0a, 0x0c, 0x41, 0x49, 0x54, 0x61, 0x6c, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x52,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x61, 0x6c,
	0x65, 0x6e, 0x74, 0x41, 0x49, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0f, 0xea, 0xb5, 0x18, 0x0b, 0x41,
	0x49, 0xe7, 0x94, 0xa8, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0c, 0x41, 0x49, 0x54, 0x61,
	0x6c, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x41, 0x49, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x05, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0b,
	0x41, 0x49, 0xe7, 0x94, 0xa8, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xda, 0xb5, 0x18, 0x01, 0x32,
	0x52, 0x08, 0x41, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x38, 0x0a, 0x0d, 0x54, 0x61,
	0x6c, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0xe5, 0xa4, 0xa9, 0xe8, 0xb5, 0x8b, 0xe6, 0x8a, 0x80,
	0xe8, 0x83, 0xbd, 0x49, 0x44, 0x52, 0x0d, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x49, 0x44, 0x12, 0x3d, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x15, 0xea, 0xb5,
	0x18, 0x0c, 0xe9, 0x99, 0x84, 0xe5, 0x8a, 0xa0, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xda, 0xb5,
	0x18, 0x01, 0x35, 0x52, 0x0e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x4b, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x52, 0x45, 0x53, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x8a, 0x9f, 0xe8, 0x83, 0xbd,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x4d, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x4d, 0x69, 0x6e, 0x53, 0x74,
	0x65, 0x70, 0x49, 0x44, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x21, 0xea, 0xb5, 0x18, 0x1d,
	0xe6, 0x96, 0xb0, 0xe6, 0x89, 0x8b, 0xe6, 0x88, 0x98, 0xe7, 0x94, 0x9f, 0xe6, 0x95, 0x88, 0xe6,
	0x9c, 0x80, 0xe4, 0xbd, 0x8e, 0xe9, 0x98, 0xb6, 0xe6, 0xae, 0xb5, 0x49, 0x44, 0x52, 0x10, 0x52,
	0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x4d, 0x69, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x3a,
	0x71, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0x92, 0x97, 0x22, 0x06, 0x4c, 0x6f, 0x72, 0x64, 0x49,
	0x44, 0x92, 0x97, 0x22, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x92, 0x97, 0x22, 0x0f,
	0x4c, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x2c, 0x20, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x92,
	0x97, 0x22, 0x0a, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x92, 0x97, 0x22,
	0x0a, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x92, 0x97, 0x22, 0x17, 0x47,
	0x61, 0x6d, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x41, 0x49, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0xf0, 0x97, 0x22, 0x01, 0xf8, 0x97, 0x22, 0x01, 0x98, 0x97,
	0x22, 0x02, 0x22, 0xd0, 0x03, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x22, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0xe5, 0xa4, 0xa9,
	0xe8, 0xb5, 0x8b, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0x49, 0x44, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x02, 0x43, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18,
	0x08, 0x43, 0x44, 0xe6, 0x97, 0xb6, 0xe9, 0x95, 0xbf, 0x52, 0x02, 0x43, 0x44, 0x12, 0x68, 0x0a,
	0x11, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe6,
	0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe6, 0x8c, 0x87, 0xe7, 0xa4, 0xba, 0xe5, 0x99, 0xa8, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x11, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x13, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x05, 0x42, 0x1e, 0xea, 0xb5, 0x18, 0x15, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd,
	0xe6, 0x8c, 0x87, 0xe7, 0xa4, 0xba, 0xe5, 0x99, 0xa8, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xda,
	0xb5, 0x18, 0x01, 0x32, 0x52, 0x13, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x42, 0x0a, 0x0d, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe9, 0x87, 0x8a, 0xe6,
	0x94, 0xbe, 0xe6, 0x96, 0xb9, 0xe5, 0xbc, 0x8f, 0xe6, 0x8e, 0xa9, 0xe7, 0xa0, 0x81, 0x52, 0x0d,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x62, 0x0a,
	0x0a, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x69, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2a, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x16, 0xea,
	0xb5, 0x18, 0x12, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe9, 0x87, 0x8a, 0xe6, 0x94, 0xbe, 0xe6,
	0x96, 0xb9, 0xe5, 0x90, 0x91, 0x52, 0x0a, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x69,
	0x72, 0x3a, 0x12, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0xf8, 0x97, 0x22,
	0x01, 0x98, 0x97, 0x22, 0x02, 0x22, 0xd4, 0x02, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x29,
	0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0f, 0xea, 0xb5, 0x18, 0x0b, 0xe5, 0xa4, 0xa9, 0xe8, 0xb5, 0x8b, 0xe7, 0xbb, 0x84, 0x49, 0x44,
	0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x08, 0x4d, 0x61, 0x78,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x0c, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x08, 0x4d,
	0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x0f, 0x54, 0x61, 0x6c, 0x65, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x54,
	0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c,
	0xe5, 0xa4, 0xa9, 0xe8, 0xb5, 0x8b, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0f, 0x54, 0x61,
	0x6c, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a,
	0x0a, 0x4d, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x91, 0xe9, 0x80, 0x89,
	0xe4, 0xb8, 0xbe, 0xe5, 0xa4, 0x9a, 0xe5, 0xb0, 0x91, 0xe4, 0xb8, 0xaa, 0x52, 0x0a, 0x4d, 0x69,
	0x6e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x4d, 0x61, 0x78, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5,
	0x18, 0x15, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0x9a, 0xe9, 0x80, 0x89, 0xe4, 0xb8, 0xbe, 0xe5, 0xa4,
	0x9a, 0xe5, 0xb0, 0x91, 0xe4, 0xb8, 0xaa, 0x52, 0x0a, 0x4d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x65, 0x3a, 0x17, 0x8a, 0x97, 0x22, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44,
	0xf0, 0x97, 0x22, 0x01, 0xf8, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x02, 0x22, 0xb0, 0x01, 0x0a,
	0x19, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74,
	0x4d, 0x75, 0x74, 0x65, 0x78, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x39, 0x0a, 0x0c, 0x4d, 0x75,
	0x74, 0x65, 0x78, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x15, 0xea, 0xb5, 0x18, 0x11, 0xe5, 0xa4, 0xa9, 0xe8, 0xb5, 0x8b, 0xe4, 0xba, 0x92, 0xe6,
	0x96, 0xa5, 0xe7, 0xbb, 0x84, 0x49, 0x44, 0x52, 0x0c, 0x4d, 0x75, 0x74, 0x65, 0x78, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x08, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe5, 0xa4, 0xa9,
	0xe8, 0xb5, 0x8b, 0x49, 0x44, 0x52, 0x08, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x3a,
	0x2e, 0x8a, 0x97, 0x22, 0x16, 0x4d, 0x75, 0x74, 0x65, 0x78, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x44, 0x2c, 0x20, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x92, 0x97, 0x22, 0x0c, 0x4d,
	0x75, 0x74, 0x65, 0x78, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0xf8, 0x97, 0x22, 0x01, 0x22,
	0x56, 0x0a, 0x0a, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x48, 0x0a,
	0x0f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x43, 0x66, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74,
	0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x0f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x61,
	0x6c, 0x65, 0x6e, 0x74, 0x43, 0x66, 0x67, 0x22, 0xbd, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0x49,
	0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x06, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x44, 0x12, 0x41, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2d, 0xea, 0xb5, 0x18,
	0x06, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x1f, 0x52, 0x45, 0x53, 0x5f, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f,
	0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x25, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x42,
	0x0f, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xda, 0xb5, 0x18, 0x01, 0x32,
	0x52, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x0e, 0x8a, 0x97, 0x22, 0x06, 0x48, 0x65, 0x72,
	0x6f, 0x49, 0x44, 0xf8, 0x97, 0x22, 0x01, 0x22, 0x43, 0x0a, 0x10, 0x4d, 0x61, 0x78, 0x46, 0x69,
	0x67, 0x68, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15,
	0xe6, 0x88, 0x98, 0xe5, 0x8a, 0x9b, 0xe6, 0x94, 0xbe, 0xe5, 0xa4, 0xa7, 0xe4, 0xb8, 0x87, 0xe5,
	0x88, 0x86, 0xe6, 0xaf, 0x94, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x22, 0xd6, 0x01, 0x0a,
	0x16, 0x52, 0x65, 0x73, 0x4d, 0x61, 0x78, 0x46, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x79, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x3c, 0x0a, 0x0e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x54, 0x6f, 0x70, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0xea, 0xb5, 0x18,
	0x10, 0xe6, 0x88, 0x98, 0xe5, 0x8a, 0x9b, 0xe5, 0x89, 0x8d, 0x4e, 0xe6, 0x96, 0xb9, 0xe6, 0xa1,
	0x88, 0x52, 0x0e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x6f, 0x70,
	0x4e, 0x12, 0x56, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x4d, 0x61, 0x78, 0x46, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x88, 0xa9, 0xe6, 0x81, 0xaf, 0xe7,
	0xad, 0x89, 0xe7, 0xba, 0xa7, 0xda, 0xb5, 0x18, 0x01, 0x35, 0x52, 0x0d, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x73, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x3a, 0x0a, 0x8a, 0x97, 0x22, 0x02, 0x49,
	0x44, 0xf8, 0x97, 0x22, 0x01, 0x22, 0xa9, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x41, 0x49, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x16, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x06, 0xea, 0xb5,
	0x18, 0x02, 0x49, 0x44, 0x52, 0x02, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x06, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x58, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe5, 0x8d,
	0xa0, 0xe4, 0xbd, 0x8d, 0xe5, 0x88, 0x97, 0x52, 0x06, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x58, 0x12,
	0x25, 0x0a, 0x06, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x5a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe5, 0x8d, 0xa0, 0xe4, 0xbd, 0x8d, 0xe6, 0x8e, 0x92, 0x52, 0x06,
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x5a, 0x12, 0x29, 0x0a, 0x06, 0x45, 0x71, 0x75, 0x69, 0x70, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x11, 0xea, 0xb5, 0x18, 0x08, 0xe8, 0xa3, 0x85, 0xe5,
	0xa4, 0x87, 0x49, 0x44, 0xda, 0xb5, 0x18, 0x01, 0x34, 0x52, 0x06, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x73, 0x22, 0xd1, 0x06, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x41, 0x49, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe9, 0x98, 0xb5, 0xe5, 0xae, 0xb9, 0x49, 0x44, 0xc8,
	0xc1, 0x18, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x07, 0x48, 0x65, 0x72, 0x6f, 0x4e,
	0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe4, 0xba,
	0xba, 0xe5, 0x8f, 0xa3, 0xe6, 0x95, 0xb0, 0x52, 0x07, 0x48, 0x65, 0x72, 0x6f, 0x4e, 0x75, 0x6d,
	0x12, 0x39, 0x0a, 0x0a, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe9, 0x9a, 0xbe, 0xe5, 0xba, 0xa6,
	0xe7, 0xb3, 0xbb, 0xe6, 0x95, 0xb0, 0xe5, 0x8d, 0x83, 0xe5, 0x88, 0x86, 0xe6, 0xaf, 0x94, 0x52,
	0x0a, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x43,
	0x48, 0x65, 0x72, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x0a,
	0x43, 0xe4, 0xbd, 0x8d, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0x52, 0x05, 0x43, 0x48, 0x65, 0x72,
	0x6f, 0x12, 0x2a, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x43, 0x48, 0x65, 0x72, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x0a, 0xe5, 0x89, 0xaf, 0x43, 0xe8, 0x8b, 0xb1,
	0xe9, 0x9b, 0x84, 0x52, 0x08, 0x53, 0x75, 0x62, 0x43, 0x48, 0x65, 0x72, 0x6f, 0x12, 0x4a, 0x0a,
	0x0a, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x49, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x0c, 0xe6, 0x8a, 0x95, 0xe6, 0x94, 0xbe, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0a, 0x4c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x48, 0x65, 0x72,
	0x6f, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x41, 0x49, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0f, 0xea, 0xb5, 0x18, 0x06, 0xe8,
	0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xda, 0xb5, 0x18, 0x01, 0x39, 0x52, 0x05, 0x48, 0x65, 0x72, 0x6f,
	0x73, 0x12, 0x30, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe9, 0x98, 0x9f, 0xe4, 0xbc,
	0x8d, 0xe4, 0xbb, 0xb7, 0xe5, 0x80, 0xbc, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x4d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x31, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x52, 0x65, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x49, 0x44, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x0a, 0xe4, 0xb8, 0xbb, 0xe7, 0xbe, 0x81,
	0xe7, 0xbb, 0x8a, 0x31, 0x52, 0x0d, 0x4d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x31, 0x12, 0x48, 0x0a, 0x14, 0x4d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x4e, 0x75, 0x6d, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x10, 0xe4, 0xb8, 0xbb, 0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a,
	0xe4, 0xba, 0xba, 0xe6, 0x95, 0xb0, 0x31, 0x52, 0x14, 0x4d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x4e, 0x75, 0x6d, 0x31, 0x12, 0x4e, 0x0a,
	0x0d, 0x4d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x32, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52,
	0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x42, 0x0e,
	0xea, 0xb5, 0x18, 0x0a, 0xe4, 0xb8, 0xbb, 0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a, 0x32, 0x52, 0x0d,
	0x4d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x32, 0x12, 0x48, 0x0a,
	0x14, 0x4d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x48, 0x65, 0x72,
	0x6f, 0x4e, 0x75, 0x6d, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x42, 0x14, 0xea, 0xb5, 0x18,
	0x10, 0xe4, 0xb8, 0xbb, 0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a, 0xe4, 0xba, 0xba, 0xe6, 0x95, 0xb0,
	0x32, 0x52, 0x14, 0x4d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x48,
	0x65, 0x72, 0x6f, 0x4e, 0x75, 0x6d, 0x32, 0x3a, 0x6c, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0xf8,
	0x97, 0x22, 0x01, 0xf0, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x02, 0x92, 0x97, 0x22, 0x22, 0x4d,
	0x61, 0x69, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x31, 0x2c, 0x4d, 0x61, 0x69,
	0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x4e, 0x75, 0x6d,
	0x31, 0x92, 0x97, 0x22, 0x22, 0x4d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x32, 0x2c, 0x4d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x48,
	0x65, 0x72, 0x6f, 0x4e, 0x75, 0x6d, 0x32, 0x92, 0x97, 0x22, 0x0a, 0x4c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe1, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x41, 0x49, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18,
	0x02, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x06, 0x4f,
	0x77, 0x6e, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x0c, 0xe6, 0x8b, 0xa5, 0xe6, 0x9c, 0x89, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x06, 0x4f,
	0x77, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x2c, 0x0a, 0x0b, 0x43, 0x61, 0x72, 0x64, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06,
	0xe8, 0xb4, 0xb9, 0xe7, 0x94, 0xa8, 0x52, 0x0b, 0x43, 0x61, 0x72, 0x64, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x31, 0x0a, 0x06, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe6, 0x94, 0xbe, 0xe5, 0xa4, 0xa7, 0xe7,
	0xb3, 0xbb, 0xe6, 0x95, 0xb0, 0xe5, 0x8d, 0x83, 0xe5, 0x88, 0x86, 0xe6, 0xaf, 0x94, 0x52, 0x06,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x3a, 0x21, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0xf8, 0x97,
	0x22, 0x01, 0x92, 0x97, 0x22, 0x13, 0x4f, 0x77, 0x6e, 0x4e, 0x75, 0x6d, 0x2c, 0x20, 0x43, 0x61,
	0x72, 0x64, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x8d, 0x01, 0x0a, 0x14, 0x52, 0x65,
	0x73, 0x57, 0x61, 0x72, 0x6d, 0x42, 0x54, 0x72, 0x65, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x12, 0x2f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f,
	0xea, 0xb5, 0x18, 0x17, 0xe8, 0xa1, 0x8c, 0xe4, 0xb8, 0xba, 0xe6, 0xa0, 0x91, 0xe6, 0xb8, 0xa9,
	0xe6, 0x9a, 0x96, 0xe7, 0xad, 0x96, 0xe7, 0x95, 0xa5, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x0d, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41, 0x49, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e,
	0xe6, 0xad, 0xa3, 0xe5, 0xb8, 0xb8, 0x41, 0x49, 0xe4, 0xb8, 0xaa, 0xe6, 0x95, 0xb0, 0x52, 0x0d,
	0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41, 0x49, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x0a, 0x8a,
	0x97, 0x22, 0x02, 0x49, 0x44, 0xf8, 0x97, 0x22, 0x01, 0x22, 0xef, 0x04, 0x0a, 0x1c, 0x52, 0x65,
	0x73, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0xc8, 0xc1,
	0x18, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x48, 0x0a, 0x0a, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x28, 0xea, 0xb5, 0x18, 0x24,
	0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0xe9, 0x98, 0xb5, 0xe5,
	0xae, 0xb9, 0xe5, 0x88, 0xa4, 0xe5, 0xae, 0x9a, 0xe4, 0xb8, 0x8b, 0xe9, 0x99, 0x90, 0xe5, 0x9b,
	0x9e, 0xe5, 0x90, 0x88, 0x52, 0x0a, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x48, 0x0a, 0x0a, 0x55, 0x70, 0x70, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x28, 0xea, 0xb5, 0x18, 0x24, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91,
	0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0xe9, 0x98, 0xb5, 0xe5, 0xae, 0xb9, 0xe5, 0x88, 0xa4, 0xe5,
	0xae, 0x9a, 0xe4, 0xb8, 0x8a, 0xe9, 0x99, 0x90, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0x52, 0x0a,
	0x55, 0x70, 0x70, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x4e, 0x0a, 0x13, 0x46, 0x6f,
	0x75, 0x72, 0x4f, 0x72, 0x46, 0x69, 0x76, 0x65, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe6, 0x88, 0x96,
	0xe8, 0x8e, 0xb7, 0xe5, 0xbe, 0x97, 0xe5, 0x9b, 0x9b, 0xe4, 0xba, 0x94, 0xe8, 0xb4, 0xb9, 0xe5,
	0x8d, 0xa1, 0xe6, 0x95, 0xb0, 0x52, 0x13, 0x46, 0x6f, 0x75, 0x72, 0x4f, 0x72, 0x46, 0x69, 0x76,
	0x65, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x59, 0x0a, 0x16, 0x54, 0x68,
	0x72, 0x65, 0x65, 0x53, 0x74, 0x61, 0x72, 0x33, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x21, 0xea, 0xb5, 0x18, 0x1d,
	0xe6, 0x88, 0x96, 0xe6, 0x8b, 0xa5, 0xe6, 0x9c, 0x89, 0x33, 0xe8, 0xb4, 0xb9, 0xe4, 0xbb, 0xa5,
	0xe4, 0xb8, 0x8a, 0x33, 0xe6, 0x98, 0x9f, 0xe5, 0x8d, 0xa1, 0xe6, 0x95, 0xb0, 0x52, 0x16, 0x54,
	0x68, 0x72, 0x65, 0x65, 0x53, 0x74, 0x61, 0x72, 0x33, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x6f, 0x70,
	0x4e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x17, 0xea, 0xb5, 0x18, 0x13, 0xe6, 0x88, 0x96,
	0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe6, 0x8e, 0x92, 0xe5, 0x90, 0x8d, 0xe5, 0x89, 0x8d, 0x4e,
	0x52, 0x08, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x6f, 0x70, 0x4e, 0x12, 0x34, 0x0a, 0x07, 0x4f, 0x77,
	0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1a, 0xea, 0xb5, 0x18,
	0x16, 0xe6, 0x88, 0x96, 0xe7, 0xbb, 0x84, 0xe5, 0x90, 0x88, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6,
	0x31, 0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81, 0x52, 0x07, 0x4f, 0x77, 0x6e, 0x43, 0x6f, 0x69, 0x6e,
	0x12, 0x2a, 0x0a, 0x02, 0x48, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1a, 0xea, 0xb5,
	0x18, 0x16, 0xe6, 0x88, 0x96, 0xe7, 0xbb, 0x84, 0xe5, 0x90, 0x88, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb,
	0xb6, 0x31, 0xe8, 0xa1, 0x80, 0xe9, 0x87, 0x8f, 0x52, 0x02, 0x48, 0x70, 0x12, 0x51, 0x0a, 0x12,
	0x53, 0x74, 0x61, 0x72, 0x32, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x33, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x42, 0x21, 0xea, 0xb5, 0x18, 0x1d, 0xe6, 0x88,
	0x96, 0xe6, 0x8b, 0xa5, 0xe6, 0x9c, 0x89, 0x32, 0xe8, 0xb4, 0xb9, 0xe4, 0xbb, 0xa5, 0xe4, 0xb8,
	0x8a, 0x33, 0xe6, 0x98, 0x9f, 0xe5, 0x8d, 0xa1, 0xe6, 0x95, 0xb0, 0x52, 0x12, 0x53, 0x74, 0x61,
	0x72, 0x32, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x33, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x3a,
	0x0a, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0xf8, 0x97, 0x22, 0x01, 0x22, 0x84, 0x01, 0x0a, 0x10,
	0x43, 0x68, 0x65, 0x73, 0x73, 0x41, 0x49, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x43, 0x6f, 0x69, 0x6e,
	0x12, 0x30, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b,
	0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x3e, 0x0a, 0x0e, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x43, 0x6f, 0x69, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12,
	0xe6, 0xaf, 0x8f, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81, 0xe6,
	0x95, 0xb0, 0x52, 0x0e, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x6e, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x73, 0x73, 0x41, 0x49, 0x42, 0x75, 0x66,
	0x66, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2c, 0x0a, 0x0b, 0x42, 0x75, 0x66,
	0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a,
	0xea, 0xb5, 0x18, 0x06, 0xe8, 0xae, 0xa1, 0xe6, 0xac, 0xa1, 0x52, 0x0b, 0x42, 0x75, 0x66, 0x66,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x08, 0x42, 0x75, 0x66, 0x66, 0x52,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe5,
	0x8d, 0x83, 0xe5, 0x88, 0x86, 0xe6, 0xaf, 0x94, 0x52, 0x08, 0x42, 0x75, 0x66, 0x66, 0x52, 0x61,
	0x74, 0x65, 0x22, 0x5a, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x73, 0x73, 0x41, 0x49, 0x42, 0x75, 0x66,
	0x66, 0x53, 0x68, 0x6f, 0x70, 0x12, 0x47, 0x0a, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x43, 0x68, 0x65, 0x73, 0x73, 0x41, 0x49, 0x42, 0x75, 0x66, 0x66, 0x53, 0x68, 0x6f, 0x70,
	0x49, 0x74, 0x65, 0x6d, 0x42, 0x0f, 0xea, 0xb5, 0x18, 0x06, 0xe8, 0xb4, 0xb9, 0xe7, 0x94, 0xa8,
	0xda, 0xb5, 0x18, 0x01, 0x35, 0x52, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x89,
	0x05, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x43, 0x68, 0x65, 0x73, 0x73, 0x41, 0x49, 0x44, 0x69, 0x66,
	0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe9, 0x9a, 0xbe, 0xe5, 0xba, 0xa6, 0x49,
	0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x5b, 0x0a, 0x13, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x4f, 0x6e, 0x65, 0x42, 0x75, 0x66, 0x66, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x29, 0xea, 0xb5, 0x18, 0x25, 0xe7, 0x9b, 0xae, 0xe6,
	0xa0, 0x87, 0xe9, 0x98, 0xb5, 0xe5, 0xae, 0xb9, 0x42, 0x75, 0x66, 0x66, 0xe4, 0xbb, 0xb7, 0xe5,
	0x80, 0xbc, 0xe4, 0xb8, 0x8a, 0xe9, 0x99, 0x90, 0xe7, 0x99, 0xbe, 0xe5, 0x88, 0x86, 0xe6, 0xaf,
	0x94, 0x52, 0x13, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4f, 0x6e, 0x65, 0x42, 0x75, 0x66, 0x66, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x5b, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x42, 0x75, 0x66, 0x66, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x23, 0xea, 0xb5, 0x18, 0x1f, 0xe6, 0x88, 0x96, 0xe9,
	0x87, 0x8d, 0xe5, 0x90, 0xaf, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0x42, 0x55, 0x46, 0x46, 0xe4,
	0xb8, 0x8b, 0xe9, 0x99, 0x90, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0x52, 0x16, 0x52, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x42, 0x75, 0x66, 0x66, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x55, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x75,
	0x66, 0x66, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x50, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x23, 0xea, 0xb5, 0x18, 0x1f, 0xe6, 0x88, 0x96, 0xe9, 0x87, 0x8d, 0xe5, 0x90, 0xaf, 0xe7,
	0x9b, 0xae, 0xe6, 0xa0, 0x87, 0x42, 0x55, 0x46, 0x46, 0xe8, 0xa1, 0x80, 0xe9, 0x87, 0x8f, 0xe4,
	0xb8, 0x8a, 0xe9, 0x99, 0x90, 0x52, 0x13, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x75,
	0x66, 0x66, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x50, 0x12, 0x63, 0x0a, 0x1a, 0x52, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x75, 0x66, 0x66, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c,
	0x6f, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x23,
	0xea, 0xb5, 0x18, 0x1f, 0xe6, 0x88, 0x96, 0xe9, 0x87, 0x8d, 0xe5, 0x90, 0xaf, 0xe7, 0x9b, 0xae,
	0xe6, 0xa0, 0x87, 0x42, 0x55, 0x46, 0x46, 0xe8, 0xbf, 0x9e, 0xe8, 0xb4, 0xa5, 0xe5, 0x9b, 0x9e,
	0xe5, 0x90, 0x88, 0x52, 0x1a, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x75, 0x66, 0x66,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x48, 0x0a, 0x09, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x65,
	0x73, 0x73, 0x41, 0x49, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x0f, 0xea,
	0xb5, 0x18, 0x06, 0xe4, 0xb8, 0xa2, 0xe9, 0x92, 0xb1, 0xda, 0xb5, 0x18, 0x01, 0x32, 0x52, 0x09,
	0x54, 0x68, 0x72, 0x6f, 0x77, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x82, 0x01, 0x0a, 0x1f, 0x52, 0x65,
	0x61, 0x63, 0x68, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x65, 0x42, 0x75, 0x66, 0x66, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x38, 0xea, 0xb5, 0x18, 0x34, 0xe8, 0xbe, 0xbe, 0xe6, 0x88, 0x90, 0xe7,
	0xa6, 0xbb, 0xe7, 0xba, 0xbf, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0xe9, 0x98, 0xb5, 0xe5, 0xae,
	0xb9, 0xe5, 0x90, 0x8e, 0x42, 0x75, 0x66, 0x66, 0xe7, 0x94, 0x9f, 0xe6, 0x95, 0x88, 0xe6, 0xa6,
	0x82, 0xe7, 0x8e, 0x87, 0xe7, 0x99, 0xbe, 0xe5, 0x88, 0x86, 0xe6, 0xaf, 0x94, 0x52, 0x1f, 0x52,
	0x65, 0x61, 0x63, 0x68, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x75, 0x65, 0x42, 0x75, 0x66, 0x66, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3a, 0x0a,
	0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0xf8, 0x97, 0x22, 0x01, 0x22, 0xe4, 0x02, 0x0a, 0x12, 0x52,
	0x65, 0x73, 0x43, 0x68, 0x65, 0x73, 0x73, 0x41, 0x49, 0x53, 0x68, 0x6f, 0x70, 0x42, 0x75, 0x66,
	0x66, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xea,
	0xb5, 0x18, 0x02, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x34, 0x0a,
	0x0e, 0x41, 0x49, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe9, 0x9a, 0xbe, 0xe5, 0xba,
	0xa6, 0x49, 0x44, 0x52, 0x0e, 0x41, 0x49, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x09, 0x53, 0x68, 0x6f, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x95, 0x86, 0xe5,
	0xba, 0x97, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0x52, 0x09, 0x53, 0x68, 0x6f, 0x70, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x54, 0x0a, 0x0d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x75, 0x66, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x52, 0x65, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x65, 0x73, 0x73, 0x41, 0x49, 0x42, 0x75, 0x66, 0x66,
	0x53, 0x68, 0x6f, 0x70, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x10, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87,
	0xe9, 0x98, 0xb5, 0xe5, 0xae, 0xb9, 0x42, 0x75, 0x66, 0x66, 0x52, 0x0d, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x12, 0x4e, 0x0a, 0x0a, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x42, 0x75, 0x66, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x65, 0x73, 0x73, 0x41, 0x49, 0x42,
	0x75, 0x66, 0x66, 0x53, 0x68, 0x6f, 0x70, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x10, 0xe6, 0x89, 0x93,
	0xe5, 0xb7, 0xa5, 0xe9, 0x98, 0xb5, 0xe5, 0xae, 0xb9, 0x42, 0x75, 0x66, 0x66, 0x52, 0x0a, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x42, 0x75, 0x66, 0x66, 0x3a, 0x26, 0x8a, 0x97, 0x22, 0x02, 0x49,
	0x44, 0xf8, 0x97, 0x22, 0x01, 0x92, 0x97, 0x22, 0x18, 0x41, 0x49, 0x44, 0x69, 0x66, 0x66, 0x69,
	0x63, 0x75, 0x6c, 0x74, 0x79, 0x49, 0x44, 0x2c, 0x53, 0x68, 0x6f, 0x70, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x22, 0xf3, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x43, 0x68, 0x65, 0x73, 0x73, 0x41, 0x49,
	0x44, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0xc8, 0xc1,
	0x18, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x0c, 0x43, 0x48, 0x65, 0x72, 0x6f, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0e, 0xea, 0xb5,
	0x18, 0x0a, 0xe4, 0xb8, 0xbb, 0x43, 0xe5, 0x93, 0x81, 0xe8, 0xb4, 0xa8, 0x52, 0x0c, 0x43, 0x48,
	0x65, 0x72, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x0f, 0x53, 0x75,
	0x62, 0x43, 0x48, 0x65, 0x72, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x0a, 0xe5, 0x89, 0xaf, 0x43, 0xe5, 0x93, 0x81,
	0xe8, 0xb4, 0xa8, 0x52, 0x0f, 0x53, 0x75, 0x62, 0x43, 0x48, 0x65, 0x72, 0x6f, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x0a, 0x44, 0xe7, 0x89, 0x8c, 0xe7, 0xad, 0x89,
	0xe7, 0xba, 0xa7, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x3a, 0x2b, 0x8a, 0x97, 0x22, 0x02,
	0x49, 0x44, 0xf8, 0x97, 0x22, 0x01, 0x92, 0x97, 0x22, 0x1d, 0x43, 0x48, 0x65, 0x72, 0x6f, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2c, 0x20, 0x53, 0x75, 0x62, 0x43, 0x48, 0x65, 0x72, 0x6f,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x96, 0x01, 0x0a, 0x12, 0x41, 0x49, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x42,
	0x0a, 0x10, 0x55, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x77,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x8d,
	0x87, 0xe7, 0xba, 0xa7, 0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81, 0xe4, 0xb8, 0x8b, 0xe9, 0x99, 0x90,
	0x52, 0x10, 0x55, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x77,
	0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0e, 0x44, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x4c,
	0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x10,
	0x44, 0xe7, 0x89, 0x8c, 0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81, 0xe4, 0xb8, 0x8b, 0xe9, 0x99, 0x90,
	0x52, 0x0e, 0x44, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x77, 0x65, 0x72,
	0x22, 0xdd, 0x02, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x43, 0x68, 0x65, 0x73, 0x73, 0x41, 0x49, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0a, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x4c, 0x0a, 0x13, 0x4c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1a, 0xea,
	0xb5, 0x18, 0x16, 0xe8, 0xbf, 0x9e, 0xe8, 0xb4, 0xa5, 0x58, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88,
	0xe6, 0x8d, 0xa2, 0xe7, 0xab, 0x99, 0xe4, 0xbd, 0x8d, 0x52, 0x13, 0x4c, 0x6f, 0x73, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x32, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x73, 0x12, 0x42,
	0x0a, 0x10, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x55, 0x70, 0x70,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0xac,
	0xa1, 0xe7, 0xba, 0xa7, 0xe5, 0x88, 0xa9, 0xe6, 0x81, 0xaf, 0xe8, 0xa1, 0x80, 0xe9, 0x87, 0x8f,
	0x52, 0x10, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x55, 0x70, 0x70,
	0x65, 0x72, 0x12, 0x42, 0x0a, 0x10, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0xea, 0xb5,
	0x18, 0x12, 0xe4, 0xb8, 0x8d, 0xe5, 0x90, 0x83, 0xe5, 0x88, 0xa9, 0xe6, 0x81, 0xaf, 0xe8, 0xa1,
	0x80, 0xe9, 0x87, 0x8f, 0x52, 0x10, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x0a, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x52, 0x65, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x49, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0f, 0xea, 0xb5, 0x18, 0x06, 0xe7, 0xad, 0x89,
	0xe7, 0xba, 0xa7, 0xda, 0xb5, 0x18, 0x01, 0x39, 0x52, 0x0a, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x73, 0x3a, 0x0a, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0xf8, 0x97, 0x22, 0x01,
	0x22, 0xed, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x43, 0x68, 0x65, 0x73, 0x73, 0x41, 0x49, 0x4e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x41, 0x49, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x4b, 0x65,
	0x79, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x2f, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x11, 0xea, 0xb5, 0x18, 0x0d, 0xe6, 0x95, 0xb0, 0xe5, 0xad, 0x97,
	0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x31, 0x52, 0x09, 0x49, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x31, 0x12, 0x2f, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x11, 0xea, 0xb5, 0x18, 0x0d, 0xe6, 0x95, 0xb0, 0xe5, 0xad,
	0x97, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x32, 0x52, 0x09, 0x49, 0x6e, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x32, 0x12, 0x2f, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe5, 0xad, 0x97, 0xe7, 0xac,
	0xa6, 0xe4, 0xb8, 0xb2, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x52, 0x08, 0x53, 0x74, 0x72, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x0a, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0xf8, 0x97, 0x22, 0x01,
	0x22, 0x75, 0x0a, 0x0d, 0x53, 0x74, 0x53, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x64, 0x0a, 0x09, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x46, 0xea, 0xb5, 0x18, 0x08, 0xe5, 0x8a, 0x9f, 0xe8, 0x83, 0xbd,
	0x49, 0x44, 0xf2, 0xb5, 0x18, 0x36, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e,
	0x47, 0x53, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x2c,
	0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x43, 0x53, 0x5f,
	0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x09, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x44, 0x22, 0xab, 0x0b, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x06, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x3b, 0x0a, 0x0b, 0x49, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1,
	0xe5, 0x99, 0xa8, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0x52,
	0x0b, 0x49, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x05,
	0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x25, 0xea, 0xb5, 0x18,
	0x06, 0xe9, 0xa1, 0xb5, 0xe7, 0xad, 0xbe, 0xf2, 0xb5, 0x18, 0x17, 0x52, 0x45, 0x53, 0x5f, 0x53,
	0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x52, 0x05, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x0c, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x8a, 0x9f, 0xe8, 0x83, 0xbd, 0xe5, 0x88, 0x86, 0xe7, 0xbb,
	0x84, 0x52, 0x0c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x64, 0x0a, 0x09, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x46, 0xea, 0xb5, 0x18, 0x08, 0xe5, 0x8a, 0x9f, 0xe8, 0x83, 0xbd, 0x49, 0x44,
	0xf2, 0xb5, 0x18, 0x36, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53,
	0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x2c, 0x52, 0x45,
	0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x43, 0x53, 0x5f, 0x46, 0x45,
	0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x09, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x0b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c,
	0xe5, 0x8a, 0x9f, 0xe8, 0x83, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xf8, 0xb5, 0x18, 0x01,
	0x52, 0x0b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a,
	0x0d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4,
	0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x52, 0x0d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4f, 0x0a, 0x0c, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2b, 0xea, 0xb5, 0x18,
	0x0c, 0xe5, 0x85, 0x83, 0xe4, 0xbb, 0xb6, 0xe6, 0xa0, 0xb7, 0xe5, 0xbc, 0x8f, 0xf2, 0xb5, 0x18,
	0x17, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x53, 0x54,
	0x59, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0c, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5,
	0x18, 0x0c, 0xe5, 0x85, 0x83, 0xe4, 0xbb, 0xb6, 0xe6, 0xa0, 0x87, 0xe9, 0xa2, 0x98, 0xf8, 0xb5,
	0x18, 0x01, 0x52, 0x0c, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x31, 0x0a, 0x0c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe9, 0xbb, 0x98, 0xe8,
	0xae, 0xa4, 0xe5, 0x80, 0xbc, 0x52, 0x0c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x48, 0x61, 0x76, 0x65, 0x53, 0x75, 0x62, 0x49, 0x74,
	0x65, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x98,
	0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x9c, 0x89, 0xe5, 0xad, 0x90, 0xe9, 0x80, 0x89, 0xe9, 0xa1, 0xb9,
	0x52, 0x0b, 0x48, 0x61, 0x76, 0x65, 0x53, 0x75, 0x62, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x46, 0x0a,
	0x08, 0x53, 0x75, 0x62, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x74, 0x53, 0x75, 0x62, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x09, 0xe5, 0xad, 0x90,
	0xe9, 0x80, 0x89, 0xe9, 0xa1, 0xb9, 0xda, 0xb5, 0x18, 0x01, 0x36, 0x52, 0x08, 0x53, 0x75, 0x62,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x48, 0x61, 0x76, 0x65, 0x48, 0x65, 0x6c,
	0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe6, 0x98, 0xaf,
	0xe5, 0x90, 0xa6, 0xe6, 0x9c, 0x89, 0xe5, 0xb8, 0xae, 0xe5, 0x8a, 0xa9, 0xe5, 0x8a, 0x9f, 0xe8,
	0x83, 0xbd, 0x52, 0x08, 0x48, 0x61, 0x76, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x12, 0x46, 0x0a, 0x08,
	0x48, 0x65, 0x6c, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2a,
	0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xb8, 0xae, 0xe5, 0x8a, 0xa9, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0xf2, 0xb5, 0x18, 0x16, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53,
	0x5f, 0x48, 0x45, 0x4c, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x08, 0x48, 0x65, 0x6c, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x48, 0x65, 0x6c, 0x70, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xb8, 0xae,
	0xe5, 0x8a, 0xa9, 0xe6, 0xa0, 0x87, 0xe9, 0xa2, 0x98, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x09, 0x48,
	0x65, 0x6c, 0x70, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x48, 0x65, 0x6c, 0x70,
	0x54, 0x65, 0x78, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c,
	0xe5, 0xb8, 0xae, 0xe5, 0x8a, 0xa9, 0xe6, 0x96, 0x87, 0xe5, 0xad, 0x97, 0xf8, 0xb5, 0x18, 0x01,
	0x52, 0x08, 0x48, 0x65, 0x6c, 0x70, 0x54, 0x65, 0x78, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x48, 0x65,
	0x6c, 0x70, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x42, 0x15, 0xea, 0xb5,
	0x18, 0x0c, 0xe5, 0xb8, 0xae, 0xe5, 0x8a, 0xa9, 0xe5, 0x9b, 0xbe, 0xe7, 0x89, 0x87, 0xda, 0xb5,
	0x18, 0x01, 0x33, 0x52, 0x08, 0x48, 0x65, 0x6c, 0x70, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x35, 0x0a,
	0x08, 0x48, 0x65, 0x6c, 0x70, 0x44, 0x65, 0x73, 0x63, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x19, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xb8, 0xae, 0xe5, 0x8a, 0xa9, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf,
	0xb0, 0xda, 0xb5, 0x18, 0x01, 0x33, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x08, 0x48, 0x65, 0x6c, 0x70,
	0x44, 0x65, 0x73, 0x63, 0x12, 0x35, 0x0a, 0x08, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe6, 0x98, 0xaf, 0xe5,
	0x90, 0xa6, 0xe6, 0x9c, 0x89, 0xe4, 0xba, 0x8c, 0xe6, 0xac, 0xa1, 0xe7, 0xa1, 0xae, 0xe8, 0xae,
	0xa4, 0x52, 0x08, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x3c, 0x0a, 0x0b, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1a, 0xea, 0xb5, 0x18, 0x12, 0xe4, 0xba, 0x8c, 0xe6, 0xac, 0xa1, 0xe7, 0xa1, 0xae, 0xe8,
	0xae, 0xa4, 0xe6, 0x96, 0x87, 0xe6, 0x9c, 0xac, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x49, 0x73, 0x53,
	0x75, 0x62, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x42, 0x13, 0xea, 0xb5,
	0x18, 0x0f, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xad, 0x90, 0xe9, 0x80, 0x89, 0xe9, 0xa1,
	0xb9, 0x52, 0x09, 0x49, 0x73, 0x53, 0x75, 0x62, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x3e, 0x0a, 0x0e,
	0x4f, 0x70, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf,
	0xe9, 0x80, 0x89, 0xe9, 0xa1, 0xb9, 0xe8, 0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0x52, 0x0e, 0x4f, 0x70,
	0x65, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x37, 0x0a, 0x0b,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x0c, 0xe9, 0x80, 0x89, 0xe9, 0xa1, 0xb9, 0xe8, 0xbf, 0x87,
	0xe6, 0xbb, 0xa4, 0xda, 0xb5, 0x18, 0x01, 0x36, 0x52, 0x0b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x49, 0x73, 0x48, 0x69, 0x64, 0x65, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x08, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x98, 0xaf, 0xe5, 0x90,
	0xa6, 0xe9, 0x9a, 0x90, 0xe8, 0x97, 0x8f, 0x52, 0x06, 0x49, 0x73, 0x48, 0x69, 0x64, 0x65, 0x3a,
	0x24, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0x92, 0x97, 0x22, 0x16, 0x49, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x55, 0x73, 0x65, 0x2c, 0x20, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49,
	0x44, 0xf0, 0x97, 0x22, 0x01, 0x22, 0x5d, 0x0a, 0x13, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06,
	0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x08,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xea, 0xb5, 0x18, 0x06, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x08, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x22, 0xb9, 0x03, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x41, 0x63, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x69, 0x6e, 0x12, 0x30, 0x0a, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x88, 0x86, 0xe7,
	0xbb, 0x84, 0xe6, 0xa0, 0x87, 0xe9, 0xa2, 0x98, 0x52, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x45, 0x6e, 0x67, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0x8b, 0xb1, 0xe6,
	0x96, 0x87, 0xe6, 0xa0, 0x87, 0xe9, 0xa2, 0x98, 0x52, 0x08, 0x45, 0x6e, 0x67, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x53, 0x70, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0xe7,
	0x9a, 0xae, 0xe8, 0x82, 0xa4, 0x49, 0x44, 0x52, 0x07, 0x53, 0x70, 0x69, 0x6e, 0x65, 0x49, 0x44,
	0x12, 0x4b, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x2d, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0xe6,
	0x96, 0xb9, 0xe5, 0x90, 0x91, 0xf2, 0xb5, 0x18, 0x19, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x48, 0x41,
	0x4e, 0x4b, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x44, 0x49, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x52, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a,
	0x06, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea,
	0xb5, 0x18, 0x0c, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0xe6, 0x96, 0xb9, 0xe6, 0xa1, 0x88, 0x52,
	0x06, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x08, 0x4e, 0x61, 0x6d, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe5,
	0x90, 0x8d, 0xe5, 0x8d, 0x95, 0x52, 0x08, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x57, 0x0a, 0x0c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x0c, 0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0xba, 0xe5,
	0xb1, 0x95, 0xe7, 0xa4, 0xba, 0xda, 0xb5, 0x18, 0x01, 0x35, 0x52, 0x0c, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x3a, 0x16, 0x8a, 0x97, 0x22, 0x0a, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x54, 0x69, 0x74, 0x6c, 0x65, 0xf0, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x02,
	0x22, 0xa3, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x46, 0x72, 0x65, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x66, 0x67, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x07, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5,
	0x18, 0x08, 0xe7, 0xbb, 0x84, 0xe5, 0x88, 0xab, 0x49, 0x44, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x21, 0xea, 0xb5, 0x18, 0x0c, 0xe9, 0x99, 0x90, 0xe5, 0x85, 0x8d, 0xe7, 0xb1, 0xbb,
	0xe5, 0x88, 0xab, 0xf2, 0xb5, 0x18, 0x0d, 0x52, 0x45, 0x53, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x46, 0x72,
	0x65, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08,
	0xe9, 0x99, 0x90, 0xe5, 0x85, 0x8d, 0x49, 0x44, 0x52, 0x06, 0x46, 0x72, 0x65, 0x65, 0x49, 0x44,
	0x3a, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x22, 0xac, 0x02, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x46, 0x72,
	0x65, 0x65, 0x43, 0x66, 0x67, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x3c, 0x0a, 0x10,
	0x46, 0x72, 0x65, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xbc, 0x80, 0xe5,
	0xa7, 0x8b, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x10, 0x46, 0x72, 0x65, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x12, 0x38, 0x0a, 0x0e, 0x46, 0x72,
	0x65, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe6, 0x97,
	0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0e, 0x46, 0x72, 0x65, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x46, 0x72, 0x65, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x47, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x46, 0x72, 0x65, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x47, 0x65, 0x6e,
	0x12, 0x26, 0x0a, 0x0e, 0x46, 0x72, 0x65, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x47,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x46, 0x72, 0x65, 0x65, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x47, 0x65, 0x6e, 0x12, 0x45, 0x0a, 0x08, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x44, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x29, 0xea, 0xb5, 0x18, 0x08,
	0xe7, 0xbb, 0x84, 0xe5, 0x88, 0xab, 0x49, 0x44, 0xda, 0xb5, 0x18, 0x19, 0x4c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x2e, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41,
	0x58, 0x5f, 0x43, 0x4e, 0x54, 0x52, 0x08, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x3a,
	0x04, 0x88, 0xb5, 0x18, 0x01, 0x22, 0x91, 0x01, 0x0a, 0x08, 0x46, 0x72, 0x65, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x12, 0x49, 0x0a, 0x0c, 0x46, 0x72, 0x65, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x66, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x46, 0x72, 0x65, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x66, 0x67, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52,
	0x0c, 0x46, 0x72, 0x65, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x66, 0x67, 0x12, 0x3a, 0x0a,
	0x07, 0x46, 0x72, 0x65, 0x65, 0x43, 0x66, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x46, 0x72, 0x65, 0x65,
	0x43, 0x66, 0x67, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00,
	0x52, 0x07, 0x46, 0x72, 0x65, 0x65, 0x43, 0x66, 0x67, 0x22, 0xfe, 0x01, 0x0a, 0x12, 0x52, 0x65,
	0x73, 0x43, 0x68, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x6e, 0x45, 0x78, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1c, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5,
	0x18, 0x08, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0x69, 0x64, 0x52, 0x02, 0x49, 0x44, 0x12, 0x31,
	0x0a, 0x09, 0x49, 0x73, 0x4e, 0x6f, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xb8, 0x8d,
	0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba, 0x52, 0x09, 0x49, 0x73, 0x4e, 0x6f, 0x74, 0x53, 0x68, 0x6f,
	0x77, 0x12, 0x3a, 0x0a, 0x0c, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x8e, 0x86,
	0xe5, 0x8f, 0xb2, 0xe4, 0xb8, 0x8a, 0xe7, 0x9a, 0x84, 0xe6, 0xa0, 0x87, 0xe9, 0xa2, 0x98, 0x52,
	0x0c, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3e, 0x0a,
	0x0e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x8e, 0x86, 0xe5, 0x8f,
	0xb2, 0xe4, 0xb8, 0x8a, 0xe7, 0x9a, 0x84, 0xe6, 0x96, 0x87, 0xe6, 0x9c, 0xac, 0x52, 0x0e, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3a, 0x1b, 0x8a,
	0x97, 0x22, 0x02, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0x92, 0x97, 0x22, 0x0d, 0x49, 0x44, 0x2c,
	0x20, 0x49, 0x73, 0x4e, 0x6f, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x22, 0xfc, 0x01, 0x0a, 0x10, 0x52,
	0x65, 0x73, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x43, 0x66, 0x67, 0x12,
	0x2d, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1d, 0xea, 0xb5, 0x18,
	0x02, 0x49, 0x44, 0xf2, 0xb5, 0x18, 0x0f, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44,
	0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x3e,
	0x0a, 0x09, 0x49, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x20, 0xea, 0xb5, 0x18, 0x07, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x31, 0xf2, 0xb5,
	0x18, 0x11, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x52, 0x09, 0x49, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x12, 0x42,
	0x0a, 0x09, 0x49, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x24, 0xea, 0xb5, 0x18, 0x07, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x32, 0xf2, 0xb5,
	0x18, 0x15, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x5f,
	0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x52, 0x09, 0x49, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x32, 0x12, 0x29, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x33, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0b, 0xea, 0xb5, 0x18, 0x07, 0xe5, 0x8f, 0x82, 0xe6, 0x95,
	0xb0, 0x33, 0x52, 0x09, 0x49, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x33, 0x3a, 0x0a, 0x8a,
	0x97, 0x22, 0x02, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0x22, 0xf1, 0x01, 0x0a, 0x14, 0x52, 0x65,
	0x73, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43,
	0x66, 0x67, 0x12, 0x4e, 0x0a, 0x09, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x30, 0xea, 0xb5, 0x18, 0x0c, 0xe9, 0x99, 0x90, 0xe5, 0x88,
	0xb6, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x18, 0x52, 0x45, 0x53, 0x5f, 0x47,
	0x55, 0x49, 0x4c, 0x44, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x09, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x24, 0xea, 0xb5, 0x18, 0x0c, 0xe9, 0x99, 0x90, 0xe5,
	0x88, 0xb6, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xf2, 0xb5, 0x18, 0x0c, 0x45, 0x50, 0x76, 0x70,
	0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0xc8, 0xc1, 0x18, 0x02, 0x52, 0x0a, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2c, 0x0a, 0x08, 0x53, 0x68, 0x6f, 0x77,
	0x44, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c,
	0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0x52, 0x08, 0x53, 0x68,
	0x6f, 0x77, 0x44, 0x65, 0x73, 0x63, 0x3a, 0x15, 0xf0, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x02,
	0x92, 0x97, 0x22, 0x09, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x83, 0x02,
	0x0a, 0x10, 0x52, 0x65, 0x73, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43,
	0x66, 0x67, 0x12, 0x26, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xaf, 0xb9, 0xe5, 0xba, 0x94, 0xe7, 0xad, 0x89,
	0xe7, 0xba, 0xa7, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3b, 0x0a, 0x0b, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x19, 0xea, 0xb5, 0x18, 0x15, 0xe6, 0x88, 0x98, 0xe9, 0x98, 0x9f, 0xe7, 0xb4, 0xaf, 0xe8, 0xae,
	0xa1, 0xe6, 0xb4, 0xbb, 0xe8, 0xb7, 0x83, 0xe5, 0x80, 0xbc, 0x52, 0x0b, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5,
	0x18, 0x12, 0xe6, 0x88, 0x90, 0xe5, 0x91, 0x98, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe4, 0xb8,
	0xaa, 0xe6, 0x95, 0xb0, 0x52, 0x0b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe7, 0xae, 0xa1,
	0xe7, 0x90, 0x86, 0xe5, 0x91, 0x98, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe4, 0xb8, 0xaa, 0xe6,
	0x95, 0xb0, 0x52, 0x0c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x3a, 0x11, 0x8a, 0x97, 0x22, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0xf0, 0x97, 0x22, 0x01, 0x98,
	0x97, 0x22, 0x02, 0x22, 0xa4, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x53, 0x68, 0x6f, 0x77, 0x49, 0x44, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x66, 0x67,
	0x12, 0x40, 0x0a, 0x0c, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe5, 0x88, 0xb7, 0xe6,
	0x96, 0xb0, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x88, 0xe5, 0xa4, 0xa7, 0xe4, 0xba,
	0x8e, 0xef, 0xbc, 0x89, 0x52, 0x0c, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52,
	0x65, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06,
	0xe6, 0xb6, 0x88, 0xe8, 0x80, 0x97, 0x52, 0x08, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x3a, 0x08, 0xf0, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x02, 0x22, 0x76, 0x0a, 0x10, 0x52, 0x65,
	0x73, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x43, 0x66, 0x67, 0x12, 0x20,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08,
	0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x2a, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf,
	0xb0, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x14, 0x8a, 0x97,
	0x22, 0x02, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x02, 0x92, 0x97, 0x22, 0x02,
	0x49, 0x44, 0x22, 0x92, 0x03, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49,
	0x63, 0x6f, 0x6e, 0x43, 0x66, 0x67, 0x12, 0x45, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x29, 0xea, 0xb5, 0x18, 0x0a, 0x49, 0x63,
	0x6f, 0x6e, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x13, 0x52, 0x45, 0x53, 0x5f,
	0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0xc8,
	0xc1, 0x18, 0x01, 0x52, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a,
	0x06, 0x49, 0x63, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e, 0xea,
	0xb5, 0x18, 0x06, 0x49, 0x63, 0x6f, 0x6e, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x02, 0x52, 0x06, 0x49,
	0x63, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52,
	0x04, 0x44, 0x65, 0x73, 0x63, 0x12, 0x2a, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xb5, 0x84, 0xe6,
	0xba, 0x90, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x07, 0x52, 0x65, 0x73, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x4a, 0x0a, 0x07, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x30, 0xea, 0xb5, 0x18, 0x0f, 0xe9, 0xa2, 0x9c, 0xe8, 0x89, 0xb2, 0xe5, 0x80,
	0xbc, 0xe7, 0xb4, 0xa2, 0xe5, 0xbc, 0x95, 0xf2, 0xb5, 0x18, 0x19, 0x52, 0x45, 0x53, 0x5f, 0x47,
	0x55, 0x49, 0x4c, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x52, 0x07, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x23, 0x0a,
	0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xea, 0xb5,
	0x18, 0x09, 0xe9, 0xa2, 0x9c, 0xe8, 0x89, 0xb2, 0xe5, 0x80, 0xbc, 0x52, 0x05, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x09, 0xea, 0xb5, 0x18, 0x05, 0xe7, 0xbb, 0x84, 0x49, 0x44, 0x52, 0x05, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x3a, 0x32, 0x8a, 0x97, 0x22, 0x10, 0x49, 0x63, 0x6f, 0x6e, 0x49, 0x44, 0x2c,
	0x20, 0x49, 0x63, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0xf0, 0x97, 0x22, 0x01, 0x92, 0x97, 0x22,
	0x06, 0x49, 0x63, 0x6f, 0x6e, 0x49, 0x44, 0x92, 0x97, 0x22, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x98, 0x97, 0x22, 0x02, 0x22, 0x59, 0x0a, 0x1b, 0x52, 0x65, 0x73, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x6c, 0x61,
	0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea,
	0xb5, 0x18, 0x0c, 0xe9, 0x9d, 0x9e, 0xe6, 0xb3, 0x95, 0xe5, 0x89, 0x8d, 0xe7, 0xbc, 0x80, 0xc8,
	0xc1, 0x18, 0x01, 0x52, 0x0d, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x22, 0xbe, 0x04, 0x0a, 0x09, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x12, 0x45, 0x0a, 0x0d, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x43, 0x66,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x43,
	0x66, 0x67, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x0d, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x43, 0x66, 0x67, 0x12, 0x51, 0x0a, 0x11, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x66, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x66,
	0x67, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x11, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4a, 0x6f,
	0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x66, 0x67, 0x12, 0x45, 0x0a, 0x0d, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x66, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x66, 0x67, 0x42, 0x04, 0xd2, 0xc1,
	0x18, 0x00, 0x52, 0x0d, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x66,
	0x67, 0x12, 0x5d, 0x0a, 0x15, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x44,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x66, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x44, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x43, 0x66, 0x67, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x15, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x53, 0x68, 0x6f, 0x77, 0x49, 0x44, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x66, 0x67,
	0x12, 0x45, 0x0a, 0x0d, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x43, 0x66,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x43,
	0x66, 0x67, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x0d, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x43, 0x66, 0x67, 0x12, 0x42, 0x0a, 0x0c, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x63, 0x6f, 0x6e, 0x43, 0x66, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x63, 0x6f, 0x6e, 0x43, 0x66, 0x67, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x0c, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x43, 0x66, 0x67, 0x12, 0x66, 0x0a, 0x18, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x6c,
	0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x53, 0x68, 0x6f, 0x77, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x18, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x53, 0x68, 0x6f, 0x77, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x34, 0x0a, 0x08, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x28, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe8, 0xaf, 0xb4, 0xe6, 0x98, 0x8e, 0x52, 0x09,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x97, 0x02, 0x0a, 0x18, 0x52, 0x65,
	0x73, 0x4a, 0x75, 0x6d, 0x70, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x41, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x21, 0xea, 0xb5, 0x18, 0x0c,
	0xe5, 0xaf, 0xb9, 0xe5, 0xba, 0x94, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xf2, 0xb5, 0x18, 0x0d,
	0x52, 0x45, 0x53, 0x5f, 0x4a, 0x55, 0x4d, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0a, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18,
	0x08, 0xe8, 0xb7, 0xb3, 0xe8, 0xbd, 0xac, 0x49, 0x44, 0x52, 0x08, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4a, 0x75,
	0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xb7, 0xb3, 0xe8,
	0xbd, 0xac, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xda, 0xb5, 0x18, 0x01, 0x36, 0x52, 0x06, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x49, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x4a, 0x75, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12,
	0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xb1, 0x8f, 0xe8, 0x94, 0xbd, 0xe8, 0xb7, 0xb3, 0xe8,
	0xbd, 0xac, 0x52, 0x0b, 0x49, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4a, 0x75, 0x6d, 0x70, 0x3a,
	0x12, 0x8a, 0x97, 0x22, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0xf0,
	0x97, 0x22, 0x01, 0x22, 0x85, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x38, 0x42, 0x6f, 0x73, 0x73, 0x41, 0x77, 0x61, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x43, 0x66, 0x67, 0x12, 0x33, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x23, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0xf2, 0xb5, 0x18, 0x19, 0x52, 0x45, 0x53, 0x5f,
	0x42, 0x4f, 0x53, 0x53, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x02, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x8f,
	0x98, 0xe9, 0x87, 0x8f, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x0e, 0x8a, 0x97, 0x22,
	0x02, 0x49, 0x44, 0xf8, 0x97, 0x22, 0x01, 0xf0, 0x97, 0x22, 0x01, 0x22, 0x80, 0x01, 0x0a, 0x1a,
	0x52, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x38, 0x41, 0x77, 0x61, 0x72, 0x64,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x66, 0x67, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x20, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0xf2, 0xb5,
	0x18, 0x16, 0x52, 0x45, 0x53, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x46,
	0x4f, 0x52, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x02, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xb5, 0x18,
	0x06, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x0e,
	0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0xf8, 0x97, 0x22, 0x01, 0xf0, 0x97, 0x22, 0x01, 0x22, 0xae,
	0x01, 0x0a, 0x1c, 0x52, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x38, 0x42, 0x6f,
	0x73, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x66, 0x67, 0x12,
	0x16, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xea, 0xb5, 0x18,
	0x02, 0x49, 0x44, 0x52, 0x02, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x0a, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x0c, 0xe9, 0xa2, 0x84, 0xe8, 0xa7, 0x88, 0xe6, 0xa8, 0xa1, 0xe5, 0x9e, 0x8b, 0x52, 0x0a, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x0b, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16,
	0xea, 0xb5, 0x18, 0x12, 0xe6, 0xa8, 0xa1, 0xe5, 0x9e, 0x8b, 0xe7, 0xbc, 0xa9, 0xe6, 0x94, 0xbe,
	0xe6, 0xaf, 0x94, 0xe4, 0xbe, 0x8b, 0x52, 0x0b, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x3a, 0x0a, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0x22,
	0x83, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x38, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x66, 0x67,
	0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5,
	0x18, 0x06, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0x52, 0x02, 0x49, 0x44, 0x12, 0x3b, 0x0a, 0x0b,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0xe6, 0xa3, 0x80,
	0xe6, 0x9f, 0xa5, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe6, 0x95, 0xb0, 0x52, 0x0b, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x0a, 0x8a, 0x97, 0x22, 0x02, 0x49,
	0x44, 0xf8, 0x97, 0x22, 0x01, 0x22, 0xd9, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x38, 0x41, 0x69, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x41, 0x77, 0x61, 0x72,
	0x64, 0x43, 0x66, 0x67, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x0a, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x31, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x17, 0xea, 0xb5, 0x18, 0x0f, 0xe9, 0x9a, 0x8f, 0xe6, 0x9c, 0xba, 0xe6, 0x96, 0xb9,
	0xe6, 0xa1, 0x88, 0xe7, 0xbb, 0x84, 0xc8, 0xc1, 0x18, 0x02, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x05, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x9d, 0x83, 0xe9, 0x87, 0x8d, 0x52, 0x05,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x0a, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x44, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x0f, 0xea, 0xb5, 0x18, 0x06, 0xe5,
	0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xda, 0xb5, 0x18, 0x01, 0x38, 0x52, 0x0a, 0x44, 0x72, 0x6f, 0x70,
	0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x3a, 0x19, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0x92, 0x97,
	0x22, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0xf8, 0x97, 0x22, 0x01, 0xf0, 0x97, 0x22,
	0x01, 0x22, 0xbe, 0x04, 0x0a, 0x1e, 0x52, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x38, 0x41, 0x69, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x41, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x66, 0x67, 0x12, 0x20, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe7, 0xb4, 0xa2, 0xe5, 0xbc, 0x95, 0x49, 0x44, 0xc8, 0xc1,
	0x18, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba,
	0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x30, 0x0a, 0x0c, 0x4d, 0x69, 0x6e, 0x69, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0x4d, 0x69, 0x6e, 0x69,
	0x49, 0x63, 0x6f, 0x6e, 0x52, 0x0c, 0x4d, 0x69, 0x6e, 0x69, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x36, 0x0a, 0x0e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x49, 0x63, 0x6f, 0x6e,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x0a,
	0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x0e, 0x4d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2d, 0x0a, 0x0b, 0x42, 0x69,
	0x67, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0b, 0xea, 0xb5, 0x18, 0x07, 0x42, 0x69, 0x67, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x0b, 0x42, 0x69,
	0x67, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x0b, 0x42, 0x6f, 0x78,
	0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xae, 0x9d, 0xe7, 0xae, 0xb1, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87,
	0x52, 0x0b, 0x42, 0x6f, 0x78, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x43, 0x0a,
	0x12, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe6,
	0x97, 0xa0, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0xe8, 0xa1, 0xa8, 0xe7, 0x8e, 0xb0, 0x52, 0x12,
	0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x12, 0x30, 0x0a, 0x08, 0x44, 0x72, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1,
	0xe5, 0x90, 0x8d, 0xe5, 0xad, 0x97, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x08, 0x44, 0x72, 0x6f, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x63, 0x6f,
	0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18,
	0x12, 0xe6, 0xa8, 0xa1, 0xe5, 0x9e, 0x8b, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0xe8, 0xb7, 0xaf,
	0xe5, 0xbe, 0x84, 0x52, 0x0d, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x3a, 0x0a, 0x0f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x53, 0x74, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x0c, 0xe5, 0x93, 0x81, 0xe9, 0x98, 0xb6, 0xe9, 0xa2, 0x9c, 0xe8, 0x89, 0xb2, 0x52, 0x0f, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x3a, 0x12,
	0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0xf8, 0x97, 0x22, 0x01, 0xf0, 0x97, 0x22, 0x01, 0x98, 0x97,
	0x22, 0x02, 0x22, 0x6f, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x41, 0x69, 0x72, 0x64, 0x72, 0x6f, 0x70,
	0x41, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x47, 0x4c, 0x43, 0x66, 0x67, 0x12,
	0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18,
	0x02, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x07, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x47, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe9, 0x80, 0xbb, 0xe8, 0xbe, 0x91, 0xe8, 0x93, 0x9d, 0xe5, 0x9b, 0xbe, 0x52, 0x07,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x47, 0x4c, 0x3a, 0x0a, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0xf8,
	0x97, 0x22, 0x01, 0x22, 0xc0, 0x01, 0x0a, 0x14, 0x49, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3a, 0x0a, 0x09,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x1c, 0xea, 0xb5, 0x18, 0x00, 0xf2, 0xb5, 0x18, 0x14, 0x52, 0x45, 0x53, 0x5f, 0x49, 0x45, 0x44,
	0x52, 0x4f, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x09, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x0b, 0xea, 0xb5, 0x18, 0x07, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x31, 0x52, 0x0f,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x12,
	0x35, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0b, 0xea, 0xb5, 0x18, 0x07, 0xe5, 0x8f,
	0x82, 0xe6, 0x95, 0xb0, 0x32, 0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x22, 0x90, 0x01, 0x0a, 0x0e, 0x49, 0x65, 0x44, 0x72, 0x6f,
	0x70, 0x53, 0x75, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x26, 0x0a, 0x0a, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xea,
	0xb5, 0x18, 0x02, 0x49, 0x44, 0x52, 0x0a, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49,
	0x44, 0x12, 0x56, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x52, 0x65, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x49, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0f, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x9d,
	0xa1, 0xe4, 0xbb, 0xb6, 0xda, 0xb5, 0x18, 0x01, 0x32, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xf2, 0x02, 0x0a, 0x11, 0x52, 0x65,
	0x73, 0x49, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12,
	0x30, 0x0a, 0x0a, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe5, 0x89, 0xa7, 0xe6, 0x9c, 0xac, 0x49,
	0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x0a, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x49,
	0x44, 0x12, 0x42, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50,
	0x4c, 0x41, 0x59, 0x4d, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x42, 0x0d, 0xea, 0xb5, 0x18,
	0x09, 0x50, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x49, 0x44, 0x52, 0x09, 0x50, 0x6c, 0x61, 0x79,
	0x4d, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x11, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x49, 0x44, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0xe9, 0x98, 0xb5, 0xe5, 0xae, 0xb9, 0x49, 0x44, 0xe8, 0xb5,
	0xb7, 0xe5, 0xa7, 0x8b, 0x52, 0x11, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x49, 0x44, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x3c, 0x0a, 0x0f, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x44, 0x45, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0xe9, 0x98, 0xb5, 0xe5, 0xae, 0xb9, 0x49, 0x44, 0xe7, 0xbb,
	0x93, 0xe6, 0x9d, 0x9f, 0x52, 0x0f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x49, 0x44, 0x45, 0x6e, 0x64, 0x12, 0x53, 0x0a, 0x0c, 0x44, 0x72, 0x6f, 0x70, 0x53, 0x75, 0x62,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x52, 0x65,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x53, 0x75, 0x62, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x8a, 0x95, 0xe6, 0x94, 0xbe,
	0xe7, 0xad, 0x96, 0xe7, 0x95, 0xa5, 0xda, 0xb5, 0x18, 0x02, 0x31, 0x36, 0x52, 0x0c, 0x44, 0x72,
	0x6f, 0x70, 0x53, 0x75, 0x62, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x3a, 0x12, 0x8a, 0x97, 0x22, 0x0a,
	0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x49, 0x44, 0xf8, 0x97, 0x22, 0x01, 0x22, 0xd5,
	0x05, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x49, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x43, 0x66, 0x67, 0x12, 0x30, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe7, 0xad,
	0x96, 0xe7, 0x95, 0xa5, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x0a, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe4, 0xbd,
	0xbf, 0xe7, 0x94, 0xa8, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x52, 0x08, 0x55, 0x73, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x43, 0x44, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0xea, 0xb5, 0x18, 0x0c, 0xe9, 0x97, 0xb4,
	0xe9, 0x9a, 0x94, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x12, 0x52, 0x45, 0x53,
	0x5f, 0x49, 0x45, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x43, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52,
	0x09, 0x55, 0x73, 0x65, 0x43, 0x44, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x55, 0x73,
	0x65, 0x43, 0x44, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x0c, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x97, 0xb4, 0xe9, 0x9a, 0x94,
	0x52, 0x0a, 0x55, 0x73, 0x65, 0x43, 0x44, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x0b,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x2b, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe6, 0x9d, 0xa1,
	0xe4, 0xbb, 0xb6, 0xf2, 0xb5, 0x18, 0x17, 0x52, 0x45, 0x53, 0x5f, 0x49, 0x45, 0x44, 0x52, 0x4f,
	0x50, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0b,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0d, 0x42, 0x1b, 0xea, 0xb5, 0x18, 0x12, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe6, 0x9d, 0xa1,
	0xe4, 0xbb, 0xb6, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xda, 0xb5, 0x18, 0x01, 0x34, 0x52, 0x0c,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x4a, 0x0a, 0x0a,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x2a, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0xbb, 0x88, 0xe6, 0xad, 0xa2, 0xe6, 0x9d, 0xa1, 0xe4,
	0xbb, 0xb6, 0xf2, 0xb5, 0x18, 0x16, 0x52, 0x45, 0x53, 0x5f, 0x49, 0x45, 0x44, 0x52, 0x4f, 0x50,
	0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0a, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x1b, 0xea,
	0xb5, 0x18, 0x12, 0xe7, 0xbb, 0x88, 0xe6, 0xad, 0xa2, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe5,
	0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xda, 0xb5, 0x18, 0x01, 0x34, 0x52, 0x0b, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x4a, 0x0a, 0x0a, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2a, 0xea, 0xb5, 0x18,
	0x0c, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18,
	0x16, 0x52, 0x45, 0x53, 0x5f, 0x49, 0x45, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x45, 0x46, 0x46, 0x45,
	0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0a, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x95,
	0x88, 0xe6, 0x9e, 0x9c, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xda, 0xb5, 0x18, 0x01, 0x38, 0x52,
	0x0b, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x34, 0x0a, 0x0c,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe6, 0xac,
	0xa1, 0xe6, 0x95, 0xb0, 0x52, 0x0c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x3a, 0x12, 0x8a, 0x97, 0x22, 0x0a, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x49, 0x44, 0xf8, 0x97, 0x22, 0x01, 0x22, 0x72, 0x0a, 0x1c, 0x52, 0x65, 0x73, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x06, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0xc8, 0xc1, 0x18, 0x01, 0x52, 0x06, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xea, 0xb5, 0x18, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x0e, 0xf0, 0x97, 0x22, 0x01,
	0x8a, 0x97, 0x22, 0x06, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x22, 0xdd, 0x01, 0x0a, 0x14, 0x52,
	0x65, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x07, 0x4e, 0x75, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x95, 0xb0, 0xe5, 0xad, 0x97,
	0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x07, 0x4e, 0x75, 0x6d, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x53, 0x74, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xad, 0x97, 0xe6, 0xaf, 0x8d,
	0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0x52, 0x07, 0x53, 0x74, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x2b, 0x0a, 0x06, 0x45, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe7, 0x9f, 0xad, 0xe5, 0x90,
	0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x06, 0x45, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x06,
	0x43, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xea, 0xb5,
	0x18, 0x0f, 0xe4, 0xb8, 0xad, 0xe6, 0x96, 0x87, 0xe7, 0x9f, 0xad, 0xe5, 0x90, 0x8d, 0xe7, 0xa7,
	0xb0, 0x52, 0x06, 0x43, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x0f, 0xf0, 0x97, 0x22, 0x01, 0x8a,
	0x97, 0x22, 0x07, 0x4e, 0x75, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x07, 0x4c,
	0x62, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x57, 0x0a, 0x10, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41,
	0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x66, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x10, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x66, 0x67, 0x12,
	0x49, 0x0a, 0x0d, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x66, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x52, 0x65, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x0d, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x66, 0x67, 0x22, 0x8d, 0x02, 0x0a, 0x1b, 0x52,
	0x65, 0x73, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x0b, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0x52, 0x0b, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x30, 0x0a, 0x0a, 0x50, 0x6f, 0x70, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe5, 0x9f, 0xba, 0xe7, 0xa1, 0x80, 0xe4, 0xba, 0xba, 0xe5, 0x8f, 0xa3, 0x52, 0x0a,
	0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0d, 0x43, 0x61,
	0x72, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x9f, 0xba, 0xe7, 0xa1, 0x80, 0xe5, 0x95, 0x86,
	0xe5, 0xba, 0x97, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0x52, 0x0d, 0x43, 0x61, 0x72, 0x64, 0x50,
	0x6f, 0x6f, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x33, 0x0a, 0x0a, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x45, 0x78, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0xea, 0xb5,
	0x18, 0x0f, 0xe4, 0xb8, 0x8b, 0xe4, 0xb8, 0x80, 0xe7, 0xba, 0xa7, 0xe7, 0xbb, 0x8f, 0xe9, 0xaa,
	0x8c, 0x52, 0x0a, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x45, 0x78, 0x70, 0x3a, 0x1b, 0x8a,
	0x97, 0x22, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0xf8, 0x97,
	0x22, 0x01, 0xf0, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x02, 0x22, 0xc0, 0x01, 0x0a, 0x15, 0x52,
	0x65, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x69, 0x6e, 0x12, 0x3e, 0x0a, 0x08, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x22, 0xea, 0xb5, 0x18, 0x08, 0xe7, 0xb3, 0xbb, 0xe7,
	0xbb, 0x9f, 0x49, 0x44, 0xf2, 0xb5, 0x18, 0x12, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x5f, 0x55, 0x49, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x08, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x09, 0x4a, 0x75, 0x6d, 0x70, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xb7, 0xb3,
	0xe8, 0xbd, 0xac, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x52, 0x09, 0x4a, 0x75, 0x6d, 0x70, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x25, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x0f, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xda,
	0xb5, 0x18, 0x01, 0x34, 0x52, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x10, 0x92, 0x97, 0x22,
	0x08, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0x22, 0x8a, 0x03,
	0x0a, 0x16, 0x52, 0x65, 0x73, 0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x67, 0x43, 0x66,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x45, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x29, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x15, 0x52, 0x45, 0x53, 0x5f, 0x4c, 0x4f, 0x41, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x08, 0x73,
	0x68, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x4d,
	0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea,
	0xb5, 0x18, 0x0c, 0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba, 0xe4, 0xb8, 0x8b, 0xe9, 0x99, 0x90, 0x52,
	0x0c, 0x73, 0x68, 0x6f, 0x77, 0x4d, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x34, 0x0a,
	0x0c, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x61, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba, 0xe4,
	0xb8, 0x8a, 0xe9, 0x99, 0x90, 0x52, 0x0c, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x61, 0x78, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x54, 0x65, 0x78, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x11, 0xe9, 0x9a,
	0x8f, 0xe6, 0x9c, 0xba, 0xe6, 0x96, 0x87, 0xe6, 0x9c, 0xac, 0xe7, 0xbb, 0x84, 0x49, 0x44, 0x52,
	0x0b, 0x54, 0x65, 0x78, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x0e,
	0x42, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0xe8, 0x83, 0x8c, 0xe6, 0x99, 0xaf,
	0xe5, 0x9b, 0xbe, 0xe7, 0xbb, 0x84, 0x49, 0x44, 0x52, 0x0e, 0x42, 0x67, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x05, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0xa4, 0x87,
	0xe6, 0xb3, 0xa8, 0x52, 0x05, 0x45, 0x78, 0x74, 0x72, 0x61, 0x3a, 0x0e, 0x8a, 0x97, 0x22, 0x02,
	0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x02, 0x22, 0x88, 0x02, 0x0a, 0x18, 0x52,
	0x65, 0x73, 0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x78, 0x74, 0x43, 0x66, 0x67,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0x49,
	0x44, 0x52, 0x02, 0x49, 0x44, 0x12, 0x37, 0x0a, 0x0b, 0x54, 0x65, 0x78, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x11,
	0xe9, 0x9a, 0x8f, 0xe6, 0x9c, 0xba, 0xe6, 0x96, 0x87, 0xe6, 0x9c, 0xac, 0xe7, 0xbb, 0x84, 0x69,
	0x64, 0x52, 0x0b, 0x54, 0x65, 0x78, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x24,
	0x0a, 0x06, 0x54, 0x65, 0x78, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c,
	0xea, 0xb5, 0x18, 0x08, 0xe6, 0x96, 0x87, 0xe6, 0x9c, 0xac, 0x69, 0x64, 0x52, 0x06, 0x54, 0x65,
	0x78, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x9d, 0x83, 0xe9, 0x87, 0x8d,
	0x52, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x32, 0x0a, 0x0b, 0x54, 0x65, 0x78, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea,
	0xb5, 0x18, 0x0c, 0xe6, 0x96, 0x87, 0xe6, 0x9c, 0xac, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0x52,
	0x0b, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3a, 0x17, 0xf0, 0x97,
	0x22, 0x01, 0x92, 0x97, 0x22, 0x0f, 0x49, 0x44, 0x2c, 0x20, 0x54, 0x65, 0x78, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x22, 0x8f, 0x02, 0x0a, 0x1b, 0x52, 0x65, 0x73, 0x4c, 0x6f, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x42, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x66, 0x67, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0x49, 0x44, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x0e, 0x42, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x12, 0xea, 0xb5, 0x18,
	0x0e, 0xe8, 0x83, 0x8c, 0xe6, 0x99, 0xaf, 0xe5, 0x9b, 0xbe, 0xe7, 0xbb, 0x84, 0x49, 0x44, 0x52,
	0x0e, 0x42, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12,
	0x26, 0x0a, 0x07, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe5, 0x9b, 0xbe, 0xe7, 0x89, 0x87, 0x49, 0x44, 0x52, 0x07,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x9d, 0x83,
	0xe9, 0x87, 0x8d, 0x52, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x9b, 0xbe, 0xe7, 0x89, 0x87, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84,
	0x52, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x3a, 0x1a, 0x92, 0x97, 0x22,
	0x12, 0x49, 0x44, 0x2c, 0x20, 0x42, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0x22, 0xcb, 0x02, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x51,
	0x74, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x16, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xea, 0xb5, 0x18,
	0x02, 0x49, 0x44, 0x52, 0x02, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x22, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x88, 0x86, 0xe7, 0xb1,
	0xbb, 0xf2, 0xb5, 0x18, 0x14, 0x52, 0x45, 0x53, 0x5f, 0x51, 0x54, 0x53, 0x5f, 0x50, 0x41, 0x43,
	0x4b, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea,
	0xb5, 0x18, 0x06, 0xe5, 0x90, 0x8d, 0xe5, 0xad, 0x97, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea,
	0xb5, 0x18, 0x06, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x04, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x45, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x21, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0x87, 0xaa, 0xe5, 0x8a,
	0xa8, 0xe4, 0xb8, 0x8b, 0xe8, 0xbd, 0xbd, 0xf2, 0xb5, 0x18, 0x0d, 0x52, 0x45, 0x53, 0x5f, 0x41,
	0x4e, 0x4f, 0x4e, 0x59, 0x4d, 0x4f, 0x55, 0x53, 0x52, 0x0c, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x49, 0x0a, 0x0e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x55,
	0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x21,
	0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x85, 0x81, 0xe8, 0xae, 0xb8, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4,
	0xf2, 0xb5, 0x18, 0x0d, 0x52, 0x45, 0x53, 0x5f, 0x41, 0x4e, 0x4f, 0x4e, 0x59, 0x4d, 0x4f, 0x55,
	0x53, 0x52, 0x0e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x3a, 0x12, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0x92, 0x97, 0x22, 0x04, 0x54, 0x79, 0x70,
	0x65, 0xf0, 0x97, 0x22, 0x01, 0x22, 0x61, 0x0a, 0x0b, 0x50, 0x76, 0x70, 0x47, 0x61, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x12, 0x52, 0x0a, 0x0d, 0x41, 0x49, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x52, 0x65,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x41, 0x49, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x0d, 0x41, 0x49, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x22, 0xae, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x73,
	0x41, 0x49, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x4d, 0x61,
	0x78, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x19, 0xea, 0xb5, 0x18, 0x15, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe5, 0xbb, 0xb6, 0xe8, 0xbf,
	0x9f, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe7, 0xa7, 0x92, 0x52, 0x0b, 0x4d, 0x61, 0x78, 0x44,
	0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x63, 0x12, 0x3b, 0x0a, 0x0e, 0x49, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe5, 0xbb, 0xb6, 0xe8, 0xbf, 0x9f, 0xe5, 0xbf, 0xbd, 0xe7, 0x95,
	0xa5, 0xe7, 0xa7, 0x92, 0x52, 0x0e, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x53, 0x65, 0x63, 0x3a, 0x13, 0x8a, 0x97, 0x22, 0x0b, 0x4d, 0x61, 0x78, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x53, 0x65, 0x63, 0x88, 0xb5, 0x18, 0x01, 0x22, 0xfe, 0x01, 0x0a, 0x19, 0x52, 0x65,
	0x73, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x07, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x8e, 0x92, 0xe5, 0x90, 0x8d,
	0xe4, 0xb8, 0x8a, 0xe9, 0x99, 0x90, 0x52, 0x07, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x69, 0x6e, 0x12,
	0x2a, 0x0a, 0x07, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x8e, 0x92, 0xe5, 0x90, 0x8d, 0xe4, 0xb8, 0x8b, 0xe9,
	0x99, 0x90, 0x52, 0x07, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x61, 0x78, 0x12, 0x28, 0x0a, 0x08, 0x53,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea,
	0xb5, 0x18, 0x08, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0x49, 0x44, 0x52, 0x08, 0x53, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x3d, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x21, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0x8e, 0xa9,
	0xe6, 0xb3, 0x95, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x0d, 0x43, 0x4f, 0x4d,
	0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x08, 0x47, 0x61, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x3a, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x22, 0x96, 0x01, 0x0a, 0x16, 0x52,
	0x65, 0x73, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x43, 0x66, 0x67, 0x12, 0x3b, 0x0a, 0x08, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0xea, 0xb5, 0x18, 0x08, 0xe7, 0xb3, 0xbb,
	0xe7, 0xbb, 0x9f, 0x49, 0x44, 0xf2, 0xb5, 0x18, 0x0f, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x08, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x49, 0x44, 0x12, 0x29, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe4, 0xbc, 0x98, 0xe5, 0x85, 0x88,
	0xe7, 0xba, 0xa7, 0x52, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x3a, 0x14, 0x8a,
	0x97, 0x22, 0x08, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0x98,
	0x97, 0x22, 0x02, 0x22, 0x51, 0x0a, 0x15, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x61, 0x6e, 0x6b,
	0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x66, 0x67, 0x12, 0x2e, 0x0a, 0x0b,
	0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0x49, 0x44, 0x52,
	0x0b, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x3a, 0x08, 0xf0, 0x97,
	0x22, 0x01, 0x98, 0x97, 0x22, 0x02, 0x22, 0x65, 0x0a, 0x09, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x12, 0x58, 0x0a, 0x12, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x12, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x22, 0xf2, 0x18,
	0x0a, 0x14, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1c, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0x49, 0x44,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x51, 0x0a, 0x08, 0x47, 0x72, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x52, 0x65, 0x73, 0x47, 0x72, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x1f, 0xea, 0xb5,
	0x18, 0x0c, 0xe7, 0xbd, 0x91, 0xe6, 0xa0, 0xbc, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5,
	0x18, 0x0b, 0x52, 0x65, 0x73, 0x47, 0x72, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x47,
	0x72, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x47, 0x72, 0x69, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97, 0xe7, 0xbd, 0x91, 0xe6,
	0xa0, 0xbc, 0xe5, 0xae, 0xbd, 0xe5, 0xba, 0xa6, 0x52, 0x0f, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x47, 0x72, 0x69, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x42, 0x0a, 0x10, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x47, 0x72, 0x69, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97, 0xe7,
	0xbd, 0x91, 0xe6, 0xa0, 0xbc, 0xe9, 0xab, 0x98, 0xe5, 0xba, 0xa6, 0x52, 0x10, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x47, 0x72, 0x69, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x4c, 0x0a,
	0x12, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x47, 0x72, 0x69, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe6,
	0x88, 0x98, 0xe6, 0x96, 0x97, 0xe7, 0xbd, 0x91, 0xe6, 0xa0, 0xbc, 0xe5, 0x8d, 0x95, 0xe4, 0xbd,
	0x8d, 0xe5, 0xa4, 0xa7, 0xe5, 0xb0, 0x8f, 0x52, 0x12, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x47,
	0x72, 0x69, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x4b, 0x0a, 0x13, 0x41,
	0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe5, 0xa4,
	0x87, 0xe6, 0x88, 0x98, 0xe5, 0x8c, 0xba, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0xe5, 0xa4, 0xa7,
	0xe5, 0xb0, 0x8f, 0x52, 0x13, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x43, 0x65, 0x6c, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x41, 0x72, 0x74, 0x69,
	0x73, 0x74, 0x42, 0x61, 0x73, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x18, 0xea, 0xb5, 0x18, 0x14, 0xe7, 0xbe, 0x8e, 0xe6, 0x9c, 0xaf, 0xe5,
	0x9f, 0xba, 0xe7, 0xa1, 0x80, 0xe5, 0x9c, 0xba, 0xe6, 0x99, 0xaf, 0x49, 0x44, 0x52, 0x11, 0x41,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x42, 0x61, 0x73, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x44,
	0x12, 0x3e, 0x0a, 0x0e, 0x56, 0x69, 0x65, 0x77, 0x43, 0x6c, 0x69, 0x70, 0x52, 0x61, 0x64, 0x69,
	0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe8, 0xa7,
	0x86, 0xe9, 0x87, 0x8e, 0xe8, 0xa3, 0x81, 0xe5, 0x89, 0xaa, 0xe5, 0x8d, 0x8a, 0xe5, 0xbe, 0x84,
	0x52, 0x0e, 0x56, 0x69, 0x65, 0x77, 0x43, 0x6c, 0x69, 0x70, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73,
	0x12, 0x38, 0x0a, 0x0e, 0x48, 0x70, 0x42, 0x61, 0x72, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x4c, 0x69,
	0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xa1,
	0x80, 0xe6, 0x9d, 0xa1, 0xe5, 0x88, 0xbb, 0xe5, 0xba, 0xa6, 0x52, 0x0e, 0x48, 0x70, 0x42, 0x61,
	0x72, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x45, 0x0a, 0x10, 0x41, 0x74,
	0x6f, 0x72, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2,
	0xe7, 0xa2, 0xb0, 0xe6, 0x92, 0x9e, 0xe7, 0x9b, 0x92, 0xe5, 0x8d, 0x8a, 0xe5, 0xbe, 0x84, 0x52,
	0x10, 0x41, 0x74, 0x6f, 0x72, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x52, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x41, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x42, 0x17, 0xea, 0xb5, 0x18, 0x13, 0xe6, 0x88,
	0x98, 0xe6, 0x96, 0x97, 0xe5, 0x85, 0xac, 0xe5, 0xbc, 0x8f, 0xe5, 0xb8, 0xb8, 0xe9, 0x87, 0x8f,
	0x41, 0x52, 0x0d, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x41,
	0x12, 0x3d, 0x0a, 0x0d, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x42, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x42, 0x17, 0xea, 0xb5, 0x18, 0x13, 0xe6, 0x88, 0x98,
	0xe6, 0x96, 0x97, 0xe5, 0x85, 0xac, 0xe5, 0xbc, 0x8f, 0xe5, 0xb8, 0xb8, 0xe9, 0x87, 0x8f, 0x42,
	0x52, 0x0d, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x12,
	0x3d, 0x0a, 0x0d, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x43,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x42, 0x17, 0xea, 0xb5, 0x18, 0x13, 0xe6, 0x88, 0x98, 0xe6,
	0x96, 0x97, 0xe5, 0x85, 0xac, 0xe5, 0xbc, 0x8f, 0xe5, 0xb8, 0xb8, 0xe9, 0x87, 0x8f, 0x43, 0x52,
	0x0d, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x43, 0x12, 0x5e,
	0x0a, 0x1b, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x48, 0x75, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe5, 0x8f, 0x97, 0xe5, 0x87, 0xbb, 0xe5,
	0x9b, 0x9e, 0xe8, 0x93, 0x9d, 0xe6, 0x8a, 0xa4, 0xe7, 0x9b, 0xbe, 0xe6, 0xaf, 0x94, 0xe4, 0xbe,
	0x8b, 0x52, 0x1b, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x48, 0x75, 0x72, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x65,
	0x0a, 0x0d, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x41, 0x50, 0x46, 0x75, 0x6e, 0x63, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x52, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x41, 0x50, 0x46, 0x75, 0x6e, 0x63,
	0x42, 0x24, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0xb3, 0x95, 0xe5, 0xbc, 0xba, 0xe7, 0xae, 0x97, 0xe6,
	0xb3, 0x95, 0xf2, 0xb5, 0x18, 0x10, 0x52, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61,
	0x41, 0x50, 0x46, 0x75, 0x6e, 0x63, 0x52, 0x0d, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x41,
	0x50, 0x46, 0x75, 0x6e, 0x63, 0x12, 0x4e, 0x0a, 0x16, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x88, 0x98, 0xe6, 0x96,
	0x97, 0xe9, 0x95, 0x9c, 0xe5, 0xa4, 0xb4, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x16, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x17, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0xb8, 0x83, 0xe9,
	0x98, 0xb5, 0xe9, 0x95, 0x9c, 0xe5, 0xa4, 0xb4, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x17,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x58, 0x0a, 0x18, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x47, 0x72, 0x69, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe6,
	0x88, 0x98, 0xe6, 0x96, 0x97, 0xe7, 0xbd, 0x91, 0xe6, 0xa0, 0xbc, 0xe8, 0x83, 0x8c, 0xe6, 0x99,
	0xaf, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x18, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x47,
	0x72, 0x69, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x4c, 0x0a, 0x12, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x47, 0x72, 0x69, 0x64, 0x42,
	0x6c, 0x75, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xea,
	0xb5, 0x18, 0x18, 0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97, 0xe7, 0xbd, 0x91, 0xe6, 0xa0, 0xbc, 0xe8,
	0x93, 0x9d, 0xe8, 0x89, 0xb2, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x12, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x47, 0x72, 0x69, 0x64, 0x42, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x64, 0x0a, 0x1b, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x47, 0x72, 0x69, 0x64, 0x47, 0x72, 0x65,
	0x79, 0x48, 0x69, 0x67, 0x68, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xea, 0xb5, 0x18, 0x1e, 0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97,
	0xe7, 0xbd, 0x91, 0xe6, 0xa0, 0xbc, 0xe7, 0x81, 0xb0, 0xe8, 0x89, 0xb2, 0xe9, 0xab, 0x98, 0xe4,
	0xba, 0xae, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x1b, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x47, 0x72, 0x69, 0x64, 0x47, 0x72, 0x65, 0x79, 0x48, 0x69, 0x67, 0x68, 0x4c, 0x69, 0x67, 0x68,
	0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x52, 0x0a, 0x15, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x47,
	0x72, 0x69, 0x64, 0x52, 0x65, 0x64, 0x47, 0x72, 0x69, 0x64, 0x50, 0x61, 0x74, 0x68, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97,
	0xe7, 0xbd, 0x91, 0xe6, 0xa0, 0xbc, 0xe7, 0xba, 0xa2, 0xe8, 0x89, 0xb2, 0xe8, 0xb7, 0xaf, 0xe5,
	0xbe, 0x84, 0x52, 0x15, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x47, 0x72, 0x69, 0x64, 0x52, 0x65,
	0x64, 0x47, 0x72, 0x69, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x58, 0x0a, 0x18, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x47, 0x72, 0x69, 0x64, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x69,
	0x64, 0x50, 0x61, 0x74, 0x68, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xea, 0xb5, 0x18,
	0x18, 0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97, 0xe7, 0xbd, 0x91, 0xe6, 0xa0, 0xbc, 0xe9, 0xbb, 0x84,
	0xe8, 0x89, 0xb2, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x18, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x47, 0x72, 0x69, 0x64, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x69, 0x64, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x56, 0x0a, 0x17, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x47, 0x72, 0x69, 0x64, 0x47, 0x72, 0x65, 0x79, 0x50, 0x61, 0x74, 0x68, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe5, 0xa4, 0x87, 0xe6, 0x88, 0x98,
	0xe7, 0xbd, 0x91, 0xe6, 0xa0, 0xbc, 0xe7, 0x81, 0xb0, 0xe8, 0x89, 0xb2, 0xe8, 0xb7, 0xaf, 0xe5,
	0xbe, 0x84, 0x52, 0x17, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x47,
	0x72, 0x69, 0x64, 0x47, 0x72, 0x65, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x6e, 0x0a, 0x20, 0x41,
	0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x47, 0x72, 0x69, 0x64, 0x47, 0x72,
	0x65, 0x79, 0x48, 0x69, 0x67, 0x68, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xea, 0xb5, 0x18, 0x1e, 0xe5, 0xa4, 0x87, 0xe6, 0x88,
	0x98, 0xe7, 0xbd, 0x91, 0xe6, 0xa0, 0xbc, 0xe7, 0x81, 0xb0, 0xe8, 0x89, 0xb2, 0xe9, 0xab, 0x98,
	0xe4, 0xba, 0xae, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x20, 0x41, 0x6c, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x47, 0x72, 0x69, 0x64, 0x47, 0x72, 0x65, 0x79, 0x48, 0x69,
	0x67, 0x68, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x46, 0x0a, 0x13, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x32, 0x48, 0x69, 0x64, 0x65, 0x41, 0x67, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x10, 0xe5, 0x8d,
	0x87, 0x32, 0xe6, 0x98, 0x9f, 0xe9, 0x9a, 0x90, 0xe8, 0x97, 0x8f, 0x61, 0x67, 0x65, 0x52, 0x13,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x32, 0x48, 0x69, 0x64, 0x65, 0x41, 0x67, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x44, 0x0a, 0x12, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x32, 0x46,
	0x6c, 0x79, 0x41, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x14, 0xea, 0xb5, 0x18, 0x10, 0xe5, 0x8d, 0x87, 0x32, 0xe6, 0x98, 0x9f, 0xe9, 0xa3, 0x9e, 0xe5,
	0xa4, 0xa9, 0x61, 0x67, 0x65, 0x52, 0x12, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x32, 0x46,
	0x6c, 0x79, 0x41, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x46, 0x0a, 0x13, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x32, 0x42, 0x6f, 0x72, 0x6e, 0x41, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x10, 0xe5, 0x8d, 0x87, 0x32,
	0xe6, 0x98, 0x9f, 0xe5, 0x87, 0xba, 0xe7, 0x94, 0x9f, 0x61, 0x67, 0x65, 0x52, 0x13, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x32, 0x42, 0x6f, 0x72, 0x6e, 0x41, 0x67, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x46, 0x0a, 0x13, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x33, 0x48, 0x69, 0x64,
	0x65, 0x41, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14,
	0xea, 0xb5, 0x18, 0x10, 0xe5, 0x8d, 0x87, 0x33, 0xe6, 0x98, 0x9f, 0xe9, 0x9a, 0x90, 0xe8, 0x97,
	0x8f, 0x61, 0x67, 0x65, 0x52, 0x13, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x33, 0x48, 0x69,
	0x64, 0x65, 0x41, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x44, 0x0a, 0x12, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x33, 0x46, 0x6c, 0x79, 0x41, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x10, 0xe5, 0x8d, 0x87, 0x33, 0xe6,
	0x98, 0x9f, 0xe9, 0xa3, 0x9e, 0xe5, 0xa4, 0xa9, 0x61, 0x67, 0x65, 0x52, 0x12, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x33, 0x46, 0x6c, 0x79, 0x41, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x46, 0x0a, 0x13, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x33, 0x42, 0x6f, 0x72, 0x6e, 0x41,
	0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5,
	0x18, 0x10, 0xe5, 0x8d, 0x87, 0x33, 0xe6, 0x98, 0x9f, 0xe5, 0x87, 0xba, 0xe7, 0x94, 0x9f, 0x61,
	0x67, 0x65, 0x52, 0x13, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x33, 0x42, 0x6f, 0x72, 0x6e,
	0x41, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x4a, 0x0a, 0x14, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x46, 0x6c, 0x69, 0x70, 0x57, 0x68, 0x65, 0x6e, 0x4e, 0x6f, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x08, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x9c, 0xba, 0xe6, 0x99,
	0xaf, 0xe5, 0xae, 0xa2, 0xe5, 0x9c, 0xba, 0xe7, 0xbf, 0xbb, 0xe8, 0xbd, 0xac, 0x52, 0x14, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x46, 0x6c, 0x69, 0x70, 0x57, 0x68, 0x65, 0x6e, 0x4e, 0x6f, 0x74, 0x48,
	0x6f, 0x73, 0x74, 0x12, 0x83, 0x01, 0x0a, 0x13, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x70,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x30, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x94, 0xbb, 0xe5, 0x87, 0xbb, 0xe5, 0x9b,
	0x9e, 0xe8, 0x93, 0x9d, 0xe7, 0xae, 0x97, 0xe6, 0xb3, 0x95, 0xf2, 0xb5, 0x18, 0x16, 0x52, 0x65,
	0x73, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x70, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x0d, 0x47, 0x61, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x29, 0xea, 0xb5, 0x18, 0x0f, 0xe6, 0xb8, 0xb8, 0xe6, 0x88, 0x8f, 0xe6, 0xa8, 0xa1, 0xe5,
	0xbc, 0x8f, 0xe7, 0xbb, 0x84, 0xf2, 0xb5, 0x18, 0x12, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x52, 0x0d, 0x47, 0x61, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x4c, 0x0a, 0x12, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x70, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe6, 0x94, 0xbb, 0xe5,
	0x87, 0xbb, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0xb7,
	0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x12, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x54, 0x69, 0x70, 0x50, 0x61, 0x74, 0x68, 0x12, 0x45, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x57, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x25,
	0x20, 0x03, 0x28, 0x0d, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xbf, 0x9e, 0xe8, 0x83, 0x9c,
	0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xda, 0xb5, 0x18, 0x01, 0x34, 0x52, 0x12, 0x43, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x57, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x3e, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x57, 0x69, 0x6e,
	0x41, 0x67, 0x65, 0x18, 0x26, 0x20, 0x03, 0x28, 0x09, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x09, 0xe8,
	0xbf, 0x9e, 0xe8, 0x83, 0x9c, 0x41, 0x47, 0x45, 0xda, 0xb5, 0x18, 0x01, 0x34, 0x52, 0x10, 0x43,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x57, 0x69, 0x6e, 0x41, 0x67, 0x65, 0x12,
	0x47, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75,
	0x73, 0x57, 0x69, 0x6e, 0x41, 0x67, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xea,
	0xb5, 0x18, 0x0f, 0xe7, 0xbb, 0x88, 0xe6, 0xad, 0xa2, 0xe8, 0xbf, 0x9e, 0xe8, 0x83, 0x9c, 0x41,
	0x47, 0x45, 0x52, 0x14, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f,
	0x75, 0x73, 0x57, 0x69, 0x6e, 0x41, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x4e, 0x61, 0x76, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x50, 0x61, 0x74, 0x68, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c,
	0xea, 0xb5, 0x18, 0x18, 0xe5, 0xaf, 0xbb, 0xe8, 0xb7, 0xaf, 0xe8, 0xb0, 0x83, 0xe8, 0xaf, 0x95,
	0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x0c, 0x4e, 0x61,
	0x76, 0x44, 0x65, 0x62, 0x75, 0x67, 0x50, 0x61, 0x74, 0x68, 0x12, 0x70, 0x0a, 0x21, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x47, 0x72, 0x69, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x48, 0x69, 0x67, 0x68, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xea, 0xb5, 0x18, 0x1e, 0xe6, 0x88, 0x98, 0xe6, 0x96,
	0x97, 0xe7, 0xbd, 0x91, 0xe6, 0xa0, 0xbc, 0xe8, 0x83, 0x8c, 0xe6, 0x99, 0xaf, 0xe9, 0xab, 0x98,
	0xe4, 0xba, 0xae, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x21, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x47, 0x72, 0x69, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x48,
	0x69, 0x67, 0x68, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x64, 0x0a, 0x1b,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x47, 0x72, 0x69, 0x64, 0x44, 0x72, 0x61, 0x67, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x47, 0x72, 0x69, 0x64, 0x50, 0x61, 0x74, 0x68, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x22, 0xea, 0xb5, 0x18, 0x1e, 0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97, 0xe7, 0xbd, 0x91,
	0xe6, 0xa0, 0xbc, 0xe6, 0x8b, 0x96, 0xe5, 0x8a, 0xa8, 0xe8, 0xb6, 0x85, 0xe5, 0x91, 0x98, 0xe8,
	0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x1b, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x47, 0x72, 0x69,
	0x64, 0x44, 0x72, 0x61, 0x67, 0x45, 0x78, 0x74, 0x72, 0x61, 0x47, 0x72, 0x69, 0x64, 0x50, 0x61,
	0x74, 0x68, 0x3a, 0x0e, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0xf8, 0x97, 0x22, 0x01, 0xf0, 0x97,
	0x22, 0x01, 0x22, 0x95, 0x02, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x43, 0x66, 0x67, 0x12, 0x4d, 0x0a, 0x0c, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x29, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xb4, 0xa7, 0xe5, 0xb8, 0x81, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x15, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4d,
	0x4f, 0x4e, 0x45, 0x59, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0c, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x53, 0x63,
	0x61, 0x72, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x26, 0xea, 0xb5, 0x18, 0x09, 0xe7, 0xa8, 0x80, 0xe6, 0x9c, 0x89, 0xe5, 0xba, 0xa6, 0xf2, 0xb5,
	0x18, 0x15, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x43, 0x41, 0x52, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0b, 0x53, 0x63, 0x61, 0x72, 0x63, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x08, 0x4d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe4, 0xb8, 0x8b, 0xe9,
	0x99, 0x90, 0x52, 0x08, 0x4d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x08,
	0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a,
	0xea, 0xb5, 0x18, 0x06, 0xe4, 0xb8, 0x8a, 0xe9, 0x99, 0x90, 0x52, 0x08, 0x4d, 0x61, 0x78, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x14, 0xf0, 0x97, 0x22, 0x01, 0x92, 0x97, 0x22, 0x0c, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0x99, 0x04, 0x0a, 0x11, 0x52,
	0x65, 0x73, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x28, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x49, 0x44,
	0x52, 0x08, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0b, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0x8e, 0xa9, 0xe5, 0xae, 0xb6, 0xe7, 0xad, 0x89, 0xe7, 0xba,
	0xa7, 0x52, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x44,
	0x0a, 0x14, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x6f, 0x70, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe4, 0xba, 0xba, 0xe5, 0x8f, 0xa3, 0x52, 0x14,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x04, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81, 0xe6, 0x95,
	0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x04, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x3a, 0x0a, 0x0e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x75, 0x70, 0x70, 0x65, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0xe6, 0x99, 0xae, 0xe9, 0x80, 0x9a, 0xe4, 0xba,
	0xba, 0xe5, 0x81, 0xb6, 0x49, 0x64, 0x52, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x75,
	0x70, 0x70, 0x65, 0x74, 0x49, 0x44, 0x12, 0x42, 0x0a, 0x12, 0x49, 0x6e, 0x76, 0x69, 0x6e, 0x63,
	0x69, 0x62, 0x6c, 0x65, 0x50, 0x75, 0x70, 0x70, 0x65, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0xe6, 0x97, 0xa0, 0xe6, 0x95, 0x8c, 0xe4, 0xba,
	0xba, 0xe5, 0x81, 0xb6, 0x49, 0x64, 0x52, 0x12, 0x49, 0x6e, 0x76, 0x69, 0x6e, 0x63, 0x69, 0x62,
	0x6c, 0x65, 0x50, 0x75, 0x70, 0x70, 0x65, 0x74, 0x49, 0x44, 0x12, 0x49, 0x0a, 0x06, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x52, 0x65, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x42, 0x0f, 0xea, 0xb5,
	0x18, 0x06, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0xda, 0xb5, 0x18, 0x01, 0x33, 0x52, 0x06, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x73, 0x1a, 0x59, 0x0a, 0x05, 0x45, 0x71, 0x75, 0x69, 0x70, 0x12, 0x2e,
	0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0xe9, 0x85, 0x8d, 0xe7,
	0xbd, 0xae, 0x49, 0x44, 0x52, 0x08, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea,
	0xb5, 0x18, 0x06, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x3a, 0x14, 0xf8, 0x97, 0x22, 0x01, 0xf0, 0x97, 0x22, 0x01, 0x8a, 0x97, 0x22, 0x08, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x22, 0xc5, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x41, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x49, 0x43, 0x66, 0x67,
	0x12, 0x22, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x06, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0x52, 0x08, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe8, 0xae,
	0xbe, 0xe5, 0xa4, 0x87, 0xe5, 0x90, 0x8d, 0x52, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x57, 0x69, 0x64, 0x74, 0x68, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x42, 0x19, 0xea, 0xb5,
	0x18, 0x15, 0xe5, 0xae, 0x89, 0xe5, 0x85, 0xa8, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0xe9, 0xab,
	0x98, 0xe5, 0xae, 0xbd, 0xe6, 0xaf, 0x94, 0x52, 0x0f, 0x57, 0x69, 0x64, 0x74, 0x68, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x52, 0x61, 0x74, 0x65, 0x3a, 0x14, 0x8a, 0x97, 0x22, 0x08, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0xf0, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x02, 0x22, 0x7a,
	0x0a, 0x10, 0x52, 0x65, 0x73, 0x52, 0x65, 0x66, 0x54, 0x69, 0x70, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x2a, 0x0a, 0x05, 0x52, 0x65, 0x66, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xbc, 0x95, 0xe7, 0x94, 0xa8, 0xe5, 0x90, 0x8d,
	0xe7, 0xa7, 0xb0, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x05, 0x52, 0x65, 0x66, 0x65, 0x72, 0x12, 0x22,
	0x0a, 0x04, 0x54, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xea, 0xb5,
	0x18, 0x06, 0xe6, 0x96, 0x87, 0xe6, 0x9c, 0xac, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x54, 0x69,
	0x70, 0x73, 0x3a, 0x16, 0x8a, 0x97, 0x22, 0x05, 0x52, 0x65, 0x66, 0x65, 0x72, 0x92, 0x97, 0x22,
	0x05, 0x52, 0x65, 0x66, 0x65, 0x72, 0xf0, 0x97, 0x22, 0x01, 0x22, 0x55, 0x0a, 0x0a, 0x52, 0x65,
	0x66, 0x54, 0x69, 0x70, 0x73, 0x43, 0x66, 0x67, 0x12, 0x47, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x54,
	0x69, 0x70, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x52, 0x65,
	0x66, 0x54, 0x69, 0x70, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x04, 0xd2, 0xc1, 0x18,
	0x00, 0x52, 0x0e, 0x52, 0x65, 0x66, 0x54, 0x69, 0x70, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x22, 0xd9, 0x02, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x43, 0x66, 0x67, 0x12, 0x2c, 0x0a, 0x0a, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe8, 0xaf,
	0xad, 0xe8, 0xa8, 0x80, 0x49, 0x44, 0x52, 0x0a, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x49, 0x44, 0x12, 0x50, 0x0a, 0x0c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x47, 0x41, 0x4d, 0x45, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xaf, 0xad, 0xe8, 0xa8, 0x80,
	0xe8, 0xa7, 0x84, 0xe5, 0x88, 0x99, 0x52, 0x0c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c,
	0xe8, 0xaf, 0xad, 0xe8, 0xa8, 0x80, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0c, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x0e, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe9, 0x80, 0x9a, 0xe7, 0x94, 0xa8, 0x52, 0x0e,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12, 0x37,
	0x0a, 0x0c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe8, 0xaf, 0xad, 0xe8, 0xa8, 0x80,
	0xe7, 0xae, 0x80, 0xe7, 0xa0, 0x81, 0xe7, 0xbb, 0x84, 0x52, 0x0c, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x3a, 0x24, 0x8a, 0x97, 0x22, 0x0a, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x44, 0x92, 0x97, 0x22, 0x0e, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0xf0, 0x97, 0x22, 0x01, 0x22, 0xdb, 0x03,
	0x0a, 0x16, 0x52, 0x65, 0x73, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x66, 0x67, 0x12, 0x2c, 0x0a, 0x0a, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5,
	0x18, 0x08, 0xe8, 0xaf, 0xad, 0xe8, 0xa8, 0x80, 0x49, 0x44, 0x52, 0x0a, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x50, 0x0a, 0x0c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x52,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x41, 0x4d, 0x45, 0x4c, 0x41, 0x4e, 0x47, 0x55,
	0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xaf,
	0xad, 0xe8, 0xa8, 0x80, 0xe8, 0xa7, 0x84, 0xe5, 0x88, 0x99, 0x52, 0x0c, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x11, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4,
	0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0x52, 0x11, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x55,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4c, 0x0a, 0x15, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x98, 0xaf,
	0xe5, 0x90, 0xa6, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0xad, 0xe8, 0xa8, 0x80, 0x52,
	0x15, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x12, 0x4d, 0x53, 0x44, 0x4b, 0x4e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x10, 0x4d, 0x53, 0x44, 0x4b, 0xe5, 0x85, 0xac, 0xe5,
	0x91, 0x8a, 0xe8, 0xaf, 0xad, 0xe8, 0xa8, 0x80, 0x52, 0x12, 0x4d, 0x53, 0x44, 0x4b, 0x4e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x12,
	0x49, 0x4e, 0x54, 0x4c, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x10, 0x49, 0x4e,
	0x54, 0x4c, 0xe5, 0x85, 0xac, 0xe5, 0x91, 0x8a, 0xe8, 0xaf, 0xad, 0xe8, 0xa8, 0x80, 0x52, 0x12,
	0x49, 0x4e, 0x54, 0x4c, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x3a, 0x27, 0x8a, 0x97, 0x22, 0x0a, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x49, 0x44, 0x92, 0x97, 0x22, 0x11, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x55, 0x73,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0xf0, 0x97, 0x22, 0x01, 0x22, 0xc7, 0x03, 0x0a, 0x16,
	0x52, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x66, 0x67, 0x12, 0x1c, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe5, 0x9b, 0xbd, 0xe5, 0xae, 0xb6, 0x49, 0x44,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x9b, 0xbd, 0xe5, 0xae, 0xb6, 0xe5, 0x90,
	0x8d, 0xe7, 0xa7, 0xb0, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x09, 0x49, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe9, 0xbb, 0x98,
	0xe8, 0xae, 0xa4, 0x52, 0x09, 0x49, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x2a,
	0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8f, 0xaf, 0xe7, 0x94,
	0xa8, 0x52, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x0f, 0x41, 0x67,
	0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x18, 0xea, 0xb5, 0x18, 0x14, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe7,
	0xad, 0xbe, 0xe7, 0xbd, 0xb2, 0xe5, 0x8d, 0x8f, 0xe8, 0xae, 0xae, 0x69, 0x64, 0x52, 0x0f, 0x41,
	0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x67,
	0x0a, 0x11, 0x41, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x72, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x52, 0x65, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x16, 0xea, 0xb5,
	0x18, 0x12, 0xe5, 0xb9, 0xb4, 0xe9, 0xbe, 0x84, 0xe7, 0xa1, 0xae, 0xe8, 0xae, 0xa4, 0xe6, 0x96,
	0xb9, 0xe5, 0xbc, 0x8f, 0x52, 0x11, 0x41, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x72, 0x69, 0x6d,
	0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x38, 0x0a, 0x0e, 0x41, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xb9, 0xb4, 0xe9, 0xbe, 0x84, 0xe9, 0x97, 0xa8, 0xe6, 0xa7,
	0x9b, 0x52, 0x0e, 0x41, 0x67, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0x22, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0x92, 0x97, 0x22, 0x09, 0x49, 0x73, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x92, 0x97, 0x22, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0xf0, 0x97, 0x22, 0x01, 0x22, 0xa2, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x73, 0x4c, 0x6f, 0x72,
	0x64, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x28, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe9, 0xa2, 0x86,
	0xe4, 0xb8, 0xbb, 0x49, 0x44, 0x52, 0x08, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12,
	0x43, 0x0a, 0x0f, 0x48, 0x69, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x67, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe6, 0x94,
	0xbb, 0xe5, 0x87, 0xbb, 0xe7, 0x89, 0xb9, 0xe6, 0x95, 0x88, 0x41, 0x47, 0x45, 0xe8, 0xb7, 0xaf,
	0xe5, 0xbe, 0x84, 0x52, 0x0f, 0x48, 0x69, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x67, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x3a, 0x14, 0x8a, 0x97, 0x22, 0x08, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x49, 0x64, 0xf0, 0x97, 0x22, 0x01, 0xf8, 0x97, 0x22, 0x01, 0x22, 0xbf, 0x01, 0x0a, 0x1e, 0x52,
	0x65, 0x73, 0x4d, 0x4e, 0x5a, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x46, 0x65, 0x74, 0x74, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x43, 0x66, 0x67, 0x12, 0x5d, 0x0a,
	0x08, 0x46, 0x65, 0x74, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45,
	0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x42, 0x27, 0xea, 0xb5, 0x18, 0x0c, 0xe8,
	0x81, 0x8c, 0xe4, 0xb8, 0x9a, 0xe9, 0x98, 0xb5, 0xe8, 0x90, 0xa5, 0xc8, 0xc1, 0x18, 0x01, 0xf2,
	0xb5, 0x18, 0x0f, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x49, 0x44, 0x52, 0x08, 0x46, 0x65, 0x74, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x08,
	0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84,
	0x52, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x3a, 0x10, 0x8a, 0x97, 0x22, 0x08,
	0x46, 0x65, 0x74, 0x74, 0x65, 0x72, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0x22, 0xe1, 0x0a, 0x0a,
	0x16, 0x52, 0x65, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x53, 0x68, 0x6f, 0x77,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x53, 0x68, 0x6f, 0x77, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0b, 0xe5, 0xb1, 0x95,
	0xe7, 0xa4, 0xba, 0xe9, 0xa1, 0xb9, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x06, 0x53, 0x68,
	0x6f, 0x77, 0x49, 0x44, 0x12, 0x61, 0x0a, 0x08, 0x53, 0x68, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x52, 0x65, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x53, 0x68, 0x6f, 0x77,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65,
	0x53, 0x68, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe5, 0xb1,
	0x95, 0xe7, 0xa4, 0xba, 0xe9, 0xa1, 0xb9, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x08, 0x53,
	0x68, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x53, 0x68, 0x6f, 0x77, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x43, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea,
	0xb5, 0x18, 0x15, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0xe9, 0xa1, 0xb9, 0xe5, 0x8f, 0x82, 0xe6,
	0x95, 0xb0, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x0c, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x43, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe5, 0xb0, 0x8f, 0xe5, 0x9b, 0xbe,
	0xe6, 0xa0, 0x87, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x12,
	0x3a, 0x0a, 0x0c, 0x49, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x98, 0xaf, 0xe5, 0x90,
	0xa6, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0x52, 0x0c, 0x49,
	0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x3c, 0x0a, 0x0d, 0x49,
	0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x68, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe7, 0x89,
	0xb9, 0xe6, 0xae, 0x8a, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0x52, 0x0d, 0x49, 0x73, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x2c, 0x0a, 0x08, 0x53, 0x68, 0x6f,
	0x77, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x0c, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0x52, 0x08, 0x53,
	0x68, 0x6f, 0x77, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x43, 0x68, 0x6f, 0x6f, 0x73,
	0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea,
	0xb5, 0x18, 0x12, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe9, 0x80, 0x89, 0xe4, 0xb8, 0xad, 0xe6,
	0x9d, 0x83, 0xe9, 0x87, 0x8d, 0x52, 0x0c, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x4a, 0x75, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xb7, 0xb3, 0xe8, 0xbd, 0xac, 0xe8, 0xb7, 0xaf,
	0xe5, 0xbe, 0x84, 0x52, 0x04, 0x4a, 0x75, 0x6d, 0x70, 0x12, 0x49, 0x0a, 0x0f, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x69, 0x67, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1f, 0xea, 0xb5, 0x18, 0x1b, 0xe9, 0x80, 0x89, 0xe4, 0xb8, 0xad, 0xe7, 0x8a,
	0xb6, 0xe6, 0x80, 0x81, 0xe5, 0xa4, 0xa7, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0xe8, 0xb7, 0xaf,
	0xe5, 0xbe, 0x84, 0x52, 0x0f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x69, 0x67,
	0x49, 0x63, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x11, 0x55, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x42, 0x69, 0x67, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x22, 0xea, 0xb5, 0x18, 0x1e, 0xe6, 0x9c, 0xaa, 0xe9, 0x80, 0x89, 0xe4, 0xb8, 0xad, 0xe7, 0x8a,
	0xb6, 0xe6, 0x80, 0x81, 0xe5, 0xa4, 0xa7, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0xe8, 0xb7, 0xaf,
	0xe5, 0xbe, 0x84, 0x52, 0x11, 0x55, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42,
	0x69, 0x67, 0x49, 0x63, 0x6f, 0x6e, 0x22, 0xd3, 0x04, 0x0a, 0x10, 0x48, 0x6f, 0x6d, 0x65, 0x50,
	0x61, 0x67, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x48,
	0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x2e, 0x0a, 0x18, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61,
	0x67, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x49, 0x43, 0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe7, 0x8e, 0x8b, 0xe8, 0x80, 0x85,
	0xe5, 0x8d, 0xb0, 0xe8, 0xae, 0xb0, 0x12, 0x2e, 0x0a, 0x18, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61,
	0x67, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x41, 0x43, 0x48, 0x49, 0x45,
	0x56, 0x45, 0x10, 0x02, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x88, 0x90, 0xe5, 0xb0, 0xb1,
	0xe7, 0x82, 0xb9, 0xe6, 0x95, 0xb0, 0x12, 0x2f, 0x0a, 0x19, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61,
	0x67, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x44,
	0x41, 0x59, 0x53, 0x10, 0x03, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0xb8, 0xb8, 0xe6, 0x88,
	0x8f, 0xe5, 0xa4, 0xa9, 0xe6, 0x95, 0xb0, 0x12, 0x32, 0x0a, 0x1c, 0x48, 0x6f, 0x6d, 0x65, 0x50,
	0x61, 0x67, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x42, 0x41, 0x54, 0x54,
	0x4c, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x10, 0x04, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5,
	0xaf, 0xb9, 0xe6, 0x88, 0x98, 0xe5, 0x9c, 0xba, 0xe6, 0xac, 0xa1, 0x12, 0x31, 0x0a, 0x1b, 0x48,
	0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x5f,
	0x46, 0x49, 0x52, 0x53, 0x54, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x10, 0x05, 0x1a, 0x10, 0xaa, 0xb6,
	0x18, 0x0c, 0xe7, 0x99, 0xbb, 0xe9, 0xa1, 0xb6, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12, 0x2f,
	0x0a, 0x19, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x4e, 0x61,
	0x6d, 0x65, 0x5f, 0x47, 0x4f, 0x4f, 0x44, 0x4c, 0x4f, 0x52, 0x44, 0x10, 0x06, 0x1a, 0x10, 0xaa,
	0xb6, 0x18, 0x0c, 0xe7, 0xb2, 0xbe, 0xe9, 0x80, 0x9a, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0x12,
	0x32, 0x0a, 0x1c, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x4e,
	0x61, 0x6d, 0x65, 0x5f, 0x47, 0x4f, 0x4f, 0x44, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x10,
	0x07, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0x87, 0xb3, 0xe8, 0x87, 0xbb, 0xe6, 0x94, 0xb6,
	0xe8, 0x97, 0x8f, 0x12, 0x32, 0x0a, 0x1c, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x53,
	0x68, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x43, 0x4f, 0x4c, 0x4c,
	0x45, 0x43, 0x54, 0x10, 0x08, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b,
	0x84, 0xe6, 0x94, 0xb6, 0xe9, 0x9b, 0x86, 0x12, 0x33, 0x0a, 0x1a, 0x48, 0x6f, 0x6d, 0x65, 0x50,
	0x61, 0x67, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x43, 0x4f, 0x4c, 0x4c,
	0x45, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x09, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe6, 0x94, 0xb6,
	0xe8, 0x97, 0x8f, 0xe5, 0xae, 0xb6, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0x12, 0x2e, 0x0a, 0x18,
	0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65,
	0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x4e, 0x55, 0x4d, 0x10, 0x0a, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c,
	0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x12, 0x2e, 0x0a, 0x18,
	0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65,
	0x5f, 0x53, 0x4b, 0x49, 0x4e, 0x4e, 0x55, 0x4d, 0x10, 0x0b, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c,
	0xe7, 0x9a, 0xae, 0xe8, 0x82, 0xa4, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x3a, 0x52, 0x8a, 0x97,
	0x22, 0x06, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x44, 0x92, 0x97, 0x22, 0x0c, 0x49, 0x73, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x92, 0x97, 0x22, 0x0d, 0x49, 0x73, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x68, 0x6f, 0x77, 0x92, 0x97, 0x22, 0x1b, 0x49, 0x73, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x2c, 0x20, 0x49, 0x73, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x53, 0x68, 0x6f, 0x77, 0x98, 0x97, 0x22, 0x02, 0xf0, 0x97, 0x22, 0x01,
	0x22, 0xdf, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x43, 0x66, 0x67, 0x12, 0x1c, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe5, 0x8d, 0x8f, 0xe8, 0xae, 0xae, 0x49, 0x44,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x8d, 0x8f, 0xe8, 0xae, 0xae, 0xe5, 0x90,
	0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x03, 0x55, 0x52,
	0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x8d, 0x8f,
	0xe8, 0xae, 0xae, 0xe9, 0x93, 0xbe, 0xe6, 0x8e, 0xa5, 0x52, 0x03, 0x55, 0x52, 0x4c, 0x12, 0x56,
	0x0a, 0x0c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x47,
	0x41, 0x4d, 0x45, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x8d, 0x8f, 0xe8, 0xae, 0xae, 0xe6, 0x89, 0x80, 0xe5,
	0xb1, 0x9e, 0xe8, 0xaf, 0xad, 0xe8, 0xa8, 0x80, 0x52, 0x0c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x3a, 0x0a, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0xf0, 0x97,
	0x22, 0x01, 0x22, 0x67, 0x0a, 0x0c, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x12, 0x57, 0x0a, 0x13, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x53, 0x68,
	0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x48, 0x6f, 0x6d,
	0x65, 0x50, 0x61, 0x67, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e,
	0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x13, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65,
	0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x22, 0xfc, 0x02, 0x0a, 0x16,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x3f, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52,
	0x65, 0x73, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x10, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x92, 0xad, 0xe6, 0x8a, 0xa5, 0xe6, 0x96, 0x87,
	0xe5, 0xad, 0x97, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x10, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x0c, 0x41, 0x63, 0x68,
	0x69, 0x65, 0x76, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xbe, 0xbe, 0xe6, 0x88, 0x90, 0xe5, 0x8f, 0x82, 0xe6, 0x95,
	0xb0, 0x52, 0x0c, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x38, 0x0a, 0x0e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe9, 0x80, 0x92,
	0xe5, 0xa2, 0x9e, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x52, 0x0e, 0x49, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x30, 0x0a, 0x0a, 0x55, 0x70, 0x70,
	0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea,
	0xb5, 0x18, 0x0c, 0xe4, 0xb8, 0x8a, 0xe9, 0x99, 0x90, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x52,
	0x0a, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x07, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0xea, 0xb5,
	0x18, 0x09, 0xe4, 0xbc, 0x98, 0xe5, 0x85, 0x88, 0xe7, 0xba, 0xa7, 0x52, 0x07, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x3a, 0x14, 0x8a, 0x97, 0x22, 0x04, 0x54, 0x79, 0x70, 0x65, 0x98, 0x97,
	0x22, 0x02, 0xf0, 0x97, 0x22, 0x01, 0xf8, 0x97, 0x22, 0x01, 0x22, 0xb6, 0x02, 0x0a, 0x1b, 0x52,
	0x65, 0x73, 0x52, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x45, 0x78, 0x74, 0x43, 0x66, 0x67, 0x12, 0x28, 0x0a, 0x06, 0x53, 0x74,
	0x65, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08,
	0xe9, 0x98, 0xb6, 0xe6, 0xae, 0xb5, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x06, 0x53, 0x74,
	0x65, 0x70, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0xea, 0xb5, 0x18, 0x09, 0xe5, 0x9b, 0x9e, 0xe5,
	0x90, 0x88, 0xe6, 0x95, 0xb0, 0xc8, 0xc1, 0x18, 0x02, 0x52, 0x08, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x4e, 0x75, 0x6d, 0x12, 0x32, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x87,
	0x86, 0xe5, 0xa4, 0x87, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0b, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0x52, 0x0b,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x10, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe4, 0xbc, 0xa4, 0xe5, 0xae,
	0xb3, 0xe4, 0xb8, 0x8a, 0xe9, 0x99, 0x90, 0x52, 0x10, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x55,
	0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x18, 0x8a, 0x97, 0x22, 0x10, 0x53,
	0x74, 0x65, 0x70, 0x49, 0x44, 0x2c, 0x20, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0xf8,
	0x97, 0x22, 0x01, 0x22, 0xc7, 0x04, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x4c, 0x69,
	0x6e, 0x65, 0x75, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x12, 0x3c, 0x0a,
	0x0d, 0x44, 0x65, 0x73, 0x63, 0x50, 0x6f, 0x70, 0x54, 0x4c, 0x6f, 0x67, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe8, 0xaf, 0xb4, 0xe6, 0x98, 0x8e,
	0xe5, 0xbc, 0xb9, 0xe7, 0xaa, 0x97, 0x54, 0x4c, 0x6f, 0x67, 0x49, 0x44, 0x52, 0x0d, 0x44, 0x65,
	0x73, 0x63, 0x50, 0x6f, 0x70, 0x54, 0x4c, 0x6f, 0x67, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x09, 0x50,
	0x6f, 0x70, 0x54, 0x4c, 0x6f, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xbc, 0xb9, 0xe7, 0xaa, 0x97, 0x54, 0x4c, 0x6f, 0x67, 0x49, 0x44,
	0x52, 0x09, 0x50, 0x6f, 0x70, 0x54, 0x4c, 0x6f, 0x67, 0x49, 0x44, 0x12, 0x51, 0x0a, 0x13, 0x44,
	0x6f, 0x6e, 0x74, 0x50, 0x6f, 0x70, 0x4d, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0xea, 0xb5, 0x18, 0x1b, 0xe4, 0xb8,
	0x8d, 0xe5, 0x86, 0x8d, 0xe5, 0xbc, 0xb9, 0xe7, 0xaa, 0x97, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x91,
	0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xe5, 0x88, 0x86, 0x52, 0x13, 0x44, 0x6f, 0x6e, 0x74, 0x50,
	0x6f, 0x70, 0x4d, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x63,
	0x0a, 0x19, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x4d,
	0x69, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x25, 0xea, 0xb5, 0x18, 0x21, 0xe8, 0xa7, 0xa3, 0xe9, 0x94, 0x81, 0xe9, 0xa2, 0x84,
	0xe8, 0xae, 0xbe, 0xe6, 0x8e, 0xa8, 0xe8, 0x8d, 0x90, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x91, 0xe6,
	0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xe5, 0x88, 0x86, 0x52, 0x19, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x59, 0x0a, 0x17, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x63, 0x72, 0x75,
	0x69, 0x74, 0x4d, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0xea, 0xb5, 0x18, 0x1b, 0xe4, 0xb8, 0x8b, 0xe6, 0xb2, 0x89,
	0xe9, 0xa1, 0xb5, 0xe7, 0xad, 0xbe, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x91, 0xe6, 0xae, 0xb5, 0xe4,
	0xbd, 0x8d, 0xe5, 0x88, 0x86, 0x52, 0x17, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x63, 0x72, 0x75,
	0x69, 0x74, 0x4d, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2a,
	0x0a, 0x09, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x49, 0x44, 0x52,
	0x09, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x44, 0x12, 0x3b, 0x0a, 0x0e, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6d, 0x67, 0x50, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe9, 0xa2, 0x84, 0xe8, 0xa7, 0x88, 0xe5, 0x9b,
	0xbe, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x0e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x49, 0x6d, 0x67, 0x50, 0x61, 0x74, 0x68, 0x12, 0x44, 0x0a, 0x0e, 0x50, 0x6f, 0x70, 0x4d, 0x61,
	0x78, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe5, 0xbc, 0xb9, 0xe7, 0xaa, 0x97, 0xe6, 0x9c, 0x80, 0xe5, 0xa4,
	0xa7, 0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x95, 0xbf, 0x52, 0x0e, 0x50,
	0x6f, 0x70, 0x4d, 0x61, 0x78, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xef, 0x02,
	0x0a, 0x16, 0x52, 0x65, 0x73, 0x52, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x47, 0x0a, 0x0e, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x46, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x1f, 0xea, 0xb5, 0x18, 0x1b, 0xe6, 0x96, 0xb0, 0xe6, 0x89, 0x8b, 0xe6, 0x88, 0x98, 0xe5,
	0xae, 0x8c, 0xe6, 0x88, 0x90, 0xe5, 0x88, 0x86, 0xe5, 0x80, 0xbc, 0xe8, 0xbe, 0xbe, 0xe6, 0x88,
	0x90, 0x52, 0x0e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x46, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x4f, 0x0a, 0x12, 0x4e, 0x65, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e,
	0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0xea,
	0xb5, 0x18, 0x1b, 0xe6, 0x96, 0xb0, 0xe6, 0x89, 0x8b, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe6,
	0x96, 0xb0, 0xe6, 0x89, 0x8b, 0xe6, 0x88, 0x98, 0xe5, 0x88, 0x86, 0xe5, 0x80, 0xbc, 0x52, 0x12,
	0x4e, 0x65, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x4f, 0x0a, 0x12, 0x4f, 0x6c, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f,
	0xea, 0xb5, 0x18, 0x1b, 0xe8, 0x80, 0x81, 0xe6, 0x89, 0x8b, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b,
	0xe6, 0x96, 0xb0, 0xe6, 0x89, 0x8b, 0xe6, 0x88, 0x98, 0xe5, 0x88, 0x86, 0xe5, 0x80, 0xbc, 0x52,
	0x12, 0x4f, 0x6c, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x60, 0x0a, 0x0f, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x52,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x4c, 0x69, 0x6e,
	0x65, 0x75, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x42, 0x16, 0xea, 0xb5,
	0x18, 0x12, 0xe6, 0x96, 0xb0, 0xe6, 0x89, 0x8b, 0xe6, 0x8e, 0xa8, 0xe8, 0x8d, 0x90, 0xe9, 0x98,
	0xb5, 0xe5, 0xae, 0xb9, 0x52, 0x0f, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x3a, 0x08, 0xf0, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x02, 0x22,
	0x43, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x41, 0x77,
	0x61, 0x72, 0x64, 0x12, 0x2f, 0x0a, 0x08, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x64, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe5, 0xa5, 0x96, 0xe5, 0x8a,
	0xb1, 0xe7, 0xa7, 0xaf, 0xe5, 0x88, 0x86, 0xe5, 0x80, 0xbc, 0x52, 0x08, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x41, 0x64, 0x64, 0x22, 0x72, 0x0a, 0x1e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x52, 0x65,
	0x63, 0x72, 0x75, 0x69, 0x74, 0x53, 0x74, 0x65, 0x70, 0x55, 0x70, 0x50, 0x6f, 0x70, 0x54, 0x69,
	0x70, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x24, 0x0a, 0x07, 0x54, 0x69, 0x70, 0x73, 0x53, 0x74,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x86, 0x85,
	0xe5, 0xae, 0xb9, 0x52, 0x07, 0x54, 0x69, 0x70, 0x73, 0x53, 0x74, 0x72, 0x12, 0x2a, 0x0a, 0x08,
	0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e,
	0xea, 0xb5, 0x18, 0x0a, 0x49, 0x63, 0x6f, 0x6e, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x08,
	0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x22, 0x9a, 0x02, 0x0a, 0x1a, 0x52, 0x65, 0x73,
	0x44, 0x54, 0x5f, 0x52, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x53, 0x74, 0x65, 0x70, 0x55, 0x70,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x60, 0x0a, 0x0b, 0x50, 0x6f, 0x70, 0x54, 0x69,
	0x70, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x52,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x52, 0x65, 0x63,
	0x72, 0x75, 0x69, 0x74, 0x53, 0x74, 0x65, 0x70, 0x55, 0x70, 0x50, 0x6f, 0x70, 0x54, 0x69, 0x70,
	0x73, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xbc, 0xb9, 0xe5, 0x87,
	0xba, 0xe6, 0x8f, 0x90, 0xe7, 0xa4, 0xba, 0xda, 0xb5, 0x18, 0x01, 0x35, 0x52, 0x0b, 0x50, 0x6f,
	0x70, 0x54, 0x69, 0x70, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x3b, 0x0a, 0x09, 0x50, 0x6f, 0x70,
	0x52, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x1d, 0xea, 0xb5,
	0x18, 0x14, 0xe5, 0xbc, 0xb9, 0xe5, 0x87, 0xba, 0xe8, 0xa7, 0x84, 0xe5, 0x88, 0x99, 0xe8, 0xaf,
	0xb4, 0xe6, 0x98, 0x8e, 0x49, 0x44, 0xda, 0xb5, 0x18, 0x01, 0x35, 0x52, 0x09, 0x50, 0x6f, 0x70,
	0x52, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x5d, 0x0a, 0x15, 0x4e, 0x65, 0x65, 0x64, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x27, 0xea, 0xb5, 0x18, 0x1e, 0xe5, 0xbc, 0xb9, 0xe5, 0x87,
	0xba, 0xe6, 0x89, 0x80, 0xe9, 0x9c, 0x80, 0xe7, 0x8e, 0xa9, 0xe5, 0xae, 0xb6, 0xe8, 0x83, 0xbd,
	0xe5, 0x8a, 0x9b, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xda, 0xb5, 0x18, 0x01, 0x32, 0x52, 0x15,
	0x4e, 0x65, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0xf1, 0x06, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x52, 0x65, 0x63,
	0x72, 0x75, 0x69, 0x74, 0x53, 0x74, 0x65, 0x70, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12,
	0x28, 0x0a, 0x06, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x10, 0xea, 0xb5, 0x18, 0x08, 0xe9, 0x98, 0xb6, 0xe6, 0xae, 0xb5, 0x49, 0x44, 0xc8, 0xc1, 0x18,
	0x01, 0x52, 0x06, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x08, 0x4d, 0x69, 0x6e,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x0c, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x8f, 0xe5, 0x88, 0x86, 0xe5, 0x80, 0xbc, 0x52, 0x08, 0x4d,
	0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6,
	0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe5, 0x88, 0x86, 0xe5, 0x80, 0xbc, 0x52, 0x08, 0x4d, 0x61, 0x78,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x49, 0x6e, 0x69, 0x74, 0x48, 0x50, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x88, 0x9d, 0xe5, 0xa7,
	0x8b, 0xe8, 0xa1, 0x80, 0xe9, 0x87, 0x8f, 0x52, 0x06, 0x49, 0x6e, 0x69, 0x74, 0x48, 0x50, 0x12,
	0x42, 0x0a, 0x0f, 0x4e, 0x65, 0x77, 0x4c, 0x76, 0x6c, 0x55, 0x70, 0x41, 0x77, 0x61, 0x72, 0x64,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x18, 0xea, 0xb5, 0x18, 0x14, 0xe6, 0x96,
	0xb0, 0xe6, 0x89, 0x8b, 0xe5, 0x8d, 0x87, 0xe7, 0xba, 0xa7, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1,
	0x49, 0x44, 0x52, 0x0f, 0x4e, 0x65, 0x77, 0x4c, 0x76, 0x6c, 0x55, 0x70, 0x41, 0x77, 0x61, 0x72,
	0x64, 0x49, 0x44, 0x12, 0x42, 0x0a, 0x0f, 0x4f, 0x6c, 0x64, 0x4c, 0x76, 0x6c, 0x55, 0x70, 0x41,
	0x77, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x18, 0xea, 0xb5,
	0x18, 0x14, 0xe8, 0x80, 0x81, 0xe6, 0x89, 0x8b, 0xe5, 0x8d, 0x87, 0xe7, 0xba, 0xa7, 0xe5, 0xa5,
	0x96, 0xe5, 0x8a, 0xb1, 0x49, 0x44, 0x52, 0x0f, 0x4f, 0x6c, 0x64, 0x4c, 0x76, 0x6c, 0x55, 0x70,
	0x41, 0x77, 0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x42, 0x0a, 0x0e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1a, 0xea, 0xb5, 0x18, 0x12, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a,
	0xa1, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x0e, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x12, 0x48, 0x0a, 0x09, 0x52,
	0x61, 0x6e, 0x6b, 0x41, 0x77, 0x61, 0x72, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74,
	0x52, 0x61, 0x6e, 0x6b, 0x41, 0x77, 0x61, 0x72, 0x64, 0x42, 0x0f, 0xea, 0xb5, 0x18, 0x06, 0xe6,
	0x8e, 0x92, 0xe5, 0x90, 0x8d, 0xda, 0xb5, 0x18, 0x01, 0x38, 0x52, 0x09, 0x52, 0x61, 0x6e, 0x6b,
	0x41, 0x77, 0x61, 0x72, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x46, 0x72, 0x65, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x11,
	0xe9, 0x99, 0x90, 0xe5, 0x85, 0x8d, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe7, 0xbb, 0x84, 0x49,
	0x44, 0x52, 0x0b, 0x46, 0x72, 0x65, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x37,
	0x0a, 0x0b, 0x4c, 0x6f, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x11, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe6,
	0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe7, 0xbb, 0x84, 0x49, 0x44, 0x52, 0x0b, 0x4c, 0x6f, 0x72, 0x64,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x3f, 0x0a, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19,
	0xea, 0xb5, 0x18, 0x15, 0xe6, 0x96, 0xb0, 0xe6, 0x89, 0x8b, 0xe6, 0x88, 0x98, 0xe5, 0xaf, 0xb9,
	0xe5, 0xb1, 0x80, 0xe4, 0xba, 0xba, 0xe6, 0x95, 0xb0, 0x52, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x41, 0x49, 0x53, 0x68,
	0x6f, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x18, 0xea,
	0xb5, 0x18, 0x14, 0xe6, 0x96, 0xb0, 0xe6, 0x89, 0x8b, 0xe6, 0x88, 0x98, 0x41, 0x49, 0xe5, 0xb1,
	0x95, 0xe7, 0xa4, 0xba, 0xe7, 0xbb, 0x84, 0x52, 0x0b, 0x41, 0x49, 0x53, 0x68, 0x6f, 0x77, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x4f, 0x0a, 0x0d, 0x53, 0x74, 0x65, 0x70, 0x55, 0x70, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x52, 0x65,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x52, 0x65, 0x63, 0x72,
	0x75, 0x69, 0x74, 0x53, 0x74, 0x65, 0x70, 0x55, 0x70, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x42, 0x04, 0xea, 0xb5, 0x18, 0x00, 0x52, 0x0d, 0x53, 0x74, 0x65, 0x70, 0x55, 0x70, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x57, 0x61, 0x72, 0x6d, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x12, 0xea,
	0xb5, 0x18, 0x0e, 0xe6, 0xb8, 0xa9, 0xe6, 0x9a, 0x96, 0xe7, 0xad, 0x96, 0xe7, 0x95, 0xa5, 0x49,
	0x44, 0x52, 0x0e, 0x57, 0x61, 0x72, 0x6d, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49,
	0x44, 0x3a, 0x16, 0x8a, 0x97, 0x22, 0x06, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0xf0, 0x97, 0x22,
	0x01, 0xf8, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x02, 0x22, 0xad, 0x01, 0x0a, 0x14, 0x52, 0x65,
	0x73, 0x52, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x42, 0x61, 0x6e, 0x48, 0x65, 0x72, 0x6f, 0x43,
	0x66, 0x67, 0x12, 0x28, 0x0a, 0x06, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe9, 0x98, 0xb6, 0xe6, 0xae, 0xb5, 0x49, 0x44,
	0xc8, 0xc1, 0x18, 0x01, 0x52, 0x06, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07,
	0x4c, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x0f, 0xea,
	0xb5, 0x18, 0x06, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0xda, 0xb5, 0x18, 0x01, 0x35, 0x52, 0x07,
	0x4c, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x48, 0x65, 0x72, 0x6f, 0x43,
	0x66, 0x67, 0x49, 0x44, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x06, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xda, 0xb5, 0x18, 0x02, 0x34, 0x30, 0x52, 0x0a, 0x48,
	0x65, 0x72, 0x6f, 0x43, 0x66, 0x67, 0x49, 0x44, 0x73, 0x3a, 0x0e, 0xf8, 0x97, 0x22, 0x01, 0x92,
	0x97, 0x22, 0x06, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x22, 0x9d, 0x01, 0x0a, 0x1b, 0x52, 0x65,
	0x73, 0x52, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x43, 0x68, 0x65, 0x73, 0x73, 0x41, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x06, 0x53, 0x74, 0x65,
	0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe9,
	0x98, 0xb6, 0xe6, 0xae, 0xb5, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x06, 0x53, 0x74, 0x65,
	0x70, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x08, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x72, 0x6f,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0xea, 0xb5, 0x18, 0x00, 0x52, 0x08, 0x44, 0x72, 0x6f,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x3a, 0x12, 0x8a, 0x97, 0x22, 0x06, 0x53, 0x74, 0x65, 0x70, 0x49,
	0x64, 0xf8, 0x97, 0x22, 0x01, 0xa0, 0x97, 0x22, 0x01, 0x22, 0x9a, 0x02, 0x0a, 0x18, 0x52, 0x65,
	0x63, 0x72, 0x75, 0x69, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x75, 0x69, 0x64, 0x65, 0x43, 0x6f,
	0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x42, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x2e, 0xea, 0xb5, 0x18, 0x06, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0xf2, 0xb5, 0x18, 0x20, 0x52, 0x45, 0x43, 0x52, 0x55, 0x49, 0x54, 0x5f, 0x54, 0x41, 0x53, 0x4b,
	0x47, 0x55, 0x49, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x2f, 0xea, 0xb5, 0x18, 0x06, 0xe5,
	0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xda, 0xb5, 0x18, 0x21, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e,
	0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x43, 0x4e, 0x54, 0x52, 0x05, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x27, 0x0a, 0x07, 0x47, 0x6f, 0x61, 0x6c, 0x43, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0xe5, 0x80,
	0xbc, 0x52, 0x07, 0x47, 0x6f, 0x61, 0x6c, 0x43, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x0e, 0x46, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x22, 0xea, 0xb5, 0x18, 0x1e, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe7, 0xa7,
	0xbb, 0xe9, 0x99, 0xa4, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe8, 0x87, 0xb3, 0xe9, 0xbb, 0x91,
	0xe5, 0x90, 0x8d, 0xe5, 0x8d, 0x95, 0x52, 0x0e, 0x46, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x22, 0xf2, 0x08, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x52, 0x65,
	0x63, 0x72, 0x75, 0x69, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e,
	0x12, 0x28, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0xc8, 0xc1,
	0x18, 0x01, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x08, 0x54, 0x61,
	0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5,
	0x18, 0x0c, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xf8, 0xb5,
	0x18, 0x01, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x08,
	0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14,
	0xea, 0xb5, 0x18, 0x0c, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0,
	0xf8, 0xb5, 0x18, 0x01, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x12, 0x66,
	0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x52, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x75, 0x69, 0x64,
	0x65, 0x43, 0x6f, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x1b, 0xea, 0xb5, 0x18, 0x12, 0xe4,
	0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe5, 0xbc, 0x80, 0xe6, 0x94, 0xbe, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb,
	0xb6, 0xda, 0xb5, 0x18, 0x01, 0x32, 0x52, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x6e, 0x4c, 0x6f,
	0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x12, 0x62, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x68,
	0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x52,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x47, 0x75, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x1b, 0xea, 0xb5, 0x18, 0x12, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0x98, 0xbe, 0xe7, 0xa4,
	0xba, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xda, 0xb5, 0x18, 0x01, 0x33, 0x52, 0x0c, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x12, 0x66, 0x0a, 0x0e, 0x54, 0x61,
	0x73, 0x6b, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x63,
	0x72, 0x75, 0x69, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x75, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6e,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x1b, 0xea, 0xb5, 0x18, 0x12, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a,
	0xa1, 0xe5, 0xae, 0x8c, 0xe6, 0x88, 0x90, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xda, 0xb5, 0x18,
	0x01, 0x32, 0x52, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x43, 0x6f,
	0x6e, 0x64, 0x12, 0x5f, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43,
	0x6f, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x52, 0x65, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x47,
	0x75, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x16, 0xea, 0xb5,
	0x18, 0x12, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe5, 0x85, 0xb3, 0xe9, 0x97, 0xad, 0xe6, 0x9d,
	0xa1, 0xe4, 0xbb, 0xb6, 0x52, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43,
	0x6f, 0x6e, 0x64, 0x12, 0x3e, 0x0a, 0x0a, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x49,
	0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1e, 0xea, 0xb5, 0x18, 0x1a, 0xe4, 0xbb, 0xbb,
	0xe5, 0x8a, 0xa1, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe8, 0xa7, 0x84, 0xe5, 0x88, 0x99, 0xe8,
	0xaf, 0xb4, 0xe6, 0x98, 0x8e, 0x49, 0x44, 0x52, 0x0a, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x49, 0x44, 0x12, 0x3c, 0x0a, 0x0c, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65,
	0x64, 0x55, 0x49, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xea, 0xb5, 0x18, 0x14, 0xe4,
	0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe9, 0xab, 0x98, 0xe4, 0xba,
	0xae, 0x55, 0x49, 0x52, 0x0c, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x55,
	0x49, 0x12, 0x40, 0x0a, 0x0f, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x50,
	0x61, 0x6e, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12,
	0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe9, 0x9d, 0xa2, 0xe6,
	0x9d, 0xbf, 0x52, 0x0f, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x50, 0x61,
	0x6e, 0x65, 0x6c, 0x12, 0x48, 0x0a, 0x13, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x6c, 0x75, 0x65, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe5, 0x85, 0xb3, 0xe8,
	0x81, 0x94, 0xe8, 0x93, 0x9d, 0xe5, 0x9b, 0xbe, 0x52, 0x13, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x6c, 0x75, 0x65, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x40, 0x0a,
	0x0b, 0x41, 0x77, 0x61, 0x72, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1e, 0xea, 0xb5, 0x18, 0x1a, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe9, 0xa6,
	0x96, 0xe6, 0xac, 0xa1, 0xe5, 0xae, 0x8c, 0xe6, 0x88, 0x90, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1,
	0x49, 0x44, 0x52, 0x0b, 0x41, 0x77, 0x61, 0x72, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x44, 0x12,
	0x46, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x4c, 0x49, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x0c, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x08, 0x54,
	0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x0c, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0,
	0x52, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x4a, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x75, 0x6c,
	0x65, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1e, 0xea, 0xb5, 0x18, 0x1a, 0xe4,
	0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe8, 0xa7, 0xa3, 0xe9, 0x94, 0x81, 0xe8, 0xa7, 0x84, 0xe5, 0x88,
	0x99, 0xe6, 0x9d, 0xa1, 0xe7, 0x9b, 0xae, 0x49, 0x44, 0x52, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x55,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x3a, 0x1e, 0x8a, 0x97, 0x22,
	0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x92, 0x97, 0x22, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0xf0, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x02, 0x22, 0x98, 0x02, 0x0a, 0x11,
	0x52, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x12, 0x57, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x52, 0x65, 0x63, 0x72,
	0x75, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x42,
	0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x13, 0x52, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x54, 0x0a, 0x12, 0x52, 0x65,
	0x63, 0x72, 0x75, 0x69, 0x74, 0x53, 0x74, 0x65, 0x70, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x52, 0x65, 0x73, 0x52, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x53, 0x74, 0x65, 0x70, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1, 0x18, 0x00, 0x52, 0x12, 0x52, 0x65,
	0x63, 0x72, 0x75, 0x69, 0x74, 0x53, 0x74, 0x65, 0x70, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e,
	0x12, 0x54, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x52,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x52, 0x65, 0x63, 0x72, 0x75, 0x69,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x42, 0x04, 0xd2, 0xc1,
	0x18, 0x00, 0x52, 0x12, 0x52, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x2a, 0xe4, 0x01, 0x0a, 0x0b, 0x45, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x43, 0x61, 0x6d, 0x70, 0x31, 0x10, 0x00, 0x1a, 0x0b, 0xaa, 0xb6, 0x18, 0x07, 0xe9, 0x98, 0xb5,
	0xe8, 0x90, 0xa5, 0x31, 0x12, 0x1c, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61,
	0x6d, 0x70, 0x32, 0x10, 0x01, 0x1a, 0x0b, 0xaa, 0xb6, 0x18, 0x07, 0xe9, 0x98, 0xb5, 0xe8, 0x90,
	0xa5, 0x32, 0x12, 0x3d, 0x0a, 0x19, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x10,
	0x02, 0x1a, 0x1e, 0xaa, 0xb6, 0x18, 0x1a, 0xe9, 0x98, 0xb5, 0xe8, 0x90, 0xa5, 0xe6, 0x80, 0xbb,
	0xe6, 0x95, 0xb0, 0x28, 0xe4, 0xb8, 0x8d, 0xe8, 0xae, 0xa1, 0xe4, 0xb8, 0xad, 0xe7, 0xab, 0x8b,
	0x29, 0x12, 0x1b, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x33,
	0x10, 0x02, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe4, 0xb8, 0xad, 0xe7, 0xab, 0x8b, 0x12, 0x25,
	0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x10, 0x03, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe9, 0x98, 0xb5, 0xe8, 0x90, 0xa5, 0xe6,
	0x80, 0xbb, 0xe6, 0x95, 0xb0, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43,
	0x61, 0x6d, 0x70, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x03, 0x1a, 0x02, 0x10, 0x01, 0x2a, 0x90, 0x01,
	0x0a, 0x14, 0x43, 0x4f, 0x4d, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45,
	0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4d, 0x5f, 0x52, 0x4f,
	0x4f, 0x4d, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x5f,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x5f, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15,
	0x43, 0x4f, 0x4d, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f,
	0x54, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x5f, 0x52,
	0x4f, 0x4f, 0x4d, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x54, 0x41, 0x43, 0x4e, 0x54,
	0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4d, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x4d,
	0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x54, 0x4e, 0x50, 0x43, 0x10, 0x02, 0x1a, 0x02, 0x10, 0x01,
	0x2a, 0xac, 0x01, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f,
	0x43, 0x41, 0x4d, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x53,
	0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x43, 0x41, 0x4d, 0x50, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x5f, 0x10, 0x00, 0x12,
	0x24, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x43, 0x41,
	0x4d, 0x50, 0x5f, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x01, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe8,
	0x93, 0x9d, 0xe6, 0x96, 0xb9, 0x12, 0x23, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x5f, 0x42, 0x41, 0x54,
	0x54, 0x4c, 0x45, 0x5f, 0x43, 0x41, 0x4d, 0x50, 0x5f, 0x52, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x0a,
	0xaa, 0xb6, 0x18, 0x06, 0xe7, 0xba, 0xa2, 0xe6, 0x96, 0xb9, 0x12, 0x23, 0x0a, 0x13, 0x52, 0x45,
	0x53, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x43, 0x41, 0x4d, 0x50, 0x5f, 0x41, 0x4c,
	0x4c, 0x10, 0x03, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0x8f, 0x8c, 0xe6, 0x96, 0xb9, 0x2a,
	0x91, 0x02, 0x0a, 0x07, 0x45, 0x47, 0x65, 0x74, 0x57, 0x61, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x0b, 0x47, 0x45, 0x54, 0x57, 0x41, 0x59, 0x5f,
	0x53, 0x48, 0x4f, 0x50, 0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x95, 0x86, 0xe5,
	0x9f, 0x8e, 0xe8, 0xb4, 0xad, 0xe4, 0xb9, 0xb0, 0x12, 0x2a, 0x0a, 0x11, 0x47, 0x45, 0x54, 0x57,
	0x41, 0x59, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x50, 0x41, 0x53, 0x53, 0x10, 0x02, 0x1a,
	0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe8, 0xae, 0xad, 0xe7, 0xbb, 0x83, 0xe5, 0x86, 0x8c, 0xe5, 0xa5,
	0x96, 0xe5, 0x8a, 0xb1, 0x12, 0x29, 0x0a, 0x0d, 0x47, 0x45, 0x54, 0x57, 0x41, 0x59, 0x5f, 0x53,
	0x49, 0x47, 0x4e, 0x49, 0x4e, 0x10, 0x03, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe7, 0xad, 0xbe,
	0xe5, 0x88, 0xb0, 0xe6, 0xb4, 0xbb, 0xe5, 0x8a, 0xa8, 0xe8, 0xb5, 0xa0, 0xe9, 0x80, 0x81, 0x12,
	0x34, 0x0a, 0x18, 0x47, 0x45, 0x54, 0x57, 0x41, 0x59, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x04, 0x1a, 0x16, 0xaa,
	0xb6, 0x18, 0x12, 0xe8, 0xbf, 0x90, 0xe8, 0x90, 0xa5, 0xe6, 0xb4, 0xbb, 0xe5, 0x8a, 0xa8, 0xe8,
	0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x12, 0x26, 0x0a, 0x0a, 0x42, 0x41, 0x44, 0x47, 0x45, 0x54, 0x41,
	0x53, 0x4b, 0x53, 0x10, 0x05, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0xbe, 0xbd, 0xe7, 0xab,
	0xa0, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x12, 0x24, 0x0a,
	0x08, 0x48, 0x45, 0x52, 0x4f, 0x50, 0x41, 0x47, 0x45, 0x10, 0x06, 0x1a, 0x16, 0xaa, 0xb6, 0x18,
	0x12, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe7, 0xa4, 0xbc, 0xe5, 0x8c, 0x85, 0xe8, 0x8e, 0xb7,
	0xe5, 0x8f, 0x96, 0x2a, 0xd7, 0x02, 0x0a, 0x17, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x5f, 0x42, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x48, 0x45, 0x4d, 0x45, 0x12,
	0x35, 0x0a, 0x1c, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x42, 0x49, 0x47, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10,
	0x00, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe6, 0x9c, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89,
	0xe7, 0x8e, 0xa9, 0xe6, 0xb3, 0x95, 0x12, 0x37, 0x0a, 0x24, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x42, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x48, 0x45, 0x4d,
	0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x57, 0x41, 0x52, 0x53, 0x49, 0x4d, 0x10, 0x01,
	0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe5, 0x8c, 0xb9, 0xe9, 0x85, 0x8d, 0xe8, 0xb5, 0x9b, 0x12,
	0x30, 0x0a, 0x1d, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x42, 0x49, 0x47, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53,
	0x10, 0x02, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe6, 0x8e, 0x92, 0xe4, 0xbd, 0x8d, 0xe8, 0xb5,
	0x9b, 0x12, 0x33, 0x0a, 0x20, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x42, 0x49,
	0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x54, 0x55, 0x54,
	0x4f, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x05, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe8, 0xae, 0xad,
	0xe7, 0xbb, 0x83, 0xe8, 0x90, 0xa5, 0x12, 0x31, 0x0a, 0x1e, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x42, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x48, 0x45, 0x4d,
	0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x06, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09,
	0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0x12, 0x32, 0x0a, 0x1f, 0x43, 0x4f, 0x4d,
	0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x42, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x48, 0x45, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x52, 0x55, 0x49, 0x54, 0x10, 0x07, 0x1a, 0x0d,
	0xaa, 0xb6, 0x18, 0x09, 0xe6, 0x96, 0xb0, 0xe6, 0x89, 0x8b, 0xe6, 0x88, 0x98, 0x2a, 0xf5, 0x06,
	0x0a, 0x0d, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12,
	0x2b, 0x0a, 0x12, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe6, 0x9c, 0xaa,
	0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe7, 0x8e, 0xa9, 0xe6, 0xb3, 0x95, 0x12, 0x1c, 0x0a, 0x18,
	0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41,
	0x4e, 0x4b, 0x5f, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x31, 0x0a, 0x18, 0x43, 0x4f,
	0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x4b,
	0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x10, 0x02, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe6, 0x8e,
	0x92, 0xe4, 0xbd, 0x8d, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0x12, 0x3e, 0x0a,
	0x1f, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52,
	0x41, 0x4e, 0x4b, 0x5f, 0x4b, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x57, 0x41, 0x52, 0x53, 0x49, 0x4d,
	0x10, 0x03, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe6, 0x8e, 0x92, 0xe4, 0xbd, 0x8d, 0xe7, 0x8e,
	0x8b, 0xe8, 0x80, 0x85, 0xe6, 0xa8, 0xa1, 0xe6, 0x8b, 0x9f, 0xe6, 0x88, 0x98, 0x12, 0x1b, 0x0a,
	0x17, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52,
	0x41, 0x4e, 0x4b, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f,
	0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x4b,
	0x5f, 0x45, 0x4e, 0x44, 0x10, 0x62, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x53, 0x55, 0x41, 0x4c, 0x5f, 0x42,
	0x45, 0x47, 0x49, 0x4e, 0x10, 0x63, 0x12, 0x3b, 0x0a, 0x19, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x43, 0x48,
	0x45, 0x53, 0x53, 0x10, 0x64, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe6, 0x96, 0xb0, 0xe8, 0xb5,
	0x9b, 0xe5, 0xad, 0xa3, 0xe5, 0x8c, 0xb9, 0xe9, 0x85, 0x8d, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0,
	0xe6, 0xa3, 0x8b, 0x12, 0x3f, 0x0a, 0x20, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4b, 0x49, 0x4e, 0x47, 0x53,
	0x5f, 0x57, 0x41, 0x52, 0x53, 0x49, 0x4d, 0x10, 0x65, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe5,
	0x8c, 0xb9, 0xe9, 0x85, 0x8d, 0xe7, 0x8e, 0x8b, 0xe8, 0x80, 0x85, 0xe6, 0xa8, 0xa1, 0xe6, 0x8b,
	0x9f, 0xe6, 0x88, 0x98, 0x12, 0x2c, 0x0a, 0x16, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x55, 0x54, 0x4f, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x66,
	0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x96, 0xb0, 0xe6, 0x89, 0x8b, 0xe5, 0xbc, 0x95, 0xe5,
	0xaf, 0xbc, 0x12, 0x47, 0x0a, 0x25, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x10, 0x67, 0x1a, 0x1c, 0xaa,
	0xb6, 0x18, 0x18, 0xe4, 0xb8, 0x8a, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe5, 0x8c, 0xb9, 0xe9,
	0x85, 0x8d, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0x12, 0x39, 0x0a, 0x1d, 0x43,
	0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x45,
	0x41, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x10, 0x68, 0x1a, 0x16,
	0xaa, 0xb6, 0x18, 0x12, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0xe6, 0x88, 0xbf, 0xe8, 0x87, 0xaa,
	0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0x12, 0x46, 0x0a, 0x24, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x52, 0x4f, 0x4f,
	0x4d, 0x5f, 0x4b, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x57, 0x41, 0x52, 0x53, 0x49, 0x4d, 0x10, 0x69,
	0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0xe6, 0x88, 0xbf, 0xe7,
	0x8e, 0x8b, 0xe8, 0x80, 0x85, 0xe6, 0xa8, 0xa1, 0xe6, 0x8b, 0x9f, 0xe6, 0x88, 0x98, 0x12, 0x2b,
	0x0a, 0x18, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x43, 0x41, 0x4d, 0x50, 0x10, 0x6a, 0x1a, 0x0d, 0xaa, 0xb6,
	0x18, 0x09, 0xe8, 0xae, 0xad, 0xe7, 0xbb, 0x83, 0xe8, 0x90, 0xa5, 0x12, 0x3a, 0x0a, 0x1e, 0x43,
	0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x5f, 0x48, 0x55, 0x4e, 0x44, 0x52, 0x45, 0x44, 0x57, 0x41, 0x52, 0x10, 0x6b, 0x1a,
	0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0x8c, 0xb9, 0xe9, 0x85, 0x8d, 0xe7, 0x99, 0xbe, 0xe4, 0xba,
	0xba, 0xe5, 0xa4, 0xa7, 0xe6, 0x88, 0x98, 0x12, 0x28, 0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x52, 0x55, 0x49, 0x54,
	0x10, 0x6c, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe6, 0x96, 0xb0, 0xe6, 0x89, 0x8b, 0xe6, 0x88,
	0x98, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x41, 0x53, 0x55, 0x41, 0x4c, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x6d,
	0x12, 0x1d, 0x0a, 0x18, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x41, 0x53, 0x55, 0x41, 0x4c, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0xc6, 0x01, 0x1a,
	0x04, 0x88, 0xf9, 0x2b, 0x01, 0x2a, 0xa2, 0x01, 0x0a, 0x12, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x12, 0x17, 0x0a, 0x13,
	0x47, 0x41, 0x4d, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4e,
	0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x16, 0x47, 0x41, 0x4d, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x43, 0x10,
	0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe7, 0xbb, 0x8f, 0xe5, 0x85, 0xb8, 0xe6, 0xa8, 0xa1,
	0xe5, 0xbc, 0x8f, 0x12, 0x2d, 0x0a, 0x17, 0x47, 0x41, 0x4d, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x02,
	0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0xe6, 0xa8, 0xa1, 0xe5,
	0xbc, 0x8f, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x41, 0x4d, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x2a, 0x8f, 0x03, 0x0a, 0x0c, 0x45,
	0x50, 0x76, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x12, 0x50,
	0x56, 0x50, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe6, 0x97, 0xa0, 0xe6, 0x95, 0x88, 0xe5,
	0x80, 0xbc, 0x12, 0x2a, 0x0a, 0x14, 0x50, 0x56, 0x50, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x42, 0x52, 0x4f, 0x4e, 0x5a, 0x45, 0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6,
	0x18, 0x0c, 0xe5, 0x80, 0x94, 0xe5, 0xbc, 0xba, 0xe9, 0x9d, 0x92, 0xe9, 0x93, 0x9c, 0x12, 0x2a,
	0x0a, 0x14, 0x50, 0x56, 0x50, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x49, 0x4c, 0x56, 0x45, 0x52, 0x10, 0x02, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe7, 0xa7,
	0xa9, 0xe5, 0xba, 0x8f, 0xe7, 0x99, 0xbd, 0xe9, 0x93, 0xb6, 0x12, 0x28, 0x0a, 0x12, 0x50, 0x56,
	0x50, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x4f, 0x4c, 0x44,
	0x10, 0x03, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0x8d, 0xa3, 0xe8, 0x80, 0x80, 0xe9, 0xbb,
	0x84, 0xe9, 0x87, 0x91, 0x12, 0x2c, 0x0a, 0x16, 0x50, 0x56, 0x50, 0x5f, 0x52, 0x41, 0x4e, 0x4b,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x49, 0x4e, 0x55, 0x4d, 0x10, 0x04,
	0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0xb0, 0x8a, 0xe8, 0xb4, 0xb5, 0xe9, 0x93, 0x82, 0xe9,
	0x87, 0x91, 0x12, 0x2b, 0x0a, 0x15, 0x50, 0x56, 0x50, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x41, 0x4d, 0x4f, 0x4e, 0x44, 0x10, 0x05, 0x1a, 0x10, 0xaa,
	0xb6, 0x18, 0x0c, 0xe6, 0xb0, 0xb8, 0xe6, 0x81, 0x92, 0xe9, 0x92, 0xbb, 0xe7, 0x9f, 0xb3, 0x12,
	0x2b, 0x0a, 0x15, 0x50, 0x56, 0x50, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x59, 0x41, 0x4f, 0x10, 0x06, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c,
	0xe8, 0x87, 0xb3, 0xe5, 0xb0, 0x8a, 0xe6, 0x98, 0x9f, 0xe8, 0x80, 0x80, 0x12, 0x28, 0x0a, 0x12,
	0x50, 0x56, 0x50, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b, 0x49,
	0x4e, 0x47, 0x10, 0x07, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x9c, 0x80, 0xe5, 0xbc, 0xba,
	0xe7, 0x8e, 0x8b, 0xe8, 0x80, 0x85, 0x12, 0x24, 0x0a, 0x11, 0x50, 0x56, 0x50, 0x5f, 0x52, 0x41,
	0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x08, 0x1a, 0x0d, 0xaa,
	0xb6, 0x18, 0x09, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe5, 0x80, 0xbc, 0x2a, 0x83, 0x07, 0x0a,
	0x12, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x55, 0x49, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x12, 0x30, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x5f, 0x55, 0x49, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe6, 0x9c, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe7,
	0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0x12, 0x29, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x5f, 0x55, 0x49, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x49, 0x53, 0x48,
	0x4f, 0x55, 0x10, 0x01, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b,
	0x12, 0x33, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x55,
	0x49, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x52, 0x45, 0x4e, 0x58, 0x49, 0x4e, 0x58,
	0x49, 0x10, 0x02, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0xba, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x12, 0x27, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x5f, 0x55, 0x49, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x50,
	0x10, 0x03, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0x95, 0x86, 0xe5, 0x9f, 0x8e, 0x12, 0x29,
	0x0a, 0x19, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x55, 0x49, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x1a, 0x0a, 0xaa,
	0xb6, 0x18, 0x06, 0xe5, 0xa4, 0xa7, 0xe5, 0x8e, 0x85, 0x12, 0x35, 0x0a, 0x1f, 0x52, 0x45, 0x53,
	0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x55, 0x49, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x05, 0x1a, 0x10,
	0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x8c, 0xb9, 0xe9, 0x85, 0x8d, 0xe7, 0xad, 0x89, 0xe5, 0xbe, 0x85,
	0x12, 0x30, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x55,
	0x49, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x06,
	0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x8a, 0xa0, 0xe8, 0xbd, 0xbd, 0xe7, 0xad, 0x89, 0xe5,
	0xbe, 0x85, 0x12, 0x30, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d,
	0x5f, 0x55, 0x49, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x4c,
	0x6f, 0x72, 0x64, 0x10, 0x07, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe9, 0x80, 0x89, 0xe9, 0xa2,
	0x86, 0xe4, 0xb8, 0xbb, 0x12, 0x27, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x5f, 0x55, 0x49, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x10,
	0x08, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe7, 0xbb, 0x93, 0xe7, 0xae, 0x97, 0x12, 0x36, 0x0a,
	0x1a, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x55, 0x49, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x47, 0x45, 0x54, 0x10, 0x09, 0x1a, 0x16, 0xaa,
	0xb6, 0x18, 0x12, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5,
	0xb1, 0x95, 0xe7, 0xa4, 0xba, 0x12, 0x35, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x5f, 0x55, 0x49, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x52, 0x4f,
	0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x10, 0x0a, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c,
	0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe6, 0x94, 0xb6, 0xe9, 0x9b, 0x86, 0x12, 0x3c, 0x0a, 0x1a,
	0x52, 0x45, 0x53, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x55, 0x49, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x10, 0x0b, 0x1a, 0x1c, 0xaa, 0xb6,
	0x18, 0x18, 0xe9, 0xa6, 0x96, 0xe6, 0xac, 0xa1, 0xe7, 0x99, 0xbb, 0xe9, 0x99, 0x86, 0xe4, 0xbf,
	0xae, 0xe6, 0x94, 0xb9, 0xe5, 0x90, 0x8d, 0xe5, 0xad, 0x97, 0x12, 0x37, 0x0a, 0x21, 0x52, 0x45,
	0x53, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x55, 0x49, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x6f, 0x76, 0x69, 0x63, 0x65, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x10,
	0x0c, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x96, 0xb0, 0xe6, 0x89, 0x8b, 0xe6, 0x95, 0x99,
	0xe7, 0xa8, 0x8b, 0x12, 0x34, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x5f, 0x55, 0x49, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x6c, 0x10, 0x0d, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe4, 0xb8, 0xaa, 0xe6, 0x80, 0xa7,
	0xe5, 0x8c, 0x96, 0xe8, 0xa3, 0x85, 0xe6, 0x89, 0xae, 0x12, 0x3f, 0x0a, 0x1d, 0x52, 0x45, 0x53,
	0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x55, 0x49, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x61, 0x72, 0x65, 0x65, 0x72, 0x4c, 0x6f, 0x72, 0x64, 0x10, 0x0e, 0x1a, 0x1c, 0xaa, 0xb6,
	0x18, 0x18, 0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0xba, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6, 0xa3,
	0x8b, 0xe6, 0x89, 0x8b, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x12, 0x37, 0x0a, 0x21, 0x52, 0x45,
	0x53, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x55, 0x49, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x10,
	0x0f, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe7, 0x8e, 0xa9, 0xe6, 0xb3, 0x95, 0xe4, 0xb8, 0xad,
	0xe5, 0xbf, 0x83, 0x12, 0x2d, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x5f, 0x55, 0x49, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x10, 0x10, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe6, 0x88, 0x98, 0xe4,
	0xbb, 0xa4, 0x2a, 0xb1, 0x0c, 0x0a, 0x16, 0x45, 0x50, 0x76, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a,
	0x1d, 0x50, 0x56, 0x50, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe6, 0x97, 0xa0, 0xe6, 0x95, 0x88, 0xe5, 0x80, 0xbc, 0x12,
	0x2c, 0x0a, 0x15, 0x50, 0x56, 0x50, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x42, 0x52, 0x4f, 0x4e, 0x5a, 0x45, 0x31, 0x10, 0x01, 0x1a, 0x11, 0xaa, 0xb6, 0x18, 0x0d,
	0xe5, 0x80, 0x94, 0xe5, 0xbc, 0xba, 0xe9, 0x9d, 0x92, 0xe9, 0x93, 0x9c, 0x49, 0x12, 0x2d, 0x0a,
	0x15, 0x50, 0x56, 0x50, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42,
	0x52, 0x4f, 0x4e, 0x5a, 0x45, 0x32, 0x10, 0x02, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0xe5, 0x80,
	0x94, 0xe5, 0xbc, 0xba, 0xe9, 0x9d, 0x92, 0xe9, 0x93, 0x9c, 0x49, 0x49, 0x12, 0x2e, 0x0a, 0x15,
	0x50, 0x56, 0x50, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x52,
	0x4f, 0x4e, 0x5a, 0x45, 0x33, 0x10, 0x03, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe5, 0x80, 0x94,
	0xe5, 0xbc, 0xba, 0xe9, 0x9d, 0x92, 0xe9, 0x93, 0x9c, 0x49, 0x49, 0x49, 0x12, 0x2d, 0x0a, 0x15,
	0x50, 0x56, 0x50, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x52,
	0x4f, 0x4e, 0x5a, 0x45, 0x34, 0x10, 0x04, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0xe5, 0x80, 0x94,
	0xe5, 0xbc, 0xba, 0xe9, 0x9d, 0x92, 0xe9, 0x93, 0x9c, 0x49, 0x56, 0x12, 0x2c, 0x0a, 0x15, 0x50,
	0x56, 0x50, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x52, 0x4f,
	0x4e, 0x5a, 0x45, 0x35, 0x10, 0x05, 0x1a, 0x11, 0xaa, 0xb6, 0x18, 0x0d, 0xe5, 0x80, 0x94, 0xe5,
	0xbc, 0xba, 0xe9, 0x9d, 0x92, 0xe9, 0x93, 0x9c, 0x56, 0x12, 0x2c, 0x0a, 0x15, 0x50, 0x56, 0x50,
	0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x49, 0x4c, 0x56, 0x45,
	0x52, 0x31, 0x10, 0x06, 0x1a, 0x11, 0xaa, 0xb6, 0x18, 0x0d, 0xe7, 0xa7, 0xa9, 0xe5, 0xba, 0x8f,
	0xe7, 0x99, 0xbd, 0xe9, 0x93, 0xb6, 0x49, 0x12, 0x2d, 0x0a, 0x15, 0x50, 0x56, 0x50, 0x5f, 0x52,
	0x41, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x49, 0x4c, 0x56, 0x45, 0x52, 0x32,
	0x10, 0x07, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0xe7, 0xa7, 0xa9, 0xe5, 0xba, 0x8f, 0xe7, 0x99,
	0xbd, 0xe9, 0x93, 0xb6, 0x49, 0x49, 0x12, 0x2e, 0x0a, 0x15, 0x50, 0x56, 0x50, 0x5f, 0x52, 0x41,
	0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x49, 0x4c, 0x56, 0x45, 0x52, 0x33, 0x10,
	0x08, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe7, 0xa7, 0xa9, 0xe5, 0xba, 0x8f, 0xe7, 0x99, 0xbd,
	0xe9, 0x93, 0xb6, 0x49, 0x49, 0x49, 0x12, 0x2d, 0x0a, 0x15, 0x50, 0x56, 0x50, 0x5f, 0x52, 0x41,
	0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x49, 0x4c, 0x56, 0x45, 0x52, 0x34, 0x10,
	0x09, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0xe7, 0xa7, 0xa9, 0xe5, 0xba, 0x8f, 0xe7, 0x99, 0xbd,
	0xe9, 0x93, 0xb6, 0x49, 0x56, 0x12, 0x2c, 0x0a, 0x15, 0x50, 0x56, 0x50, 0x5f, 0x52, 0x41, 0x4e,
	0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x49, 0x4c, 0x56, 0x45, 0x52, 0x35, 0x10, 0x0a,
	0x1a, 0x11, 0xaa, 0xb6, 0x18, 0x0d, 0xe7, 0xa7, 0xa9, 0xe5, 0xba, 0x8f, 0xe7, 0x99, 0xbd, 0xe9,
	0x93, 0xb6, 0x56, 0x12, 0x2a, 0x0a, 0x13, 0x50, 0x56, 0x50, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x31, 0x10, 0x0b, 0x1a, 0x11, 0xaa, 0xb6,
	0x18, 0x0d, 0xe8, 0x8d, 0xa3, 0xe8, 0x80, 0x80, 0xe9, 0xbb, 0x84, 0xe9, 0x87, 0x91, 0x49, 0x12,
	0x2b, 0x0a, 0x13, 0x50, 0x56, 0x50, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x32, 0x10, 0x0c, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0xe8, 0x8d,
	0xa3, 0xe8, 0x80, 0x80, 0xe9, 0xbb, 0x84, 0xe9, 0x87, 0x91, 0x49, 0x49, 0x12, 0x2c, 0x0a, 0x13,
	0x50, 0x56, 0x50, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x4f,
	0x4c, 0x44, 0x33, 0x10, 0x0d, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe8, 0x8d, 0xa3, 0xe8, 0x80,
	0x80, 0xe9, 0xbb, 0x84, 0xe9, 0x87, 0x91, 0x49, 0x49, 0x49, 0x12, 0x2b, 0x0a, 0x13, 0x50, 0x56,
	0x50, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x4f, 0x4c, 0x44,
	0x34, 0x10, 0x0e, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0xe8, 0x8d, 0xa3, 0xe8, 0x80, 0x80, 0xe9,
	0xbb, 0x84, 0xe9, 0x87, 0x91, 0x49, 0x56, 0x12, 0x2a, 0x0a, 0x13, 0x50, 0x56, 0x50, 0x5f, 0x52,
	0x41, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x35, 0x10, 0x0f,
	0x1a, 0x11, 0xaa, 0xb6, 0x18, 0x0d, 0xe8, 0x8d, 0xa3, 0xe8, 0x80, 0x80, 0xe9, 0xbb, 0x84, 0xe9,
	0x87, 0x91, 0x56, 0x12, 0x2e, 0x0a, 0x17, 0x50, 0x56, 0x50, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x49, 0x4e, 0x55, 0x4d, 0x31, 0x10, 0x10,
	0x1a, 0x11, 0xaa, 0xb6, 0x18, 0x0d, 0xe5, 0xb0, 0x8a, 0xe8, 0xb4, 0xb5, 0xe9, 0x93, 0x82, 0xe9,
	0x87, 0x91, 0x49, 0x12, 0x2f, 0x0a, 0x17, 0x50, 0x56, 0x50, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x49, 0x4e, 0x55, 0x4d, 0x32, 0x10, 0x11,
	0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0xe5, 0xb0, 0x8a, 0xe8, 0xb4, 0xb5, 0xe9, 0x93, 0x82, 0xe9,
	0x87, 0x91, 0x49, 0x49, 0x12, 0x30, 0x0a, 0x17, 0x50, 0x56, 0x50, 0x5f, 0x52, 0x41, 0x4e, 0x4b,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x49, 0x4e, 0x55, 0x4d, 0x33, 0x10,
	0x12, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe5, 0xb0, 0x8a, 0xe8, 0xb4, 0xb5, 0xe9, 0x93, 0x82,
	0xe9, 0x87, 0x91, 0x49, 0x49, 0x49, 0x12, 0x2f, 0x0a, 0x17, 0x50, 0x56, 0x50, 0x5f, 0x52, 0x41,
	0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x49, 0x4e, 0x55, 0x4d,
	0x34, 0x10, 0x13, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0xe5, 0xb0, 0x8a, 0xe8, 0xb4, 0xb5, 0xe9,
	0x93, 0x82, 0xe9, 0x87, 0x91, 0x49, 0x56, 0x12, 0x2e, 0x0a, 0x17, 0x50, 0x56, 0x50, 0x5f, 0x52,
	0x41, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x49, 0x4e, 0x55,
	0x4d, 0x35, 0x10, 0x14, 0x1a, 0x11, 0xaa, 0xb6, 0x18, 0x0d, 0xe5, 0xb0, 0x8a, 0xe8, 0xb4, 0xb5,
	0xe9, 0x93, 0x82, 0xe9, 0x87, 0x91, 0x56, 0x12, 0x2d, 0x0a, 0x16, 0x50, 0x56, 0x50, 0x5f, 0x52,
	0x41, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x41, 0x4d, 0x4f, 0x4e, 0x44,
	0x31, 0x10, 0x15, 0x1a, 0x11, 0xaa, 0xb6, 0x18, 0x0d, 0xe6, 0xb0, 0xb8, 0xe6, 0x81, 0x92, 0xe9,
	0x92, 0xbb, 0xe7, 0x9f, 0xb3, 0x49, 0x12, 0x2e, 0x0a, 0x16, 0x50, 0x56, 0x50, 0x5f, 0x52, 0x41,
	0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x41, 0x4d, 0x4f, 0x4e, 0x44, 0x32,
	0x10, 0x16, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0xe6, 0xb0, 0xb8, 0xe6, 0x81, 0x92, 0xe9, 0x92,
	0xbb, 0xe7, 0x9f, 0xb3, 0x49, 0x49, 0x12, 0x2f, 0x0a, 0x16, 0x50, 0x56, 0x50, 0x5f, 0x52, 0x41,
	0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x41, 0x4d, 0x4f, 0x4e, 0x44, 0x33,
	0x10, 0x17, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe6, 0xb0, 0xb8, 0xe6, 0x81, 0x92, 0xe9, 0x92,
	0xbb, 0xe7, 0x9f, 0xb3, 0x49, 0x49, 0x49, 0x12, 0x2e, 0x0a, 0x16, 0x50, 0x56, 0x50, 0x5f, 0x52,
	0x41, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x41, 0x4d, 0x4f, 0x4e, 0x44,
	0x34, 0x10, 0x18, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0xe6, 0xb0, 0xb8, 0xe6, 0x81, 0x92, 0xe9,
	0x92, 0xbb, 0xe7, 0x9f, 0xb3, 0x49, 0x56, 0x12, 0x2d, 0x0a, 0x16, 0x50, 0x56, 0x50, 0x5f, 0x52,
	0x41, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x41, 0x4d, 0x4f, 0x4e, 0x44,
	0x35, 0x10, 0x19, 0x1a, 0x11, 0xaa, 0xb6, 0x18, 0x0d, 0xe6, 0xb0, 0xb8, 0xe6, 0x81, 0x92, 0xe9,
	0x92, 0xbb, 0xe7, 0x9f, 0xb3, 0x56, 0x12, 0x2d, 0x0a, 0x16, 0x50, 0x56, 0x50, 0x5f, 0x52, 0x41,
	0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x59, 0x41, 0x4f, 0x31,
	0x10, 0x1a, 0x1a, 0x11, 0xaa, 0xb6, 0x18, 0x0d, 0xe8, 0x87, 0xb3, 0xe5, 0xb0, 0x8a, 0xe6, 0x98,
	0x9f, 0xe8, 0x80, 0x80, 0x49, 0x12, 0x2e, 0x0a, 0x16, 0x50, 0x56, 0x50, 0x5f, 0x52, 0x41, 0x4e,
	0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x59, 0x41, 0x4f, 0x32, 0x10,
	0x1b, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0xe8, 0x87, 0xb3, 0xe5, 0xb0, 0x8a, 0xe6, 0x98, 0x9f,
	0xe8, 0x80, 0x80, 0x49, 0x49, 0x12, 0x2f, 0x0a, 0x16, 0x50, 0x56, 0x50, 0x5f, 0x52, 0x41, 0x4e,
	0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x59, 0x41, 0x4f, 0x33, 0x10,
	0x1c, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe8, 0x87, 0xb3, 0xe5, 0xb0, 0x8a, 0xe6, 0x98, 0x9f,
	0xe8, 0x80, 0x80, 0x49, 0x49, 0x49, 0x12, 0x2e, 0x0a, 0x16, 0x50, 0x56, 0x50, 0x5f, 0x52, 0x41,
	0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x59, 0x41, 0x4f, 0x34,
	0x10, 0x1d, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0xe8, 0x87, 0xb3, 0xe5, 0xb0, 0x8a, 0xe6, 0x98,
	0x9f, 0xe8, 0x80, 0x80, 0x49, 0x56, 0x12, 0x2d, 0x0a, 0x16, 0x50, 0x56, 0x50, 0x5f, 0x52, 0x41,
	0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x59, 0x41, 0x4f, 0x35,
	0x10, 0x1e, 0x1a, 0x11, 0xaa, 0xb6, 0x18, 0x0d, 0xe8, 0x87, 0xb3, 0xe5, 0xb0, 0x8a, 0xe6, 0x98,
	0x9f, 0xe8, 0x80, 0x80, 0x56, 0x12, 0x2c, 0x0a, 0x16, 0x50, 0x56, 0x50, 0x5f, 0x52, 0x41, 0x4e,
	0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x6f, 0x73, 0x74, 0x4b, 0x69, 0x6e, 0x67, 0x10,
	0x1f, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x9c, 0x80, 0xe5, 0xbc, 0xba, 0xe7, 0x8e, 0x8b,
	0xe8, 0x80, 0x85, 0x12, 0x31, 0x0a, 0x1b, 0x50, 0x56, 0x50, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x6f, 0x6e, 0x6f, 0x72, 0x4d, 0x6f, 0x73, 0x74, 0x4b, 0x69,
	0x6e, 0x67, 0x10, 0x20, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0x8d, 0xa3, 0xe8, 0x80, 0x80,
	0xe7, 0x8e, 0x8b, 0xe8, 0x80, 0x85, 0x2a, 0x8b, 0x02, 0x0a, 0x14, 0x45, 0x53, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x41, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x32, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x41,
	0x4e, 0x4b, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe6, 0x97, 0xa0, 0xe6, 0x95, 0x88,
	0xe5, 0x80, 0xbc, 0x12, 0x39, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x57, 0x45, 0x45,
	0x4b, 0x10, 0x01, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe6,
	0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xe5, 0x91, 0xa8, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0x12, 0x44,
	0x0a, 0x1f, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x41, 0x4e,
	0x4b, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f, 0x50, 0x4c, 0x55,
	0x53, 0x10, 0x02, 0x1a, 0x1f, 0xaa, 0xb6, 0x18, 0x1b, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe6,
	0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xe5, 0x91, 0xa8, 0xe8, 0xa1, 0xa5, 0xe5, 0x85, 0x85, 0xe5, 0xa5,
	0x96, 0xe5, 0x8a, 0xb1, 0x12, 0x3e, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x45,
	0x54, 0x54, 0x4c, 0x45, 0x10, 0x03, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe8, 0xb5, 0x9b, 0xe5,
	0xad, 0xa3, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xe7, 0xbb, 0x93, 0xe7, 0xae, 0x97, 0xe5, 0xa5,
	0x96, 0xe5, 0x8a, 0xb1, 0x2a, 0xda, 0x01, 0x0a, 0x16, 0x45, 0x45, 0x6c, 0x6f, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x38, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x5f, 0x45, 0x4c, 0x4f, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe4, 0xb8, 0x8d, 0xe4, 0xbf, 0x9d, 0xe6, 0x8a, 0xa4,
	0x45, 0x4c, 0x4f, 0xe6, 0x89, 0xa3, 0xe5, 0x88, 0x86, 0x12, 0x47, 0x0a, 0x1f, 0x52, 0x45, 0x53,
	0x5f, 0x45, 0x4c, 0x4f, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x22,
	0xaa, 0xb6, 0x18, 0x1e, 0xe4, 0xbf, 0x9d, 0xe6, 0x8a, 0xa4, 0xe4, 0xb8, 0x8d, 0xe4, 0xbc, 0x9a,
	0xe8, 0xb7, 0x8c, 0xe8, 0x90, 0xbd, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe6, 0xae, 0xb5, 0xe4,
	0xbd, 0x8d, 0x12, 0x3d, 0x0a, 0x24, 0x52, 0x45, 0x53, 0x5f, 0x45, 0x4c, 0x4f, 0x5f, 0x53, 0x45,
	0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x5f, 0x4e, 0x4f,
	0x5f, 0x44, 0x45, 0x44, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x1a, 0x13, 0xaa, 0xb6,
	0x18, 0x0f, 0xe5, 0xae, 0x8c, 0xe5, 0x85, 0xa8, 0xe4, 0xb8, 0x8d, 0xe6, 0x89, 0xa3, 0xe5, 0x88,
	0x86, 0x2a, 0x66, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x53, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x1a, 0x0d,
	0xaa, 0xb6, 0x18, 0x09, 0xe6, 0x97, 0xa0, 0xe6, 0x95, 0x88, 0xe5, 0x80, 0xbc, 0x12, 0x2a, 0x0a,
	0x14, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x88, 0x9d,
	0xe5, 0xa7, 0x8b, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0x2a, 0xb3, 0x06, 0x0a, 0x11, 0x43, 0x4f,
	0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12,
	0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x5f,
	0x10, 0x00, 0x12, 0x24, 0x0a, 0x11, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x01, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe6,
	0x8e, 0x89, 0xe8, 0x90, 0xbd, 0xe7, 0x89, 0xa9, 0x12, 0x22, 0x0a, 0x12, 0x43, 0x4f, 0x4d, 0x5f,
	0x47, 0x41, 0x4d, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x10, 0x02,
	0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe8, 0xb4, 0xa7, 0xe5, 0xb8, 0x81, 0x12, 0x21, 0x0a, 0x11,
	0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f,
	0x50, 0x10, 0x03, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe9, 0x81, 0x93, 0xe5, 0x85, 0xb7, 0x12,
	0x27, 0x0a, 0x14, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x48, 0x45, 0x41, 0x44, 0x49, 0x4d, 0x47, 0x10, 0x04, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe5,
	0xa4, 0xb4, 0xe5, 0x83, 0x8f, 0xe6, 0xa1, 0x86, 0x12, 0x21, 0x0a, 0x11, 0x43, 0x4f, 0x4d, 0x5f,
	0x47, 0x41, 0x4d, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x10, 0x05, 0x1a,
	0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0xa4, 0xb4, 0xe5, 0x83, 0x8f, 0x12, 0x2b, 0x0a, 0x15, 0x43,
	0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x4f, 0x4b, 0x45,
	0x4e, 0x45, 0x58, 0x50, 0x10, 0x06, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x88, 0x98, 0xe4,
	0xbb, 0xa4, 0xe7, 0xbb, 0x8f, 0xe9, 0xaa, 0x8c, 0x12, 0x2b, 0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x5f,
	0x47, 0x41, 0x4d, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x53, 0x4b, 0x49,
	0x4e, 0x10, 0x07, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0xe7,
	0x9a, 0xae, 0xe8, 0x82, 0xa4, 0x12, 0x2d, 0x0a, 0x17, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x45, 0x58, 0x50,
	0x10, 0x09, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x88, 0x90, 0xe5, 0xb0, 0xb1, 0xe7, 0xbb,
	0x8f, 0xe9, 0xaa, 0x8c, 0x12, 0x21, 0x0a, 0x11, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x10, 0x0a, 0x1a, 0x0a, 0xaa, 0xb6, 0x18,
	0x06, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0x12, 0x2a, 0x0a, 0x14, 0x43, 0x4f, 0x4d, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x41, 0x43, 0x4e, 0x54, 0x45, 0x58, 0x50, 0x10,
	0x0b, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe7, 0xbb, 0x8f,
	0xe9, 0xaa, 0x8c, 0x12, 0x27, 0x0a, 0x17, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x10, 0x0c,
	0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe6, 0xa3, 0x8b, 0xe7, 0x9b, 0x98, 0x12, 0x24, 0x0a, 0x14,
	0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x4f, 0x55,
	0x50, 0x4f, 0x4e, 0x53, 0x10, 0x0e, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe7, 0x82, 0xb9, 0xe5,
	0x88, 0xb8, 0x12, 0x22, 0x0a, 0x12, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x45, 0x4d, 0x4f, 0x4a, 0x49, 0x10, 0x0f, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06,
	0xe8, 0xa1, 0xa8, 0xe6, 0x83, 0x85, 0x12, 0x27, 0x0a, 0x17, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x45, 0x46,
	0x54, 0x10, 0x10, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe7, 0x89, 0xb9, 0xe6, 0x95, 0x88, 0x12,
	0x31, 0x0a, 0x1b, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x43, 0x48, 0x45, 0x53, 0x53, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x50, 0x41, 0x52, 0x54, 0x10, 0x11,
	0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0xa3, 0x8b, 0xe7, 0x9b, 0x98, 0xe9, 0x83, 0xa8, 0xe4,
	0xbb, 0xb6, 0x12, 0x30, 0x0a, 0x1a, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x44, 0x45, 0x43, 0x4f, 0x52, 0x41, 0x54, 0x45,
	0x10, 0x12, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe9, 0x85,
	0x8d, 0xe9, 0xa5, 0xb0, 0x12, 0x35, 0x0a, 0x1c, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x43, 0x49,
	0x45, 0x4e, 0x43, 0x59, 0x10, 0x13, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe6, 0xa3, 0x8b, 0xe6,
	0x89, 0x8b, 0xe7, 0x86, 0x9f, 0xe7, 0xbb, 0x83, 0xe5, 0xba, 0xa6, 0x12, 0x32, 0x0a, 0x19, 0x43,
	0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x52, 0x45, 0x43, 0x52,
	0x55, 0x49, 0x54, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x14, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f,
	0xe6, 0x96, 0xb0, 0xe6, 0x89, 0x8b, 0xe6, 0x88, 0x98, 0xe7, 0xa7, 0xaf, 0xe5, 0x88, 0x86, 0x2a,
	0xed, 0x03, 0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4d, 0x4f, 0x4e, 0x45,
	0x59, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4d,
	0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x1a, 0x43, 0x4f, 0x4d,
	0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x49, 0x41, 0x4d, 0x4f, 0x4e, 0x44, 0x10, 0x01, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe9,
	0x92, 0xbb, 0xe7, 0x9f, 0xb3, 0x12, 0x31, 0x0a, 0x1e, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x45, 0x49, 0x54, 0x10, 0x02, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe5,
	0x81, 0x87, 0xe7, 0x82, 0xb9, 0xe5, 0x88, 0xb8, 0x12, 0x30, 0x0a, 0x1d, 0x43, 0x4f, 0x4d, 0x5f,
	0x47, 0x41, 0x4d, 0x45, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x03, 0x1a, 0x0d, 0xaa, 0xb6, 0x18,
	0x09, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe5, 0xb8, 0x81, 0x12, 0x31, 0x0a, 0x1b, 0x43, 0x4f,
	0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x46, 0x52, 0x41, 0x47, 0x10, 0x04, 0x1a, 0x10, 0xaa, 0xb6, 0x18,
	0x0c, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe7, 0xa2, 0x8e, 0xe7, 0x89, 0x87, 0x12, 0x31, 0x0a,
	0x1b, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x4b, 0x49, 0x4e, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x05, 0x1a, 0x10,
	0xaa, 0xb6, 0x18, 0x0c, 0xe7, 0x9a, 0xae, 0xe8, 0x82, 0xa4, 0xe7, 0xa2, 0x8e, 0xe7, 0x89, 0x87,
	0x12, 0x31, 0x0a, 0x1b, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4d, 0x4f, 0x4e, 0x45,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x45, 0x58, 0x50, 0x10,
	0x07, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x88, 0x98, 0xe4, 0xbb, 0xa4, 0xe7, 0xbb, 0x8f,
	0xe9, 0xaa, 0x8c, 0x12, 0x32, 0x0a, 0x1f, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4d,
	0x4f, 0x4e, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x08, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe4, 0xb8,
	0x87, 0xe8, 0xb1, 0xa1, 0xe5, 0xb8, 0x81, 0x12, 0x3a, 0x0a, 0x24, 0x43, 0x4f, 0x4d, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48,
	0x45, 0x53, 0x53, 0x44, 0x45, 0x43, 0x4f, 0x52, 0x41, 0x54, 0x45, 0x46, 0x52, 0x41, 0x47, 0x10,
	0x09, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe9, 0x85, 0x8d, 0xe9, 0xa5, 0xb0, 0xe7, 0xa2, 0x8e,
	0xe7, 0x89, 0x87, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4d,
	0x4f, 0x4e, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x0a, 0x2a,
	0x94, 0x03, 0x0a, 0x19, 0x43, 0x4f, 0x4d, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x44, 0x45, 0x43,
	0x4f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x12, 0x22, 0x0a,
	0x1e, 0x43, 0x4f, 0x4d, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x44, 0x45, 0x43, 0x4f, 0x52, 0x41,
	0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x2c, 0x0a, 0x1c, 0x43, 0x4f, 0x4d, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x44, 0x45,
	0x43, 0x4f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x4d,
	0x45, 0x10, 0x01, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0x8d, 0xa1, 0xe6, 0xa1, 0x86, 0x12,
	0x2c, 0x0a, 0x1c, 0x43, 0x4f, 0x4d, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x44, 0x45, 0x43, 0x4f,
	0x52, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x10,
	0x02, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe8, 0xaf, 0xad, 0xe9, 0x9f, 0xb3, 0x12, 0x37, 0x0a,
	0x21, 0x43, 0x4f, 0x4d, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x44, 0x45, 0x43, 0x4f, 0x52, 0x41,
	0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x45, 0x46, 0x46, 0x45,
	0x43, 0x54, 0x10, 0x03, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x8d, 0xa1, 0xe9, 0x9d, 0xa2,
	0xe7, 0x89, 0xb9, 0xe6, 0x95, 0x88, 0x12, 0x3a, 0x0a, 0x24, 0x43, 0x4f, 0x4d, 0x5f, 0x43, 0x48,
	0x45, 0x53, 0x53, 0x44, 0x45, 0x43, 0x4f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x41, 0x52, 0x44, 0x41, 0x4e, 0x49, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04,
	0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x8d, 0xa1, 0xe9, 0x9d, 0xa2, 0xe5, 0x8a, 0xa8, 0xe7,
	0x94, 0xbb, 0x12, 0x3d, 0x0a, 0x21, 0x43, 0x4f, 0x4d, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x44,
	0x45, 0x43, 0x4f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b, 0x49, 0x4c,
	0x4c, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x10, 0x05, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6,
	0x88, 0x98, 0xe5, 0x9c, 0xba, 0xe5, 0x87, 0xbb, 0xe6, 0x9d, 0x80, 0xe6, 0x92, 0xad, 0xe6, 0x8a,
	0xa5, 0x12, 0x43, 0x0a, 0x27, 0x43, 0x4f, 0x4d, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x44, 0x45,
	0x43, 0x4f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x4e, 0x47,
	0x45, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x10, 0x06, 0x1a, 0x16,
	0xaa, 0xb6, 0x18, 0x12, 0xe6, 0x88, 0x98, 0xe5, 0x9c, 0xba, 0xe8, 0xb6, 0x85, 0xe7, 0xa5, 0x9e,
	0xe6, 0x92, 0xad, 0xe6, 0x8a, 0xa5, 0x2a, 0xfd, 0x02, 0x0a, 0x23, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x38, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b,
	0x0a, 0x2b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x38, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x1a,
	0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0xb8, 0xb8, 0xe8, 0xa7, 0x84, 0x12, 0x43, 0x0a, 0x2d, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x38, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x48,
	0x65, 0x72, 0x6f, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x10, 0x01, 0x1a, 0x10,
	0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd,
	0x12, 0x3f, 0x0a, 0x29, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x38, 0x49, 0x6e, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x71, 0x75, 0x69, 0x70, 0x10, 0x02, 0x1a,
	0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0x8e, 0xb7, 0xe5, 0xbe, 0x97, 0xe8, 0xa3, 0x85, 0xe5, 0xa4,
	0x87, 0x12, 0x3f, 0x0a, 0x2c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x38, 0x49, 0x6e, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63,
	0x65, 0x10, 0x03, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe8, 0xae, 0xad, 0xe7, 0xbb, 0x83, 0xe8,
	0x90, 0xa5, 0x12, 0x48, 0x0a, 0x2f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x38, 0x49, 0x6e,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x65, 0x73, 0x74, 0x10, 0x04, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe5, 0xb9, 0xb3,
	0xe8, 0xa1, 0xa1, 0xe6, 0x80, 0xa7, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0x1a, 0x08, 0x88, 0xf9,
	0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xf0, 0x07, 0x0a, 0x07, 0x45, 0x4d, 0x61, 0x69, 0x6c,
	0x49, 0x44, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4d, 0x61, 0x69, 0x6c, 0x49, 0x44, 0x5f, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x5f, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x0b, 0x45,
	0x54, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x69, 0x6c, 0x49, 0x44, 0x10, 0x01, 0x1a, 0x12, 0xaa, 0xb6,
	0x18, 0x0e, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe9, 0x82, 0xae, 0xe4, 0xbb, 0xb6, 0x49, 0x44,
	0x12, 0x33, 0x0a, 0x15, 0x45, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x77,
	0x61, 0x72, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x49, 0x44, 0x10, 0x02, 0x1a, 0x18, 0xaa, 0xb6, 0x18,
	0x14, 0xe8, 0xa1, 0xa5, 0xe5, 0x81, 0xbf, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe9, 0x82, 0xae,
	0xe4, 0xbb, 0xb6, 0x49, 0x44, 0x12, 0x43, 0x0a, 0x19, 0x45, 0x50, 0x72, 0x6f, 0x70, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x61, 0x6c, 0x65, 0x4d, 0x61, 0x69, 0x6c,
	0x49, 0x44, 0x10, 0x03, 0x1a, 0x24, 0xaa, 0xb6, 0x18, 0x20, 0xe9, 0x81, 0x93, 0xe5, 0x85, 0xb7,
	0xe8, 0xbf, 0x87, 0xe6, 0x9c, 0x9f, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x87, 0xba, 0xe5,
	0x94, 0xae, 0xe9, 0x82, 0xae, 0xe4, 0xbb, 0xb6, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x1c, 0x45, 0x50,
	0x72, 0x6f, 0x70, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x41,
	0x77, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x49, 0x44, 0x10, 0x04, 0x1a, 0x1e, 0xaa, 0xb6,
	0x18, 0x1a, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe8, 0xa1,
	0xa5, 0xe5, 0x8f, 0x91, 0xe9, 0x82, 0xae, 0xe4, 0xbb, 0xb6, 0x49, 0x44, 0x12, 0x3b, 0x0a, 0x17,
	0x45, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x77, 0x61, 0x72,
	0x64, 0x4d, 0x61, 0x69, 0x6c, 0x49, 0x44, 0x10, 0x06, 0x1a, 0x1e, 0xaa, 0xb6, 0x18, 0x1a, 0xe6,
	0x88, 0x98, 0xe4, 0xbb, 0xa4, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe8, 0xa1, 0xa5, 0xe5, 0x8f,
	0x91, 0xe9, 0x82, 0xae, 0xe4, 0xbb, 0xb6, 0x49, 0x44, 0x12, 0x45, 0x0a, 0x1b, 0x45, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x43, 0x68, 0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x77, 0x61,
	0x72, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x49, 0x44, 0x10, 0x07, 0x1a, 0x24, 0xaa, 0xb6, 0x18, 0x20,
	0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe5, 0xa5, 0x96, 0xe5,
	0x8a, 0xb1, 0xe8, 0xa1, 0xa5, 0xe5, 0x8f, 0x91, 0xe9, 0x82, 0xae, 0xe4, 0xbb, 0xb6, 0x49, 0x44,
	0x12, 0x45, 0x0a, 0x18, 0x45, 0x49, 0x6e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x61, 0x6e,
	0x6b, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x42, 0x72, 0x6f, 0x6e, 0x7a, 0x65, 0x10, 0x08, 0x1a, 0x27,
	0xaa, 0xb6, 0x18, 0x23, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe4, 0xb8, 0xad, 0xe6, 0xae, 0xb5,
	0xe4, 0xbd, 0x8d, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe5, 0x80, 0x94, 0xe5, 0xbc, 0xba, 0xe9,
	0x9d, 0x92, 0xe9, 0x93, 0x9c, 0x49, 0x44, 0x12, 0x45, 0x0a, 0x18, 0x45, 0x49, 0x6e, 0x53, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x53, 0x69, 0x6c,
	0x76, 0x65, 0x72, 0x10, 0x09, 0x1a, 0x27, 0xaa, 0xb6, 0x18, 0x23, 0xe8, 0xb5, 0x9b, 0xe5, 0xad,
	0xa3, 0xe4, 0xb8, 0xad, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1,
	0xe7, 0xa7, 0xa9, 0xe5, 0xba, 0x8f, 0xe7, 0x99, 0xbd, 0xe9, 0x93, 0xb6, 0x49, 0x44, 0x12, 0x43,
	0x0a, 0x16, 0x45, 0x49, 0x6e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x50,
	0x72, 0x69, 0x7a, 0x65, 0x47, 0x6f, 0x6c, 0x64, 0x10, 0x0a, 0x1a, 0x27, 0xaa, 0xb6, 0x18, 0x23,
	0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe4, 0xb8, 0xad, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xe5,
	0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe8, 0x8d, 0xa3, 0xe8, 0x80, 0x80, 0xe9, 0xbb, 0x84, 0xe9, 0x87,
	0x91, 0x49, 0x44, 0x12, 0x47, 0x0a, 0x1a, 0x45, 0x49, 0x6e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x52, 0x61, 0x6e, 0x6b, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x75,
	0x6d, 0x10, 0x0b, 0x1a, 0x27, 0xaa, 0xb6, 0x18, 0x23, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe4,
	0xb8, 0xad, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe5, 0xb0,
	0x8a, 0xe8, 0xb4, 0xb5, 0xe9, 0x93, 0x82, 0xe9, 0x87, 0x91, 0x49, 0x44, 0x12, 0x46, 0x0a, 0x19,
	0x45, 0x49, 0x6e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x50, 0x72, 0x69,
	0x7a, 0x65, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x10, 0x0c, 0x1a, 0x27, 0xaa, 0xb6, 0x18,
	0x23, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe4, 0xb8, 0xad, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d,
	0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe6, 0xb0, 0xb8, 0xe6, 0x81, 0x92, 0xe9, 0x92, 0xbb, 0xe7,
	0x9f, 0xb3, 0x49, 0x44, 0x12, 0x46, 0x0a, 0x19, 0x45, 0x49, 0x6e, 0x53, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x53, 0x74, 0x61, 0x72, 0x79, 0x61,
	0x6f, 0x10, 0x0d, 0x1a, 0x27, 0xaa, 0xb6, 0x18, 0x23, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe4,
	0xb8, 0xad, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe8, 0x87,
	0xb3, 0xe5, 0xb0, 0x8a, 0xe6, 0x98, 0x9f, 0xe8, 0x80, 0x80, 0x49, 0x44, 0x12, 0x43, 0x0a, 0x16,
	0x45, 0x49, 0x6e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x50, 0x72, 0x69,
	0x7a, 0x65, 0x4b, 0x69, 0x6e, 0x67, 0x10, 0x0e, 0x1a, 0x27, 0xaa, 0xb6, 0x18, 0x23, 0xe8, 0xb5,
	0x9b, 0xe5, 0xad, 0xa3, 0xe4, 0xb8, 0xad, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xe5, 0xa5, 0x96,
	0xe5, 0x8a, 0xb1, 0xe6, 0x9c, 0x80, 0xe5, 0xbc, 0xba, 0xe7, 0x8e, 0x8b, 0xe8, 0x80, 0x85, 0x49,
	0x44, 0x12, 0x3c, 0x0a, 0x12, 0x45, 0x57, 0x58, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x10, 0x0f, 0x1a, 0x24, 0xaa, 0xb6, 0x18, 0x20, 0xe5,
	0xbe, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0xb8, 0xb8, 0xe6, 0x88, 0x8f, 0xe4, 0xb8, 0xad, 0xe5, 0xbf,
	0x83, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0x49, 0x44, 0x12,
	0x38, 0x0a, 0x12, 0x45, 0x51, 0x51, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x10, 0x10, 0x1a, 0x20, 0xaa, 0xb6, 0x18, 0x1c, 0x51, 0x51, 0xe6,
	0xb8, 0xb8, 0xe6, 0x88, 0x8f, 0xe4, 0xb8, 0xad, 0xe5, 0xbf, 0x83, 0xe7, 0x99, 0xbb, 0xe5, 0xbd,
	0x95, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0x49, 0x44, 0x2a, 0xd3, 0x01, 0x0a, 0x0d, 0x45, 0x52,
	0x68, 0x79, 0x74, 0x68, 0x6d, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x0b, 0x52,
	0x48, 0x59, 0x54, 0x48, 0x4d, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x10, 0x00, 0x1a, 0x08, 0xaa, 0xb6,
	0x18, 0x04, 0x4d, 0x49, 0x53, 0x53, 0x12, 0x19, 0x0a, 0x0b, 0x52, 0x48, 0x59, 0x54, 0x48, 0x4d,
	0x5f, 0x43, 0x4f, 0x4f, 0x4c, 0x10, 0x01, 0x1a, 0x08, 0xaa, 0xb6, 0x18, 0x04, 0x43, 0x4f, 0x4f,
	0x4c, 0x12, 0x19, 0x0a, 0x0b, 0x52, 0x48, 0x59, 0x54, 0x48, 0x4d, 0x5f, 0x47, 0x4f, 0x4f, 0x44,
	0x10, 0x02, 0x1a, 0x08, 0xaa, 0xb6, 0x18, 0x04, 0x47, 0x4f, 0x4f, 0x44, 0x12, 0x19, 0x0a, 0x0b,
	0x52, 0x48, 0x59, 0x54, 0x48, 0x4d, 0x5f, 0x4e, 0x49, 0x43, 0x45, 0x10, 0x03, 0x1a, 0x08, 0xaa,
	0xb6, 0x18, 0x04, 0x4e, 0x49, 0x43, 0x45, 0x12, 0x1f, 0x0a, 0x0e, 0x52, 0x48, 0x59, 0x54, 0x48,
	0x4d, 0x5f, 0x50, 0x45, 0x52, 0x46, 0x45, 0x43, 0x54, 0x10, 0x04, 0x1a, 0x0b, 0xaa, 0xb6, 0x18,
	0x07, 0x50, 0x45, 0x52, 0x46, 0x45, 0x43, 0x54, 0x12, 0x21, 0x0a, 0x0f, 0x52, 0x48, 0x59, 0x54,
	0x48, 0x4d, 0x5f, 0x53, 0x50, 0x45, 0x52, 0x46, 0x45, 0x43, 0x54, 0x10, 0x05, 0x1a, 0x0c, 0xaa,
	0xb6, 0x18, 0x08, 0x53, 0x50, 0x45, 0x52, 0x46, 0x45, 0x43, 0x54, 0x12, 0x12, 0x0a, 0x0e, 0x52,
	0x48, 0x59, 0x54, 0x48, 0x4d, 0x5f, 0x4f, 0x50, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x06, 0x2a,
	0x5f, 0x0a, 0x0e, 0x45, 0x52, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x50, 0x56, 0x50, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x26, 0x0a, 0x13, 0x52, 0x48, 0x59, 0x54, 0x48, 0x4d, 0x5f, 0x50, 0x56, 0x50, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x10, 0x00, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09,
	0xe6, 0x8e, 0x92, 0xe4, 0xbd, 0x8d, 0xe8, 0xb5, 0x9b, 0x12, 0x25, 0x0a, 0x12, 0x52, 0x48, 0x59,
	0x54, 0x48, 0x4d, 0x5f, 0x50, 0x56, 0x50, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x10,
	0x01, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe5, 0xa8, 0xb1, 0xe4, 0xb9, 0x90, 0xe8, 0xb5, 0x9b,
	0x2a, 0x48, 0x0a, 0x07, 0x45, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x13, 0x45,
	0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x5f, 0x5f, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f,
	0x4d, 0x61, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x47, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x5f, 0x46, 0x65, 0x6d, 0x61, 0x6c, 0x65, 0x10, 0x02, 0x2a, 0x7e, 0x0a, 0x0d, 0x45, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0c, 0x52,
	0x41, 0x4e, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x4f, 0x50, 0x10, 0x00, 0x1a, 0x0b, 0xaa,
	0xb6, 0x18, 0x07, 0xe5, 0x89, 0x8d, 0x4e, 0xe5, 0x90, 0x8d, 0x12, 0x1d, 0x0a, 0x0c, 0x52, 0x41,
	0x4e, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x01, 0x1a, 0x0b, 0xaa, 0xb6,
	0x18, 0x07, 0xe5, 0x90, 0x8e, 0x4e, 0xe5, 0x90, 0x8d, 0x12, 0x1c, 0x0a, 0x0b, 0x52, 0x41, 0x4e,
	0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x10, 0x02, 0x1a, 0x0b, 0xaa, 0xb6, 0x18, 0x07,
	0xe7, 0xac, 0xac, 0x4e, 0xe5, 0x90, 0x8d, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x41, 0x4e, 0x4b, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x03, 0x2a, 0xb0, 0x9f, 0x01, 0x0a, 0x09,
	0x45, 0x43, 0x6f, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4e,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f,
	0x42, 0x45, 0x47, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x42, 0x0a, 0x1c, 0x43, 0x4f, 0x4e, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x43, 0x4f,
	0x53, 0x54, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x10, 0x02, 0x1a, 0x20, 0xaa, 0xb6, 0x18, 0x1c, 0xe6,
	0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6,
	0xb6, 0x88, 0xe8, 0x80, 0x97, 0xe8, 0xb4, 0xa7, 0xe5, 0xb8, 0x81, 0x12, 0x51, 0x0a, 0x22, 0x43,
	0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55,
	0x4c, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x52, 0x41, 0x4e, 0x4b, 0x43, 0x48, 0x45, 0x53,
	0x53, 0x10, 0x03, 0x1a, 0x29, 0xaa, 0xb6, 0x18, 0x25, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6,
	0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe5, 0xae, 0x8c, 0xe6, 0x88, 0x90, 0xe8,
	0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0x12, 0x50,
	0x0a, 0x20, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x46, 0x55, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x43, 0x48, 0x45, 0x53, 0x53, 0x54, 0x4f,
	0x50, 0x4e, 0x10, 0x04, 0x1a, 0x2a, 0xaa, 0xb6, 0x18, 0x26, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6,
	0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0,
	0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe5, 0x89, 0x8d, 0x4e, 0xe5, 0x90, 0x8d,
	0x12, 0x61, 0x0a, 0x25, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x47, 0x41, 0x4d,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x54, 0x4f, 0x50, 0x4e, 0x10, 0x05, 0x1a, 0x36, 0xaa, 0xb6, 0x18,
	0x32, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6,
	0x5f, 0xe5, 0xae, 0x8c, 0xe6, 0x88, 0x90, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe8, 0x87, 0xaa,
	0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe5, 0x89, 0x8d, 0x4e,
	0xe5, 0x90, 0x8d, 0x12, 0x4f, 0x0a, 0x20, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x43, 0x48,
	0x45, 0x53, 0x53, 0x52, 0x41, 0x4e, 0x4b, 0x10, 0x06, 0x1a, 0x29, 0xaa, 0xb6, 0x18, 0x25, 0xe6,
	0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8,
	0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe5, 0x90,
	0x8d, 0xe6, 0xac, 0xa1, 0x12, 0x48, 0x0a, 0x1c, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x41, 0x43, 0x4e, 0x54, 0x4c,
	0x4f, 0x47, 0x49, 0x4e, 0x10, 0x08, 0x1a, 0x26, 0xaa, 0xb6, 0x18, 0x22, 0xe6, 0x9c, 0x89, 0xe7,
	0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe7, 0x8e, 0xa9, 0xe5,
	0xae, 0xb6, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95, 0xe7, 0xb4, 0xaf, 0xe7, 0xa7, 0xaf, 0x12, 0x41,
	0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x46, 0x55, 0x4c, 0x5f, 0x41, 0x44, 0x44, 0x41, 0x57, 0x41, 0x52, 0x44, 0x10, 0x09, 0x1a,
	0x20, 0xaa, 0xb6, 0x18, 0x1c, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d,
	0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0xa5, 0x96, 0xe5, 0x8a,
	0xb1, 0x12, 0x48, 0x0a, 0x1c, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x41, 0x44, 0x44, 0x46, 0x52, 0x49, 0x45, 0x4e,
	0x44, 0x10, 0x0a, 0x1a, 0x26, 0xaa, 0xb6, 0x18, 0x22, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6,
	0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe5, 0x8f, 0x91, 0xe9, 0x80, 0x81, 0xe5,
	0xa5, 0xbd, 0xe5, 0x8f, 0x8b, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x12, 0x57, 0x0a, 0x1f, 0x43,
	0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55,
	0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x57, 0x49, 0x4e, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x0b,
	0x1a, 0x32, 0xaa, 0xb6, 0x18, 0x2e, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6,
	0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6,
	0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe8, 0x83, 0x9c, 0xe5, 0x88, 0xa9, 0xe5, 0x9b, 0x9e, 0xe5, 0x90,
	0x88, 0xe6, 0x95, 0xb0, 0x12, 0x56, 0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x55,
	0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x43, 0x4e, 0x54, 0x10, 0x0d, 0x1a, 0x2f, 0xaa, 0xb6, 0x18,
	0x2b, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6,
	0x5f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b,
	0xe5, 0x8d, 0x87, 0xe7, 0xba, 0xa7, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12, 0x57, 0x0a, 0x22,
	0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46,
	0x55, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x10, 0x0e, 0x1a, 0x2f, 0xaa, 0xb6, 0x18, 0x2b, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6,
	0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0,
	0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe7, 0xbb, 0x93, 0xe7, 0xae, 0x97, 0xe7,
	0xad, 0x89, 0xe7, 0xba, 0xa7, 0x12, 0x56, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x52, 0x45, 0x46, 0x52,
	0x45, 0x53, 0x48, 0x53, 0x48, 0x4f, 0x50, 0x10, 0x0f, 0x1a, 0x32, 0xaa, 0xb6, 0x18, 0x2e, 0xe6,
	0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8,
	0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe5, 0x95,
	0x86, 0xe5, 0xba, 0x97, 0xe5, 0x88, 0xb7, 0xe6, 0x96, 0xb0, 0xe6, 0x95, 0xb0, 0x12, 0x5e, 0x0a,
	0x1d, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x46, 0x55, 0x4c, 0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x10,
	0x1a, 0x3b, 0xaa, 0xb6, 0x18, 0x37, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6,
	0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6,
	0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe5, 0xaf, 0xb9, 0xe6, 0x96, 0xb9, 0xe9, 0xa2, 0x86, 0xe4, 0xb8,
	0xbb, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0xe6, 0x80, 0xbb, 0xe5, 0x80, 0xbc, 0x12, 0x61, 0x0a,
	0x23, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x46, 0x55, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x4f, 0x55, 0x54,
	0x43, 0x4f, 0x49, 0x4e, 0x10, 0x11, 0x1a, 0x38, 0xaa, 0xb6, 0x18, 0x34, 0xe6, 0x9c, 0x89, 0xe7,
	0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8,
	0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe6, 0x8a, 0x80, 0xe8, 0x83,
	0xbd, 0xe6, 0xb6, 0x88, 0xe8, 0x80, 0x97, 0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81, 0xe6, 0x95, 0xb0,
	0x12, 0x60, 0x0a, 0x22, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x53, 0x4b, 0x49, 0x4c, 0x4c,
	0x49, 0x4e, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x12, 0x1a, 0x38, 0xaa, 0xb6, 0x18, 0x34, 0xe6, 0x9c,
	0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87,
	0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe6, 0x8a, 0x80,
	0xe8, 0x83, 0xbd, 0xe8, 0x8e, 0xb7, 0xe5, 0xbe, 0x97, 0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81, 0xe6,
	0x95, 0xb0, 0x12, 0x62, 0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x45, 0x51,
	0x55, 0x49, 0x50, 0x47, 0x41, 0x49, 0x4e, 0x10, 0x13, 0x1a, 0x3b, 0xaa, 0xb6, 0x18, 0x37, 0xe6,
	0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8,
	0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe8, 0x8e,
	0xb7, 0xe5, 0xbe, 0x97, 0xe8, 0xbd, 0xac, 0xe8, 0x81, 0x8c, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c,
	0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x12, 0x6b, 0x0a, 0x24, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x54, 0x4f, 0x4b,
	0x45, 0x4e, 0x45, 0x51, 0x55, 0x49, 0x50, 0x47, 0x41, 0x49, 0x4e, 0x53, 0x55, 0x4d, 0x10, 0x14,
	0x1a, 0x41, 0xaa, 0xb6, 0x18, 0x3d, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6,
	0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6,
	0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe8, 0x8e, 0xb7, 0xe5, 0xbe, 0x97, 0xe8, 0xbd, 0xac, 0xe8, 0x81,
	0x8c, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xe7, 0xb4, 0xaf,
	0xe8, 0xae, 0xa1, 0x12, 0x62, 0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x45,
	0x51, 0x55, 0x49, 0x50, 0x47, 0x41, 0x49, 0x4e, 0x10, 0x15, 0x1a, 0x3b, 0xaa, 0xb6, 0x18, 0x37,
	0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f,
	0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe8,
	0x8e, 0xb7, 0xe5, 0xbe, 0x97, 0xe6, 0x88, 0x90, 0xe5, 0x93, 0x81, 0xe8, 0xa3, 0x85, 0xe5, 0xa4,
	0x87, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x12, 0x6d, 0x0a, 0x26, 0x43, 0x4f, 0x4e, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x52, 0x4f,
	0x55, 0x4e, 0x44, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x53, 0x48, 0x4f, 0x50, 0x4d, 0x41,
	0x58, 0x10, 0x17, 0x1a, 0x41, 0xaa, 0xb6, 0x18, 0x3d, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6,
	0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6,
	0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe5, 0x8d, 0x95, 0xe5, 0x9b, 0x9e, 0xe5, 0x90,
	0x88, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe5, 0x95, 0x86, 0xe5, 0xba, 0x97, 0xe5, 0x88, 0xb7,
	0xe6, 0x96, 0xb0, 0xe6, 0x95, 0xb0, 0x12, 0x62, 0x0a, 0x27, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x52, 0x41, 0x4e,
	0x4b, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x43, 0x4f, 0x49,
	0x4e, 0x10, 0x18, 0x1a, 0x35, 0xaa, 0xb6, 0x18, 0x31, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6,
	0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6,
	0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe6, 0x80, 0xbb, 0xe6, 0xb6, 0x88, 0xe8, 0x80,
	0x97, 0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81, 0xe6, 0x95, 0xb0, 0x12, 0x63, 0x0a, 0x25, 0x43, 0x4f,
	0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c,
	0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x4c, 0x56, 0x4c, 0x43,
	0x4f, 0x49, 0x4e, 0x10, 0x19, 0x1a, 0x38, 0xaa, 0xb6, 0x18, 0x34, 0xe6, 0x9c, 0x89, 0xe7, 0x8a,
	0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5,
	0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe5, 0x8d, 0x87, 0xe7, 0xba, 0xa7,
	0xe6, 0xb6, 0x88, 0xe8, 0x80, 0x97, 0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81, 0xe6, 0x95, 0xb0, 0x12,
	0x60, 0x0a, 0x22, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53,
	0x48, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x1a, 0x1a, 0x38, 0xaa, 0xb6, 0x18, 0x34, 0xe6, 0x9c, 0x89,
	0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa,
	0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe5, 0x88, 0xb7, 0xe6,
	0x96, 0xb0, 0xe6, 0xb6, 0x88, 0xe8, 0x80, 0x97, 0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81, 0xe6, 0x95,
	0xb0, 0x12, 0x60, 0x0a, 0x22, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x48, 0x49, 0x47, 0x48,
	0x45, 0x53, 0x54, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x1b, 0x1a, 0x38, 0xaa, 0xb6, 0x18, 0x34, 0xe6,
	0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8,
	0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe6, 0x9c,
	0x80, 0xe9, 0xab, 0x98, 0xe6, 0x8c, 0x81, 0xe6, 0x9c, 0x89, 0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81,
	0xe6, 0x95, 0xb0, 0x12, 0x68, 0x0a, 0x24, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x4b, 0x49,
	0x4c, 0x4c, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x1c, 0x1a, 0x3e, 0xaa,
	0xb6, 0x18, 0x3a, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4,
	0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8,
	0xb5, 0x9b, 0xe7, 0xbb, 0x88, 0xe7, 0xbb, 0x93, 0xe8, 0xbf, 0x9e, 0xe8, 0x83, 0x9c, 0xe8, 0x8e,
	0xb7, 0xe5, 0xbe, 0x97, 0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81, 0xe6, 0x95, 0xb0, 0x12, 0x61, 0x0a,
	0x23, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x46, 0x55, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x53, 0x54,
	0x43, 0x4f, 0x49, 0x4e, 0x10, 0x1d, 0x1a, 0x38, 0xaa, 0xb6, 0x18, 0x34, 0xe6, 0x9c, 0x89, 0xe7,
	0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8,
	0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe5, 0x88, 0xa9, 0xe6, 0x81,
	0xaf, 0xe8, 0x8e, 0xb7, 0xe5, 0xbe, 0x97, 0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81, 0xe6, 0x95, 0xb0,
	0x12, 0x62, 0x0a, 0x24, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x53, 0x54, 0x52, 0x45, 0x41,
	0x4b, 0x57, 0x49, 0x4e, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x1e, 0x1a, 0x38, 0xaa, 0xb6, 0x18, 0x34,
	0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f,
	0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe8,
	0xbf, 0x9e, 0xe8, 0x83, 0x9c, 0xe8, 0x8e, 0xb7, 0xe5, 0xbe, 0x97, 0xe9, 0x87, 0x91, 0xe5, 0xb8,
	0x81, 0xe6, 0x95, 0xb0, 0x12, 0x63, 0x0a, 0x25, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x53,
	0x54, 0x52, 0x45, 0x41, 0x4b, 0x4c, 0x4f, 0x53, 0x45, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x1f, 0x1a,
	0x38, 0xaa, 0xb6, 0x18, 0x34, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d,
	0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf,
	0x94, 0xe8, 0xb5, 0x9b, 0xe8, 0xbf, 0x9e, 0xe8, 0xb4, 0xa5, 0xe8, 0x8e, 0xb7, 0xe5, 0xbe, 0x97,
	0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81, 0xe6, 0x95, 0xb0, 0x12, 0x62, 0x0a, 0x24, 0x43, 0x4f, 0x4e,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f,
	0x52, 0x41, 0x4e, 0x4b, 0x4c, 0x4f, 0x52, 0x44, 0x41, 0x57, 0x41, 0x52, 0x44, 0x43, 0x4f, 0x49,
	0x4e, 0x10, 0x20, 0x1a, 0x38, 0xaa, 0xb6, 0x18, 0x34, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6,
	0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6,
	0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0xe5, 0xa5,
	0x96, 0xe5, 0x8a, 0xb1, 0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81, 0xe6, 0x95, 0xb0, 0x12, 0x67, 0x0a,
	0x26, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x46, 0x55, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x46, 0x45,
	0x54, 0x54, 0x45, 0x52, 0x43, 0x4e, 0x54, 0x10, 0x21, 0x1a, 0x3b, 0xaa, 0xb6, 0x18, 0x37, 0xe6,
	0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8,
	0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe7, 0xbb,
	0x93, 0xe7, 0xae, 0x97, 0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f,
	0xe8, 0xbe, 0xbe, 0xe6, 0x88, 0x90, 0x12, 0x67, 0x0a, 0x26, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x52, 0x41, 0x4e,
	0x4b, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x46, 0x45, 0x54, 0x54, 0x45, 0x52, 0x4c, 0x56, 0x4c,
	0x10, 0x22, 0x1a, 0x3b, 0xaa, 0xb6, 0x18, 0x37, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80,
	0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3,
	0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe7, 0xbb, 0x93, 0xe7, 0xae, 0x97, 0xe7, 0xbe, 0x81,
	0xe7, 0xbb, 0x8a, 0xe6, 0x9c, 0x80, 0xe9, 0xab, 0x98, 0xe9, 0x98, 0xb6, 0xe6, 0x95, 0xb0, 0x12,
	0x6b, 0x0a, 0x2a, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45,
	0x46, 0x45, 0x54, 0x54, 0x45, 0x52, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x23, 0x1a,
	0x3b, 0xaa, 0xb6, 0x18, 0x37, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d,
	0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf,
	0x94, 0xe8, 0xb5, 0x9b, 0xe7, 0xbb, 0x93, 0xe7, 0xae, 0x97, 0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a,
	0xe5, 0x93, 0x81, 0xe8, 0xb4, 0xa8, 0xe8, 0xbe, 0xbe, 0xe6, 0x88, 0x90, 0x12, 0x69, 0x0a, 0x25,
	0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46,
	0x55, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x46, 0x45, 0x54, 0x54,
	0x45, 0x52, 0x43, 0x4e, 0x54, 0x10, 0x24, 0x1a, 0x3e, 0xaa, 0xb6, 0x18, 0x3a, 0xe6, 0x9c, 0x89,
	0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa,
	0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe9, 0xa6, 0x96, 0xe5,
	0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a, 0xe6, 0x95, 0xb0, 0xe9, 0x87,
	0x8f, 0xe8, 0xbe, 0xbe, 0xe6, 0x88, 0x90, 0x12, 0x69, 0x0a, 0x25, 0x43, 0x4f, 0x4e, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x52, 0x41,
	0x4e, 0x4b, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x46, 0x45, 0x54, 0x54, 0x45, 0x52, 0x4c, 0x56, 0x4c,
	0x10, 0x25, 0x1a, 0x3e, 0xaa, 0xb6, 0x18, 0x3a, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80,
	0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3,
	0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe9, 0xa6, 0x96, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88,
	0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a, 0xe6, 0x9c, 0x80, 0xe9, 0xab, 0x98, 0xe9, 0x98, 0xb6, 0xe6,
	0x95, 0xb0, 0x12, 0x6d, 0x0a, 0x29, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x52, 0x4f, 0x55,
	0x4e, 0x44, 0x46, 0x45, 0x54, 0x54, 0x45, 0x52, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x10,
	0x26, 0x1a, 0x3e, 0xaa, 0xb6, 0x18, 0x3a, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b,
	0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe9, 0xa6, 0x96, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe7,
	0xbe, 0x81, 0xe7, 0xbb, 0x8a, 0xe5, 0x93, 0x81, 0xe8, 0xb4, 0xa8, 0xe8, 0xbe, 0xbe, 0xe6, 0x88,
	0x90, 0x12, 0x67, 0x0a, 0x26, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x42, 0x41, 0x54, 0x54,
	0x4c, 0x45, 0x46, 0x45, 0x54, 0x54, 0x45, 0x52, 0x43, 0x4e, 0x54, 0x10, 0x27, 0x1a, 0x3b, 0xaa,
	0xb6, 0x18, 0x37, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4,
	0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8,
	0xb5, 0x9b, 0xe8, 0xbf, 0x87, 0xe7, 0xa8, 0x8b, 0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a, 0xe6, 0x95,
	0xb0, 0xe9, 0x87, 0x8f, 0xe8, 0xbe, 0xbe, 0xe6, 0x88, 0x90, 0x12, 0x67, 0x0a, 0x26, 0x43, 0x4f,
	0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c,
	0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x46, 0x45, 0x54, 0x54, 0x45,
	0x52, 0x4c, 0x56, 0x4c, 0x10, 0x28, 0x1a, 0x3b, 0xaa, 0xb6, 0x18, 0x37, 0xe6, 0x9c, 0x89, 0xe7,
	0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8,
	0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe8, 0xbf, 0x87, 0xe7, 0xa8,
	0x8b, 0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a, 0xe6, 0x9c, 0x80, 0xe9, 0xab, 0x98, 0xe9, 0x98, 0xb6,
	0xe6, 0x95, 0xb0, 0x12, 0x6b, 0x0a, 0x2a, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x42, 0x41,
	0x54, 0x54, 0x4c, 0x45, 0x46, 0x45, 0x54, 0x54, 0x45, 0x52, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54,
	0x59, 0x10, 0x29, 0x1a, 0x3b, 0xaa, 0xb6, 0x18, 0x37, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6,
	0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6,
	0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe8, 0xbf, 0x87, 0xe7, 0xa8, 0x8b, 0xe7, 0xbe,
	0x81, 0xe7, 0xbb, 0x8a, 0xe5, 0x93, 0x81, 0xe8, 0xb4, 0xa8, 0xe8, 0xbe, 0xbe, 0xe6, 0x88, 0x90,
	0x12, 0x5f, 0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x53, 0x48,
	0x4f, 0x50, 0x53, 0x55, 0x4d, 0x10, 0x2a, 0x1a, 0x38, 0xaa, 0xb6, 0x18, 0x34, 0xe6, 0x9c, 0x89,
	0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa,
	0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe5, 0x95, 0x86, 0xe5,
	0xba, 0x97, 0xe5, 0x88, 0xb7, 0xe6, 0x96, 0xb0, 0xe6, 0x95, 0xb0, 0xe7, 0xb4, 0xaf, 0xe8, 0xae,
	0xa1, 0x12, 0x67, 0x0a, 0x20, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x44, 0x41, 0x4d, 0x41,
	0x47, 0x45, 0x53, 0x55, 0x4d, 0x10, 0x2b, 0x1a, 0x41, 0xaa, 0xb6, 0x18, 0x3d, 0xe6, 0x9c, 0x89,
	0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa,
	0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe5, 0xaf, 0xb9, 0xe6,
	0x96, 0xb9, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0xe6, 0x80,
	0xbb, 0xe5, 0x80, 0xbc, 0xe7, 0xb4, 0xaf, 0xe8, 0xae, 0xa1, 0x12, 0x6b, 0x0a, 0x2a, 0x43, 0x4f,
	0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c,
	0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d,
	0x45, 0x43, 0x4f, 0x49, 0x4e, 0x53, 0x55, 0x4d, 0x10, 0x2d, 0x1a, 0x3b, 0xaa, 0xb6, 0x18, 0x37,
	0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f,
	0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe6,
	0x80, 0xbb, 0xe6, 0xb6, 0x88, 0xe8, 0x80, 0x97, 0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81, 0xe6, 0x95,
	0xb0, 0xe7, 0xb4, 0xaf, 0xe8, 0xae, 0xa1, 0x12, 0x69, 0x0a, 0x25, 0x43, 0x4f, 0x4e, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x52, 0x41,
	0x4e, 0x4b, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x43, 0x4f, 0x49, 0x4e, 0x53, 0x55, 0x4d,
	0x10, 0x2e, 0x1a, 0x3e, 0xaa, 0xb6, 0x18, 0x3a, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80,
	0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3,
	0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe5, 0x88, 0xb7, 0xe6, 0x96, 0xb0, 0xe6, 0xb6, 0x88,
	0xe8, 0x80, 0x97, 0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81, 0xe6, 0x95, 0xb0, 0xe7, 0xb4, 0xaf, 0xe8,
	0xae, 0xa1, 0x12, 0x60, 0x0a, 0x22, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x57, 0x49, 0x4e,
	0x52, 0x4f, 0x55, 0x4e, 0x44, 0x53, 0x55, 0x4d, 0x10, 0x2f, 0x1a, 0x38, 0xaa, 0xb6, 0x18, 0x34,
	0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f,
	0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe8,
	0x83, 0x9c, 0xe5, 0x88, 0xa9, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe6, 0x95, 0xb0, 0xe7, 0xb4,
	0xaf, 0xe8, 0xae, 0xa1, 0x12, 0x62, 0x0a, 0x24, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x54,
	0x4f, 0x54, 0x41, 0x4c, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x53, 0x55, 0x4d, 0x10, 0x30, 0x1a, 0x38,
	0xaa, 0xb6, 0x18, 0x34, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1,
	0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94,
	0xe8, 0xb5, 0x9b, 0xe5, 0x8f, 0x82, 0xe4, 0xb8, 0x8e, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe6,
	0x95, 0xb0, 0xe7, 0xb4, 0xaf, 0xe8, 0xae, 0xa1, 0x12, 0x5f, 0x0a, 0x24, 0x43, 0x4f, 0x4e, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x52,
	0x41, 0x4e, 0x4b, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x43, 0x4e, 0x54, 0x53, 0x55, 0x4d,
	0x10, 0x31, 0x1a, 0x35, 0xaa, 0xb6, 0x18, 0x31, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80,
	0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3,
	0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe5, 0x8d, 0x87, 0xe7, 0xba, 0xa7, 0xe6, 0xac, 0xa1,
	0xe6, 0x95, 0xb0, 0xe7, 0xb4, 0xaf, 0xe8, 0xae, 0xa1, 0x12, 0x6b, 0x0a, 0x24, 0x43, 0x4f, 0x4e,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f,
	0x46, 0x49, 0x4e, 0x41, 0x4c, 0x45, 0x51, 0x55, 0x49, 0x50, 0x47, 0x41, 0x49, 0x4e, 0x53, 0x55,
	0x4d, 0x10, 0x32, 0x1a, 0x41, 0xaa, 0xb6, 0x18, 0x3d, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6,
	0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6,
	0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe8, 0x8e, 0xb7, 0xe5, 0xbe, 0x97, 0xe6, 0x88,
	0x90, 0xe5, 0x93, 0x81, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f,
	0xe7, 0xb4, 0xaf, 0xe8, 0xae, 0xa1, 0x12, 0x6c, 0x0a, 0x28, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x52, 0x41, 0x4e,
	0x4b, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x4c, 0x56, 0x4c, 0x43, 0x4f, 0x49, 0x4e, 0x53,
	0x55, 0x4d, 0x10, 0x33, 0x1a, 0x3e, 0xaa, 0xb6, 0x18, 0x3a, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6,
	0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0,
	0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe5, 0x8d, 0x87, 0xe7, 0xba, 0xa7, 0xe6,
	0xb6, 0x88, 0xe8, 0x80, 0x97, 0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81, 0xe6, 0x95, 0xb0, 0xe7, 0xb4,
	0xaf, 0xe8, 0xae, 0xa1, 0x12, 0x6b, 0x0a, 0x27, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x53,
	0x54, 0x52, 0x45, 0x41, 0x4b, 0x57, 0x49, 0x4e, 0x43, 0x4f, 0x49, 0x4e, 0x53, 0x55, 0x4d, 0x10,
	0x34, 0x1a, 0x3e, 0xaa, 0xb6, 0x18, 0x3a, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b,
	0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe8, 0xbf, 0x9e, 0xe8, 0x83, 0x9c, 0xe8, 0x8e, 0xb7, 0xe5,
	0xbe, 0x97, 0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81, 0xe6, 0x95, 0xb0, 0xe7, 0xb4, 0xaf, 0xe8, 0xae,
	0xa1, 0x12, 0x6c, 0x0a, 0x28, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x53, 0x54, 0x52, 0x45,
	0x41, 0x4b, 0x4c, 0x4f, 0x53, 0x45, 0x43, 0x4f, 0x49, 0x4e, 0x53, 0x55, 0x4d, 0x10, 0x35, 0x1a,
	0x3e, 0xaa, 0xb6, 0x18, 0x3a, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d,
	0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf,
	0x94, 0xe8, 0xb5, 0x9b, 0xe8, 0xbf, 0x9e, 0xe8, 0xb4, 0xa5, 0xe8, 0x8e, 0xb7, 0xe5, 0xbe, 0x97,
	0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81, 0xe6, 0x95, 0xb0, 0xe7, 0xb4, 0xaf, 0xe8, 0xae, 0xa1, 0x12,
	0x6b, 0x0a, 0x27, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x4c, 0x4f, 0x52, 0x44, 0x41, 0x57,
	0x41, 0x52, 0x44, 0x43, 0x4f, 0x49, 0x4e, 0x53, 0x55, 0x4d, 0x10, 0x36, 0x1a, 0x3e, 0xaa, 0xb6,
	0x18, 0x3a, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb,
	0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5,
	0x9b, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe9, 0x87, 0x91,
	0xe5, 0xb8, 0x81, 0xe6, 0x95, 0xb0, 0xe7, 0xb4, 0xaf, 0xe8, 0xae, 0xa1, 0x12, 0x5e, 0x0a, 0x23,
	0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46,
	0x55, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x4c, 0x4f, 0x52, 0x44, 0x53, 0x4b, 0x49, 0x4c, 0x4c,
	0x43, 0x4e, 0x54, 0x10, 0x37, 0x1a, 0x35, 0xaa, 0xb6, 0x18, 0x31, 0xe6, 0x9c, 0x89, 0xe7, 0x8a,
	0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5,
	0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb,
	0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12, 0x74, 0x0a, 0x27,
	0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46,
	0x55, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x4c, 0x41, 0x53,
	0x54, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x38, 0x1a, 0x47, 0xaa, 0xb6, 0x18, 0x43, 0xe6,
	0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8,
	0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe7, 0xbb,
	0x93, 0xe7, 0xae, 0x97, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe5, 0xaf, 0xb9, 0xe6, 0x95, 0x8c,
	0xe6, 0x96, 0xb9, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0xe7, 0x9a, 0x84, 0xe4, 0xbc, 0xa4, 0xe5,
	0xae, 0xb3, 0x12, 0x63, 0x0a, 0x22, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x41, 0x55, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x39, 0x1a, 0x3b, 0xaa, 0xb6, 0x18, 0x37,
	0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f,
	0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe6,
	0x8b, 0x8d, 0xe5, 0x8d, 0x96, 0xe6, 0xb6, 0x88, 0xe8, 0x80, 0x97, 0xe9, 0x87, 0x91, 0xe5, 0xb8,
	0x81, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x12, 0x75, 0x0a, 0x28, 0x43, 0x4f, 0x4e, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x52, 0x41,
	0x4e, 0x4b, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43,
	0x4f, 0x49, 0x4e, 0x10, 0x3a, 0x1a, 0x47, 0xaa, 0xb6, 0x18, 0x43, 0xe6, 0x9c, 0x89, 0xe7, 0x8a,
	0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5,
	0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe4, 0xb8, 0x80, 0xe6, 0xac, 0xa1,
	0xe6, 0x8b, 0x8d, 0xe5, 0x8d, 0x96, 0xe4, 0xb8, 0xad, 0xe6, 0xb6, 0x88, 0xe8, 0x80, 0x97, 0xe7,
	0x9a, 0x84, 0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x12, 0x64,
	0x0a, 0x29, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x46, 0x55, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55,
	0x4f, 0x55, 0x53, 0x57, 0x49, 0x4e, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x3b, 0x1a, 0x35, 0xaa,
	0xb6, 0x18, 0x31, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4,
	0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8,
	0xb5, 0x9b, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe8, 0xbf, 0x9e, 0xe8, 0x83, 0x9c, 0xe6, 0xac,
	0xa1, 0xe6, 0x95, 0xb0, 0x12, 0x65, 0x0a, 0x2a, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x43,
	0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x4f, 0x55, 0x53, 0x4c, 0x4f, 0x53, 0x45, 0x52, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x3c, 0x1a, 0x35, 0xaa, 0xb6, 0x18, 0x31, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6,
	0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0,
	0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe8,
	0xbf, 0x9e, 0xe8, 0xb4, 0xa5, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12, 0x5e, 0x0a, 0x23, 0x43,
	0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55,
	0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x10, 0x3d, 0x1a, 0x35, 0xaa, 0xb6, 0x18, 0x31, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6,
	0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0,
	0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe5, 0x8f, 0x82, 0xe4, 0xb8, 0x8e, 0xe6,
	0x8b, 0x8d, 0xe5, 0x8d, 0x96, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12, 0x6a, 0x0a, 0x29, 0x43,
	0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55,
	0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x41, 0x4e,
	0x44, 0x4f, 0x4d, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x3e, 0x1a, 0x3b, 0xaa, 0xb6, 0x18, 0x37,
	0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f,
	0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe6,
	0xb5, 0x81, 0xe6, 0x8b, 0x8d, 0xe8, 0x8e, 0xb7, 0xe5, 0xbe, 0x97, 0xe9, 0x81, 0x93, 0xe5, 0x85,
	0xb7, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12, 0x68, 0x0a, 0x27, 0x43, 0x4f, 0x4e, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x52, 0x41,
	0x4e, 0x4b, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x4a, 0x4f, 0x49, 0x4e, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x10, 0x3f, 0x1a, 0x3b, 0xaa, 0xb6, 0x18, 0x37, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6,
	0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0,
	0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe5, 0x87, 0xba, 0xe4, 0xba, 0x86, 0xe4,
	0xbb, 0xb7, 0xe7, 0x9a, 0x84, 0xe6, 0x8b, 0x8d, 0xe5, 0x8d, 0x96, 0xe6, 0xac, 0xa1, 0xe6, 0x95,
	0xb0, 0x12, 0x62, 0x0a, 0x27, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x41, 0x55, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x53, 0x55, 0x43, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x40, 0x1a, 0x35,
	0xaa, 0xb6, 0x18, 0x31, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1,
	0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94,
	0xe8, 0xb5, 0x9b, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0xe7, 0xab, 0x9e, 0xe6, 0x8b, 0x8d, 0xe6,
	0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12, 0x54, 0x0a, 0x1f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x4b,
	0x43, 0x48, 0x47, 0x43, 0x41, 0x52, 0x44, 0x53, 0x10, 0x41, 0x1a, 0x2f, 0xaa, 0xb6, 0x18, 0x2b,
	0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f,
	0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe6,
	0x8d, 0xa2, 0xe7, 0x89, 0x8c, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12, 0x6d, 0x0a, 0x29, 0x43,
	0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55,
	0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x43, 0x48, 0x47, 0x43, 0x41, 0x52, 0x44, 0x53, 0x42, 0x45,
	0x54, 0x54, 0x45, 0x52, 0x48, 0x45, 0x52, 0x4f, 0x10, 0x42, 0x1a, 0x3e, 0xaa, 0xb6, 0x18, 0x3a,
	0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f,
	0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe6,
	0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe5, 0x8d, 0x87, 0xe5, 0x80, 0xbc, 0xe7, 0x9a, 0x84, 0xe6, 0x8d,
	0xa2, 0xe7, 0x89, 0x8c, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12, 0x5e, 0x0a, 0x26, 0x43, 0x4f,
	0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c,
	0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x41, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x10, 0x43, 0x1a, 0x32, 0xaa, 0xb6, 0x18, 0x2e, 0xe6, 0x9c, 0x89, 0xe7,
	0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8,
	0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe5, 0x8f, 0x82, 0xe4, 0xb8,
	0x8e, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe6, 0x95, 0xb0, 0x12, 0x51, 0x0a, 0x22, 0x43, 0x4f,
	0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c,
	0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x48, 0x55, 0x52, 0x54,
	0x10, 0x44, 0x1a, 0x29, 0xaa, 0xb6, 0x18, 0x25, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80,
	0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe7, 0xb4,
	0xaf, 0xe8, 0xae, 0xa1, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0xe9, 0x87, 0x8f, 0x12, 0x50, 0x0a,
	0x24, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x46, 0x55, 0x4c, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x48,
	0x55, 0x52, 0x54, 0x45, 0x44, 0x10, 0x45, 0x1a, 0x26, 0xaa, 0xb6, 0x18, 0x22, 0xe6, 0x9c, 0x89,
	0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0xa3, 0x8b,
	0xe5, 0xad, 0x90, 0xe7, 0xb4, 0xaf, 0xe8, 0xae, 0xa1, 0xe6, 0x89, 0xbf, 0xe4, 0xbc, 0xa4, 0x12,
	0x51, 0x0a, 0x25, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x4f, 0x54, 0x41,
	0x4c, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x46, 0x1a, 0x26, 0xaa, 0xb6, 0x18, 0x22,
	0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f,
	0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe7, 0xb4, 0xaf, 0xe8, 0xae, 0xa1, 0xe6, 0x81, 0xa2, 0xe5,
	0xa4, 0x8d, 0x12, 0x50, 0x0a, 0x20, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x53, 0x45, 0x41, 0x4f, 0x4e, 0x52, 0x41,
	0x4e, 0x4b, 0x54, 0x4f, 0x50, 0x4e, 0x10, 0x47, 0x1a, 0x2a, 0xaa, 0xb6, 0x18, 0x26, 0xe6, 0x9c,
	0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0xb5,
	0x9b, 0xe5, 0xad, 0xa3, 0xe6, 0x8e, 0x92, 0xe4, 0xbd, 0x8d, 0xe8, 0xb5, 0x9b, 0xe5, 0x89, 0x8d,
	0x4e, 0xe5, 0x90, 0x8d, 0x12, 0x53, 0x0a, 0x23, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53,
	0x5f, 0x33, 0x53, 0x54, 0x41, 0x52, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x48, 0x1a, 0x2a, 0xaa,
	0xb6, 0x18, 0x26, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4,
	0xbb, 0xb6, 0x5f, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe5, 0x90, 0x88, 0xe6, 0x88, 0x90, 0x33,
	0xe6, 0x98, 0x9f, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12, 0x50, 0x0a, 0x24, 0x43, 0x4f, 0x4e,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f,
	0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x45, 0x46, 0x45, 0x41, 0x54, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x10, 0x49, 0x1a, 0x26, 0xaa, 0xb6, 0x18, 0x22, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6,
	0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe5,
	0x87, 0xbb, 0xe8, 0xb4, 0xa5, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12, 0x4f, 0x0a, 0x20, 0x43,
	0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55,
	0x4c, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x48, 0x55, 0x52, 0x54, 0x10,
	0x4a, 0x1a, 0x29, 0xaa, 0xb6, 0x18, 0x25, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe6, 0x9c, 0x80,
	0xe9, 0xab, 0x98, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0xe9, 0x87, 0x8f, 0x12, 0x4e, 0x0a, 0x22,
	0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46,
	0x55, 0x4c, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x48, 0x55, 0x52, 0x54,
	0x45, 0x44, 0x10, 0x4b, 0x1a, 0x26, 0xaa, 0xb6, 0x18, 0x22, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6,
	0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90,
	0xe6, 0x9c, 0x80, 0xe9, 0xab, 0x98, 0xe6, 0x89, 0xbf, 0xe4, 0xbc, 0xa4, 0x12, 0x4f, 0x0a, 0x23,
	0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46,
	0x55, 0x4c, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x52, 0x45, 0x43, 0x4f,
	0x56, 0x45, 0x52, 0x10, 0x4c, 0x1a, 0x26, 0xaa, 0xb6, 0x18, 0x22, 0xe6, 0x9c, 0x89, 0xe7, 0x8a,
	0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0xa3, 0x8b, 0xe5, 0xad,
	0x90, 0xe6, 0x9c, 0x80, 0xe9, 0xab, 0x98, 0xe6, 0x81, 0xa2, 0xe5, 0xa4, 0x8d, 0x12, 0x50, 0x0a,
	0x24, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x46, 0x55, 0x4c, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x4d, 0x1a, 0x26, 0xaa, 0xb6, 0x18, 0x22, 0xe6, 0x9c, 0x89,
	0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0xa3, 0x8b,
	0xe5, 0xad, 0x90, 0xe5, 0x87, 0xba, 0xe5, 0x9c, 0xba, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12,
	0x62, 0x0a, 0x24, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x46, 0x45, 0x54,
	0x54, 0x45, 0x52, 0x52, 0x41, 0x4e, 0x4b, 0x10, 0x4e, 0x1a, 0x38, 0xaa, 0xb6, 0x18, 0x34, 0xe6,
	0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6,
	0x88, 0x98, 0xe6, 0x96, 0x97, 0xe7, 0xbb, 0x93, 0xe7, 0xae, 0x97, 0xe6, 0xa3, 0x8b, 0xe5, 0xad,
	0x90, 0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a, 0xe8, 0x8e, 0xb7, 0xe5, 0xbe, 0x97, 0xe6, 0x8e, 0x92,
	0xe5, 0x90, 0x8d, 0x12, 0x63, 0x0a, 0x25, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45,
	0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x52, 0x41, 0x4e, 0x4b, 0x10, 0x4f, 0x1a, 0x38,
	0xaa, 0xb6, 0x18, 0x34, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1,
	0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97, 0xe7, 0xbb, 0x93, 0xe7, 0xae, 0x97,
	0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe5, 0x93, 0x81, 0xe8, 0xb4, 0xa8, 0xe8, 0x8e, 0xb7, 0xe5,
	0xbe, 0x97, 0xe6, 0x8e, 0x92, 0xe5, 0x90, 0x8d, 0x12, 0x60, 0x0a, 0x22, 0x43, 0x4f, 0x4e, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x42,
	0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x52, 0x41, 0x4e, 0x4b, 0x10, 0x50,
	0x1a, 0x38, 0xaa, 0xb6, 0x18, 0x34, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6,
	0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97, 0xe7, 0xbb, 0x93, 0xe7,
	0xae, 0x97, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe6, 0x98, 0x9f, 0xe7, 0xba, 0xa7, 0xe8, 0x8e,
	0xb7, 0xe5, 0xbe, 0x97, 0xe6, 0x8e, 0x92, 0xe5, 0x90, 0x8d, 0x12, 0x5b, 0x0a, 0x23, 0x43, 0x4f,
	0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c,
	0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x46, 0x45, 0x54, 0x54, 0x45, 0x52, 0x43, 0x4e,
	0x54, 0x10, 0x51, 0x1a, 0x32, 0xaa, 0xb6, 0x18, 0x2e, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6,
	0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97, 0xe7,
	0xbb, 0x93, 0xe7, 0xae, 0x97, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe7, 0xbe, 0x81, 0xe7, 0xbb,
	0x8a, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x12, 0x69, 0x0a, 0x2b, 0x43, 0x4f, 0x4e, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x42, 0x41,
	0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f,
	0x57, 0x41, 0x52, 0x43, 0x4e, 0x54, 0x10, 0x52, 0x1a, 0x38, 0xaa, 0xb6, 0x18, 0x34, 0xe6, 0x9c,
	0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0x88,
	0x98, 0xe6, 0x96, 0x97, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe5, 0xa4, 0x9a, 0xe6, 0xa3, 0x8b,
	0xe5, 0xad, 0x90, 0xe4, 0xb8, 0x8a, 0xe5, 0x9c, 0xba, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe6,
	0x95, 0xb0, 0x12, 0x64, 0x0a, 0x29, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f,
	0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x10,
	0x53, 0x1a, 0x35, 0xaa, 0xb6, 0x18, 0x31, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97, 0xe7, 0xbb, 0x93,
	0xe7, 0xae, 0x97, 0xe5, 0xa4, 0x9a, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe8, 0x8e, 0xb7, 0xe5,
	0xbe, 0x97, 0xe6, 0x8e, 0x92, 0xe5, 0x90, 0x8d, 0x12, 0x5d, 0x0a, 0x22, 0x43, 0x4f, 0x4e, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x42,
	0x45, 0x41, 0x54, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x55,
	0x1a, 0x35, 0xaa, 0xb6, 0x18, 0x31, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6,
	0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6,
	0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe6, 0xb7, 0x98, 0xe6, 0xb1, 0xb0, 0xe5, 0xaf, 0xb9, 0xe6, 0x89,
	0x8b, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x12, 0x67, 0x0a, 0x26, 0x43, 0x4f, 0x4e, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x52, 0x41,
	0x4e, 0x4b, 0x48, 0x45, 0x52, 0x4f, 0x45, 0x4f, 0x53, 0x53, 0x41, 0x4d, 0x45, 0x53, 0x54, 0x41,
	0x52, 0x10, 0x56, 0x1a, 0x3b, 0xaa, 0xb6, 0x18, 0x37, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6,
	0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6,
	0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe5, 0x90, 0x8c, 0xe6, 0x98, 0x9f, 0xe6, 0xa3,
	0x8b, 0xe5, 0xad, 0x90, 0xe8, 0x8e, 0xb7, 0xe5, 0xbe, 0x97, 0xe6, 0x8e, 0x92, 0xe5, 0x90, 0x8d,
	0x12, 0x54, 0x0a, 0x25, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x50, 0x52, 0x4f, 0x46, 0x49,
	0x43, 0x49, 0x45, 0x4e, 0x43, 0x59, 0x47, 0x45, 0x54, 0x10, 0x57, 0x1a, 0x29, 0xaa, 0xb6, 0x18,
	0x25, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6,
	0x5f, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe7, 0x86, 0x9f, 0xe7, 0xbb, 0x83, 0xe5, 0xba, 0xa6,
	0xe8, 0x8e, 0xb7, 0xe5, 0xbe, 0x97, 0x12, 0x59, 0x0a, 0x25, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x51, 0x55, 0x41,
	0x4c, 0x49, 0x54, 0x59, 0x53, 0x54, 0x41, 0x52, 0x48, 0x45, 0x52, 0x4f, 0x47, 0x45, 0x54, 0x10,
	0x58, 0x1a, 0x2e, 0xaa, 0xb6, 0x18, 0x2a, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe5, 0x90, 0x88, 0xe6, 0x88, 0x90, 0x78, 0xe8, 0xb4,
	0xb9, 0x78, 0xe6, 0x98, 0x9f, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe6, 0xac, 0xa1, 0xe6, 0x95,
	0xb0, 0x12, 0x59, 0x0a, 0x24, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x4f,
	0x55, 0x4e, 0x44, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x59, 0x1a, 0x2f, 0xaa, 0xb6, 0x18,
	0x2b, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6,
	0x5f, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe5, 0x8d, 0x95, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88,
	0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0xe8, 0xbe, 0xbe, 0xe6, 0x88, 0x90, 0x12, 0x58, 0x0a, 0x26,
	0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46,
	0x55, 0x4c, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x51,
	0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x5a, 0x1a, 0x2c, 0xaa, 0xb6, 0x18, 0x28, 0xe6, 0x9c,
	0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe7, 0xbb,
	0x93, 0xe7, 0xae, 0x97, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe4, 0xbb, 0xb7, 0xe5, 0x80, 0xbc,
	0xe8, 0xbe, 0xbe, 0xe6, 0x88, 0x90, 0x12, 0x53, 0x0a, 0x24, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x43, 0x48, 0x45,
	0x53, 0x53, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x47, 0x45, 0x10, 0x5b,
	0x1a, 0x29, 0xaa, 0xb6, 0x18, 0x25, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6,
	0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe7, 0xbb, 0x84, 0xe5,
	0x87, 0xba, 0xe5, 0x9c, 0xba, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12, 0x4a, 0x0a, 0x1e, 0x43,
	0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55,
	0x4c, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x42, 0x55, 0x59, 0x45, 0x58, 0x50, 0x10, 0x5c, 0x1a,
	0x26, 0xaa, 0xb6, 0x18, 0x22, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d,
	0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe5, 0x8d, 0x95, 0xe6, 0xac, 0xa1, 0xe8, 0xb4, 0xad, 0xe4, 0xb9,
	0xb0, 0xe7, 0xbb, 0x8f, 0xe9, 0xaa, 0x8c, 0x12, 0x4e, 0x0a, 0x1f, 0x43, 0x4f, 0x4e, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x52, 0x4f,
	0x55, 0x4e, 0x44, 0x43, 0x4f, 0x49, 0x4e, 0x47, 0x45, 0x54, 0x10, 0x5d, 0x1a, 0x29, 0xaa, 0xb6,
	0x18, 0x25, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb,
	0xb6, 0x5f, 0xe5, 0x8d, 0x95, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe9, 0x87, 0x91, 0xe5, 0xb8,
	0x81, 0xe6, 0x94, 0xb6, 0xe5, 0x85, 0xa5, 0x12, 0x52, 0x0a, 0x23, 0x43, 0x4f, 0x4e, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x43, 0x48,
	0x45, 0x53, 0x53, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x5e,
	0x1a, 0x29, 0xaa, 0xb6, 0x18, 0x25, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6,
	0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe7, 0xbb, 0x84, 0xe4,
	0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0xe7, 0xb4, 0xaf, 0xe8, 0xae, 0xa1, 0x12, 0x52, 0x0a, 0x23, 0x43,
	0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55,
	0x4c, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x48, 0x55, 0x52, 0x54,
	0x45, 0x44, 0x10, 0x5f, 0x1a, 0x29, 0xaa, 0xb6, 0x18, 0x25, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6,
	0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90,
	0xe7, 0xbb, 0x84, 0xe6, 0x89, 0xbf, 0xe4, 0xbc, 0xa4, 0xe7, 0xb4, 0xaf, 0xe8, 0xae, 0xa1, 0x12,
	0x58, 0x0a, 0x26, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x4c,
	0x4f, 0x52, 0x44, 0x53, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x60, 0x1a, 0x2c, 0xaa, 0xb6, 0x18,
	0x28, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6,
	0x5f, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe5, 0x90, 0x8c,
	0xe6, 0x97, 0xb6, 0xe5, 0x9c, 0xa8, 0xe5, 0x9c, 0xba, 0x12, 0x5f, 0x0a, 0x27, 0x43, 0x4f, 0x4e,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f,
	0x43, 0x48, 0x45, 0x53, 0x53, 0x48, 0x55, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x52,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x61, 0x1a, 0x32, 0xaa, 0xb6, 0x18, 0x2e, 0xe6, 0x9c, 0x89, 0xe7,
	0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe5, 0x8d, 0x95, 0xe5,
	0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe6, 0x89, 0xbf, 0xe5, 0x8f,
	0x97, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0xe5, 0x80, 0xbc, 0x12, 0x63, 0x0a, 0x28, 0x43, 0x4f,
	0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c,
	0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x50, 0x45,
	0x52, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x62, 0x1a, 0x35, 0xaa, 0xb6, 0x18, 0x31, 0xe6, 0x9c,
	0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe5, 0x8d,
	0x95, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe6, 0x8e, 0xa7,
	0xe5, 0x88, 0xb6, 0xe6, 0x95, 0x8c, 0xe4, 0xba, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x12,
	0x5a, 0x0a, 0x25, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x48, 0x45, 0x41, 0x4c, 0x5f,
	0x50, 0x45, 0x52, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x63, 0x1a, 0x2f, 0xaa, 0xb6, 0x18, 0x2b,
	0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f,
	0xe5, 0x8d, 0x95, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe6,
	0xb2, 0xbb, 0xe7, 0x96, 0x97, 0xe7, 0x82, 0xb9, 0xe5, 0x80, 0xbc, 0x12, 0x5b, 0x0a, 0x23, 0x43,
	0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55,
	0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x47, 0x45, 0x54, 0x43, 0x4f,
	0x49, 0x4e, 0x10, 0x64, 0x1a, 0x32, 0xaa, 0xb6, 0x18, 0x2e, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6,
	0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0,
	0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe8, 0x8e, 0xb7, 0xe5, 0xbe, 0x97, 0xe9,
	0x87, 0x91, 0xe5, 0xb8, 0x81, 0xe6, 0x95, 0xb0, 0x12, 0x66, 0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x54,
	0x4f, 0x50, 0x4e, 0x49, 0x4e, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x43, 0x4e, 0x54, 0x10, 0x67, 0x1a,
	0x3f, 0xaa, 0xb6, 0x18, 0x3b, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d,
	0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf,
	0x94, 0xe8, 0xb5, 0x9b, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88,
	0xe5, 0x86, 0x85, 0xe8, 0x8e, 0xb7, 0xe5, 0xbe, 0x97, 0xe5, 0x89, 0x8d, 0x4e, 0xe5, 0x90, 0x8d,
	0x12, 0x6c, 0x0a, 0x24, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x44, 0x49, 0x46, 0x46, 0x45,
	0x52, 0x45, 0x4e, 0x54, 0x4c, 0x4f, 0x52, 0x44, 0x10, 0x68, 0x1a, 0x42, 0xaa, 0xb6, 0x18, 0x3e,
	0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f,
	0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe4,
	0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe5, 0x94, 0xaf, 0xe4, 0xb8, 0x80, 0xe6, 0xa3, 0x8b, 0xe6, 0x89,
	0x8b, 0xe8, 0x8e, 0xb7, 0xe5, 0xbe, 0x97, 0xe5, 0x89, 0x8d, 0x4e, 0xe5, 0x90, 0x8d, 0x12, 0x64,
	0x0a, 0x22, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x46, 0x55, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x54, 0x4f, 0x50, 0x4e, 0x55, 0x53, 0x45,
	0x4c, 0x4f, 0x52, 0x44, 0x10, 0x69, 0x1a, 0x3c, 0xaa, 0xb6, 0x18, 0x38, 0xe6, 0x9c, 0x89, 0xe7,
	0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8,
	0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe6, 0x8c, 0x87, 0xe5, 0xae,
	0x9a, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe8, 0x8e, 0xb7, 0xe5, 0xbe, 0x97, 0xe5, 0x89, 0x8d,
	0x4e, 0xe5, 0x90, 0x8d, 0x12, 0x60, 0x0a, 0x26, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x58,
	0x48, 0x45, 0x52, 0x4f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x54, 0x4f, 0x50, 0x4e, 0x10, 0x6a,
	0x1a, 0x34, 0xaa, 0xb6, 0x18, 0x30, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6,
	0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe5, 0x85, 0xa8, 0x58, 0xe6, 0x98, 0x9f, 0xe4, 0xbb, 0xa5,
	0xe4, 0xb8, 0x8a, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe5, 0x89, 0x8d, 0x4e, 0xe5, 0x90, 0x8d,
	0xe7, 0xbb, 0x93, 0xe7, 0xae, 0x97, 0x12, 0x5a, 0x0a, 0x28, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x51, 0x55, 0x41,
	0x4c, 0x49, 0x54, 0x59, 0x48, 0x45, 0x52, 0x4f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x54, 0x4f,
	0x50, 0x4e, 0x10, 0x6b, 0x1a, 0x2c, 0xaa, 0xb6, 0x18, 0x28, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6,
	0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0x58, 0x59, 0xe8, 0xb4, 0xb9, 0xe6,
	0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe5, 0x89, 0x8d, 0x4e, 0xe5, 0x90, 0x8d, 0xe7, 0xbb, 0x93, 0xe7,
	0xae, 0x97, 0x12, 0x5f, 0x0a, 0x28, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59,
	0x53, 0x54, 0x41, 0x52, 0x48, 0x45, 0x52, 0x4f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x6c,
	0x1a, 0x31, 0xaa, 0xb6, 0x18, 0x2d, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6,
	0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0x58, 0xe6, 0x98, 0x9f,
	0x59, 0xe8, 0xb4, 0xb9, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe6, 0x95, 0xb0, 0xe7, 0xbb, 0x93,
	0xe7, 0xae, 0x97, 0x12, 0x4c, 0x0a, 0x1d, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x4d,
	0x41, 0x58, 0x48, 0x50, 0x10, 0x6d, 0x1a, 0x29, 0xaa, 0xb6, 0x18, 0x25, 0xe6, 0x9c, 0x89, 0xe7,
	0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0xa3, 0x8b, 0xe5,
	0xad, 0x90, 0xe7, 0x94, 0x9f, 0xe5, 0x91, 0xbd, 0xe5, 0x80, 0xbc, 0xe8, 0xbe, 0xbe, 0xe6, 0x88,
	0x90, 0x12, 0x4c, 0x0a, 0x1d, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x4d, 0x41, 0x58,
	0x41, 0x44, 0x10, 0x6e, 0x1a, 0x29, 0xaa, 0xb6, 0x18, 0x25, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6,
	0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90,
	0xe6, 0x94, 0xbb, 0xe5, 0x87, 0xbb, 0xe5, 0x8a, 0x9b, 0xe8, 0xbe, 0xbe, 0xe6, 0x88, 0x90, 0x12,
	0x4f, 0x0a, 0x1d, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x4d, 0x41, 0x58, 0x41, 0x50,
	0x10, 0x6f, 0x1a, 0x2c, 0xaa, 0xb6, 0x18, 0x28, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80,
	0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe6, 0xb3,
	0x95, 0xe6, 0x9c, 0xaf, 0xe5, 0xbc, 0xba, 0xe5, 0xba, 0xa6, 0xe8, 0xbe, 0xbe, 0xe6, 0x88, 0x90,
	0x12, 0x51, 0x0a, 0x22, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x4d, 0x41, 0x58, 0x43,
	0x52, 0x49, 0x54, 0x48, 0x49, 0x54, 0x10, 0x70, 0x1a, 0x29, 0xaa, 0xb6, 0x18, 0x25, 0xe6, 0x9c,
	0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0xa3,
	0x8b, 0xe5, 0xad, 0x90, 0xe6, 0x9a, 0xb4, 0xe5, 0x87, 0xbb, 0xe7, 0x8e, 0x87, 0xe8, 0xbe, 0xbe,
	0xe6, 0x88, 0x90, 0x12, 0x56, 0x0a, 0x24, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x48, 0x45, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x71, 0x1a, 0x2c, 0xaa,
	0xb6, 0x18, 0x28, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4,
	0xbb, 0xb6, 0x5f, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe7, 0xbb, 0x84, 0xe6, 0xb2, 0xbb, 0xe7,
	0x96, 0x97, 0xe9, 0x87, 0x8f, 0xe7, 0xb4, 0xaf, 0xe8, 0xae, 0xa1, 0x12, 0x58, 0x0a, 0x26, 0x43,
	0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55,
	0x4c, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x42, 0x45, 0x41, 0x54,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x72, 0x1a, 0x2c, 0xaa, 0xb6, 0x18, 0x28, 0xe6, 0x9c, 0x89,
	0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0xa3, 0x8b,
	0xe5, 0xad, 0x90, 0xe7, 0xbb, 0x84, 0xe5, 0x87, 0xbb, 0xe6, 0x9d, 0x80, 0xe6, 0x95, 0xb0, 0xe7,
	0xb4, 0xaf, 0xe8, 0xae, 0xa1, 0x12, 0x50, 0x0a, 0x24, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x52, 0x4f, 0x55, 0x4e,
	0x44, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x73, 0x1a,
	0x26, 0xaa, 0xb6, 0x18, 0x22, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d,
	0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe5, 0x9b, 0x9e, 0xe5, 0x90,
	0x88, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0x12, 0x50, 0x0a, 0x24, 0x43, 0x4f, 0x4e, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x50, 0x4c,
	0x41, 0x59, 0x45, 0x52, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10,
	0x74, 0x1a, 0x26, 0xaa, 0xb6, 0x18, 0x22, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe4, 0xbc, 0xa4,
	0xe5, 0xae, 0xb3, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12, 0x58, 0x0a, 0x26, 0x43, 0x4f, 0x4e,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x4c, 0x4f, 0x52, 0x44, 0x44, 0x41, 0x4d,
	0x41, 0x47, 0x45, 0x10, 0x75, 0x1a, 0x2c, 0xaa, 0xb6, 0x18, 0x28, 0xe6, 0x9c, 0x89, 0xe7, 0x8a,
	0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe7, 0x89, 0xb9, 0xe5, 0xae,
	0x9a, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe9, 0x80, 0xa0, 0xe6, 0x88, 0x90, 0xe4, 0xbc, 0xa4,
	0xe5, 0xae, 0xb3, 0x12, 0x5a, 0x0a, 0x28, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x54, 0x49, 0x4d, 0x45, 0x10,
	0x76, 0x1a, 0x2c, 0xaa, 0xb6, 0x18, 0x28, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe6, 0x8e, 0xa7,
	0xe5, 0x88, 0xb6, 0xe6, 0x95, 0x8c, 0xe4, 0xba, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x95, 0xbf, 0x12,
	0x5e, 0x0a, 0x29, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x55, 0x53, 0x45, 0x50, 0x52, 0x4f, 0x50, 0x54, 0x4f, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x4c, 0x4f, 0x52, 0x44, 0x10, 0x77, 0x1a, 0x2f,
	0xaa, 0xb6, 0x18, 0x2b, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1,
	0xe4, 0xbb, 0xb6, 0x5f, 0xe5, 0xaf, 0xb9, 0xe7, 0x89, 0xb9, 0xe5, 0xae, 0x9a, 0xe6, 0xa3, 0x8b,
	0xe6, 0x89, 0x8b, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x81, 0x93, 0xe5, 0x85, 0xb7, 0x12,
	0x58, 0x0a, 0x23, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x55, 0x53, 0x45, 0x50, 0x52, 0x4f,
	0x50, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x79, 0x1a, 0x2f, 0xaa, 0xb6, 0x18, 0x2b, 0xe6, 0x9c,
	0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0xaf,
	0x94, 0xe8, 0xb5, 0x9b, 0xe4, 0xb8, 0xad, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x81, 0x93,
	0xe5, 0x85, 0xb7, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x12, 0x65, 0x0a, 0x2a, 0x43, 0x4f, 0x4e,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f,
	0x52, 0x41, 0x4e, 0x4b, 0x55, 0x53, 0x45, 0x51, 0x55, 0x49, 0x43, 0x4b, 0x4d, 0x53, 0x47, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x53, 0x55, 0x4d, 0x10, 0x7a, 0x1a, 0x35, 0xaa, 0xb6, 0x18, 0x31, 0xe6,
	0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6,
	0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe4, 0xb8, 0xad, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7, 0x9f,
	0xad, 0xe8, 0xaf, 0xad, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xe7, 0xb4, 0xaf, 0xe8, 0xae, 0xa1,
	0x12, 0x53, 0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x42, 0x45, 0x41, 0x54,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x7b, 0x1a, 0x2c, 0xaa, 0xb6, 0x18, 0x28, 0xe6, 0x9c, 0x89,
	0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0xa3, 0x8b,
	0xe5, 0xad, 0x90, 0xe5, 0x87, 0xbb, 0xe6, 0x9d, 0x80, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xe8,
	0xbe, 0xbe, 0xe6, 0x88, 0x90, 0x12, 0x61, 0x0a, 0x26, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x43, 0x48, 0x45, 0x53,
	0x53, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x42, 0x45, 0x41, 0x54, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10,
	0x7c, 0x1a, 0x35, 0xaa, 0xb6, 0x18, 0x31, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe5, 0x8d, 0x95,
	0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe5, 0x87, 0xbb, 0xe6, 0x9d, 0x80, 0xe6, 0x95, 0xb0, 0xe9,
	0x87, 0x8f, 0xe8, 0xbe, 0xbe, 0xe6, 0x88, 0x90, 0x12, 0x6a, 0x0a, 0x26, 0x43, 0x4f, 0x4e, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x4c, 0x4f, 0x52, 0x44, 0x42, 0x41, 0x54, 0x54,
	0x4c, 0x45, 0x10, 0x7d, 0x1a, 0x3e, 0xaa, 0xb6, 0x18, 0x3a, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6,
	0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a,
	0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe8, 0x8e, 0xb7, 0xe5, 0xbe, 0x97, 0xe6, 0x88, 0x98, 0xe6,
	0x96, 0x97, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe7, 0xbb,
	0x93, 0xe6, 0x9e, 0x9c, 0x12, 0x4c, 0x0a, 0x20, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x51, 0x55, 0x49, 0x43, 0x4b,
	0x4d, 0x53, 0x47, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x7e, 0x1a, 0x26, 0xaa, 0xb6, 0x18, 0x22,
	0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f,
	0xe5, 0x8f, 0x91, 0xe9, 0x80, 0x81, 0xe7, 0x9f, 0xad, 0xe8, 0xaf, 0xad, 0xe6, 0x95, 0xb0, 0xe9,
	0x87, 0x8f, 0x12, 0x5f, 0x0a, 0x24, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x54, 0x41, 0x4c,
	0x45, 0x4e, 0x54, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x7f, 0x1a, 0x35, 0xaa, 0xb6,
	0x18, 0x31, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb,
	0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5,
	0x9b, 0xe5, 0xa4, 0xa9, 0xe8, 0xb5, 0x8b, 0xe5, 0x93, 0x81, 0xe8, 0xb4, 0xa8, 0xe6, 0xbf, 0x80,
	0xe6, 0xb4, 0xbb, 0x12, 0x57, 0x0a, 0x1f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x54, 0x41,
	0x4c, 0x45, 0x4e, 0x54, 0x49, 0x44, 0x10, 0x80, 0x01, 0x1a, 0x31, 0xaa, 0xb6, 0x18, 0x2d, 0xe6,
	0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8,
	0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe5, 0xa4,
	0xa9, 0xe8, 0xb5, 0x8b, 0x49, 0x44, 0xe6, 0xbf, 0x80, 0xe6, 0xb4, 0xbb, 0x12, 0x70, 0x0a, 0x27,
	0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46,
	0x55, 0x4c, 0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x53, 0x45, 0x54,
	0x54, 0x4c, 0x45, 0x54, 0x4f, 0x50, 0x4e, 0x10, 0x81, 0x01, 0x1a, 0x42, 0xaa, 0xb6, 0x18, 0x3e,
	0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f,
	0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe6,
	0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe6, 0xbf, 0x80, 0xe6, 0xb4,
	0xbb, 0xe5, 0xa4, 0xa9, 0xe8, 0xb5, 0x8b, 0xe5, 0x89, 0x8d, 0x4e, 0xe5, 0x90, 0x8d, 0x12, 0x62,
	0x0a, 0x20, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x46, 0x55, 0x4c, 0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x53,
	0x55, 0x4d, 0x10, 0x82, 0x01, 0x1a, 0x3b, 0xaa, 0xb6, 0x18, 0x37, 0xe6, 0x9c, 0x89, 0xe7, 0x8a,
	0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5,
	0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe6, 0xbf, 0x80, 0xe6, 0xb4, 0xbb,
	0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe5, 0xa4, 0xa9, 0xe8, 0xb5, 0x8b, 0xe7, 0xb4, 0xaf, 0xe8,
	0xae, 0xa1, 0x12, 0x65, 0x0a, 0x23, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x51,
	0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x53, 0x55, 0x4d, 0x10, 0x83, 0x01, 0x1a, 0x3b, 0xaa, 0xb6,
	0x18, 0x37, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb,
	0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5,
	0x9b, 0xe6, 0xbf, 0x80, 0xe6, 0xb4, 0xbb, 0xe5, 0xa4, 0xa9, 0xe8, 0xb5, 0x8b, 0xe5, 0x93, 0x81,
	0xe8, 0xb4, 0xa8, 0xe7, 0xb4, 0xaf, 0xe8, 0xae, 0xa1, 0x12, 0x5b, 0x0a, 0x25, 0x43, 0x4f, 0x4e,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f,
	0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x57, 0x49, 0x54, 0x48, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x4d,
	0x45, 0x4d, 0x10, 0x84, 0x01, 0x1a, 0x2f, 0xaa, 0xb6, 0x18, 0x2b, 0xe6, 0x9c, 0x89, 0xe7, 0x8a,
	0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe4, 0xb8, 0x8e, 0xe6, 0x88,
	0x98, 0xe9, 0x98, 0x9f, 0xe6, 0x88, 0x90, 0xe5, 0x91, 0x98, 0xe6, 0xb8, 0xb8, 0xe6, 0x88, 0x8f,
	0xe7, 0xb4, 0xaf, 0xe8, 0xae, 0xa1, 0x12, 0x5c, 0x0a, 0x26, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x4d, 0x41, 0x58,
	0x47, 0x55, 0x49, 0x4c, 0x44, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x10, 0x85, 0x01, 0x1a, 0x2f, 0xaa, 0xb6, 0x18, 0x2b, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6,
	0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0x88, 0x98, 0xe9, 0x98, 0x9f, 0xe6,
	0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe7, 0xbb, 0x93, 0xe7, 0xae, 0x97, 0xe8, 0xb4, 0xa1, 0xe7, 0x8c,
	0xae, 0xe5, 0x80, 0xbc, 0x12, 0x6d, 0x0a, 0x28, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x45,
	0x51, 0x55, 0x49, 0x50, 0x57, 0x45, 0x41, 0x52, 0x5f, 0x49, 0x4e, 0x52, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x86, 0x01, 0x1a, 0x3e, 0xaa, 0xb6, 0x18, 0x3a, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6,
	0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6,
	0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe5, 0x8d, 0x95, 0xe5, 0x9b, 0x9e, 0xe5, 0x90,
	0x88, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0xe7, 0xa9, 0xbf,
	0xe6, 0x88, 0xb4, 0x12, 0x6c, 0x0a, 0x27, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x49, 0x4e, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x87,
	0x01, 0x1a, 0x3e, 0xaa, 0xb6, 0x18, 0x3a, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b,
	0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe5, 0x8d, 0x95, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe6,
	0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe5, 0x85, 0x91, 0xe6, 0x8d, 0xa2, 0xe6, 0x95, 0xb0, 0xe9, 0x87,
	0x8f, 0x12, 0x1b, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x88, 0x01, 0x12, 0x1e,
	0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x10, 0xd0, 0x0f, 0x12, 0x49,
	0x0a, 0x22, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x42, 0x41, 0x54, 0x54, 0x4c,
	0x45, 0x43, 0x4e, 0x54, 0x10, 0xd1, 0x0f, 0x1a, 0x20, 0xaa, 0xb6, 0x18, 0x1c, 0xe6, 0x97, 0xa0,
	0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe5, 0xaf, 0xb9,
	0xe5, 0xb1, 0x80, 0xe6, 0x80, 0xbb, 0xe6, 0x95, 0xb0, 0x12, 0x45, 0x0a, 0x1e, 0x43, 0x4f, 0x4e,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53,
	0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0xd2, 0x0f, 0x1a, 0x20,
	0xaa, 0xb6, 0x18, 0x1c, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1,
	0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0xaf, 0x8f, 0xe6, 0x97, 0xa5, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95,
	0x12, 0x5d, 0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x57, 0x49, 0x4e,
	0x45, 0x52, 0x43, 0x4e, 0x54, 0x10, 0xd3, 0x0f, 0x1a, 0x35, 0xaa, 0xb6, 0x18, 0x31, 0xe6, 0x97,
	0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87,
	0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe9, 0xa6, 0x96,
	0xe5, 0x90, 0x8d, 0xe5, 0xaf, 0xb9, 0xe5, 0xb1, 0x80, 0xe6, 0x80, 0xbb, 0xe6, 0x95, 0xb0, 0x12,
	0x4a, 0x0a, 0x1d, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x4e, 0x54, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x10, 0xd4, 0x0f, 0x1a, 0x26, 0xaa, 0xb6, 0x18, 0x22, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6,
	0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe7, 0x8e, 0xa9, 0xe5, 0xae, 0xb6, 0xe7,
	0xad, 0x89, 0xe7, 0xba, 0xa7, 0xe8, 0xbe, 0xbe, 0xe6, 0x88, 0x90, 0x12, 0x4a, 0x0a, 0x1d, 0x43,
	0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45,
	0x53, 0x53, 0x5f, 0x41, 0x43, 0x4e, 0x54, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0xd6, 0x0f, 0x1a,
	0x26, 0xaa, 0xb6, 0x18, 0x22, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d,
	0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe7, 0x8e, 0xa9, 0xe5, 0xae, 0xb6, 0xe7, 0x99, 0xbb, 0xe5, 0xbd,
	0x95, 0xe8, 0xbe, 0xbe, 0xe6, 0x88, 0x90, 0x12, 0x51, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x46,
	0x52, 0x49, 0x45, 0x4e, 0x44, 0x48, 0x41, 0x56, 0x45, 0x10, 0xd7, 0x0f, 0x1a, 0x2c, 0xaa, 0xb6,
	0x18, 0x28, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb,
	0xb6, 0x5f, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe5, 0xa5, 0xbd, 0xe5, 0x8f, 0x8b, 0xe6, 0x95,
	0xb0, 0xe9, 0x87, 0x8f, 0xe8, 0xbe, 0xbe, 0xe6, 0x88, 0x90, 0x12, 0x49, 0x0a, 0x1c, 0x43, 0x4f,
	0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53,
	0x53, 0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x48, 0x41, 0x56, 0x45, 0x10, 0xd8, 0x0f, 0x1a, 0x26, 0xaa,
	0xb6, 0x18, 0x22, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4,
	0xbb, 0xb6, 0x5f, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xe8,
	0xbe, 0xbe, 0xe6, 0x88, 0x90, 0x12, 0x53, 0x0a, 0x20, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x4c, 0x4f, 0x52,
	0x44, 0x53, 0x4b, 0x49, 0x4e, 0x48, 0x41, 0x56, 0x45, 0x10, 0xd9, 0x0f, 0x1a, 0x2c, 0xaa, 0xb6,
	0x18, 0x28, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb,
	0xb6, 0x5f, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0xe7, 0x9a, 0xae, 0xe8, 0x82, 0xa4, 0xe6, 0x95,
	0xb0, 0xe9, 0x87, 0x8f, 0xe8, 0xbe, 0xbe, 0xe6, 0x88, 0x90, 0x12, 0x59, 0x0a, 0x26, 0x43, 0x4f,
	0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53,
	0x53, 0x5f, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45, 0x33,
	0x53, 0x54, 0x41, 0x52, 0x10, 0xda, 0x0f, 0x1a, 0x2c, 0xaa, 0xb6, 0x18, 0x28, 0xe6, 0x97, 0xa0,
	0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0xb5, 0x9b,
	0xe5, 0xad, 0xa3, 0xe5, 0x90, 0x88, 0xe6, 0x88, 0x90, 0xe4, 0xb8, 0x89, 0xe6, 0x98, 0x9f, 0xe6,
	0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12, 0x54, 0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x41, 0x56, 0x47, 0x52, 0x41, 0x4e, 0x4b, 0x10, 0xdb, 0x0f, 0x1a, 0x2c, 0xaa,
	0xb6, 0x18, 0x28, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4,
	0xbb, 0xb6, 0x5f, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe5, 0xaf, 0xb9, 0xe5, 0xb1, 0x80, 0xe5,
	0xb9, 0xb3, 0xe5, 0x9d, 0x87, 0xe6, 0x8e, 0x92, 0xe5, 0x90, 0x8d, 0x12, 0x58, 0x0a, 0x22, 0x43,
	0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45,
	0x53, 0x53, 0x5f, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x57, 0x49, 0x4e, 0x52, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0xdc, 0x0f, 0x1a, 0x2f, 0xaa, 0xb6, 0x18, 0x2b, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6,
	0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3,
	0xe5, 0xaf, 0xb9, 0xe5, 0xb1, 0x80, 0xe5, 0x8f, 0x96, 0xe8, 0x83, 0x9c, 0xe5, 0x9b, 0x9e, 0xe5,
	0x90, 0x88, 0xe6, 0x95, 0xb0, 0x12, 0x5b, 0x0a, 0x22, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x43, 0x48, 0x45, 0x53, 0x53, 0x42, 0x55, 0x59, 0x10, 0xdd, 0x0f, 0x1a, 0x32,
	0xaa, 0xb6, 0x18, 0x2e, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1,
	0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe5, 0xaf, 0xb9, 0xe5, 0xb1, 0x80,
	0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe8, 0xb4, 0xad, 0xe4, 0xb9, 0xb0, 0xe6, 0x95, 0xb0, 0xe9,
	0x87, 0x8f, 0x12, 0x60, 0x0a, 0x27, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x4c, 0x4f, 0x52, 0x44, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x43, 0x4e, 0x54, 0x10, 0xde, 0x0f,
	0x1a, 0x32, 0xaa, 0xb6, 0x18, 0x2e, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6,
	0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe5, 0xaf, 0xb9, 0xe5,
	0xb1, 0x80, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0xe5, 0x8f, 0x82, 0xe6, 0x88, 0x98, 0xe6, 0xac,
	0xa1, 0xe6, 0x95, 0xb0, 0x12, 0x67, 0x0a, 0x28, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x4c, 0x4f, 0x52, 0x44, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x54, 0x4f, 0x50, 0x34,
	0x10, 0xdf, 0x0f, 0x1a, 0x38, 0xaa, 0xb6, 0x18, 0x34, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6,
	0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe5,
	0xaf, 0xb9, 0xe5, 0xb1, 0x80, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0xe5, 0x89, 0x8d, 0xe5, 0x9b,
	0x9b, 0xe5, 0x8f, 0x82, 0xe6, 0x88, 0x98, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12, 0x67, 0x0a,
	0x28, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x4c, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x4c, 0x4f, 0x52, 0x44, 0x42,
	0x41, 0x54, 0x54, 0x4c, 0x45, 0x54, 0x4f, 0x50, 0x31, 0x10, 0xe0, 0x0f, 0x1a, 0x38, 0xaa, 0xb6,
	0x18, 0x34, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb,
	0xb6, 0x5f, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe5, 0xaf, 0xb9, 0xe5, 0xb1, 0x80, 0xe9, 0xa2,
	0x86, 0xe4, 0xb8, 0xbb, 0xe7, 0x99, 0xbb, 0xe9, 0xa1, 0xb6, 0xe5, 0x8f, 0x82, 0xe6, 0x88, 0x98,
	0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12, 0x43, 0x0a, 0x1c, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x52,
	0x4f, 0x50, 0x48, 0x41, 0x56, 0x45, 0x10, 0xe1, 0x0f, 0x1a, 0x20, 0xaa, 0xb6, 0x18, 0x1c, 0xe6,
	0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe9,
	0x81, 0x93, 0xe5, 0x85, 0xb7, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x12, 0x4a, 0x0a, 0x1d, 0x43,
	0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45,
	0x53, 0x53, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x10, 0xe2, 0x0f, 0x1a,
	0x26, 0xaa, 0xb6, 0x18, 0x22, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d,
	0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0xb4, 0xa7, 0xe5, 0xb8, 0x81, 0xe6, 0xb6, 0x88, 0xe8, 0x80,
	0x97, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x12, 0x53, 0x0a, 0x23, 0x43, 0x4f, 0x4e, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x46,
	0x49, 0x4e, 0x49, 0x53, 0x48, 0x52, 0x41, 0x4e, 0x4b, 0x43, 0x48, 0x45, 0x53, 0x53, 0x10, 0xe3,
	0x0f, 0x1a, 0x29, 0xaa, 0xb6, 0x18, 0x25, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe5, 0xae, 0x8c, 0xe6, 0x88, 0x90, 0xe8, 0x87, 0xaa,
	0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0x12, 0x52, 0x0a, 0x21,
	0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c,
	0x45, 0x53, 0x53, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x43, 0x48, 0x45, 0x53, 0x53, 0x54, 0x4f, 0x50,
	0x4e, 0x10, 0xe4, 0x0f, 0x1a, 0x2a, 0xaa, 0xb6, 0x18, 0x26, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6,
	0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0,
	0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe5, 0x89, 0x8d, 0x4e, 0xe5, 0x90, 0x8d,
	0x12, 0x63, 0x0a, 0x26, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x47, 0x41,
	0x4d, 0x45, 0x54, 0x59, 0x50, 0x45, 0x54, 0x4f, 0x50, 0x4e, 0x10, 0xe5, 0x0f, 0x1a, 0x36, 0xaa,
	0xb6, 0x18, 0x32, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4,
	0xbb, 0xb6, 0x5f, 0xe5, 0xae, 0x8c, 0xe6, 0x88, 0x90, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe8,
	0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe5, 0x89,
	0x8d, 0x4e, 0xe5, 0x90, 0x8d, 0x12, 0x51, 0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x41, 0x4e,
	0x4b, 0x43, 0x48, 0x45, 0x53, 0x53, 0x52, 0x41, 0x4e, 0x4b, 0x10, 0xe6, 0x0f, 0x1a, 0x29, 0xaa,
	0xb6, 0x18, 0x25, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4,
	0xbb, 0xb6, 0x5f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xaf, 0x94, 0xe8,
	0xb5, 0x9b, 0xe5, 0x90, 0x8d, 0xe6, 0xac, 0xa1, 0x12, 0x43, 0x0a, 0x1c, 0x43, 0x4f, 0x4e, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f,
	0x41, 0x44, 0x44, 0x41, 0x57, 0x41, 0x52, 0x44, 0x10, 0xe7, 0x0f, 0x1a, 0x20, 0xaa, 0xb6, 0x18,
	0x1c, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6,
	0x5f, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0x12, 0x4c, 0x0a,
	0x1f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x4c, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x44, 0x41, 0x59,
	0x10, 0xe8, 0x0f, 0x1a, 0x26, 0xaa, 0xb6, 0x18, 0x22, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6,
	0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe7, 0x8e, 0xa9, 0xe5, 0xae, 0xb6, 0xe6,
	0xb3, 0xa8, 0xe5, 0x86, 0x8c, 0xe5, 0xa4, 0xa9, 0xe6, 0x95, 0xb0, 0x12, 0x56, 0x0a, 0x23, 0x43,
	0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45,
	0x53, 0x53, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x41, 0x57, 0x41, 0x52, 0x44, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x10, 0xe9, 0x0f, 0x1a, 0x2c, 0xaa, 0xb6, 0x18, 0x28, 0xe6, 0x97, 0xa0, 0xe7, 0x8a,
	0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0x88, 0x98, 0xe4, 0xbb,
	0xa4, 0xe9, 0xa2, 0x86, 0xe5, 0xa5, 0x96, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0xe8, 0xbe, 0xbe,
	0xe6, 0x88, 0x90, 0x12, 0x4b, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0xea, 0x0f, 0x1a, 0x26, 0xaa, 0xb6, 0x18, 0x22, 0xe6, 0x97,
	0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0x88,
	0x98, 0xe4, 0xbb, 0xa4, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0xe8, 0xbe, 0xbe, 0xe6, 0x88, 0x90,
	0x12, 0x52, 0x0a, 0x25, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x42, 0x41,
	0x54, 0x54, 0x4c, 0x45, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0xeb, 0x0f, 0x1a, 0x26, 0xaa, 0xb6,
	0x18, 0x22, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb,
	0xb6, 0x5f, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe5, 0x87, 0xba, 0xe5, 0x9c, 0xba, 0xe6, 0xac,
	0xa1, 0xe6, 0x95, 0xb0, 0x12, 0x55, 0x0a, 0x24, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x48, 0x45, 0x53,
	0x53, 0x5f, 0x33, 0x53, 0x54, 0x41, 0x52, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0xec, 0x0f, 0x1a,
	0x2a, 0xaa, 0xb6, 0x18, 0x26, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d,
	0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe5, 0x90, 0x88, 0xe6, 0x88,
	0x90, 0x33, 0xe6, 0x98, 0x9f, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12, 0x52, 0x0a, 0x25, 0x43,
	0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45,
	0x53, 0x53, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x45, 0x46, 0x45, 0x41, 0x54, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x10, 0xed, 0x0f, 0x1a, 0x26, 0xaa, 0xb6, 0x18, 0x22, 0xe6, 0x97, 0xa0,
	0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0xa3, 0x8b,
	0xe5, 0xad, 0x90, 0xe5, 0x87, 0xbb, 0xe8, 0xb4, 0xa5, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12,
	0x51, 0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x4d, 0x41, 0x58,
	0x48, 0x55, 0x52, 0x54, 0x10, 0xee, 0x0f, 0x1a, 0x29, 0xaa, 0xb6, 0x18, 0x25, 0xe6, 0x97, 0xa0,
	0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0xa3, 0x8b,
	0xe5, 0xad, 0x90, 0xe6, 0x9c, 0x80, 0xe9, 0xab, 0x98, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0xe9,
	0x87, 0x8f, 0x12, 0x50, 0x0a, 0x23, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f,
	0x4d, 0x41, 0x58, 0x48, 0x55, 0x52, 0x54, 0x45, 0x44, 0x10, 0xef, 0x0f, 0x1a, 0x26, 0xaa, 0xb6,
	0x18, 0x22, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb,
	0xb6, 0x5f, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe6, 0x9c, 0x80, 0xe9, 0xab, 0x98, 0xe6, 0x89,
	0xbf, 0xe4, 0xbc, 0xa4, 0x12, 0x51, 0x0a, 0x24, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x48, 0x45, 0x53,
	0x53, 0x5f, 0x4d, 0x41, 0x58, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x10, 0xf0, 0x0f, 0x1a,
	0x26, 0xaa, 0xb6, 0x18, 0x22, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d,
	0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe6, 0x9c, 0x80, 0xe9, 0xab,
	0x98, 0xe6, 0x81, 0xa2, 0xe5, 0xa4, 0x8d, 0x12, 0x50, 0x0a, 0x23, 0x43, 0x4f, 0x4e, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x42,
	0x45, 0x41, 0x54, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0xf3,
	0x0f, 0x1a, 0x26, 0xaa, 0xb6, 0x18, 0x22, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe7, 0xb4, 0xaf, 0xe8, 0xae, 0xa1, 0xe6, 0xb7, 0x98,
	0xe6, 0xb1, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0x12, 0x52, 0x0a, 0x25, 0x43, 0x4f, 0x4e,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53,
	0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x4c, 0x4f, 0x52, 0x44, 0x53, 0x47,
	0x45, 0x54, 0x10, 0xf4, 0x0f, 0x1a, 0x26, 0xaa, 0xb6, 0x18, 0x22, 0xe6, 0x97, 0xa0, 0xe7, 0x8a,
	0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x8e, 0xb7, 0xe5, 0xbe,
	0x97, 0xe7, 0x89, 0xb9, 0xe5, 0xae, 0x9a, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0x12, 0x4f, 0x0a,
	0x22, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x4c, 0x45, 0x53, 0x53, 0x5f, 0x4e, 0x45, 0x57, 0x42, 0x49, 0x45, 0x5f, 0x41, 0x42, 0x49, 0x4c,
	0x49, 0x54, 0x59, 0x10, 0xf5, 0x0f, 0x1a, 0x26, 0xaa, 0xb6, 0x18, 0x22, 0xe6, 0x97, 0xa0, 0xe7,
	0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0x96, 0xb0, 0xe6,
	0x89, 0x8b, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe9, 0x80, 0x89, 0xe6, 0x8b, 0xa9, 0x12, 0x53,
	0x0a, 0x26, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x4e, 0x45, 0x57, 0x42, 0x49, 0x45, 0x5f, 0x46, 0x49, 0x4e,
	0x49, 0x53, 0x48, 0x47, 0x55, 0x49, 0x44, 0x45, 0x10, 0xf6, 0x0f, 0x1a, 0x26, 0xaa, 0xb6, 0x18,
	0x22, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6,
	0x5f, 0xe6, 0x96, 0xb0, 0xe6, 0x89, 0x8b, 0xe5, 0xbc, 0x95, 0xe5, 0xaf, 0xbc, 0xe5, 0xae, 0x8c,
	0xe6, 0x88, 0x90, 0x12, 0x56, 0x0a, 0x23, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x4e, 0x45, 0x57, 0x42, 0x49,
	0x45, 0x5f, 0x53, 0x54, 0x45, 0x50, 0x54, 0x49, 0x4d, 0x45, 0x10, 0xf7, 0x0f, 0x1a, 0x2c, 0xaa,
	0xb6, 0x18, 0x28, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4,
	0xbb, 0xb6, 0x5f, 0xe6, 0x96, 0xb0, 0xe6, 0x89, 0x8b, 0xe5, 0xbc, 0x95, 0xe5, 0xaf, 0xbc, 0xe6,
	0xad, 0xa5, 0xe9, 0xaa, 0xa4, 0xe8, 0xae, 0xa1, 0xe6, 0x97, 0xb6, 0x12, 0x5c, 0x0a, 0x25, 0x43,
	0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45,
	0x53, 0x53, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x50, 0x56, 0x50, 0x52, 0x41,
	0x4e, 0x4b, 0x4e, 0x4f, 0x10, 0xf8, 0x0f, 0x1a, 0x30, 0xaa, 0xb6, 0x18, 0x2c, 0xe6, 0x97, 0xa0,
	0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0x9c, 0x80,
	0xe8, 0xbf, 0x91, 0x4e, 0xe5, 0xb1, 0x80, 0xe5, 0xb9, 0xb3, 0xe5, 0x9d, 0x87, 0xe5, 0xaf, 0xb9,
	0xe5, 0xb1, 0x80, 0xe5, 0x90, 0x8d, 0xe6, 0xac, 0xa1, 0x12, 0x63, 0x0a, 0x23, 0x43, 0x4f, 0x4e,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53,
	0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x57, 0x49, 0x4e, 0x52, 0x41, 0x54, 0x45,
	0x10, 0xf9, 0x0f, 0x1a, 0x39, 0xaa, 0xb6, 0x18, 0x35, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6,
	0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0x9c, 0x80, 0xe8, 0xbf, 0x91, 0x4e,
	0xe5, 0xb1, 0x80, 0xe5, 0xb9, 0xb3, 0xe5, 0x9d, 0x87, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe8,
	0x83, 0x9c, 0xe7, 0x8e, 0x87, 0xe4, 0xb8, 0x87, 0xe5, 0x88, 0x86, 0xe6, 0xaf, 0x94, 0x12, 0x5b,
	0x0a, 0x24, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x45, 0x53, 0x54, 0x10, 0xfa, 0x0f, 0x1a, 0x30, 0xaa, 0xb6, 0x18, 0x2c, 0xe6,
	0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6,
	0x9c, 0x80, 0xe8, 0xbf, 0x91, 0x4e, 0xe5, 0xb1, 0x80, 0xe5, 0xb9, 0xb3, 0xe5, 0x9d, 0x87, 0xe5,
	0x88, 0xa9, 0xe6, 0x81, 0xaf, 0xe6, 0x94, 0xb6, 0xe5, 0x85, 0xa5, 0x12, 0x67, 0x0a, 0x27, 0x43,
	0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45,
	0x53, 0x53, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x48,
	0x45, 0x52, 0x4f, 0x43, 0x4e, 0x54, 0x10, 0xfb, 0x0f, 0x1a, 0x39, 0xaa, 0xb6, 0x18, 0x35, 0xe6,
	0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6,
	0x9c, 0x80, 0xe8, 0xbf, 0x91, 0x4e, 0xe5, 0xb1, 0x80, 0xe7, 0xbb, 0x93, 0xe7, 0xae, 0x97, 0xe5,
	0xb9, 0xb3, 0xe5, 0x9d, 0x87, 0xe6, 0x98, 0x9f, 0xe7, 0xba, 0xa7, 0xe6, 0xa3, 0x8b, 0xe5, 0xad,
	0x90, 0xe6, 0x95, 0xb0, 0x12, 0x6b, 0x0a, 0x28, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x48, 0x49, 0x53, 0x54,
	0x4f, 0x52, 0x59, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x50, 0x4f, 0x53, 0x43, 0x48, 0x47,
	0x10, 0xfc, 0x0f, 0x1a, 0x3c, 0xaa, 0xb6, 0x18, 0x38, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6,
	0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0x9c, 0x80, 0xe8, 0xbf, 0x91, 0x4e,
	0xe5, 0xb1, 0x80, 0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97, 0xe4, 0xbd, 0x8d, 0xe7, 0xbd, 0xae, 0xe5,
	0xb9, 0xb3, 0xe5, 0x9d, 0x87, 0xe5, 0x8f, 0x98, 0xe6, 0x9b, 0xb4, 0xe6, 0xac, 0xa1, 0xe6, 0x95,
	0xb0, 0x12, 0x60, 0x0a, 0x23, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59,
	0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x55, 0x50, 0x10, 0xfd, 0x0f, 0x1a, 0x36, 0xaa, 0xb6, 0x18,
	0x32, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6,
	0x5f, 0xe6, 0x9c, 0x80, 0xe8, 0xbf, 0x91, 0x4e, 0xe5, 0xb1, 0x80, 0xe7, 0x82, 0xb9, 0xe5, 0x87,
	0xbb, 0xe5, 0x8d, 0x87, 0xe7, 0xba, 0xa7, 0xe5, 0xb9, 0xb3, 0xe5, 0x9d, 0x87, 0xe6, 0xac, 0xa1,
	0xe6, 0x95, 0xb0, 0x12, 0x70, 0x0a, 0x30, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f,
	0x52, 0x59, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x42, 0x49, 0x47, 0x47, 0x45, 0x52, 0x41, 0x46, 0x54,
	0x45, 0x52, 0x4c, 0x56, 0x4c, 0x55, 0x50, 0x10, 0xfe, 0x0f, 0x1a, 0x39, 0xaa, 0xb6, 0x18, 0x35,
	0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f,
	0xe6, 0x9c, 0x80, 0xe8, 0xbf, 0x91, 0x4e, 0xe5, 0xb1, 0x80, 0xe5, 0x8d, 0xa1, 0xe5, 0x88, 0xa9,
	0xe6, 0x81, 0xaf, 0xe5, 0x8d, 0x87, 0xe7, 0xba, 0xa7, 0xe5, 0xb9, 0xb3, 0xe5, 0x9d, 0x87, 0xe6,
	0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12, 0x74, 0x0a, 0x31, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x48, 0x49, 0x53,
	0x54, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x45, 0x52,
	0x41, 0x46, 0x54, 0x45, 0x52, 0x4c, 0x56, 0x4c, 0x55, 0x50, 0x10, 0xff, 0x0f, 0x1a, 0x3c, 0xaa,
	0xb6, 0x18, 0x38, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4,
	0xbb, 0xb6, 0x5f, 0xe6, 0x9c, 0x80, 0xe8, 0xbf, 0x91, 0x4e, 0xe5, 0xb1, 0x80, 0xe4, 0xb8, 0x8d,
	0xe5, 0x8d, 0xa1, 0xe5, 0x88, 0xa9, 0xe6, 0x81, 0xaf, 0xe5, 0x8d, 0x87, 0xe7, 0xba, 0xa7, 0xe5,
	0xb9, 0xb3, 0xe5, 0x9d, 0x87, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12, 0x5d, 0x0a, 0x26, 0x43,
	0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45,
	0x53, 0x53, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45,
	0x53, 0x48, 0x43, 0x4e, 0x54, 0x10, 0x80, 0x10, 0x1a, 0x30, 0xaa, 0xb6, 0x18, 0x2c, 0xe6, 0x97,
	0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0x9c,
	0x80, 0xe8, 0xbf, 0x91, 0x4e, 0xe5, 0xb1, 0x80, 0xe5, 0x88, 0xb7, 0xe6, 0x96, 0xb0, 0xe5, 0xb9,
	0xb3, 0xe5, 0x9d, 0x87, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12, 0x65, 0x0a, 0x28, 0x43, 0x4f,
	0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53,
	0x53, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x45, 0x58,
	0x54, 0x52, 0x41, 0x42, 0x55, 0x59, 0x10, 0x81, 0x10, 0x1a, 0x36, 0xaa, 0xb6, 0x18, 0x32, 0xe6,
	0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6,
	0x9c, 0x80, 0xe8, 0xbf, 0x91, 0x4e, 0xe5, 0xb1, 0x80, 0xe4, 0xb8, 0xb4, 0xe6, 0x97, 0xb6, 0xe8,
	0xb4, 0xad, 0xe4, 0xb9, 0xb0, 0xe5, 0xb9, 0xb3, 0xe5, 0x9d, 0x87, 0xe6, 0xac, 0xa1, 0xe6, 0x95,
	0xb0, 0x12, 0x60, 0x0a, 0x23, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59,
	0x5f, 0x43, 0x41, 0x52, 0x44, 0x42, 0x55, 0x59, 0x10, 0x82, 0x10, 0x1a, 0x36, 0xaa, 0xb6, 0x18,
	0x32, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6,
	0x5f, 0xe6, 0x9c, 0x80, 0xe8, 0xbf, 0x91, 0x4e, 0xe5, 0xb1, 0x80, 0xe8, 0xb4, 0xad, 0xe4, 0xb9,
	0xb0, 0xe5, 0x8d, 0xa1, 0xe7, 0x89, 0x8c, 0xe5, 0xb9, 0xb3, 0xe5, 0x9d, 0x87, 0xe6, 0xac, 0xa1,
	0xe6, 0x95, 0xb0, 0x12, 0x61, 0x0a, 0x24, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f,
	0x52, 0x59, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x83, 0x10, 0x1a, 0x36,
	0xaa, 0xb6, 0x18, 0x32, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1,
	0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0x9c, 0x80, 0xe8, 0xbf, 0x91, 0x4e, 0xe5, 0xb1, 0x80, 0xe9, 0x94,
	0x81, 0xe5, 0xae, 0x9a, 0xe5, 0x8d, 0xa1, 0xe7, 0x89, 0x8c, 0xe5, 0xb9, 0xb3, 0xe5, 0x9d, 0x87,
	0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12, 0x6d, 0x0a, 0x2a, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x48, 0x49,
	0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x54, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x43,
	0x4c, 0x49, 0x43, 0x4b, 0x10, 0x84, 0x10, 0x1a, 0x3c, 0xaa, 0xb6, 0x18, 0x38, 0xe6, 0x97, 0xa0,
	0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0x9c, 0x80,
	0xe8, 0xbf, 0x91, 0x4e, 0xe5, 0xb1, 0x80, 0xe9, 0x98, 0xb5, 0xe5, 0xae, 0xb9, 0xe6, 0x8e, 0xa8,
	0xe8, 0x8d, 0x90, 0xe5, 0xb9, 0xb3, 0xe5, 0x9d, 0x87, 0xe7, 0x82, 0xb9, 0xe5, 0x87, 0xbb, 0xe6,
	0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12, 0x65, 0x0a, 0x28, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x48, 0x49, 0x53,
	0x54, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x4f, 0x46, 0x46, 0x45, 0x51, 0x55, 0x49,
	0x50, 0x10, 0x85, 0x10, 0x1a, 0x36, 0xaa, 0xb6, 0x18, 0x32, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6,
	0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0x9c, 0x80, 0xe8, 0xbf, 0x91,
	0x4e, 0xe5, 0xb1, 0x80, 0xe6, 0x8b, 0x86, 0xe5, 0x8d, 0xb8, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87,
	0xe5, 0xb9, 0xb3, 0xe5, 0x9d, 0x87, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12, 0x5e, 0x0a, 0x27,
	0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c,
	0x45, 0x53, 0x53, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x57, 0x41, 0x54, 0x43,
	0x48, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0x86, 0x10, 0x1a, 0x30, 0xaa, 0xb6, 0x18, 0x2c,
	0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f,
	0xe6, 0x9c, 0x80, 0xe8, 0xbf, 0x91, 0x4e, 0xe5, 0xb1, 0x80, 0xe5, 0xb9, 0xb3, 0xe5, 0x9d, 0x87,
	0xe8, 0xa7, 0x82, 0xe6, 0x88, 0x98, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12, 0x67, 0x0a, 0x2a,
	0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c,
	0x45, 0x53, 0x53, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x57, 0x41, 0x54, 0x43,
	0x48, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x87, 0x10, 0x1a, 0x36, 0xaa,
	0xb6, 0x18, 0x32, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4,
	0xbb, 0xb6, 0x5f, 0xe6, 0x9c, 0x80, 0xe8, 0xbf, 0x91, 0x4e, 0xe5, 0xb1, 0x80, 0xe6, 0x98, 0xbe,
	0xe7, 0xa4, 0xba, 0xe9, 0x98, 0xb5, 0xe5, 0xae, 0xb9, 0xe5, 0xb9, 0xb3, 0xe5, 0x9d, 0x87, 0xe6,
	0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12, 0x64, 0x0a, 0x27, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x48, 0x49, 0x53,
	0x54, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x44, 0x43, 0x48, 0x4f, 0x4f, 0x53, 0x45,
	0x10, 0x88, 0x10, 0x1a, 0x36, 0xaa, 0xb6, 0x18, 0x32, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6,
	0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0x9c, 0x80, 0xe8, 0xbf, 0x91, 0x4e,
	0xe5, 0xb1, 0x80, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe9, 0x80, 0x89, 0xe6, 0x8b, 0xa9, 0xe5,
	0xb9, 0xb3, 0xe5, 0x9d, 0x87, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12, 0x62, 0x0a, 0x25, 0x43,
	0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45,
	0x53, 0x53, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x57, 0x45, 0x41, 0x52, 0x45,
	0x51, 0x55, 0x49, 0x50, 0x10, 0x89, 0x10, 0x1a, 0x36, 0xaa, 0xb6, 0x18, 0x32, 0xe6, 0x97, 0xa0,
	0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0x9c, 0x80,
	0xe8, 0xbf, 0x91, 0x4e, 0xe5, 0xb1, 0x80, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0xe7, 0xa9, 0xbf,
	0xe6, 0x88, 0xb4, 0xe5, 0xb9, 0xb3, 0xe5, 0x9d, 0x87, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12,
	0x66, 0x0a, 0x29, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x57,
	0x45, 0x41, 0x52, 0x53, 0x59, 0x4e, 0x54, 0x45, 0x51, 0x55, 0x49, 0x50, 0x10, 0x8a, 0x10, 0x1a,
	0x36, 0xaa, 0xb6, 0x18, 0x32, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d,
	0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0x9c, 0x80, 0xe8, 0xbf, 0x91, 0x4e, 0xe5, 0xb1, 0x80, 0xe6,
	0x88, 0x90, 0xe8, 0xa3, 0x85, 0xe7, 0xa9, 0xbf, 0xe6, 0x88, 0xb4, 0xe5, 0xb9, 0xb3, 0xe5, 0x9d,
	0x87, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12, 0x5a, 0x0a, 0x27, 0x43, 0x4f, 0x4e, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54,
	0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x43, 0x4f, 0x49, 0x4e, 0x47,
	0x45, 0x54, 0x10, 0x8b, 0x10, 0x1a, 0x2c, 0xaa, 0xb6, 0x18, 0x28, 0xe6, 0x97, 0xa0, 0xe7, 0x8a,
	0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x8e, 0xb7, 0xe5, 0xbe,
	0x97, 0xe5, 0xb1, 0x80, 0xe5, 0x86, 0x85, 0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81, 0xe6, 0x80, 0xbb,
	0xe6, 0x95, 0xb0, 0x12, 0x59, 0x0a, 0x26, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c,
	0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x45, 0x58, 0x50, 0x47, 0x45, 0x54, 0x10, 0x8c, 0x10,
	0x1a, 0x2c, 0xaa, 0xb6, 0x18, 0x28, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6,
	0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x8e, 0xb7, 0xe5, 0xbe, 0x97, 0xe5, 0xb1, 0x80, 0xe5,
	0x86, 0x85, 0xe7, 0xbb, 0x8f, 0xe9, 0xaa, 0x8c, 0xe6, 0x80, 0xbb, 0xe6, 0x95, 0xb0, 0x12, 0x5b,
	0x0a, 0x28, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x42, 0x41, 0x54, 0x54,
	0x4c, 0x45, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x47, 0x45, 0x54, 0x10, 0x8d, 0x10, 0x1a, 0x2c, 0xaa,
	0xb6, 0x18, 0x28, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4,
	0xbb, 0xb6, 0x5f, 0xe8, 0x8e, 0xb7, 0xe5, 0xbe, 0x97, 0xe8, 0xbd, 0xac, 0xe8, 0x81, 0x8c, 0xe4,
	0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0xe6, 0x80, 0xbb, 0xe6, 0x95, 0xb0, 0x12, 0x49, 0x0a, 0x1c, 0x43,
	0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45,
	0x53, 0x53, 0x5f, 0x47, 0x4f, 0x4f, 0x44, 0x53, 0x42, 0x55, 0x59, 0x10, 0x8e, 0x10, 0x1a, 0x26,
	0xaa, 0xb6, 0x18, 0x22, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1,
	0xe4, 0xbb, 0xb6, 0x5f, 0xe5, 0x95, 0x86, 0xe5, 0x9f, 0x8e, 0xe8, 0xb4, 0xad, 0xe4, 0xb9, 0xb0,
	0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12, 0x56, 0x0a, 0x23, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x51, 0x55,
	0x41, 0x4c, 0x49, 0x54, 0x59, 0x49, 0x54, 0x45, 0x4d, 0x48, 0x41, 0x56, 0x45, 0x10, 0x8f, 0x10,
	0x1a, 0x2c, 0xaa, 0xb6, 0x18, 0x28, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6,
	0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe5, 0x93, 0x81, 0xe8, 0xb4, 0xa8, 0xe7, 0x89, 0xa9, 0xe5,
	0x93, 0x81, 0xe6, 0x8b, 0xa5, 0xe6, 0x9c, 0x89, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x12, 0x57,
	0x0a, 0x24, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x48, 0x45, 0x52, 0x4f,
	0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x90, 0x10, 0x1a, 0x2c, 0xaa, 0xb6, 0x18, 0x28, 0xe6,
	0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe9,
	0x80, 0xa0, 0xe6, 0x88, 0x90, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe4, 0xbc, 0xa4, 0xe5, 0xae,
	0xb3, 0xe6, 0x80, 0xbb, 0xe6, 0x95, 0xb0, 0x12, 0x59, 0x0a, 0x26, 0x43, 0x4f, 0x4e, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54,
	0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x53, 0x54, 0x43, 0x4f, 0x49,
	0x4e, 0x10, 0x91, 0x10, 0x1a, 0x2c, 0xaa, 0xb6, 0x18, 0x28, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6,
	0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x8e, 0xb7, 0xe5, 0xbe, 0x97,
	0xe5, 0x88, 0xa9, 0xe6, 0x81, 0xaf, 0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81, 0xe6, 0x80, 0xbb, 0xe6,
	0x95, 0xb0, 0x12, 0x58, 0x0a, 0x25, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f,
	0x46, 0x49, 0x4e, 0x45, 0x51, 0x55, 0x49, 0x50, 0x43, 0x4e, 0x54, 0x10, 0x93, 0x10, 0x1a, 0x2c,
	0xaa, 0xb6, 0x18, 0x28, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1,
	0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x8e, 0xb7, 0xe5, 0xbe, 0x97, 0xe6, 0x88, 0x90, 0xe5, 0x93, 0x81,
	0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0xe6, 0x80, 0xbb, 0xe6, 0x95, 0xb0, 0x12, 0x51, 0x0a, 0x24,
	0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c,
	0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x43, 0x48, 0x41,
	0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x94, 0x10, 0x1a, 0x26, 0xaa, 0xb6, 0x18, 0x22, 0xe6, 0x97, 0xa0,
	0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe7, 0x8e, 0xa9,
	0xe5, 0xae, 0xb6, 0xe6, 0xb3, 0xa8, 0xe5, 0x86, 0x8c, 0xe6, 0xb8, 0xa0, 0xe9, 0x81, 0x93, 0x12,
	0x53, 0x0a, 0x20, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x57, 0x4f, 0x52, 0x4c, 0x44, 0x43, 0x48, 0x41, 0x54,
	0x43, 0x4e, 0x54, 0x10, 0x95, 0x10, 0x1a, 0x2c, 0xaa, 0xb6, 0x18, 0x28, 0xe6, 0x97, 0xa0, 0xe7,
	0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe4, 0xb8, 0x96, 0xe7,
	0x95, 0x8c, 0xe9, 0xa2, 0x91, 0xe9, 0x81, 0x93, 0xe8, 0x81, 0x8a, 0xe5, 0xa4, 0xa9, 0xe6, 0xac,
	0xa1, 0xe6, 0x95, 0xb0, 0x12, 0x54, 0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x4d, 0x41, 0x58, 0x52, 0x41, 0x4e, 0x4b, 0x10, 0x96, 0x10, 0x1a, 0x2c, 0xaa, 0xb6,
	0x18, 0x28, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb,
	0xb6, 0x5f, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe6, 0x9c, 0x80, 0xe9, 0xab, 0x98, 0xe6, 0xae,
	0xb5, 0xe4, 0xbd, 0x8d, 0xe8, 0xbe, 0xbe, 0xe6, 0x88, 0x90, 0x12, 0x4b, 0x0a, 0x1e, 0x43, 0x4f,
	0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53,
	0x53, 0x5f, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x45, 0x58, 0x50, 0x10, 0x97, 0x10, 0x1a,
	0x26, 0xaa, 0xb6, 0x18, 0x22, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d,
	0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0x88, 0x90, 0xe5, 0xb0, 0xb1, 0xe7, 0x82, 0xb9, 0xe5, 0x80,
	0xbc, 0xe8, 0xbe, 0xbe, 0xe6, 0x88, 0x90, 0x12, 0x4d, 0x0a, 0x20, 0x43, 0x4f, 0x4e, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54,
	0x4f, 0x4b, 0x45, 0x4e, 0x54, 0x41, 0x53, 0x4b, 0x46, 0x49, 0x4e, 0x10, 0x98, 0x10, 0x1a, 0x26,
	0xaa, 0xb6, 0x18, 0x22, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1,
	0xe4, 0xbb, 0xb6, 0x5f, 0xe5, 0xae, 0x8c, 0xe6, 0x88, 0x90, 0xe6, 0x88, 0x98, 0xe4, 0xbb, 0xa4,
	0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x12, 0x55, 0x0a, 0x22, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x43,
	0x41, 0x52, 0x43, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x48, 0x41, 0x56, 0x45, 0x10, 0x99, 0x10, 0x1a,
	0x2c, 0xaa, 0xb6, 0x18, 0x28, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d,
	0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe7, 0xa8, 0x80, 0xe6, 0x9c, 0x89, 0xe7, 0x89, 0xa9, 0xe5, 0x93,
	0x81, 0xe6, 0x8b, 0xa5, 0xe6, 0x9c, 0x89, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x12, 0x4f, 0x0a,
	0x22, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x4c, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x48,
	0x41, 0x56, 0x45, 0x10, 0x9a, 0x10, 0x1a, 0x26, 0xaa, 0xb6, 0x18, 0x22, 0xe6, 0x97, 0xa0, 0xe7,
	0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0xa3, 0x8b, 0xe7,
	0x9b, 0x98, 0xe6, 0x8b, 0xa5, 0xe6, 0x9c, 0x89, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x12, 0x61,
	0x0a, 0x27, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x43,
	0x59, 0x4c, 0x4f, 0x52, 0x44, 0x48, 0x41, 0x56, 0x45, 0x10, 0x9b, 0x10, 0x1a, 0x33, 0xaa, 0xb6,
	0x18, 0x2f, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb,
	0xb6, 0x5f, 0xe6, 0x8b, 0xa5, 0xe6, 0x9c, 0x89, 0xe7, 0x83, 0xad, 0xe5, 0x8a, 0x9b, 0xe5, 0x80,
	0xbc, 0x58, 0xe7, 0xba, 0xa7, 0xe4, 0xbb, 0xa5, 0xe4, 0xb8, 0x8a, 0xe6, 0xa3, 0x8b, 0xe6, 0x89,
	0x8b, 0x12, 0x4e, 0x0a, 0x24, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x57,
	0x49, 0x54, 0x48, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x10, 0x9c, 0x10, 0x1a, 0x23, 0xaa, 0xb6,
	0x18, 0x1f, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb,
	0xb6, 0x5f, 0xe4, 0xb8, 0x8e, 0xe5, 0xa5, 0xbd, 0xe5, 0x8f, 0x8b, 0xe6, 0xb8, 0xb8, 0xe6, 0x88,
	0x8f, 0x12, 0x5d, 0x0a, 0x24, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x4c, 0x4f, 0x52, 0x44,
	0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x43, 0x4e, 0x54, 0x10, 0x9d, 0x10, 0x1a, 0x32, 0xaa, 0xb6,
	0x18, 0x2e, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb,
	0xb6, 0x5f, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe5, 0x8f,
	0x82, 0xe4, 0xb8, 0x8e, 0xe5, 0xaf, 0xb9, 0xe5, 0xb1, 0x80, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f,
	0x12, 0x5c, 0x0a, 0x26, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x44, 0x49, 0x46, 0x46,
	0x50, 0x52, 0x45, 0x54, 0x57, 0x4f, 0x53, 0x45, 0x54, 0x53, 0x10, 0x9e, 0x10, 0x1a, 0x2f, 0xaa,
	0xb6, 0x18, 0x2b, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4,
	0xbb, 0xb6, 0x5f, 0xe5, 0x89, 0x8d, 0xe4, 0xb8, 0xa4, 0xe5, 0xb1, 0x80, 0xe5, 0xaf, 0xb9, 0xe5,
	0xb1, 0x80, 0xe6, 0x8e, 0x92, 0xe5, 0x90, 0x8d, 0xe5, 0xb7, 0xae, 0xe5, 0xbc, 0x82, 0x12, 0x5d,
	0x0a, 0x24, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x44, 0x52, 0x41, 0x57, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x53, 0x55, 0x4d, 0x10, 0x9f, 0x10, 0x1a, 0x32, 0xaa, 0xb6, 0x18, 0x2e, 0xe6,
	0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe4,
	0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe5, 0xa5, 0x96, 0xe5, 0x88,
	0xb8, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0xe7, 0xb4, 0xaf, 0xe8, 0xae, 0xa1, 0x12, 0x5a, 0x0a,
	0x27, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x4c, 0x45, 0x53, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0xa0, 0x10, 0x1a, 0x2c, 0xaa, 0xb6, 0x18,
	0x28, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6,
	0x5f, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe4, 0xb8, 0xbb, 0xe5, 0x8a, 0xa8, 0xe6, 0x8a, 0x80,
	0xe8, 0x83, 0xbd, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12, 0x58, 0x0a, 0x25, 0x43, 0x4f, 0x4e,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53,
	0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x53,
	0x55, 0x4d, 0x10, 0xa1, 0x10, 0x1a, 0x2c, 0xaa, 0xb6, 0x18, 0x28, 0xe6, 0x97, 0xa0, 0xe7, 0x8a,
	0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe5, 0x87, 0xbb, 0xe8, 0xb4,
	0xa5, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xe7, 0xb4, 0xaf,
	0xe8, 0xae, 0xa1, 0x12, 0x56, 0x0a, 0x23, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45,
	0x52, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x53, 0x55, 0x4d, 0x10, 0xa2, 0x10, 0x1a, 0x2c, 0xaa,
	0xb6, 0x18, 0x28, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4,
	0xbb, 0xb6, 0x5f, 0xe9, 0x80, 0xa0, 0xe6, 0x88, 0x90, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe4,
	0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0xe7, 0xb4, 0xaf, 0xe8, 0xae, 0xa1, 0x12, 0x5e, 0x0a, 0x22, 0x43,
	0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45,
	0x53, 0x53, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x55, 0x53, 0x45, 0x50, 0x52, 0x4f, 0x50, 0x53, 0x55,
	0x4d, 0x10, 0xa3, 0x10, 0x1a, 0x35, 0xaa, 0xb6, 0x18, 0x31, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6,
	0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b,
	0xe4, 0xb8, 0xad, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x81, 0x93, 0xe5, 0x85, 0xb7, 0xe6,
	0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xe7, 0xb4, 0xaf, 0xe8, 0xae, 0xa1, 0x12, 0x62, 0x0a, 0x26, 0x43,
	0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45,
	0x53, 0x53, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x55, 0x53, 0x45, 0x51, 0x55, 0x49, 0x43, 0x4b, 0x4d,
	0x53, 0x47, 0x53, 0x55, 0x4d, 0x10, 0xa4, 0x10, 0x1a, 0x35, 0xaa, 0xb6, 0x18, 0x31, 0xe6, 0x97,
	0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0xaf,
	0x94, 0xe8, 0xb5, 0x9b, 0xe4, 0xb8, 0xad, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7, 0x9f, 0xad,
	0xe8, 0xaf, 0xad, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xe7, 0xb4, 0xaf, 0xe8, 0xae, 0xa1, 0x12,
	0x5a, 0x0a, 0x27, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x4f, 0x50, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x41, 0x54, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x55, 0x4d, 0x10, 0xa5, 0x10, 0x1a, 0x2c, 0xaa,
	0xb6, 0x18, 0x28, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4,
	0xbb, 0xb6, 0x5f, 0xe4, 0xba, 0xba, 0xe5, 0x8f, 0xa3, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xe8,
	0xbe, 0xbe, 0xe6, 0x88, 0x90, 0xe7, 0xb4, 0xaf, 0xe8, 0xae, 0xa1, 0x12, 0x5d, 0x0a, 0x27, 0x43,
	0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45,
	0x53, 0x53, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x53, 0x55, 0x4d, 0x10, 0xa6, 0x10, 0x1a, 0x2f, 0xaa, 0xb6, 0x18, 0x2b, 0xe6,
	0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8,
	0x8e, 0xb7, 0xe5, 0xbe, 0x97, 0xe6, 0x88, 0x98, 0xe9, 0x98, 0x9f, 0xe8, 0xb4, 0xa1, 0xe7, 0x8c,
	0xae, 0xe5, 0xba, 0xa6, 0xe7, 0xb4, 0xaf, 0xe8, 0xae, 0xa1, 0x12, 0x44, 0x0a, 0x1d, 0x43, 0x4f,
	0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53,
	0x53, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x10, 0xa7, 0x10, 0x1a, 0x20,
	0xaa, 0xb6, 0x18, 0x1c, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1,
	0xe4, 0xbb, 0xb6, 0x5f, 0xe5, 0x8a, 0xa0, 0xe5, 0x85, 0xa5, 0xe6, 0x88, 0x98, 0xe9, 0x98, 0x9f,
	0x12, 0x63, 0x0a, 0x26, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f,
	0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x10, 0xa8, 0x10, 0x1a, 0x36, 0xaa,
	0xb6, 0x18, 0x32, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4,
	0xbb, 0xb6, 0x5f, 0xe6, 0x9c, 0x80, 0xe8, 0xbf, 0x91, 0x4e, 0xe5, 0xb1, 0x80, 0xe5, 0xaf, 0xb9,
	0xe5, 0xb1, 0x80, 0xe5, 0x8f, 0x91, 0xe7, 0x94, 0x9f, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe8,
	0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0x12, 0x4e, 0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x4a, 0x4f, 0x49,
	0x4e, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x44, 0x41, 0x59, 0x10, 0xa9, 0x10, 0x1a, 0x26, 0xaa,
	0xb6, 0x18, 0x22, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4,
	0xbb, 0xb6, 0x5f, 0xe5, 0x8a, 0xa0, 0xe5, 0x85, 0xa5, 0xe6, 0x88, 0x98, 0xe9, 0x98, 0x9f, 0xe5,
	0xa4, 0xa9, 0xe6, 0x95, 0xb0, 0x12, 0x51, 0x0a, 0x24, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x48, 0x45,
	0x53, 0x53, 0x44, 0x45, 0x43, 0x4f, 0x52, 0x41, 0x54, 0x45, 0x4e, 0x55, 0x4d, 0x10, 0xaa, 0x10,
	0x1a, 0x26, 0xaa, 0xb6, 0x18, 0x22, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6,
	0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x8e, 0xb7, 0xe5, 0xbe, 0x97, 0xe9, 0x85, 0x8d, 0xe9,
	0xa5, 0xb0, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x12, 0x50, 0x0a, 0x25, 0x43, 0x4f, 0x4e, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f,
	0x43, 0x48, 0x45, 0x53, 0x53, 0x44, 0x45, 0x43, 0x4f, 0x52, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c,
	0x4c, 0x10, 0xab, 0x10, 0x1a, 0x24, 0xaa, 0xb6, 0x18, 0x20, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6,
	0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe9, 0x9b, 0x86, 0xe6, 0xbb, 0xa1,
	0x4e, 0xe9, 0x98, 0xb6, 0xe9, 0x85, 0x8d, 0xe9, 0xa5, 0xb0, 0x12, 0x5c, 0x0a, 0x26, 0x43, 0x4f,
	0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53,
	0x53, 0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e,
	0x43, 0x59, 0x4c, 0x56, 0x10, 0xac, 0x10, 0x1a, 0x2f, 0xaa, 0xb6, 0x18, 0x2b, 0xe6, 0x97, 0xa0,
	0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0xa3, 0x8b,
	0xe6, 0x89, 0x8b, 0xe7, 0x86, 0x9f, 0xe7, 0xbb, 0x83, 0xe5, 0xba, 0xa6, 0xe7, 0xad, 0x89, 0xe7,
	0xba, 0xa7, 0xe8, 0xbe, 0xbe, 0xe6, 0x88, 0x90, 0x12, 0x49, 0x0a, 0x22, 0x43, 0x4f, 0x4e, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f,
	0x41, 0x44, 0x44, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x45, 0x46, 0x54, 0x10, 0xad,
	0x10, 0x1a, 0x20, 0xaa, 0xb6, 0x18, 0x1c, 0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe8, 0x8e, 0xb7, 0xe5, 0xbe, 0x97, 0xe7, 0x89, 0xb9,
	0xe6, 0x95, 0x88, 0x12, 0x4d, 0x0a, 0x20, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x52, 0x55,
	0x49, 0x54, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0xae, 0x10, 0x1a, 0x26, 0xaa, 0xb6, 0x18, 0x22,
	0xe6, 0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f,
	0xe6, 0x96, 0xb0, 0xe6, 0x89, 0x8b, 0xe7, 0xa7, 0xaf, 0xe5, 0x88, 0x86, 0xe8, 0xbe, 0xbe, 0xe6,
	0x88, 0x90, 0x12, 0x4a, 0x0a, 0x20, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x52, 0x55, 0x49,
	0x54, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0xaf, 0x10, 0x1a, 0x23, 0xaa, 0xb6, 0x18, 0x1f, 0xe6,
	0x97, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6,
	0x96, 0xb0, 0xe6, 0x89, 0x8b, 0xe6, 0x88, 0x98, 0xe5, 0x85, 0xb3, 0xe9, 0x97, 0xad, 0x12, 0x60,
	0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x4e, 0x45, 0x57, 0x42, 0x49, 0x45, 0x54, 0x41, 0x53, 0x4b,
	0x46, 0x49, 0x4e, 0x10, 0xb0, 0x10, 0x1a, 0x38, 0xaa, 0xb6, 0x18, 0x34, 0xe6, 0x97, 0xa0, 0xe7,
	0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5f, 0xe6, 0x96, 0xb0, 0xe6,
	0x89, 0x8b, 0xe6, 0xb4, 0xbb, 0xe5, 0x8a, 0xa8, 0xe9, 0x80, 0x9a, 0xe7, 0x94, 0xa8, 0xe4, 0xbb,
	0xbb, 0xe5, 0x8a, 0xa1, 0xe5, 0xae, 0x8c, 0xe6, 0x88, 0x90, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f,
	0x12, 0x1c, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0xb1, 0x10, 0x2a, 0xa5,
	0x08, 0x0a, 0x0f, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x12, 0x21, 0x0a, 0x0b, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x42, 0x41, 0x53,
	0x45, 0x10, 0x00, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x9f, 0xba, 0xe7, 0xa1, 0x80, 0xe7,
	0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0x12, 0x22, 0x0a, 0x0c, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f,
	0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x88, 0x98,
	0xe4, 0xbb, 0xa4, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0x12, 0x21, 0x0a, 0x0b, 0x55, 0x4e, 0x4c,
	0x4f, 0x43, 0x4b, 0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x10, 0x02, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c,
	0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0x12, 0x21, 0x0a, 0x0b,
	0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x10, 0x03, 0x1a, 0x10, 0xaa,
	0xb6, 0x18, 0x0c, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0x12,
	0x23, 0x0a, 0x0d, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x55, 0x50,
	0x10, 0x04, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe9, 0x98, 0xb5, 0xe5, 0xae, 0xb9, 0xe7, 0xb3,
	0xbb, 0xe7, 0xbb, 0x9f, 0x12, 0x21, 0x0a, 0x0b, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x57,
	0x45, 0x41, 0x4c, 0x10, 0x05, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0xb4, 0xbb, 0xe5, 0x8a,
	0xa8, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0x12, 0x24, 0x0a, 0x0b, 0x55, 0x4e, 0x4c, 0x4f, 0x43,
	0x4b, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x10, 0x06, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe6, 0x8e,
	0x92, 0xe8, 0xa1, 0x8c, 0xe6, 0xa6, 0x9c, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0x12, 0x23, 0x0a,
	0x0d, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x10, 0x07,
	0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0xa5, 0xbd, 0xe5, 0x8f, 0x8b, 0xe7, 0xb3, 0xbb, 0xe7,
	0xbb, 0x9f, 0x12, 0x24, 0x0a, 0x0e, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x50, 0x41, 0x43,
	0x4b, 0x41, 0x47, 0x45, 0x10, 0x08, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0x83, 0x8c, 0xe5,
	0x8c, 0x85, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0x12, 0x21, 0x0a, 0x0b, 0x55, 0x4e, 0x4c, 0x4f,
	0x43, 0x4b, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x09, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8,
	0x81, 0x8a, 0xe5, 0xa4, 0xa9, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0x12, 0x24, 0x0a, 0x0e, 0x55,
	0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x10, 0x0a, 0x1a,
	0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x88, 0x90, 0xe5, 0xb0, 0xb1, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb,
	0x9f, 0x12, 0x2b, 0x0a, 0x12, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x50, 0x45, 0x52, 0x53,
	0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x53, 0x45, 0x10, 0x0b, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe4,
	0xb8, 0xaa, 0xe6, 0x80, 0xa7, 0xe5, 0x8c, 0x96, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0x12, 0x24,
	0x0a, 0x0e, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x55, 0x50, 0x4f, 0x4e, 0x53,
	0x10, 0x0c, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe7, 0x82, 0xb9, 0xe5, 0x88, 0xb8, 0xe7, 0xb3,
	0xbb, 0xe7, 0xbb, 0x9f, 0x12, 0x21, 0x0a, 0x0b, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x4d,
	0x41, 0x49, 0x4c, 0x10, 0x0d, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe9, 0x82, 0xae, 0xe4, 0xbb,
	0xb6, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0x12, 0x23, 0x0a, 0x0d, 0x55, 0x4e, 0x4c, 0x4f, 0x43,
	0x4b, 0x5f, 0x4e, 0x45, 0x57, 0x42, 0x49, 0x45, 0x10, 0x0e, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c,
	0xe6, 0x96, 0xb0, 0xe6, 0x89, 0x8b, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0x12, 0x20, 0x0a, 0x0a,
	0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x50, 0x56, 0x50, 0x10, 0x0f, 0x1a, 0x10, 0xaa, 0xb6,
	0x18, 0x0c, 0xe5, 0xaf, 0xb9, 0xe5, 0xb1, 0x80, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0x12, 0x1b,
	0x0a, 0x09, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x47, 0x4d, 0x10, 0x10, 0x1a, 0x0c, 0xaa,
	0xb6, 0x18, 0x08, 0x47, 0x4d, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0x12, 0x21, 0x0a, 0x0b, 0x55,
	0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x11, 0x1a, 0x10, 0xaa, 0xb6,
	0x18, 0x0c, 0xe6, 0x9b, 0xb4, 0xe5, 0x90, 0x8d, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0x12, 0x21,
	0x0a, 0x0b, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x48, 0x4f, 0x50, 0x10, 0x12, 0x1a,
	0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x95, 0x86, 0xe5, 0x9f, 0x8e, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb,
	0x9f, 0x12, 0x25, 0x0a, 0x0f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x48, 0x4f, 0x4d, 0x45,
	0x50, 0x41, 0x47, 0x45, 0x10, 0x13, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe4, 0xb8, 0xaa, 0xe4,
	0xba, 0xba, 0xe4, 0xb8, 0xbb, 0xe9, 0xa1, 0xb5, 0x12, 0x22, 0x0a, 0x0c, 0x55, 0x4e, 0x4c, 0x4f,
	0x43, 0x4b, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x10, 0x14, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c,
	0xe6, 0x88, 0x98, 0xe9, 0x98, 0x9f, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0x12, 0x2a, 0x0a, 0x14,
	0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x52,
	0x41, 0x56, 0x45, 0x4c, 0x10, 0x15, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0xb5, 0x9b, 0xe5,
	0xad, 0xa3, 0xe4, 0xb9, 0x8b, 0xe6, 0x97, 0x85, 0x12, 0x2e, 0x0a, 0x18, 0x55, 0x4e, 0x4c, 0x4f,
	0x43, 0x4b, 0x5f, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x41,
	0x57, 0x41, 0x52, 0x44, 0x10, 0x16, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0xb5, 0x9b, 0xe5,
	0xad, 0xa3, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0x12, 0x28, 0x0a, 0x12, 0x55, 0x4e, 0x4c, 0x4f,
	0x43, 0x4b, 0x5f, 0x47, 0x52, 0x4f, 0x57, 0x54, 0x48, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x10, 0x17,
	0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x88, 0x90, 0xe9, 0x95, 0xbf, 0xe4, 0xb9, 0x8b, 0xe8,
	0xb7, 0xaf, 0x12, 0x3a, 0x0a, 0x1b, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x49, 0x4e, 0x5f,
	0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x41, 0x57, 0x41, 0x52,
	0x44, 0x10, 0x18, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe4,
	0xb8, 0xad, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0x12, 0x22,
	0x0a, 0x0c, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x10, 0x19,
	0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x88, 0x86, 0xe4, 0xba, 0xab, 0xe7, 0xb3, 0xbb, 0xe7,
	0xbb, 0x9f, 0x12, 0x21, 0x0a, 0x0e, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x43,
	0x52, 0x55, 0x49, 0x54, 0x10, 0x1a, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe6, 0x96, 0xb0, 0xe6,
	0x89, 0x8b, 0xe6, 0x88, 0x98, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f,
	0x4c, 0x41, 0x53, 0x54, 0x10, 0x1b, 0x2a, 0x99, 0x01, 0x0a, 0x0d, 0x43, 0x4f, 0x4d, 0x5f, 0x4c,
	0x49, 0x46, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x20, 0x0a, 0x10, 0x4c, 0x49, 0x46, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x45, 0x56, 0x45, 0x52, 0x10, 0x00, 0x1a, 0x0a,
	0xaa, 0xb6, 0x18, 0x06, 0xe6, 0xb0, 0xb8, 0xe4, 0xb9, 0x85, 0x12, 0x20, 0x0a, 0x10, 0x4c, 0x49,
	0x46, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x58, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x01,
	0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0xae, 0x9a, 0xe6, 0x97, 0xb6, 0x12, 0x23, 0x0a, 0x10,
	0x4c, 0x49, 0x46, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x54, 0x49, 0x4d, 0x45,
	0x10, 0x02, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe5, 0x8f, 0xaf, 0xe5, 0x8f, 0xa0, 0xe5, 0x8a,
	0xa0, 0x12, 0x1f, 0x0a, 0x0f, 0x4c, 0x49, 0x46, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x10, 0x03, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe8, 0xb5, 0x9b, 0xe5,
	0xad, 0xa3, 0x2a, 0x85, 0x01, 0x0a, 0x0a, 0x45, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x27, 0x0a, 0x11, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x99,
	0xae, 0xe9, 0x80, 0x9a, 0xe6, 0x88, 0x98, 0xe4, 0xbb, 0xa4, 0x12, 0x25, 0x0a, 0x0f, 0x54, 0x4f,
	0x4b, 0x45, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x01, 0x1a,
	0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe9, 0xab, 0x98, 0xe7, 0xba, 0xa7, 0xe6, 0x88, 0x98, 0xe4, 0xbb,
	0xa4, 0x12, 0x27, 0x0a, 0x11, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x45, 0x4c, 0x55, 0x58, 0x45, 0x10, 0x02, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0xb1,
	0xaa, 0xe5, 0x8d, 0x8e, 0xe6, 0x88, 0x98, 0xe4, 0xbb, 0xa4, 0x2a, 0xc1, 0x03, 0x0a, 0x0c, 0x48,
	0x65, 0x72, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x48,
	0x65, 0x72, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65,
	0x10, 0x00, 0x12, 0x2f, 0x0a, 0x16, 0x48, 0x65, 0x72, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4d, 0x75, 0x6c, 0x61, 0x6e, 0x51, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x1a, 0x13,
	0xaa, 0xb6, 0x18, 0x0f, 0xe8, 0x8a, 0xb1, 0xe6, 0x9c, 0xa8, 0xe5, 0x85, 0xb0, 0xe8, 0xbd, 0xbb,
	0xe5, 0x89, 0x91, 0x12, 0x30, 0x0a, 0x17, 0x48, 0x65, 0x72, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x4d, 0x75, 0x6c, 0x61, 0x6e, 0x5a, 0x68, 0x6f, 0x6e, 0x67, 0x10, 0x02,
	0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe8, 0x8a, 0xb1, 0xe6, 0x9c, 0xa8, 0xe5, 0x85, 0xb0, 0xe9,
	0x87, 0x8d, 0xe5, 0x89, 0x91, 0x12, 0x27, 0x0a, 0x17, 0x48, 0x65, 0x72, 0x6f, 0x4d, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x69, 0x78, 0x69, 0x6e,
	0x10, 0x03, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0x85, 0x89, 0xe4, 0xbf, 0xa1, 0x12, 0x26,
	0x0a, 0x16, 0x48, 0x65, 0x72, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44,
	0x61, 0x72, 0x6b, 0x4c, 0x69, 0x78, 0x69, 0x6e, 0x10, 0x04, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06,
	0xe6, 0x9a, 0x97, 0xe4, 0xbf, 0xa1, 0x12, 0x35, 0x0a, 0x1c, 0x48, 0x65, 0x72, 0x6f, 0x4d, 0x6f,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x5a, 0x68, 0x75, 0x42, 0x61, 0x4a, 0x69, 0x65, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x05, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe7, 0x8c,
	0xaa, 0xe5, 0x85, 0xab, 0xe6, 0x88, 0x92, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0x12, 0x37, 0x0a,
	0x1b, 0x48, 0x65, 0x72, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x5a, 0x68,
	0x75, 0x42, 0x61, 0x4a, 0x69, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x10, 0x06, 0x1a, 0x16,
	0xaa, 0xb6, 0x18, 0x12, 0xe7, 0x8c, 0xaa, 0xe5, 0x85, 0xab, 0xe6, 0x88, 0x92, 0xe7, 0x9b, 0xae,
	0xe6, 0xa0, 0x87, 0xe5, 0xb1, 0x82, 0x12, 0x36, 0x0a, 0x1d, 0x48, 0x65, 0x72, 0x6f, 0x4d, 0x6f,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x75, 0x6e, 0x57, 0x75, 0x4b, 0x6f, 0x6e, 0x67,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x07, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe5,
	0xad, 0x99, 0xe6, 0x82, 0x9f, 0xe7, 0xa9, 0xba, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0x12, 0x38,
	0x0a, 0x1c, 0x48, 0x65, 0x72, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53,
	0x75, 0x6e, 0x57, 0x75, 0x4b, 0x6f, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x10, 0x08,
	0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0xad, 0x99, 0xe6, 0x82, 0x9f, 0xe7, 0xa9, 0xba, 0xe7,
	0x9b, 0xae, 0xe6, 0xa0, 0x87, 0xe5, 0xb1, 0x82, 0x1a, 0x04, 0x88, 0xf9, 0x2b, 0x01, 0x2a, 0x8b,
	0x02, 0x0a, 0x10, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x34,
	0x0a, 0x1e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x59, 0x75, 0x61, 0x6e, 0x53, 0x75, 0x53, 0x68, 0x69, 0x5f, 0x48, 0x75, 0x6f,
	0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x85, 0x83, 0xe7, 0xb4, 0xa0, 0xe4, 0xbd,
	0xbf, 0xe7, 0x81, 0xab, 0x12, 0x34, 0x0a, 0x1e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x59, 0x75, 0x61, 0x6e, 0x53, 0x75, 0x53,
	0x68, 0x69, 0x5f, 0x4c, 0x65, 0x69, 0x10, 0x02, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x85,
	0x83, 0xe7, 0xb4, 0xa0, 0xe4, 0xbd, 0xbf, 0xe9, 0x9b, 0xb7, 0x12, 0x35, 0x0a, 0x1f, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x59,
	0x75, 0x61, 0x6e, 0x53, 0x75, 0x53, 0x68, 0x69, 0x5f, 0x53, 0x68, 0x75, 0x69, 0x10, 0x03, 0x1a,
	0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x85, 0x83, 0xe7, 0xb4, 0xa0, 0xe4, 0xbd, 0xbf, 0xe6, 0xb0,
	0xb4, 0x12, 0x33, 0x0a, 0x1d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x59, 0x75, 0x61, 0x6e, 0x53, 0x75, 0x53, 0x68, 0x69, 0x5f,
	0x4d, 0x75, 0x10, 0x04, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x85, 0x83, 0xe7, 0xb4, 0xa0,
	0xe4, 0xbd, 0xbf, 0xe6, 0x9c, 0xa8, 0x1a, 0x04, 0x88, 0xf9, 0x2b, 0x01, 0x2a, 0x91, 0x1d, 0x0a,
	0x0f, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x39, 0x0a, 0x21, 0x52, 0x45,
	0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x54,
	0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x31, 0x5f, 0x51, 0x55, 0x45, 0x45, 0x4e, 0x10,
	0x01, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0x53, 0x31, 0xe5,
	0xa5, 0xb3, 0xe5, 0xb8, 0x9d, 0x12, 0x38, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c,
	0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52,
	0x44, 0x5f, 0x53, 0x31, 0x5f, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x1a, 0x12, 0xaa, 0xb6, 0x18,
	0x0e, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0x53, 0x31, 0xe5, 0x90, 0x9b, 0xe4, 0xb8, 0xbb, 0x12,
	0x3e, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x31, 0x5f, 0x45,
	0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x1a, 0x15, 0xaa, 0xb6, 0x18, 0x11, 0xe6, 0xa0,
	0x87, 0xe5, 0x87, 0x86, 0x53, 0x31, 0xe5, 0x85, 0x83, 0xe7, 0xb4, 0xa0, 0xe4, 0xbd, 0xbf, 0x12,
	0x3a, 0x0a, 0x22, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x31, 0x5f, 0x4d,
	0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x04, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0xe6, 0xa0, 0x87,
	0xe5, 0x87, 0x86, 0x53, 0x31, 0xe6, 0xb3, 0x95, 0xe5, 0xb8, 0x88, 0x12, 0x3c, 0x0a, 0x24, 0x52,
	0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53,
	0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x31, 0x5f, 0x48, 0x45, 0x52, 0x43, 0x55,
	0x4c, 0x45, 0x53, 0x10, 0x05, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0xe6, 0xa0, 0x87, 0xe5, 0x87,
	0x86, 0x53, 0x31, 0xe5, 0x8a, 0x9b, 0xe5, 0xa3, 0xab, 0x12, 0x3b, 0x0a, 0x23, 0x52, 0x45, 0x53,
	0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41,
	0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x31, 0x5f, 0x53, 0x4f, 0x4c, 0x44, 0x49, 0x45, 0x52,
	0x10, 0x06, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0x53, 0x31,
	0xe6, 0x88, 0x98, 0xe5, 0xa3, 0xab, 0x12, 0x3c, 0x0a, 0x24, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45,
	0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41,
	0x52, 0x44, 0x5f, 0x53, 0x31, 0x5f, 0x41, 0x53, 0x53, 0x41, 0x53, 0x53, 0x49, 0x4e, 0x10, 0x07,
	0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0x53, 0x31, 0xe5, 0x88,
	0xba, 0xe5, 0xae, 0xa2, 0x12, 0x3e, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44,
	0x5f, 0x53, 0x31, 0x5f, 0x41, 0x52, 0x4d, 0x4f, 0x52, 0x45, 0x52, 0x10, 0x08, 0x1a, 0x15, 0xaa,
	0xb6, 0x18, 0x11, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0x53, 0x31, 0xe6, 0x9e, 0xaa, 0xe6, 0xa2,
	0xb0, 0xe5, 0xb8, 0x88, 0x12, 0x3a, 0x0a, 0x22, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44,
	0x5f, 0x53, 0x31, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x45, 0x52, 0x10, 0x09, 0x1a, 0x12, 0xaa, 0xb6,
	0x18, 0x0e, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0x53, 0x31, 0xe5, 0xb0, 0x84, 0xe6, 0x89, 0x8b,
	0x12, 0x3b, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x31, 0x5f,
	0x43, 0x55, 0x52, 0x45, 0x41, 0x49, 0x44, 0x10, 0x0a, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0xe6,
	0xa0, 0x87, 0xe5, 0x87, 0x86, 0x53, 0x31, 0xe5, 0x8c, 0xbb, 0xe5, 0xb8, 0x88, 0x12, 0x3a, 0x0a,
	0x22, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44,
	0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x31, 0x5f, 0x53, 0x48, 0x49,
	0x45, 0x4c, 0x44, 0x10, 0x0b, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0xe6, 0xa0, 0x87, 0xe5, 0x87,
	0x86, 0x53, 0x31, 0xe7, 0x9b, 0xbe, 0xe5, 0x8d, 0xab, 0x12, 0x3d, 0x0a, 0x25, 0x52, 0x45, 0x53,
	0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41,
	0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x31, 0x5f, 0x4d, 0x45, 0x43, 0x48, 0x41, 0x4e, 0x49,
	0x53, 0x4d, 0x10, 0x0c, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86,
	0x53, 0x31, 0xe6, 0x9c, 0xba, 0xe5, 0x85, 0xb3, 0x12, 0x3f, 0x0a, 0x24, 0x52, 0x45, 0x53, 0x5f,
	0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x4e,
	0x44, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x31, 0x5f, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x4d, 0x41, 0x4e,
	0x10, 0x0d, 0x1a, 0x15, 0xaa, 0xb6, 0x18, 0x11, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0x53, 0x31,
	0xe5, 0x89, 0x91, 0xe8, 0x88, 0x9e, 0xe8, 0x80, 0x85, 0x12, 0x3f, 0x0a, 0x27, 0x52, 0x45, 0x53,
	0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41,
	0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x31, 0x5f, 0x44, 0x41, 0x4e, 0x43, 0x49, 0x4e, 0x47,
	0x47, 0x49, 0x52, 0x4c, 0x10, 0x0e, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0xe6, 0xa0, 0x87, 0xe5,
	0x87, 0x86, 0x53, 0x31, 0xe8, 0x88, 0x9e, 0xe5, 0xa7, 0xac, 0x12, 0x40, 0x0a, 0x22, 0x52, 0x45,
	0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x54,
	0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x31, 0x5f, 0x42, 0x4f, 0x4d, 0x42, 0x45, 0x52,
	0x10, 0x0f, 0x1a, 0x18, 0xaa, 0xb6, 0x18, 0x14, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0x53, 0x31,
	0xe7, 0x81, 0xab, 0xe8, 0x8d, 0xaf, 0xe5, 0xa4, 0xa7, 0xe5, 0xb8, 0x88, 0x12, 0x3c, 0x0a, 0x23,
	0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x5f,
	0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x31, 0x5f, 0x59, 0x55, 0x41, 0x4e,
	0x53, 0x55, 0x32, 0x10, 0x10, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe6, 0xa0, 0x87, 0xe5, 0x87,
	0x86, 0x53, 0x31, 0xe5, 0x85, 0x83, 0xe7, 0xb4, 0xa0, 0x32, 0x12, 0x3b, 0x0a, 0x1f, 0x52, 0x45,
	0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x54,
	0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x31, 0x5f, 0x47, 0x55, 0x4e, 0x10, 0x11, 0x1a,
	0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0x53, 0x31, 0xe6, 0x9e, 0xaa,
	0xe6, 0xa2, 0xb0, 0xe5, 0xb8, 0x88, 0x32, 0x12, 0x3d, 0x0a, 0x24, 0x52, 0x45, 0x53, 0x5f, 0x52,
	0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44,
	0x41, 0x52, 0x44, 0x5f, 0x53, 0x31, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x53, 0x4d, 0x41, 0x4e, 0x10,
	0x12, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0x53, 0x31, 0xe5,
	0xb0, 0x84, 0xe6, 0x89, 0x8b, 0x32, 0x12, 0x3b, 0x0a, 0x22, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45,
	0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41,
	0x52, 0x44, 0x5f, 0x53, 0x31, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x45, 0x52, 0x10, 0x13, 0x1a, 0x13,
	0xaa, 0xb6, 0x18, 0x0f, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0x53, 0x31, 0xe5, 0x8c, 0xbb, 0xe5,
	0xb8, 0x88, 0x32, 0x12, 0x3f, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f,
	0x53, 0x31, 0x5f, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x14, 0x1a, 0x16, 0xaa, 0xb6,
	0x18, 0x12, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0x53, 0x31, 0xe5, 0x89, 0x91, 0xe8, 0x88, 0x9e,
	0xe8, 0x80, 0x85, 0x32, 0x12, 0x3c, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44,
	0x5f, 0x53, 0x31, 0x5f, 0x4d, 0x41, 0x47, 0x49, 0x43, 0x10, 0x15, 0x1a, 0x15, 0xaa, 0xb6, 0x18,
	0x11, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0x53, 0x31, 0xe9, 0xad, 0x94, 0xe5, 0xbc, 0x95, 0xe8,
	0x80, 0x85, 0x12, 0x3c, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49,
	0x56, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x53,
	0x31, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x52, 0x10, 0x16, 0x1a, 0x15, 0xaa, 0xb6, 0x18, 0x11, 0xe6,
	0xa0, 0x87, 0xe5, 0x87, 0x86, 0x53, 0x31, 0xe7, 0xbb, 0x9f, 0xe6, 0xb2, 0xbb, 0xe8, 0x80, 0x85,
	0x12, 0x40, 0x0a, 0x22, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x31, 0x5f,
	0x44, 0x41, 0x4e, 0x43, 0x45, 0x52, 0x10, 0x17, 0x1a, 0x18, 0xaa, 0xb6, 0x18, 0x14, 0xe6, 0xa0,
	0x87, 0xe5, 0x87, 0x86, 0x53, 0x31, 0xe9, 0x9c, 0x93, 0xe8, 0xa3, 0xb3, 0xe4, 0xb9, 0x90, 0xe5,
	0xb8, 0x88, 0x12, 0x41, 0x0a, 0x26, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49,
	0x56, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x53,
	0x31, 0x5f, 0x59, 0x49, 0x4e, 0x59, 0x41, 0x4e, 0x47, 0x4a, 0x49, 0x41, 0x10, 0x18, 0x1a, 0x15,
	0xaa, 0xb6, 0x18, 0x11, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0x53, 0x31, 0xe9, 0x98, 0xb4, 0xe9,
	0x98, 0xb3, 0xe5, 0xae, 0xb6, 0x12, 0x3e, 0x0a, 0x26, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c,
	0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52,
	0x44, 0x5f, 0x53, 0x31, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x43, 0x48, 0x45, 0x4e, 0x47, 0x10,
	0x19, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0x53, 0x31, 0xe9,
	0x95, 0xbf, 0xe5, 0x9f, 0x8e, 0x12, 0x3b, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c,
	0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52,
	0x44, 0x5f, 0x53, 0x31, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x41, 0x4e, 0x10, 0x1a, 0x1a, 0x12,
	0xaa, 0xb6, 0x18, 0x0e, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0x53, 0x31, 0xe9, 0x95, 0xbf, 0xe5,
	0xae, 0x89, 0x12, 0x3c, 0x0a, 0x24, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49,
	0x56, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x53,
	0x31, 0x5f, 0x58, 0x55, 0x41, 0x4e, 0x59, 0x4f, 0x4e, 0x47, 0x10, 0x1b, 0x1a, 0x12, 0xaa, 0xb6,
	0x18, 0x0e, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0x53, 0x31, 0xe7, 0x8e, 0x84, 0xe9, 0x9b, 0x8d,
	0x12, 0x39, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x31, 0x5f,
	0x48, 0x41, 0x49, 0x44, 0x55, 0x10, 0x1c, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0xe6, 0xa0, 0x87,
	0xe5, 0x87, 0x86, 0x53, 0x31, 0xe6, 0xb5, 0xb7, 0xe9, 0x83, 0xbd, 0x12, 0x3b, 0x0a, 0x23, 0x52,
	0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53,
	0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x31, 0x5f, 0x59, 0x41, 0x4f, 0x54, 0x49,
	0x41, 0x4e, 0x10, 0x1d, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86,
	0x53, 0x31, 0xe5, 0xb0, 0xa7, 0xe5, 0xa4, 0xa9, 0x12, 0x39, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x5f,
	0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x4e,
	0x44, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x31, 0x5f, 0x4a, 0x49, 0x58, 0x49, 0x41, 0x10, 0x1e, 0x1a,
	0x12, 0xaa, 0xb6, 0x18, 0x0e, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0x53, 0x31, 0xe7, 0xa8, 0xb7,
	0xe4, 0xb8, 0x8b, 0x12, 0x3a, 0x0a, 0x22, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f,
	0x53, 0x31, 0x5f, 0x46, 0x55, 0x53, 0x41, 0x4e, 0x47, 0x10, 0x1f, 0x1a, 0x12, 0xaa, 0xb6, 0x18,
	0x0e, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0x53, 0x31, 0xe6, 0x89, 0xb6, 0xe6, 0xa1, 0x91, 0x12,
	0x3b, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x31, 0x5f, 0x4d,
	0x4f, 0x5a, 0x48, 0x4f, 0x4e, 0x47, 0x10, 0x20, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0xe6, 0xa0,
	0x87, 0xe5, 0x87, 0x86, 0x53, 0x31, 0xe9, 0xad, 0x94, 0xe7, 0xa7, 0x8d, 0x12, 0x41, 0x0a, 0x26,
	0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x5f,
	0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x31, 0x5f, 0x53, 0x41, 0x4e, 0x58,
	0x49, 0x41, 0x4e, 0x5a, 0x48, 0x45, 0x10, 0x21, 0x1a, 0x15, 0xaa, 0xb6, 0x18, 0x11, 0xe6, 0xa0,
	0x87, 0xe5, 0x87, 0x86, 0x53, 0x31, 0xe4, 0xb8, 0x89, 0xe8, 0xb4, 0xa4, 0xe8, 0x80, 0x85, 0x12,
	0x39, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x31, 0x5f, 0x53,
	0x49, 0x4d, 0x45, 0x49, 0x10, 0x22, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0xe6, 0xa0, 0x87, 0xe5,
	0x87, 0x86, 0x53, 0x31, 0xe5, 0x9b, 0x9b, 0xe7, 0xbe, 0x8e, 0x12, 0x3e, 0x0a, 0x25, 0x52, 0x45,
	0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x54,
	0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x31, 0x5f, 0x58, 0x55, 0x41, 0x4e, 0x59, 0x4f,
	0x4e, 0x47, 0x32, 0x10, 0x23, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe6, 0xa0, 0x87, 0xe5, 0x87,
	0x86, 0x53, 0x31, 0xe7, 0x8e, 0x84, 0xe9, 0x9b, 0x8d, 0x32, 0x12, 0x3d, 0x0a, 0x24, 0x52, 0x45,
	0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x54,
	0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x31, 0x5f, 0x59, 0x41, 0x4f, 0x54, 0x49, 0x41,
	0x4e, 0x32, 0x10, 0x24, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86,
	0x53, 0x31, 0xe5, 0xb0, 0xa7, 0xe5, 0xa4, 0xa9, 0x32, 0x12, 0x3d, 0x0a, 0x24, 0x52, 0x45, 0x53,
	0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41,
	0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x31, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x41, 0x4e,
	0x32, 0x10, 0x25, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0x53,
	0x31, 0xe9, 0x95, 0xbf, 0xe5, 0xae, 0x89, 0x32, 0x12, 0x41, 0x0a, 0x26, 0x52, 0x45, 0x53, 0x5f,
	0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x4e,
	0x44, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x31, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x4f, 0x46, 0x53, 0x54,
	0x41, 0x52, 0x10, 0x26, 0x1a, 0x15, 0xaa, 0xb6, 0x18, 0x11, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86,
	0x53, 0x31, 0xe6, 0x98, 0x9f, 0xe4, 0xb9, 0x8b, 0xe9, 0x98, 0x9f, 0x12, 0x3f, 0x0a, 0x21, 0x52,
	0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53,
	0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x31, 0x5f, 0x52, 0x49, 0x4c, 0x55, 0x4f,
	0x10, 0x27, 0x1a, 0x18, 0xaa, 0xb6, 0x18, 0x14, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0x53, 0x31,
	0xe6, 0x97, 0xa5, 0xe8, 0x90, 0xbd, 0xe5, 0x9c, 0xa3, 0xe6, 0xae, 0xbf, 0x12, 0x40, 0x0a, 0x25,
	0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x5f,
	0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x31, 0x5f, 0x59, 0x55, 0x4e, 0x4d,
	0x45, 0x4e, 0x47, 0x5a, 0x45, 0x10, 0x28, 0x1a, 0x15, 0xaa, 0xb6, 0x18, 0x11, 0xe6, 0xa0, 0x87,
	0xe5, 0x87, 0x86, 0x53, 0x31, 0xe4, 0xba, 0x91, 0xe6, 0xa2, 0xa6, 0xe6, 0xb3, 0xbd, 0x12, 0x40,
	0x0a, 0x22, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x31, 0x5f, 0x53, 0x41,
	0x4e, 0x46, 0x45, 0x4e, 0x10, 0x29, 0x1a, 0x18, 0xaa, 0xb6, 0x18, 0x14, 0xe6, 0xa0, 0x87, 0xe5,
	0x87, 0x86, 0x53, 0x31, 0xe4, 0xb8, 0x89, 0xe5, 0x88, 0x86, 0xe4, 0xb9, 0x8b, 0xe5, 0x9c, 0xb0,
	0x12, 0x3c, 0x0a, 0x24, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x31, 0x5f,
	0x57, 0x55, 0x53, 0x48, 0x55, 0x41, 0x4e, 0x47, 0x10, 0x2a, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e,
	0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0x53, 0x31, 0xe6, 0x97, 0xa0, 0xe5, 0x8f, 0x8c, 0x12, 0x34,
	0x0a, 0x1c, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x43, 0x5f, 0x53, 0x31, 0x5f, 0x31, 0x10, 0x65,
	0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0xe7, 0xbb, 0x8f, 0xe5, 0x85, 0xb8, 0x53, 0x31, 0xe5, 0x9d,
	0xa6, 0xe5, 0x85, 0x8b, 0x12, 0x34, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x43, 0x5f,
	0x53, 0x31, 0x5f, 0x32, 0x10, 0x66, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0xe7, 0xbb, 0x8f, 0xe5,
	0x85, 0xb8, 0x53, 0x31, 0xe6, 0x88, 0x98, 0xe5, 0xa3, 0xab, 0x12, 0x34, 0x0a, 0x1c, 0x52, 0x45,
	0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x49, 0x43, 0x5f, 0x53, 0x31, 0x5f, 0x33, 0x10, 0x67, 0x1a, 0x12, 0xaa, 0xb6,
	0x18, 0x0e, 0xe7, 0xbb, 0x8f, 0xe5, 0x85, 0xb8, 0x53, 0x31, 0xe5, 0x88, 0xba, 0xe5, 0xae, 0xa2,
	0x12, 0x34, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x43, 0x5f, 0x53, 0x31, 0x5f, 0x34,
	0x10, 0x68, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0xe7, 0xbb, 0x8f, 0xe5, 0x85, 0xb8, 0x53, 0x31,
	0xe6, 0xb3, 0x95, 0xe5, 0xb8, 0x88, 0x12, 0x34, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45,
	0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49,
	0x43, 0x5f, 0x53, 0x31, 0x5f, 0x35, 0x10, 0x69, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0xe7, 0xbb,
	0x8f, 0xe5, 0x85, 0xb8, 0x53, 0x31, 0xe5, 0xb0, 0x84, 0xe6, 0x89, 0x8b, 0x12, 0x3a, 0x0a, 0x1c,
	0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x43, 0x5f, 0x53, 0x31, 0x5f, 0x36, 0x10, 0x6a, 0x1a, 0x18,
	0xaa, 0xb6, 0x18, 0x14, 0xe7, 0xbb, 0x8f, 0xe5, 0x85, 0xb8, 0x53, 0x31, 0xe6, 0xb3, 0x95, 0xe6,
	0x9c, 0xaf, 0xe8, 0xbe, 0x85, 0xe5, 0x8a, 0xa9, 0x12, 0x3a, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x5f,
	0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x49, 0x43, 0x5f, 0x53, 0x31, 0x5f, 0x37, 0x10, 0x6b, 0x1a, 0x18, 0xaa, 0xb6, 0x18, 0x14,
	0xe7, 0xbb, 0x8f, 0xe5, 0x85, 0xb8, 0x53, 0x31, 0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97, 0xe8, 0xbe,
	0x85, 0xe5, 0x8a, 0xa9, 0x12, 0x34, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x43, 0x5f,
	0x53, 0x31, 0x5f, 0x38, 0x10, 0x6c, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0xe7, 0xbb, 0x8f, 0xe5,
	0x85, 0xb8, 0x53, 0x31, 0xe9, 0xad, 0x8f, 0xe5, 0x9b, 0xbd, 0x12, 0x34, 0x0a, 0x1c, 0x52, 0x45,
	0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x49, 0x43, 0x5f, 0x53, 0x31, 0x5f, 0x39, 0x10, 0x6d, 0x1a, 0x12, 0xaa, 0xb6,
	0x18, 0x0e, 0xe7, 0xbb, 0x8f, 0xe5, 0x85, 0xb8, 0x53, 0x31, 0xe8, 0x9c, 0x80, 0xe5, 0x9b, 0xbd,
	0x12, 0x35, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x43, 0x5f, 0x53, 0x31, 0x5f, 0x31,
	0x30, 0x10, 0x6e, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0xe7, 0xbb, 0x8f, 0xe5, 0x85, 0xb8, 0x53,
	0x31, 0xe5, 0x90, 0xb4, 0xe5, 0x9b, 0xbd, 0x12, 0x35, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x5f, 0x52,
	0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x49, 0x43, 0x5f, 0x53, 0x31, 0x5f, 0x31, 0x31, 0x10, 0x6f, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e,
	0xe7, 0xbb, 0x8f, 0xe5, 0x85, 0xb8, 0x53, 0x31, 0xe9, 0x95, 0xbf, 0xe5, 0xae, 0x89, 0x12, 0x35,
	0x0a, 0x1d, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x43, 0x5f, 0x53, 0x31, 0x5f, 0x31, 0x32, 0x10,
	0x70, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0xe7, 0xbb, 0x8f, 0xe5, 0x85, 0xb8, 0x53, 0x31, 0xe7,
	0xa8, 0xb7, 0xe4, 0xb8, 0x8b, 0x12, 0x35, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c,
	0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x43,
	0x5f, 0x53, 0x31, 0x5f, 0x31, 0x33, 0x10, 0x71, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0xe7, 0xbb,
	0x8f, 0xe5, 0x85, 0xb8, 0x53, 0x31, 0xe9, 0x95, 0xbf, 0xe5, 0x9f, 0x8e, 0x12, 0x35, 0x0a, 0x1d,
	0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x43, 0x5f, 0x53, 0x31, 0x5f, 0x31, 0x34, 0x10, 0x72, 0x1a,
	0x12, 0xaa, 0xb6, 0x18, 0x0e, 0xe7, 0xbb, 0x8f, 0xe5, 0x85, 0xb8, 0x53, 0x31, 0xe7, 0x8e, 0x84,
	0xe9, 0x9b, 0x8d, 0x12, 0x35, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x43, 0x5f, 0x53,
	0x31, 0x5f, 0x31, 0x35, 0x10, 0x73, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0xe7, 0xbb, 0x8f, 0xe5,
	0x85, 0xb8, 0x53, 0x31, 0xe5, 0xb0, 0xa7, 0xe5, 0xa4, 0xa9, 0x12, 0x35, 0x0a, 0x1d, 0x52, 0x45,
	0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x49, 0x43, 0x5f, 0x53, 0x31, 0x5f, 0x31, 0x36, 0x10, 0x74, 0x1a, 0x12, 0xaa,
	0xb6, 0x18, 0x0e, 0xe7, 0xbb, 0x8f, 0xe5, 0x85, 0xb8, 0x53, 0x31, 0xe7, 0xbe, 0xa4, 0xe9, 0x9b,
	0x84, 0x12, 0x35, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x43, 0x5f, 0x53, 0x31, 0x5f,
	0x31, 0x37, 0x10, 0x75, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0xe7, 0xbb, 0x8f, 0xe5, 0x85, 0xb8,
	0x53, 0x31, 0xe4, 0xbc, 0xa0, 0xe8, 0xaf, 0xb4, 0x12, 0x35, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x5f,
	0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x49, 0x43, 0x5f, 0x53, 0x31, 0x5f, 0x31, 0x38, 0x10, 0x76, 0x1a, 0x12, 0xaa, 0xb6, 0x18,
	0x0e, 0xe7, 0xbb, 0x8f, 0xe5, 0x85, 0xb8, 0x53, 0x31, 0xe6, 0x89, 0xb6, 0xe6, 0xa1, 0x91, 0x12,
	0x35, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x43, 0x5f, 0x53, 0x31, 0x5f, 0x31, 0x39,
	0x10, 0x77, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0xe7, 0xbb, 0x8f, 0xe5, 0x85, 0xb8, 0x53, 0x31,
	0xe5, 0xb0, 0x81, 0xe7, 0xa5, 0x9e, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01,
	0x2a, 0x97, 0x01, 0x0a, 0x11, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45,
	0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x55, 0x4c, 0x4c,
	0x10, 0x00, 0x12, 0x2e, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49,
	0x56, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x45, 0x45, 0x52, 0x10, 0x01,
	0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0x81, 0x8c, 0xe4, 0xb8, 0x9a, 0xe7, 0xbe, 0x81, 0xe7,
	0xbb, 0x8a, 0x12, 0x2c, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49,
	0x56, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x4d, 0x50, 0x10, 0x02, 0x1a, 0x10,
	0xaa, 0xb6, 0x18, 0x0c, 0xe9, 0x98, 0xb5, 0xe8, 0x90, 0xa5, 0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a,
	0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0x99, 0x01, 0x0a, 0x16, 0x52,
	0x45, 0x53, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x17, 0x0a, 0x0c, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x1a, 0x05, 0xaa, 0xb6, 0x18, 0x01, 0x30, 0x12, 0x18,
	0x0a, 0x0d, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x10,
	0x01, 0x1a, 0x05, 0xaa, 0xb6, 0x18, 0x01, 0x31, 0x12, 0x18, 0x0a, 0x0d, 0x51, 0x55, 0x41, 0x4c,
	0x49, 0x54, 0x59, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x02, 0x1a, 0x05, 0xaa, 0xb6, 0x18,
	0x01, 0x32, 0x12, 0x17, 0x0a, 0x0c, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x42, 0x4c,
	0x55, 0x45, 0x10, 0x03, 0x1a, 0x05, 0xaa, 0xb6, 0x18, 0x01, 0x33, 0x12, 0x19, 0x0a, 0x0e, 0x51,
	0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x55, 0x52, 0x50, 0x4c, 0x45, 0x10, 0x04, 0x1a,
	0x05, 0xaa, 0xb6, 0x18, 0x01, 0x34, 0x2a, 0x7a, 0x0a, 0x09, 0x45, 0x57, 0x65, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x57, 0x65, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x5f, 0x10, 0x00, 0x12, 0x1f,
	0x0a, 0x09, 0x57, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x01, 0x1a, 0x10, 0xaa,
	0xb6, 0x18, 0x0c, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0xb4, 0xbb, 0xe5, 0x8a, 0xa8, 0x12,
	0x23, 0x0a, 0x0d, 0x57, 0x45, 0x41, 0x4c, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x10, 0x02, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x85, 0x91, 0xe6, 0x8d, 0xa2, 0xe6, 0xb4,
	0xbb, 0xe5, 0x8a, 0xa8, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x45, 0x41, 0x4c, 0x5f, 0x4d, 0x41, 0x58,
	0x10, 0x03, 0x2a, 0xc2, 0x42, 0x0a, 0x06, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x12, 0x1b, 0x0a,
	0x17, 0x63, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x5f, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0c, 0x4d, 0x41,
	0x58, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x4c, 0x45, 0x4e, 0x10, 0x80, 0x01, 0x12, 0x12, 0x0a,
	0x0e, 0x4d, 0x41, 0x58, 0x5f, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10,
	0x20, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x41, 0x58, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x43,
	0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4c, 0x45, 0x4e, 0x10, 0x40, 0x12, 0x15, 0x0a, 0x10,
	0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x4e,
	0x10, 0x80, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x48,
	0x45, 0x52, 0x4f, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x5f, 0x4c, 0x45, 0x4e, 0x10, 0x80, 0x08, 0x12,
	0x1e, 0x0a, 0x1a, 0x4d, 0x41, 0x58, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x5f,
	0x53, 0x48, 0x4f, 0x52, 0x54, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4c, 0x45, 0x4e, 0x10, 0x20, 0x12,
	0x24, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4c,
	0x49, 0x4e, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x4e, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x5f, 0x43, 0x4f, 0x4d,
	0x4d, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4c, 0x45, 0x4e, 0x10, 0x20, 0x12, 0x1f,
	0x0a, 0x1b, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49,
	0x54, 0x45, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x04, 0x12,
	0x1f, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41,
	0x4c, 0x5f, 0x54, 0x58, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x5f, 0x4c, 0x45, 0x4e, 0x10, 0x80, 0x04,
	0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x5f, 0x4f, 0x50, 0x45,
	0x4e, 0x49, 0x44, 0x5f, 0x4c, 0x45, 0x4e, 0x10, 0x40, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x53,
	0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4c, 0x45, 0x4e,
	0x10, 0x40, 0x12, 0x18, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e,
	0x5f, 0x44, 0x45, 0x53, 0x43, 0x5f, 0x4c, 0x45, 0x4e, 0x10, 0x80, 0x02, 0x12, 0x1b, 0x0a, 0x17,
	0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x49,
	0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x15, 0x52, 0x45, 0x53,
	0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x5f, 0x4c,
	0x45, 0x4e, 0x10, 0x80, 0x02, 0x12, 0x1e, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x49, 0x4d, 0x50, 0x44, 0x45, 0x53, 0x43, 0x5f, 0x4c,
	0x45, 0x4e, 0x10, 0x80, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58,
	0x5f, 0x4a, 0x55, 0x4d, 0x50, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x05,
	0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x45, 0x46, 0x54, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x08, 0x12,
	0x18, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x53,
	0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4f, 0x42, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x50,
	0x5f, 0x57, 0x41, 0x59, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45,
	0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x44,
	0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41,
	0x49, 0x4c, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x4c, 0x45, 0x4e, 0x10, 0x80, 0x02, 0x12,
	0x16, 0x0a, 0x11, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x42, 0x4f, 0x44, 0x59,
	0x5f, 0x4c, 0x45, 0x4e, 0x10, 0x80, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x5f, 0x4d,
	0x41, 0x58, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x4e, 0x55,
	0x4d, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x41,
	0x49, 0x43, 0x48, 0x4b, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x1a,
	0x0a, 0x16, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x41, 0x49, 0x43, 0x48, 0x4b, 0x53,
	0x43, 0x4f, 0x52, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45,
	0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x54, 0x59, 0x50, 0x45, 0x10, 0x08, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x5f,
	0x4d, 0x41, 0x58, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x54, 0x49,
	0x4d, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x5f,
	0x57, 0x45, 0x45, 0x4b, 0x4c, 0x59, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x5f,
	0x4e, 0x55, 0x4d, 0x10, 0x07, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x54, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58,
	0x5f, 0x50, 0x56, 0x50, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4e, 0x55, 0x4d, 0x10,
	0x08, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x4f, 0x4e,
	0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x43, 0x4e, 0x54, 0x10,
	0x05, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x54, 0x4f, 0x4b,
	0x45, 0x4e, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x4e,
	0x55, 0x4d, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x5f, 0x54, 0x41, 0x53, 0x4b,
	0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x52,
	0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x57, 0x45, 0x45,
	0x4b, 0x4c, 0x59, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x4e, 0x55,
	0x4d, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x54,
	0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x48, 0x41, 0x4e, 0x47, 0x55, 0x50, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x32, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x5f, 0x4d,
	0x41, 0x58, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x53, 0x54, 0x41,
	0x47, 0x45, 0x5f, 0x43, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x5f,
	0x4d, 0x41, 0x58, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x4d,
	0x41, 0x58, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x22, 0x0a,
	0x1e, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x48,
	0x45, 0x52, 0x4f, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10,
	0x05, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x50, 0x52, 0x45,
	0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x18,
	0x0a, 0x14, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x47, 0x45, 0x54, 0x57, 0x41, 0x59,
	0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x53, 0x5f,
	0x4d, 0x41, 0x58, 0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x05, 0x12, 0x1b,
	0x0a, 0x17, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x55, 0x50,
	0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x0a, 0x12, 0x21, 0x0a, 0x1d, 0x52,
	0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x55, 0x50, 0x5f, 0x48, 0x45,
	0x52, 0x4f, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x22,
	0x0a, 0x1e, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x55, 0x50,
	0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50,
	0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x46, 0x45,
	0x54, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x46, 0x55,
	0x4e, 0x43, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x04, 0x12, 0x17,
	0x0a, 0x13, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x54, 0x53,
	0x5f, 0x46, 0x55, 0x4e, 0x43, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x5f, 0x4c,
	0x4f, 0x52, 0x44, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x53, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x53, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53,
	0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x53,
	0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x5f,
	0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x5f, 0x4c, 0x4f,
	0x52, 0x44, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x47, 0x41, 0x54,
	0x48, 0x45, 0x52, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x2b, 0x0a,
	0x27, 0x52, 0x45, 0x53, 0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f,
	0x45, 0x58, 0x50, 0x5f, 0x47, 0x41, 0x54, 0x48, 0x45, 0x52, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45,
	0x53, 0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x51, 0x5f, 0x41, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x10, 0x28, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x5f, 0x33, 0x32, 0x10, 0x20, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x54, 0x52, 0x5f, 0x36, 0x34, 0x10, 0x40, 0x12, 0x0c, 0x0a, 0x07, 0x53, 0x54,
	0x52, 0x5f, 0x31, 0x32, 0x38, 0x10, 0x80, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x53, 0x54, 0x52, 0x5f,
	0x32, 0x35, 0x36, 0x10, 0x80, 0x02, 0x12, 0x1b, 0x0a, 0x16, 0x4d, 0x41, 0x58, 0x5f, 0x48, 0x45,
	0x52, 0x4f, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x4c, 0x45, 0x4e,
	0x10, 0x80, 0x02, 0x12, 0x10, 0x0a, 0x0b, 0x4d, 0x41, 0x58, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x4c,
	0x45, 0x4e, 0x10, 0x80, 0x02, 0x12, 0x1b, 0x0a, 0x16, 0x4d, 0x41, 0x58, 0x5f, 0x44, 0x49, 0x41,
	0x4c, 0x4f, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x45, 0x4e, 0x10,
	0x80, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x41, 0x58, 0x5f, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x20, 0x12, 0x15, 0x0a, 0x11, 0x4d,
	0x41, 0x58, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x4e, 0x55, 0x4d,
	0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x41, 0x58, 0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45,
	0x52, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x4e, 0x55, 0x4d, 0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12,
	0x4d, 0x41, 0x58, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x4e,
	0x55, 0x4d, 0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50,
	0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x03, 0x12,
	0x26, 0x0a, 0x22, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53,
	0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x41, 0x58, 0x5f, 0x53,
	0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x4e, 0x55, 0x4d, 0x10,
	0x02, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x52, 0x41, 0x4e,
	0x44, 0x4f, 0x4d, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x50, 0x41, 0x53, 0x53, 0x49, 0x56, 0x45, 0x5f,
	0x4c, 0x45, 0x4e, 0x10, 0x14, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58,
	0x5f, 0x54, 0x41, 0x49, 0x4c, 0x53, 0x4d, 0x41, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x4c, 0x49,
	0x42, 0x5f, 0x4c, 0x45, 0x4e, 0x10, 0x46, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x45, 0x53, 0x5f, 0x4d,
	0x41, 0x58, 0x5f, 0x53, 0x48, 0x45, 0x4e, 0x46, 0x55, 0x50, 0x49, 0x43, 0x4b, 0x5f, 0x46, 0x49,
	0x4c, 0x54, 0x45, 0x52, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x55,
	0x4d, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43,
	0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x53,
	0x53, 0x49, 0x56, 0x45, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x52,
	0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x45, 0x52,
	0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x10, 0x12, 0x12, 0x24, 0x0a, 0x20,
	0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43,
	0x10, 0x01, 0x12, 0x32, 0x0a, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f,
	0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f,
	0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x10, 0x0a, 0x12, 0x31, 0x0a, 0x2d, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f, 0x49, 0x4e, 0x44, 0x49,
	0x43, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x53,
	0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f, 0x49,
	0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41,
	0x58, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x45, 0x52,
	0x47, 0x59, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0a, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x5f,
	0x4d, 0x41, 0x58, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x57, 0x48,
	0x45, 0x45, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x10, 0x05, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x45, 0x53,
	0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x53,
	0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x4d, 0x55, 0x54, 0x45, 0x58, 0x54, 0x49,
	0x5f, 0x49, 0x44, 0x10, 0x04, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58,
	0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c,
	0x46, 0x55, 0x4e, 0x43, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x45, 0x5f, 0x49, 0x44,
	0x10, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e,
	0x43, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x49, 0x56, 0x45, 0x10, 0x09, 0x12, 0x22, 0x0a, 0x1e, 0x52,
	0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x41, 0x4e,
	0x47, 0x45, 0x41, 0x50, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x12,
	0x25, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x53, 0x4f, 0x4c, 0x44, 0x49,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x5f, 0x50, 0x45, 0x52, 0x5f,
	0x57, 0x41, 0x56, 0x45, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41,
	0x58, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x5f, 0x4e, 0x55, 0x4d, 0x5f, 0x50, 0x45, 0x52,
	0x5f, 0x57, 0x41, 0x56, 0x45, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x41, 0x58, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x10, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45,
	0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f,
	0x4c, 0x45, 0x4e, 0x10, 0x40, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58,
	0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x45, 0x46, 0x54, 0x5f,
	0x4e, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58,
	0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x50, 0x56, 0x45, 0x45, 0x46, 0x54, 0x5f, 0x4e,
	0x55, 0x4d, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x48, 0x45, 0x52, 0x4f, 0x5f, 0x54, 0x49, 0x50, 0x53, 0x5f, 0x4c, 0x45, 0x4e, 0x10, 0x80, 0x20,
	0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x48, 0x45, 0x52, 0x4f,
	0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x03, 0x12,
	0x17, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x53,
	0x52, 0x43, 0x5f, 0x43, 0x4e, 0x54, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x5f,
	0x4d, 0x41, 0x58, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x5f, 0x4c,
	0x45, 0x4e, 0x10, 0x80, 0x08, 0x12, 0x1e, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58,
	0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x5f, 0x4c, 0x45, 0x4e, 0x5f,
	0x45, 0x58, 0x10, 0x80, 0x10, 0x12, 0x1f, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58,
	0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x5f,
	0x4c, 0x45, 0x4e, 0x10, 0x80, 0x02, 0x12, 0x1d, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41,
	0x58, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x55, 0x50, 0x5f, 0x54, 0x49, 0x50, 0x5f, 0x4c,
	0x45, 0x4e, 0x10, 0x80, 0x02, 0x12, 0x1c, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58,
	0x5f, 0x52, 0x4f, 0x4e, 0x47, 0x59, 0x55, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x5f, 0x4c, 0x45, 0x4e,
	0x10, 0x80, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x52,
	0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x45, 0x52,
	0x5f, 0x50, 0x56, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18,
	0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x42, 0x55,
	0x46, 0x46, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45,
	0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x45, 0x4e, 0x53, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x28, 0x0a, 0x24,
	0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f,
	0x44, 0x45, 0x41, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x53, 0x48, 0x45, 0x4e, 0x46, 0x55,
	0x5f, 0x43, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x41, 0x58, 0x5f, 0x48, 0x45,
	0x52, 0x4f, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x4e, 0x44, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45,
	0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41,
	0x58, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x4e, 0x55, 0x4d, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41,
	0x58, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x10, 0x52, 0x45, 0x53, 0x5f,
	0x4d, 0x41, 0x58, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x5f, 0x4c, 0x45, 0x4e, 0x10, 0x80, 0x02, 0x12,
	0x1c, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4c, 0x45, 0x4e, 0x10, 0x80, 0x08, 0x12, 0x15, 0x0a,
	0x10, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4c, 0x45,
	0x4e, 0x10, 0x80, 0x10, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x53, 0x54, 0x41, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4b,
	0x45, 0x59, 0x5f, 0x43, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x5f,
	0x4d, 0x41, 0x58, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x43, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x14,
	0x0a, 0x10, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4c,
	0x45, 0x4e, 0x10, 0x40, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x5f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x41,
	0x44, 0x56, 0x45, 0x4e, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x49, 0x43, 0x55,
	0x4c, 0x54, 0x59, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x18, 0x52, 0x45, 0x53,
	0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x48, 0x41, 0x50, 0x54, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x53,
	0x43, 0x5f, 0x4c, 0x45, 0x4e, 0x10, 0x80, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x5f,
	0x4d, 0x41, 0x58, 0x5f, 0x50, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x56, 0x45, 0x5f, 0x4e,
	0x55, 0x4d, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x41, 0x53, 0x53,
	0x4e, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58,
	0x5f, 0x48, 0x45, 0x52, 0x4f, 0x53, 0x4b, 0x49, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4c,
	0x45, 0x4e, 0x10, 0x40, 0x12, 0x28, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x48, 0x45, 0x52, 0x4f, 0x53, 0x4b, 0x49, 0x4e, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x53, 0x48, 0x41,
	0x52, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x5f, 0x4c, 0x45, 0x4e, 0x10, 0x80, 0x01, 0x12, 0x1e,
	0x0a, 0x19, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x53, 0x4b,
	0x49, 0x4e, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x5f, 0x4c, 0x45, 0x4e, 0x10, 0x80, 0x02, 0x12, 0x15,
	0x0a, 0x11, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x53, 0x4b, 0x49, 0x4e, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58,
	0x5f, 0x53, 0x4b, 0x49, 0x4e, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x10, 0x12,
	0x14, 0x0a, 0x10, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f,
	0x4c, 0x45, 0x4e, 0x10, 0x40, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58,
	0x5f, 0x53, 0x4b, 0x49, 0x4e, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x50, 0x49, 0x43, 0x5f, 0x4c,
	0x45, 0x4e, 0x10, 0x40, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x53, 0x4b, 0x49, 0x4e, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x49, 0x43, 0x4f,
	0x4e, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x4c, 0x45, 0x4e, 0x10, 0x20, 0x12, 0x22, 0x0a, 0x1d,
	0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x53, 0x4b, 0x49, 0x4e, 0x5f, 0x46, 0x45, 0x41,
	0x54, 0x55, 0x52, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x5f, 0x4c, 0x45, 0x4e, 0x10, 0x80, 0x01,
	0x12, 0x1f, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x53, 0x4b, 0x49, 0x4e,
	0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x4c, 0x45, 0x4e, 0x10, 0x80,
	0x01, 0x12, 0x2a, 0x0a, 0x25, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x42, 0x41, 0x54,
	0x54, 0x4c, 0x45, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x49,
	0x45, 0x57, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x4c, 0x45, 0x4e, 0x10, 0x80, 0x01, 0x12, 0x1a, 0x0a,
	0x16, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x48, 0x4f, 0x50, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x4c, 0x45, 0x4e, 0x10, 0x10, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x53,
	0x5f, 0x48, 0x45, 0x52, 0x4f, 0x53, 0x4b, 0x49, 0x4e, 0x5f, 0x53, 0x48, 0x4f, 0x50, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x4c, 0x45, 0x4e, 0x10, 0x10, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53,
	0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x52, 0x41,
	0x54, 0x45, 0x5f, 0x4c, 0x45, 0x4e, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x5f,
	0x4d, 0x41, 0x58, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x4a, 0x4f, 0x42, 0x46, 0x45, 0x41, 0x54,
	0x55, 0x52, 0x45, 0x5f, 0x4c, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x53,
	0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x53, 0x4b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x4d, 0x4f, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x16, 0x52, 0x45, 0x53,
	0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x57, 0x41, 0x4b, 0x45, 0x5f, 0x44,
	0x45, 0x53, 0x43, 0x10, 0x80, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41,
	0x58, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x4c, 0x45, 0x4e, 0x10, 0x10, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x53,
	0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x49, 0x4e, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4c, 0x45, 0x4e, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x40, 0x12,
	0x25, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x49, 0x4e, 0x5f,
	0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x5f, 0x4c, 0x45, 0x4e, 0x5f,
	0x4d, 0x41, 0x58, 0x10, 0x80, 0x02, 0x12, 0x2a, 0x0a, 0x25, 0x52, 0x45, 0x53, 0x5f, 0x45, 0x51,
	0x55, 0x49, 0x50, 0x5f, 0x49, 0x4e, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x42, 0x55,
	0x46, 0x46, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x5f, 0x4c, 0x45, 0x4e, 0x5f, 0x4d, 0x41, 0x58, 0x10,
	0x80, 0x04, 0x12, 0x29, 0x0a, 0x25, 0x52, 0x45, 0x53, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f,
	0x49, 0x4e, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4d, 0x55, 0x54, 0x45, 0x58, 0x5f,
	0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x0a, 0x12, 0x23, 0x0a,
	0x1f, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f,
	0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x10, 0x10, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x53, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f,
	0x49, 0x4e, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52,
	0x45, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x45, 0x4e, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x40, 0x12,
	0x26, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x49, 0x44, 0x5f,
	0x42, 0x45, 0x4c, 0x4f, 0x4e, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4c, 0x45, 0x4e,
	0x5f, 0x4d, 0x41, 0x58, 0x10, 0x80, 0x02, 0x12, 0x26, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x5f, 0x45,
	0x51, 0x55, 0x49, 0x50, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4c, 0x45, 0x4e, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x80, 0x02, 0x12,
	0x22, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x49, 0x44, 0x5f,
	0x50, 0x52, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x4c, 0x45, 0x4e, 0x5f, 0x4d, 0x41, 0x58,
	0x10, 0x80, 0x02, 0x12, 0x2b, 0x0a, 0x26, 0x52, 0x45, 0x53, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50,
	0x5f, 0x49, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x53, 0x48, 0x4f, 0x50, 0x5f, 0x4c, 0x45, 0x4e, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x80, 0x02,
	0x12, 0x22, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x50, 0x52,
	0x49, 0x43, 0x45, 0x5f, 0x52, 0x41, 0x49, 0x53, 0x45, 0x5f, 0x4c, 0x45, 0x4e, 0x5f, 0x4d, 0x41,
	0x58, 0x10, 0x80, 0x02, 0x12, 0x2f, 0x0a, 0x2b, 0x52, 0x45, 0x53, 0x5f, 0x45, 0x51, 0x55, 0x49,
	0x50, 0x5f, 0x49, 0x4e, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53,
	0x49, 0x56, 0x45, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x4d, 0x41, 0x58, 0x10, 0x04, 0x12, 0x2e, 0x0a, 0x2a, 0x52, 0x45, 0x53, 0x5f, 0x45, 0x51, 0x55,
	0x49, 0x50, 0x5f, 0x49, 0x4e, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x4d, 0x41, 0x58, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x5f, 0x45, 0x51, 0x55,
	0x49, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4c, 0x41,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x30,
	0x0a, 0x2c, 0x52, 0x45, 0x53, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x49, 0x4e, 0x5f, 0x42,
	0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x4f, 0x4d,
	0x42, 0x49, 0x4e, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03,
	0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x53, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x49, 0x4e,
	0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e,
	0x44, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x0c, 0x12, 0x31, 0x0a,
	0x2d, 0x52, 0x45, 0x53, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x49, 0x4e, 0x5f, 0x42, 0x41,
	0x54, 0x54, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x49, 0x56, 0x45, 0x5f, 0x52, 0x4d, 0x56,
	0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x43, 0x4e, 0x54, 0x10, 0x03,
	0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x55, 0x4e, 0x55, 0x53,
	0x45, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x43, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b,
	0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x5f, 0x52, 0x55, 0x4c,
	0x45, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x04, 0x12, 0x1a, 0x0a,
	0x16, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x5f, 0x54,
	0x45, 0x58, 0x54, 0x5f, 0x4c, 0x45, 0x4e, 0x10, 0x40, 0x12, 0x1b, 0x0a, 0x16, 0x52, 0x45, 0x53,
	0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f,
	0x4c, 0x45, 0x4e, 0x10, 0x80, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41,
	0x58, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x55,
	0x4d, 0x10, 0x0a, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x53,
	0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x44, 0x45,
	0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x20,
	0x12, 0x2a, 0x0a, 0x26, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x53, 0x4b, 0x49, 0x4c,
	0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52,
	0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x4e, 0x10, 0x05, 0x12, 0x2c, 0x0a, 0x28,
	0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x52,
	0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x20, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45,
	0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x53, 0x5f, 0x4f, 0x4e,
	0x45, 0x43, 0x41, 0x4d, 0x50, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x0a, 0x12, 0x21, 0x0a,
	0x1d, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x41,
	0x44, 0x4a, 0x55, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x43, 0x4e, 0x54, 0x10, 0x08,
	0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4c, 0x45, 0x4e, 0x10, 0x40, 0x12, 0x1b, 0x0a,
	0x17, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x46, 0x55, 0x4e, 0x43, 0x5f, 0x4c, 0x45, 0x4e, 0x10, 0x0c, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x45,
	0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x46, 0x55, 0x4e,
	0x43, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10,
	0x0a, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x10, 0x64, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x49, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x43, 0x48, 0x41, 0x52, 0x5f, 0x4c, 0x45, 0x4e, 0x10, 0x1e, 0x12, 0x22, 0x0a, 0x1e, 0x52,
	0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x4a, 0x4f, 0x42, 0x5f,
	0x42, 0x55, 0x46, 0x46, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x43, 0x4e, 0x54, 0x10, 0x03, 0x12,
	0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f,
	0x4a, 0x4f, 0x42, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x43, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x20,
	0x0a, 0x1c, 0x52, 0x45, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x4b, 0x45, 0x59,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x52, 0x47, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x03,
	0x12, 0x25, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x53, 0x4b, 0x49, 0x4c,
	0x4c, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x45, 0x46, 0x46, 0x45, 0x43,
	0x54, 0x5f, 0x43, 0x4e, 0x54, 0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x5f, 0x4d,
	0x41, 0x58, 0x5f, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10,
	0x02, 0x12, 0x1c, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x42, 0x41, 0x4e,
	0x4b, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x4e, 0x10, 0x80, 0x01, 0x12,
	0x25, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f,
	0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x52, 0x4f, 0x41, 0x44,
	0x5f, 0x43, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41,
	0x58, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x4c, 0x45, 0x4e,
	0x10, 0x04, 0x12, 0x32, 0x0a, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x42, 0x41,
	0x54, 0x54, 0x4c, 0x45, 0x5f, 0x52, 0x4f, 0x59, 0x41, 0x4c, 0x45, 0x5f, 0x45, 0x56, 0x41, 0x4c,
	0x55, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54,
	0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x5f, 0x42, 0x41,
	0x54, 0x54, 0x4c, 0x45, 0x5f, 0x52, 0x4f, 0x59, 0x41, 0x4c, 0x45, 0x5f, 0x47, 0x52, 0x41, 0x44,
	0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4c, 0x45, 0x4e, 0x10, 0x40, 0x12, 0x1d, 0x0a, 0x19,
	0x52, 0x45, 0x53, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x38,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4c, 0x45, 0x4e, 0x10, 0x40, 0x12, 0x1e, 0x0a, 0x19, 0x52,
	0x45, 0x53, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x38, 0x5f,
	0x44, 0x45, 0x53, 0x43, 0x5f, 0x4c, 0x45, 0x4e, 0x10, 0x80, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x52,
	0x45, 0x53, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x38, 0x5f,
	0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45,
	0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x5f, 0x4c, 0x45, 0x4e, 0x10, 0x40, 0x12, 0x1c, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x5f, 0x4d,
	0x41, 0x58, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x5f, 0x4c,
	0x45, 0x4e, 0x10, 0x80, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58,
	0x5f, 0x44, 0x49, 0x47, 0x49, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x56, 0x41, 0x4c, 0x10, 0x0a, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x5f, 0x4d,
	0x41, 0x58, 0x5f, 0x50, 0x56, 0x45, 0x5f, 0x41, 0x49, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f,
	0x4e, 0x55, 0x4d, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58,
	0x5f, 0x50, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x50,
	0x4f, 0x4e, 0x53, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x05, 0x12, 0x27, 0x0a, 0x22, 0x52, 0x45, 0x53,
	0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x50, 0x56, 0x45, 0x5f, 0x4c, 0x56, 0x45, 0x56, 0x4c, 0x5f, 0x4d,
	0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x50, 0x49, 0x45, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x4e, 0x10,
	0x80, 0x01, 0x12, 0x2a, 0x0a, 0x25, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x50, 0x52,
	0x45, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x45, 0x4e, 0x10, 0x80, 0x08, 0x12, 0x24,
	0x0a, 0x20, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x44, 0x59, 0x49, 0x4e, 0x47, 0x5f,
	0x48, 0x50, 0x5f, 0x52, 0x45, 0x44, 0x55, 0x43, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4e,
	0x55, 0x4d, 0x10, 0x06, 0x12, 0x32, 0x0a, 0x2d, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x53, 0x45, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4e, 0x5f, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x54, 0x45, 0x58,
	0x54, 0x5f, 0x4c, 0x45, 0x4e, 0x10, 0x80, 0x04, 0x12, 0x3a, 0x0a, 0x36, 0x52, 0x45, 0x53, 0x5f,
	0x4d, 0x41, 0x58, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4e, 0x5f,
	0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54,
	0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x41, 0x52, 0x52, 0x5f, 0x4c,
	0x45, 0x4e, 0x10, 0x05, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x55, 0x4d,
	0x10, 0x05, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4b, 0x49,
	0x4c, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45,
	0x54, 0x45, 0x52, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x53,
	0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x45, 0x53,
	0x53, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x45, 0x10, 0x0a, 0x12,
	0x27, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53,
	0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x43,
	0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x45, 0x10, 0x14, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x5f,
	0x4d, 0x41, 0x58, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f,
	0x43, 0x41, 0x4d, 0x50, 0x5f, 0x4d, 0x41, 0x58, 0x4e, 0x55, 0x4d, 0x10, 0x05, 0x12, 0x22, 0x0a,
	0x1e, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x43,
	0x41, 0x52, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x55, 0x4d, 0x10,
	0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x48, 0x45,
	0x53, 0x53, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x5f, 0x4e, 0x55, 0x4d,
	0x10, 0x05, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x48,
	0x45, 0x53, 0x53, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x4e, 0x55, 0x4d, 0x5f, 0x50, 0x45, 0x52,
	0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x14, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x45,
	0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x45, 0x46, 0x46, 0x45,
	0x43, 0x54, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x4e,
	0x55, 0x4d, 0x10, 0x03, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x50, 0x52, 0x45, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x4e, 0x55, 0x4d, 0x10,
	0x01, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x48, 0x45,
	0x53, 0x53, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x4f, 0x5f, 0x4e, 0x55,
	0x4d, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43,
	0x48, 0x45, 0x53, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x10, 0x0a, 0x12, 0x29, 0x0a, 0x25, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41,
	0x58, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x50, 0x41,
	0x53, 0x53, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x4e, 0x55, 0x4d, 0x10,
	0x02, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x48, 0x45,
	0x53, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x53, 0x4b, 0x49,
	0x4c, 0x4c, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x02,
	0x12, 0x2e, 0x0a, 0x2a, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x48, 0x45, 0x53,
	0x53, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x53, 0x4b, 0x49,
	0x4c, 0x4c, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x03,
	0x12, 0x26, 0x0a, 0x22, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x48, 0x45, 0x53,
	0x53, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50,
	0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x14, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x5f,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x53, 0x4b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x53, 0x5f,
	0x4d, 0x41, 0x58, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x53,
	0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x4f, 0x57, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x04, 0x12,
	0x22, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53,
	0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x55,
	0x4d, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43,
	0x48, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x42, 0x55,
	0x49, 0x4c, 0x44, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x45, 0x53,
	0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e,
	0x54, 0x5f, 0x50, 0x4f, 0x53, 0x43, 0x46, 0x47, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x05, 0x12, 0x24,
	0x0a, 0x20, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f,
	0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4e,
	0x55, 0x4d, 0x10, 0x07, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x50, 0x5f,
	0x48, 0x45, 0x52, 0x4f, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x45,
	0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x41, 0x4c, 0x45,
	0x4e, 0x54, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x55, 0x4d, 0x10,
	0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4e, 0x55, 0x4d,
	0x45, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x4c, 0x45, 0x4e, 0x10,
	0x06, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x48, 0x45,
	0x53, 0x53, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x58, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x2c,
	0x0a, 0x28, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f,
	0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x2a, 0x0a, 0x26,
	0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x41,
	0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x30, 0x0a, 0x2c, 0x52, 0x45, 0x53, 0x5f,
	0x4d, 0x41, 0x58, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52,
	0x45, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x4d, 0x4d, 0x52, 0x5f, 0x44, 0x55, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x07, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x45,
	0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x55, 0x42, 0x5f,
	0x50, 0x52, 0x4f, 0x43, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x5f, 0x4e, 0x55, 0x4d, 0x10,
	0x05, 0x12, 0x29, 0x0a, 0x25, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x48, 0x45,
	0x53, 0x53, 0x5f, 0x4d, 0x4d, 0x52, 0x5f, 0x41, 0x49, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45,
	0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x07, 0x12, 0x2a, 0x0a, 0x26,
	0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x4f,
	0x4c, 0x4f, 0x5f, 0x41, 0x49, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x53, 0x43, 0x4f,
	0x52, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x52, 0x45, 0x53, 0x5f,
	0x4d, 0x41, 0x58, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44,
	0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x4e, 0x55,
	0x4d, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43,
	0x48, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x5f, 0x4e,
	0x55, 0x4d, 0x10, 0x08, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x50, 0x45, 0x52, 0x46, 0x45, 0x46, 0x54, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x42, 0x49, 0x4e, 0x44,
	0x5f, 0x43, 0x4e, 0x54, 0x10, 0x14, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41,
	0x58, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x4c, 0x41, 0x42, 0x45,
	0x4c, 0x5f, 0x4c, 0x45, 0x4e, 0x10, 0x20, 0x12, 0x1f, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x5f, 0x4d,
	0x41, 0x58, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x44, 0x45, 0x53,
	0x43, 0x5f, 0x4c, 0x45, 0x4e, 0x10, 0x80, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x5f,
	0x4d, 0x41, 0x58, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x48, 0x45,
	0x52, 0x4f, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x05, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x5f,
	0x4d, 0x41, 0x58, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x46, 0x49,
	0x4c, 0x54, 0x45, 0x52, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x05, 0x12,
	0x22, 0x0a, 0x1e, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x10, 0x05, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f,
	0x4d, 0x41, 0x58, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x42, 0x55,
	0x46, 0x46, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45,
	0x53, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x49, 0x4e, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c,
	0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x12, 0x26, 0x0a,
	0x22, 0x52, 0x45, 0x53, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d,
	0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x10, 0x09, 0x12, 0x1d, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x5f, 0x55, 0x47, 0x43,
	0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x49, 0x43, 0x55, 0x4c, 0x54,
	0x59, 0x10, 0xff, 0x01, 0x12, 0x2f, 0x0a, 0x2b, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x4e, 0x45, 0x57, 0x42, 0x49, 0x45, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x5f, 0x54, 0x52, 0x49,
	0x47, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x4e, 0x55, 0x4d, 0x10, 0x04, 0x12, 0x34, 0x0a, 0x30, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58,
	0x5f, 0x4e, 0x45, 0x57, 0x42, 0x49, 0x45, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x5f, 0x54, 0x52,
	0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x52,
	0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4e, 0x45, 0x57, 0x42, 0x49, 0x45, 0x5f, 0x54, 0x52,
	0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x02,
	0x12, 0x28, 0x0a, 0x24, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4e, 0x45, 0x57, 0x42,
	0x49, 0x45, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x45,
	0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4e, 0x45, 0x57, 0x42, 0x49, 0x45, 0x5f, 0x54, 0x52, 0x49,
	0x47, 0x47, 0x45, 0x52, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x45, 0x53,
	0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4e, 0x45, 0x57, 0x42, 0x49, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x0a, 0x12, 0x1f,
	0x0a, 0x1b, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4e, 0x45, 0x57, 0x42, 0x49, 0x45,
	0x5f, 0x55, 0x49, 0x5f, 0x44, 0x45, 0x50, 0x54, 0x48, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x05, 0x12,
	0x19, 0x0a, 0x15, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x45,
	0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x4e, 0x54, 0x10, 0x63, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x48,
	0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x43, 0x4e, 0x54, 0x10, 0x63, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x19, 0x0a,
	0x15, 0x47, 0x49, 0x46, 0x54, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x4d,
	0x41, 0x58, 0x5f, 0x43, 0x4e, 0x54, 0x10, 0x0a, 0x12, 0x2b, 0x0a, 0x27, 0x4c, 0x4f, 0x52, 0x44,
	0x52, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x53, 0x5f, 0x48, 0x49,
	0x53, 0x54, 0x4f, 0x52, 0x59, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x43, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58,
	0x5f, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4e, 0x54, 0x10, 0x0a, 0x1a,
	0x06, 0x10, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xb2, 0x1e, 0x0a, 0x10, 0x52, 0x45, 0x53, 0x5f,
	0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x12, 0x20, 0x0a, 0x1c,
	0x52, 0x45, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54,
	0x5f, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x5f, 0x10, 0x00, 0x12, 0x30,
	0x0a, 0x14, 0x42, 0x4c, 0x4f, 0x4f, 0x44, 0x5f, 0x42, 0x49, 0x47, 0x5f, 0x48, 0x55, 0x52, 0x54,
	0x5f, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x10, 0x01, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe8, 0xa1,
	0x80, 0xe6, 0x9d, 0xa1, 0xe9, 0xab, 0x98, 0xe4, 0xbc, 0xa4, 0xe6, 0xaf, 0x94, 0xe4, 0xbe, 0x8b,
	0x12, 0x34, 0x0a, 0x12, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54,
	0x5f, 0x42, 0x47, 0x55, 0x52, 0x4c, 0x10, 0x02, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe9, 0x82,
	0xae, 0xe4, 0xbb, 0xb6, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe8, 0x83, 0x8c, 0xe6, 0x99, 0xaf,
	0xe5, 0x9b, 0xbe, 0x75, 0x72, 0x6c, 0x12, 0x39, 0x0a, 0x17, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52,
	0x5f, 0x43, 0x48, 0x47, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x5f, 0x4d, 0x49,
	0x58, 0x10, 0x03, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe5, 0x90, 0x8d, 0xe5, 0xad, 0x97, 0xe6,
	0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe9, 0x99, 0x90, 0xe5, 0x88,
	0xb6, 0x12, 0x35, 0x0a, 0x19, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x47, 0x4e,
	0x41, 0x4d, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x04,
	0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0x94, 0xb9, 0xe5, 0x90, 0x8d, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0xe9, 0x97, 0xb4, 0xe9, 0x9a, 0x94, 0x12, 0x2f, 0x0a, 0x13, 0x50, 0x4c, 0x41, 0x59,
	0x45, 0x52, 0x5f, 0x43, 0x48, 0x47, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x10,
	0x05, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0x94, 0xb9, 0xe5, 0x90, 0x8d, 0xe6, 0x89, 0x80,
	0xe9, 0x9c, 0x80, 0xe9, 0x81, 0x93, 0xe5, 0x85, 0xb7, 0x12, 0x3d, 0x0a, 0x19, 0x43, 0x52, 0x4f,
	0x53, 0x53, 0x5f, 0x44, 0x41, 0x59, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x48,
	0x4f, 0x55, 0x52, 0x4d, 0x49, 0x4e, 0x10, 0x06, 0x1a, 0x1e, 0xaa, 0xb6, 0x18, 0x1a, 0xe8, 0xb7,
	0xa8, 0xe5, 0xa4, 0xa9, 0xe5, 0x88, 0xb7, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0x28, 0xe6, 0x97, 0xb6, 0xe5, 0x88, 0x86, 0x29, 0x12, 0x45, 0x0a, 0x1e, 0x43, 0x52, 0x4f, 0x53,
	0x53, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x57,
	0x45, 0x45, 0x4b, 0x48, 0x4f, 0x55, 0x52, 0x4d, 0x49, 0x4e, 0x10, 0x07, 0x1a, 0x21, 0xaa, 0xb6,
	0x18, 0x1d, 0xe8, 0xb7, 0xa8, 0xe5, 0x91, 0xa8, 0xe5, 0x88, 0xb7, 0xe6, 0x96, 0xb0, 0xe6, 0x97,
	0xb6, 0xe9, 0x97, 0xb4, 0x28, 0xe5, 0x91, 0xa8, 0xe6, 0x97, 0xb6, 0xe5, 0x88, 0x86, 0x29, 0x12,
	0x3c, 0x0a, 0x18, 0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x48, 0x45, 0x41, 0x52,
	0x54, 0x5f, 0x42, 0x45, 0x41, 0x54, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x10, 0x08, 0x1a, 0x1e, 0xaa,
	0xb6, 0x18, 0x1a, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0xe5, 0xbf, 0x83, 0xe8, 0xb7, 0xb3, 0xe9, 0xa2, 0x91, 0xe7, 0x8e, 0x87, 0x12, 0x30, 0x0a,
	0x11, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0x09, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe6, 0x96, 0xb0, 0xe8, 0x8e, 0xb7,
	0xe5, 0xbe, 0x97, 0xe9, 0x81, 0x93, 0xe5, 0x85, 0xb7, 0xe6, 0x97, 0xb6, 0xe9, 0x99, 0x90, 0x12,
	0x3a, 0x0a, 0x12, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x47, 0x45, 0x54,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x0a, 0x1a, 0x22, 0xaa, 0xb6, 0x18, 0x1e, 0xe6, 0x88, 0x98,
	0xe4, 0xbb, 0xa4, 0xe6, 0x8c, 0x82, 0xe6, 0x9c, 0xba, 0xe7, 0xbb, 0x8f, 0xe9, 0xaa, 0x8c, 0xe9,
	0xa2, 0x86, 0xe5, 0x8f, 0x96, 0xe9, 0x97, 0xb4, 0xe9, 0x9a, 0x94, 0x12, 0x4a, 0x0a, 0x19, 0x4c,
	0x49, 0x4e, 0x45, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4e, 0x55, 0x4d, 0x5f, 0x50, 0x45,
	0x52, 0x5f, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x10, 0x0b, 0x1a, 0x2b, 0xaa, 0xb6, 0x18, 0x27,
	0xe6, 0xaf, 0x8f, 0xe4, 0xb8, 0xaa, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe5, 0x8f, 0xaf, 0xe4,
	0xbb, 0xa5, 0xe4, 0xbf, 0x9d, 0xe5, 0xad, 0x98, 0xe7, 0x9a, 0x84, 0xe9, 0x98, 0xb5, 0xe5, 0xae,
	0xb9, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x12, 0x33, 0x0a, 0x15, 0x41, 0x43, 0x4e, 0x54, 0x5f,
	0x42, 0x4f, 0x52, 0x4e, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x48, 0x45, 0x41, 0x44, 0x5f, 0x49, 0x44,
	0x10, 0x0c, 0x1a, 0x18, 0xaa, 0xb6, 0x18, 0x14, 0xe7, 0x8e, 0xa9, 0xe5, 0xae, 0xb6, 0xe5, 0x87,
	0xba, 0xe7, 0x94, 0x9f, 0xe5, 0xa4, 0xb4, 0xe5, 0x83, 0x8f, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x18,
	0x41, 0x43, 0x4e, 0x54, 0x5f, 0x42, 0x4f, 0x52, 0x4e, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x48, 0x45,
	0x41, 0x44, 0x49, 0x4d, 0x47, 0x5f, 0x49, 0x44, 0x10, 0x0d, 0x1a, 0x1b, 0xaa, 0xb6, 0x18, 0x17,
	0xe7, 0x8e, 0xa9, 0xe5, 0xae, 0xb6, 0xe5, 0x87, 0xba, 0xe7, 0x94, 0x9f, 0xe5, 0xa4, 0xb4, 0xe5,
	0x83, 0x8f, 0xe6, 0xa1, 0x86, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x0e, 0x52, 0x4f, 0x4f, 0x4d, 0x5f,
	0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x43, 0x44, 0x10, 0x0f, 0x1a, 0x1c, 0xaa, 0xb6, 0x18,
	0x18, 0xe9, 0x82, 0x80, 0xe8, 0xaf, 0xb7, 0xe7, 0xbb, 0x84, 0xe9, 0x98, 0x9f, 0xe5, 0x86, 0xb7,
	0xe5, 0x8d, 0xb4, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x12, 0x38, 0x0a, 0x13, 0x41, 0x43, 0x4e,
	0x54, 0x5f, 0x42, 0x4f, 0x52, 0x4e, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x52, 0x44,
	0x10, 0x10, 0x1a, 0x1f, 0xaa, 0xb6, 0x18, 0x1b, 0xe7, 0x8e, 0xa9, 0xe5, 0xae, 0xb6, 0xe5, 0x87,
	0xba, 0xe7, 0x94, 0x9f, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe7, 0x9a, 0x84, 0xe9, 0xa2, 0x86,
	0xe4, 0xb8, 0xbb, 0x12, 0x42, 0x0a, 0x17, 0x41, 0x43, 0x4e, 0x54, 0x5f, 0x42, 0x4f, 0x52, 0x4e,
	0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x53, 0x4b, 0x49, 0x4e, 0x10, 0x11,
	0x1a, 0x25, 0xaa, 0xb6, 0x18, 0x21, 0xe7, 0x8e, 0xa9, 0xe5, 0xae, 0xb6, 0xe5, 0x87, 0xba, 0xe7,
	0x94, 0x9f, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe7, 0x9a, 0x84, 0xe9, 0xa2, 0x86, 0xe4, 0xb8,
	0xbb, 0xe7, 0x9a, 0xae, 0xe8, 0x82, 0xa4, 0x12, 0x2f, 0x0a, 0x13, 0x41, 0x43, 0x4e, 0x54, 0x5f,
	0x42, 0x4f, 0x52, 0x4e, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x12,
	0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe7, 0x8e, 0xa9, 0xe5, 0xae, 0xb6, 0xe5, 0x87, 0xba, 0xe7,
	0x94, 0x9f, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0x12, 0x38, 0x0a, 0x16, 0x41, 0x43, 0x4e, 0x54,
	0x5f, 0x4e, 0x45, 0x57, 0x42, 0x49, 0x45, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x44, 0x52,
	0x4f, 0x50, 0x10, 0x13, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe6, 0x96, 0xb0, 0xe6, 0x89, 0x8b,
	0xe5, 0xbc, 0x95, 0xe5, 0xaf, 0xbc, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe6, 0x8e, 0x89, 0xe8,
	0x90, 0xbd, 0x12, 0x35, 0x0a, 0x10, 0x50, 0x4b, 0x47, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4d,
	0x41, 0x58, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x14, 0x1a, 0x1f, 0xaa, 0xb6, 0x18, 0x1b, 0xe8, 0x83,
	0x8c, 0xe5, 0x8c, 0x85, 0xe7, 0x89, 0xa9, 0xe5, 0x93, 0x81, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7,
	0xe6, 0xa0, 0xbc, 0xe5, 0xad, 0x90, 0xe6, 0x95, 0xb0, 0x12, 0x38, 0x0a, 0x11, 0x50, 0x56, 0x50,
	0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x15,
	0x1a, 0x21, 0xaa, 0xb6, 0x18, 0x1d, 0x50, 0x56, 0x50, 0xe7, 0xbb, 0x93, 0xe7, 0xae, 0x97, 0xe6,
	0x97, 0xb6, 0xe7, 0x9a, 0x84, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe6, 0x8e, 0x89, 0xe8, 0x90,
	0xbd, 0x49, 0x44, 0x12, 0x42, 0x0a, 0x1a, 0x50, 0x56, 0x50, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x5f,
	0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x53, 0x43, 0x4f, 0x52,
	0x45, 0x10, 0x16, 0x1a, 0x22, 0xaa, 0xb6, 0x18, 0x1e, 0xe6, 0x9c, 0x80, 0xe5, 0xbc, 0xba, 0xe7,
	0x8e, 0x8b, 0xe8, 0x80, 0x85, 0xe5, 0x8d, 0x95, 0xe4, 0xb8, 0xaa, 0xe6, 0x98, 0x9f, 0xe7, 0xba,
	0xa7, 0xe7, 0xa7, 0xaf, 0xe5, 0x88, 0x86, 0x12, 0x3c, 0x0a, 0x1a, 0x52, 0x4f, 0x4f, 0x4d, 0x5f,
	0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x5f, 0x53,
	0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x17, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe6, 0x88, 0xbf,
	0xe9, 0x97, 0xb4, 0xe9, 0x82, 0x80, 0xe8, 0xaf, 0xb7, 0xe6, 0xb6, 0x88, 0xe6, 0x81, 0xaf, 0xe8,
	0xb6, 0x85, 0xe6, 0x97, 0xb6, 0x12, 0x42, 0x0a, 0x1a, 0x50, 0x56, 0x50, 0x5f, 0x41, 0x57, 0x41,
	0x52, 0x44, 0x5f, 0x4d, 0x49, 0x4e, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x52, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x18, 0x1a, 0x22, 0xaa, 0xb6, 0x18, 0x1e, 0x70, 0x76, 0x70, 0xe5, 0xa5,
	0x96, 0xe5, 0x8a, 0xb1, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x8f, 0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97,
	0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe6, 0x95, 0xb0, 0x12, 0x47, 0x0a, 0x1c, 0x43, 0x48, 0x45,
	0x53, 0x53, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x5f,
	0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x19, 0x1a, 0x25, 0xaa, 0xb6, 0x18,
	0x21, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe5, 0x8d, 0x87, 0xe6, 0x98, 0x9f, 0xe6, 0xb6, 0x88,
	0xe9, 0x99, 0xa4, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe9,
	0x87, 0x8f, 0x12, 0x3a, 0x0a, 0x16, 0x41, 0x52, 0x45, 0x41, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x41,
	0x49, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x1a, 0x1a, 0x1e,
	0xaa, 0xb6, 0x18, 0x1a, 0xe5, 0xbc, 0x80, 0xe6, 0x88, 0xbf, 0xe9, 0x97, 0xb4, 0xe9, 0x9a, 0x8f,
	0xe6, 0x9c, 0xba, 0x41, 0x49, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0xe7, 0xbb, 0x84, 0x12, 0x31,
	0x0a, 0x16, 0x43, 0x4f, 0x55, 0x50, 0x4f, 0x4e, 0x53, 0x5f, 0x47, 0x4d, 0x41, 0x4c, 0x4c, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x49, 0x44, 0x10, 0x1b, 0x1a, 0x15, 0xaa, 0xb6, 0x18, 0x11,
	0xe9, 0x81, 0x93, 0xe8, 0x81, 0x9a, 0xe5, 0x9f, 0x8e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x49, 0x0a, 0x18, 0x41, 0x49, 0x5f, 0x43, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x41,
	0x44, 0x44, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x10, 0x1c, 0x1a,
	0x2b, 0xaa, 0xb6, 0x18, 0x27, 0xe5, 0x86, 0x85, 0xe7, 0xbd, 0xae, 0x41, 0x49, 0x43, 0xe4, 0xbd,
	0x8d, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe6, 0x94, 0xbe, 0xe5, 0xa4, 0xa7, 0xe6, 0x9d, 0x83,
	0xe9, 0x87, 0x8d, 0xe5, 0x8d, 0x83, 0xe5, 0x88, 0x86, 0xe6, 0xaf, 0x94, 0x12, 0x4d, 0x0a, 0x1c,
	0x41, 0x49, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x41, 0x44,
	0x44, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x10, 0x1d, 0x1a, 0x2b,
	0xaa, 0xb6, 0x18, 0x27, 0xe5, 0x86, 0x85, 0xe7, 0xbd, 0xae, 0x41, 0x49, 0xe5, 0x89, 0xaf, 0x43,
	0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe6, 0x94, 0xbe, 0xe5, 0xa4, 0xa7, 0xe6, 0x9d, 0x83, 0xe9,
	0x87, 0x8d, 0xe5, 0x8d, 0x83, 0xe5, 0x88, 0x86, 0xe6, 0xaf, 0x94, 0x12, 0x29, 0x0a, 0x0d, 0x50,
	0x52, 0x49, 0x56, 0x41, 0x43, 0x59, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x10, 0x1e, 0x1a, 0x16,
	0xaa, 0xb6, 0x18, 0x12, 0xe9, 0x9a, 0x90, 0xe7, 0xa7, 0x81, 0xe4, 0xbf, 0x9d, 0xe6, 0x8a, 0xa4,
	0xe6, 0x8c, 0x87, 0xe5, 0xbc, 0x95, 0x12, 0x38, 0x0a, 0x16, 0x50, 0x52, 0x49, 0x56, 0x41, 0x43,
	0x59, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x5f, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x52, 0x45, 0x4e,
	0x10, 0x1f, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe5, 0x84, 0xbf, 0xe7, 0xab, 0xa5, 0xe9, 0x9a,
	0x90, 0xe7, 0xa7, 0x81, 0xe4, 0xbf, 0x9d, 0xe6, 0x8a, 0xa4, 0xe6, 0x8c, 0x87, 0xe5, 0xbc, 0x95,
	0x12, 0x33, 0x0a, 0x11, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x53, 0x4f, 0x46,
	0x54, 0x57, 0x41, 0x52, 0x45, 0x10, 0x20, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe8, 0x85, 0xbe,
	0xe8, 0xae, 0xaf, 0xe6, 0xb8, 0xb8, 0xe6, 0x88, 0x8f, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe5,
	0x8d, 0x8f, 0xe8, 0xae, 0xae, 0x12, 0x42, 0x0a, 0x1b, 0x43, 0x52, 0x4f, 0x53, 0x53, 0x5f, 0x4d,
	0x4f, 0x4e, 0x54, 0x48, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x48, 0x4f, 0x55,
	0x52, 0x4d, 0x49, 0x4e, 0x10, 0x21, 0x1a, 0x21, 0xaa, 0xb6, 0x18, 0x1d, 0xe8, 0xb7, 0xa8, 0xe6,
	0x9c, 0x88, 0xe5, 0x88, 0xb7, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x28, 0xe6,
	0x97, 0xa5, 0xe6, 0x97, 0xb6, 0xe5, 0x88, 0x86, 0x29, 0x12, 0x25, 0x0a, 0x0c, 0x42, 0x55, 0x59,
	0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x41, 0x47, 0x45, 0x10, 0x22, 0x1a, 0x13, 0xaa, 0xb6, 0x18,
	0x0f, 0xe8, 0xb4, 0xad, 0xe4, 0xb9, 0xb0, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0x41, 0x47, 0x45,
	0x12, 0x24, 0x0a, 0x0b, 0x42, 0x55, 0x59, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x41, 0x47, 0x45, 0x10,
	0x23, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe8, 0xb4, 0xad, 0xe4, 0xb9, 0xb0, 0xe7, 0xbb, 0x8f,
	0xe9, 0xaa, 0x8c, 0x41, 0x47, 0x45, 0x12, 0x2a, 0x0a, 0x11, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53,
	0x48, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x10, 0x24, 0x1a, 0x13, 0xaa,
	0xb6, 0x18, 0x0f, 0xe5, 0x88, 0xb7, 0xe6, 0x96, 0xb0, 0xe5, 0x95, 0x86, 0xe5, 0xba, 0x97, 0x41,
	0x47, 0x45, 0x12, 0x32, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x44, 0x52, 0x41, 0x47,
	0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x41, 0x47, 0x45, 0x10, 0x25, 0x1a, 0x19, 0xaa, 0xb6, 0x18,
	0x15, 0xe9, 0x98, 0xb5, 0xe4, 0xbd, 0x8d, 0xe9, 0x80, 0x89, 0xe6, 0x8b, 0xa9, 0xe5, 0xbc, 0x80,
	0xe5, 0xa7, 0x8b, 0x41, 0x47, 0x45, 0x12, 0x30, 0x0a, 0x11, 0x45, 0x4e, 0x44, 0x5f, 0x44, 0x52,
	0x41, 0x47, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x41, 0x47, 0x45, 0x10, 0x26, 0x1a, 0x19, 0xaa,
	0xb6, 0x18, 0x15, 0xe9, 0x98, 0xb5, 0xe4, 0xbd, 0x8d, 0xe9, 0x80, 0x89, 0xe6, 0x8b, 0xa9, 0xe7,
	0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0x41, 0x47, 0x45, 0x12, 0x26, 0x0a, 0x0d, 0x4c, 0x4f, 0x52, 0x44,
	0x5f, 0x54, 0x45, 0x4c, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x27, 0x1a, 0x13, 0xaa, 0xb6, 0x18,
	0x0f, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0xe4, 0xbc, 0xa0, 0xe9, 0x80, 0x81, 0x41, 0x47, 0x45,
	0x12, 0x2c, 0x0a, 0x0f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55,
	0x50, 0x5f, 0x33, 0x10, 0x28, 0x1a, 0x17, 0xaa, 0xb6, 0x18, 0x13, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b,
	0x84, 0xe5, 0x90, 0x88, 0xe6, 0x88, 0x90, 0x33, 0xe6, 0x98, 0x9f, 0x41, 0x47, 0x45, 0x12, 0x26,
	0x0a, 0x0d, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x50, 0x10,
	0x29, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe5, 0x8d, 0x87,
	0xe7, 0xba, 0xa7, 0x41, 0x47, 0x45, 0x12, 0x32, 0x0a, 0x13, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x53,
	0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x50, 0x10, 0x2a, 0x1a,
	0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe6, 0x8a, 0x80, 0xe8, 0x83,
	0xbd, 0xe5, 0x8d, 0x87, 0xe7, 0xba, 0xa7, 0x41, 0x47, 0x45, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x54,
	0x4f, 0x52, 0x45, 0x5f, 0x53, 0x41, 0x4d, 0x45, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x10, 0x2b, 0x1a,
	0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe5, 0x95, 0x86, 0xe5, 0xba, 0x97, 0xe5, 0xa4, 0xa9, 0xe8, 0x83,
	0xa1, 0x41, 0x47, 0x45, 0x12, 0x2f, 0x0a, 0x16, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x53, 0x4f, 0x55,
	0x4c, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x2c,
	0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe5, 0x8d, 0x87, 0xe8, 0x87, 0xb3, 0xe6, 0xbb, 0xa1, 0xe7,
	0xba, 0xa7, 0x41, 0x47, 0x45, 0x12, 0x49, 0x0a, 0x1e, 0x57, 0x41, 0x52, 0x4d, 0x5f, 0x41, 0x49,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x48, 0x41, 0x53,
	0x45, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x10, 0x2d, 0x1a, 0x25, 0xaa, 0xb6, 0x18, 0x21, 0xe6,
	0x96, 0xb0, 0xe6, 0x89, 0x8b, 0xe8, 0xbf, 0x87, 0xe6, 0xb8, 0xa1, 0xe9, 0x98, 0xb6, 0xe6, 0xae,
	0xb5, 0xe6, 0xb8, 0xa9, 0xe6, 0x9a, 0x96, 0xe5, 0xb1, 0x80, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0,
	0x12, 0x3f, 0x0a, 0x1a, 0x54, 0x48, 0x49, 0x52, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x2e,
	0x1a, 0x1f, 0xaa, 0xb6, 0x18, 0x1b, 0xe7, 0xac, 0xac, 0xe4, 0xb8, 0x89, 0xe6, 0x96, 0xb9, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0x85, 0xb1, 0xe4, 0xba, 0xab, 0xe6, 0xb8, 0x85, 0xe5, 0x8d,
	0x95, 0x12, 0x24, 0x0a, 0x0e, 0x50, 0x52, 0x49, 0x56, 0x41, 0x43, 0x59, 0x5f, 0x48, 0x45, 0x4c,
	0x50, 0x45, 0x52, 0x10, 0x2f, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe9, 0x9a, 0x90, 0xe7, 0xa7,
	0x81, 0xe5, 0x8a, 0xa9, 0xe6, 0x89, 0x8b, 0x12, 0x39, 0x0a, 0x14, 0x55, 0x4e, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x45, 0x52, 0x4d, 0x41, 0x49, 0x4c, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x10,
	0x30, 0x1a, 0x1f, 0xaa, 0xb6, 0x18, 0x1b, 0xe6, 0xb3, 0xa8, 0xe9, 0x94, 0x80, 0xe5, 0x8f, 0x96,
	0xe6, 0xb6, 0x88, 0xe9, 0x82, 0xae, 0xe4, 0xbb, 0xb6, 0xe5, 0x8f, 0x91, 0xe9, 0x80, 0x81, 0xe4,
	0xba, 0xba, 0x12, 0x3e, 0x0a, 0x16, 0x53, 0x48, 0x4f, 0x57, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x53, 0x45, 0x54, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x43, 0x4e, 0x54, 0x10, 0x31, 0x1a, 0x22,
	0xaa, 0xb6, 0x18, 0x1e, 0xe5, 0x9c, 0xa8, 0xe7, 0xba, 0xbf, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0xe6, 0xaf, 0x8f, 0xe5, 0x91, 0xa8, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe4, 0xb8, 0x8a, 0xe9,
	0x99, 0x90, 0x12, 0x41, 0x0a, 0x1b, 0x4f, 0x42, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x54, 0x45,
	0x50, 0x5f, 0x48, 0x45, 0x41, 0x52, 0x54, 0x5f, 0x42, 0x45, 0x41, 0x54, 0x5f, 0x46, 0x52, 0x45,
	0x51, 0x10, 0x32, 0x1a, 0x20, 0xaa, 0xb6, 0x18, 0x1c, 0x4f, 0x42, 0x4c, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x65, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0xe5, 0xbf, 0x83, 0xe8, 0xb7, 0xb3, 0xe9,
	0xa2, 0x91, 0xe7, 0x8e, 0x87, 0x12, 0x38, 0x0a, 0x17, 0x4f, 0x42, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x10, 0x33, 0x1a, 0x1b, 0xaa, 0xb6, 0x18, 0x17, 0x4f, 0x42, 0xe6, 0x8e, 0xa7, 0xe5, 0x88, 0xb6,
	0xe5, 0x99, 0xa8, 0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x12,
	0x40, 0x0a, 0x18, 0x52, 0x41, 0x4e, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x46, 0x49, 0x4c,
	0x4c, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x34, 0x1a, 0x22, 0xaa,
	0xb6, 0x18, 0x1e, 0xe9, 0x9a, 0x8f, 0xe6, 0x9c, 0xba, 0xe5, 0x90, 0x8d, 0xe5, 0xad, 0x97, 0xe5,
	0xa1, 0xab, 0xe5, 0x85, 0x85, 0xe7, 0xa9, 0xba, 0xe7, 0x99, 0xbd, 0xe6, 0x95, 0xb0, 0xe9, 0x87,
	0x8f, 0x12, 0x27, 0x0a, 0x11, 0x4e, 0x45, 0x57, 0x42, 0x49, 0x45, 0x5f, 0x46, 0x52, 0x45, 0x45,
	0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x10, 0x35, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x96,
	0xb0, 0xe6, 0x89, 0x8b, 0xe9, 0x99, 0x90, 0xe5, 0x85, 0x8d, 0x12, 0x27, 0x0a, 0x0e, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x48, 0x49, 0x44, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x10, 0x36, 0x1a, 0x13,
	0xaa, 0xb6, 0x18, 0x0f, 0xe5, 0x9c, 0xba, 0xe6, 0x99, 0xaf, 0xe9, 0x9a, 0x90, 0xe8, 0x97, 0x8f,
	0x41, 0x47, 0x45, 0x12, 0x3a, 0x0a, 0x15, 0x48, 0x55, 0x4e, 0x44, 0x52, 0x45, 0x44, 0x5f, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x10, 0x37, 0x1a, 0x1f,
	0xaa, 0xb6, 0x18, 0x1b, 0xe7, 0x99, 0xbe, 0xe5, 0xbc, 0xba, 0xe6, 0xa6, 0x9c, 0xe5, 0x88, 0x9d,
	0xe5, 0xa7, 0x8b, 0xe9, 0x95, 0x9c, 0xe5, 0xa4, 0xb4, 0xe5, 0xa4, 0xa7, 0xe5, 0xb0, 0x8f, 0x12,
	0x36, 0x0a, 0x14, 0x53, 0x48, 0x4f, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x53, 0x52, 0x4f,
	0x4c, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x38, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe5,
	0x95, 0x86, 0xe5, 0x9f, 0x8e, 0xe9, 0x81, 0x93, 0xe5, 0x85, 0xb7, 0xe6, 0xbb, 0x9a, 0xe5, 0x8a,
	0xa8, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x12, 0x39, 0x0a, 0x17, 0x4c, 0x4f, 0x52, 0x44, 0x5f,
	0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x10, 0x39, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b,
	0xe9, 0x80, 0x89, 0xe6, 0x8b, 0xa9, 0xe9, 0xa1, 0xba, 0xe4, 0xbd, 0x8d, 0xe5, 0x8f, 0x82, 0xe6,
	0x95, 0xb0, 0x12, 0x44, 0x0a, 0x16, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f,
	0x4d, 0x53, 0x47, 0x5f, 0x4d, 0x41, 0x58, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x3a, 0x1a, 0x28,
	0xaa, 0xb6, 0x18, 0x24, 0xe6, 0x88, 0xbf, 0xe9, 0x97, 0xb4, 0xe8, 0x81, 0x8a, 0xe5, 0xa4, 0xa9,
	0xe6, 0xb6, 0x88, 0xe6, 0x81, 0xaf, 0xe5, 0xad, 0x98, 0xe5, 0x9c, 0xa8, 0xe6, 0x9c, 0x80, 0xe5,
	0xa4, 0xa7, 0xe4, 0xb8, 0xaa, 0xe6, 0x95, 0xb0, 0x12, 0x45, 0x0a, 0x17, 0x52, 0x4f, 0x4f, 0x4d,
	0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x10, 0x3b, 0x1a, 0x28, 0xaa, 0xb6, 0x18, 0x24, 0xe6, 0x88, 0xbf, 0xe9, 0x97,
	0xb4, 0xe8, 0x81, 0x8a, 0xe5, 0xa4, 0xa9, 0xe6, 0xb6, 0x88, 0xe6, 0x81, 0xaf, 0xe5, 0xad, 0x98,
	0xe5, 0x9c, 0xa8, 0xe6, 0x9c, 0x80, 0xe9, 0x95, 0xbf, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x12,
	0x3b, 0x0a, 0x16, 0x57, 0x41, 0x4c, 0x4c, 0x5f, 0x48, 0x49, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x42, 0x59, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x3c, 0x1a, 0x1f, 0xaa, 0xb6, 0x18,
	0x1b, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe5, 0xaf, 0xbc, 0xe8, 0x87, 0xb4, 0xe7, 0x9a, 0x84,
	0xe6, 0x92, 0x9e, 0xe5, 0xa2, 0x99, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x12, 0x49, 0x0a, 0x18,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x52, 0x4f, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4d,
	0x49, 0x54, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x3d, 0x1a, 0x2b, 0xaa, 0xb6, 0x18, 0x27,
	0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe7, 0x89, 0xb9, 0xe6, 0xae, 0x8a, 0xe6, 0x8f, 0x90, 0xe5,
	0x89, 0x8d, 0xe5, 0xa4, 0x87, 0xe6, 0x88, 0x98, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0xe4, 0xba,
	0xba, 0xe6, 0x95, 0xb0, 0xe5, 0x80, 0xbc, 0x12, 0x39, 0x0a, 0x1d, 0x47, 0x55, 0x41, 0x52, 0x41,
	0x4e, 0x54, 0x45, 0x45, 0x44, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x41, 0x52, 0x59, 0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x10, 0x3e, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12,
	0xe4, 0xbf, 0x9d, 0xe5, 0xba, 0x95, 0xe8, 0xa1, 0xa5, 0xe5, 0x85, 0x85, 0xe6, 0xa3, 0x8b, 0xe6,
	0x89, 0x8b, 0x12, 0x3b, 0x0a, 0x19, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x43, 0x48, 0x4f, 0x4f, 0x53,
	0x45, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10,
	0x3f, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe9, 0x80, 0x89,
	0xe6, 0x8b, 0xa9, 0xe9, 0x9a, 0x8f, 0xe6, 0x9c, 0xba, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0x12,
	0x3b, 0x0a, 0x12, 0x4c, 0x4f, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x45, 0x41, 0x53, 0x54,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x40, 0x1a, 0x23, 0xaa, 0xb6, 0x18, 0x1f, 0xe5, 0xaf, 0xb9,
	0xe5, 0xb1, 0x80, 0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0xe8, 0x87, 0xb3, 0xe5, 0xb0, 0x91,
	0xe5, 0x81, 0x9c, 0xe7, 0x95, 0x99, 0xe6, 0x97, 0xb6, 0xe9, 0x95, 0xbf, 0x12, 0x3c, 0x0a, 0x14,
	0x57, 0x58, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x52, 0x45,
	0x57, 0x41, 0x52, 0x44, 0x10, 0x41, 0x1a, 0x22, 0xaa, 0xb6, 0x18, 0x1e, 0xe5, 0xbe, 0xae, 0xe4,
	0xbf, 0xa1, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95, 0xe9, 0x82,
	0xae, 0xe4, 0xbb, 0xb6, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0x12, 0x38, 0x0a, 0x14, 0x51, 0x51,
	0x5f, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x52, 0x45, 0x57, 0x41,
	0x52, 0x44, 0x10, 0x42, 0x1a, 0x1e, 0xaa, 0xb6, 0x18, 0x1a, 0x51, 0x51, 0xe5, 0xb9, 0xb3, 0xe5,
	0x8f, 0xb0, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95, 0xe9, 0x82, 0xae, 0xe4, 0xbb, 0xb6, 0xe5, 0xa5,
	0x96, 0xe5, 0x8a, 0xb1, 0x12, 0x2e, 0x0a, 0x12, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x43, 0x1a, 0x16, 0xaa, 0xb6,
	0x18, 0x12, 0xe6, 0x8b, 0x8d, 0xe5, 0x8d, 0x96, 0xe9, 0x98, 0xb6, 0xe6, 0xae, 0xb5, 0xe6, 0x97,
	0xb6, 0xe9, 0x97, 0xb4, 0x12, 0x30, 0x0a, 0x14, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x50, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x44, 0x1a, 0x16,
	0xaa, 0xb6, 0x18, 0x12, 0xe6, 0x8b, 0x8d, 0xe5, 0x8d, 0x96, 0xe8, 0xa1, 0xa8, 0xe6, 0xbc, 0x94,
	0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x1a, 0x04, 0x88, 0xf9, 0x2b, 0x01, 0x2a, 0xc7, 0x06, 0x0a,
	0x14, 0x52, 0x45, 0x53, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x4d, 0x49, 0x53, 0x43, 0x5f,
	0x43, 0x4f, 0x4e, 0x53, 0x54, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x5f, 0x41, 0x55, 0x44,
	0x49, 0x4f, 0x5f, 0x4d, 0x49, 0x53, 0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x5f, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x1b, 0x49,
	0x4e, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x44, 0x52, 0x41, 0x47, 0x5f,
	0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x1a, 0x0b, 0xaa, 0xb6,
	0x18, 0x07, 0xe5, 0x8d, 0xa0, 0xe4, 0xbd, 0x8d, 0x31, 0x12, 0x21, 0x0a, 0x10, 0x49, 0x4e, 0x47,
	0x41, 0x4d, 0x45, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x10, 0x02, 0x1a,
	0x0b, 0xaa, 0xb6, 0x18, 0x07, 0xe5, 0x8d, 0xa0, 0xe4, 0xbd, 0x8d, 0x32, 0x12, 0x23, 0x0a, 0x12,
	0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x4f, 0x50, 0x55, 0x4c, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x03, 0x1a, 0x0b, 0xaa, 0xb6, 0x18, 0x07, 0xe5, 0x8d, 0xa0, 0xe4, 0xbd, 0x8d,
	0x33, 0x12, 0x25, 0x0a, 0x14, 0x49, 0x4e, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x4e,
	0x44, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x10, 0x04, 0x1a, 0x0b, 0xaa, 0xb6, 0x18,
	0x07, 0xe5, 0x8d, 0xa0, 0xe4, 0xbd, 0x8d, 0x34, 0x12, 0x27, 0x0a, 0x16, 0x43, 0x48, 0x45, 0x53,
	0x53, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x56, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55,
	0x4c, 0x54, 0x10, 0x05, 0x1a, 0x0b, 0xaa, 0xb6, 0x18, 0x07, 0xe5, 0x8d, 0xa0, 0xe4, 0xbd, 0x8d,
	0x35, 0x12, 0x27, 0x0a, 0x16, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c,
	0x45, 0x5f, 0x44, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x06, 0x1a, 0x0b, 0xaa,
	0xb6, 0x18, 0x07, 0xe5, 0x8d, 0xa0, 0xe4, 0xbd, 0x8d, 0x36, 0x12, 0x25, 0x0a, 0x14, 0x43, 0x48,
	0x45, 0x53, 0x53, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55,
	0x4c, 0x54, 0x10, 0x07, 0x1a, 0x0b, 0xaa, 0xb6, 0x18, 0x07, 0xe5, 0x8d, 0xa0, 0xe4, 0xbd, 0x8d,
	0x37, 0x12, 0x26, 0x0a, 0x15, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x08, 0x1a, 0x0b, 0xaa, 0xb6,
	0x18, 0x07, 0xe5, 0x8d, 0xa0, 0xe4, 0xbd, 0x8d, 0x38, 0x12, 0x1d, 0x0a, 0x0c, 0x53, 0x54, 0x4f,
	0x4e, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x09, 0x1a, 0x0b, 0xaa, 0xb6, 0x18,
	0x07, 0xe5, 0x8d, 0xa0, 0xe4, 0xbd, 0x8d, 0x39, 0x12, 0x23, 0x0a, 0x11, 0x53, 0x54, 0x4f, 0x4e,
	0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x0a, 0x1a,
	0x0c, 0xaa, 0xb6, 0x18, 0x08, 0xe5, 0x8d, 0xa0, 0xe4, 0xbd, 0x8d, 0x31, 0x30, 0x12, 0x21, 0x0a,
	0x0f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x53, 0x45, 0x4c, 0x4c,
	0x10, 0x0b, 0x1a, 0x0c, 0xaa, 0xb6, 0x18, 0x08, 0xe5, 0x8d, 0xa0, 0xe4, 0xbd, 0x8d, 0x31, 0x31,
	0x12, 0x2b, 0x0a, 0x19, 0x49, 0x4e, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43,
	0x48, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0x0c, 0x1a,
	0x0c, 0xaa, 0xb6, 0x18, 0x08, 0xe5, 0x8d, 0xa0, 0xe4, 0xbd, 0x8d, 0x31, 0x32, 0x12, 0x27, 0x0a,
	0x15, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x56, 0x5f, 0x44,
	0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x0d, 0x1a, 0x0c, 0xaa, 0xb6, 0x18, 0x08, 0xe5, 0x8d,
	0xa0, 0xe4, 0xbd, 0x8d, 0x31, 0x33, 0x12, 0x26, 0x0a, 0x14, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f,
	0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x48, 0x55, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x0f,
	0x1a, 0x0c, 0xaa, 0xb6, 0x18, 0x08, 0xe5, 0x8d, 0xa0, 0xe4, 0xbd, 0x8d, 0x31, 0x34, 0x12, 0x27,
	0x0a, 0x15, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x44, 0x5f,
	0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x10, 0x1a, 0x0c, 0xaa, 0xb6, 0x18, 0x08, 0xe5,
	0x8d, 0xa0, 0xe4, 0xbd, 0x8d, 0x31, 0x35, 0x12, 0x1e, 0x0a, 0x0c, 0x43, 0x48, 0x45, 0x53, 0x53,
	0x5f, 0x44, 0x45, 0x46, 0x45, 0x41, 0x54, 0x10, 0x11, 0x1a, 0x0c, 0xaa, 0xb6, 0x18, 0x08, 0xe5,
	0x8d, 0xa0, 0xe4, 0xbd, 0x8d, 0x31, 0x36, 0x12, 0x22, 0x0a, 0x10, 0x49, 0x4e, 0x47, 0x41, 0x4d,
	0x45, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x4d, 0x49, 0x4e, 0x45, 0x10, 0x12, 0x1a, 0x0c, 0xaa,
	0xb6, 0x18, 0x08, 0xe5, 0x8d, 0xa0, 0xe4, 0xbd, 0x8d, 0x31, 0x37, 0x12, 0x24, 0x0a, 0x12, 0x49,
	0x4e, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x45, 0x4e, 0x45, 0x52, 0x4d,
	0x59, 0x10, 0x13, 0x1a, 0x0c, 0xaa, 0xb6, 0x18, 0x08, 0xe5, 0x8d, 0xa0, 0xe4, 0xbd, 0x8d, 0x31,
	0x38, 0x12, 0x2e, 0x0a, 0x1c, 0x49, 0x4e, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x48, 0x45, 0x52, 0x4f,
	0x5f, 0x44, 0x52, 0x41, 0x47, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x14, 0x1a, 0x0c, 0xaa, 0xb6, 0x18, 0x08, 0xe5, 0x8d, 0xa0, 0xe4, 0xbd, 0x8d, 0x31,
	0x39, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x4d,
	0x49, 0x53, 0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x5f, 0x6d, 0x61, 0x78, 0x10, 0x15,
	0x1a, 0x04, 0x88, 0xf9, 0x2b, 0x01, 0x2a, 0xa5, 0x04, 0x0a, 0x0c, 0x50, 0x4c, 0x41, 0x59, 0x4d,
	0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4c, 0x41, 0x59, 0x4d,
	0x4f, 0x44, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x13, 0x50, 0x4c, 0x41,
	0x59, 0x4d, 0x4f, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x31,
	0x10, 0x01, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0x53, 0x31, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86,
	0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0x12, 0x34, 0x0a, 0x1c, 0x50, 0x4c, 0x41, 0x59, 0x4d, 0x4f,
	0x44, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x31, 0x5f, 0x54, 0x55,
	0x54, 0x4f, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0x53, 0x31,
	0xe6, 0x96, 0xb0, 0xe6, 0x89, 0x8b, 0xe5, 0xbc, 0x95, 0xe5, 0xaf, 0xbc, 0x12, 0x29, 0x0a, 0x14,
	0x50, 0x4c, 0x41, 0x59, 0x4d, 0x4f, 0x44, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x43, 0x41,
	0x4c, 0x5f, 0x53, 0x31, 0x10, 0x03, 0x1a, 0x0f, 0xaa, 0xb6, 0x18, 0x0b, 0x53, 0x31, 0xe6, 0xa8,
	0xa1, 0xe6, 0x8b, 0x9f, 0xe6, 0x88, 0x98, 0x12, 0x2b, 0x0a, 0x13, 0x50, 0x4c, 0x41, 0x59, 0x4d,
	0x4f, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x32, 0x10, 0x04,
	0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0x53, 0x32, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0xe6, 0xa8,
	0xa1, 0xe5, 0xbc, 0x8f, 0x12, 0x47, 0x0a, 0x20, 0x50, 0x4c, 0x41, 0x59, 0x4d, 0x4f, 0x44, 0x5f,
	0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x31, 0x5f, 0x42, 0x41, 0x4c, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x05, 0x1a, 0x21, 0xaa, 0xb6, 0x18, 0x1d,
	0x53, 0x31, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xe5, 0xb9,
	0xb3, 0xe8, 0xa1, 0xa1, 0xe6, 0x80, 0xa7, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0x12, 0x45, 0x0a,
	0x21, 0x50, 0x4c, 0x41, 0x59, 0x4d, 0x4f, 0x44, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x43,
	0x41, 0x4c, 0x5f, 0x53, 0x31, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x45,
	0x53, 0x54, 0x10, 0x06, 0x1a, 0x1e, 0xaa, 0xb6, 0x18, 0x1a, 0x53, 0x31, 0xe6, 0xa8, 0xa1, 0xe6,
	0x8b, 0x9f, 0xe6, 0x88, 0x98, 0xe5, 0xb9, 0xb3, 0xe8, 0xa1, 0xa1, 0xe6, 0x80, 0xa7, 0xe6, 0xb5,
	0x8b, 0xe8, 0xaf, 0x95, 0x12, 0x3d, 0x0a, 0x1c, 0x50, 0x4c, 0x41, 0x59, 0x4d, 0x4f, 0x44, 0x5f,
	0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x41, 0x43,
	0x54, 0x49, 0x43, 0x45, 0x10, 0x07, 0x1a, 0x1b, 0xaa, 0xb6, 0x18, 0x17, 0x53, 0x31, 0xe6, 0xa0,
	0x87, 0xe5, 0x87, 0x86, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xe8, 0xae, 0xad, 0xe7, 0xbb, 0x83,
	0xe8, 0x90, 0xa5, 0x12, 0x3b, 0x0a, 0x1d, 0x50, 0x4c, 0x41, 0x59, 0x4d, 0x4f, 0x44, 0x5f, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x41, 0x43,
	0x54, 0x49, 0x43, 0x45, 0x10, 0x08, 0x1a, 0x18, 0xaa, 0xb6, 0x18, 0x14, 0x53, 0x31, 0xe6, 0xa8,
	0xa1, 0xe6, 0x8b, 0x9f, 0xe6, 0x88, 0x98, 0xe8, 0xae, 0xad, 0xe7, 0xbb, 0x83, 0xe8, 0x90, 0xa5,
	0x12, 0x3c, 0x0a, 0x1b, 0x50, 0x4c, 0x41, 0x59, 0x4d, 0x4f, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x4e,
	0x44, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x31, 0x5f, 0x52, 0x45, 0x43, 0x52, 0x55, 0x49, 0x54, 0x10,
	0x09, 0x1a, 0x1b, 0xaa, 0xb6, 0x18, 0x17, 0x53, 0x31, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0xe6,
	0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xe6, 0x96, 0xb0, 0xe6, 0x89, 0x8b, 0xe6, 0x88, 0x98, 0x2a, 0xb4,
	0x02, 0x0a, 0x11, 0x47, 0x41, 0x4d, 0x45, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x41, 0x4d, 0x45, 0x4c, 0x41, 0x4e, 0x47,
	0x55, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00,
	0x12, 0x2d, 0x0a, 0x17, 0x47, 0x41, 0x4d, 0x45, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x7a, 0x68, 0x5f, 0x63, 0x6e, 0x10, 0x01, 0x1a, 0x10, 0xaa,
	0xb6, 0x18, 0x0c, 0xe7, 0xae, 0x80, 0xe4, 0xbd, 0x93, 0xe4, 0xb8, 0xad, 0xe6, 0x96, 0x87, 0x12,
	0x2d, 0x0a, 0x17, 0x47, 0x41, 0x4d, 0x45, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x7a, 0x68, 0x5f, 0x68, 0x6b, 0x10, 0x02, 0x1a, 0x10, 0xaa, 0xb6,
	0x18, 0x0c, 0xe7, 0xb9, 0x81, 0xe4, 0xbd, 0x93, 0xe4, 0xb8, 0xad, 0xe6, 0x96, 0x87, 0x12, 0x2d,
	0x0a, 0x17, 0x47, 0x41, 0x4d, 0x45, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x65, 0x6e, 0x5f, 0x75, 0x73, 0x10, 0x03, 0x1a, 0x10, 0xaa, 0xb6, 0x18,
	0x0c, 0xe7, 0xbe, 0x8e, 0xe5, 0xbc, 0x8f, 0xe8, 0x8b, 0xb1, 0xe8, 0xaf, 0xad, 0x12, 0x27, 0x0a,
	0x17, 0x47, 0x41, 0x4d, 0x45, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x64, 0x65, 0x5f, 0x61, 0x74, 0x10, 0x04, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06,
	0xe5, 0xbe, 0xb7, 0xe8, 0xaf, 0xad, 0x12, 0x27, 0x0a, 0x17, 0x47, 0x41, 0x4d, 0x45, 0x4c, 0x41,
	0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x6a, 0x61, 0x5f, 0x6a,
	0x70, 0x10, 0x05, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe6, 0x97, 0xa5, 0xe8, 0xaf, 0xad, 0x12,
	0x24, 0x0a, 0x14, 0x47, 0x41, 0x4d, 0x45, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x74, 0x68, 0x10, 0x06, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe6,
	0xb3, 0xb0, 0xe8, 0xaf, 0xad, 0x2a, 0xbf, 0x01, 0x0a, 0x18, 0x41, 0x67, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x33, 0x0a, 0x1d, 0x41, 0x67, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x4e,
	0x6f, 0x6e, 0x65, 0x10, 0x00, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x97, 0xa0, 0xe9, 0x9c,
	0x80, 0xe7, 0xa1, 0xae, 0xe8, 0xae, 0xa4, 0x12, 0x35, 0x0a, 0x1f, 0x41, 0x67, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x5f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x65, 0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6,
	0x18, 0x0c, 0xe8, 0xbe, 0x93, 0xe5, 0x85, 0xa5, 0xe7, 0x94, 0x9f, 0xe6, 0x97, 0xa5, 0x12, 0x37,
	0x0a, 0x21, 0x41, 0x67, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x10, 0x02, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x8f, 0xaf, 0xe9, 0x80,
	0x89, 0xe9, 0xa1, 0xb9, 0xe6, 0xa1, 0x86, 0x2a, 0x92, 0x02, 0x0a, 0x1c, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x73, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x3a, 0x0a, 0x24, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x73, 0x41, 0x67, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x4e, 0x6f, 0x6e, 0x65,
	0x10, 0x00, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x97, 0xa0, 0xe9, 0x9c, 0x80, 0xe7, 0xa1,
	0xae, 0xe8, 0xae, 0xa4, 0x12, 0x3a, 0x0a, 0x24, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x41,
	0x67, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x53, 0x65, 0x6c, 0x66, 0x10, 0x01, 0x1a, 0x10,
	0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0x87, 0xaa, 0xe6, 0x88, 0x91, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81,
	0x12, 0x3d, 0x0a, 0x24, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x67, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x5f, 0x43, 0x61, 0x72, 0x64, 0x10, 0x02, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f,
	0xe4, 0xbf, 0xa1, 0xe7, 0x94, 0xa8, 0xe5, 0x8d, 0xa1, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0x12,
	0x3b, 0x0a, 0x25, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x67, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x5f, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x10, 0x03, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c,
	0xe9, 0x82, 0xae, 0xe7, 0xae, 0xb1, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0x2a, 0xc6, 0x05, 0x0a,
	0x0d, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x19,
	0x0a, 0x0f, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41,
	0x4c, 0x10, 0x00, 0x1a, 0x04, 0xaa, 0xb6, 0x18, 0x00, 0x12, 0x23, 0x0a, 0x10, 0x52, 0x45, 0x53,
	0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x45, 0x58, 0x50, 0x43, 0x41, 0x52, 0x44, 0x10, 0x01, 0x1a,
	0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe7, 0xbb, 0x8f, 0xe9, 0xaa, 0x8c, 0xe5, 0x8d, 0xa1, 0x12, 0x28,
	0x0a, 0x15, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45,
	0x4e, 0x43, 0x59, 0x43, 0x41, 0x52, 0x44, 0x10, 0x02, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe8,
	0xb4, 0xa7, 0xe5, 0xb8, 0x81, 0xe5, 0x8d, 0xa1, 0x12, 0x2f, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x5f,
	0x50, 0x52, 0x4f, 0x50, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x10, 0x03, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe9, 0x99, 0x90,
	0xe6, 0x97, 0xb6, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0x12, 0x39, 0x0a, 0x1d, 0x52, 0x45, 0x53,
	0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x53, 0x4b, 0x49, 0x4e, 0x10, 0x04, 0x1a, 0x16, 0xaa, 0xb6,
	0x18, 0x12, 0xe9, 0x99, 0x90, 0xe6, 0x97, 0xb6, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0xe7, 0x9a,
	0xae, 0xe8, 0x82, 0xa4, 0x12, 0x2e, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x50,
	0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x47, 0x49, 0x46, 0x54, 0x5f, 0x42, 0x41, 0x47,
	0x10, 0x05, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0xb8, 0xb8, 0xe8, 0xa7, 0x84, 0xe7, 0xa4,
	0xbc, 0xe5, 0x8c, 0x85, 0x12, 0x30, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x50,
	0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x47, 0x49, 0x46, 0x54, 0x5f, 0x42,
	0x41, 0x47, 0x10, 0x06, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0x87, 0xaa, 0xe9, 0x80, 0x89,
	0xe7, 0xa4, 0xbc, 0xe5, 0x8c, 0x85, 0x12, 0x3b, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52,
	0x4f, 0x50, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x4e, 0x55, 0x4d, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x07, 0x1a, 0x16, 0xaa, 0xb6, 0x18,
	0x12, 0xe7, 0x89, 0xa9, 0xe5, 0x93, 0x81, 0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90, 0xe6, 0xac, 0xa1,
	0xe5, 0x8d, 0xa1, 0x12, 0x3f, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x08, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe7,
	0x89, 0xa9, 0xe5, 0x93, 0x81, 0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90, 0xe6, 0x97, 0xb6, 0xe9, 0x97,
	0xb4, 0xe5, 0x8d, 0xa1, 0x12, 0x2a, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x50,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x09, 0x1a, 0x10,
	0xaa, 0xb6, 0x18, 0x0c, 0xe4, 0xba, 0x92, 0xe5, 0x8a, 0xa8, 0xe9, 0x81, 0x93, 0xe5, 0x85, 0xb7,
	0x12, 0x2d, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x47, 0x55, 0x41,
	0x52, 0x41, 0x4e, 0x54, 0x45, 0x45, 0x44, 0x47, 0x49, 0x46, 0x54, 0x10, 0x0a, 0x1a, 0x10, 0xaa,
	0xb6, 0x18, 0x0c, 0xe4, 0xbf, 0x9d, 0xe5, 0xba, 0x95, 0xe7, 0xa4, 0xbc, 0xe5, 0x8c, 0x85, 0x12,
	0x35, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x54, 0x4f, 0x4b, 0x45,
	0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x45, 0x4e, 0x53, 0x41, 0x54, 0x45, 0x10, 0x0b, 0x1a, 0x16,
	0xaa, 0xb6, 0x18, 0x12, 0xe6, 0x88, 0x98, 0xe4, 0xbb, 0xa4, 0xe8, 0xa1, 0xa5, 0xe5, 0x81, 0xbf,
	0xe7, 0xa4, 0xbc, 0xe5, 0x8c, 0x85, 0x12, 0x3f, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52,
	0x4f, 0x50, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x45, 0x4e, 0x53, 0x41, 0x54, 0x45, 0x10, 0x0c, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe8,
	0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe8, 0xa1, 0xa5, 0xe5, 0x81,
	0xbf, 0xe7, 0xa4, 0xbc, 0xe5, 0x8c, 0x85, 0x12, 0x2c, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x5f, 0x50,
	0x52, 0x4f, 0x50, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x43, 0x41, 0x52, 0x44, 0x10, 0x0d, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe6, 0x94, 0xb9, 0xe5,
	0x90, 0x8d, 0xe5, 0x8d, 0xa1, 0x2a, 0xd0, 0x01, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52,
	0x4f, 0x50, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x53, 0x53, 0x54, 0x59, 0x50, 0x45, 0x12, 0x1d, 0x0a, 0x13, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x1a,
	0x04, 0xaa, 0xb6, 0x18, 0x00, 0x12, 0x23, 0x0a, 0x13, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x52, 0x4f, 0x59, 0x10, 0x01, 0x1a, 0x0a,
	0xaa, 0xb6, 0x18, 0x06, 0xe9, 0x94, 0x80, 0xe6, 0xaf, 0x81, 0x12, 0x2a, 0x0a, 0x14, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x53, 0x41,
	0x4c, 0x45, 0x10, 0x02, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x89, 0x8b, 0xe5, 0x8a, 0xa8,
	0xe5, 0x94, 0xae, 0xe5, 0x8d, 0x96, 0x12, 0x2a, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x53, 0x41, 0x4c, 0x45, 0x10, 0x03,
	0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x94, 0xae, 0xe5,
	0x8d, 0x96, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x04, 0x2a, 0x98, 0x01, 0x0a, 0x17, 0x52, 0x45, 0x53,
	0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x49, 0x4d, 0x49,
	0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x13, 0x4f,
	0x56, 0x45, 0x52, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x47,
	0x45, 0x54, 0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x97, 0xa0, 0xe6, 0xb3, 0x95,
	0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x12, 0x27, 0x0a, 0x11, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x5f, 0x4e, 0x45, 0x57, 0x47, 0x52, 0x49, 0x44, 0x10, 0x02, 0x1a, 0x10, 0xaa,
	0xb6, 0x18, 0x0c, 0xe6, 0x96, 0xb0, 0xe5, 0xbc, 0x80, 0xe6, 0xa0, 0xbc, 0xe5, 0xad, 0x90, 0x12,
	0x12, 0x0a, 0x0e, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x4c, 0x41, 0x53,
	0x54, 0x10, 0x03, 0x2a, 0xda, 0x01, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x50,
	0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12,
	0x1b, 0x0a, 0x11, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x1a, 0x04, 0xaa, 0xb6, 0x18, 0x00, 0x12, 0x26, 0x0a, 0x10,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x41, 0x4c, 0x57, 0x41, 0x59, 0x53,
	0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0xb0, 0xb8, 0xe4, 0xb9, 0x85, 0xe6, 0x9c,
	0x89, 0xe6, 0x95, 0x88, 0x12, 0x2f, 0x0a, 0x13, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x46, 0x49, 0x58, 0x45, 0x44, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x02, 0x1a, 0x16, 0xaa,
	0xb6, 0x18, 0x12, 0xe5, 0x9b, 0xba, 0xe5, 0xae, 0x9a, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe8,
	0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0x12, 0x35, 0x0a, 0x16, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x54, 0x49,
	0x4d, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x46, 0x49, 0x58, 0x45, 0x44, 0x54, 0x49, 0x4d, 0x45, 0x10,
	0x03, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe9, 0x9d, 0x9e, 0xe5, 0x9b, 0xba, 0xe5, 0xae, 0x9a,
	0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0x12, 0x12, 0x0a, 0x0e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x04,
	0x2a, 0x93, 0x01, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x43, 0x41, 0x52, 0x43, 0x45, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x20, 0x0a, 0x13, 0x53, 0x43,
	0x41, 0x52, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x10, 0x00, 0x1a, 0x07, 0xaa, 0xb6, 0x18, 0x03, 0xe4, 0xbd, 0x8e, 0x12, 0x20, 0x0a, 0x13,
	0x53, 0x43, 0x41, 0x52, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4d, 0x45, 0x44,
	0x49, 0x55, 0x4d, 0x10, 0x01, 0x1a, 0x07, 0xaa, 0xb6, 0x18, 0x03, 0xe4, 0xb8, 0xad, 0x12, 0x20,
	0x0a, 0x13, 0x53, 0x43, 0x41, 0x52, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x48,
	0x49, 0x45, 0x47, 0x48, 0x54, 0x10, 0x02, 0x1a, 0x07, 0xaa, 0xb6, 0x18, 0x03, 0xe9, 0xab, 0x98,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x43, 0x41, 0x52, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x2a, 0xa6, 0x01, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x5f, 0x50,
	0x52, 0x4f, 0x50, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x12, 0x19, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x1a, 0x07, 0xaa, 0xb6, 0x18, 0x03, 0xe7, 0x99, 0xbd, 0x12, 0x17, 0x0a, 0x0a, 0x50,
	0x52, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x01, 0x1a, 0x07, 0xaa, 0xb6, 0x18,
	0x03, 0xe7, 0xbb, 0xbf, 0x12, 0x16, 0x0a, 0x09, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x42, 0x4c, 0x55,
	0x45, 0x10, 0x02, 0x1a, 0x07, 0xaa, 0xb6, 0x18, 0x03, 0xe8, 0x93, 0x9d, 0x12, 0x18, 0x0a, 0x0b,
	0x50, 0x52, 0x4f, 0x50, 0x5f, 0x50, 0x55, 0x52, 0x50, 0x4c, 0x45, 0x10, 0x03, 0x1a, 0x07, 0xaa,
	0xb6, 0x18, 0x03, 0xe7, 0xb4, 0xab, 0x12, 0x18, 0x0a, 0x0b, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x4f,
	0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x04, 0x1a, 0x07, 0xaa, 0xb6, 0x18, 0x03, 0xe6, 0xa9, 0x99,
	0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x05, 0x2a,
	0xd3, 0x01, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x48, 0x45,
	0x52, 0x4f, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12,
	0x18, 0x0a, 0x14, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x12, 0x48, 0x45, 0x52,
	0x4f, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x10,
	0x01, 0x1a, 0x05, 0xaa, 0xb6, 0x18, 0x01, 0x31, 0x12, 0x1d, 0x0a, 0x12, 0x48, 0x45, 0x52, 0x4f,
	0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x02,
	0x1a, 0x05, 0xaa, 0xb6, 0x18, 0x01, 0x32, 0x12, 0x1c, 0x0a, 0x11, 0x48, 0x45, 0x52, 0x4f, 0x5f,
	0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x03, 0x1a, 0x05,
	0xaa, 0xb6, 0x18, 0x01, 0x33, 0x12, 0x1e, 0x0a, 0x13, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x51, 0x55,
	0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x55, 0x52, 0x50, 0x4c, 0x45, 0x10, 0x04, 0x1a, 0x05,
	0xaa, 0xb6, 0x18, 0x01, 0x34, 0x12, 0x1e, 0x0a, 0x13, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x51, 0x55,
	0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x05, 0x1a, 0x05,
	0xaa, 0xb6, 0x18, 0x01, 0x35, 0x2a, 0x9b, 0x01, 0x0a, 0x11, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52,
	0x4f, 0x50, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x26, 0x0a, 0x10, 0x55,
	0x53, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x55, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x00, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe4, 0xb8, 0x8d, 0xe5, 0x8f, 0xaf, 0xe4, 0xbd, 0xbf,
	0xe7, 0x94, 0xa8, 0x12, 0x25, 0x0a, 0x0f, 0x55, 0x53, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x41, 0x43, 0x4b, 0x55, 0x53, 0x45, 0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0x83,
	0x8c, 0xe5, 0x8c, 0x85, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0x12, 0x25, 0x0a, 0x0f, 0x55, 0x53,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x55, 0x53, 0x45, 0x10, 0x02, 0x1a,
	0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94,
	0xa8, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x53, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x53,
	0x54, 0x10, 0x03, 0x2a, 0x69, 0x0a, 0x07, 0x45, 0x41, 0x49, 0x54, 0x59, 0x50, 0x45, 0x12, 0x12,
	0x0a, 0x0e, 0x41, 0x49, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x23, 0x0a, 0x10, 0x41, 0x49, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c, 0x49,
	0x45, 0x4e, 0x54, 0x5f, 0x41, 0x49, 0x10, 0x01, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe8, 0xa1,
	0x8c, 0xe4, 0xb8, 0xba, 0xe6, 0xa0, 0x91, 0x12, 0x1f, 0x0a, 0x10, 0x41, 0x49, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x41, 0x49, 0x10, 0x02, 0x1a, 0x09, 0xaa,
	0xb6, 0x18, 0x05, 0x41, 0x49, 0x4c, 0x61, 0x62, 0x1a, 0x04, 0x88, 0xf9, 0x2b, 0x01, 0x2a, 0x7d,
	0x0a, 0x10, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x49, 0x4d, 0x47, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4d, 0x47, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x5f, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x0c, 0x49,
	0x4d, 0x47, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x10, 0x01, 0x1a, 0x13, 0xaa,
	0xb6, 0x18, 0x0f, 0xe6, 0x8e, 0x92, 0xe4, 0xbd, 0x8d, 0xe5, 0xa4, 0xb4, 0xe5, 0x83, 0x8f, 0xe6,
	0xa1, 0x86, 0x12, 0x29, 0x0a, 0x10, 0x49, 0x4d, 0x47, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x02, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe6, 0xb4,
	0xbb, 0xe5, 0x8a, 0xa8, 0xe5, 0xa4, 0xb4, 0xe5, 0x83, 0x8f, 0xe6, 0xa1, 0x86, 0x2a, 0x77, 0x0a,
	0x0d, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x18,
	0x0a, 0x14, 0x48, 0x45, 0x41, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x5f, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x5f, 0x5f, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x0d, 0x48, 0x45, 0x41, 0x44,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18,
	0x0c, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0xe5, 0xa4, 0xb4, 0xe5, 0x83, 0x8f, 0x12, 0x27, 0x0a,
	0x11, 0x48, 0x45, 0x41, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f,
	0x52, 0x4d, 0x10, 0x02, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0,
	0xe5, 0xa4, 0xb4, 0xe5, 0x83, 0x8f, 0x2a, 0x9a, 0x01, 0x0a, 0x12, 0x45, 0x42, 0x47, 0x4d, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x17, 0x45, 0x42, 0x47, 0x4d, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x37, 0x0a, 0x1f, 0x45, 0x42,
	0x47, 0x4d, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x55, 0x49, 0x53, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x01, 0x1a,
	0x12, 0xaa, 0xb6, 0x18, 0x0e, 0x55, 0x49, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe5, 0x88, 0x87,
	0xe6, 0x8d, 0xa2, 0x12, 0x2e, 0x0a, 0x1b, 0x45, 0x42, 0x47, 0x4d, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x47, 0x4d, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x10, 0x02, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0x42, 0x47, 0x4d, 0xe4, 0xba, 0x8b,
	0xe4, 0xbb, 0xb6, 0x2a, 0xea, 0x01, 0x0a, 0x13, 0x45, 0x42, 0x47, 0x4d, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x45,
	0x42, 0x47, 0x4d, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x42, 0x0a, 0x21, 0x45, 0x42, 0x47,
	0x4d, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x01,
	0x1a, 0x1b, 0xaa, 0xb6, 0x18, 0x17, 0x42, 0x47, 0x4d, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0x5f,
	0xe5, 0x8d, 0x95, 0xe5, 0xb1, 0x80, 0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a,
	0x1a, 0x45, 0x42, 0x47, 0x4d, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x10, 0x02, 0x1a, 0x14, 0xaa,
	0xb6, 0x18, 0x10, 0x42, 0x47, 0x4d, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0x5f, 0xe7, 0xbb, 0x93,
	0xe7, 0xae, 0x97, 0x12, 0x3b, 0x0a, 0x1e, 0x45, 0x42, 0x47, 0x4d, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x6f, 0x72, 0x64, 0x43,
	0x68, 0x6f, 0x6f, 0x73, 0x65, 0x10, 0x03, 0x1a, 0x17, 0xaa, 0xb6, 0x18, 0x13, 0x42, 0x47, 0x4d,
	0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0x5f, 0xe9, 0x80, 0x89, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb,
	0x2a, 0x89, 0x01, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x43, 0x59,
	0x43, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x5f,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x5f, 0x10, 0x00, 0x12, 0x25, 0x0a,
	0x12, 0x52, 0x45, 0x53, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f,
	0x44, 0x41, 0x59, 0x10, 0x01, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe6, 0x97, 0xa5, 0xe9, 0x99,
	0x90, 0xe5, 0x88, 0xb6, 0x12, 0x26, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x5f, 0x4c, 0x49, 0x4d, 0x49,
	0x54, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x02, 0x1a, 0x0d, 0xaa,
	0xb6, 0x18, 0x09, 0xe5, 0x91, 0xa8, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x2a, 0x8b, 0x01, 0x0a,
	0x1d, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36,
	0x0a, 0x26, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06,
	0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0x12, 0x32, 0x0a, 0x22, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x6f, 0x72, 0x64, 0x10, 0x01, 0x1a, 0x0a,
	0xaa, 0xb6, 0x18, 0x06, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0x2a, 0xab, 0x01, 0x0a, 0x18, 0x43,
	0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e,
	0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x54, 0x4f, 0x4d, 0x5f,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x0e, 0x47, 0x54, 0x4f,
	0x4d, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x6f, 0x6d, 0x10, 0x01, 0x1a, 0x10, 0xaa,
	0xb6, 0x18, 0x0c, 0xe5, 0x8c, 0xb9, 0xe9, 0x85, 0x8d, 0xe6, 0x88, 0xbf, 0xe9, 0x97, 0xb4, 0x12,
	0x23, 0x0a, 0x0d, 0x47, 0x54, 0x4f, 0x4d, 0x5f, 0x41, 0x72, 0x65, 0x61, 0x52, 0x6f, 0x6f, 0x6d,
	0x10, 0x02, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0xe6, 0x88,
	0xbf, 0xe9, 0x97, 0xb4, 0x12, 0x24, 0x0a, 0x0e, 0x47, 0x54, 0x4f, 0x4d, 0x5f, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x52, 0x6f, 0x6f, 0x6d, 0x10, 0x03, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x8d,
	0x95, 0xe6, 0x9c, 0xba, 0xe6, 0x88, 0xbf, 0xe9, 0x97, 0xb4, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x54,
	0x4f, 0x4d, 0x5f, 0x4d, 0x61, 0x78, 0x10, 0x04, 0x2a, 0xbb, 0x01, 0x0a, 0x16, 0x43, 0x4f, 0x4d,
	0x5f, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x53, 0x50, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x10,
	0x00, 0x12, 0x2c, 0x0a, 0x10, 0x43, 0x53, 0x50, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x45, 0x54,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe8, 0xb5, 0x9b,
	0xe5, 0xad, 0xa3, 0xe7, 0xab, 0x9e, 0xe6, 0x8a, 0x80, 0xe7, 0x8e, 0xa9, 0xe5, 0xae, 0xb6, 0x12,
	0x27, 0x0a, 0x0b, 0x43, 0x53, 0x50, 0x54, 0x5f, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x10, 0x02,
	0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe7, 0xa4, 0xbe, 0xe4,
	0xba, 0xa4, 0xe7, 0x8e, 0xa9, 0xe5, 0xae, 0xb6, 0x12, 0x2e, 0x0a, 0x0c, 0x43, 0x53, 0x50, 0x54,
	0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x10, 0x03, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18,
	0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe6, 0x94, 0xb6, 0xe9, 0x9b, 0x86, 0xe6, 0xb6, 0x88, 0xe8,
	0xb4, 0xb9, 0xe7, 0x8e, 0xa9, 0xe5, 0xae, 0xb6, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x53, 0x50, 0x54,
	0x5f, 0x4d, 0x41, 0x58, 0x10, 0x04, 0x2a, 0x86, 0x07, 0x0a, 0x1b, 0x43, 0x4f, 0x4d, 0x5f, 0x53,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e,
	0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x53, 0x50, 0x43, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x3d, 0x0a, 0x15, 0x43, 0x53, 0x50, 0x43,
	0x5f, 0x55, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x46, 0x45, 0x54, 0x54, 0x45,
	0x52, 0x10, 0x01, 0x1a, 0x22, 0xaa, 0xb6, 0x18, 0x1e, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe4,
	0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe5, 0xbd, 0xa9, 0xe8, 0x89, 0xb2, 0xe7, 0xbb, 0x84, 0xe5, 0x90,
	0x88, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12, 0x31, 0x0a, 0x0f, 0x43, 0x53, 0x50, 0x43, 0x5f,
	0x55, 0x53, 0x45, 0x5f, 0x46, 0x45, 0x54, 0x54, 0x45, 0x52, 0x10, 0x02, 0x1a, 0x1c, 0xaa, 0xb6,
	0x18, 0x18, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7, 0xbb,
	0x84, 0xe5, 0x90, 0x88, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12, 0x30, 0x0a, 0x0e, 0x43, 0x53,
	0x50, 0x43, 0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x4f, 0x50, 0x31, 0x10, 0x03, 0x1a, 0x1c,
	0xaa, 0xb6, 0x18, 0x18, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb,
	0xe5, 0x90, 0x83, 0xe9, 0xb8, 0xa1, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12, 0x30, 0x0a, 0x0e,
	0x43, 0x53, 0x50, 0x43, 0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x4f, 0x50, 0x34, 0x10, 0x04,
	0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe9, 0xa2, 0x86, 0xe4,
	0xb8, 0xbb, 0xe5, 0x89, 0x8d, 0xe5, 0x9b, 0x9b, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12, 0x3b,
	0x0a, 0x19, 0x43, 0x53, 0x50, 0x43, 0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x46, 0x49, 0x52, 0x53,
	0x54, 0x5f, 0x54, 0x4f, 0x50, 0x31, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x05, 0x1a, 0x1c, 0xaa,
	0xb6, 0x18, 0x18, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0xe9,
	0xa6, 0x96, 0xe6, 0xac, 0xa1, 0xe5, 0x90, 0x83, 0xe9, 0xb8, 0xa1, 0x12, 0x3b, 0x0a, 0x19, 0x43,
	0x53, 0x50, 0x43, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x52,
	0x41, 0x4e, 0x4b, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x06, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18,
	0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe9, 0xa6, 0x96, 0xe6, 0xac, 0xa1, 0xe7, 0x8e, 0x8b, 0xe8,
	0x80, 0x85, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0x12, 0x40, 0x0a, 0x1b, 0x43, 0x53, 0x50, 0x43,
	0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x4f, 0x55, 0x53,
	0x4c, 0x59, 0x5f, 0x54, 0x4f, 0x50, 0x34, 0x10, 0x07, 0x1a, 0x1f, 0xaa, 0xb6, 0x18, 0x1b, 0xe8,
	0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe6, 0x8e, 0x92, 0xe4, 0xbd, 0x8d, 0xe8, 0xb5, 0x9b, 0xe8, 0xbf,
	0x9e, 0xe7, 0xbb, 0xad, 0xe5, 0x89, 0x8d, 0xe5, 0x9b, 0x9b, 0x12, 0x2c, 0x0a, 0x10, 0x43, 0x53,
	0x50, 0x43, 0x5f, 0x54, 0x48, 0x55, 0x4d, 0x42, 0x55, 0x50, 0x5f, 0x43, 0x4e, 0x54, 0x10, 0x08,
	0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe7, 0x82, 0xb9, 0xe8,
	0xb5, 0x9e, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12, 0x35, 0x0a, 0x13, 0x43, 0x53, 0x50, 0x43,
	0x5f, 0x41, 0x44, 0x44, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x43, 0x4e, 0x54, 0x10,
	0x09, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe6, 0xb7, 0xbb,
	0xe5, 0x8a, 0xa0, 0xe5, 0xa5, 0xbd, 0xe5, 0x8f, 0x8b, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12,
	0x38, 0x0a, 0x16, 0x43, 0x53, 0x50, 0x43, 0x5f, 0x4f, 0x57, 0x4e, 0x5f, 0x4c, 0x4f, 0x52, 0x44,
	0x5f, 0x53, 0x4b, 0x49, 0x4e, 0x5f, 0x43, 0x4e, 0x54, 0x10, 0x0a, 0x1a, 0x1c, 0xaa, 0xb6, 0x18,
	0x18, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe8, 0x8e, 0xb7, 0xe5, 0xbe, 0x97, 0xe7, 0x9a, 0xae,
	0xe8, 0x82, 0xa4, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x12, 0x35, 0x0a, 0x16, 0x43, 0x53, 0x50,
	0x43, 0x5f, 0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x42, 0x4f, 0x52, 0x44, 0x5f,
	0x43, 0x4e, 0x54, 0x10, 0x0b, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe8, 0xb5, 0x9b, 0xe5, 0xad,
	0xa3, 0xe6, 0x94, 0xb6, 0xe9, 0x9b, 0x86, 0xe6, 0xa3, 0x8b, 0xe7, 0x9b, 0x98, 0xe6, 0x95, 0xb0,
	0x12, 0x33, 0x0a, 0x14, 0x43, 0x53, 0x50, 0x43, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x50, 0x4c,
	0x41, 0x59, 0x45, 0x52, 0x5f, 0x43, 0x4e, 0x54, 0x10, 0x0c, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15,
	0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe7, 0xbb, 0x84, 0xe9, 0x98, 0x9f, 0xe7, 0x8e, 0xa9, 0xe5,
	0xae, 0xb6, 0xe6, 0x95, 0xb0, 0x12, 0x50, 0x0a, 0x16, 0x43, 0x53, 0x50, 0x43, 0x5f, 0x42, 0x45,
	0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x43, 0x4e, 0x54, 0x10,
	0x0d, 0x1a, 0x34, 0xaa, 0xb6, 0x18, 0x30, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe8, 0xa2, 0xab,
	0xe5, 0x85, 0xb6, 0xe4, 0xbb, 0x96, 0xe7, 0x8e, 0xa9, 0xe5, 0xae, 0xb6, 0xe7, 0x82, 0xb9, 0xe5,
	0x87, 0xbb, 0xe5, 0x8f, 0x91, 0xe7, 0x8e, 0xb0, 0xe5, 0xbc, 0xba, 0xe6, 0x95, 0x8c, 0xe7, 0x9a,
	0x84, 0xe5, 0x9c, 0xba, 0xe6, 0xac, 0xa1, 0x12, 0x39, 0x0a, 0x14, 0x43, 0x53, 0x50, 0x43, 0x5f,
	0x52, 0x45, 0x41, 0x43, 0x48, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10,
	0x0e, 0x1a, 0x1f, 0xaa, 0xb6, 0x18, 0x1b, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe6, 0xbb, 0xa1,
	0xe7, 0xba, 0xa7, 0xe6, 0x88, 0x98, 0xe4, 0xbb, 0xa4, 0xe7, 0x9a, 0x84, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0x12, 0x2b, 0x0a, 0x0f, 0x43, 0x53, 0x50, 0x43, 0x5f, 0x42, 0x41, 0x44, 0x47, 0x45,
	0x53, 0x5f, 0x43, 0x4e, 0x54, 0x10, 0x0f, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe8, 0xb5, 0x9b,
	0xe5, 0xad, 0xa3, 0xe5, 0xbe, 0xbd, 0xe7, 0xab, 0xa0, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x2a,
	0x90, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x4d, 0x61, 0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1b, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x4d, 0x61, 0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x5f,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x5f, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x11,
	0x52, 0x65, 0x73, 0x4d, 0x61, 0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe9,
	0x82, 0xae, 0xe4, 0xbb, 0xb6, 0x12, 0x27, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x4d, 0x61, 0x69, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x10, 0x02, 0x1a, 0x10, 0xaa, 0xb6,
	0x18, 0x0c, 0xe5, 0xa5, 0xbd, 0xe5, 0x8f, 0x8b, 0xe9, 0x82, 0xae, 0xe4, 0xbb, 0xb6, 0x12, 0x12,
	0x0a, 0x0e, 0x52, 0x65, 0x73, 0x4d, 0x61, 0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x78,
	0x10, 0x03, 0x2a, 0xf1, 0x01, 0x0a, 0x11, 0x54, 0x41, 0x4c, 0x4b, 0x5f, 0x4d, 0x53, 0x47, 0x5f,
	0x55, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x53, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x10, 0x55,
	0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x10,
	0x01, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0xb1, 0x80, 0xe5, 0x86, 0x85, 0x12, 0x38, 0x0a,
	0x1c, 0x55, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x43,
	0x48, 0x4f, 0x4f, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x10, 0x02, 0x1a,
	0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe9, 0x80, 0x89, 0xe6, 0x8b,
	0xa9, 0xe7, 0xa1, 0xae, 0xe8, 0xae, 0xa4, 0x12, 0x3f, 0x0a, 0x20, 0x55, 0x53, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x43, 0x48, 0x4f, 0x4f, 0x53, 0x45, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x10, 0x03, 0x1a, 0x19, 0xaa,
	0xb6, 0x18, 0x15, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe9, 0x80, 0x89, 0xe6, 0x8b, 0xa9, 0xe6,
	0x9c, 0xaa, 0xe7, 0xa1, 0xae, 0xe8, 0xae, 0xa4, 0x12, 0x26, 0x0a, 0x10, 0x55, 0x53, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x1a, 0x10,
	0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0xb1, 0x80, 0xe5, 0x86, 0x85, 0xe6, 0x8b, 0x8d, 0xe5, 0x8d, 0x96,
	0x1a, 0x04, 0x88, 0xf9, 0x2b, 0x01, 0x2a, 0xa1, 0x02, 0x0a, 0x09, 0x54, 0x41, 0x4c, 0x4b, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x41, 0x4c, 0x4b, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x0f, 0x54, 0x41, 0x4c, 0x4b,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x10, 0x01, 0x1a, 0x0a, 0xaa,
	0xb6, 0x18, 0x06, 0xe4, 0xb8, 0x96, 0xe7, 0x95, 0x8c, 0x12, 0x1e, 0x0a, 0x0e, 0x54, 0x41, 0x4c,
	0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x69, 0x74, 0x79, 0x10, 0x02, 0x1a, 0x0a, 0xaa,
	0xb6, 0x18, 0x06, 0xe5, 0x9f, 0x8e, 0xe5, 0xb8, 0x82, 0x12, 0x21, 0x0a, 0x11, 0x54, 0x41, 0x4c,
	0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x10, 0x03,
	0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe7, 0xa7, 0x81, 0xe8, 0x81, 0x8a, 0x12, 0x21, 0x0a, 0x11,
	0x54, 0x41, 0x4c, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x65, 0x63, 0x72, 0x75, 0x69,
	0x74, 0x10, 0x04, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe6, 0x8b, 0x9b, 0xe5, 0x8b, 0x9f, 0x12,
	0x1e, 0x0a, 0x0e, 0x54, 0x41, 0x4c, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x6f, 0x6f,
	0x6d, 0x10, 0x05, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe6, 0x88, 0xbf, 0xe9, 0x97, 0xb4, 0x12,
	0x2a, 0x0a, 0x14, 0x54, 0x41, 0x4c, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x6f, 0x6f,
	0x6d, 0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x10, 0x06, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5,
	0xb1, 0x80, 0xe5, 0x86, 0x85, 0xe6, 0x88, 0xbf, 0xe9, 0x97, 0xb4, 0x12, 0x2d, 0x0a, 0x17, 0x54,
	0x41, 0x4c, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x10, 0x07, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0xb1,
	0x80, 0xe5, 0x86, 0x85, 0xe7, 0xa7, 0x81, 0xe8, 0x81, 0x8a, 0x2a, 0x5c, 0x0a, 0x10, 0x52, 0x45,
	0x53, 0x5f, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x23,
	0x0a, 0x0d, 0x4c, 0x4f, 0x43, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x49, 0x44, 0x45, 0x10,
	0x00, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe7, 0x9b, 0xb4, 0xe6, 0x8e, 0xa5, 0xe9, 0x9a, 0x90,
	0xe8, 0x97, 0x8f, 0x12, 0x23, 0x0a, 0x0d, 0x4c, 0x4f, 0x43, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x47, 0x52, 0x45, 0x59, 0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x8a, 0xa0, 0xe9,
	0x94, 0x81, 0xe7, 0xbd, 0xae, 0xe7, 0x81, 0xb0, 0x2a, 0x9f, 0x01, 0x0a, 0x16, 0x43, 0x4f, 0x4d,
	0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x12, 0x32, 0x0a, 0x16, 0x43, 0x4f, 0x4d, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e,
	0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x1a,
	0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe9, 0x9d, 0x9e, 0xe6, 0xb3, 0x95, 0xe5, 0x88, 0xb7, 0xe6, 0x96,
	0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x12, 0x27, 0x0a, 0x17, 0x43, 0x4f, 0x4d, 0x5f, 0x54,
	0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x44, 0x41, 0x49,
	0x4c, 0x59, 0x10, 0x01, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe6, 0xaf, 0x8f, 0xe6, 0x97, 0xa5,
	0x12, 0x28, 0x0a, 0x18, 0x43, 0x4f, 0x4d, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x52, 0x45,
	0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x4c, 0x59, 0x10, 0x02, 0x1a, 0x0a,
	0xaa, 0xb6, 0x18, 0x06, 0xe6, 0xaf, 0x8f, 0xe5, 0x91, 0xa8, 0x2a, 0x6c, 0x0a, 0x0f, 0x43, 0x4f,
	0x4d, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x30, 0x0a,
	0x14, 0x43, 0x4f, 0x4d, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe9, 0x9d, 0x9e,
	0xe6, 0xb3, 0x95, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x12,
	0x27, 0x0a, 0x14, 0x43, 0x4f, 0x4d, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x10, 0x01, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe6,
	0x8e, 0x92, 0xe4, 0xbd, 0x8d, 0xe8, 0xb5, 0x9b, 0x2a, 0xa6, 0x01, 0x0a, 0x15, 0x53, 0x43, 0x4f,
	0x52, 0x45, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x12, 0x28, 0x0a, 0x15, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x52, 0x52,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x1a, 0x0d, 0xaa,
	0xb6, 0x18, 0x09, 0xe6, 0x9c, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0x12, 0x30, 0x0a, 0x1a,
	0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6,
	0x18, 0x0c, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xe5, 0x90, 0x8d, 0xe6, 0xac, 0xa1, 0x12, 0x31,
	0x0a, 0x1b, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x02, 0x1a,
	0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0xaf, 0x8f, 0xe6, 0x97, 0xa5, 0xe9, 0xa6, 0x96, 0xe5, 0x9c,
	0xba, 0x2a, 0xab, 0x04, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x43,
	0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x4d, 0x0a, 0x19, 0x49, 0x4e, 0x56,
	0x49, 0x54, 0x45, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x00, 0x1a, 0x2e, 0xaa, 0xb6, 0x18, 0x2a, 0xe6, 0x88,
	0xbf, 0xe9, 0x97, 0xb4, 0xe9, 0x82, 0x80, 0xe8, 0xaf, 0xb7, 0xe5, 0xa5, 0xbd, 0xe5, 0x8f, 0x8b,
	0xe6, 0xb0, 0x94, 0xe6, 0xb3, 0xa1, 0xe8, 0xbd, 0xae, 0xe6, 0x9b, 0xbf, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0xe7, 0xa7, 0x92, 0xe6, 0x95, 0xb0, 0x12, 0x43, 0x0a, 0x12, 0x42, 0x55, 0x42, 0x42,
	0x4c, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x01,
	0x1a, 0x2b, 0xaa, 0xb6, 0x18, 0x27, 0xe6, 0xb0, 0x94, 0xe6, 0xb3, 0xa1, 0xe6, 0xb6, 0x88, 0xe5,
	0xa4, 0xb1, 0xe5, 0x90, 0x8e, 0xe5, 0x86, 0x8d, 0xe6, 0xac, 0xa1, 0xe5, 0x87, 0xba, 0xe7, 0x8e,
	0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe7, 0xa7, 0x92, 0xe6, 0x95, 0xb0, 0x12, 0x38, 0x0a,
	0x10, 0x42, 0x55, 0x42, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x10, 0x02, 0x1a, 0x22, 0xaa, 0xb6, 0x18, 0x1e, 0xe6, 0xb0, 0x94, 0xe6, 0xb3, 0xa1, 0xe6,
	0xaf, 0x8f, 0xe6, 0xac, 0xa1, 0xe5, 0x87, 0xba, 0xe7, 0x8e, 0xb0, 0xe7, 0x9a, 0x84, 0xe6, 0x80,
	0xbb, 0xe7, 0xa7, 0x92, 0xe6, 0x95, 0xb0, 0x12, 0x4f, 0x0a, 0x21, 0x4c, 0x4f, 0x52, 0x44, 0x5f,
	0x43, 0x48, 0x4f, 0x4f, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x48,
	0x41, 0x54, 0x5f, 0x43, 0x4f, 0x4f, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x03, 0x1a, 0x28,
	0xaa, 0xb6, 0x18, 0x24, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe9, 0x80, 0x89, 0xe6, 0x8b, 0xa9,
	0xe8, 0x81, 0x8a, 0xe5, 0xa4, 0xa9, 0xe5, 0x8f, 0x91, 0xe9, 0x80, 0x81, 0xe6, 0x88, 0x98, 0xe7,
	0xbb, 0xa9, 0xe5, 0x86, 0xb7, 0xe5, 0x8d, 0xb4, 0x12, 0x53, 0x0a, 0x1f, 0x4c, 0x4f, 0x52, 0x44,
	0x5f, 0x43, 0x48, 0x4f, 0x4f, 0x53, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x43, 0x48, 0x41,
	0x54, 0x5f, 0x43, 0x4f, 0x4f, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x04, 0x1a, 0x2e, 0xaa,
	0xb6, 0x18, 0x2a, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe9, 0x80, 0x89, 0xe6, 0x8b, 0xa9, 0xe8,
	0x81, 0x8a, 0xe5, 0xa4, 0xa9, 0xe5, 0x8f, 0x91, 0xe9, 0x80, 0x81, 0xe8, 0xaf, 0xad, 0xe5, 0x8f,
	0xa5, 0xe8, 0xa1, 0xa8, 0xe6, 0x83, 0x85, 0xe5, 0x86, 0xb7, 0xe5, 0x8d, 0xb4, 0x12, 0x4f, 0x0a,
	0x21, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x43, 0x48, 0x4f, 0x4f, 0x53, 0x45, 0x5f, 0x43, 0x48, 0x41,
	0x54, 0x5f, 0x42, 0x55, 0x42, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0x05, 0x1a, 0x28, 0xaa, 0xb6, 0x18, 0x24, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b,
	0xe9, 0x80, 0x89, 0xe6, 0x8b, 0xa9, 0xe8, 0x81, 0x8a, 0xe5, 0xa4, 0xa9, 0xe6, 0xb0, 0x94, 0xe6,
	0xb3, 0xa1, 0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x95, 0xbf, 0x12, 0x4f,
	0x0a, 0x27, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x43, 0x48, 0x4f, 0x4f, 0x53, 0x45, 0x5f, 0x43, 0x48,
	0x41, 0x54, 0x5f, 0x53, 0x54, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f,
	0x43, 0x4f, 0x4f, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x06, 0x1a, 0x22, 0xaa, 0xb6, 0x18,
	0x1e, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe9, 0x80, 0x89, 0xe6, 0x8b, 0xa9, 0xe5, 0x8f, 0x91,
	0xe7, 0x8e, 0xb0, 0xe5, 0xbc, 0xba, 0xe6, 0x95, 0x8c, 0xe5, 0x86, 0xb7, 0xe5, 0x8d, 0xb4, 0x2a,
	0xa4, 0x07, 0x0a, 0x09, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x10, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x65, 0x72, 0x6f, 0x10, 0x01, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe8, 0x8b, 0xb1, 0xe9,
	0x9b, 0x84, 0x12, 0x1d, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4c,
	0x6f, 0x72, 0x64, 0x10, 0x02, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe9, 0xa2, 0x86, 0xe4, 0xb8,
	0xbb, 0x12, 0x1f, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x75,
	0x6c, 0x6c, 0x65, 0x74, 0x10, 0x03, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0xad, 0x90, 0xe5,
	0xbc, 0xb9, 0x12, 0x2b, 0x0a, 0x15, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x10, 0x04, 0x1a, 0x10, 0xaa,
	0xb6, 0x18, 0x0c, 0xe4, 0xba, 0xa4, 0xe4, 0xba, 0x92, 0xe7, 0x89, 0xa9, 0xe4, 0xbb, 0xb6, 0x12,
	0x22, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x53, 0x75, 0x6d, 0x6d,
	0x6f, 0x6e, 0x10, 0x05, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe5, 0x8f, 0xac, 0xe5, 0x94, 0xa4,
	0xe7, 0x89, 0xa9, 0x12, 0x20, 0x0a, 0x10, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x10, 0x06, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe9,
	0x87, 0x8e, 0xe6, 0x80, 0xaa, 0x12, 0x2a, 0x0a, 0x14, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x4d, 0x69, 0x78, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x10, 0x07, 0x1a,
	0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0xb7, 0xb7, 0xe5, 0x90, 0x88, 0xe5, 0xae, 0x9d, 0xe7, 0xae,
	0xb1, 0x12, 0x2b, 0x0a, 0x15, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x10, 0x08, 0x1a, 0x10, 0xaa, 0xb6,
	0x18, 0x0c, 0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81, 0xe5, 0xae, 0x9d, 0xe7, 0xae, 0xb1, 0x12, 0x2d,
	0x0a, 0x17, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x45, 0x78, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x76, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x10, 0x09, 0x1a, 0x10, 0xaa, 0xb6, 0x18,
	0x0c, 0xe4, 0xb8, 0x93, 0xe5, 0xb1, 0x9e, 0xe6, 0xad, 0xa6, 0xe5, 0x99, 0xa8, 0x12, 0x30, 0x0a,
	0x1a, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x76, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x10, 0x0a, 0x1a, 0x10, 0xaa,
	0xb6, 0x18, 0x0c, 0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a, 0xe4, 0xb8, 0x93, 0xe5, 0xb1, 0x9e, 0x12,
	0x24, 0x0a, 0x14, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x67, 0x69,
	0x63, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x10, 0x0b, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe6,
	0xb3, 0x95, 0xe9, 0x98, 0xb5, 0x12, 0x2d, 0x0a, 0x17, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x72, 0x6f,
	0x10, 0x0c, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe9, 0x99, 0x84, 0xe5, 0xb1, 0x9e, 0xe8, 0x8b,
	0xb1, 0xe9, 0x9b, 0x84, 0x12, 0x26, 0x0a, 0x12, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x31, 0x10, 0x0d, 0x1a, 0x0e, 0xaa, 0xb6,
	0x18, 0x0a, 0xe5, 0xbb, 0xba, 0xe7, 0xad, 0x91, 0xe7, 0x89, 0xa9, 0x31, 0x12, 0x26, 0x0a, 0x12,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x32, 0x10, 0x0e, 0x1a, 0x0e, 0xaa, 0xb6, 0x18, 0x0a, 0xe5, 0xbb, 0xba, 0xe7, 0xad, 0x91,
	0xe7, 0x89, 0xa9, 0x32, 0x12, 0x3a, 0x0a, 0x1e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x10, 0x0f, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0xa3,
	0x8b, 0xe6, 0x89, 0x8b, 0xe4, 0xb8, 0x93, 0xe5, 0xb1, 0x9e, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84,
	0x12, 0x38, 0x0a, 0x1c, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x6f, 0x72,
	0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x10, 0x10, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe4, 0xb8,
	0x93, 0xe5, 0xb1, 0x9e, 0xe5, 0xae, 0x9d, 0xe7, 0xae, 0xb1, 0x12, 0x2b, 0x0a, 0x15, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x54, 0x72, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x10, 0x11, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b,
	0x84, 0xe5, 0xae, 0x9d, 0xe7, 0xae, 0xb1, 0x12, 0x2f, 0x0a, 0x19, 0x41, 0x63, 0x74, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x72, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x10, 0x12, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe4, 0xbb, 0xa4, 0xe7,
	0x89, 0x8c, 0xe5, 0xae, 0x9d, 0xe7, 0xae, 0xb1, 0x12, 0x2c, 0x0a, 0x16, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x10, 0x13, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87,
	0xe5, 0xae, 0x9d, 0xe7, 0xae, 0xb1, 0x12, 0x2e, 0x0a, 0x18, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x4d, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x10, 0x14, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe7, 0x99, 0xbe, 0xe4, 0xba, 0xba,
	0xe5, 0xae, 0x9d, 0xe7, 0xae, 0xb1, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x4d, 0x61, 0x78, 0x10, 0x15, 0x1a, 0x0c, 0x90, 0xf9, 0x2b, 0x01, 0x88, 0xf9,
	0x2b, 0x01, 0xa8, 0xf9, 0x2b, 0x01, 0x2a, 0x8a, 0x01, 0x0a, 0x08, 0x53, 0x6f, 0x72, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x49, 0x41, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x2d, 0x0a, 0x17, 0x53, 0x6f, 0x72, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x65, 0x66, 0x74, 0x54, 0x6f, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe4, 0xbb, 0x8e, 0xe5, 0xb7, 0xa6,
	0xe5, 0xbe, 0x80, 0xe5, 0x8f, 0xb3, 0x12, 0x2d, 0x0a, 0x17, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x69, 0x67, 0x68, 0x74, 0x54, 0x6f, 0x4c, 0x65, 0x66,
	0x74, 0x10, 0x02, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe4, 0xbb, 0x8e, 0xe5, 0x8f, 0xb3, 0xe5,
	0xbe, 0x80, 0xe5, 0xb7, 0xa6, 0x1a, 0x0c, 0x90, 0xf9, 0x2b, 0x01, 0x88, 0xf9, 0x2b, 0x01, 0xa8,
	0xf9, 0x2b, 0x01, 0x2a, 0xe6, 0x03, 0x0a, 0x0a, 0x41, 0x49, 0x41, 0x74, 0x74, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x49, 0x41, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x0d, 0x41, 0x49, 0x41, 0x74, 0x74,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x44, 0x10, 0x01, 0x1a, 0x15, 0xaa, 0xb6, 0x18, 0x11,
	0x41, 0x49, 0xe7, 0xad, 0x89, 0xe6, 0x95, 0x88, 0xe6, 0x94, 0xbb, 0xe5, 0x87, 0xbb, 0xe5, 0x8a,
	0x9b, 0x12, 0x2b, 0x0a, 0x0d, 0x41, 0x49, 0x41, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x41, 0x50, 0x10, 0x02, 0x1a, 0x18, 0xaa, 0xb6, 0x18, 0x14, 0x41, 0x49, 0xe7, 0xad, 0x89, 0xe6,
	0x95, 0x88, 0xe6, 0xb3, 0x95, 0xe6, 0x9c, 0xaf, 0xe5, 0xbc, 0xba, 0xe5, 0xba, 0xa6, 0x12, 0x29,
	0x0a, 0x11, 0x41, 0x49, 0x41, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x44, 0x43,
	0x72, 0x69, 0x74, 0x10, 0x03, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0x41, 0x49, 0xe7, 0xad, 0x89,
	0xe6, 0x95, 0x88, 0xe6, 0x9a, 0xb4, 0xe5, 0x87, 0xbb, 0x12, 0x2c, 0x0a, 0x14, 0x41, 0x49, 0x41,
	0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x44, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73,
	0x65, 0x10, 0x04, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0x41, 0x49, 0xe7, 0xad, 0x89, 0xe6, 0x95,
	0x88, 0xe6, 0x8a, 0xa4, 0xe7, 0x94, 0xb2, 0x12, 0x2c, 0x0a, 0x14, 0x41, 0x49, 0x41, 0x74, 0x74,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x50, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x10,
	0x05, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0x41, 0x49, 0xe7, 0xad, 0x89, 0xe6, 0x95, 0x88, 0xe9,
	0xad, 0x94, 0xe6, 0x8a, 0x97, 0x12, 0x2b, 0x0a, 0x10, 0x41, 0x49, 0x41, 0x74, 0x74, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x10, 0x06, 0x1a, 0x15, 0xaa, 0xb6, 0x18,
	0x11, 0x41, 0x49, 0xe7, 0xad, 0x89, 0xe6, 0x95, 0x88, 0xe6, 0xb3, 0x95, 0xe5, 0x8a, 0x9b, 0xe5,
	0x80, 0xbc, 0x12, 0x2d, 0x0a, 0x0f, 0x41, 0x49, 0x41, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x41, 0x44, 0x48, 0x70, 0x10, 0x07, 0x1a, 0x18, 0xaa, 0xb6, 0x18, 0x14, 0x41, 0x49, 0xe7,
	0xad, 0x89, 0xe6, 0x95, 0x88, 0xe7, 0x89, 0xa9, 0xe7, 0x90, 0x86, 0xe5, 0x90, 0xb8, 0xe8, 0xa1,
	0x80, 0x12, 0x2d, 0x0a, 0x0f, 0x41, 0x49, 0x41, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x41, 0x50, 0x48, 0x70, 0x10, 0x08, 0x1a, 0x18, 0xaa, 0xb6, 0x18, 0x14, 0x41, 0x49, 0xe7, 0xad,
	0x89, 0xe6, 0x95, 0x88, 0xe6, 0xb3, 0x95, 0xe6, 0x9c, 0xaf, 0xe5, 0x90, 0xb8, 0xe8, 0xa1, 0x80,
	0x12, 0x30, 0x0a, 0x12, 0x41, 0x49, 0x41, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41,
	0x44, 0x53, 0x70, 0x65, 0x65, 0x64, 0x10, 0x09, 0x1a, 0x18, 0xaa, 0xb6, 0x18, 0x14, 0x41, 0x49,
	0xe7, 0xad, 0x89, 0xe6, 0x95, 0x88, 0xe6, 0x94, 0xbb, 0xe5, 0x87, 0xbb, 0xe9, 0x80, 0x9f, 0xe5,
	0xba, 0xa6, 0x12, 0x28, 0x0a, 0x0d, 0x41, 0x49, 0x41, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x48, 0x50, 0x10, 0x0a, 0x1a, 0x15, 0xaa, 0xb6, 0x18, 0x11, 0x41, 0x49, 0xe7, 0xad, 0x89,
	0xe6, 0x95, 0x88, 0xe7, 0x94, 0x9f, 0xe5, 0x91, 0xbd, 0xe5, 0x80, 0xbc, 0x2a, 0x8a, 0x02, 0x0a,
	0x13, 0x41, 0x49, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x49, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65,
	0x10, 0x00, 0x12, 0x34, 0x0a, 0x1c, 0x41, 0x49, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x10, 0x01, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0x41, 0x49, 0xe6, 0xad, 0xa3, 0xe9,
	0x9d, 0xa2, 0xe4, 0xba, 0xa4, 0xe6, 0xb5, 0x81, 0x12, 0x32, 0x0a, 0x1a, 0x41, 0x49, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x02, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0x41, 0x49,
	0xe4, 0xb8, 0xad, 0xe6, 0x80, 0xa7, 0xe4, 0xba, 0xa4, 0xe6, 0xb5, 0x81, 0x12, 0x34, 0x0a, 0x1c,
	0x41, 0x49, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x10, 0x03, 0x1a, 0x12,
	0xaa, 0xb6, 0x18, 0x0e, 0x41, 0x49, 0xe8, 0xb4, 0x9f, 0xe9, 0x9d, 0xa2, 0xe4, 0xba, 0xa4, 0xe6,
	0xb5, 0x81, 0x12, 0x2f, 0x0a, 0x17, 0x41, 0x49, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x6c, 0x6c, 0x10, 0x04, 0x1a,
	0x12, 0xaa, 0xb6, 0x18, 0x0e, 0x41, 0x49, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe4, 0xba, 0xa4,
	0xe6, 0xb5, 0x81, 0x1a, 0x04, 0x88, 0xf9, 0x2b, 0x01, 0x2a, 0xb9, 0x01, 0x0a, 0x15, 0x41, 0x49,
	0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x75, 0x66, 0x66, 0x53, 0x68, 0x6f, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x49, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x42, 0x75, 0x66, 0x66, 0x53, 0x68, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x6e,
	0x65, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x49, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x42, 0x75, 0x66, 0x66, 0x53, 0x68, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x48, 0x50, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x41, 0x49, 0x52, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x42, 0x75, 0x66, 0x66, 0x53, 0x68, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x73, 0x4c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x49, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x42, 0x75, 0x66, 0x66, 0x53, 0x68, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x03, 0x1a, 0x08, 0x88, 0xf9, 0x2b,
	0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xee, 0x02, 0x0a, 0x16, 0x41, 0x49, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x49, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10,
	0x00, 0x12, 0x39, 0x0a, 0x1e, 0x41, 0x49, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x41, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x01, 0x1a, 0x15, 0xaa, 0xb6, 0x18, 0x11, 0x41, 0x49, 0xe6, 0x8b, 0x8d,
	0xe5, 0x8d, 0x96, 0xe5, 0x87, 0xba, 0xe4, 0xbb, 0xb7, 0xe5, 0x90, 0x8e, 0x12, 0x3b, 0x0a, 0x20,
	0x41, 0x49, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x57, 0x69, 0x6e,
	0x10, 0x02, 0x1a, 0x15, 0xaa, 0xb6, 0x18, 0x11, 0x41, 0x49, 0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97,
	0xe8, 0x83, 0x9c, 0xe5, 0x88, 0xa9, 0xe5, 0x90, 0x8e, 0x12, 0x3c, 0x0a, 0x21, 0x41, 0x49, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x5f, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x03,
	0x1a, 0x15, 0xaa, 0xb6, 0x18, 0x11, 0x41, 0x49, 0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97, 0xe5, 0xa4,
	0xb1, 0xe8, 0xb4, 0xa5, 0xe5, 0x90, 0x8e, 0x12, 0x3b, 0x0a, 0x23, 0x41, 0x49, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x5f, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x10, 0x04,
	0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0x41, 0x49, 0xe5, 0x87, 0x86, 0xe5, 0xa4, 0x87, 0xe9, 0x98,
	0xb6, 0xe6, 0xae, 0xb5, 0x12, 0x3a, 0x0a, 0x22, 0x41, 0x49, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x10, 0x05, 0x1a, 0x12, 0xaa, 0xb6,
	0x18, 0x0e, 0x41, 0x49, 0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97, 0xe9, 0x98, 0xb6, 0xe6, 0xae, 0xb5,
	0x1a, 0x04, 0x88, 0xf9, 0x2b, 0x01, 0x2a, 0xda, 0x01, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x5f, 0x50,
	0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x39, 0x0a, 0x23,
	0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x45, 0x51, 0x55,
	0x49, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d,
	0x4d, 0x4f, 0x4e, 0x10, 0x00, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x99, 0xae, 0xe9, 0x80,
	0x9a, 0xe5, 0xae, 0xb9, 0xe5, 0x99, 0xa8, 0x12, 0x3c, 0x0a, 0x26, 0x52, 0x45, 0x53, 0x5f, 0x50,
	0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x53, 0x49, 0x42, 0x4c,
	0x45, 0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe9, 0x80, 0x8f, 0xe6, 0x98, 0x8e, 0xe5,
	0xae, 0xb9, 0xe5, 0x99, 0xa8, 0x12, 0x32, 0x0a, 0x22, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f,
	0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x02, 0x1a, 0x0a, 0xaa,
	0xb6, 0x18, 0x06, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90,
	0xf9, 0x2b, 0x01, 0x2a, 0xee, 0x03, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a,
	0x45, 0x43, 0x54, 0x38, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a,
	0x45, 0x43, 0x54, 0x38, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x37,
	0x0a, 0x24, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x45,
	0x51, 0x55, 0x49, 0x50, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52,
	0x45, 0x4d, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x01, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe6, 0x8b,
	0x86, 0xe5, 0x8d, 0xb8, 0xe5, 0x99, 0xa8, 0x12, 0x3c, 0x0a, 0x26, 0x52, 0x45, 0x53, 0x5f, 0x50,
	0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x46, 0x55,
	0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x53, 0x49, 0x42, 0x4c,
	0x45, 0x10, 0x02, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe9, 0x80, 0x8f, 0xe6, 0x98, 0x8e, 0xe8,
	0xa3, 0x85, 0xe5, 0xa4, 0x87, 0x12, 0x41, 0x0a, 0x2b, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f,
	0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x46, 0x55, 0x4e, 0x43,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x55, 0x41, 0x4e, 0x48, 0x55, 0x41, 0x4c, 0x49, 0x4e,
	0x47, 0x50, 0x41, 0x49, 0x10, 0x03, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0xb9, 0xbb, 0xe5,
	0x8c, 0x96, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0x12, 0x3a, 0x0a, 0x27, 0x52, 0x45, 0x53, 0x5f,
	0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x46,
	0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x50, 0x55, 0x4c, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x04, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe5, 0x8a, 0xa0, 0xe4, 0xba,
	0xba, 0xe5, 0x8f, 0xa3, 0x12, 0x32, 0x0a, 0x22, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a,
	0x45, 0x43, 0x54, 0x38, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x41, 0x49, 0x44, 0x55, 0x10, 0x05, 0x1a, 0x0a, 0xaa, 0xb6,
	0x18, 0x06, 0xe6, 0xb5, 0xb7, 0xe9, 0x83, 0xbd, 0x12, 0x32, 0x0a, 0x22, 0x52, 0x45, 0x53, 0x5f,
	0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x46,
	0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x06,
	0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0x12, 0x3c, 0x0a, 0x29,
	0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x45, 0x51, 0x55,
	0x49, 0x50, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x41,
	0x4d, 0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x10, 0x07, 0x1a, 0x0d, 0xaa, 0xb6, 0x18,
	0x09, 0xe6, 0x98, 0x9f, 0xe4, 0xb9, 0x8b, 0xe9, 0x98, 0x9f, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01,
	0x90, 0xf9, 0x2b, 0x01, 0x2a, 0x8a, 0x02, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f,
	0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x55, 0x50, 0x47, 0x52,
	0x41, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x3a, 0x0a, 0x27, 0x52, 0x45, 0x53, 0x5f,
	0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x55,
	0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x10, 0x00, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe4, 0xb8, 0x8d, 0xe5, 0x8d,
	0x87, 0xe7, 0xba, 0xa7, 0x12, 0x34, 0x0a, 0x24, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a,
	0x45, 0x43, 0x54, 0x38, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41,
	0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x10, 0x01, 0x1a, 0x0a,
	0xaa, 0xb6, 0x18, 0x06, 0xe5, 0x85, 0x8d, 0xe8, 0xb4, 0xb9, 0x12, 0x35, 0x0a, 0x25, 0x52, 0x45,
	0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50,
	0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x51,
	0x55, 0x49, 0x50, 0x10, 0x02, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe8, 0xa3, 0x85, 0xe5, 0xa4,
	0x87, 0x12, 0x34, 0x0a, 0x24, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54,
	0x38, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x03, 0x1a, 0x0a, 0xaa, 0xb6, 0x18,
	0x06, 0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b,
	0x01, 0x2a, 0xa6, 0x02, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43,
	0x54, 0x38, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x47, 0x52, 0x49, 0x44, 0x5f, 0x46, 0x55,
	0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x3f, 0x0a, 0x29, 0x52, 0x45, 0x53, 0x5f, 0x50,
	0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x47, 0x52,
	0x49, 0x44, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x46,
	0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x99, 0xae, 0xe9,
	0x80, 0x9a, 0xe6, 0xa7, 0xbd, 0xe4, 0xbd, 0x8d, 0x12, 0x3d, 0x0a, 0x27, 0x52, 0x45, 0x53, 0x5f,
	0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x47,
	0x52, 0x49, 0x44, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x41,
	0x49, 0x44, 0x55, 0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0xb5, 0xb7, 0xe9, 0x83,
	0xbd, 0xe6, 0xa7, 0xbd, 0xe4, 0xbd, 0x8d, 0x12, 0x3c, 0x0a, 0x26, 0x52, 0x45, 0x53, 0x5f, 0x50,
	0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x47, 0x52,
	0x49, 0x44, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x52,
	0x45, 0x10, 0x02, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0xa0, 0xb8, 0xe5, 0xbf, 0x83, 0xe6,
	0xa7, 0xbd, 0xe4, 0xbd, 0x8d, 0x12, 0x39, 0x0a, 0x29, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f,
	0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x47, 0x52, 0x49, 0x44,
	0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x03, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7,
	0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xa6, 0x02, 0x0a, 0x21, 0x52,
	0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x45, 0x51, 0x55, 0x49,
	0x50, 0x5f, 0x47, 0x52, 0x49, 0x44, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x12, 0x39, 0x0a, 0x26, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38,
	0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x47, 0x52, 0x49, 0x44, 0x5f, 0x4d, 0x41, 0x53, 0x4b,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x1a, 0x0d, 0xaa, 0xb6,
	0x18, 0x09, 0xe6, 0x97, 0xa0, 0xe6, 0xa7, 0xbd, 0xe4, 0xbd, 0x8d, 0x12, 0x3f, 0x0a, 0x29, 0x52,
	0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x45, 0x51, 0x55, 0x49,
	0x50, 0x5f, 0x47, 0x52, 0x49, 0x44, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c,
	0xe6, 0x99, 0xae, 0xe9, 0x80, 0x9a, 0xe6, 0xa7, 0xbd, 0xe4, 0xbd, 0x8d, 0x12, 0x3d, 0x0a, 0x27,
	0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x45, 0x51, 0x55,
	0x49, 0x50, 0x5f, 0x47, 0x52, 0x49, 0x44, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x48, 0x41, 0x49, 0x44, 0x55, 0x10, 0x02, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6,
	0xb5, 0xb7, 0xe9, 0x83, 0xbd, 0xe6, 0xa7, 0xbd, 0xe4, 0xbd, 0x8d, 0x12, 0x3c, 0x0a, 0x26, 0x52,
	0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x45, 0x51, 0x55, 0x49,
	0x50, 0x5f, 0x47, 0x52, 0x49, 0x44, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x04, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0xa0, 0xb8,
	0xe5, 0xbf, 0x83, 0xe6, 0xa7, 0xbd, 0xe4, 0xbd, 0x8d, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90,
	0xf9, 0x2b, 0x01, 0x2a, 0xe2, 0x01, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a,
	0x45, 0x43, 0x54, 0x38, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x12, 0x43, 0x0a, 0x27, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52,
	0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x00, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a, 0xe8,
	0xa1, 0x8c, 0xe4, 0xb8, 0xba, 0xe9, 0x98, 0xb6, 0xe6, 0xae, 0xb5, 0x12, 0x3b, 0x0a, 0x25, 0x52,
	0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x42, 0x55, 0x46, 0x46,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x42, 0x41,
	0x54, 0x54, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x88, 0x98, 0xe6,
	0x96, 0x97, 0xe9, 0x98, 0xb6, 0xe6, 0xae, 0xb5, 0x12, 0x38, 0x0a, 0x22, 0x52, 0x45, 0x53, 0x5f,
	0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x02,
	0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe4, 0xbb, 0xbb, 0xe6, 0x84, 0x8f, 0xe9, 0x98, 0xb6, 0xe6,
	0xae, 0xb5, 0x1a, 0x04, 0x88, 0xf9, 0x2b, 0x01, 0x2a, 0x76, 0x0a, 0x13, 0x43, 0x4f, 0x4d, 0x5f,
	0x4c, 0x49, 0x4e, 0x45, 0x55, 0x50, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x54, 0x59, 0x50, 0x45, 0x12,
	0x2f, 0x0a, 0x1c, 0x43, 0x4f, 0x4d, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x55, 0x50, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x10,
	0x00, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b,
	0x12, 0x2e, 0x0a, 0x1b, 0x43, 0x4f, 0x4d, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x55, 0x50, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x10,
	0x01, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe6, 0xa8, 0xa1, 0xe6, 0x8b, 0x9f, 0xe6, 0x88, 0x98,
	0x2a, 0xcc, 0x01, 0x0a, 0x0c, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x12, 0x36, 0x0a, 0x1d, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45,
	0x4e, 0x54, 0x10, 0x00, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe5, 0x8f, 0xaf, 0xe7, 0xbc, 0x96,
	0xe8, 0xbe, 0x91, 0xe9, 0xa2, 0x84, 0xe8, 0xae, 0xbe, 0x12, 0x33, 0x0a, 0x1a, 0x4c, 0x49, 0x4e,
	0x45, 0x5f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x41, 0x43, 0x54, 0x49,
	0x43, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x01, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe8,
	0xae, 0xad, 0xe7, 0xbb, 0x83, 0xe8, 0x90, 0xa5, 0xe4, 0xb8, 0x93, 0xe5, 0xb1, 0x9e, 0x12, 0x32,
	0x0a, 0x19, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52,
	0x45, 0x43, 0x52, 0x55, 0x49, 0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x1a, 0x13, 0xaa,
	0xb6, 0x18, 0x0f, 0xe6, 0x96, 0xb0, 0xe6, 0x89, 0x8b, 0xe6, 0x88, 0x98, 0xe4, 0xb8, 0x93, 0xe5,
	0xb1, 0x9e, 0x12, 0x1b, 0x0a, 0x0f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x55, 0x50, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x48, 0x35, 0x10, 0x03, 0x1a, 0x06, 0xaa, 0xb6, 0x18, 0x02, 0x48, 0x35, 0x2a,
	0x9d, 0x03, 0x0a, 0x1b, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x43, 0x4f,
	0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x12,
	0x24, 0x0a, 0x20, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d,
	0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x59, 0x0a, 0x2e, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x55, 0x50,
	0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x42, 0x49, 0x54, 0x5f, 0x50, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45,
	0x4e, 0x44, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x10, 0x01, 0x1a, 0x25, 0xaa, 0xb6, 0x18, 0x21, 0xe5,
	0xbc, 0xb9, 0xe6, 0x96, 0xb0, 0xe6, 0x89, 0x8b, 0xe6, 0x8e, 0xa8, 0xe8, 0x8d, 0x90, 0xe9, 0x98,
	0xb5, 0xe5, 0xae, 0xb9, 0xe8, 0xaf, 0xb4, 0xe6, 0x98, 0x8e, 0xe5, 0xbc, 0xb9, 0xe7, 0xaa, 0x97,
	0x12, 0x54, 0x0a, 0x2f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x43, 0x4f,
	0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x5f,
	0x50, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x50, 0x41,
	0x4e, 0x45, 0x4c, 0x10, 0x02, 0x1a, 0x1f, 0xaa, 0xb6, 0x18, 0x1b, 0xe5, 0xbc, 0xb9, 0xe6, 0x96,
	0xb0, 0xe6, 0x89, 0x8b, 0xe9, 0x98, 0xb5, 0xe5, 0xae, 0xb9, 0xe6, 0x8e, 0xa8, 0xe8, 0x8d, 0x90,
	0xe5, 0xbc, 0xb9, 0xe7, 0xaa, 0x97, 0x12, 0x48, 0x0a, 0x26, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x55,
	0x50, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x04, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe9, 0x94, 0x81, 0xe4, 0xbd, 0x8f, 0xe5, 0x85,
	0xb6, 0xe5, 0xae, 0x83, 0xe6, 0x8e, 0xa8, 0xe8, 0x8d, 0x90, 0xe9, 0xa1, 0xb5, 0xe7, 0xad, 0xbe,
	0x12, 0x53, 0x0a, 0x28, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x43, 0x4f,
	0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x5f,
	0x53, 0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x4f, 0x5f, 0x54, 0x41, 0x49, 0x4c, 0x10, 0x08, 0x1a, 0x25,
	0xaa, 0xb6, 0x18, 0x21, 0xe4, 0xb8, 0x8b, 0xe6, 0xb2, 0x89, 0xe6, 0x96, 0xb0, 0xe6, 0x89, 0x8b,
	0xe6, 0x8e, 0xa8, 0xe8, 0x8d, 0x90, 0xe9, 0xa1, 0xb5, 0xe7, 0xad, 0xbe, 0xe8, 0x87, 0xb3, 0xe6,
	0x9c, 0xab, 0xe5, 0xb0, 0xbe, 0x1a, 0x08, 0x98, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a,
	0xf3, 0x04, 0x0a, 0x0d, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x69,
	0x74, 0x12, 0x30, 0x0a, 0x14, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x42, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x1a, 0x16, 0xaa, 0xb6, 0x18,
	0x12, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe6, 0x97, 0xa0, 0xe6, 0x95, 0x88, 0xe5, 0x9b, 0x9e,
	0xe5, 0x90, 0x88, 0x12, 0x31, 0x0a, 0x15, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x10, 0x01, 0x1a, 0x16,
	0xaa, 0xb6, 0x18, 0x12, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe5, 0xbc, 0x80, 0xe5, 0xb1, 0x80,
	0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0x12, 0x32, 0x0a, 0x16, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45,
	0x10, 0x02, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe6, 0x88,
	0x98, 0xe6, 0x96, 0x97, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0x12, 0x39, 0x0a, 0x1d, 0x52, 0x4f,
	0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x45, 0x58,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x04, 0x1a, 0x16, 0xaa,
	0xb6, 0x18, 0x12, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe6, 0x8d, 0xa2, 0xe7, 0x89, 0x8c, 0xe5,
	0x9b, 0x9e, 0xe5, 0x90, 0x88, 0x12, 0x33, 0x0a, 0x17, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x08, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe6, 0x8b,
	0x8d, 0xe5, 0x8d, 0x96, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0x12, 0x3d, 0x0a, 0x1b, 0x52, 0x4f,
	0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x4c, 0x4f,
	0x52, 0x44, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x10, 0x1a, 0x1c, 0xaa, 0xb6, 0x18,
	0x18, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0xe5, 0xa5, 0x96,
	0xe5, 0x8a, 0xb1, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0x12, 0x3d, 0x0a, 0x1b, 0x52, 0x4f, 0x55,
	0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x43, 0x48, 0x4f,
	0x4f, 0x53, 0x45, 0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x10, 0x20, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18,
	0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe9, 0x80, 0x89, 0xe6, 0x8b, 0xa9, 0xe9, 0xa2, 0x86, 0xe4,
	0xb8, 0xbb, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0x12, 0x3b, 0x0a, 0x1b, 0x52, 0x4f, 0x55, 0x4e,
	0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x42, 0x4f, 0x53, 0x53,
	0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x40, 0x1a, 0x1a, 0xaa, 0xb6, 0x18, 0x16, 0xe6,
	0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0x42, 0x4f, 0x53, 0x53, 0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97, 0xe5,
	0x9b, 0x9e, 0xe5, 0x90, 0x88, 0x12, 0x3a, 0x0a, 0x1a, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x47, 0x52, 0x41, 0x42, 0x5f, 0x41, 0x57,
	0x41, 0x52, 0x44, 0x10, 0x80, 0x01, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe6, 0xa3, 0x8b, 0xe6,
	0x89, 0x8b, 0xe4, 0xba, 0x89, 0xe5, 0xa4, 0xba, 0xe8, 0xb5, 0x9b, 0xe5, 0x9b, 0x9e, 0xe5, 0x90,
	0x88, 0x12, 0x3f, 0x0a, 0x1d, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x42, 0x49, 0x54, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x42, 0x41, 0x54, 0x54,
	0x4c, 0x45, 0x10, 0x42, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b,
	0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97, 0xe5, 0x9b, 0x9e, 0xe5,
	0x90, 0x88, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x09, 0x1a, 0x08, 0x98, 0xf9, 0x2b,
	0x01, 0x88, 0xf9, 0x2b, 0x01, 0x2a, 0xd4, 0x03, 0x0a, 0x14, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35,
	0x0a, 0x1c, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x10, 0x00,
	0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe8,
	0xa2, 0xab, 0xe5, 0x8a, 0xa8, 0x12, 0x37, 0x0a, 0x1e, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x6d,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x10, 0x01, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe8,
	0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe7, 0x9e, 0xac, 0xe5, 0x8f, 0x91, 0x12, 0x40,
	0x0a, 0x21, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x10, 0x02, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe8, 0x87, 0xaa, 0xe8, 0xb5,
	0xb0, 0xe6, 0xa3, 0x8b, 0xe9, 0x80, 0x89, 0xe6, 0x8b, 0xa9, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1,
	0x12, 0x42, 0x0a, 0x23, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x04, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe8,
	0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe9, 0x80, 0x89, 0xe6, 0x8b, 0xa9, 0xe4, 0xbd,
	0x8d, 0xe7, 0xbd, 0xae, 0x12, 0x43, 0x0a, 0x24, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x10, 0x08, 0x1a, 0x19,
	0xaa, 0xb6, 0x18, 0x15, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe9, 0x80, 0x89,
	0xe6, 0x8b, 0xa9, 0xe6, 0x89, 0x8b, 0xe7, 0x89, 0x8c, 0x12, 0x3d, 0x0a, 0x1e, 0x4c, 0x6f, 0x72,
	0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x79, 0x10, 0x0e, 0x1a, 0x19, 0xaa,
	0xb6, 0x18, 0x15, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe9, 0x80, 0x89, 0xe6,
	0x8b, 0xa9, 0xe4, 0xbb, 0xbb, 0xe6, 0x84, 0x8f, 0x12, 0x34, 0x0a, 0x1b, 0x4c, 0x6f, 0x72, 0x64,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x10, 0x0f, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe8,
	0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0x8a, 0x89, 0xe6, 0x8b, 0xa9, 0x1a, 0x0c,
	0xa0, 0xf9, 0x2b, 0x01, 0x98, 0xf9, 0x2b, 0x01, 0x88, 0xf9, 0x2b, 0x01, 0x2a, 0x81, 0x01, 0x0a,
	0x11, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2f, 0x0a, 0x16, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43,
	0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x6f, 0x6c, 0x64, 0x10, 0x00, 0x1a, 0x13,
	0xaa, 0xb6, 0x18, 0x0f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe9, 0x87, 0x91,
	0xe5, 0xb8, 0x81, 0x12, 0x31, 0x0a, 0x18, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x43, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x10,
	0x01, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b,
	0xe7, 0x94, 0x9f, 0xe5, 0x91, 0xbd, 0x1a, 0x08, 0x90, 0xf9, 0x2b, 0x01, 0x88, 0xf9, 0x2b, 0x01,
	0x2a, 0xed, 0x09, 0x0a, 0x19, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x22,
	0x0a, 0x1e, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x4e, 0x6f, 0x6e, 0x65,
	0x10, 0x00, 0x12, 0x50, 0x0a, 0x2b, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x5f,
	0x48, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x10, 0x01, 0x1a, 0x1f, 0xaa, 0xb6, 0x18, 0x1b, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6,
	0xa3, 0x8b, 0xe5, 0xb7, 0xb1, 0xe6, 0x96, 0xb9, 0xe5, 0xa4, 0x87, 0xe6, 0x88, 0x98, 0xe5, 0xaf,
	0xb9, 0xe8, 0xb1, 0xa1, 0x12, 0x51, 0x0a, 0x2c, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x5f, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x10, 0x02, 0x1a, 0x1f, 0xaa, 0xb6, 0x18, 0x1b, 0xe8, 0x87, 0xaa, 0xe8,
	0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe5, 0xb7, 0xb1, 0xe6, 0x96, 0xb9, 0xe6, 0x88, 0x98, 0xe6, 0x96,
	0x97, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0x12, 0x44, 0x0a, 0x25, 0x4c, 0x6f, 0x72, 0x64, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x5f, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x10, 0x04, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3,
	0x8b, 0xe5, 0xaf, 0xb9, 0xe6, 0x96, 0xb9, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0x12, 0x42, 0x0a,
	0x25, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x31,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x10, 0x08, 0x1a, 0x17, 0xaa, 0xb6, 0x18, 0x13, 0xe8, 0x87,
	0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0x31, 0xe6, 0x98, 0x9f, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1,
	0xa1, 0x12, 0x42, 0x0a, 0x25, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x53,
	0x74, 0x61, 0x72, 0x32, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x10, 0x10, 0x1a, 0x17, 0xaa, 0xb6,
	0x18, 0x13, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0x32, 0xe6, 0x98, 0x9f, 0xe5,
	0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0x12, 0x42, 0x0a, 0x25, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x33, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x10, 0x20,
	0x1a, 0x17, 0xaa, 0xb6, 0x18, 0x13, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0x33,
	0xe6, 0x98, 0x9f, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0x12, 0x4f, 0x0a, 0x2a, 0x4c, 0x6f, 0x72,
	0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x62, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x10, 0x40, 0x1a, 0x1f, 0xaa, 0xb6, 0x18, 0x1b, 0xe8,
	0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe5, 0xb7, 0xb1, 0xe6, 0x96, 0xb9, 0xe6, 0x88,
	0x98, 0xe6, 0x96, 0x97, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0x12, 0x4c, 0x0a, 0x27, 0x4c, 0x6f,
	0x72, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x41, 0x6e, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x10, 0x03, 0x1a, 0x1f, 0xaa, 0xb6, 0x18, 0x1b, 0xe8, 0x87, 0xaa,
	0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe4, 0xbb, 0xbb, 0xe6, 0x84, 0x8f, 0xe5, 0xb7, 0xb1, 0xe6,
	0x96, 0xb9, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0x12, 0x42, 0x0a, 0x23, 0x4c, 0x6f, 0x72, 0x64,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x41, 0x6e, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x10,
	0x07, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b,
	0xe5, 0x85, 0xa8, 0xe4, 0xbd, 0x93, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0x12, 0x50, 0x0a, 0x30,
	0x4c, 0x6f, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x31, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x10, 0x09, 0x1a, 0x1a, 0xaa, 0xb6, 0x18, 0x16, 0xe5, 0xb7, 0xb1, 0xe6, 0x96, 0xb9, 0xe5, 0xa4,
	0x87, 0xe6, 0x88, 0x98, 0x31, 0xe6, 0x98, 0x9f, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0x12, 0x50,
	0x0a, 0x30, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x48, 0x6f, 0x73, 0x74,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x32, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x10, 0x11, 0x1a, 0x1a, 0xaa, 0xb6, 0x18, 0x16, 0xe5, 0xb7, 0xb1, 0xe6, 0x96, 0xb9,
	0xe5, 0xa4, 0x87, 0xe6, 0x88, 0x98, 0x32, 0xe6, 0x98, 0x9f, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1,
	0x12, 0x50, 0x0a, 0x30, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x48, 0x6f,
	0x73, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x33, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x10, 0x21, 0x1a, 0x1a, 0xaa, 0xb6, 0x18, 0x16, 0xe5, 0xb7, 0xb1, 0xe6,
	0x96, 0xb9, 0xe5, 0xa4, 0x87, 0xe6, 0x88, 0x98, 0x33, 0xe6, 0x98, 0x9f, 0xe5, 0xaf, 0xb9, 0xe8,
	0xb1, 0xa1, 0x12, 0x41, 0x0a, 0x22, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x5f,
	0x48, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x69, 0x64, 0x10, 0x01, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15,
	0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe5, 0xb7, 0xb1, 0xe6, 0x96, 0xb9, 0xe5,
	0x8d, 0x95, 0xe6, 0xa0, 0xbc, 0x12, 0x40, 0x0a, 0x21, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x5f, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x6f, 0x77, 0x10, 0x02, 0x1a, 0x19, 0xaa, 0xb6,
	0x18, 0x15, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe5, 0xb7, 0xb1, 0xe6, 0x96,
	0xb9, 0xe5, 0x8d, 0x95, 0xe8, 0xa1, 0x8c, 0x12, 0x45, 0x0a, 0x26, 0x4c, 0x6f, 0x72, 0x64, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x5f, 0x4f, 0x70, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x47, 0x72, 0x69,
	0x64, 0x10, 0x04, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6,
	0xa3, 0x8b, 0xe5, 0xaf, 0xb9, 0xe6, 0x96, 0xb9, 0xe5, 0x8d, 0x95, 0xe6, 0xa0, 0xbc, 0x12, 0x44,
	0x0a, 0x25, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x4f, 0x70, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x65, 0x52, 0x6f, 0x77, 0x10, 0x08, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe8,
	0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe5, 0xaf, 0xb9, 0xe6, 0x96, 0xb9, 0xe5, 0x8d,
	0x95, 0xe8, 0xa1, 0x8c, 0x1a, 0x0a, 0x10, 0x01, 0x98, 0xf9, 0x2b, 0x01, 0x88, 0xf9, 0x2b, 0x01,
	0x2a, 0x9e, 0x07, 0x0a, 0x12, 0x45, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49,
	0x6e, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x4c, 0x4f, 0x52, 0x44, 0x5f,
	0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x1c,
	0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x1a, 0x0a,
	0xaa, 0xb6, 0x18, 0x06, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x12, 0x29, 0x0a, 0x19, 0x4c, 0x4f,
	0x52, 0x44, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4c, 0x76, 0x42, 0x75, 0x10, 0x02, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5,
	0x90, 0x95, 0xe5, 0xb8, 0x83, 0x12, 0x2b, 0x0a, 0x1b, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x61,
	0x51, 0x69, 0x61, 0x6f, 0x10, 0x03, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0xa4, 0xa7, 0xe4,
	0xb9, 0x94, 0x12, 0x29, 0x0a, 0x19, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c,
	0x5f, 0x49, 0x4e, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x61, 0x4a, 0x69, 0x10,
	0x04, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0xa6, 0xb2, 0xe5, 0xb7, 0xb1, 0x12, 0x2b, 0x0a,
	0x1b, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x53, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x45, 0x10, 0x05, 0x1a, 0x0a,
	0xaa, 0xb6, 0x18, 0x06, 0xe5, 0xab, 0xa6, 0xe5, 0xa8, 0xa5, 0x12, 0x2f, 0x0a, 0x1f, 0x4c, 0x4f,
	0x52, 0x44, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x5a, 0x68, 0x6f, 0x75, 0x10, 0x06, 0x1a,
	0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0xba, 0x84, 0xe5, 0x91, 0xa8, 0x12, 0x37, 0x0a, 0x1e, 0x4c,
	0x4f, 0x52, 0x44, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x59, 0x61, 0x6f, 0x10, 0x07, 0x1a,
	0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe6, 0x96, 0xb0, 0xe6, 0x89, 0x8b, 0xe5, 0xbc, 0x95, 0xe5, 0xaf,
	0xbc, 0xe7, 0x91, 0xb6, 0x12, 0x33, 0x0a, 0x20, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x53, 0x4b, 0x49,
	0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x61, 0x6e,
	0x67, 0x5a, 0x68, 0x61, 0x6f, 0x4a, 0x75, 0x6e, 0x10, 0x08, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09,
	0xe7, 0x8e, 0x8b, 0xe6, 0x98, 0xad, 0xe5, 0x90, 0x9b, 0x12, 0x2a, 0x0a, 0x1a, 0x4c, 0x4f, 0x52,
	0x44, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x69, 0x42, 0x61, 0x69, 0x10, 0x09, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe6,
	0x9d, 0x8e, 0xe7, 0x99, 0xbd, 0x12, 0x25, 0x0a, 0x18, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x59, 0x61,
	0x6f, 0x10, 0x0a, 0x1a, 0x07, 0xaa, 0xb6, 0x18, 0x03, 0xe7, 0x91, 0xb6, 0x12, 0x2d, 0x0a, 0x1d,
	0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x69, 0x61, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x10, 0x0b, 0x1a,
	0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe8, 0xb2, 0x82, 0xe8, 0x9d, 0x89, 0x12, 0x34, 0x0a, 0x21, 0x4c,
	0x4f, 0x52, 0x44, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x6f, 0x6e, 0x67, 0x46, 0x61, 0x6e, 0x67, 0x4a, 0x69, 0x6e, 0x67,
	0x10, 0x0c, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe4, 0xb8, 0x9c, 0xe6, 0x96, 0xb9, 0xe9, 0x95,
	0x9c, 0x12, 0x31, 0x0a, 0x1e, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f,
	0x49, 0x4e, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x6f, 0x6e, 0x67, 0x53, 0x75,
	0x6e, 0x4c, 0x69, 0x10, 0x0d, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe5, 0x85, 0xac, 0xe5, 0xad,
	0x99, 0xe7, 0xa6, 0xbb, 0x12, 0x34, 0x0a, 0x1e, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x53, 0x4b, 0x49,
	0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x61, 0x4b,
	0x65, 0x42, 0x6f, 0x4c, 0x75, 0x6f, 0x10, 0x0e, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe9, 0xa9,
	0xac, 0xe5, 0x8f, 0xaf, 0xe6, 0xb3, 0xa2, 0xe7, 0xbd, 0x97, 0x12, 0x32, 0x0a, 0x1f, 0x4c, 0x4f,
	0x52, 0x44, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x59, 0x61, 0x6e, 0x67, 0x59, 0x75, 0x48, 0x75, 0x61, 0x6e, 0x10, 0x0f, 0x1a,
	0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe6, 0x9d, 0xa8, 0xe7, 0x8e, 0x89, 0xe7, 0x8e, 0xaf, 0x12, 0x27,
	0x0a, 0x18, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x53,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x49, 0x31, 0x10, 0x10, 0x1a, 0x09, 0xaa, 0xb6,
	0x18, 0x05, 0x41, 0x49, 0xe7, 0x94, 0xa8, 0x12, 0x2b, 0x0a, 0x1b, 0x4c, 0x4f, 0x52, 0x44, 0x5f,
	0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x75, 0x6e, 0x42, 0x69, 0x6e, 0x10, 0x11, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0xad,
	0x99, 0xe8, 0x86, 0x91, 0x12, 0x35, 0x0a, 0x22, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x53, 0x4b, 0x49,
	0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x75, 0x6e,
	0x53, 0x68, 0x61, 0x6e, 0x67, 0x58, 0x69, 0x61, 0x6e, 0x67, 0x10, 0x12, 0x1a, 0x0d, 0xaa, 0xb6,
	0x18, 0x09, 0xe5, 0xad, 0x99, 0xe5, 0xb0, 0x9a, 0xe9, 0xa6, 0x99, 0x1a, 0x04, 0x88, 0xf9, 0x2b,
	0x01, 0x2a, 0x88, 0x01, 0x0a, 0x14, 0x45, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1f, 0x0a, 0x1b, 0x4c, 0x4f,
	0x52, 0x44, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x45, 0x0a, 0x29, 0x4c,
	0x4f, 0x52, 0x44, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41,
	0x52, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x01, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12,
	0xe6, 0x8f, 0x90, 0xe5, 0x89, 0x8d, 0xe5, 0x8c, 0xb9, 0xe9, 0x85, 0x8d, 0xe9, 0x99, 0x90, 0xe5,
	0x88, 0xb6, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xa6, 0x03, 0x0a,
	0x29, 0x45, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x45, 0x78, 0x70, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x24, 0x4c, 0x4f,
	0x52, 0x44, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x47, 0x41, 0x54,
	0x48, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x40, 0x0a, 0x2a, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x53, 0x4b, 0x49,
	0x4c, 0x4c, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x47, 0x41, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x4f,
	0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x45, 0x4e, 0x45,
	0x4d, 0x59, 0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x87, 0xbb, 0xe6, 0x9d, 0x80,
	0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0x12, 0x48, 0x0a, 0x2c, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x53,
	0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x47, 0x41, 0x54, 0x48, 0x45, 0x52, 0x5f,
	0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x55, 0x50, 0x10, 0x02, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0xa3,
	0x8b, 0xe6, 0x89, 0x8b, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0xe6, 0x8f, 0x90, 0xe5, 0x8d, 0x87,
	0x12, 0x41, 0x0a, 0x2b, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x45,
	0x58, 0x50, 0x5f, 0x47, 0x41, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10,
	0x03, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe5, 0xbc, 0x80,
	0xe5, 0xa7, 0x8b, 0x12, 0x3c, 0x0a, 0x26, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x53, 0x4b, 0x49, 0x4c,
	0x4c, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x47, 0x41, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x57, 0x42, 0x49, 0x45, 0x10, 0x04, 0x1a,
	0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x96, 0xb0, 0xe6, 0x89, 0x8b, 0xe6, 0x95, 0x99, 0xe5, 0xad,
	0xa6, 0x12, 0x38, 0x0a, 0x25, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f,
	0x45, 0x58, 0x50, 0x5f, 0x47, 0x41, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x05, 0x1a, 0x0d, 0xaa, 0xb6,
	0x18, 0x09, 0xe7, 0xa9, 0xba, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x1a, 0x08, 0x88, 0xf9, 0x2b,
	0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xc0, 0x01, 0x0a, 0x0e, 0x45, 0x4c, 0x6f, 0x72, 0x64, 0x4a,
	0x69, 0x42, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x12, 0x4c, 0x6f, 0x72, 0x64,
	0x4a, 0x69, 0x42, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x65, 0x65, 0x74, 0x10, 0x00,
	0x1a, 0x25, 0xaa, 0xb6, 0x18, 0x21, 0xe7, 0x9b, 0xb8, 0xe9, 0x81, 0x87, 0x28, 0xe4, 0xb8, 0xbb,
	0xe6, 0x8e, 0xa7, 0x2f, 0xe9, 0x9d, 0x9e, 0xe4, 0xb8, 0xbb, 0xe6, 0x8e, 0xa7, 0xe9, 0x83, 0xbd,
	0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0x29, 0x12, 0x34, 0x0a, 0x13, 0x4c, 0x6f, 0x72, 0x64, 0x4a,
	0x69, 0x42, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x75, 0x58, 0x75, 0x65, 0x10, 0x01,
	0x1a, 0x1b, 0xaa, 0xb6, 0x18, 0x17, 0xe5, 0x85, 0xa5, 0xe8, 0xa1, 0x80, 0x28, 0xe6, 0x94, 0xbb,
	0xe5, 0x87, 0xbb, 0xe8, 0x80, 0x85, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0x29, 0x12, 0x33, 0x0a,
	0x12, 0x4c, 0x6f, 0x72, 0x64, 0x4a, 0x69, 0x42, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4b,
	0x69, 0x6c, 0x6c, 0x10, 0x02, 0x1a, 0x1b, 0xaa, 0xb6, 0x18, 0x17, 0xe5, 0x87, 0xbb, 0xe6, 0x9d,
	0x80, 0x28, 0xe5, 0x87, 0xbb, 0xe6, 0x9d, 0x80, 0xe8, 0x80, 0x85, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f,
	0x91, 0x29, 0x1a, 0x04, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0x8f, 0x01, 0x0a, 0x1a, 0x45, 0x4c, 0x6f,
	0x72, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x55, 0x6e, 0x4c,
	0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x21, 0x4c, 0x4f, 0x52, 0x44, 0x5f,
	0x50, 0x52, 0x4f, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x55, 0x4e, 0x4c, 0x4f,
	0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x1a, 0x0d,
	0xaa, 0xb6, 0x18, 0x09, 0xe6, 0x97, 0xa0, 0xe6, 0x95, 0x88, 0xe5, 0x80, 0xbc, 0x12, 0x3b, 0x0a,
	0x25, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x43,
	0x59, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f,
	0x52, 0x44, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0xa3,
	0x8b, 0xe6, 0x89, 0x8b, 0xe6, 0xa1, 0xa3, 0xe6, 0xa1, 0x88, 0x2a, 0xd9, 0x01, 0x0a, 0x13, 0x45,
	0x43, 0x68, 0x65, 0x73, 0x73, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x50, 0x41, 0x52, 0x54, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x12, 0x42, 0x4f, 0x41,
	0x52, 0x44, 0x50, 0x41, 0x52, 0x54, 0x5f, 0x42, 0x49, 0x47, 0x54, 0x48, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe5, 0xa4, 0xa7, 0xe6, 0x91, 0x86, 0xe4, 0xbb, 0xb6,
	0x12, 0x27, 0x0a, 0x14, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x50, 0x41, 0x52, 0x54, 0x5f, 0x53, 0x4d,
	0x41, 0x4c, 0x4c, 0x54, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09,
	0xe5, 0xb0, 0x8f, 0xe6, 0x91, 0x86, 0xe4, 0xbb, 0xb6, 0x12, 0x22, 0x0a, 0x12, 0x42, 0x4f, 0x41,
	0x52, 0x44, 0x50, 0x41, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x52, 0x53, 0x10,
	0x03, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe8, 0xb4, 0xb4, 0xe7, 0xba, 0xb8, 0x12, 0x24, 0x0a,
	0x14, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x50, 0x41, 0x52, 0x54, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x47,
	0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe8, 0x83, 0x8c,
	0xe6, 0x99, 0xaf, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x50, 0x41, 0x52, 0x54,
	0x5f, 0x4d, 0x41, 0x58, 0x10, 0x05, 0x2a, 0xa8, 0x02, 0x0a, 0x13, 0x45, 0x43, 0x68, 0x65, 0x73,
	0x73, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x72, 0x65, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15,
	0x0a, 0x11, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x15, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x41, 0x52,
	0x45, 0x41, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x44, 0x45, 0x53, 0x4b, 0x10, 0x01,
	0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe6, 0x8c, 0x87, 0xe6, 0x8c, 0xa5, 0xe5, 0x8f, 0xb0, 0x12,
	0x32, 0x0a, 0x19, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x4c, 0x45, 0x46,
	0x54, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x1a, 0x13,
	0xaa, 0xb6, 0x18, 0x0f, 0xe5, 0xb7, 0xa6, 0xe4, 0xbe, 0xa7, 0xe8, 0xa3, 0x85, 0xe9, 0xa5, 0xb0,
	0xe5, 0x8c, 0xba, 0x12, 0x33, 0x0a, 0x1a, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x41, 0x52, 0x45, 0x41,
	0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x52, 0x41, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0x03, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe5, 0x8f, 0xb3, 0xe4, 0xbe, 0xa7, 0xe8,
	0xa3, 0x85, 0xe9, 0xa5, 0xb0, 0xe5, 0x8c, 0xba, 0x12, 0x27, 0x0a, 0x14, 0x42, 0x4f, 0x41, 0x52,
	0x44, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x41, 0x52, 0x45, 0x41,
	0x10, 0x04, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97, 0xe5, 0x8c,
	0xba, 0x12, 0x2b, 0x0a, 0x18, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x42,
	0x41, 0x43, 0x4b, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52, 0x45, 0x41, 0x10, 0x05, 0x1a,
	0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe8, 0x83, 0x8c, 0xe6, 0x99, 0xaf, 0xe5, 0x8c, 0xba, 0x12, 0x11,
	0x0a, 0x0d, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x4d, 0x41, 0x58, 0x10,
	0x06, 0x2a, 0xb2, 0x01, 0x0a, 0x0f, 0x45, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x66,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x46, 0x54, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x0e, 0x45, 0x46,
	0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x10, 0x01, 0x1a, 0x10,
	0xaa, 0xb6, 0x18, 0x0c, 0xe9, 0x80, 0x9a, 0xe7, 0x94, 0xa8, 0xe7, 0x89, 0xb9, 0xe6, 0x95, 0x88,
	0x12, 0x28, 0x0a, 0x0c, 0x45, 0x46, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x52, 0x44,
	0x10, 0x02, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe4, 0xb8,
	0x93, 0xe7, 0x94, 0xa8, 0xe7, 0x89, 0xb9, 0xe6, 0x95, 0x88, 0x12, 0x28, 0x0a, 0x0c, 0x45, 0x46,
	0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4b, 0x49, 0x4e, 0x10, 0x03, 0x1a, 0x16, 0xaa, 0xb6,
	0x18, 0x12, 0xe7, 0x9a, 0xae, 0xe8, 0x82, 0xa4, 0xe4, 0xb8, 0x93, 0xe7, 0x94, 0xa8, 0xe7, 0x89,
	0xb9, 0xe6, 0x95, 0x88, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x46, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4c, 0x41, 0x53, 0x54, 0x10, 0x04, 0x2a, 0xba, 0x01, 0x0a, 0x10, 0x45, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x45, 0x66, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x10, 0x45,
	0x46, 0x54, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x46, 0x54, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x57, 0x49,
	0x4e, 0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0x83, 0x9c, 0xe5, 0x88, 0xa9, 0xe7,
	0x89, 0xb9, 0xe6, 0x95, 0x88, 0x12, 0x25, 0x0a, 0x0f, 0x45, 0x46, 0x54, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x10, 0x02, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c,
	0xe6, 0x94, 0xbb, 0xe5, 0x87, 0xbb, 0xe7, 0x89, 0xb9, 0xe6, 0x95, 0x88, 0x12, 0x28, 0x0a, 0x12,
	0x45, 0x46, 0x54, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x4f,
	0x52, 0x4d, 0x10, 0x03, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe4, 0xbc, 0xa0, 0xe9, 0x80, 0x81,
	0xe7, 0x89, 0xb9, 0xe6, 0x95, 0x88, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x46, 0x54, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x04, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90,
	0xf9, 0x2b, 0x01, 0x2a, 0xb7, 0x02, 0x0a, 0x11, 0x45, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x41, 0x75,
	0x74, 0x6f, 0x55, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4d, 0x4f,
	0x4a, 0x49, 0x55, 0x53, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x25, 0x0a, 0x12, 0x45, 0x4d, 0x4f, 0x4a, 0x49, 0x55, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x47, 0x41, 0x4d, 0x45, 0x10, 0x01, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe5, 0xbc, 0x80,
	0xe5, 0xb1, 0x80, 0xe6, 0x97, 0xb6, 0x12, 0x25, 0x0a, 0x12, 0x45, 0x4d, 0x4f, 0x4a, 0x49, 0x55,
	0x53, 0x45, 0x5f, 0x42, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x1a, 0x0d,
	0xaa, 0xb6, 0x18, 0x09, 0xe7, 0xac, 0xac, 0xe4, 0xb8, 0x80, 0xe5, 0x90, 0x8d, 0x12, 0x2c, 0x0a,
	0x18, 0x45, 0x4d, 0x4f, 0x4a, 0x49, 0x55, 0x53, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x54, 0x48, 0x45,
	0x53, 0x49, 0x53, 0x33, 0x53, 0x54, 0x41, 0x52, 0x53, 0x10, 0x03, 0x1a, 0x0e, 0xaa, 0xb6, 0x18,
	0x0a, 0xe5, 0x90, 0x88, 0xe6, 0x88, 0x90, 0x33, 0xe6, 0x98, 0x9f, 0x12, 0x2b, 0x0a, 0x15, 0x45,
	0x4d, 0x4f, 0x4a, 0x49, 0x55, 0x53, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x57, 0x49, 0x4e, 0x53, 0x54,
	0x52, 0x45, 0x41, 0x4b, 0x10, 0x04, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe7, 0xbb, 0x88, 0xe7,
	0xbb, 0x93, 0xe8, 0xbf, 0x9e, 0xe8, 0x83, 0x9c, 0x12, 0x28, 0x0a, 0x12, 0x45, 0x4d, 0x4f, 0x4a,
	0x49, 0x55, 0x53, 0x45, 0x5f, 0x57, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4b, 0x10, 0x05,
	0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0xaf, 0xb9, 0xe5, 0xb1, 0x80, 0xe8, 0xbf, 0x9e, 0xe8,
	0x83, 0x9c, 0x12, 0x1c, 0x0a, 0x0c, 0x45, 0x4d, 0x4f, 0x4a, 0x49, 0x55, 0x53, 0x45, 0x5f, 0x57,
	0x49, 0x4e, 0x10, 0x06, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe8, 0x83, 0x9c, 0xe5, 0x88, 0xa9,
	0x12, 0x11, 0x0a, 0x0d, 0x45, 0x4d, 0x4f, 0x4a, 0x49, 0x55, 0x53, 0x45, 0x5f, 0x4c, 0x41, 0x53,
	0x54, 0x10, 0x07, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0x75, 0x0a,
	0x17, 0x45, 0x43, 0x68, 0x65, 0x73, 0x73, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x14, 0x43, 0x48, 0x45, 0x53,
	0x53, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x10, 0x00, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe5, 0x88,
	0xb7, 0xe6, 0x96, 0xb0, 0x12, 0x2e, 0x0a, 0x15, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45,
	0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x46, 0x4f, 0x52, 0x45, 0x56, 0x45, 0x52, 0x10, 0x01, 0x1a,
	0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe6, 0xb0, 0xb8, 0xe4, 0xb9, 0x85, 0xe4, 0xb8, 0x8d, 0xe5, 0x88,
	0xb7, 0xe6, 0x96, 0xb0, 0x2a, 0x5d, 0x0a, 0x0e, 0x45, 0x57, 0x65, 0x61, 0x6c, 0x43, 0x79, 0x63,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f,
	0x44, 0x41, 0x59, 0x10, 0x01, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe6, 0x97, 0xa5, 0xe5, 0xbe,
	0xaa, 0xe7, 0x8e, 0xaf, 0x12, 0x1d, 0x0a, 0x0a, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x57, 0x45,
	0x45, 0x4b, 0x10, 0x02, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe5, 0x91, 0xa8, 0xe5, 0xbe, 0xaa,
	0xe7, 0x8e, 0xaf, 0x2a, 0x3f, 0x0a, 0x0d, 0x45, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x08, 0x4f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x10, 0x00, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe4, 0xb8, 0x80, 0xe8, 0x88, 0xac, 0x12, 0x14,
	0x0a, 0x04, 0x52, 0x61, 0x72, 0x65, 0x10, 0x01, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe7, 0xa8,
	0x80, 0xe6, 0x9c, 0x89, 0x2a, 0x8c, 0x01, 0x0a, 0x0f, 0x45, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0c, 0x46, 0x55, 0x4e, 0x43,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09,
	0xe6, 0x97, 0xa0, 0xe6, 0x95, 0x88, 0xe5, 0x80, 0xbc, 0x12, 0x22, 0x0a, 0x0f, 0x46, 0x55, 0x4e,
	0x43, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x10, 0x01, 0x1a, 0x0d,
	0xaa, 0xb6, 0x18, 0x09, 0xe5, 0x8a, 0xa0, 0xe5, 0xa5, 0xbd, 0xe5, 0x8f, 0x8b, 0x12, 0x19, 0x0a,
	0x09, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x02, 0x1a, 0x0a, 0xaa, 0xb6,
	0x18, 0x06, 0xe8, 0x81, 0x8a, 0xe5, 0xa4, 0xa9, 0x12, 0x19, 0x0a, 0x09, 0x46, 0x55, 0x4e, 0x43,
	0x5f, 0x4c, 0x49, 0x4b, 0x45, 0x10, 0x03, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe7, 0x82, 0xb9,
	0xe8, 0xb5, 0x9e, 0x2a, 0xd6, 0x01, 0x0a, 0x13, 0x45, 0x52, 0x61, 0x6e, 0x6b, 0x6c, 0x69, 0x73,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x15, 0x52,
	0x41, 0x4e, 0x4b, 0x4c, 0x49, 0x53, 0x54, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4e, 0x4f, 0x10, 0x00, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe4, 0xb8, 0x8d, 0xe7,
	0xbb, 0x93, 0xe7, 0xae, 0x97, 0x12, 0x26, 0x0a, 0x16, 0x52, 0x41, 0x4e, 0x4b, 0x4c, 0x49, 0x53,
	0x54, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x59, 0x10,
	0x01, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe8, 0xb7, 0xa8, 0xe5, 0xa4, 0xa9, 0x12, 0x27, 0x0a,
	0x17, 0x52, 0x41, 0x4e, 0x4b, 0x4c, 0x49, 0x53, 0x54, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x02, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06,
	0xe8, 0xb7, 0xa8, 0xe5, 0x91, 0xa8, 0x12, 0x28, 0x0a, 0x18, 0x52, 0x41, 0x4e, 0x4b, 0x4c, 0x49,
	0x53, 0x54, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x4e,
	0x54, 0x48, 0x10, 0x03, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe8, 0xb7, 0xa8, 0xe6, 0x9c, 0x88,
	0x12, 0x1a, 0x0a, 0x16, 0x52, 0x41, 0x4e, 0x4b, 0x4c, 0x49, 0x53, 0x54, 0x53, 0x45, 0x54, 0x54,
	0x4c, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x04, 0x2a, 0x9e, 0x01, 0x0a,
	0x0d, 0x45, 0x52, 0x61, 0x6e, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x14, 0x52, 0x41, 0x4e, 0x4b, 0x4c, 0x49, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x2f, 0x0a, 0x16, 0x52, 0x41, 0x4e, 0x4b,
	0x4c, 0x49, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x50, 0x4f, 0x57,
	0x45, 0x52, 0x10, 0x01, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b,
	0xe6, 0x88, 0x98, 0xe5, 0x8a, 0x9b, 0xe6, 0xa6, 0x9c, 0x12, 0x2c, 0x0a, 0x13, 0x52, 0x41, 0x4e,
	0x4b, 0x4c, 0x49, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x10, 0x02, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe6, 0x8e,
	0x92, 0xe8, 0xa1, 0x8c, 0xe6, 0xa6, 0x9c, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x41, 0x4e, 0x4b, 0x4c,
	0x49, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x2a, 0x83, 0x02,
	0x0a, 0x19, 0x45, 0x52, 0x61, 0x6e, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x54, 0x79,
	0x70, 0x65, 0x4c, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x11, 0x4c,
	0x4f, 0x52, 0x44, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x2c, 0x0a, 0x0d, 0x4c, 0x4f, 0x52, 0x44, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f,
	0x4c, 0x4f, 0x57, 0x10, 0x01, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe6, 0xa3, 0x8b, 0xe6, 0x89,
	0x8b, 0xe5, 0x88, 0x9d, 0xe7, 0xba, 0xa7, 0xe6, 0x8e, 0x92, 0xe8, 0xa1, 0x8c, 0xe6, 0xa6, 0x9c,
	0x12, 0x2c, 0x0a, 0x0d, 0x4c, 0x4f, 0x52, 0x44, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4d, 0x49,
	0x44, 0x10, 0x02, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe4,
	0xb8, 0xad, 0xe7, 0xba, 0xa7, 0xe6, 0x8e, 0x92, 0xe8, 0xa1, 0x8c, 0xe6, 0xa6, 0x9c, 0x12, 0x2d,
	0x0a, 0x0e, 0x4c, 0x4f, 0x52, 0x44, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x48, 0x49, 0x47, 0x48,
	0x10, 0x03, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe9, 0xab,
	0x98, 0xe7, 0xba, 0xa7, 0xe6, 0x8e, 0x92, 0xe8, 0xa1, 0x8c, 0xe6, 0xa6, 0x9c, 0x12, 0x31, 0x0a,
	0x12, 0x4c, 0x4f, 0x52, 0x44, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x41, 0x4c, 0x10, 0x04, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe6, 0xa3, 0x8b, 0xe6, 0x89,
	0x8b, 0xe5, 0x9b, 0xbd, 0xe6, 0x9c, 0x8d, 0xe6, 0x8e, 0x92, 0xe8, 0xa1, 0x8c, 0xe6, 0xa6, 0x9c,
	0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x4f, 0x52, 0x44, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4d, 0x41,
	0x58, 0x10, 0x05, 0x2a, 0xe3, 0x01, 0x0a, 0x16, 0x45, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0f,
	0x0a, 0x0b, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12,
	0x1e, 0x0a, 0x0b, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x10, 0x01,
	0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xe6, 0xa6, 0x9c, 0x12,
	0x20, 0x0a, 0x0d, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x4c, 0x59,
	0x10, 0x02, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe8, 0xbf, 0x9b, 0xe6, 0xad, 0xa5, 0xe6, 0xa6,
	0x9c, 0x12, 0x1d, 0x0a, 0x0a, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x50, 0x10,
	0x03, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe7, 0x99, 0xbb, 0xe9, 0xa1, 0xb6, 0xe6, 0xa6, 0x9c,
	0x12, 0x27, 0x0a, 0x11, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x50, 0x5f, 0x57,
	0x45, 0x45, 0x4b, 0x4c, 0x59, 0x10, 0x04, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x91, 0xa8,
	0xe7, 0x99, 0xbb, 0xe9, 0xa1, 0xb6, 0xe6, 0xa6, 0x9c, 0x12, 0x1e, 0x0a, 0x0b, 0x53, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x10, 0x05, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09,
	0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe6, 0xa6, 0x9c, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x06, 0x2a, 0xa4, 0x02, 0x0a, 0x11, 0x43, 0x4f,
	0x4d, 0x5f, 0x43, 0x4c, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x12,
	0x29, 0x0a, 0x16, 0x43, 0x4f, 0x4d, 0x5f, 0x43, 0x4c, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x1a, 0x0d, 0xaa, 0xb6, 0x18,
	0x09, 0xe4, 0xb8, 0x8d, 0xe6, 0x94, 0xb9, 0xe5, 0x8f, 0x98, 0x12, 0x2d, 0x0a, 0x17, 0x43, 0x4f,
	0x4d, 0x5f, 0x43, 0x4c, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f,
	0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0xb0, 0x83,
	0xe8, 0xaf, 0x95, 0xe6, 0x97, 0xa5, 0xe5, 0xbf, 0x97, 0x12, 0x2c, 0x0a, 0x16, 0x43, 0x4f, 0x4d,
	0x5f, 0x43, 0x4c, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x10, 0x02, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0xe6, 0x97, 0xa5, 0xe5, 0xbf, 0x97, 0x12, 0x29, 0x0a, 0x19, 0x43, 0x4f, 0x4d, 0x5f, 0x43,
	0x4c, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x57, 0x41, 0x52,
	0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe8, 0xad, 0xa6, 0xe5,
	0x91, 0x8a, 0x12, 0x2d, 0x0a, 0x17, 0x43, 0x4f, 0x4d, 0x5f, 0x43, 0x4c, 0x54, 0x5f, 0x4c, 0x4f,
	0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x1a,
	0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x12, 0x2d, 0x0a, 0x17, 0x43, 0x4f, 0x4d, 0x5f, 0x43, 0x4c, 0x54, 0x5f, 0x4c, 0x4f, 0x47,
	0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x05, 0x1a, 0x10,
	0xaa, 0xb6, 0x18, 0x0c, 0xe4, 0xb8, 0xa5, 0xe9, 0x87, 0x8d, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0x2a, 0xca, 0x04, 0x0a, 0x1a, 0x45, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x69,
	0x64, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x23, 0x0a, 0x1f, 0x45, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f,
	0x6e, 0x65, 0x10, 0x00, 0x12, 0x32, 0x0a, 0x22, 0x45, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x47, 0x75, 0x69, 0x64, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x61, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x10, 0x01, 0x1a, 0x0a, 0xaa, 0xb6,
	0x18, 0x06, 0xe8, 0x83, 0xbd, 0xe5, 0x8a, 0x9b, 0x12, 0x37, 0x0a, 0x24, 0x45, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54,
	0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x10, 0x02, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xe5, 0x88,
	0x86, 0x12, 0x49, 0x0a, 0x2a, 0x45, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x69,
	0x64, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x4e, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x10,
	0x03, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe6, 0x9c, 0xaa, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8,
	0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0x12, 0x4d, 0x0a, 0x2e,
	0x45, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x54, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x6f, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x10, 0x04,
	0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe6, 0x9c, 0xaa, 0xe5, 0x8d, 0x87, 0xe7, 0xba, 0xa7, 0xe9,
	0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0x12, 0x4e, 0x0a, 0x31, 0x45,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x54, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x47, 0x75, 0x69, 0x64, 0x65, 0x53, 0x74, 0x65, 0x70, 0x54, 0x4c, 0x6f, 0x67,
	0x10, 0x05, 0x1a, 0x17, 0xaa, 0xb6, 0x18, 0x13, 0xe6, 0x9c, 0xaa, 0xe5, 0xae, 0x8c, 0xe6, 0x88,
	0x90, 0xe5, 0xbc, 0x95, 0xe5, 0xaf, 0xbc, 0x54, 0x4c, 0x6f, 0x67, 0x12, 0x49, 0x0a, 0x2d, 0x45,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x54, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x69, 0x6e, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6e, 0x74, 0x10, 0x06, 0x1a, 0x16,
	0xaa, 0xb6, 0x18, 0x12, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x91, 0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97,
	0xe5, 0x9c, 0xba, 0xe6, 0xac, 0xa1, 0x12, 0x41, 0x0a, 0x2b, 0x45, 0x44, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x61, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x53, 0x74, 0x65, 0x70,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x10, 0x07, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x96, 0xb0,
	0xe6, 0x89, 0x8b, 0xe5, 0x88, 0x86, 0xe5, 0x80, 0xbc, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x54, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x61, 0x78, 0x10, 0x08, 0x2a, 0x90, 0x08,
	0x0a, 0x1a, 0x45, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x65, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f,
	0x45, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10,
	0x00, 0x12, 0x2d, 0x0a, 0x1d, 0x45, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x69,
	0x64, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x48, 0x70, 0x10, 0x01, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe8, 0xa1, 0x80, 0xe9, 0x87, 0x8f,
	0x12, 0x30, 0x0a, 0x20, 0x45, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x69, 0x64,
	0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x10, 0x02, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe7, 0xad, 0x89, 0xe7,
	0xba, 0xa7, 0x12, 0x3e, 0x0a, 0x28, 0x45, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x75,
	0x69, 0x64, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x10, 0x03,
	0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x8d, 0xa1, 0xe6, 0xb1, 0xa0, 0xe7, 0xad, 0x89, 0xe7,
	0xba, 0xa7, 0x12, 0x2f, 0x0a, 0x1f, 0x45, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x75,
	0x69, 0x64, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x10, 0x04, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe9, 0x87, 0x91,
	0xe5, 0xb8, 0x81, 0x12, 0x37, 0x0a, 0x27, 0x45, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47,
	0x75, 0x69, 0x64, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x4c, 0x6f, 0x73, 0x65, 0x10, 0x05,
	0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe8, 0xbf, 0x9e, 0xe8, 0xb4, 0xa5, 0x12, 0x57, 0x0a, 0x2f,
	0x45, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x6c, 0x6f, 0x74, 0x41,
	0x6e, 0x64, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x4e, 0x75, 0x6d, 0x10,
	0x06, 0x1a, 0x22, 0xaa, 0xb6, 0x18, 0x1e, 0xe5, 0xa4, 0x87, 0xe6, 0x88, 0x98, 0xe5, 0x8c, 0xba,
	0xe5, 0x92, 0x8c, 0xe6, 0x88, 0x98, 0xe5, 0x9c, 0xba, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe6,
	0x80, 0xbb, 0xe6, 0x95, 0xb0, 0x12, 0x4f, 0x0a, 0x2d, 0x45, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x47, 0x75, 0x69, 0x64, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x10, 0x07, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe6, 0xbf,
	0x80, 0xe6, 0xb4, 0xbb, 0xe7, 0x9a, 0x84, 0xe6, 0x80, 0xbb, 0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a,
	0xe5, 0xb1, 0x82, 0xe6, 0x95, 0xb0, 0x12, 0x44, 0x0a, 0x2b, 0x45, 0x44, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x61, 0x63, 0x6b, 0x70, 0x61, 0x63, 0x6b, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x4e, 0x75, 0x6d, 0x10, 0x08, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe8, 0x83, 0x8c,
	0xe5, 0x8c, 0x85, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0xe6, 0x95, 0xb0, 0x12, 0x38, 0x0a, 0x25,
	0x45, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x6f, 0x74, 0x6f, 0x61,
	0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x10, 0x09, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe6, 0x80, 0xbb,
	0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81, 0x12, 0x45, 0x0a, 0x26, 0x45, 0x44, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x6c, 0x6f, 0x74, 0x48, 0x65, 0x72, 0x6f, 0x4e, 0x75, 0x6d,
	0x10, 0x0a, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe5, 0xa4, 0x87, 0xe6, 0x88, 0x98, 0xe5, 0x8c,
	0xba, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe6, 0x80, 0xbb, 0xe6, 0x95, 0xb0, 0x12, 0x44, 0x0a,
	0x28, 0x45, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x65, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x4e, 0x75, 0x6d, 0x10, 0x0b, 0x1a, 0x16, 0xaa, 0xb6, 0x18,
	0x12, 0xe6, 0x88, 0x98, 0xe5, 0x9c, 0xba, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe6, 0x80, 0xbb,
	0xe6, 0x95, 0xb0, 0x12, 0x42, 0x0a, 0x26, 0x45, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47,
	0x75, 0x69, 0x64, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x55, 0x73, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6e, 0x74, 0x10, 0x0c, 0x1a,
	0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe6, 0x8a, 0x80, 0xe8, 0x83,
	0xbd, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12, 0x3b, 0x0a, 0x25, 0x45, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x10, 0x0d, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe7, 0xad,
	0x89, 0xe7, 0xba, 0xa7, 0x12, 0x44, 0x0a, 0x28, 0x45, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x47, 0x75, 0x69, 0x64, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x45, 0x78, 0x70, 0x34, 0x4e, 0x65, 0x78, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x10, 0x0e, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0x8d, 0x87, 0xe7, 0xba, 0xa7, 0xe6, 0x89,
	0x80, 0xe9, 0x9c, 0x80, 0xe7, 0xbb, 0x8f, 0xe9, 0xaa, 0x8c, 0x12, 0x3e, 0x0a, 0x28, 0x45, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x61, 0x78, 0x50, 0x6f, 0x70, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0f, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x9c,
	0x80, 0xe5, 0xa4, 0xa7, 0xe4, 0xba, 0xba, 0xe5, 0x8f, 0xa3, 0x1a, 0x04, 0xa0, 0xf9, 0x2b, 0x01,
	0x2a, 0xa5, 0x02, 0x0a, 0x22, 0x45, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x69,
	0x64, 0x65, 0x54, 0x69, 0x70, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x27, 0x45, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x65, 0x54, 0x69, 0x70, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f,
	0x6e, 0x65, 0x10, 0x00, 0x12, 0x3b, 0x0a, 0x28, 0x45, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x47, 0x75, 0x69, 0x64, 0x65, 0x54, 0x69, 0x70, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x69, 0x6d, 0x65, 0x72,
	0x10, 0x01, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe5, 0xae, 0x9a, 0xe6, 0x97, 0xb6, 0xe5, 0x99,
	0xa8, 0x12, 0x3e, 0x0a, 0x28, 0x45, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x69,
	0x64, 0x65, 0x54, 0x69, 0x70, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x02, 0x1a,
	0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f,
	0x91, 0x12, 0x4f, 0x0a, 0x33, 0x45, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x69,
	0x64, 0x65, 0x54, 0x69, 0x70, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x03, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12,
	0xe7, 0x8e, 0xa9, 0xe5, 0xae, 0xb6, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe5, 0x8f, 0x98, 0xe6,
	0x9b, 0xb4, 0x1a, 0x04, 0xa0, 0xf9, 0x2b, 0x01, 0x2a, 0x96, 0x01, 0x0a, 0x20, 0x45, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x65, 0x54, 0x69, 0x70, 0x55, 0x49, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x73, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x29, 0x0a,
	0x25, 0x45, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x65, 0x54, 0x69,
	0x70, 0x55, 0x49, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x73, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x41, 0x0a, 0x2b, 0x45, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x65, 0x54, 0x69, 0x70, 0x55, 0x49, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x73, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x47, 0x75, 0x69, 0x64, 0x65, 0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5,
	0x85, 0xb3, 0xe9, 0x97, 0xad, 0xe5, 0xbc, 0x95, 0xe5, 0xaf, 0xbc, 0x1a, 0x04, 0xa0, 0xf9, 0x2b,
	0x01, 0x2a, 0x93, 0x01, 0x0a, 0x1e, 0x45, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x75,
	0x69, 0x64, 0x65, 0x54, 0x69, 0x70, 0x50, 0x72, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x47, 0x75, 0x69, 0x64, 0x65, 0x54, 0x69, 0x70, 0x50, 0x72, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x42, 0x0a,
	0x29, 0x45, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x65, 0x54, 0x69,
	0x70, 0x50, 0x72, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x53, 0x65, 0x74, 0x53, 0x69, 0x64, 0x65, 0x42, 0x61, 0x72, 0x10, 0x01, 0x1a, 0x13, 0xaa, 0xb6,
	0x18, 0x0f, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe4, 0xbe, 0xa7, 0xe8, 0xbe, 0xb9, 0xe6, 0xa0,
	0x8f, 0x1a, 0x04, 0xa0, 0xf9, 0x2b, 0x01, 0x2a, 0xbf, 0x03, 0x0a, 0x1c, 0x45, 0x4e, 0x42, 0x48,
	0x65, 0x6c, 0x70, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x4e, 0x42, 0x48,
	0x65, 0x6c, 0x70, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12,
	0x31, 0x0a, 0x21, 0x45, 0x4e, 0x42, 0x48, 0x65, 0x6c, 0x70, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x4c, 0x6f, 0x72, 0x64, 0x10, 0x01, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe6, 0xa3, 0x8b, 0xe6,
	0x89, 0x8b, 0x12, 0x3d, 0x0a, 0x27, 0x45, 0x4e, 0x42, 0x48, 0x65, 0x6c, 0x70, 0x55, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x02, 0x1a,
	0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0xbf, 0x9b, 0xe5, 0x85, 0xa5, 0xe5, 0x9b, 0x9e, 0xe5, 0x90,
	0x88, 0x12, 0x48, 0x0a, 0x2c, 0x45, 0x4e, 0x42, 0x48, 0x65, 0x6c, 0x70, 0x55, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x10, 0x03, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe8, 0xbf, 0x9b, 0xe5, 0x85, 0xa5, 0xe5,
	0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x12, 0x40, 0x0a, 0x26, 0x45,
	0x4e, 0x42, 0x48, 0x65, 0x6c, 0x70, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x76, 0x70, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x10, 0x04, 0x1a, 0x14, 0xaa, 0xb6, 0x18, 0x10, 0xe7, 0xac, 0xac,
	0x6e, 0xe6, 0xac, 0xa1, 0x70, 0x76, 0x70, 0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97, 0x12, 0x3b, 0x0a,
	0x25, 0x45, 0x4e, 0x42, 0x48, 0x65, 0x6c, 0x70, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x65,
	0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x10, 0x05, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0x8e,
	0xb7, 0xe5, 0xbe, 0x97, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0x12, 0x3d, 0x0a, 0x27, 0x45, 0x4e,
	0x42, 0x48, 0x65, 0x6c, 0x70, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x72, 0x6f, 0x70, 0x54,
	0x61, 0x6c, 0x65, 0x6e, 0x74, 0x10, 0x06, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x8e, 0x89,
	0xe8, 0x90, 0xbd, 0xe5, 0xa4, 0xa9, 0xe8, 0xb5, 0x8b, 0x2a, 0xea, 0x01, 0x0a, 0x17, 0x45, 0x4e,
	0x42, 0x55, 0x49, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x55, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x4e, 0x42, 0x55, 0x49, 0x4e, 0x61,
	0x6d, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x35, 0x0a, 0x1f, 0x45, 0x4e, 0x42, 0x55, 0x49,
	0x4e, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6,
	0x18, 0x0c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe8, 0xa7, 0xa3, 0xe9, 0x94, 0x81, 0x12, 0x39,
	0x0a, 0x23, 0x45, 0x4e, 0x42, 0x55, 0x49, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x55,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x02, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0xae, 0x8c,
	0xe6, 0x88, 0x90, 0xe8, 0xae, 0xa1, 0xe6, 0x95, 0xb0, 0x12, 0x3b, 0x0a, 0x25, 0x45, 0x4e, 0x42,
	0x55, 0x49, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x79, 0x10, 0x03, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0xae, 0x8c, 0xe6, 0x88, 0x90,
	0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0x2a, 0xe9, 0x01, 0x0a, 0x17, 0x45, 0x4e, 0x42, 0x55, 0x49,
	0x4e, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x4e, 0x42, 0x55, 0x49, 0x4e, 0x61, 0x6d, 0x65, 0x48,
	0x69, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f,
	0x6e, 0x65, 0x10, 0x00, 0x12, 0x2d, 0x0a, 0x1d, 0x45, 0x4e, 0x42, 0x55, 0x49, 0x4e, 0x61, 0x6d,
	0x65, 0x48, 0x69, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x43, 0x6c, 0x69, 0x63, 0x6b, 0x10, 0x01, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe7, 0x82, 0xb9,
	0xe5, 0x87, 0xbb, 0x12, 0x3b, 0x0a, 0x23, 0x45, 0x4e, 0x42, 0x55, 0x49, 0x4e, 0x61, 0x6d, 0x65,
	0x48, 0x69, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f,
	0x70, 0x65, 0x6e, 0x55, 0x49, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x10, 0x02, 0x1a, 0x12, 0xaa, 0xb6,
	0x18, 0x0e, 0xe6, 0x89, 0x93, 0xe5, 0xbc, 0x80, 0x55, 0x49, 0xe5, 0xbc, 0xb9, 0xe7, 0xaa, 0x97,
	0x12, 0x40, 0x0a, 0x24, 0x45, 0x4e, 0x42, 0x55, 0x49, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x6e,
	0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x65, 0x6e, 0x64,
	0x51, 0x75, 0x69, 0x63, 0x6b, 0x4d, 0x73, 0x67, 0x10, 0x03, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12,
	0xe5, 0x8f, 0x91, 0xe9, 0x80, 0x81, 0xe4, 0xbe, 0xbf, 0xe6, 0x8d, 0xb7, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x2a, 0xd5, 0x01, 0x0a, 0x14, 0x45, 0x4e, 0x42, 0x55, 0x49, 0x4e, 0x61, 0x6d, 0x65,
	0x48, 0x69, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x45,
	0x4e, 0x42, 0x55, 0x49, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x1a, 0x45, 0x4e,
	0x42, 0x55, 0x49, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x10, 0x01, 0x1a, 0x07, 0xaa, 0xb6, 0x18, 0x03,
	0xe5, 0x8f, 0xb3, 0x12, 0x26, 0x0a, 0x19, 0x45, 0x4e, 0x42, 0x55, 0x49, 0x4e, 0x61, 0x6d, 0x65,
	0x48, 0x69, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x65, 0x66, 0x74,
	0x10, 0x02, 0x1a, 0x07, 0xaa, 0xb6, 0x18, 0x03, 0xe5, 0xb7, 0xa6, 0x12, 0x25, 0x0a, 0x18, 0x45,
	0x4e, 0x42, 0x55, 0x49, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x54, 0x6f, 0x70, 0x10, 0x03, 0x1a, 0x07, 0xaa, 0xb6, 0x18, 0x03, 0xe4,
	0xb8, 0x8a, 0x12, 0x26, 0x0a, 0x19, 0x45, 0x4e, 0x42, 0x55, 0x49, 0x4e, 0x61, 0x6d, 0x65, 0x48,
	0x69, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x6f, 0x77, 0x6e, 0x10,
	0x04, 0x1a, 0x07, 0xaa, 0xb6, 0x18, 0x03, 0xe4, 0xb8, 0x8b, 0x2a, 0x8f, 0x01, 0x0a, 0x10, 0x45,
	0x57, 0x61, 0x72, 0x6d, 0x41, 0x49, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x57, 0x61, 0x72, 0x6d, 0x41, 0x49, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10,
	0x00, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x99, 0xae, 0xe9, 0x80, 0x9a, 0xe6, 0x8a, 0x95,
	0xe6, 0x94, 0xbe, 0x12, 0x2c, 0x0a, 0x11, 0x57, 0x61, 0x72, 0x6d, 0x41, 0x49, 0x41, 0x6c, 0x6c,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x49, 0x10, 0x01, 0x1a, 0x15, 0xaa, 0xb6, 0x18, 0x11,
	0xe5, 0x85, 0xa8, 0xe9, 0x87, 0x8f, 0xe8, 0xa1, 0x8c, 0xe4, 0xb8, 0xba, 0xe6, 0xa0, 0x91, 0x41,
	0x49, 0x12, 0x29, 0x0a, 0x11, 0x57, 0x61, 0x72, 0x6d, 0x41, 0x49, 0x41, 0x6c, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x41, 0x49, 0x10, 0x02, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0xe5, 0x85,
	0xa8, 0xe9, 0x87, 0x8f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x49, 0x2a, 0x44, 0x0a, 0x0f,
	0x45, 0x50, 0x56, 0x50, 0x4c, 0x6f, 0x72, 0x64, 0x55, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x55, 0x53, 0x45, 0x5f, 0x54, 0x4f, 0x50, 0x10, 0x00, 0x1a, 0x0b, 0xaa, 0xb6,
	0x18, 0x07, 0xe5, 0x89, 0x8d, 0x4e, 0xe6, 0xac, 0xa1, 0x12, 0x17, 0x0a, 0x06, 0x55, 0x53, 0x45,
	0x5f, 0x49, 0x4e, 0x10, 0x01, 0x1a, 0x0b, 0xaa, 0xb6, 0x18, 0x07, 0xe7, 0xac, 0xac, 0x4e, 0xe6,
	0xac, 0xa1, 0x2a, 0x4b, 0x0a, 0x12, 0x45, 0x41, 0x49, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x43, 0x68, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x09, 0x43, 0x48, 0x45, 0x43,
	0x4b, 0x5f, 0x54, 0x4f, 0x50, 0x10, 0x00, 0x1a, 0x0b, 0xaa, 0xb6, 0x18, 0x07, 0xe5, 0x89, 0x8d,
	0x4e, 0xe5, 0xb1, 0x80, 0x12, 0x19, 0x0a, 0x08, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x49, 0x4e,
	0x10, 0x01, 0x1a, 0x0b, 0xaa, 0xb6, 0x18, 0x07, 0xe7, 0xac, 0xac, 0x4e, 0xe5, 0xb1, 0x80, 0x2a,
	0xb6, 0x01, 0x0a, 0x12, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x49, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x41, 0x0a, 0x16, 0x41, 0x49, 0x46, 0x6c, 0x61, 0x67,
	0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x42, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x10, 0x00, 0x1a, 0x25, 0xaa, 0xb6, 0x18, 0x21, 0xe8, 0xa1, 0x8c, 0xe4, 0xb8, 0xba, 0xe6, 0xa0,
	0x91, 0x41, 0x49, 0xe6, 0xa0, 0x87, 0xe8, 0xae, 0xb0, 0x5f, 0xe6, 0x8b, 0x8d, 0xe5, 0x8d, 0x96,
	0xe4, 0xb8, 0x8d, 0xe7, 0xab, 0x9e, 0xe4, 0xbb, 0xb7, 0x12, 0x48, 0x0a, 0x17, 0x41, 0x49, 0x46,
	0x6c, 0x61, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x42, 0x69, 0x67, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x10, 0x01, 0x1a, 0x2b, 0xaa, 0xb6, 0x18, 0x27, 0xe8, 0xa1, 0x8c, 0xe4,
	0xb8, 0xba, 0xe6, 0xa0, 0x91, 0x41, 0x49, 0xe6, 0xa0, 0x87, 0xe8, 0xae, 0xb0, 0x5f, 0xe9, 0x98,
	0xb5, 0xe5, 0xae, 0xb9, 0xe4, 0xbc, 0x98, 0xe5, 0x85, 0x88, 0xe5, 0xa4, 0xa7, 0xe7, 0xbe, 0x81,
	0xe7, 0xbb, 0x8a, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x49, 0x46, 0x6c, 0x61, 0x67, 0x4d, 0x61, 0x78,
	0x10, 0x20, 0x1a, 0x04, 0x88, 0xf9, 0x2b, 0x01, 0x2a, 0x65, 0x0a, 0x0f, 0x45, 0x4e, 0x65, 0x77,
	0x62, 0x69, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0b, 0x54,
	0x41, 0x53, 0x4b, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x10, 0x00, 0x1a, 0x16, 0xaa, 0xb6,
	0x18, 0x12, 0xe9, 0x80, 0x9a, 0xe7, 0x94, 0xa8, 0xe6, 0x96, 0xb0, 0xe6, 0x89, 0x8b, 0xe4, 0xbb,
	0xbb, 0xe5, 0x8a, 0xa1, 0x12, 0x29, 0x0a, 0x0d, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x50, 0x52, 0x4f,
	0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe8, 0xbf, 0x9b,
	0xe5, 0xba, 0xa6, 0xe6, 0x96, 0xb0, 0xe6, 0x89, 0x8b, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x2a,
	0x61, 0x0a, 0x0d, 0x45, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x27, 0x0a, 0x11, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49,
	0x41, 0x4d, 0x4f, 0x4e, 0x44, 0x10, 0x00, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe9, 0x92, 0xbb,
	0xe7, 0x9f, 0xb3, 0xe5, 0x8d, 0xa1, 0xe5, 0x8c, 0x85, 0x12, 0x27, 0x0a, 0x11, 0x43, 0x41, 0x52,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x50, 0x4f, 0x4e, 0x53, 0x10, 0x01,
	0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe7, 0x82, 0xb9, 0xe5, 0x88, 0xb8, 0xe5, 0x8d, 0xa1, 0xe5,
	0x8c, 0x85, 0x2a, 0xf1, 0x05, 0x0a, 0x14, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x65, 0x6c, 0x70, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe6, 0x97,
	0xa0, 0xe6, 0x95, 0x88, 0xe5, 0x80, 0xbc, 0x12, 0x23, 0x0a, 0x0a, 0x42, 0x41, 0x54, 0x54, 0x4c,
	0x45, 0x50, 0x41, 0x53, 0x53, 0x10, 0x01, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe6, 0x88, 0x98,
	0xe4, 0xbb, 0xa4, 0xe4, 0xb8, 0xbb, 0xe7, 0x95, 0x8c, 0xe9, 0x9d, 0xa2, 0x12, 0x21, 0x0a, 0x0b,
	0x48, 0x45, 0x52, 0x4f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x10, 0x02, 0x1a, 0x10, 0xaa,
	0xb6, 0x18, 0x0c, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe6, 0x94, 0xb6, 0xe9, 0x9b, 0x86, 0x12,
	0x22, 0x0a, 0x0c, 0x4e, 0x45, 0x57, 0x42, 0x49, 0x52, 0x41, 0x43, 0x54, 0x49, 0x54, 0x59, 0x10,
	0x03, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x96, 0xb0, 0xe6, 0x89, 0x8b, 0xe6, 0xb4, 0xbb,
	0xe5, 0x8a, 0xa8, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x57,
	0x45, 0x41, 0x4c, 0x10, 0x04, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x85, 0x91, 0xe6, 0x8d,
	0xa2, 0xe6, 0xb4, 0xbb, 0xe5, 0x8a, 0xa8, 0x12, 0x20, 0x0a, 0x0a, 0x47, 0x4c, 0x4f, 0x52, 0x59,
	0x54, 0x49, 0x54, 0x4c, 0x45, 0x10, 0x05, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0xa3, 0x8b,
	0xe6, 0x89, 0x8b, 0xe5, 0xa4, 0xb4, 0xe8, 0xa1, 0x94, 0x12, 0x21, 0x0a, 0x0b, 0x47, 0x41, 0x4d,
	0x45, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x06, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c,
	0xe7, 0x8e, 0xa9, 0xe6, 0xb3, 0x95, 0xe4, 0xb8, 0xad, 0xe5, 0xbf, 0x83, 0x12, 0x24, 0x0a, 0x0e,
	0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x53, 0x49, 0x44, 0x45, 0x10, 0x07,
	0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0xb1, 0x80, 0xe5, 0x86, 0x85, 0xe8, 0xae, 0xbe, 0xe7,
	0xbd, 0xae, 0x12, 0x15, 0x0a, 0x05, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x10, 0x08, 0x1a, 0x0a, 0xaa,
	0xb6, 0x18, 0x06, 0xe6, 0x88, 0x98, 0xe9, 0x98, 0x9f, 0x12, 0x24, 0x0a, 0x0b, 0x41, 0x43, 0x48,
	0x49, 0x45, 0x56, 0x45, 0x4d, 0x69, 0x61, 0x6e, 0x10, 0x09, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f,
	0xe6, 0x88, 0x90, 0xe5, 0xb0, 0xb1, 0xe4, 0xb8, 0xbb, 0xe9, 0xa1, 0xb5, 0xe9, 0x9d, 0xa2, 0x12,
	0x24, 0x0a, 0x0e, 0x47, 0x41, 0x4d, 0x45, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x54, 0x52, 0x49,
	0x50, 0x10, 0x0a, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe4,
	0xb9, 0x8b, 0xe6, 0x97, 0x85, 0x12, 0x2b, 0x0a, 0x0f, 0x47, 0x41, 0x4d, 0x45, 0x53, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x41, 0x57, 0x41, 0x52, 0x44, 0x10, 0x0b, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12,
	0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe4, 0xb9, 0x8b, 0xe6, 0x97, 0x85, 0xe5, 0xa5, 0x96, 0xe5,
	0x8a, 0xb1, 0x12, 0x1e, 0x0a, 0x08, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x4f, 0x55, 0x54, 0x10, 0x0c,
	0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x88, 0x98, 0xe9, 0x98, 0x9f, 0xe7, 0xa4, 0xbe, 0xe5,
	0x9b, 0xa2, 0x12, 0x2c, 0x0a, 0x10, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x48, 0x45, 0x4c, 0x50, 0x5f,
	0x49, 0x4e, 0x53, 0x49, 0x44, 0x45, 0x10, 0x0d, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0xb1,
	0x80, 0xe5, 0x86, 0x85, 0xe9, 0x98, 0xb6, 0xe6, 0xae, 0xb5, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba,
	0x12, 0x1a, 0x0a, 0x0a, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x41, 0x54, 0x4c, 0x41, 0x53, 0x10, 0x0e,
	0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0x9b, 0xbe, 0xe9, 0x89, 0xb4, 0x12, 0x2a, 0x0a, 0x14,
	0x47, 0x41, 0x4d, 0x45, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x49, 0x43, 0x41, 0x4c, 0x53, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x10, 0x0f, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0xb5, 0x9b, 0xe5,
	0xad, 0xa3, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x12, 0x22, 0x0a, 0x0c, 0x47, 0x41, 0x4d, 0x45,
	0x4d, 0x41, 0x52, 0x4b, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x10, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c,
	0xe7, 0x8e, 0x8b, 0xe8, 0x80, 0x85, 0xe5, 0x8d, 0xb0, 0xe8, 0xae, 0xb0, 0x12, 0x2b, 0x0a, 0x12,
	0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x53, 0x5f, 0x52, 0x55,
	0x4c, 0x45, 0x10, 0x11, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe5, 0xbc, 0x83, 0xe7, 0x89, 0x8c,
	0xe5, 0xba, 0x93, 0xe8, 0xa7, 0x84, 0xe5, 0x88, 0x99, 0x12, 0x22, 0x0a, 0x0f, 0x50, 0x45, 0x52,
	0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x12, 0x1a, 0x0d,
	0xaa, 0xb6, 0x18, 0x09, 0xe4, 0xb8, 0xaa, 0xe6, 0x80, 0xa7, 0xe5, 0x8c, 0x96, 0x12, 0x27, 0x0a,
	0x11, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45,
	0x4e, 0x44, 0x10, 0x13, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe9, 0x98, 0xb5, 0xe5, 0xae, 0xb9,
	0xe6, 0x8e, 0xa8, 0xe8, 0x8d, 0x90, 0x2a, 0xa4, 0x02, 0x0a, 0x0f, 0x4e, 0x42, 0x5f, 0x54, 0x52,
	0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x09, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x48, 0x61, 0x6c, 0x6c, 0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0xbf, 0x9b, 0xe5,
	0x85, 0xa5, 0xe5, 0xa4, 0xa7, 0xe5, 0x8e, 0x85, 0x12, 0x29, 0x0a, 0x13, 0x4e, 0x65, 0x77, 0x62,
	0x69, 0x65, 0x47, 0x75, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x10,
	0x02, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0xbc, 0x95, 0xe5, 0xaf, 0xbc, 0xe5, 0xae, 0x8c,
	0xe6, 0x88, 0x90, 0x12, 0x30, 0x0a, 0x14, 0x4e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x03, 0x1a, 0x16, 0xaa,
	0xb6, 0x18, 0x12, 0xe6, 0x96, 0xb0, 0xe6, 0x89, 0x8b, 0xe5, 0x85, 0xb3, 0xe5, 0x8d, 0xa1, 0xe5,
	0xae, 0x8c, 0xe6, 0x88, 0x90, 0x12, 0x2f, 0x0a, 0x13, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x6e, 0x69, 0x6d, 0x45, 0x6e, 0x64, 0x10, 0x04, 0x1a, 0x16,
	0xaa, 0xb6, 0x18, 0x12, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe8, 0xa7, 0xa3, 0xe9, 0x94, 0x81,
	0xe5, 0xae, 0x8c, 0xe6, 0x88, 0x90, 0x12, 0x2b, 0x0a, 0x0f, 0x49, 0x6e, 0x50, 0x56, 0x50, 0x43,
	0x68, 0x6f, 0x6f, 0x73, 0x65, 0x4c, 0x6f, 0x72, 0x64, 0x10, 0x05, 0x1a, 0x16, 0xaa, 0xb6, 0x18,
	0x12, 0xe8, 0xbf, 0x9b, 0xe5, 0x85, 0xa5, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe9, 0x80, 0x89,
	0xe6, 0x8b, 0xa9, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x75, 0x61, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x10, 0x06, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0x4c, 0x75,
	0x61, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0x2a, 0xbe, 0x02,
	0x0a, 0x11, 0x4e, 0x42, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x42, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a,
	0x0f, 0x4e, 0x65, 0x77, 0x62, 0x69, 0x65, 0x47, 0x75, 0x69, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0xbc, 0x95, 0xe5, 0xaf, 0xbc, 0xe7, 0x8a,
	0xb6, 0xe6, 0x80, 0x81, 0x12, 0x27, 0x0a, 0x0b, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x10, 0x02, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0xae, 0x8c, 0xe6, 0x88,
	0x90, 0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97, 0xe5, 0x9c, 0xba, 0xe6, 0xac, 0xa1, 0x12, 0x2c, 0x0a,
	0x10, 0x46, 0x69, 0x72, 0x73, 0x74, 0x41, 0x72, 0x72, 0x69, 0x76, 0x65, 0x64, 0x52, 0x61, 0x6e,
	0x6b, 0x10, 0x03, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe9, 0xa6, 0x96, 0xe6, 0xac, 0xa1, 0xe8,
	0xbe, 0xbe, 0xe5, 0x88, 0xb0, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0x12, 0x34, 0x0a, 0x15, 0x54,
	0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x6f, 0x6b, 0x6c, 0x65, 0x74, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x10, 0x04, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe8, 0xae, 0xad, 0xe7,
	0xbb, 0x83, 0xe5, 0x86, 0x8c, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe5, 0xae, 0x8c, 0xe6, 0x88,
	0x90, 0x12, 0x29, 0x0a, 0x0d, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x10, 0x05, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0x88, 0x90, 0xe5, 0xb0, 0xb1,
	0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe5, 0xae, 0x8c, 0xe6, 0x88, 0x90, 0x12, 0x30, 0x0a, 0x14,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x74,
	0x74, 0x61, 0x69, 0x6e, 0x10, 0x06, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe8, 0xa7, 0x92, 0xe8,
	0x89, 0xb2, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0xe8, 0xbe, 0xbe, 0xe5, 0x88, 0xb0, 0x2a, 0x96,
	0x01, 0x0a, 0x0c, 0x4e, 0x42, 0x5f, 0x53, 0x41, 0x56, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12,
	0x1c, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x10, 0x00, 0x1a, 0x10, 0xaa, 0xb6, 0x18,
	0x0c, 0xe6, 0xb0, 0xb8, 0xe4, 0xb9, 0x85, 0xe4, 0xbf, 0x9d, 0xe5, 0xad, 0x98, 0x12, 0x24, 0x0a,
	0x08, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x10, 0x01, 0x1a, 0x16, 0xaa, 0xb6, 0x18,
	0x12, 0xe9, 0x87, 0x8d, 0xe5, 0x90, 0xaf, 0xe6, 0xb8, 0xb8, 0xe6, 0x88, 0x8f, 0xe9, 0x87, 0x8d,
	0xe7, 0xbd, 0xae, 0x12, 0x25, 0x0a, 0x09, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x66, 0x65,
	0x10, 0x02, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0x88, 0x87, 0xe6, 0x8d, 0xa2, 0xe5, 0x85,
	0xb3, 0xe5, 0x8d, 0xa1, 0xe9, 0x87, 0x8d, 0xe7, 0xbd, 0xae, 0x12, 0x1b, 0x0a, 0x08, 0x44, 0x6f,
	0x6e, 0x74, 0x53, 0x61, 0x76, 0x65, 0x10, 0x03, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe4, 0xb8,
	0x8d, 0xe4, 0xbf, 0x9d, 0xe5, 0xad, 0x98, 0x2a, 0x3a, 0x0a, 0x11, 0x4e, 0x42, 0x5f, 0x49, 0x4e,
	0x54, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x52, 0x12, 0x11, 0x0a, 0x04,
	0x4c, 0x65, 0x66, 0x74, 0x10, 0x00, 0x1a, 0x07, 0xaa, 0xb6, 0x18, 0x03, 0xe5, 0xb7, 0xa6, 0x12,
	0x12, 0x0a, 0x05, 0x52, 0x69, 0x67, 0x68, 0x74, 0x10, 0x01, 0x1a, 0x07, 0xaa, 0xb6, 0x18, 0x03,
	0xe5, 0x8f, 0xb3, 0x2a, 0xa2, 0x02, 0x0a, 0x14, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c,
	0x54, 0x69, 0x70, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x1a,
	0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x69, 0x70, 0x41, 0x6c, 0x69, 0x67, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x10, 0x00, 0x1a, 0x07, 0xaa, 0xb6,
	0x18, 0x03, 0xe5, 0x8f, 0xb3, 0x12, 0x26, 0x0a, 0x19, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61,
	0x6c, 0x54, 0x69, 0x70, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x65,
	0x66, 0x74, 0x10, 0x01, 0x1a, 0x07, 0xaa, 0xb6, 0x18, 0x03, 0xe5, 0xb7, 0xa6, 0x12, 0x25, 0x0a,
	0x18, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x69, 0x70, 0x41, 0x6c, 0x69, 0x67,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x6f, 0x70, 0x10, 0x02, 0x1a, 0x07, 0xaa, 0xb6, 0x18,
	0x03, 0xe4, 0xb8, 0x8a, 0x12, 0x26, 0x0a, 0x19, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c,
	0x54, 0x69, 0x70, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x6f, 0x77,
	0x6e, 0x10, 0x03, 0x1a, 0x07, 0xaa, 0xb6, 0x18, 0x03, 0xe4, 0xb8, 0x8b, 0x12, 0x37, 0x0a, 0x21,
	0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x69, 0x70, 0x41, 0x6c, 0x69, 0x67, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x10, 0x04, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x90, 0x88, 0xe6, 0x88, 0x90, 0xe8,
	0xa3, 0x85, 0xe5, 0xa4, 0x87, 0x12, 0x2b, 0x0a, 0x1b, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61,
	0x6c, 0x54, 0x69, 0x70, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x65,
	0x74, 0x74, 0x65, 0x72, 0x10, 0x05, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe7, 0xbe, 0x81, 0xe7,
	0xbb, 0x8a, 0x1a, 0x04, 0xa0, 0xf9, 0x2b, 0x01, 0x2a, 0x9e, 0x03, 0x0a, 0x13, 0x54, 0x75, 0x74,
	0x6f, 0x72, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x6e, 0x67, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x18, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x6e, 0x67,
	0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x28,
	0x0a, 0x18, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x6e, 0x67, 0x75, 0x72,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x65, 0x63, 0x74, 0x10, 0x01, 0x1a, 0x0a, 0xaa, 0xb6,
	0x18, 0x06, 0xe7, 0x9f, 0xa9, 0xe5, 0xbd, 0xa2, 0x12, 0x33, 0x0a, 0x1d, 0x54, 0x75, 0x74, 0x6f,
	0x72, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x6e, 0x67, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x44, 0x72, 0x61, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x10, 0x02, 0x1a, 0x10, 0xaa, 0xb6, 0x18,
	0x0c, 0xe6, 0x8b, 0x96, 0xe5, 0x8a, 0xa8, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0x12, 0x29, 0x0a,
	0x19, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x6e, 0x67, 0x75, 0x72, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x10, 0x03, 0x1a, 0x0a, 0xaa, 0xb6,
	0x18, 0x06, 0xe5, 0x9c, 0x86, 0xe5, 0xbd, 0xa2, 0x12, 0x31, 0x0a, 0x1c, 0x54, 0x75, 0x74, 0x6f,
	0x72, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x6e, 0x67, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x43, 0x79, 0x63, 0x6c, 0x65, 0x42, 0x69, 0x67, 0x10, 0x04, 0x1a, 0x0f, 0xaa, 0xb6, 0x18, 0x0b,
	0xe5, 0x9c, 0x86, 0xe5, 0xbd, 0xa2, 0x28, 0xe5, 0xa4, 0xa7, 0x29, 0x12, 0x35, 0x0a, 0x1f, 0x54,
	0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x6e, 0x67, 0x75, 0x72, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x10, 0x05,
	0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe9, 0x80, 0x9a, 0xe7, 0x94, 0xa8, 0xe7, 0x82, 0xb9, 0xe5,
	0x87, 0xbb, 0x12, 0x34, 0x0a, 0x1e, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x46, 0x69,
	0x6e, 0x67, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x44, 0x72, 0x61, 0x67, 0x10, 0x06, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe9, 0x80, 0x9a, 0xe7,
	0x94, 0xa8, 0xe6, 0x8b, 0x96, 0xe6, 0x8b, 0xbd, 0x12, 0x39, 0x0a, 0x23, 0x54, 0x75, 0x74, 0x6f,
	0x72, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x6e, 0x67, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x6f, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x73, 0x73, 0x10,
	0x07, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe9, 0x80, 0x9a, 0xe7, 0x94, 0xa8, 0xe9, 0x95, 0xbf,
	0xe6, 0x8c, 0x89, 0x1a, 0x04, 0xa0, 0xf9, 0x2b, 0x01, 0x2a, 0xa1, 0x02, 0x0a, 0x16, 0x54, 0x75,
	0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x6e, 0x67, 0x75, 0x72, 0x65, 0x44, 0x69, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c,
	0x46, 0x69, 0x6e, 0x67, 0x75, 0x72, 0x65, 0x44, 0x69, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e,
	0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x1b, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61,
	0x6c, 0x46, 0x69, 0x6e, 0x67, 0x75, 0x72, 0x65, 0x44, 0x69, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x44, 0x6f, 0x77, 0x6e, 0x10, 0x01, 0x1a, 0x07, 0xaa, 0xb6, 0x18, 0x03, 0xe4, 0xb8, 0x8b, 0x12,
	0x2d, 0x0a, 0x1d, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x6e, 0x67, 0x75,
	0x72, 0x65, 0x44, 0x69, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x55, 0x70,
	0x10, 0x02, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0xb7, 0xa6, 0xe4, 0xb8, 0x8a, 0x12, 0x2e,
	0x0a, 0x1e, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x6e, 0x67, 0x75, 0x72,
	0x65, 0x44, 0x69, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x55, 0x70,
	0x10, 0x03, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0x8f, 0xb3, 0xe4, 0xb8, 0x8a, 0x12, 0x2f,
	0x0a, 0x1f, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x6e, 0x67, 0x75, 0x72,
	0x65, 0x44, 0x69, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x44, 0x6f, 0x77,
	0x6e, 0x10, 0x04, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0xb7, 0xa6, 0xe4, 0xb8, 0x8b, 0x12,
	0x26, 0x0a, 0x19, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x6e, 0x67, 0x75,
	0x72, 0x65, 0x44, 0x69, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x70, 0x10, 0x05, 0x1a, 0x07,
	0xaa, 0xb6, 0x18, 0x03, 0xe4, 0xb8, 0x8a, 0x1a, 0x04, 0xa0, 0xf9, 0x2b, 0x01, 0x2a, 0xe2, 0x05,
	0x0a, 0x10, 0x45, 0x4e, 0x42, 0x47, 0x75, 0x69, 0x64, 0x65, 0x54, 0x6c, 0x6f, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x4e, 0x42, 0x47, 0x75, 0x69, 0x64, 0x65, 0x54, 0x6c,
	0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x30, 0x0a,
	0x17, 0x45, 0x4e, 0x42, 0x47, 0x75, 0x69, 0x64, 0x65, 0x54, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x10, 0x01, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f,
	0xe7, 0xad, 0x96, 0xe5, 0x88, 0x92, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0x12,
	0x37, 0x0a, 0x1a, 0x45, 0x4e, 0x42, 0x47, 0x75, 0x69, 0x64, 0x65, 0x54, 0x6c, 0x6f, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x02, 0x1a,
	0x17, 0xaa, 0xb6, 0x18, 0x13, 0xe6, 0x95, 0x99, 0xe5, 0xad, 0xa6, 0x5f, 0xe5, 0x85, 0xb3, 0xe5,
	0x8d, 0xa1, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0x12, 0x35, 0x0a, 0x18, 0x45, 0x4e, 0x42, 0x47,
	0x75, 0x69, 0x64, 0x65, 0x54, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x61, 0x6d,
	0x65, 0x45, 0x6e, 0x64, 0x10, 0x03, 0x1a, 0x17, 0xaa, 0xb6, 0x18, 0x13, 0xe6, 0x95, 0x99, 0xe5,
	0xad, 0xa6, 0x5f, 0xe5, 0x85, 0xb3, 0xe5, 0x8d, 0xa1, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0x12,
	0x4a, 0x0a, 0x27, 0x45, 0x4e, 0x42, 0x47, 0x75, 0x69, 0x64, 0x65, 0x54, 0x6c, 0x6f, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x04, 0x1a, 0x1d, 0xaa, 0xb6,
	0x18, 0x19, 0xe6, 0x95, 0x99, 0xe5, 0xad, 0xa6, 0x5f, 0xe5, 0x87, 0x86, 0xe5, 0xa4, 0x87, 0xe9,
	0x98, 0xb6, 0xe6, 0xae, 0xb5, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0x12, 0x48, 0x0a, 0x25, 0x45,
	0x4e, 0x42, 0x47, 0x75, 0x69, 0x64, 0x65, 0x54, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x45, 0x6e, 0x64, 0x10, 0x05, 0x1a, 0x1d, 0xaa, 0xb6, 0x18, 0x19, 0xe6, 0x95, 0x99, 0xe5,
	0xad, 0xa6, 0x5f, 0xe5, 0x87, 0x86, 0xe5, 0xa4, 0x87, 0xe9, 0x98, 0xb6, 0xe6, 0xae, 0xb5, 0xe7,
	0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0x12, 0x31, 0x0a, 0x1a, 0x45, 0x4e, 0x42, 0x47, 0x75, 0x69, 0x64,
	0x65, 0x54, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x10, 0x06, 0x1a, 0x11, 0xaa, 0xb6, 0x18, 0x0d, 0xe6, 0x95, 0x99, 0xe5, 0xad,
	0xa6, 0x5f, 0xe8, 0xae, 0xa1, 0xe6, 0x97, 0xb6, 0x12, 0x45, 0x0a, 0x22, 0x45, 0x4e, 0x42, 0x47,
	0x75, 0x69, 0x64, 0x65, 0x54, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x46, 0x69, 0x6e, 0x67, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x10, 0x07,
	0x1a, 0x1d, 0xaa, 0xb6, 0x18, 0x19, 0xe6, 0x95, 0x99, 0xe5, 0xad, 0xa6, 0x5f, 0xe6, 0x89, 0x8b,
	0xe6, 0x8c, 0x87, 0xe8, 0xbe, 0x93, 0xe5, 0x85, 0xa5, 0xe8, 0xae, 0xa1, 0xe6, 0x95, 0xb0, 0x12,
	0x42, 0x0a, 0x1f, 0x45, 0x4e, 0x42, 0x47, 0x75, 0x69, 0x64, 0x65, 0x54, 0x6c, 0x6f, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x44, 0x69,
	0x66, 0x66, 0x10, 0x08, 0x1a, 0x1d, 0xaa, 0xb6, 0x18, 0x19, 0xe6, 0x95, 0x99, 0xe5, 0xad, 0xa6,
	0x5f, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe5, 0x9d, 0x90, 0xe6, 0xa0, 0x87, 0xe5, 0x81, 0x8f,
	0xe7, 0xa7, 0xbb, 0x12, 0x42, 0x0a, 0x1f, 0x45, 0x4e, 0x42, 0x47, 0x75, 0x69, 0x64, 0x65, 0x54,
	0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x09, 0x1a, 0x1d, 0xaa, 0xb6, 0x18, 0x19, 0xe6, 0x95,
	0x99, 0xe5, 0xad, 0xa6, 0x5f, 0xe5, 0x85, 0xb3, 0xe5, 0x8d, 0xa1, 0xe5, 0x9b, 0x9e, 0xe5, 0x90,
	0x88, 0xe6, 0x97, 0xb6, 0xe9, 0x95, 0xbf, 0x12, 0x37, 0x0a, 0x1a, 0x45, 0x4e, 0x42, 0x47, 0x75,
	0x69, 0x64, 0x65, 0x54, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x53, 0x6b, 0x69, 0x70, 0x10, 0x0a, 0x1a, 0x17, 0xaa, 0xb6, 0x18, 0x13, 0xe6, 0x95, 0x99,
	0xe5, 0xad, 0xa6, 0x5f, 0xe5, 0x85, 0xb3, 0xe5, 0x8d, 0xa1, 0xe8, 0xb7, 0xb3, 0xe8, 0xbf, 0x87,
	0x12, 0x3a, 0x0a, 0x1d, 0x45, 0x4e, 0x42, 0x47, 0x75, 0x69, 0x64, 0x65, 0x54, 0x6c, 0x6f, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x10, 0x0b, 0x1a, 0x17, 0xaa, 0xb6, 0x18, 0x13, 0xe6, 0x95, 0x99, 0xe5, 0xad, 0xa6, 0x5f,
	0xe5, 0x85, 0xb3, 0xe5, 0x8d, 0xa1, 0xe6, 0x81, 0xa2, 0xe5, 0xa4, 0x8d, 0x1a, 0x04, 0xa0, 0xf9,
	0x2b, 0x01, 0x2a, 0x93, 0x01, 0x0a, 0x0f, 0x45, 0x4e, 0x42, 0x47, 0x75, 0x69, 0x64, 0x65, 0x46,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4e, 0x42, 0x47, 0x75, 0x69,
	0x64, 0x65, 0x46, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00,
	0x12, 0x33, 0x0a, 0x17, 0x45, 0x4e, 0x42, 0x47, 0x75, 0x69, 0x64, 0x65, 0x54, 0x6c, 0x6f, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x1a, 0x16, 0xaa,
	0xb6, 0x18, 0x12, 0xe6, 0xad, 0xa3, 0xe5, 0xb8, 0xb8, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe5,
	0x85, 0xb3, 0xe5, 0x8d, 0xa1, 0x12, 0x31, 0x0a, 0x15, 0x45, 0x4e, 0x42, 0x47, 0x75, 0x69, 0x64,
	0x65, 0x54, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x10, 0x02,
	0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe8, 0xb7, 0xb3, 0xe8, 0xbf, 0x87, 0xe7, 0xbb, 0x93, 0xe6,
	0x9d, 0x9f, 0xe5, 0x85, 0xb3, 0xe5, 0x8d, 0xa1, 0x2a, 0x9d, 0x06, 0x0a, 0x11, 0x4e, 0x42, 0x5f,
	0x41, 0x44, 0x44, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x15,
	0x0a, 0x11, 0x4e, 0x42, 0x5f, 0x41, 0x44, 0x44, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x4e,
	0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x2e, 0x0a, 0x1b, 0x4e, 0x42, 0x5f, 0x41, 0x44, 0x44, 0x54,
	0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x54, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x42, 0x45,
	0x46, 0x4f, 0x52, 0x45, 0x10, 0x01, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe5, 0x8f, 0x96, 0xe5,
	0x90, 0x8d, 0xe5, 0x89, 0x8d, 0x12, 0x2b, 0x0a, 0x18, 0x4e, 0x42, 0x5f, 0x41, 0x44, 0x44, 0x54,
	0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x54, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x49, 0x4e,
	0x47, 0x10, 0x02, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe5, 0x8f, 0x96, 0xe5, 0x90, 0x8d, 0xe6,
	0x97, 0xb6, 0x12, 0x2d, 0x0a, 0x1a, 0x4e, 0x42, 0x5f, 0x41, 0x44, 0x44, 0x54, 0x49, 0x4f, 0x4e,
	0x41, 0x4c, 0x5f, 0x53, 0x45, 0x54, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52,
	0x10, 0x03, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe5, 0x8f, 0x96, 0xe5, 0x90, 0x8d, 0xe5, 0x90,
	0x8e, 0x12, 0x26, 0x0a, 0x13, 0x4e, 0x42, 0x5f, 0x41, 0x44, 0x44, 0x54, 0x49, 0x4f, 0x4e, 0x41,
	0x4c, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x10, 0x04, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09,
	0xe9, 0x80, 0x89, 0xe5, 0x85, 0xb3, 0xe6, 0x97, 0xb6, 0x12, 0x30, 0x0a, 0x17, 0x4e, 0x42, 0x5f,
	0x41, 0x44, 0x44, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54,
	0x5f, 0x50, 0x49, 0x43, 0x10, 0x05, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe9, 0x80, 0x89, 0xe5,
	0x85, 0xb3, 0xe6, 0x97, 0xb6, 0xe5, 0x9b, 0xbe, 0xe7, 0x89, 0x87, 0x12, 0x2e, 0x0a, 0x18, 0x4e,
	0x42, 0x5f, 0x41, 0x44, 0x44, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x4e, 0x54, 0x45,
	0x52, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x06, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8,
	0xbf, 0x9b, 0xe5, 0x85, 0xa5, 0xe5, 0x85, 0xb3, 0xe5, 0x8d, 0xa1, 0x12, 0x2d, 0x0a, 0x17, 0x4e,
	0x42, 0x5f, 0x41, 0x44, 0x44, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x58, 0x49, 0x54,
	0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x07, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe7, 0xa6,
	0xbb, 0xe5, 0xbc, 0x80, 0xe5, 0x85, 0xb3, 0xe5, 0x8d, 0xa1, 0x12, 0x36, 0x0a, 0x19, 0x4e, 0x42,
	0x5f, 0x41, 0x44, 0x44, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x43, 0x48, 0x4f, 0x4f, 0x53,
	0x45, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x31, 0x10, 0x08, 0x1a, 0x17, 0xaa, 0xb6, 0x18, 0x13, 0xe6,
	0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe9, 0x80, 0x89, 0xe6, 0x8b, 0xa9, 0xe8, 0xa7, 0x84, 0xe5, 0x88,
	0x99, 0x31, 0x12, 0x36, 0x0a, 0x19, 0x4e, 0x42, 0x5f, 0x41, 0x44, 0x44, 0x54, 0x49, 0x4f, 0x4e,
	0x41, 0x4c, 0x5f, 0x43, 0x48, 0x4f, 0x4f, 0x53, 0x45, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x32, 0x10,
	0x09, 0x1a, 0x17, 0xaa, 0xb6, 0x18, 0x13, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe9, 0x80, 0x89,
	0xe6, 0x8b, 0xa9, 0xe8, 0xa7, 0x84, 0xe5, 0x88, 0x99, 0x32, 0x12, 0x36, 0x0a, 0x19, 0x4e, 0x42,
	0x5f, 0x41, 0x44, 0x44, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x43, 0x48, 0x4f, 0x4f, 0x53,
	0x45, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x33, 0x10, 0x0a, 0x1a, 0x17, 0xaa, 0xb6, 0x18, 0x13, 0xe6,
	0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe9, 0x80, 0x89, 0xe6, 0x8b, 0xa9, 0xe8, 0xa7, 0x84, 0xe5, 0x88,
	0x99, 0x33, 0x12, 0x38, 0x0a, 0x1c, 0x4e, 0x42, 0x5f, 0x41, 0x44, 0x44, 0x54, 0x49, 0x4f, 0x4e,
	0x41, 0x4c, 0x5f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x45, 0x4c, 0x45,
	0x43, 0x54, 0x10, 0x0b, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe9, 0x87, 0x8d, 0xe5, 0xa4, 0x8d,
	0xe8, 0xbf, 0x9b, 0xe5, 0x85, 0xa5, 0xe9, 0x80, 0x89, 0xe5, 0x85, 0xb3, 0x12, 0x3d, 0x0a, 0x21,
	0x4e, 0x42, 0x5f, 0x41, 0x44, 0x44, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x50,
	0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x42, 0x41, 0x54, 0x54, 0x4c,
	0x45, 0x10, 0x0c, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe9, 0x87, 0x8d, 0xe5, 0xa4, 0x8d, 0xe8,
	0xbf, 0x9b, 0xe5, 0x85, 0xa5, 0xe5, 0x85, 0xb3, 0xe5, 0x8d, 0xa1, 0x12, 0x2d, 0x0a, 0x16, 0x4e,
	0x42, 0x5f, 0x41, 0x44, 0x44, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x42, 0x41, 0x4e, 0x50,
	0x49, 0x43, 0x4b, 0x5f, 0x31, 0x10, 0x0d, 0x1a, 0x11, 0xaa, 0xb6, 0x18, 0x0d, 0xe8, 0xbd, 0xae,
	0xe9, 0x80, 0x89, 0xe8, 0xa7, 0x84, 0xe5, 0x88, 0x99, 0x31, 0x12, 0x2d, 0x0a, 0x16, 0x4e, 0x42,
	0x5f, 0x41, 0x44, 0x44, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x42, 0x41, 0x4e, 0x50, 0x49,
	0x43, 0x4b, 0x5f, 0x32, 0x10, 0x0e, 0x1a, 0x11, 0xaa, 0xb6, 0x18, 0x0d, 0xe8, 0xbd, 0xae, 0xe9,
	0x80, 0x89, 0xe8, 0xa7, 0x84, 0xe5, 0x88, 0x99, 0x32, 0x12, 0x2d, 0x0a, 0x16, 0x4e, 0x42, 0x5f,
	0x41, 0x44, 0x44, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x42, 0x41, 0x4e, 0x50, 0x49, 0x43,
	0x4b, 0x5f, 0x33, 0x10, 0x0f, 0x1a, 0x11, 0xaa, 0xb6, 0x18, 0x0d, 0xe8, 0xbd, 0xae, 0xe9, 0x80,
	0x89, 0xe8, 0xa7, 0x84, 0xe5, 0x88, 0x99, 0x33, 0x2a, 0xac, 0x04, 0x0a, 0x15, 0x52, 0x45, 0x53,
	0x5f, 0x4e, 0x45, 0x57, 0x42, 0x49, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x12, 0x44, 0x0a, 0x28, 0x52, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x57, 0x42, 0x49, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e,
	0x5f, 0x4e, 0x45, 0x57, 0x42, 0x49, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x00,
	0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0xe6, 0x96, 0xb0, 0xe6,
	0x89, 0x8b, 0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97, 0x12, 0x44, 0x0a, 0x28, 0x52, 0x45, 0x53, 0x5f,
	0x4e, 0x45, 0x57, 0x42, 0x49, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f, 0x47,
	0x55, 0x49, 0x44, 0x45, 0x10, 0x01, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0xbc, 0x80, 0xe5,
	0x90, 0xaf, 0xe5, 0x8a, 0xa8, 0xe6, 0x80, 0x81, 0xe5, 0xbc, 0x95, 0xe5, 0xaf, 0xbc, 0x12, 0x58,
	0x0a, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x57, 0x42, 0x49, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x54,
	0x41, 0x47, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x49, 0x44,
	0x10, 0x02, 0x1a, 0x24, 0xaa, 0xb6, 0x18, 0x20, 0xe7, 0x8e, 0xa9, 0xe5, 0xae, 0xb6, 0xe6, 0xa0,
	0x87, 0xe7, 0xad, 0xbe, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0x94, 0x9f, 0xe6, 0x95, 0x88,
	0xe8, 0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0x49, 0x44, 0x12, 0x5d, 0x0a, 0x2f, 0x52, 0x45, 0x53, 0x5f,
	0x4e, 0x45, 0x57, 0x42, 0x49, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x03, 0x1a, 0x28, 0xaa,
	0xb6, 0x18, 0x24, 0xe7, 0x8e, 0xa9, 0xe5, 0xae, 0xb6, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0xe6,
	0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0x94, 0x9f, 0xe6, 0x95, 0x88, 0xe7, 0x8e, 0xa9, 0xe6, 0xb3,
	0x95, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x12, 0x40, 0x0a, 0x24, 0x52, 0x45, 0x53, 0x5f, 0x4e,
	0x45, 0x57, 0x42, 0x49, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x49, 0x50, 0x53, 0x10,
	0x04, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0xe8, 0xa7, 0x84,
	0xe5, 0x88, 0x99, 0xe6, 0x8f, 0x90, 0xe7, 0xa4, 0xba, 0x12, 0x43, 0x0a, 0x27, 0x52, 0x45, 0x53,
	0x5f, 0x4e, 0x45, 0x57, 0x42, 0x49, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x52, 0x55, 0x49, 0x54, 0x5f,
	0x54, 0x41, 0x53, 0x4b, 0x10, 0x05, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0xbc, 0x80, 0xe5,
	0x90, 0xaf, 0xe6, 0x96, 0xb0, 0xe6, 0x89, 0x8b, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x12, 0x47,
	0x0a, 0x26, 0x52, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x57, 0x42, 0x49, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x55, 0x49, 0x4e,
	0x41, 0x4d, 0x45, 0x5f, 0x48, 0x49, 0x4e, 0x54, 0x10, 0x06, 0x1a, 0x1b, 0xaa, 0xb6, 0x18, 0x17,
	0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0x55, 0x49, 0xe5, 0x8a, 0x9f, 0xe8, 0x83, 0xbd, 0xe5, 0x90,
	0x8d, 0xe6, 0x8f, 0x90, 0xe7, 0xa4, 0xba, 0x2a, 0xba, 0x01, 0x0a, 0x0f, 0x52, 0x45, 0x53, 0x5f,
	0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x1b, 0x0a, 0x17, 0x52,
	0x45, 0x53, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x2d, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x5f,
	0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x4e, 0x45,
	0x52, 0x41, 0x4c, 0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe9, 0x80, 0x9a, 0xe7, 0x94,
	0xa8, 0xe5, 0xa4, 0xa9, 0xe8, 0xb5, 0x8b, 0x12, 0x2e, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x5f, 0x54,
	0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x02, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe7, 0xbe, 0x81, 0xe7, 0xbb,
	0x8a, 0xe5, 0xa4, 0xa9, 0xe8, 0xb5, 0x8b, 0x12, 0x2b, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x5f, 0x54,
	0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c,
	0x10, 0x03, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe4, 0xb8, 0xbb, 0xe5, 0x8a, 0xa8, 0xe6, 0x8a,
	0x80, 0xe8, 0x83, 0xbd, 0x2a, 0xf8, 0x04, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x41, 0x4c,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x53, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x2e, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x41, 0x4c, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x53, 0x5f, 0x42, 0x6c, 0x6f,
	0x6f, 0x64, 0x6c, 0x75, 0x73, 0x74, 0x10, 0x65, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe9, 0xa5,
	0xae, 0xe8, 0xa1, 0x80, 0x12, 0x38, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x41, 0x4c, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x53, 0x5f, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x45, 0x78, 0x70, 0x10, 0x66, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe5,
	0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe7, 0x9a, 0x84, 0xe7, 0xbb, 0x8f, 0xe9, 0xaa, 0x8c, 0x12, 0x3b,
	0x0a, 0x25, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x4b, 0x49,
	0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x53, 0x5f, 0x4d, 0x79, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x75,
	0x73, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x10, 0x67, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe7,
	0xa5, 0x9e, 0xe7, 0xa7, 0x98, 0xe8, 0x83, 0xbd, 0xe6, 0xba, 0x90, 0x12, 0x3b, 0x0a, 0x25, 0x52,
	0x45, 0x53, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f,
	0x49, 0x4e, 0x53, 0x5f, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x6c,
	0x65, 0x6e, 0x74, 0x73, 0x10, 0x68, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0xa4, 0xa9, 0xe8,
	0xb5, 0x8b, 0xe5, 0xbc, 0x82, 0xe7, 0xa6, 0x80, 0x12, 0x2b, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x5f,
	0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x53,
	0x5f, 0x52, 0x65, 0x73, 0x65, 0x6c, 0x6c, 0x10, 0x69, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5,
	0x80, 0x92, 0xe5, 0x8d, 0x96, 0x12, 0x39, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x41, 0x4c,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x53, 0x5f, 0x54, 0x68,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x63, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x10, 0x6a, 0x1a, 0x10,
	0xaa, 0xb6, 0x18, 0x0c, 0xe9, 0x9b, 0xb7, 0xe9, 0x9c, 0x86, 0xe6, 0xbf, 0x80, 0xe8, 0x8d, 0xa1,
	0x12, 0x37, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x53, 0x5f, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x79, 0x53,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x10, 0x6b, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x97, 0x9c,
	0xe8, 0xa1, 0x80, 0xe4, 0xb9, 0x8b, 0xe5, 0xbd, 0xb1, 0x12, 0x38, 0x0a, 0x22, 0x52, 0x45, 0x53,
	0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x49, 0x4e,
	0x53, 0x5f, 0x57, 0x65, 0x72, 0x65, 0x77, 0x6f, 0x6c, 0x66, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x10,
	0x6c, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe9, 0xad, 0x94, 0xe7, 0xa7, 0x8d, 0xe8, 0xa1, 0x80,
	0xe7, 0xbb, 0x9f, 0x12, 0x3d, 0x0a, 0x22, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x53, 0x5f, 0x57, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x41, 0x72, 0x72, 0x69, 0x76, 0x65, 0x64, 0x10, 0x6d, 0x1a, 0x15, 0xaa, 0xb6, 0x18,
	0x11, 0x28, 0xe4, 0xb8, 0xbb, 0x29, 0xe5, 0x87, 0x9b, 0xe5, 0x86, 0xac, 0xe5, 0xb7, 0xb2, 0xe8,
	0x87, 0xb3, 0x12, 0x3b, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x53, 0x5f, 0x4d, 0x61, 0x6e, 0x49, 0x73,
	0x4e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x10, 0x6e, 0x1a, 0x15, 0xaa, 0xb6, 0x18, 0x11, 0x28, 0xe4,
	0xb8, 0xbb, 0x29, 0xe5, 0xa4, 0xa9, 0xe4, 0xba, 0xba, 0xe5, 0x90, 0x88, 0xe4, 0xb8, 0x80, 0x2a,
	0xf7, 0x01, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x57,
	0x45, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x12, 0x23, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x57,
	0x45, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x38, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x41, 0x4c,
	0x45, 0x4e, 0x54, 0x5f, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b,
	0x5f, 0x48, 0x45, 0x52, 0x4f, 0x10, 0x01, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0x8b, 0xa5,
	0xe6, 0x9c, 0x89, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe6, 0xa3, 0x80, 0xe6, 0x9f, 0xa5, 0x12,
	0x3a, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x57, 0x45,
	0x49, 0x47, 0x48, 0x54, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43,
	0x4b, 0x10, 0x02, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0xbb, 0xa1, 0xe8, 0xb6, 0xb3, 0xe8,
	0xa7, 0xa3, 0xe9, 0x94, 0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x12, 0x3c, 0x0a, 0x20, 0x52,
	0x45, 0x53, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54,
	0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x03, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0xbf, 0x80, 0xe6, 0xb4, 0xbb, 0xe7, 0xbe, 0x81,
	0xe7, 0xbb, 0x8a, 0xe6, 0xa3, 0x80, 0xe6, 0x9f, 0xa5, 0x2a, 0xad, 0x01, 0x0a, 0x16, 0x52, 0x45,
	0x53, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x41, 0x4c, 0x45,
	0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x37, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e,
	0x54, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x01, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0x9c, 0xac, 0xe5, 0xb1, 0x80,
	0xe6, 0x8b, 0xa5, 0xe6, 0x9c, 0x89, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0x12, 0x3b, 0x0a, 0x1f,
	0x52, 0x45, 0x53, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43,
	0x4b, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x02, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0x9c, 0xac, 0xe5, 0xb1, 0x80, 0xe6, 0x8b, 0xa5,
	0xe6, 0x9c, 0x89, 0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a, 0x2a, 0xe0, 0x04, 0x0a, 0x17, 0x52, 0x45,
	0x53, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x42, 0x55, 0x46, 0x46,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x41, 0x4c,
	0x45, 0x4e, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x4b, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x41, 0x4c,
	0x45, 0x4e, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x4d, 0x59, 0x5f, 0x41,
	0x4c, 0x4c, 0x48, 0x45, 0x52, 0x4f, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x1a, 0x22,
	0xaa, 0xb6, 0x18, 0x1e, 0xe5, 0xa4, 0xa9, 0xe8, 0xb5, 0x8b, 0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90,
	0xe5, 0xb7, 0xb1, 0xe6, 0x96, 0xb9, 0xe5, 0x85, 0xa8, 0xe4, 0xbd, 0x93, 0xe8, 0x8b, 0xb1, 0xe9,
	0x9b, 0x84, 0x12, 0x4e, 0x0a, 0x26, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54,
	0x5f, 0x41, 0x44, 0x44, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x41,
	0x4c, 0x4c, 0x48, 0x45, 0x52, 0x4f, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x1a, 0x22,
	0xaa, 0xb6, 0x18, 0x1e, 0xe5, 0xa4, 0xa9, 0xe8, 0xb5, 0x8b, 0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90,
	0xe6, 0x95, 0x8c, 0xe6, 0x96, 0xb9, 0xe5, 0x85, 0xa8, 0xe4, 0xbd, 0x93, 0xe8, 0x8b, 0xb1, 0xe9,
	0x9b, 0x84, 0x12, 0x4b, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54,
	0x5f, 0x41, 0x44, 0x44, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x4d, 0x59, 0x5f, 0x50, 0x41, 0x52, 0x54,
	0x48, 0x45, 0x52, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x03, 0x1a, 0x22, 0xaa, 0xb6, 0x18,
	0x1e, 0xe5, 0xa4, 0xa9, 0xe8, 0xb5, 0x8b, 0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90, 0xe5, 0xb7, 0xb1,
	0xe6, 0x96, 0xb9, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0x12,
	0x4e, 0x0a, 0x26, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x44,
	0x44, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x50, 0x41, 0x52, 0x54,
	0x48, 0x45, 0x52, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x04, 0x1a, 0x22, 0xaa, 0xb6, 0x18,
	0x1e, 0xe5, 0xa4, 0xa9, 0xe8, 0xb5, 0x8b, 0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90, 0xe6, 0x95, 0x8c,
	0xe6, 0x96, 0xb9, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0x12,
	0x4f, 0x0a, 0x27, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x44,
	0x44, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x4d, 0x59, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x52, 0x45, 0x4c,
	0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x05, 0x1a, 0x22, 0xaa, 0xb6,
	0x18, 0x1e, 0xe5, 0xa4, 0xa9, 0xe8, 0xb5, 0x8b, 0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90, 0xe5, 0xb7,
	0xb1, 0xe6, 0x96, 0xb9, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a,
	0x12, 0x52, 0x0a, 0x2a, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x41,
	0x44, 0x44, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x50, 0x41, 0x52,
	0x54, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x06,
	0x1a, 0x22, 0xaa, 0xb6, 0x18, 0x1e, 0xe5, 0xa4, 0xa9, 0xe8, 0xb5, 0x8b, 0xe5, 0x8a, 0xa0, 0xe6,
	0x88, 0x90, 0xe6, 0x95, 0x8c, 0xe6, 0x96, 0xb9, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe7, 0xbe,
	0x81, 0xe7, 0xbb, 0x8a, 0x12, 0x46, 0x0a, 0x24, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x41, 0x4c, 0x45,
	0x4e, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x41,
	0x4c, 0x4c, 0x48, 0x45, 0x52, 0x4f, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x07, 0x1a, 0x1c,
	0xaa, 0xb6, 0x18, 0x18, 0xe5, 0xa4, 0xa9, 0xe8, 0xb5, 0x8b, 0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90,
	0xe5, 0x85, 0xa8, 0xe9, 0x83, 0xa8, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0x2a, 0xb3, 0x04, 0x0a,
	0x12, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x41, 0x49, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x61, 0x6c,
	0x65, 0x6e, 0x74, 0x41, 0x49, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x10, 0x00, 0x12, 0x3e, 0x0a, 0x1c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x61, 0x6c, 0x65,
	0x6e, 0x74, 0x41, 0x49, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x72, 0x6f, 0x70, 0x48, 0x65, 0x72,
	0x6f, 0x73, 0x10, 0x01, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd,
	0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a, 0xe8, 0x8b, 0xb1, 0xe9,
	0x9b, 0x84, 0x12, 0x38, 0x0a, 0x1c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x61, 0x6c, 0x65,
	0x6e, 0x74, 0x41, 0x49, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x10, 0x02, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd,
	0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0x12, 0x45, 0x0a, 0x23,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x41, 0x49, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x44, 0x72, 0x6f, 0x70, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x65,
	0x72, 0x6f, 0x73, 0x10, 0x03, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe6, 0x8e, 0x89, 0xe8, 0x90,
	0xbd, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe8, 0xb4, 0xb9, 0xe7, 0x94, 0xa8, 0xe8, 0x8b, 0xb1,
	0xe9, 0x9b, 0x84, 0x12, 0x3b, 0x0a, 0x25, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x61, 0x6c,
	0x65, 0x6e, 0x74, 0x41, 0x49, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x48, 0x50, 0x10, 0x04, 0x1a, 0x10,
	0xaa, 0xb6, 0x18, 0x0c, 0xe7, 0xab, 0x8b, 0xe5, 0x8d, 0xb3, 0xe5, 0x9b, 0x9e, 0xe8, 0xa1, 0x80,
	0x12, 0x39, 0x0a, 0x20, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74,
	0x41, 0x49, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x44, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x10, 0x05, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe7, 0x89, 0xa9, 0xe7,
	0x90, 0x86, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0xe7, 0xb3, 0xbb, 0x12, 0x37, 0x0a, 0x1e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x41, 0x49, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x10, 0x06, 0x1a,
	0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe6, 0xb3, 0x95, 0xe6, 0x9c, 0xaf, 0xe4, 0xbc, 0xa4, 0xe5, 0xae,
	0xb3, 0xe7, 0xb3, 0xbb, 0x12, 0x3d, 0x0a, 0x23, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x61,
	0x6c, 0x65, 0x6e, 0x74, 0x41, 0x49, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x75, 0x66, 0x66, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x65, 0x72, 0x6f, 0x73, 0x10, 0x07, 0x1a, 0x14, 0xaa,
	0xb6, 0x18, 0x10, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe8, 0xb4, 0xb9, 0xe7, 0x94, 0xa8, 0x42,
	0x75, 0x66, 0x66, 0x12, 0x4d, 0x0a, 0x27, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x61, 0x6c,
	0x65, 0x6e, 0x74, 0x41, 0x49, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x6e, 0x53, 0x75, 0x72, 0x65,
	0x43, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x10, 0x08,
	0x1a, 0x20, 0xaa, 0xb6, 0x18, 0x1c, 0xe4, 0xbf, 0x9d, 0xe8, 0xaf, 0x81, 0x43, 0xe4, 0xbd, 0x8d,
	0xe5, 0x93, 0x81, 0xe8, 0xb4, 0xa8, 0xe5, 0x9c, 0xa8, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0xe5,
	0x86, 0x85, 0x2a, 0xd7, 0x02, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e,
	0x54, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x1d, 0x0a, 0x19, 0x52,
	0x45, 0x53, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x1b, 0x52, 0x45,
	0x53, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x01, 0x1a, 0x0a, 0xaa, 0xb6, 0x18,
	0x06, 0xe8, 0xbe, 0x93, 0xe5, 0x87, 0xba, 0x12, 0x2c, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x5f, 0x54,
	0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x45, 0x46, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe9,
	0x98, 0xb2, 0xe5, 0xbe, 0xa1, 0x12, 0x2b, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x41, 0x4c,
	0x45, 0x4e, 0x54, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e,
	0x45, 0x52, 0x47, 0x59, 0x10, 0x03, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe8, 0x83, 0xbd, 0xe9,
	0x87, 0x8f, 0x12, 0x30, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54,
	0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x47, 0x48, 0x54,
	0x10, 0x04, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97, 0xe6, 0x9c,
	0xba, 0xe5, 0x88, 0xb6, 0x12, 0x33, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x41, 0x4c, 0x45,
	0x4e, 0x54, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x05, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0xb5, 0x84,
	0xe6, 0xba, 0x90, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x12, 0x31, 0x0a, 0x1b, 0x52, 0x45, 0x53,
	0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x10, 0x06, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c,
	0xe8, 0xbf, 0x90, 0xe8, 0x90, 0xa5, 0xe6, 0x9c, 0xba, 0xe5, 0x88, 0xb6, 0x2a, 0x4a, 0x0a, 0x16,
	0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x20, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74,
	0x53, 0x6b, 0x69, 0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x52, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x10, 0x00, 0x1a, 0x0a, 0xaa, 0xb6,
	0x18, 0x06, 0xe7, 0x9f, 0xa9, 0xe5, 0xbd, 0xa2, 0x2a, 0xdc, 0x01, 0x0a, 0x21, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a,
	0x0a, 0x26, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x44, 0x0a, 0x29, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x10, 0x01, 0x1a, 0x15, 0xaa, 0xb6, 0x18, 0x11, 0xe6,
	0x8a, 0x80, 0xe8, 0x83, 0xbd, 0x58, 0x5a, 0xe6, 0xad, 0xa3, 0xe6, 0x96, 0xb9, 0xe5, 0x90, 0x91,
	0x12, 0x45, 0x0a, 0x2a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x70, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x10, 0x02,
	0x1a, 0x15, 0xaa, 0xb6, 0x18, 0x11, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0x58, 0x5a, 0xe5, 0x8f,
	0x8d, 0xe6, 0x96, 0xb9, 0xe5, 0x90, 0x91, 0x2a, 0x94, 0x01, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x5f,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b,
	0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x28, 0x0a, 0x24, 0x52,
	0x45, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54,
	0x41, 0x43, 0x4b, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e,
	0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x41, 0x0a, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x4f, 0x4e, 0x54, 0x5f, 0x42,
	0x41, 0x43, 0x4b, 0x5f, 0x52, 0x4f, 0x57, 0x10, 0x01, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe5,
	0x89, 0x8d, 0xe5, 0x90, 0x8e, 0xe6, 0x8e, 0x92, 0x1a, 0x04, 0x88, 0xf9, 0x2b, 0x01, 0x2a, 0x5f,
	0x0a, 0x0f, 0x41, 0x49, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x49, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x16, 0x41,
	0x49, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e,
	0x65, 0x77, 0x62, 0x69, 0x65, 0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x96, 0xb0,
	0xe6, 0x89, 0x8b, 0xe9, 0x98, 0xb5, 0xe5, 0xae, 0xb9, 0x1a, 0x04, 0x88, 0xf9, 0x2b, 0x01, 0x2a,
	0xc3, 0x02, 0x0a, 0x0a, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x13,
	0x0a, 0x0f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x0e, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x48, 0x59, 0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe7, 0x89, 0xa9,
	0xe7, 0x90, 0x86, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0x12, 0x24, 0x0a, 0x0e, 0x45, 0x51, 0x55,
	0x49, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x47, 0x43, 0x10, 0x02, 0x1a, 0x10, 0xaa,
	0xb6, 0x18, 0x0c, 0xe6, 0xb3, 0x95, 0xe6, 0x9c, 0xaf, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0x12,
	0x24, 0x0a, 0x0e, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f,
	0x4d, 0x10, 0x03, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe9, 0x80, 0x9a, 0xe7, 0x94, 0xa8, 0xe8,
	0xa3, 0x85, 0xe5, 0xa4, 0x87, 0x12, 0x2d, 0x0a, 0x17, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50,
	0x10, 0x04, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x8d, 0xb8, 0xe8, 0xbd, 0xbd, 0xe8, 0xa3,
	0x85, 0xe5, 0xa4, 0x87, 0x12, 0x26, 0x0a, 0x10, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x05, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c,
	0xe8, 0xbd, 0xac, 0xe8, 0x81, 0x8c, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0x12, 0x2d, 0x0a, 0x17,
	0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41,
	0x44, 0x45, 0x5f, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x06, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5,
	0x90, 0x88, 0xe6, 0x88, 0x90, 0xe6, 0xa0, 0xb8, 0xe5, 0xbf, 0x83, 0x12, 0x28, 0x0a, 0x12, 0x45,
	0x51, 0x55, 0x49, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x45, 0x4e, 0x53,
	0x45, 0x10, 0x07, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe9, 0x98, 0xb2, 0xe5, 0xbe, 0xa1, 0xe8,
	0xa3, 0x85, 0xe5, 0xa4, 0x87, 0x2a, 0xb3, 0x01, 0x0a, 0x0e, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f,
	0x55, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x51, 0x55, 0x49,
	0x50, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x2e, 0x0a, 0x18, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x10, 0x01, 0x1a,
	0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x95, 0xa3, 0xe4, 0xbb, 0xb6, 0xe8, 0xa3, 0x85, 0xe5, 0xa4,
	0x87, 0x12, 0x2a, 0x0a, 0x14, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x1a, 0x10, 0xaa, 0xb6, 0x18,
	0x0c, 0xe6, 0x88, 0x90, 0xe5, 0x93, 0x81, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0x12, 0x2c, 0x0a,
	0x16, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x10, 0x03, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe7,
	0x89, 0xb9, 0xe6, 0xae, 0x8a, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0x2a, 0xe3, 0x0b, 0x0a, 0x10,
	0x41, 0x49, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x4b, 0x65, 0x79,
	0x12, 0x19, 0x0a, 0x15, 0x41, 0x49, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x4b, 0x65, 0x79, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x50, 0x0a, 0x23, 0x41,
	0x49, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x5f,
	0x42, 0x6f, 0x73, 0x73, 0x41, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x10, 0x01, 0x1a, 0x27, 0xaa, 0xb6, 0x18, 0x23, 0x41, 0x49, 0xe5, 0xb8, 0xb8, 0xe9,
	0x87, 0x8f, 0xe6, 0x8a, 0xa2, 0xe5, 0xae, 0x9d, 0xe7, 0xae, 0xb1, 0xe9, 0x9a, 0x8f, 0xe6, 0x9c,
	0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe4, 0xb8, 0x8b, 0xe9, 0x99, 0x90, 0x12, 0x4e, 0x0a,
	0x21, 0x41, 0x49, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x4b, 0x65,
	0x79, 0x5f, 0x42, 0x6f, 0x73, 0x73, 0x41, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x45,
	0x6e, 0x64, 0x10, 0x02, 0x1a, 0x27, 0xaa, 0xb6, 0x18, 0x23, 0x41, 0x49, 0xe5, 0xb8, 0xb8, 0xe9,
	0x87, 0x8f, 0xe6, 0x8a, 0xa2, 0xe5, 0xae, 0x9d, 0xe7, 0xae, 0xb1, 0xe9, 0x9a, 0x8f, 0xe6, 0x9c,
	0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe4, 0xb8, 0x8a, 0xe9, 0x99, 0x90, 0x12, 0x48, 0x0a,
	0x24, 0x41, 0x49, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x4b, 0x65,
	0x79, 0x5f, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x48, 0x70, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x03, 0x1a, 0x1e, 0xaa, 0xb6, 0x18, 0x1a, 0x41, 0x49, 0xe5,
	0xb8, 0xb8, 0xe9, 0x87, 0x8f, 0xe5, 0x9b, 0x9e, 0xe8, 0xa1, 0x80, 0xe5, 0xa4, 0xa9, 0xe8, 0xb5,
	0x8b, 0xe5, 0xb7, 0xae, 0xe5, 0x80, 0xbc, 0x12, 0x5a, 0x0a, 0x30, 0x41, 0x49, 0x4e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x5f, 0x4a, 0x75, 0x64, 0x67,
	0x65, 0x50, 0x68, 0x79, 0x4f, 0x72, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x4c, 0x6f, 0x77, 0x65, 0x73,
	0x74, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x04, 0x1a, 0x24, 0xaa,
	0xb6, 0x18, 0x20, 0x41, 0x49, 0xe5, 0xb8, 0xb8, 0xe9, 0x87, 0x8f, 0xe7, 0x89, 0xa9, 0xe7, 0x90,
	0x86, 0xe6, 0xb3, 0x95, 0xe7, 0xb3, 0xbb, 0xe6, 0x9c, 0x80, 0xe4, 0xbd, 0x8e, 0xe4, 0xba, 0xba,
	0xe5, 0x8f, 0xa3, 0x12, 0x50, 0x0a, 0x25, 0x41, 0x49, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x41, 0x6e, 0x64, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x49, 0x44, 0x31, 0x10, 0x05, 0x1a, 0x25,
	0xaa, 0xb6, 0x18, 0x21, 0x41, 0x49, 0xe5, 0xb8, 0xb8, 0xe9, 0x87, 0x8f, 0xe5, 0xbd, 0xb1, 0xe5,
	0x93, 0x8d, 0xe5, 0xb7, 0xa6, 0xe5, 0x8f, 0xb3, 0xe7, 0xab, 0x99, 0xe4, 0xbd, 0x8d, 0xe8, 0xa3,
	0x85, 0xe5, 0xa4, 0x87, 0x31, 0x12, 0x50, 0x0a, 0x25, 0x41, 0x49, 0x4e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x41, 0x6e,
	0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x49, 0x44, 0x32, 0x10, 0x06,
	0x1a, 0x25, 0xaa, 0xb6, 0x18, 0x21, 0x41, 0x49, 0xe5, 0xb8, 0xb8, 0xe9, 0x87, 0x8f, 0xe5, 0xbd,
	0xb1, 0xe5, 0x93, 0x8d, 0xe5, 0xb7, 0xa6, 0xe5, 0x8f, 0xb3, 0xe7, 0xab, 0x99, 0xe4, 0xbd, 0x8d,
	0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0x32, 0x12, 0x3b, 0x0a, 0x1c, 0x41, 0x49, 0x4e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x5f, 0x4e, 0x61, 0x6f, 0x4e,
	0x61, 0x6f, 0x43, 0x61, 0x6d, 0x70, 0x31, 0x10, 0x07, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0x41,
	0x49, 0xe5, 0xb8, 0xb8, 0xe9, 0x87, 0x8f, 0xe9, 0x97, 0xb9, 0xe9, 0x97, 0xb9, 0xe9, 0x98, 0xb5,
	0xe8, 0x90, 0xa5, 0x31, 0x12, 0x3b, 0x0a, 0x1c, 0x41, 0x49, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x5f, 0x4e, 0x61, 0x6f, 0x4e, 0x61, 0x6f, 0x43,
	0x61, 0x6d, 0x70, 0x32, 0x10, 0x08, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0x41, 0x49, 0xe5, 0xb8,
	0xb8, 0xe9, 0x87, 0x8f, 0xe9, 0x97, 0xb9, 0xe9, 0x97, 0xb9, 0xe9, 0x98, 0xb5, 0xe8, 0x90, 0xa5,
	0x32, 0x12, 0x3b, 0x0a, 0x1c, 0x41, 0x49, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x4b, 0x65, 0x79, 0x5f, 0x4e, 0x61, 0x6f, 0x4e, 0x61, 0x6f, 0x43, 0x61, 0x6d, 0x70,
	0x33, 0x10, 0x09, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0x41, 0x49, 0xe5, 0xb8, 0xb8, 0xe9, 0x87,
	0x8f, 0xe9, 0x97, 0xb9, 0xe9, 0x97, 0xb9, 0xe9, 0x98, 0xb5, 0xe8, 0x90, 0xa5, 0x33, 0x12, 0x5d,
	0x0a, 0x2f, 0x41, 0x49, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x4b,
	0x65, 0x79, 0x5f, 0x51, 0x69, 0x61, 0x6f, 0x4a, 0x69, 0x65, 0x4a, 0x69, 0x65, 0x54, 0x65, 0x6c,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x77, 0x6f, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x44, 0x10, 0x0a, 0x1a, 0x28, 0xaa, 0xb6, 0x18, 0x24, 0x41, 0x49, 0xe5, 0xb8, 0xb8, 0xe9, 0x87,
	0x8f, 0xe4, 0xb9, 0x94, 0xe5, 0xa7, 0x90, 0xe5, 0xa7, 0x90, 0xe4, 0xbc, 0xa0, 0xe4, 0xba, 0xba,
	0x32, 0xe4, 0xba, 0xba, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x12, 0x58, 0x0a,
	0x25, 0x41, 0x49, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x4b, 0x65,
	0x79, 0x5f, 0x42, 0x61, 0x69, 0x47, 0x65, 0x55, 0x73, 0x65, 0x54, 0x77, 0x6f, 0x45, 0x6e, 0x68,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x10, 0x0b, 0x1a, 0x2d, 0xaa, 0xb6, 0x18, 0x29, 0x41, 0x49,
	0xe5, 0xb8, 0xb8, 0xe9, 0x87, 0x8f, 0xe6, 0x9d, 0x8e, 0xe7, 0x99, 0xbd, 0xe4, 0xbd, 0xbf, 0xe7,
	0x94, 0xa8, 0xe4, 0xb8, 0xa4, 0xe6, 0xac, 0xa1, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0x45, 0x6e,
	0x68, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x12, 0x61, 0x0a, 0x2e, 0x41, 0x49, 0x4e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x5f, 0x42, 0x61, 0x69, 0x47,
	0x65, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x10, 0x0c, 0x1a, 0x2d, 0xaa, 0xb6, 0x18,
	0x29, 0x41, 0x49, 0xe5, 0xb8, 0xb8, 0xe9, 0x87, 0x8f, 0xe6, 0x9d, 0x8e, 0xe7, 0x99, 0xbd, 0xe6,
	0xb0, 0xb8, 0xe4, 0xb9, 0x85, 0xe7, 0xa7, 0xbb, 0xe9, 0x99, 0xa4, 0xe6, 0x8a, 0x80, 0xe8, 0x83,
	0xbd, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x12, 0x69, 0x0a, 0x30, 0x41, 0x49,
	0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x5f, 0x42,
	0x61, 0x69, 0x47, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x61, 0x6d, 0x65, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x10, 0x0d,
	0x1a, 0x33, 0xaa, 0xb6, 0x18, 0x2f, 0x41, 0x49, 0xe5, 0xb8, 0xb8, 0xe9, 0x87, 0x8f, 0xe6, 0x9d,
	0x8e, 0xe7, 0x99, 0xbd, 0xe7, 0xa7, 0xbb, 0xe9, 0x99, 0xa4, 0xe7, 0x9b, 0xb8, 0xe5, 0x90, 0x8c,
	0xe5, 0x93, 0x81, 0xe8, 0xb4, 0xa8, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0x45, 0x6e, 0x68, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x44, 0x12, 0x4d, 0x0a, 0x24, 0x41, 0x49, 0x4e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x5f, 0x4d, 0x69, 0x6e, 0x53, 0x68, 0x69,
	0x59, 0x69, 0x6e, 0x57, 0x69, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x44, 0x10, 0x0e, 0x1a,
	0x23, 0xaa, 0xb6, 0x18, 0x1f, 0x41, 0x49, 0xe5, 0xb8, 0xb8, 0xe9, 0x87, 0x8f, 0xe6, 0x98, 0x8e,
	0xe4, 0xb8, 0x96, 0xe9, 0x9a, 0x90, 0xe8, 0x83, 0x9c, 0xe5, 0x88, 0xa9, 0xe6, 0x8a, 0x80, 0xe8,
	0x83, 0xbd, 0x49, 0x44, 0x12, 0x4e, 0x0a, 0x25, 0x41, 0x49, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x5f, 0x4d, 0x69, 0x6e, 0x53, 0x68, 0x69, 0x59,
	0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x44, 0x10, 0x0f, 0x1a,
	0x23, 0xaa, 0xb6, 0x18, 0x1f, 0x41, 0x49, 0xe5, 0xb8, 0xb8, 0xe9, 0x87, 0x8f, 0xe6, 0x98, 0x8e,
	0xe4, 0xb8, 0x96, 0xe9, 0x9a, 0x90, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe6, 0x8a, 0x80, 0xe8,
	0x83, 0xbd, 0x49, 0x44, 0x12, 0x43, 0x0a, 0x21, 0x41, 0x49, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x5f, 0x57, 0x75, 0x46, 0x65, 0x6e, 0x67, 0x47,
	0x75, 0x61, 0x6e, 0x67, 0x5a, 0x68, 0x65, 0x6e, 0x31, 0x10, 0x10, 0x1a, 0x1c, 0xaa, 0xb6, 0x18,
	0x18, 0x41, 0x49, 0xe5, 0xb8, 0xb8, 0xe9, 0x87, 0x8f, 0xe6, 0xad, 0xa6, 0xe5, 0x87, 0xa4, 0xe5,
	0x85, 0x89, 0xe9, 0x98, 0xb5, 0x31, 0x4b, 0x65, 0x79, 0x12, 0x43, 0x0a, 0x21, 0x41, 0x49, 0x4e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x5f, 0x57, 0x75,
	0x46, 0x65, 0x6e, 0x67, 0x47, 0x75, 0x61, 0x6e, 0x67, 0x5a, 0x68, 0x65, 0x6e, 0x32, 0x10, 0x11,
	0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0x41, 0x49, 0xe5, 0xb8, 0xb8, 0xe9, 0x87, 0x8f, 0xe6, 0xad,
	0xa6, 0xe5, 0x87, 0xa4, 0xe5, 0x85, 0x89, 0xe9, 0x98, 0xb5, 0x32, 0x4b, 0x65, 0x79, 0x12, 0x5b,
	0x0a, 0x25, 0x41, 0x49, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x4b,
	0x65, 0x79, 0x5f, 0x54, 0x77, 0x6f, 0x50, 0x6f, 0x73, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x6e,
	0x68, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x10, 0x12, 0x1a, 0x30, 0xaa, 0xb6, 0x18, 0x2c, 0x41,
	0x49, 0xe5, 0xb8, 0xb8, 0xe9, 0x87, 0x8f, 0xe6, 0xad, 0xa6, 0xe5, 0x87, 0xa4, 0xe4, 0xb8, 0xa4,
	0xe4, 0xb8, 0xaa, 0xe6, 0xb3, 0x95, 0xe9, 0x98, 0xb5, 0xe7, 0x9a, 0x84, 0xe6, 0x8a, 0x80, 0xe8,
	0x83, 0xbd, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x1a, 0x04, 0x88, 0xf9, 0x2b,
	0x01, 0x2a, 0xdc, 0x02, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e,
	0x47, 0x53, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x20, 0x0a,
	0x1c, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12,
	0x2d, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43,
	0x10, 0x01, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0x9f, 0xba, 0xe7, 0xa1, 0x80, 0x12, 0x2d,
	0x0a, 0x1d, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x02, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0xa3, 0xb0, 0xe9, 0x9f, 0xb3, 0x12, 0x2f, 0x0a,
	0x1f, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x43, 0x59,
	0x10, 0x03, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe9, 0x9a, 0x90, 0xe7, 0xa7, 0x81, 0x12, 0x30,
	0x0a, 0x20, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x50, 0x4c,
	0x41, 0x59, 0x10, 0x04, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe7, 0x8e, 0xa9, 0xe6, 0xb3, 0x95,
	0x12, 0x2c, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x4c, 0x50,
	0x10, 0x05, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0xb8, 0xae, 0xe5, 0x8a, 0xa9, 0x12, 0x30,
	0x0a, 0x20, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f,
	0x41, 0x44, 0x10, 0x06, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe4, 0xb8, 0x8b, 0xe8, 0xbd, 0xbd,
	0x2a, 0xd3, 0x01, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47,
	0x53, 0x5f, 0x48, 0x45, 0x4c, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x1f, 0x0a, 0x1b, 0x52,
	0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x48, 0x45, 0x4c, 0x50,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x33, 0x0a, 0x20,
	0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x48, 0x45, 0x4c,
	0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x5f, 0x54, 0x49, 0x50, 0x53,
	0x10, 0x01, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe5, 0xb7, 0xa6, 0xe6, 0x8f, 0x90, 0xe7, 0xa4,
	0xba, 0x12, 0x33, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47,
	0x53, 0x5f, 0x48, 0x45, 0x4c, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e,
	0x5f, 0x54, 0x49, 0x50, 0x53, 0x10, 0x02, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe4, 0xb8, 0x8b,
	0xe6, 0x8f, 0x90, 0xe7, 0xa4, 0xba, 0x12, 0x2e, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45,
	0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x48, 0x45, 0x4c, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x49, 0x43, 0x54, 0x55, 0x52, 0x45, 0x10, 0x03, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06,
	0xe5, 0x9b, 0xbe, 0xe7, 0x89, 0x87, 0x2a, 0xbf, 0x04, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x5f, 0x53,
	0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e,
	0x47, 0x53, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x55,
	0x4c, 0x4c, 0x10, 0x00, 0x12, 0x35, 0x0a, 0x25, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54,
	0x49, 0x4e, 0x47, 0x53, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x10, 0x01, 0x1a,
	0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0x8d, 0x95, 0xe9, 0x80, 0x89, 0x12, 0x2e, 0x0a, 0x1e, 0x52,
	0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x53, 0x54, 0x59, 0x4c,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x10, 0x02, 0x1a,
	0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0xbc, 0x80, 0xe5, 0x85, 0xb3, 0x12, 0x3b, 0x0a, 0x24, 0x52,
	0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x53, 0x54, 0x59, 0x4c,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x4c,
	0x49, 0x44, 0x45, 0x10, 0x03, 0x1a, 0x11, 0xaa, 0xb6, 0x18, 0x0d, 0xe5, 0xbc, 0x80, 0xe5, 0x85,
	0xb3, 0x2b, 0xe6, 0xbb, 0x91, 0xe5, 0x9d, 0x97, 0x12, 0x34, 0x0a, 0x24, 0x52, 0x45, 0x53, 0x5f,
	0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54,
	0x10, 0x04, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0xa4, 0x9a, 0xe9, 0x80, 0x89, 0x12, 0x2c,
	0x0a, 0x1c, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x53,
	0x54, 0x59, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x05,
	0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe6, 0x96, 0x87, 0xe6, 0x9c, 0xac, 0x12, 0x3d, 0x0a, 0x24,
	0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x53, 0x54, 0x59,
	0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x5f, 0x53, 0x57,
	0x49, 0x54, 0x43, 0x48, 0x10, 0x06, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe5, 0xad, 0x90, 0xe9,
	0x80, 0x89, 0xe9, 0xa1, 0xb9, 0xe5, 0xbc, 0x80, 0xe5, 0x85, 0xb3, 0x12, 0x3c, 0x0a, 0x23, 0x52,
	0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x53, 0x54, 0x59, 0x4c,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x5f, 0x53, 0x4c, 0x49,
	0x44, 0x45, 0x10, 0x07, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe5, 0xad, 0x90, 0xe9, 0x80, 0x89,
	0xe9, 0xa1, 0xb9, 0xe6, 0xbb, 0x91, 0xe5, 0x9d, 0x97, 0x12, 0x38, 0x0a, 0x25, 0x52, 0x45, 0x53,
	0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x57, 0x49, 0x54,
	0x43, 0x48, 0x10, 0x08, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe5, 0x8f, 0x8c, 0xe5, 0xbc, 0x80,
	0xe5, 0x85, 0xb3, 0x12, 0x43, 0x0a, 0x24, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49,
	0x4e, 0x47, 0x53, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44,
	0x52, 0x4f, 0x50, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x09, 0x1a, 0x19, 0xaa,
	0xb6, 0x18, 0x15, 0xe4, 0xb8, 0x8b, 0xe6, 0x8b, 0x89, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe9,
	0x80, 0x89, 0xe6, 0x8b, 0xa9, 0xe6, 0xa1, 0x86, 0x2a, 0xf6, 0x01, 0x0a, 0x1c, 0x52, 0x45, 0x53,
	0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x43, 0x53, 0x5f, 0x46, 0x45, 0x41,
	0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x45, 0x53,
	0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x43, 0x53, 0x5f, 0x46, 0x45, 0x41,
	0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00,
	0x12, 0x38, 0x0a, 0x26, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53,
	0x5f, 0x43, 0x53, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x4f, 0x42, 0x10, 0x01, 0x1a, 0x0c, 0xaa, 0xb6,
	0x18, 0x08, 0xe5, 0x85, 0x81, 0xe8, 0xae, 0xb8, 0x4f, 0x42, 0x12, 0x4b, 0x0a, 0x2c, 0x52, 0x45,
	0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x43, 0x53, 0x5f, 0x46, 0x45,
	0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x55, 0x41, 0x4e, 0x48,
	0x55, 0x41, 0x54, 0x49, 0x50, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x02, 0x1a, 0x19, 0xaa, 0xb6,
	0x18, 0x15, 0xe5, 0xb9, 0xbb, 0xe5, 0x8c, 0x96, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0x54, 0x69,
	0x70, 0xe5, 0xbc, 0xb9, 0xe5, 0x87, 0xba, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x45, 0x53, 0x5f, 0x53,
	0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x43, 0x53, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55,
	0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x10,
	0x64, 0x2a, 0x83, 0x1e, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e,
	0x47, 0x53, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12,
	0x22, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f,
	0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x55, 0x4c,
	0x4c, 0x10, 0x00, 0x12, 0x3d, 0x0a, 0x27, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49,
	0x4e, 0x47, 0x53, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x01,
	0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe7, 0x8a, 0xb6, 0xe6,
	0x80, 0x81, 0x12, 0x40, 0x0a, 0x2a, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e,
	0x47, 0x53, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x47, 0x52, 0x41, 0x50, 0x48, 0x49, 0x43, 0x53, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59,
	0x10, 0x02, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe7, 0x94, 0xbb, 0xe9, 0x9d, 0xa2, 0xe8, 0xb4,
	0xa8, 0xe9, 0x87, 0x8f, 0x12, 0x3e, 0x0a, 0x2b, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54,
	0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x55, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x03, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe5, 0x88, 0x86, 0xe8, 0xbe,
	0xa8, 0xe7, 0x8e, 0x87, 0x12, 0x34, 0x0a, 0x24, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54,
	0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x04, 0x1a, 0x0a,
	0xaa, 0xb6, 0x18, 0x06, 0xe5, 0xb8, 0xa7, 0xe7, 0x8e, 0x87, 0x12, 0x2f, 0x0a, 0x1f, 0x52, 0x45,
	0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55,
	0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x05, 0x1a,
	0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0xa3, 0xb0, 0xe9, 0x9f, 0xb3, 0x12, 0x43, 0x0a, 0x2a, 0x52,
	0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46, 0x45, 0x41, 0x54,
	0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x5f, 0x42, 0x41,
	0x54, 0x54, 0x4c, 0x45, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x10, 0x06, 0x1a, 0x13, 0xaa, 0xb6, 0x18,
	0x0f, 0xe4, 0xb8, 0xb4, 0xe6, 0x97, 0xb6, 0xe5, 0xa4, 0x87, 0xe6, 0x88, 0x98, 0xe5, 0x8c, 0xba,
	0x12, 0x3c, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53,
	0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x52,
	0x4f, 0x50, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x07, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe4,
	0xb8, 0x8b, 0xe6, 0x8b, 0x96, 0xe5, 0x8a, 0xa8, 0xe5, 0x87, 0xba, 0xe5, 0x94, 0xae, 0x12, 0x2f,
	0x0a, 0x1f, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46,
	0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55, 0x53, 0x49,
	0x43, 0x10, 0x08, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe9, 0x9f, 0xb3, 0xe4, 0xb9, 0x90, 0x12,
	0x2d, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f,
	0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x46, 0x58,
	0x10, 0x09, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe9, 0x9f, 0xb3, 0xe6, 0x95, 0x88, 0x12, 0x2f,
	0x0a, 0x1f, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46,
	0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4f, 0x49, 0x43,
	0x45, 0x10, 0x0a, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe8, 0xaf, 0xad, 0xe9, 0x9f, 0xb3, 0x12,
	0x56, 0x0a, 0x2b, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f,
	0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x52,
	0x46, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x53, 0x48, 0x4f, 0x57, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0b,
	0x1a, 0x25, 0xaa, 0xb6, 0x18, 0x21, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe7, 0x86, 0x9f, 0xe7,
	0xbb, 0x83, 0xe5, 0xba, 0xa6, 0xe6, 0x88, 0x98, 0xe5, 0x8a, 0x9b, 0xe6, 0x98, 0xbe, 0xe7, 0xa4,
	0xba, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0x12, 0x33, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x5f, 0x53,
	0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x42, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0c,
	0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe9, 0x9c, 0x87, 0xe5, 0x8a, 0xa8, 0x12, 0x3c, 0x0a, 0x26,
	0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46, 0x45, 0x41,
	0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x10, 0x0d, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x8c,
	0xb9, 0xe9, 0x85, 0x8d, 0xe7, 0xa1, 0xae, 0xe8, 0xae, 0xa4, 0x12, 0x2e, 0x0a, 0x1f, 0x52, 0x45,
	0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55,
	0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x4f, 0x4d, 0x10, 0x0e, 0x1a,
	0x09, 0xaa, 0xb6, 0x18, 0x05, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x12, 0x42, 0x0a, 0x26, 0x52, 0x45,
	0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55,
	0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x57, 0x45, 0x41,
	0x52, 0x49, 0x4e, 0x47, 0x10, 0x0f, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe8, 0xa3, 0x85, 0xe5,
	0xa4, 0x87, 0xe7, 0xa9, 0xbf, 0xe6, 0x88, 0xb4, 0xe6, 0x8f, 0x90, 0xe7, 0xa4, 0xba, 0x12, 0x42,
	0x0a, 0x26, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46,
	0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x54, 0x49, 0x50, 0x53, 0x10, 0x10, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12,
	0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0xe6, 0x8f, 0x90, 0xe7,
	0xa4, 0xba, 0x12, 0x3d, 0x0a, 0x27, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e,
	0x47, 0x53, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x10, 0x11, 0x1a,
	0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x8a, 0xa8, 0xe6, 0x80, 0x81, 0xe5, 0xbc, 0x95, 0xe5, 0xaf,
	0xbc, 0x12, 0x30, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47,
	0x53, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52,
	0x4f, 0x43, 0x4b, 0x45, 0x52, 0x10, 0x12, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe6, 0x91, 0x87,
	0xe6, 0x9d, 0x86, 0x12, 0x3c, 0x0a, 0x26, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49,
	0x4e, 0x47, 0x53, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x52, 0x4f, 0x4b, 0x45, 0x10, 0x13, 0x1a,
	0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0xe6, 0x8f, 0x8f, 0xe8, 0xbe,
	0xb9, 0x12, 0x3c, 0x0a, 0x26, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47,
	0x53, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f,
	0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x14, 0x1a, 0x10, 0xaa,
	0xb6, 0x18, 0x0c, 0xe5, 0x9c, 0xa8, 0xe7, 0xba, 0xbf, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x12,
	0x3e, 0x0a, 0x28, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f,
	0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x49, 0x53,
	0x54, 0x4f, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0x15, 0x1a, 0x10, 0xaa,
	0xb6, 0x18, 0x0c, 0xe5, 0x8e, 0x86, 0xe5, 0x8f, 0xb2, 0xe6, 0x88, 0x98, 0xe7, 0xbb, 0xa9, 0x12,
	0x41, 0x0a, 0x25, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f,
	0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x4c, 0x4f,
	0x52, 0x59, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x10, 0x16, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12,
	0xe8, 0x8d, 0xa3, 0xe8, 0x80, 0x80, 0xe7, 0xa7, 0xb0, 0xe5, 0x8f, 0xb7, 0xe6, 0x98, 0xbe, 0xe7,
	0xa4, 0xba, 0x12, 0x41, 0x0a, 0x2b, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e,
	0x47, 0x53, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x50, 0x45, 0x43, 0x54, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45,
	0x44, 0x10, 0x17, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x85, 0x81, 0xe8, 0xae, 0xb8, 0xe8,
	0xa7, 0x82, 0xe6, 0x88, 0x98, 0x12, 0x47, 0x0a, 0x2b, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54,
	0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x50,
	0x4f, 0x50, 0x55, 0x50, 0x10, 0x18, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe4, 0xbc, 0xa4, 0xe5,
	0xae, 0xb3, 0xe7, 0xbb, 0x9f, 0xe8, 0xae, 0xa1, 0xe5, 0xbc, 0xb9, 0xe5, 0x87, 0xba, 0x12, 0x42,
	0x0a, 0x29, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46,
	0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x50,
	0x41, 0x52, 0x45, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x19, 0x1a, 0x13, 0xaa,
	0xb6, 0x18, 0x0f, 0xe5, 0xa4, 0x87, 0xe6, 0x88, 0x98, 0xe5, 0x8c, 0xba, 0xe6, 0x95, 0xb4, 0xe7,
	0x90, 0x86, 0x12, 0x3b, 0x0a, 0x25, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e,
	0x47, 0x53, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x45, 0x4c, 0x4c, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x10, 0x1a, 0x1a, 0x10, 0xaa,
	0xb6, 0x18, 0x0c, 0xe5, 0x87, 0xba, 0xe5, 0x94, 0xae, 0xe7, 0xa1, 0xae, 0xe8, 0xae, 0xa4, 0x12,
	0x34, 0x0a, 0x22, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f,
	0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x47,
	0x4e, 0x45, 0x54, 0x54, 0x45, 0x10, 0x1b, 0x1a, 0x0c, 0xaa, 0xb6, 0x18, 0x08, 0x56, 0x69, 0x67,
	0x6e, 0x65, 0x74, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x29, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54,
	0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x4c, 0x49, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x45,
	0x4d, 0x59, 0x10, 0x1c, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0xb7, 0x98, 0xe6, 0xb1, 0xb0,
	0xe6, 0x95, 0x8c, 0xe6, 0x96, 0xb9, 0xe5, 0x8f, 0x8d, 0xe9, 0xa6, 0x88, 0x12, 0x3a, 0x0a, 0x24,
	0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46, 0x45, 0x41,
	0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x10, 0x1d, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x9d, 0x83, 0xe9,
	0x99, 0x90, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0x12, 0x43, 0x0a, 0x2a, 0x52, 0x45, 0x53, 0x5f,
	0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x10, 0x1e, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe9, 0xba,
	0xa6, 0xe5, 0x85, 0x8b, 0xe9, 0xa3, 0x8e, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x12, 0x3e, 0x0a,
	0x28, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46, 0x45,
	0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x46, 0x58, 0x10, 0x1f, 0x1a, 0x10, 0xaa, 0xb6, 0x18,
	0x0c, 0xe9, 0x9f, 0xb3, 0xe6, 0x95, 0x88, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x12, 0x43, 0x0a,
	0x2d, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46, 0x45,
	0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x20,
	0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0xae, 0x9a, 0xe4, 0xbd, 0x8d, 0xe6, 0x9d, 0x83, 0xe9,
	0x99, 0x90, 0x12, 0x3d, 0x0a, 0x29, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e,
	0x47, 0x53, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x49, 0x46, 0x49, 0x10,
	0x21, 0x1a, 0x0e, 0xaa, 0xb6, 0x18, 0x0a, 0x57, 0x49, 0x46, 0x49, 0xe6, 0x9d, 0x83, 0xe9, 0x99,
	0x90, 0x12, 0x4e, 0x0a, 0x2f, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47,
	0x53, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45,
	0x5f, 0x4e, 0x45, 0x54, 0x10, 0x22, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe7, 0xa7, 0xbb, 0xe5,
	0x8a, 0xa8, 0xe4, 0xba, 0x92, 0xe8, 0x81, 0x94, 0xe7, 0xbd, 0x91, 0xe6, 0x9d, 0x83, 0xe9, 0x99,
	0x90, 0x12, 0x40, 0x0a, 0x2a, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47,
	0x53, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x10,
	0x23, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe7, 0x9b, 0xb8, 0xe5, 0x86, 0x8c, 0xe6, 0x9d, 0x83,
	0xe9, 0x99, 0x90, 0x12, 0x40, 0x0a, 0x2a, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49,
	0x4e, 0x47, 0x53, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x4e, 0x44, 0x45,
	0x52, 0x10, 0x24, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0xe6,
	0xb8, 0xb2, 0xe6, 0x9f, 0x93, 0x12, 0x30, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54,
	0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x10, 0x25, 0x1a, 0x0a, 0xaa, 0xb6, 0x18,
	0x06, 0xe7, 0x89, 0xb9, 0xe6, 0x95, 0x88, 0x12, 0x41, 0x0a, 0x2b, 0x52, 0x45, 0x53, 0x5f, 0x53,
	0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x46, 0x4c,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x26, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe9, 0x95,
	0x9c, 0xe9, 0x9d, 0xa2, 0xe5, 0x8f, 0x8d, 0xe5, 0xb0, 0x84, 0x12, 0x40, 0x0a, 0x2a, 0x52, 0x45,
	0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55,
	0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x53, 0x48, 0x41, 0x44, 0x4f, 0x57, 0x53, 0x10, 0x27, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c,
	0xe5, 0xae, 0x9e, 0xe6, 0x97, 0xb6, 0xe9, 0x98, 0xb4, 0xe5, 0xbd, 0xb1, 0x12, 0x39, 0x0a, 0x26,
	0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46, 0x45, 0x41,
	0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x41, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x28, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe6, 0x8a,
	0x97, 0xe9, 0x94, 0xaf, 0xe9, 0xbd, 0xbf, 0x12, 0x38, 0x0a, 0x28, 0x52, 0x45, 0x53, 0x5f, 0x53,
	0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x54, 0x48, 0x5f, 0x4f, 0x46, 0x5f, 0x46, 0x49,
	0x45, 0x4c, 0x44, 0x10, 0x29, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe6, 0x99, 0xaf, 0xe6, 0xb7,
	0xb1, 0x12, 0x46, 0x0a, 0x2a, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47,
	0x53, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x52, 0x75, 0x6c, 0x65, 0x5f, 0x54, 0x69, 0x70, 0x73, 0x10,
	0x2a, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0xaf, 0xb9, 0xe5, 0xb1, 0x80, 0xe8, 0xa7, 0x84,
	0xe5, 0x88, 0x99, 0xe6, 0x8f, 0x90, 0xe7, 0xa4, 0xba, 0x12, 0x5c, 0x0a, 0x31, 0x52, 0x45, 0x53,
	0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x6f, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x5f, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x5f, 0x53, 0x68, 0x6f, 0x77, 0x10, 0x2b,
	0x1a, 0x25, 0xaa, 0xb6, 0x18, 0x21, 0xe4, 0xb8, 0x8d, 0xe5, 0x8f, 0x82, 0xe4, 0xb8, 0x8e, 0xe5,
	0xa4, 0xa7, 0xe5, 0x8e, 0x85, 0xe7, 0x8e, 0xa9, 0xe5, 0xae, 0xb6, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0x12, 0x57, 0x0a, 0x2f, 0x52, 0x45, 0x53, 0x5f, 0x53,
	0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x5f, 0x53, 0x68, 0x6f, 0x77, 0x10, 0x2c, 0x1a, 0x22, 0xaa, 0xb6,
	0x18, 0x1e, 0xe5, 0xb1, 0x8f, 0xe8, 0x94, 0xbd, 0xe5, 0xa4, 0xa7, 0xe5, 0x8e, 0x85, 0xe7, 0x8e,
	0xa9, 0xe5, 0xae, 0xb6, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba,
	0x12, 0x3c, 0x0a, 0x26, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53,
	0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48,
	0x4f, 0x57, 0x5f, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x10, 0x2d, 0x1a, 0x10, 0xaa, 0xb6,
	0x18, 0x0c, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0xe6, 0x88, 0x90, 0xe5, 0xb0, 0xb1, 0x12, 0x2f,
	0x0a, 0x1f, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46,
	0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x10, 0x2e, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0x9c, 0xba, 0xe6, 0x99, 0xaf, 0x12,
	0x46, 0x0a, 0x24, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f,
	0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x52,
	0x4f, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x10, 0x2f, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe6,
	0x98, 0xbe, 0xe7, 0xa4, 0xba, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0xe7, 0xa9, 0xbf, 0xe6, 0x88,
	0xb4, 0xe9, 0x9d, 0xa2, 0xe6, 0x9d, 0xbf, 0x12, 0x53, 0x0a, 0x28, 0x52, 0x45, 0x53, 0x5f, 0x53,
	0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4e, 0x5a, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x45, 0x51,
	0x55, 0x49, 0x50, 0x10, 0x30, 0x1a, 0x25, 0xaa, 0xb6, 0x18, 0x21, 0xe6, 0xa8, 0xa1, 0xe6, 0x8b,
	0x9f, 0xe6, 0x88, 0x98, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe7, 0xa9, 0xbf, 0xe6, 0x88, 0xb4,
	0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0x12, 0x32, 0x0a, 0x22,
	0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46, 0x45, 0x41,
	0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41,
	0x47, 0x45, 0x10, 0x31, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe8, 0xaf, 0xad, 0xe8, 0xa8, 0x80,
	0x12, 0x5c, 0x0a, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53,
	0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x68,
	0x6f, 0x77, 0x5f, 0x53, 0x65, 0x6c, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x49, 0x6e, 0x52, 0x61,
	0x6e, 0x6b, 0x10, 0x32, 0x1a, 0x28, 0xaa, 0xb6, 0x18, 0x24, 0xe4, 0xb8, 0x8d, 0xe5, 0x8f, 0x82,
	0xe4, 0xb8, 0x8e, 0xe6, 0x8e, 0x92, 0xe8, 0xa1, 0x8c, 0xe6, 0xa6, 0x9c, 0xe7, 0x8e, 0xa9, 0xe5,
	0xae, 0xb6, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0x12, 0x4b,
	0x0a, 0x2f, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46,
	0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x56, 0x49, 0x44, 0x45, 0x4e, 0x44, 0x5f, 0x54, 0x49, 0x50,
	0x53, 0x10, 0x33, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0x8b, 0x8d, 0xe5, 0x8d, 0x96, 0xe5,
	0x88, 0x86, 0xe7, 0xba, 0xa2, 0xe6, 0x8f, 0x90, 0xe7, 0xa4, 0xba, 0x12, 0x4d, 0x0a, 0x30, 0x52,
	0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46, 0x45, 0x41, 0x54,
	0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x44, 0x4f,
	0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x56, 0x49, 0x41, 0x5f, 0x57, 0x49, 0x46, 0x49, 0x10,
	0x34, 0x1a, 0x17, 0xaa, 0xb6, 0x18, 0x13, 0xe4, 0xbb, 0x85, 0x57, 0x49, 0x46, 0x49, 0xe8, 0x87,
	0xaa, 0xe5, 0x8a, 0xa8, 0xe4, 0xb8, 0x8b, 0xe8, 0xbd, 0xbd, 0x12, 0x59, 0x0a, 0x31, 0x52, 0x45,
	0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55,
	0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x54, 0x4f,
	0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x10,
	0x35, 0x1a, 0x22, 0xaa, 0xb6, 0x18, 0x1e, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0xe8, 0x87, 0xaa,
	0xe5, 0x8a, 0xa8, 0xe7, 0xa9, 0xbf, 0xe7, 0xbb, 0x99, 0xe6, 0x8e, 0xa8, 0xe8, 0x8d, 0x90, 0xe8,
	0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0x12, 0x47, 0x0a, 0x2b, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54,
	0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x4f, 0x5f,
	0x57, 0x45, 0x41, 0x52, 0x10, 0x36, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe8, 0xa3, 0x85, 0xe5,
	0xa4, 0x87, 0xe4, 0xb8, 0x80, 0xe9, 0x94, 0xae, 0xe7, 0xa9, 0xbf, 0xe6, 0x88, 0xb4, 0x12, 0x3e,
	0x0a, 0x28, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46,
	0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4b, 0x49, 0x50,
	0x5f, 0x41, 0x4d, 0x49, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x37, 0x1a, 0x10, 0xaa, 0xb6,
	0x18, 0x0c, 0xe8, 0xb7, 0xb3, 0xe8, 0xbf, 0x87, 0xe5, 0x8a, 0xa8, 0xe7, 0x94, 0xbb, 0x12, 0x3a,
	0x0a, 0x24, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46,
	0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f,
	0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x10, 0x38, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0x87,
	0xaa, 0xe5, 0x8a, 0xa8, 0xe8, 0xa3, 0x85, 0xe9, 0x85, 0x8d, 0x12, 0x32, 0x0a, 0x1f, 0x52, 0x45,
	0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55,
	0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x39, 0x1a,
	0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe6, 0x80, 0xbb, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x12, 0x29,
	0x0a, 0x25, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46,
	0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x45,
	0x52, 0x56, 0x45, 0x5f, 0x4c, 0x45, 0x4e, 0x10, 0x64, 0x1a, 0x0c, 0x88, 0xf9, 0x2b, 0x01, 0x90,
	0xf9, 0x2b, 0x01, 0xa0, 0xf9, 0x2b, 0x01, 0x2a, 0x9a, 0x01, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x5f,
	0x54, 0x48, 0x41, 0x4e, 0x4b, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x44, 0x49, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x48, 0x41,
	0x4e, 0x4b, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x44, 0x49, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x1e, 0x52, 0x45, 0x53,
	0x5f, 0x54, 0x48, 0x41, 0x4e, 0x4b, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x44, 0x49,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x01, 0x1a, 0x07, 0xaa,
	0xb6, 0x18, 0x03, 0xe5, 0xb7, 0xa6, 0x12, 0x2c, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x48,
	0x41, 0x4e, 0x4b, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x44, 0x49, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x02, 0x1a, 0x07, 0xaa, 0xb6, 0x18,
	0x03, 0xe5, 0x8f, 0xb3, 0x2a, 0x78, 0x0a, 0x0d, 0x52, 0x45, 0x53, 0x5f, 0x46, 0x52, 0x45, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x4e, 0x55,
	0x4c, 0x4c, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x09, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x4c, 0x4f, 0x52,
	0x44, 0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe9, 0x99, 0x90, 0xe5, 0x85, 0x8d, 0xe6,
	0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0x12, 0x29, 0x0a, 0x0d, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x4c, 0x4f,
	0x52, 0x44, 0x53, 0x4b, 0x49, 0x4e, 0x10, 0x02, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe9, 0x99,
	0x90, 0xe5, 0x85, 0x8d, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe7, 0x9a, 0xae, 0xe8, 0x82, 0xa4,
	0x12, 0x0c, 0x0a, 0x08, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x2a, 0xae,
	0x08, 0x0a, 0x0f, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e,
	0x53, 0x54, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f,
	0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x4f, 0x0a, 0x19, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x5f, 0x43, 0x44, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x01, 0x1a,
	0x30, 0xaa, 0xb6, 0x18, 0x2c, 0xe4, 0xb8, 0xbb, 0xe5, 0x8a, 0xa8, 0xe9, 0x80, 0x80, 0xe5, 0x87,
	0xba, 0xe6, 0x88, 0x98, 0xe9, 0x98, 0x9f, 0xe5, 0x86, 0x8d, 0xe6, 0xac, 0xa1, 0xe5, 0x8a, 0xa0,
	0xe5, 0x85, 0xa5, 0x43, 0x44, 0xef, 0xbc, 0x88, 0xe5, 0x88, 0x86, 0xe9, 0x92, 0x9f, 0xef, 0xbc,
	0x89, 0x12, 0x53, 0x0a, 0x25, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x4f, 0x46,
	0x46, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x02, 0x1a, 0x28, 0xaa, 0xb6,
	0x18, 0x24, 0xe9, 0x98, 0x9f, 0xe9, 0x95, 0xbf, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe8, 0xbd,
	0xac, 0xe8, 0xae, 0xa9, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x8f, 0xe7, 0xa6, 0xbb, 0xe7, 0xba, 0xbf,
	0xe5, 0xa4, 0xa9, 0xe6, 0x95, 0xb0, 0x12, 0x51, 0x0a, 0x23, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f,
	0x41, 0x55, 0x54, 0x4f, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4c, 0x45, 0x41, 0x44,
	0x45, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x03, 0x1a,
	0x28, 0xaa, 0xb6, 0x18, 0x24, 0xe9, 0x98, 0x9f, 0xe9, 0x95, 0xbf, 0xe8, 0x87, 0xaa, 0xe5, 0x8a,
	0xa8, 0xe8, 0xbd, 0xac, 0xe8, 0xae, 0xa9, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x8f, 0xe4, 0xbb, 0xbb,
	0xe8, 0x81, 0x8c, 0xe5, 0xa4, 0xa9, 0xe6, 0x95, 0xb0, 0x12, 0x64, 0x0a, 0x2d, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4c,
	0x45, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x4f, 0x46,
	0x46, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x04, 0x1a, 0x31, 0xaa, 0xb6,
	0x18, 0x2d, 0xe9, 0x98, 0x9f, 0xe9, 0x95, 0xbf, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe8, 0xbd,
	0xac, 0xe8, 0xae, 0xa9, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe5, 0x91, 0x98, 0xe6, 0x9c, 0x80,
	0xe8, 0xbf, 0x91, 0xe6, 0xb4, 0xbb, 0xe8, 0xb7, 0x83, 0xe5, 0xa4, 0xa9, 0xe6, 0x95, 0xb0, 0x12,
	0x66, 0x0a, 0x2c, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x4d, 0x42,
	0x45, 0x52, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10,
	0x05, 0x1a, 0x34, 0xaa, 0xb6, 0x18, 0x30, 0xe9, 0x98, 0x9f, 0xe9, 0x95, 0xbf, 0xe8, 0x87, 0xaa,
	0xe5, 0x8a, 0xa8, 0xe8, 0xbd, 0xac, 0xe8, 0xae, 0xa9, 0xe6, 0x99, 0xae, 0xe9, 0x80, 0x9a, 0xe6,
	0x88, 0x90, 0xe5, 0x91, 0x98, 0xe6, 0x9c, 0x80, 0xe8, 0xbf, 0x91, 0xe6, 0xb4, 0xbb, 0xe8, 0xb7,
	0x83, 0xe5, 0xa4, 0xa9, 0xe6, 0x95, 0xb0, 0x12, 0x63, 0x0a, 0x29, 0x47, 0x55, 0x49, 0x4c, 0x44,
	0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4c, 0x45, 0x41,
	0x44, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f,
	0x44, 0x41, 0x59, 0x53, 0x10, 0x06, 0x1a, 0x34, 0xaa, 0xb6, 0x18, 0x30, 0xe9, 0x98, 0x9f, 0xe9,
	0x95, 0xbf, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe8, 0xbd, 0xac, 0xe8, 0xae, 0xa9, 0xe6, 0x99,
	0xae, 0xe9, 0x80, 0x9a, 0xe6, 0x88, 0x90, 0xe5, 0x91, 0x98, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x8f,
	0xe5, 0x8a, 0xa0, 0xe5, 0x85, 0xa5, 0xe5, 0xa4, 0xa9, 0xe6, 0x95, 0xb0, 0x12, 0x33, 0x0a, 0x17,
	0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x4f, 0x4e,
	0x45, 0x59, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x10, 0x07, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6,
	0x88, 0x98, 0xe9, 0x98, 0x9f, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0xb6, 0x88, 0xe8, 0x80,
	0x97, 0x12, 0x46, 0x0a, 0x24, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x59, 0x43, 0x4c, 0x45,
	0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x08, 0x1a, 0x1c, 0xaa, 0xb6, 0x18,
	0x18, 0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0xba, 0xe5, 0x91, 0xa8, 0xe6, 0x80, 0xbb, 0xe8, 0xb4, 0xa1,
	0xe7, 0x8c, 0xae, 0xe4, 0xb8, 0x8a, 0xe9, 0x99, 0x90, 0x12, 0x4a, 0x0a, 0x25, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x5f, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4c, 0x49, 0x4d,
	0x49, 0x54, 0x10, 0x09, 0x1a, 0x1f, 0xaa, 0xb6, 0x18, 0x1b, 0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0xba,
	0xe5, 0x91, 0xa8, 0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97, 0xe8, 0xb4, 0xa1, 0xe7, 0x8c, 0xae, 0xe4,
	0xb8, 0x8a, 0xe9, 0x99, 0x90, 0x12, 0x3a, 0x0a, 0x18, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x42,
	0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x10, 0x0a, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe5, 0xaf, 0xb9, 0xe6, 0x88, 0x98, 0xe6,
	0xac, 0xa1, 0xe6, 0x95, 0xb0, 0xe8, 0xb4, 0xa1, 0xe7, 0x8c, 0xae, 0xe5, 0x8f, 0x82, 0xe6, 0x95,
	0xb0, 0x12, 0x39, 0x0a, 0x17, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c,
	0x45, 0x5f, 0x54, 0x4f, 0x50, 0x34, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x10, 0x0b, 0x1a, 0x1c,
	0xaa, 0xb6, 0x18, 0x18, 0xe8, 0x83, 0x9c, 0xe5, 0x9c, 0xba, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0,
	0xe8, 0xb4, 0xa1, 0xe7, 0x8c, 0xae, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x12, 0x39, 0x0a, 0x17,
	0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x50,
	0x31, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x10, 0x0c, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe5,
	0xa4, 0xba, 0xe5, 0x86, 0xa0, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0xe8, 0xb4, 0xa1, 0xe7, 0x8c,
	0xae, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x12, 0x37, 0x0a, 0x12, 0x47, 0x55, 0x49, 0x4c, 0x44,
	0x5f, 0x44, 0x45, 0x53, 0x43, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x0d, 0x1a,
	0x1f, 0xaa, 0xb6, 0x18, 0x1b, 0xe6, 0x88, 0x98, 0xe9, 0x98, 0x9f, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf,
	0xb0, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe6, 0x95, 0xb0,
	0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f,
	0x4e, 0x53, 0x54, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x0e, 0x2a,
	0xba, 0x01, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x4a, 0x4f,
	0x49, 0x4e, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x25, 0x0a, 0x21,
	0x52, 0x45, 0x53, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x3b, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44,
	0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x01, 0x1a, 0x17, 0xaa, 0xb6, 0x18, 0x13, 0xe6, 0x88, 0x98,
	0xe9, 0x98, 0x9f, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x5f, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7,
	0x12, 0x3a, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x4a, 0x4f,
	0x49, 0x4e, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x4e,
	0x4b, 0x10, 0x02, 0x1a, 0x17, 0xaa, 0xb6, 0x18, 0x13, 0xe6, 0x88, 0x98, 0xe9, 0x98, 0x9f, 0xe9,
	0x99, 0x90, 0xe5, 0x88, 0xb6, 0x5f, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0x2a, 0x90, 0x01, 0x0a,
	0x13, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x49, 0x43,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2c, 0x0a,
	0x0f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x49, 0x43, 0x4f, 0x4e,
	0x10, 0x01, 0x1a, 0x17, 0xaa, 0xb6, 0x18, 0x13, 0xe6, 0x88, 0x98, 0xe9, 0x98, 0x9f, 0xe5, 0x9b,
	0xbe, 0xe6, 0xa0, 0x87, 0x5f, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0x12, 0x32, 0x0a, 0x15, 0x47,
	0x55, 0x49, 0x4c, 0x44, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x47, 0x52,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x1a, 0x17, 0xaa, 0xb6, 0x18, 0x13, 0xe6, 0x88, 0x98, 0xe9,
	0x98, 0x9f, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0x5f, 0xe5, 0xba, 0x95, 0xe7, 0xba, 0xb9, 0x2a,
	0xd6, 0x02, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x4c, 0x4f,
	0x47, 0x4f, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x18, 0x0a,
	0x14, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x0a, 0x43, 0x4f, 0x4c, 0x4f, 0x52,
	0x5f, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x01, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe8, 0x93, 0x9d,
	0xe8, 0x89, 0xb2, 0x12, 0x1c, 0x0a, 0x0c, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x41,
	0x4e, 0x47, 0x45, 0x10, 0x02, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe6, 0xa9, 0x99, 0xe8, 0x89,
	0xb2, 0x12, 0x19, 0x0a, 0x09, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x44, 0x10, 0x03,
	0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe7, 0xba, 0xa2, 0xe8, 0x89, 0xb2, 0x12, 0x1c, 0x0a, 0x0c,
	0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x50, 0x55, 0x52, 0x50, 0x4c, 0x45, 0x10, 0x04, 0x1a, 0x0a,
	0xaa, 0xb6, 0x18, 0x06, 0xe7, 0xb4, 0xab, 0xe8, 0x89, 0xb2, 0x12, 0x1b, 0x0a, 0x0b, 0x43, 0x4f,
	0x4c, 0x4f, 0x52, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x05, 0x1a, 0x0a, 0xaa, 0xb6, 0x18,
	0x06, 0xe7, 0xbb, 0xbf, 0xe8, 0x89, 0xb2, 0x12, 0x1c, 0x0a, 0x0c, 0x43, 0x4f, 0x4c, 0x4f, 0x52,
	0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x06, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe9,
	0xbb, 0x84, 0xe8, 0x89, 0xb2, 0x12, 0x1b, 0x0a, 0x0b, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x42,
	0x4c, 0x41, 0x43, 0x4b, 0x10, 0x07, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe9, 0xbb, 0x91, 0xe8,
	0x89, 0xb2, 0x12, 0x1b, 0x0a, 0x0b, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x42, 0x52, 0x4f, 0x57,
	0x4e, 0x10, 0x08, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe6, 0xa3, 0x95, 0xe8, 0x89, 0xb2, 0x12,
	0x1a, 0x0a, 0x0a, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x47, 0x52, 0x41, 0x59, 0x10, 0x09, 0x1a,
	0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe7, 0x81, 0xb0, 0xe8, 0x89, 0xb2, 0x12, 0x1b, 0x0a, 0x0b, 0x43,
	0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x10, 0x0a, 0x1a, 0x0a, 0xaa, 0xb6,
	0x18, 0x06, 0xe7, 0x99, 0xbd, 0xe8, 0x89, 0xb2, 0x2a, 0x9b, 0x04, 0x0a, 0x0d, 0x52, 0x45, 0x53,
	0x5f, 0x4a, 0x55, 0x4d, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x0d, 0x0a, 0x09, 0x4a, 0x55,
	0x4d, 0x50, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x0d, 0x4a, 0x55, 0x4d,
	0x50, 0x5f, 0x45, 0x4d, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x0a, 0xaa, 0xb6,
	0x18, 0x06, 0xe5, 0xb8, 0x83, 0xe9, 0x98, 0xb5, 0x12, 0x23, 0x0a, 0x10, 0x4a, 0x55, 0x4d, 0x50,
	0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x53, 0x45, 0x10, 0x02, 0x1a, 0x0d,
	0xaa, 0xb6, 0x18, 0x09, 0xe4, 0xb8, 0xaa, 0xe6, 0x80, 0xa7, 0xe5, 0x8c, 0x96, 0x12, 0x19, 0x0a,
	0x09, 0x4a, 0x55, 0x4d, 0x50, 0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x10, 0x03, 0x1a, 0x0a, 0xaa, 0xb6,
	0x18, 0x06, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0x12, 0x1f, 0x0a, 0x0f, 0x4a, 0x55, 0x4d, 0x50,
	0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x50, 0x41, 0x53, 0x53, 0x10, 0x04, 0x1a, 0x0a, 0xaa,
	0xb6, 0x18, 0x06, 0xe6, 0x88, 0x98, 0xe4, 0xbb, 0xa4, 0x12, 0x19, 0x0a, 0x09, 0x4a, 0x55, 0x4d,
	0x50, 0x5f, 0x53, 0x48, 0x4f, 0x50, 0x10, 0x05, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0x95,
	0x86, 0xe5, 0x9f, 0x8e, 0x12, 0x27, 0x0a, 0x11, 0x4a, 0x55, 0x4d, 0x50, 0x5f, 0x48, 0x45, 0x52,
	0x4f, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x10, 0x06, 0x1a, 0x10, 0xaa, 0xb6, 0x18,
	0x0c, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe6, 0x94, 0xb6, 0xe9, 0x9b, 0x86, 0x12, 0x25, 0x0a,
	0x0f, 0x4a, 0x55, 0x4d, 0x50, 0x5f, 0x50, 0x56, 0x50, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45,
	0x10, 0x07, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe7, 0xbb, 0x93, 0xe7, 0xae, 0x97, 0xe8, 0xaf,
	0xa6, 0xe6, 0x83, 0x85, 0x12, 0x1d, 0x0a, 0x0d, 0x4a, 0x55, 0x4d, 0x50, 0x5f, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x10, 0x08, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe6, 0xb4, 0xbb,
	0xe5, 0x8a, 0xa8, 0x12, 0x26, 0x0a, 0x10, 0x4a, 0x55, 0x4d, 0x50, 0x5f, 0x53, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x49, 0x50, 0x10, 0x09, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8,
	0xb5, 0x9b, 0xe5, 0xad, 0xa3, 0xe4, 0xb9, 0x8b, 0xe6, 0x97, 0x85, 0x12, 0x15, 0x0a, 0x08, 0x4a,
	0x55, 0x4d, 0x50, 0x5f, 0x50, 0x56, 0x50, 0x10, 0x0a, 0x1a, 0x07, 0xaa, 0xb6, 0x18, 0x03, 0x50,
	0x56, 0x50, 0x12, 0x1b, 0x0a, 0x0b, 0x4a, 0x55, 0x4d, 0x50, 0x5f, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x10, 0x0b, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0xa5, 0xbd, 0xe5, 0x8f, 0x8b, 0x12,
	0x27, 0x0a, 0x11, 0x4a, 0x55, 0x4d, 0x50, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x50, 0x41, 0x43,
	0x4b, 0x41, 0x47, 0x45, 0x10, 0x0c, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x8d, 0xa1, 0xe5,
	0x8c, 0x85, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0x12, 0x19, 0x0a, 0x09, 0x4a, 0x55, 0x4d, 0x50,
	0x5f, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x0d, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe9, 0x82, 0xae,
	0xe4, 0xbb, 0xb6, 0x12, 0x22, 0x0a, 0x0c, 0x4a, 0x55, 0x4d, 0x50, 0x5f, 0x41, 0x43, 0x48, 0x49,
	0x45, 0x56, 0x45, 0x10, 0x0e, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x88, 0x90, 0xe5, 0xb0,
	0xb1, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0x12, 0x1f, 0x0a, 0x09, 0x4a, 0x55, 0x4d, 0x50, 0x5f,
	0x47, 0x72, 0x6f, 0x77, 0x10, 0x0f, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x88, 0x90, 0xe9,
	0x95, 0xbf, 0xe4, 0xb9, 0x8b, 0xe8, 0xb7, 0xaf, 0x12, 0x0c, 0x0a, 0x08, 0x4a, 0x55, 0x4d, 0x50,
	0x5f, 0x4d, 0x41, 0x58, 0x10, 0x10, 0x2a, 0xa8, 0x03, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x5f, 0x42,
	0x4f, 0x53, 0x53, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4e, 0x55,
	0x4c, 0x4c, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x09, 0x44, 0x45, 0x41, 0x44, 0x5f, 0x44, 0x52, 0x4f,
	0x50, 0x10, 0x01, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe6, 0xad, 0xbb, 0xe4, 0xba, 0xa1, 0xe6,
	0x97, 0xb6, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0x12, 0x24, 0x0a, 0x08, 0x41, 0x55, 0x54, 0x4f,
	0x5f, 0x47, 0x45, 0x54, 0x10, 0x02, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0x85, 0xb3, 0xe9,
	0x97, 0xad, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe6, 0x8b, 0xbe, 0xe5, 0x8f, 0x96, 0x12, 0x2e,
	0x0a, 0x0f, 0x41, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x53, 0x45, 0x4c,
	0x4c, 0x10, 0x03, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe6, 0x8b, 0xbe, 0xe5, 0x8f, 0x96, 0xe5,
	0x90, 0x8e, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0x12, 0x2f,
	0x0a, 0x10, 0x41, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x48, 0x4f, 0x50, 0x5f, 0x4d, 0x55, 0x54,
	0x45, 0x58, 0x10, 0x04, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe9, 0x80, 0x89, 0xe5, 0x8d, 0xa1,
	0xe5, 0x92, 0x8c, 0xe5, 0x95, 0x86, 0xe5, 0xba, 0x97, 0xe4, 0xba, 0x92, 0xe6, 0x96, 0xa5, 0x12,
	0x24, 0x0a, 0x0e, 0x41, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x10, 0x05, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x8b, 0xbe, 0xe5, 0x8f, 0x96, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x12, 0x2b, 0x0a, 0x0f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x06, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12,
	0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe7, 0xbb, 0xa7, 0xe6,
	0x89, 0xbf, 0x12, 0x21, 0x0a, 0x0b, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x53, 0x48, 0x4f,
	0x57, 0x10, 0x07, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe9, 0xa2, 0x84, 0xe8, 0xae, 0xbe, 0xe8,
	0xa1, 0xa8, 0xe7, 0x8e, 0xb0, 0x12, 0x23, 0x0a, 0x0d, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x44, 0x49,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x08, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x8e,
	0x89, 0xe8, 0x90, 0xbd, 0xe8, 0xb7, 0x9d, 0xe7, 0xa6, 0xbb, 0x12, 0x2b, 0x0a, 0x0f, 0x44, 0x52,
	0x4f, 0x50, 0x5f, 0x48, 0x50, 0x42, 0x4f, 0x58, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x10, 0x09, 0x1a,
	0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe9, 0x9a, 0x8f, 0xe6, 0x9c, 0xba, 0xe6, 0x8e, 0x89, 0xe8, 0x90,
	0xbd, 0xe8, 0xa1, 0xa8, 0xe7, 0x8e, 0xb0, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b,
	0x01, 0x2a, 0x42, 0x0a, 0x13, 0x45, 0x42, 0x6f, 0x73, 0x73, 0x41, 0x77, 0x61, 0x64, 0x43, 0x68,
	0x6f, 0x6f, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x6f, 0x67, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x02, 0x1a, 0x08, 0x88, 0xf9, 0x2b,
	0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xc6, 0x03, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x5f, 0x41, 0x57,
	0x41, 0x52, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00,
	0x12, 0x25, 0x0a, 0x0c, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x5f, 0x42, 0x4f, 0x58,
	0x10, 0x01, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe6, 0x8b, 0xbe, 0xe5, 0x8f, 0x96, 0xe5, 0xae,
	0x9d, 0xe7, 0xae, 0xb1, 0x41, 0x47, 0x45, 0x12, 0x2d, 0x0a, 0x10, 0x41, 0x47, 0x45, 0x5f, 0x42,
	0x4f, 0x53, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x10, 0x02, 0x1a, 0x17, 0xaa,
	0xb6, 0x18, 0x13, 0x42, 0x4f, 0x53, 0x53, 0xe5, 0x87, 0x86, 0xe5, 0xa4, 0x87, 0xe8, 0xa1, 0xa8,
	0xe6, 0xbc, 0x94, 0x41, 0x47, 0x45, 0x12, 0x35, 0x0a, 0x16, 0x41, 0x47, 0x45, 0x5f, 0x42, 0x4f,
	0x53, 0x53, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45,
	0x10, 0x03, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe5, 0x87,
	0x86, 0xe5, 0xa4, 0x87, 0xe8, 0xa1, 0xa8, 0xe6, 0xbc, 0x94, 0x41, 0x47, 0x45, 0x12, 0x25, 0x0a,
	0x0e, 0x41, 0x47, 0x45, 0x5f, 0x42, 0x4f, 0x53, 0x53, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10,
	0x04, 0x1a, 0x11, 0xaa, 0xb6, 0x18, 0x0d, 0x42, 0x4f, 0x53, 0x53, 0xe5, 0x85, 0xa5, 0xe5, 0x9c,
	0xba, 0x41, 0x47, 0x45, 0x12, 0x2d, 0x0a, 0x14, 0x41, 0x47, 0x45, 0x5f, 0x42, 0x4f, 0x53, 0x53,
	0x5f, 0x41, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x05, 0x1a, 0x13,
	0xaa, 0xb6, 0x18, 0x0f, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe5, 0x85, 0xa5, 0xe5, 0x9c, 0xba,
	0x41, 0x47, 0x45, 0x12, 0x25, 0x0a, 0x0e, 0x41, 0x47, 0x45, 0x5f, 0x42, 0x4f, 0x53, 0x53, 0x5f,
	0x4c, 0x45, 0x41, 0x56, 0x45, 0x10, 0x06, 0x1a, 0x11, 0xaa, 0xb6, 0x18, 0x0d, 0x42, 0x4f, 0x53,
	0x53, 0xe7, 0xa6, 0xbb, 0xe5, 0x9c, 0xba, 0x41, 0x47, 0x45, 0x12, 0x37, 0x0a, 0x18, 0x42, 0x41,
	0x54, 0x54, 0x4c, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45,
	0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x07, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe4, 0xb8,
	0xbb, 0xe5, 0x9c, 0xba, 0xe4, 0xb8, 0xad, 0xe5, 0xbf, 0x83, 0xe7, 0x82, 0xb9, 0xe5, 0x90, 0x8d,
	0xe5, 0xad, 0x97, 0x12, 0x28, 0x0a, 0x12, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4d, 0x4f,
	0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x53, 0x10, 0x08, 0x1a, 0x10, 0xaa, 0xb6, 0x18,
	0x0c, 0xe6, 0x80, 0xaa, 0xe7, 0x89, 0xa9, 0xe9, 0x98, 0xb5, 0xe4, 0xbd, 0x8d, 0x12, 0x25, 0x0a,
	0x0c, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x42, 0x4f, 0x58, 0x10, 0x09, 0x1a,
	0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0xe5, 0xae, 0x9d, 0xe7, 0xae,
	0xb1, 0x41, 0x47, 0x45, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0x97,
	0x02, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x5f, 0x49, 0x45, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x43, 0x4f,
	0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x4e, 0x44, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x09, 0x52,
	0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x01, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09,
	0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe6, 0x95, 0xb0, 0x12, 0x1e, 0x0a, 0x0b, 0x4c, 0x4f, 0x53,
	0x45, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4b, 0x10, 0x02, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09,
	0xe8, 0xbf, 0x9e, 0xe8, 0xb4, 0xa5, 0xe6, 0x95, 0xb0, 0x12, 0x12, 0x0a, 0x02, 0x48, 0x50, 0x10,
	0x03, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe8, 0xa1, 0x80, 0xe9, 0x87, 0x8f, 0x12, 0x14, 0x0a,
	0x04, 0x52, 0x41, 0x4e, 0x4b, 0x10, 0x04, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0x90, 0x8d,
	0xe6, 0xac, 0xa1, 0x12, 0x14, 0x0a, 0x04, 0x4c, 0x4f, 0x52, 0x44, 0x10, 0x05, 0x1a, 0x0a, 0xaa,
	0xb6, 0x18, 0x06, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0x12, 0x1f, 0x0a, 0x0f, 0x52, 0x45, 0x53,
	0x5f, 0x49, 0x45, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x06, 0x1a, 0x0a,
	0xaa, 0xb6, 0x18, 0x06, 0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81, 0x12, 0x39, 0x0a, 0x1a, 0x52, 0x45,
	0x53, 0x5f, 0x49, 0x45, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f,
	0x4e, 0x45, 0x57, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x07, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15,
	0xe5, 0x95, 0x86, 0xe5, 0xba, 0x97, 0xe8, 0xa7, 0xa3, 0xe9, 0x94, 0x81, 0xe6, 0x96, 0xb0, 0xe5,
	0x8d, 0xa1, 0xe7, 0x89, 0x8c, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x08, 0x2a, 0x69, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x5f,
	0x49, 0x45, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x43, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x0b,
	0x0a, 0x07, 0x43, 0x44, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x0c, 0x53,
	0x48, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x10, 0x01, 0x1a, 0x10, 0xaa,
	0xb6, 0x18, 0x0c, 0xe5, 0x88, 0xb7, 0xe6, 0x96, 0xb0, 0xe5, 0x95, 0x86, 0xe5, 0xba, 0x97, 0x12,
	0x22, 0x0a, 0x0c, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10,
	0x02, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe5, 0x8f, 0x98,
	0xe6, 0x9b, 0xb4, 0x2a, 0x8c, 0x03, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x5f, 0x49, 0x45, 0x44, 0x52,
	0x4f, 0x50, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12,
	0x10, 0x0a, 0x0c, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10,
	0x00, 0x12, 0x1f, 0x0a, 0x09, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x01,
	0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0x8e, 0xb7, 0xe5, 0xbe, 0x97, 0xe5, 0x8d, 0xa1, 0xe7,
	0x89, 0x8c, 0x12, 0x26, 0x0a, 0x10, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe7, 0xad,
	0x96, 0xe7, 0x95, 0xa5, 0xe6, 0xbf, 0x80, 0xe6, 0xb4, 0xbb, 0x12, 0x23, 0x0a, 0x0d, 0x52, 0x4f,
	0x55, 0x4e, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x10, 0xaa,
	0xb6, 0x18, 0x0c, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe5, 0x8f, 0x98, 0xe6, 0x9b, 0xb4, 0x12,
	0x22, 0x0a, 0x0c, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10,
	0x04, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe7, 0x8e, 0xa9, 0xe5, 0xae, 0xb6, 0xe5, 0x8d, 0x87,
	0xe7, 0xba, 0xa7, 0x12, 0x2f, 0x0a, 0x13, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x41, 0x4e, 0x44, 0x5f,
	0x48, 0x50, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x05, 0x1a, 0x16, 0xaa, 0xb6,
	0x18, 0x12, 0xe6, 0x8e, 0x92, 0xe5, 0x90, 0x8d, 0xe8, 0xa1, 0x80, 0xe9, 0x87, 0x8f, 0xe5, 0x8f,
	0x98, 0xe5, 0x8a, 0xa8, 0x12, 0x25, 0x0a, 0x09, 0x57, 0x41, 0x52, 0x4d, 0x5f, 0x4f, 0x50, 0x45,
	0x4e, 0x10, 0x06, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0x8e, 0xa8, 0xe8, 0x8d, 0x90, 0xe9,
	0x98, 0xb5, 0xe5, 0xae, 0xb9, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0x12, 0x22, 0x0a, 0x0c, 0x47,
	0x4f, 0x4c, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x07, 0x1a, 0x10, 0xaa,
	0xb6, 0x18, 0x0c, 0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81, 0xe5, 0x8f, 0x98, 0xe6, 0x9b, 0xb4, 0x12,
	0x2b, 0x0a, 0x0f, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x55, 0x53,
	0x45, 0x44, 0x10, 0x08, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8,
	0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0x12, 0x24, 0x0a, 0x0e,
	0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x44, 0x10, 0x09,
	0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0xa4, 0xa9, 0xe8, 0xb5, 0x8b, 0xe6, 0xbf, 0x80, 0xe6,
	0xb4, 0xbb, 0x2a, 0xc1, 0x01, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x5f, 0x49, 0x45, 0x44, 0x52, 0x4f,
	0x50, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x0f, 0x0a,
	0x0b, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x21,
	0x0a, 0x0b, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x01, 0x1a,
	0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x8d, 0xa1, 0xe7, 0x89, 0x8c, 0xe5, 0x8f, 0x98, 0xe5, 0x8a,
	0xa8, 0x12, 0x25, 0x0a, 0x0f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x52, 0x45,
	0x4d, 0x4f, 0x56, 0x45, 0x10, 0x02, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe7, 0xad, 0x96, 0xe7,
	0x95, 0xa5, 0xe7, 0xa7, 0xbb, 0xe9, 0x99, 0xa4, 0x12, 0x26, 0x0a, 0x0a, 0x57, 0x41, 0x52, 0x4d,
	0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x03, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0x8e,
	0xa8, 0xe8, 0x8d, 0x90, 0xe9, 0x98, 0xb5, 0xe5, 0xae, 0xb9, 0xe5, 0x85, 0xb3, 0xe9, 0x97, 0xad,
	0x12, 0x24, 0x0a, 0x0e, 0x57, 0x49, 0x4e, 0x5f, 0x4e, 0x55, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x10, 0x04, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe7, 0x8e, 0xa9, 0xe5, 0xae, 0xb6,
	0xe8, 0xbf, 0x9e, 0xe8, 0x83, 0x9c, 0x2a, 0xeb, 0x05, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x5f, 0x49,
	0x45, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c,
	0x10, 0x00, 0x12, 0x38, 0x0a, 0x16, 0x52, 0x41, 0x49, 0x53, 0x45, 0x5f, 0x57, 0x45, 0x49, 0x47,
	0x48, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x43, 0x46, 0x47, 0x5f, 0x49, 0x44, 0x10, 0x01, 0x1a, 0x1c,
	0xaa, 0xb6, 0x18, 0x18, 0xe5, 0x8d, 0xa1, 0xe7, 0x89, 0x8c, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd,
	0xe6, 0xa6, 0x82, 0xe7, 0x8e, 0x87, 0xe6, 0x8f, 0x90, 0xe5, 0x8d, 0x87, 0x12, 0x23, 0x0a, 0x0d,
	0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x43, 0x46, 0x47, 0x10, 0x02, 0x1a,
	0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0xa4, 0xa9, 0xe8, 0xb5, 0x8b, 0xe6, 0x8e, 0x89, 0xe8, 0x90,
	0xbd, 0x12, 0x4f, 0x0a, 0x21, 0x52, 0x41, 0x49, 0x53, 0x45, 0x5f, 0x57, 0x45, 0x49, 0x47, 0x48,
	0x54, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x1a, 0x28, 0xaa, 0xb6, 0x18, 0x24, 0xe7, 0x9b,
	0xae, 0xe6, 0xa0, 0x87, 0xe9, 0x98, 0xb5, 0xe5, 0xae, 0xb9, 0xe5, 0x8d, 0xa1, 0xe7, 0x89, 0x8c,
	0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0xe6, 0xa6, 0x82, 0xe7, 0x8e, 0x87, 0xe6, 0x8f, 0x90, 0xe5,
	0x8d, 0x87, 0x12, 0x55, 0x0a, 0x27, 0x52, 0x41, 0x49, 0x53, 0x45, 0x5f, 0x57, 0x45, 0x49, 0x47,
	0x48, 0x54, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x54, 0x41, 0x52,
	0x47, 0x45, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x1a,
	0x28, 0xaa, 0xb6, 0x18, 0x24, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0xe9, 0x98, 0xb5, 0xe5, 0xae,
	0xb9, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0xe6, 0xa6, 0x82,
	0xe7, 0x8e, 0x87, 0xe6, 0x8f, 0x90, 0xe5, 0x8d, 0x87, 0x12, 0x40, 0x0a, 0x1b, 0x44, 0x52, 0x4f,
	0x50, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x48, 0x45,
	0x43, 0x4b, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x10, 0x05, 0x1a, 0x1f, 0xaa, 0xb6, 0x18, 0x1b,
	0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0xe5, 0xa4, 0x9a, 0xe5, 0xbc, 0xa0, 0xe6, 0x9c, 0x80, 0xe5,
	0xa4, 0x9a, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xe5, 0x8d, 0xa1, 0x12, 0x37, 0x0a, 0x15, 0x52,
	0x41, 0x49, 0x53, 0x45, 0x5f, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x5f,
	0x57, 0x41, 0x52, 0x4d, 0x10, 0x06, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe6, 0x8e, 0xa8, 0xe8,
	0x8d, 0x90, 0xe9, 0x98, 0xb5, 0xe5, 0xae, 0xb9, 0xe6, 0xa6, 0x82, 0xe7, 0x8e, 0x87, 0xe6, 0x8f,
	0x90, 0xe5, 0x8d, 0x87, 0x12, 0x3a, 0x0a, 0x15, 0x52, 0x41, 0x49, 0x53, 0x45, 0x5f, 0x57, 0x45,
	0x49, 0x47, 0x48, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x10, 0x07, 0x1a,
	0x1f, 0xaa, 0xb6, 0x18, 0x1b, 0xe5, 0xa4, 0x87, 0xe6, 0x88, 0x98, 0xe5, 0x8c, 0xba, 0xe5, 0x8d,
	0xa1, 0xe7, 0x89, 0x8c, 0xe6, 0xa6, 0x82, 0xe7, 0x8e, 0x87, 0xe6, 0x8f, 0x90, 0xe5, 0x8d, 0x87,
	0x12, 0x3b, 0x0a, 0x10, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x49, 0x52,
	0x44, 0x52, 0x4f, 0x50, 0x10, 0x08, 0x1a, 0x25, 0xaa, 0xb6, 0x18, 0x21, 0xe5, 0x8f, 0x98, 0xe6,
	0x9b, 0xb4, 0xe5, 0x85, 0xa8, 0xe5, 0xb1, 0x80, 0xe6, 0x8a, 0x95, 0xe6, 0x94, 0xbe, 0xe9, 0x9a,
	0x8f, 0xe6, 0x9c, 0xba, 0xe6, 0x96, 0xb9, 0xe6, 0xa1, 0x88, 0xe7, 0xbb, 0x84, 0x12, 0x44, 0x0a,
	0x1a, 0x52, 0x41, 0x49, 0x53, 0x45, 0x5f, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x46, 0x4f,
	0x52, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x50, 0x10, 0x09, 0x1a, 0x24, 0xaa,
	0xb6, 0x18, 0x20, 0xe5, 0xa4, 0xa9, 0xe8, 0xb5, 0x8b, 0x43, 0x50, 0xe5, 0x8d, 0xa1, 0xe7, 0x89,
	0x8c, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0xe6, 0xa6, 0x82, 0xe7, 0x8e, 0x87, 0xe6, 0x8f, 0x90,
	0xe5, 0x8d, 0x87, 0x12, 0x3d, 0x0a, 0x18, 0x52, 0x41, 0x49, 0x53, 0x45, 0x5f, 0x57, 0x45, 0x49,
	0x47, 0x48, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x57, 0x5a, 0x4a, 0x10,
	0x0a, 0x1a, 0x1f, 0xaa, 0xb6, 0x18, 0x1b, 0xe7, 0x8e, 0x8b, 0xe6, 0x98, 0xad, 0xe5, 0x90, 0x9b,
	0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe6, 0x8f, 0x90, 0xe5,
	0x8d, 0x87, 0x12, 0x40, 0x0a, 0x18, 0x52, 0x41, 0x49, 0x53, 0x45, 0x5f, 0x57, 0x45, 0x49, 0x47,
	0x48, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x0b,
	0x1a, 0x22, 0xaa, 0xb6, 0x18, 0x1e, 0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a, 0xe5, 0x8d, 0xa1, 0xe7,
	0x89, 0x8c, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0xe6, 0xa6, 0x82, 0xe7, 0x8e, 0x87, 0xe6, 0x8f,
	0x90, 0xe5, 0x8d, 0x87, 0x2a, 0x34, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x5f, 0x4c, 0x4f, 0x41, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x1b, 0x0a,
	0x05, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x00, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe7, 0xad,
	0x89, 0xe7, 0xba, 0xa7, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x2a, 0x4d, 0x0a, 0x14, 0x52, 0x45,
	0x53, 0x5f, 0x51, 0x54, 0x53, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x12, 0x18, 0x0a, 0x05, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x00, 0x1a, 0x0d, 0xaa,
	0xb6, 0x18, 0x09, 0xe5, 0x9f, 0xba, 0xe7, 0xa1, 0x80, 0xe5, 0x8c, 0x85, 0x12, 0x1b, 0x0a, 0x08,
	0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x10, 0x01, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09,
	0xe7, 0x8e, 0xa9, 0xe6, 0xb3, 0x95, 0xe5, 0x8c, 0x85, 0x2a, 0x8a, 0x01, 0x0a, 0x0b, 0x52, 0x65,
	0x73, 0x47, 0x72, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x12, 0x52, 0x65, 0x73,
	0x47, 0x72, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x48, 0x65, 0x78, 0x61, 0x67, 0x6f, 0x6e, 0x10,
	0x00, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe5, 0x85, 0xad, 0xe8, 0xbe, 0xb9, 0xe5, 0xbd, 0xa2,
	0x12, 0x24, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x47, 0x72, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53,
	0x71, 0x75, 0x61, 0x72, 0x65, 0x10, 0x01, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe6, 0xad, 0xa3,
	0xe6, 0x96, 0xb9, 0xe5, 0xbd, 0xa2, 0x12, 0x24, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x47, 0x72, 0x69,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x10, 0x02,
	0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe7, 0x9f, 0xa9, 0xe5, 0xbd, 0xa2, 0x1a, 0x08, 0x88, 0xf9,
	0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0x64, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x46, 0x6f, 0x72,
	0x6d, 0x75, 0x6c, 0x61, 0x41, 0x50, 0x46, 0x75, 0x6e, 0x63, 0x12, 0x23, 0x0a, 0x13, 0x52, 0x65,
	0x73, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x41, 0x50, 0x46, 0x75, 0x6e, 0x63, 0x41, 0x64,
	0x64, 0x10, 0x00, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0x8a, 0xa0, 0xe6, 0xb3, 0x95, 0x12,
	0x25, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x41, 0x50, 0x46,
	0x75, 0x6e, 0x63, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x10, 0x01, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06,
	0xe4, 0xb9, 0x98, 0xe6, 0xb3, 0x95, 0x1a, 0x04, 0x88, 0xf9, 0x2b, 0x01, 0x2a, 0x82, 0x01, 0x0a,
	0x16, 0x52, 0x65, 0x73, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x70, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x20, 0x52, 0x65, 0x73, 0x44, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x4d, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x00, 0x1a, 0x0d, 0xaa,
	0xb6, 0x18, 0x09, 0xe5, 0x9b, 0xba, 0xe5, 0xae, 0x9a, 0xe5, 0x80, 0xbc, 0x12, 0x2d, 0x0a, 0x1a,
	0x52, 0x65, 0x73, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x61, 0x74, 0x65, 0x10, 0x01, 0x1a, 0x0d, 0xaa, 0xb6,
	0x18, 0x09, 0xe4, 0xb8, 0x87, 0xe5, 0x88, 0x86, 0xe6, 0xaf, 0x94, 0x1a, 0x04, 0x88, 0xf9, 0x2b,
	0x01, 0x2a, 0x9b, 0x02, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x14, 0x52, 0x65, 0x73,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe5,
	0xb1, 0x82, 0xe7, 0xba, 0xa7, 0x12, 0x2e, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x4c, 0x61, 0x79, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x31, 0x10, 0x02, 0x1a,
	0x14, 0xaa, 0xb6, 0x18, 0x10, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe5, 0xb1,
	0x82, 0xe7, 0xba, 0xa7, 0x31, 0x12, 0x2e, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x4c, 0x61, 0x79, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x32, 0x10, 0x03, 0x1a,
	0x14, 0xaa, 0xb6, 0x18, 0x10, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe5, 0xb1,
	0x82, 0xe7, 0xba, 0xa7, 0x32, 0x12, 0x2e, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x4c, 0x61, 0x79, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x33, 0x10, 0x04, 0x1a,
	0x14, 0xaa, 0xb6, 0x18, 0x10, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe5, 0xb1,
	0x82, 0xe7, 0xba, 0xa7, 0x33, 0x12, 0x2e, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x4c, 0x61, 0x79, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x34, 0x10, 0x05, 0x1a,
	0x14, 0xaa, 0xb6, 0x18, 0x10, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe5, 0xb1,
	0x82, 0xe7, 0xba, 0xa7, 0x34, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a,
	0xb8, 0x03, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x65,
	0x73, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x37, 0x0a, 0x23, 0x52,
	0x65, 0x73, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x4b, 0x69,
	0x6c, 0x6c, 0x10, 0x01, 0x1a, 0x0e, 0xaa, 0xb6, 0x18, 0x0a, 0x35, 0xe6, 0x9d, 0x80, 0xe6, 0x92,
	0xad, 0xe6, 0x8a, 0xa5, 0x12, 0x3f, 0x0a, 0x23, 0x52, 0x65, 0x73, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e,
	0x75, 0x6d, 0x65, 0x72, 0x6f, 0x75, 0x73, 0x48, 0x61, 0x72, 0x6d, 0x10, 0x02, 0x1a, 0x16, 0xaa,
	0xb6, 0x18, 0x12, 0xe5, 0xa4, 0xa7, 0xe9, 0x87, 0x8f, 0xe8, 0xbe, 0x93, 0xe5, 0x87, 0xba, 0xe6,
	0x92, 0xad, 0xe6, 0x8a, 0xa5, 0x12, 0x43, 0x0a, 0x21, 0x52, 0x65, 0x73, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x54, 0x61, 0x6b, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x10, 0x03, 0x1a, 0x1c, 0xaa, 0xb6,
	0x18, 0x18, 0xe6, 0x89, 0xbf, 0xe5, 0x8f, 0x97, 0xe5, 0xa4, 0xa7, 0xe9, 0x87, 0x8f, 0xe4, 0xbc,
	0xa4, 0xe5, 0xae, 0xb3, 0xe6, 0x92, 0xad, 0xe6, 0x8a, 0xa5, 0x12, 0x37, 0x0a, 0x1b, 0x52, 0x65,
	0x73, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x65, 0x61, 0x74, 0x10, 0x04, 0x1a, 0x16, 0xaa, 0xb6, 0x18,
	0x12, 0xe5, 0xa4, 0xa7, 0xe9, 0x87, 0x8f, 0xe6, 0xb2, 0xbb, 0xe7, 0x96, 0x97, 0xe6, 0x92, 0xad,
	0xe6, 0x8a, 0xa5, 0x12, 0x42, 0x0a, 0x26, 0x52, 0x65, 0x73, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x05, 0x1a,
	0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0x8e, 0xa7, 0xe5, 0x88, 0xb6, 0xe6, 0x97, 0xb6, 0xe9, 0x95,
	0xbf, 0xe6, 0x92, 0xad, 0xe6, 0x8a, 0xa5, 0x12, 0x37, 0x0a, 0x1b, 0x52, 0x65, 0x73, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4b, 0x69, 0x6c, 0x6c, 0x10, 0x06, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0xaf,
	0x8f, 0xe6, 0xac, 0xa1, 0xe5, 0x87, 0xbb, 0xe6, 0x9d, 0x80, 0xe6, 0x92, 0xad, 0xe6, 0x8a, 0xa5,
	0x1a, 0x08, 0x90, 0xf9, 0x2b, 0x01, 0x88, 0xf9, 0x2b, 0x01, 0x2a, 0xbf, 0x0c, 0x0a, 0x20, 0x52,
	0x45, 0x43, 0x52, 0x55, 0x49, 0x54, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x47, 0x55, 0x49, 0x44, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12,
	0x27, 0x0a, 0x23, 0x52, 0x45, 0x43, 0x52, 0x55, 0x49, 0x54, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x47,
	0x55, 0x49, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x36, 0x0a, 0x20, 0x52, 0x45, 0x43, 0x52,
	0x55, 0x49, 0x54, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x47, 0x55, 0x49, 0x44, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x10, 0x01, 0x1a, 0x10,
	0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x96, 0xb0, 0xe6, 0x89, 0x8b, 0xe5, 0x88, 0x86, 0xe5, 0x80, 0xbc,
	0x12, 0x37, 0x0a, 0x21, 0x52, 0x45, 0x43, 0x52, 0x55, 0x49, 0x54, 0x5f, 0x54, 0x41, 0x53, 0x4b,
	0x47, 0x55, 0x49, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x10, 0x02, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x85, 0xb3,
	0xe5, 0x8d, 0xa1, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x12, 0x41, 0x0a, 0x28, 0x52, 0x45, 0x43,
	0x52, 0x55, 0x49, 0x54, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x47, 0x55, 0x49, 0x44, 0x45, 0x5f, 0x43,
	0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x10, 0x03, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe5, 0x9b, 0x9e,
	0xe5, 0x90, 0x88, 0xe6, 0x95, 0xb0, 0xe6, 0xaf, 0x94, 0xe8, 0xbe, 0x83, 0x12, 0x3b, 0x0a, 0x25,
	0x52, 0x45, 0x43, 0x52, 0x55, 0x49, 0x54, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x47, 0x55, 0x49, 0x44,
	0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x61, 0x76, 0x65,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x10, 0x04, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x8b, 0xa5,
	0xe6, 0x9c, 0x89, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0x12, 0x45, 0x0a, 0x2c, 0x52, 0x45, 0x43,
	0x52, 0x55, 0x49, 0x54, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x47, 0x55, 0x49, 0x44, 0x45, 0x5f, 0x43,
	0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x43, 0x6e, 0x74, 0x10, 0x05, 0x1a, 0x13, 0xaa, 0xb6, 0x18,
	0x0f, 0xe5, 0xae, 0x8c, 0xe6, 0x88, 0x90, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0x95, 0xb0,
	0x12, 0x4c, 0x0a, 0x30, 0x52, 0x45, 0x43, 0x52, 0x55, 0x49, 0x54, 0x5f, 0x54, 0x41, 0x53, 0x4b,
	0x47, 0x55, 0x49, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x10, 0x06, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe8, 0xa7, 0x92, 0xe8,
	0x89, 0xb2, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0xe8, 0xbe, 0xbe, 0xe5, 0x88, 0xb0, 0x12, 0x57,
	0x0a, 0x32, 0x52, 0x45, 0x43, 0x52, 0x55, 0x49, 0x54, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x47, 0x55,
	0x49, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x61,
	0x76, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x43,
	0x68, 0x65, 0x73, 0x73, 0x10, 0x07, 0x1a, 0x1f, 0xaa, 0xb6, 0x18, 0x1b, 0xe6, 0x8b, 0xa5, 0xe6,
	0x9c, 0x89, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe6, 0x98, 0x9f, 0xe7, 0xba, 0xa7, 0xe7, 0x9a,
	0x84, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0x12, 0x51, 0x0a, 0x29, 0x52, 0x45, 0x43, 0x52, 0x55,
	0x49, 0x54, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x47, 0x55, 0x49, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x73, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x10, 0x08, 0x1a, 0x22, 0xaa, 0xb6, 0x18, 0x1e, 0xe4, 0xbd, 0xbf, 0xe7,
	0x94, 0xa8, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0xe4, 0xb8,
	0xbb, 0xe5, 0x8a, 0xa8, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0x12, 0x49, 0x0a, 0x2d, 0x52, 0x45,
	0x43, 0x52, 0x55, 0x49, 0x54, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x47, 0x55, 0x49, 0x44, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x09, 0x1a, 0x16, 0xaa,
	0xb6, 0x18, 0x12, 0xe5, 0x8d, 0x87, 0xe7, 0xba, 0xa7, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0xe6,
	0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12, 0x48, 0x0a, 0x2c, 0x52, 0x45, 0x43, 0x52, 0x55, 0x49, 0x54,
	0x5f, 0x54, 0x41, 0x53, 0x4b, 0x47, 0x55, 0x49, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x0a, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe7, 0xa9, 0xbf,
	0xe6, 0x88, 0xb4, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12,
	0x51, 0x0a, 0x35, 0x52, 0x45, 0x43, 0x52, 0x55, 0x49, 0x54, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x47,
	0x55, 0x49, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x75, 0x6d,
	0x4f, 0x66, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x10, 0x0b, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12,
	0xe6, 0xbf, 0x80, 0xe6, 0xb4, 0xbb, 0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a, 0xe4, 0xba, 0xba, 0xe6,
	0x95, 0xb0, 0x12, 0x44, 0x0a, 0x28, 0x52, 0x45, 0x43, 0x52, 0x55, 0x49, 0x54, 0x5f, 0x54, 0x41,
	0x53, 0x4b, 0x47, 0x55, 0x49, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x10, 0x0c,
	0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0x9c, 0x80, 0xe7, 0xbb, 0x88, 0xe6, 0xaf, 0x94, 0xe8,
	0xb5, 0x9b, 0xe5, 0x90, 0x8d, 0xe6, 0xac, 0xa1, 0x12, 0x52, 0x0a, 0x30, 0x52, 0x45, 0x43, 0x52,
	0x55, 0x49, 0x54, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x47, 0x55, 0x49, 0x44, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x10, 0x0d, 0x1a, 0x1c,
	0xaa, 0xb6, 0x18, 0x18, 0xe5, 0xae, 0x8c, 0xe6, 0x88, 0x90, 0xe5, 0x89, 0x8d, 0xe7, 0xbd, 0xae,
	0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x12, 0x56, 0x0a, 0x2e,
	0x52, 0x45, 0x43, 0x52, 0x55, 0x49, 0x54, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x47, 0x55, 0x49, 0x44,
	0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x0e,
	0x1a, 0x22, 0xaa, 0xb6, 0x18, 0x1e, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe5, 0xbc, 0x80, 0xe5,
	0xa7, 0x8b, 0xe6, 0x8b, 0xa5, 0xe6, 0x9c, 0x89, 0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81, 0xe6, 0x95,
	0xb0, 0xe9, 0x87, 0x8f, 0x12, 0x46, 0x0a, 0x2a, 0x52, 0x45, 0x43, 0x52, 0x55, 0x49, 0x54, 0x5f,
	0x54, 0x41, 0x53, 0x4b, 0x47, 0x55, 0x49, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x68, 0x6f, 0x70, 0x43,
	0x6e, 0x74, 0x10, 0x0f, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0x88, 0xb7, 0xe6, 0x96, 0xb0,
	0xe5, 0x95, 0x86, 0xe5, 0xba, 0x97, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12, 0x4f, 0x0a, 0x2a,
	0x52, 0x45, 0x43, 0x52, 0x55, 0x49, 0x54, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x47, 0x55, 0x49, 0x44,
	0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x73, 0x65, 0x48,
	0x65, 0x72, 0x6f, 0x44, 0x72, 0x61, 0x77, 0x43, 0x6e, 0x74, 0x10, 0x10, 0x1a, 0x1f, 0xaa, 0xb6,
	0x18, 0x1b, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe5, 0x85,
	0x91, 0xe6, 0x8d, 0xa2, 0xe5, 0x88, 0xb8, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x12, 0x3b, 0x0a,
	0x25, 0x52, 0x45, 0x43, 0x52, 0x55, 0x49, 0x54, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x47, 0x55, 0x49,
	0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x6f, 0x72,
	0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0x11, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0xa3,
	0x8b, 0xe6, 0x89, 0x8b, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x12, 0x5a, 0x0a, 0x32, 0x52, 0x45,
	0x43, 0x52, 0x55, 0x49, 0x54, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x47, 0x55, 0x49, 0x44, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4f,
	0x76, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x10, 0x12, 0x1a, 0x22, 0xaa, 0xb6, 0x18, 0x1e, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe7, 0xbb,
	0x93, 0xe6, 0x9d, 0x9f, 0xe6, 0x8b, 0xa5, 0xe6, 0x9c, 0x89, 0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81,
	0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x12, 0x48, 0x0a, 0x2c, 0x52, 0x45, 0x43, 0x52, 0x55, 0x49,
	0x54, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x47, 0x55, 0x49, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x44,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x6c, 0x75, 0x65, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x53,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x10, 0x13, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe8, 0x93,
	0x9d, 0xe5, 0x9b, 0xbe, 0xe5, 0x88, 0xa4, 0xe6, 0x96, 0xad, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6,
	0x12, 0x6a, 0x0a, 0x3c, 0x52, 0x45, 0x43, 0x52, 0x55, 0x49, 0x54, 0x5f, 0x54, 0x41, 0x53, 0x4b,
	0x47, 0x55, 0x49, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x48, 0x61, 0x76, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x72, 0x41, 0x6e, 0x64, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x68, 0x65, 0x73, 0x73,
	0x10, 0x14, 0x1a, 0x28, 0xaa, 0xb6, 0x18, 0x24, 0xe6, 0x8b, 0xa5, 0xe6, 0x9c, 0x89, 0xe6, 0x8c,
	0x87, 0xe5, 0xae, 0x9a, 0xe6, 0x98, 0x9f, 0xe7, 0xba, 0xa7, 0xe5, 0x92, 0x8c, 0xe5, 0x93, 0x81,
	0xe8, 0xb4, 0xa8, 0xe7, 0x9a, 0x84, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0x2a, 0xb7, 0x01, 0x0a,
	0x0f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x54, 0x59, 0x50, 0x45,
	0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x43, 0x52, 0x55, 0x49, 0x54, 0x5f, 0x54, 0x41, 0x53, 0x4b,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x2b,
	0x0a, 0x12, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x52, 0x45, 0x43, 0x52, 0x55, 0x49, 0x54, 0x42, 0x41,
	0x54, 0x54, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe6, 0x96, 0xb0, 0xe6,
	0x89, 0x8b, 0xe6, 0x88, 0x98, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x12, 0x1f, 0x0a, 0x09, 0x54,
	0x41, 0x53, 0x4b, 0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x10, 0x02, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c,
	0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x12, 0x29, 0x0a, 0x0d,
	0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x55, 0x54, 0x4f, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x03, 0x1a,
	0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0x96, 0xb0, 0xe6, 0x89, 0x8b, 0xe5, 0x89, 0xa7, 0xe6, 0x9c,
	0xac, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x41, 0x53, 0x4b, 0x5f,
	0x4c, 0x41, 0x53, 0x54, 0x10, 0x04, 0x42, 0x18, 0x5a, 0x16, 0x6f, 0x73, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x65, 0x73, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_os_res_data_proto_rawDescOnce sync.Once
	file_os_res_data_proto_rawDescData = file_os_res_data_proto_rawDesc
)

func file_os_res_data_proto_rawDescGZIP() []byte {
	file_os_res_data_proto_rawDescOnce.Do(func() {
		file_os_res_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_os_res_data_proto_rawDescData)
	})
	return file_os_res_data_proto_rawDescData
}

var file_os_res_data_proto_enumTypes = make([]protoimpl.EnumInfo, 175)
var file_os_res_data_proto_msgTypes = make([]protoimpl.MessageInfo, 359)
var file_os_res_data_proto_goTypes = []interface{}{
	(EPlayerCamp)(0),                                // 0: ResData.EPlayerCamp
	(COM_ROOM_MEMBEM_TYPE)(0),                       // 1: ResData.COM_ROOM_MEMBEM_TYPE
	(RES_BATTLE_CAMP_TYPE)(0),                       // 2: ResData.RES_BATTLE_CAMP_TYPE
	(EGetWay)(0),                                    // 3: ResData.EGetWay
	(COM_GAME_BIG_TYPE_THEME)(0),                    // 4: ResData.COM_GAME_BIG_TYPE_THEME
	(COM_GAME_TYPE)(0),                              // 5: ResData.COM_GAME_TYPE
	(COM_GAMETYPE_GROUP)(0),                         // 6: ResData.COM_GAMETYPE_GROUP
	(EPvpRankType)(0),                               // 7: ResData.EPvpRankType
	(RES_SYSTEM_UI_TYPE)(0),                         // 8: ResData.RES_SYSTEM_UI_TYPE
	(EPvpRankSettlementType)(0),                     // 9: ResData.EPvpRankSettlementType
	(ESeasonRankAwardType)(0),                       // 10: ResData.ESeasonRankAwardType
	(EEloSegmentProtectType)(0),                     // 11: ResData.EEloSegmentProtectType
	(ConstSeasonType)(0),                            // 12: ResData.ConstSeasonType
	(COM_GAMEITEM_TYPE)(0),                          // 13: ResData.COM_GAMEITEM_TYPE
	(COM_GAMEMONEY_SUBTYPE)(0),                      // 14: ResData.COM_GAMEMONEY_SUBTYPE
	(COM_CHESSDECORATE_SUBTYPE)(0),                  // 15: ResData.COM_CHESSDECORATE_SUBTYPE
	(Project8InBattleHeroAdditionNumType)(0),        // 16: ResData.Project8InBattleHeroAdditionNumType
	(EMailID)(0),                                    // 17: ResData.EMailID
	(ERhythmRating)(0),                              // 18: ResData.ERhythmRating
	(ERhythmPVPMode)(0),                             // 19: ResData.ERhythmPVPMode
	(EGender)(0),                                    // 20: ResData.EGender
	(EGameRankType)(0),                              // 21: ResData.EGameRankType
	(ECondType)(0),                                  // 22: ResData.ECondType
	(RES_SYSTEM_TYPE)(0),                            // 23: ResData.RES_SYSTEM_TYPE
	(COM_LIFE_TYPE)(0),                              // 24: ResData.COM_LIFE_TYPE
	(ETokenType)(0),                                 // 25: ResData.ETokenType
	(HeroModeType)(0),                               // 26: ResData.HeroModeType
	(RelativeModeType)(0),                           // 27: ResData.RelativeModeType
	(RES_RELATIVE_ID)(0),                            // 28: ResData.RES_RELATIVE_ID
	(RES_RELATIVE_TYPE)(0),                          // 29: ResData.RES_RELATIVE_TYPE
	(RES_EQUIP_QUALITY_TYPE)(0),                     // 30: ResData.RES_EQUIP_QUALITY_TYPE
	(EWealType)(0),                                  // 31: ResData.EWealType
	(Legacy)(0),                                     // 32: ResData.Legacy
	(RES_COMMON_CONST)(0),                           // 33: ResData.RES_COMMON_CONST
	(RES_AUDIO_MISC_CONST)(0),                       // 34: ResData.RES_AUDIO_MISC_CONST
	(PLAYMOD_TYPE)(0),                               // 35: ResData.PLAYMOD_TYPE
	(GAMELANGUAGE_TYPE)(0),                          // 36: ResData.GAMELANGUAGE_TYPE
	(AgeAuthentication_Method)(0),                   // 37: ResData.AgeAuthentication_Method
	(ParentsAuthentication_Method)(0),               // 38: ResData.ParentsAuthentication_Method
	(RES_PROP_TYPE)(0),                              // 39: ResData.RES_PROP_TYPE
	(RES_PROP_TIMEOUT_PROCESSTYPE)(0),               // 40: ResData.RES_PROP_TIMEOUT_PROCESSTYPE
	(RES_PROP_OVERLIMIT_TYPE)(0),                    // 41: ResData.RES_PROP_OVERLIMIT_TYPE
	(RES_PROP_VALIDTIME_TYPE)(0),                    // 42: ResData.RES_PROP_VALIDTIME_TYPE
	(RES_SCARCE_LEVEL_TYPE)(0),                      // 43: ResData.RES_SCARCE_LEVEL_TYPE
	(RES_PROP_QUALITY_TYPE)(0),                      // 44: ResData.RES_PROP_QUALITY_TYPE
	(RES_CHESS_HERO_QUALITY_TYPE)(0),                // 45: ResData.RES_CHESS_HERO_QUALITY_TYPE
	(RES_PROP_USE_TYPE)(0),                          // 46: ResData.RES_PROP_USE_TYPE
	(EAITYPE)(0),                                    // 47: ResData.EAITYPE
	(RES_HEADIMG_TYPE)(0),                           // 48: ResData.RES_HEADIMG_TYPE
	(RES_HEAD_TYPE)(0),                              // 49: ResData.RES_HEAD_TYPE
	(EBGMSwitchTimeType)(0),                         // 50: ResData.EBGMSwitchTimeType
	(EBGMSwitchEventType)(0),                        // 51: ResData.EBGMSwitchEventType
	(RES_LIMITCYCLE_TYPE)(0),                        // 52: ResData.RES_LIMITCYCLE_TYPE
	(SeasonGameRecordStatisticType)(0),              // 53: ResData.SeasonGameRecordStatisticType
	(COM_GAMETYPE_OPEN_METHOD)(0),                   // 54: ResData.COM_GAMETYPE_OPEN_METHOD
	(COM_SEASON_PLAYER_TYPE)(0),                     // 55: ResData.COM_SEASON_PLAYER_TYPE
	(COM_SEASON_PLAYER_CONDITION)(0),                // 56: ResData.COM_SEASON_PLAYER_CONDITION
	(ResMailType)(0),                                // 57: ResData.ResMailType
	(TALK_MSG_USE_TYPE)(0),                          // 58: ResData.TALK_MSG_USE_TYPE
	(TALK_TYPE)(0),                                  // 59: ResData.TALK_TYPE
	(RES_SYSLOCK_TYPE)(0),                           // 60: ResData.RES_SYSLOCK_TYPE
	(COM_TOKEN_REFRESH_TYPE)(0),                     // 61: ResData.COM_TOKEN_REFRESH_TYPE
	(COM_SYSTEM_TYPE)(0),                            // 62: ResData.COM_SYSTEM_TYPE
	(SCORE_CORRECTION_TYPE)(0),                      // 63: ResData.SCORE_CORRECTION_TYPE
	(RES_RANK_CONST_TYPE)(0),                        // 64: ResData.RES_RANK_CONST_TYPE
	(ActorType)(0),                                  // 65: ResData.ActorType
	(SortRule)(0),                                   // 66: ResData.SortRule
	(AIAttrType)(0),                                 // 67: ResData.AIAttrType
	(AICommunicationType)(0),                        // 68: ResData.AICommunicationType
	(AIRestartBuffShopType)(0),                      // 69: ResData.AIRestartBuffShopType
	(AICommunicationTrigger)(0),                     // 70: ResData.AICommunicationTrigger
	(RES_PROJECT8_EQUIP_CONTAINER_TYPE)(0),          // 71: ResData.RES_PROJECT8_EQUIP_CONTAINER_TYPE
	(RES_PROJECT8_EQUIP_FUNC_TYPE)(0),               // 72: ResData.RES_PROJECT8_EQUIP_FUNC_TYPE
	(RES_PROJECT8_EQUIP_UPGRADE_TYPE)(0),            // 73: ResData.RES_PROJECT8_EQUIP_UPGRADE_TYPE
	(RES_PROJECT8_EQUIP_GRID_FUNC_TYPE)(0),          // 74: ResData.RES_PROJECT8_EQUIP_GRID_FUNC_TYPE
	(RES_PROJECT8_EQUIP_GRID_MASK_TYPE)(0),          // 75: ResData.RES_PROJECT8_EQUIP_GRID_MASK_TYPE
	(RES_PROJECT8_BUFF_CREATE_PHASE)(0),             // 76: ResData.RES_PROJECT8_BUFF_CREATE_PHASE
	(COM_LINEUP_GAMETYPE)(0),                        // 77: ResData.COM_LINEUP_GAMETYPE
	(LINE_UP_TYPE)(0),                               // 78: ResData.LINE_UP_TYPE
	(LINE_UP_RECOMMEND_STATE_BIT)(0),                // 79: ResData.LINE_UP_RECOMMEND_STATE_BIT
	(RoundStateBit)(0),                              // 80: ResData.RoundStateBit
	(LordSkillInteraction)(0),                       // 81: ResData.LordSkillInteraction
	(LordSkillCostType)(0),                          // 82: ResData.LordSkillCostType
	(LordSkillInteractionParam)(0),                  // 83: ResData.LordSkillInteractionParam
	(ELordSkillInstType)(0),                         // 84: ResData.ELordSkillInstType
	(ELordSkillPhaseParam)(0),                       // 85: ResData.ELordSkillPhaseParam
	(ELordSkillLevelExpGatherConditionCondType)(0),  // 86: ResData.ELordSkillLevelExpGatherConditionCondType
	(ELordJiBanType)(0),                             // 87: ResData.ELordJiBanType
	(ELordProficiencyUnLockType)(0),                 // 88: ResData.ELordProficiencyUnLockType
	(EChessBoardPartType)(0),                        // 89: ResData.EChessBoardPartType
	(EChessBoardAreaType)(0),                        // 90: ResData.EChessBoardAreaType
	(ESpecialEftType)(0),                            // 91: ResData.ESpecialEftType
	(ESpecialEftClass)(0),                           // 92: ResData.ESpecialEftClass
	(EEmojiAutoUseType)(0),                          // 93: ResData.EEmojiAutoUseType
	(EChessSeasonRefreshType)(0),                    // 94: ResData.EChessSeasonRefreshType
	(EWealCycleType)(0),                             // 95: ResData.EWealCycleType
	(EAchieveLevel)(0),                              // 96: ResData.EAchieveLevel
	(EChartsFunction)(0),                            // 97: ResData.EChartsFunction
	(ERanklistSettleType)(0),                        // 98: ResData.ERanklistSettleType
	(ERanklistType)(0),                              // 99: ResData.ERanklistType
	(ERanklistSubTypeLordPower)(0),                  // 100: ResData.ERanklistSubTypeLordPower
	(ERankListSubTypeSeason)(0),                     // 101: ResData.ERankListSubTypeSeason
	(COM_CLT_LOG_LEVEL)(0),                          // 102: ResData.COM_CLT_LOG_LEVEL
	(EDynamicGuidePlayerTagType)(0),                 // 103: ResData.EDynamicGuidePlayerTagType
	(EDynamicGuideThresholdType)(0),                 // 104: ResData.EDynamicGuideThresholdType
	(EDynamicGuideTipCloseConditionType)(0),         // 105: ResData.EDynamicGuideTipCloseConditionType
	(EDynamicGuideTipUIEventRspResult)(0),           // 106: ResData.EDynamicGuideTipUIEventRspResult
	(EDynamicGuideTipPreOperateType)(0),             // 107: ResData.EDynamicGuideTipPreOperateType
	(ENBHelpUnlockTriggerTimeType)(0),               // 108: ResData.ENBHelpUnlockTriggerTimeType
	(ENBUINameHintUnlockType)(0),                    // 109: ResData.ENBUINameHintUnlockType
	(ENBUINameHintFinishType)(0),                    // 110: ResData.ENBUINameHintFinishType
	(ENBUINameHintDirType)(0),                       // 111: ResData.ENBUINameHintDirType
	(EWarmAIAllocMode)(0),                           // 112: ResData.EWarmAIAllocMode
	(EPVPLordUseType)(0),                            // 113: ResData.EPVPLordUseType
	(EAIStrategyChkType)(0),                         // 114: ResData.EAIStrategyChkType
	(EClientAIExtraFlag)(0),                         // 115: ResData.EClientAIExtraFlag
	(ENewbieTaskType)(0),                            // 116: ResData.ENewbieTaskType
	(ECardPackType)(0),                              // 117: ResData.ECardPackType
	(EnumHelpSystemIDName)(0),                       // 118: ResData.EnumHelpSystemIDName
	(NB_TRIGGER_TYPE)(0),                            // 119: ResData.NB_TRIGGER_TYPE
	(NB_CONDITION_TYPE)(0),                          // 120: ResData.NB_CONDITION_TYPE
	(NB_SAVE_TYPE)(0),                               // 121: ResData.NB_SAVE_TYPE
	(NB_INTRODUCER_DIR)(0),                          // 122: ResData.NB_INTRODUCER_DIR
	(TutorialTipAlignType)(0),                       // 123: ResData.TutorialTipAlignType
	(TutorialFingureType)(0),                        // 124: ResData.TutorialFingureType
	(TutorialFingureDirType)(0),                     // 125: ResData.TutorialFingureDirType
	(ENBGuideTlogType)(0),                           // 126: ResData.ENBGuideTlogType
	(ENBGuideFinType)(0),                            // 127: ResData.ENBGuideFinType
	(NB_ADDTIONAL_TYPE)(0),                          // 128: ResData.NB_ADDTIONAL_TYPE
	(RES_NEWBIE_CONST_TYPE)(0),                      // 129: ResData.RES_NEWBIE_CONST_TYPE
	(RES_TALENT_TYPE)(0),                            // 130: ResData.RES_TALENT_TYPE
	(RES_TALENT_SKILL_INS_TYPE)(0),                  // 131: ResData.RES_TALENT_SKILL_INS_TYPE
	(RES_TALENT_WEIGHT_CHECK_TYPE)(0),               // 132: ResData.RES_TALENT_WEIGHT_CHECK_TYPE
	(RES_TALENT_UNLOCK_TYPE)(0),                     // 133: ResData.RES_TALENT_UNLOCK_TYPE
	(RES_TALENT_ADDBUFF_TYPE)(0),                    // 134: ResData.RES_TALENT_ADDBUFF_TYPE
	(PlayerTalentAIType)(0),                         // 135: ResData.PlayerTalentAIType
	(RES_TALENT_FUNC_TYPE)(0),                       // 136: ResData.RES_TALENT_FUNC_TYPE
	(TalentSkilIndicateType)(0),                     // 137: ResData.TalentSkilIndicateType
	(PlayerTalentTriggerSkillDirection)(0),          // 138: ResData.PlayerTalentTriggerSkillDirection
	(RES_FORMATION_ATTACK_RANGE_TYPE)(0),            // 139: ResData.RES_FORMATION_ATTACK_RANGE_TYPE
	(AIFormationType)(0),                            // 140: ResData.AIFormationType
	(EQUIP_TYPE)(0),                                 // 141: ResData.EQUIP_TYPE
	(EQUIP_USE_TYPE)(0),                             // 142: ResData.EQUIP_USE_TYPE
	(AINormalConstKey)(0),                           // 143: ResData.AINormalConstKey
	(RES_SETTINGS_GROUP_TYPE)(0),                    // 144: ResData.RES_SETTINGS_GROUP_TYPE
	(RES_SETTINGS_HELP_TYPE)(0),                     // 145: ResData.RES_SETTINGS_HELP_TYPE
	(RES_SETTINGS_STYLE_TYPE)(0),                    // 146: ResData.RES_SETTINGS_STYLE_TYPE
	(RES_SETTINGS_CS_FEATURE_TYPE)(0),               // 147: ResData.RES_SETTINGS_CS_FEATURE_TYPE
	(RES_SETTINGS_FEATURE_TYPE)(0),                  // 148: ResData.RES_SETTINGS_FEATURE_TYPE
	(RES_THANKDISPLAY_DIR_TYPE)(0),                  // 149: ResData.RES_THANKDISPLAY_DIR_TYPE
	(RES_FREE_TYPE)(0),                              // 150: ResData.RES_FREE_TYPE
	(RES_GUILD_CONST)(0),                            // 151: ResData.RES_GUILD_CONST
	(RES_GUILD_JOINLIMIT_TYPE)(0),                   // 152: ResData.RES_GUILD_JOINLIMIT_TYPE
	(RES_GUILD_ICON_TYPE)(0),                        // 153: ResData.RES_GUILD_ICON_TYPE
	(RES_GUILD_LOGO_COLOR_TYPE)(0),                  // 154: ResData.RES_GUILD_LOGO_COLOR_TYPE
	(RES_JUMP_TYPE)(0),                              // 155: ResData.RES_JUMP_TYPE
	(RES_BOSS_AWARD_VALUE_TYPE)(0),                  // 156: ResData.RES_BOSS_AWARD_VALUE_TYPE
	(EBossAwadChooseType)(0),                        // 157: ResData.EBossAwadChooseType
	(RES_AWARD_PERFORM_TYPE)(0),                     // 158: ResData.RES_AWARD_PERFORM_TYPE
	(RES_IEDROP_CONDITION)(0),                       // 159: ResData.RES_IEDROP_CONDITION
	(RES_IEDROP_CD_TYPE)(0),                         // 160: ResData.RES_IEDROP_CD_TYPE
	(RES_IEDROP_TRIGGER_TYPE)(0),                    // 161: ResData.RES_IEDROP_TRIGGER_TYPE
	(RES_IEDROP_REMOVE_TYPE)(0),                     // 162: ResData.RES_IEDROP_REMOVE_TYPE
	(RES_IEDROP_EFFECT_TYPE)(0),                     // 163: ResData.RES_IEDROP_EFFECT_TYPE
	(RES_LOADING_SHOW_TYPE)(0),                      // 164: ResData.RES_LOADING_SHOW_TYPE
	(RES_QTS_PACKAGE_TYPE)(0),                       // 165: ResData.RES_QTS_PACKAGE_TYPE
	(ResGridType)(0),                                // 166: ResData.ResGridType
	(ResFormulaAPFunc)(0),                           // 167: ResData.ResFormulaAPFunc
	(ResDamageMpRecoverType)(0),                     // 168: ResData.ResDamageMpRecoverType
	(ResLayerType)(0),                               // 169: ResData.ResLayerType
	(ResBattleBroadcastType)(0),                     // 170: ResData.ResBattleBroadcastType
	(RECRUIT_TASKGUIDE_CONDITION_TYPE)(0),           // 171: ResData.RECRUIT_TASKGUIDE_CONDITION_TYPE
	(CLIENT_TASKTYPE)(0),                            // 172: ResData.CLIENT_TASKTYPE
	(ResPersonaliseTypeDatabin_PersonaliseType)(0),  // 173: ResData.ResPersonaliseTypeDatabin.PersonaliseType
	(ResHomePageShowDataBin_HomePageShowName)(0),    // 174: ResData.ResHomePageShowDataBin.HomePageShowName
	(*ResWhiteListCfg)(nil),                         // 175: ResData.ResWhiteListCfg
	(*ResBlackListCfg)(nil),                         // 176: ResData.ResBlackListCfg
	(*WhiteListConf)(nil),                           // 177: ResData.WhiteListConf
	(*ResZoneRegisterCfg)(nil),                      // 178: ResData.ResZoneRegisterCfg
	(*ResGlobalTxtInfoCfg)(nil),                     // 179: ResData.ResGlobalTxtInfoCfg
	(*ResMatchPoolCfg)(nil),                         // 180: ResData.ResMatchPoolCfg
	(*ResMatchRankRangeCfg)(nil),                    // 181: ResData.ResMatchRankRangeCfg
	(*ResMatchAIDistribution)(nil),                  // 182: ResData.ResMatchAIDistribution
	(*ResMatchStrategyRadiusInfo)(nil),              // 183: ResData.ResMatchStrategyRadiusInfo
	(*ResMatchStrategyCfg)(nil),                     // 184: ResData.ResMatchStrategyCfg
	(*MatchConf)(nil),                               // 185: ResData.MatchConf
	(*ResAIShowCfg)(nil),                            // 186: ResData.ResAIShowCfg
	(*ResGameItem)(nil),                             // 187: ResData.ResGameItem
	(*ResEnableInfo)(nil),                           // 188: ResData.ResEnableInfo
	(*ResCommonConstCfg)(nil),                       // 189: ResData.ResCommonConstCfg
	(*ResAudioMiscConstCfg)(nil),                    // 190: ResData.ResAudioMiscConstCfg
	(*ResPlayMod)(nil),                              // 191: ResData.ResPlayMod
	(*ResRandNameComb)(nil),                         // 192: ResData.ResRandNameComb
	(*GlobalMiscConf)(nil),                          // 193: ResData.GlobalMiscConf
	(*ResGameTypeGroupCfg)(nil),                     // 194: ResData.ResGameTypeGroupCfg
	(*ResGameTypeGrpBelongCfg)(nil),                 // 195: ResData.ResGameTypeGrpBelongCfg
	(*GameTypeConf)(nil),                            // 196: ResData.GameTypeConf
	(*ResItemPropCfgDataBin)(nil),                   // 197: ResData.ResItemPropCfgDataBin
	(*ResMoneyInfoCfg)(nil),                         // 198: ResData.ResMoneyInfoCfg
	(*ResItemShowCfg)(nil),                          // 199: ResData.ResItemShowCfg
	(*ResHeadImgInfoCfg)(nil),                       // 200: ResData.ResHeadImgInfoCfg
	(*ResSystemUICfgDataBin)(nil),                   // 201: ResData.ResSystemUICfgDataBin
	(*ResDT_BGMInfo)(nil),                           // 202: ResData.ResDT_BGMInfo
	(*ResDT_BGMSwitchTime)(nil),                     // 203: ResData.ResDT_BGMSwitchTime
	(*ResBGMCfg)(nil),                               // 204: ResData.ResBGMCfg
	(*ResHeadInfoCfg)(nil),                          // 205: ResData.ResHeadInfoCfg
	(*ResGiftStrategyCfg)(nil),                      // 206: ResData.ResGiftStrategyCfg
	(*ResGiftGuaranteeStrategyDataBin)(nil),         // 207: ResData.ResGiftGuaranteeStrategyDataBin
	(*ItemConf)(nil),                                // 208: ResData.ItemConf
	(*ResDropItemCfg)(nil),                          // 209: ResData.ResDropItemCfg
	(*ResDropDataCfg)(nil),                          // 210: ResData.ResDropDataCfg
	(*ResLimitInfoCfg)(nil),                         // 211: ResData.ResLimitInfoCfg
	(*ResDropsExcludeRepeatDataBin)(nil),            // 212: ResData.ResDropsExcludeRepeatDataBin
	(*DropConf)(nil),                                // 213: ResData.DropConf
	(*ResSeasonDataBin)(nil),                        // 214: ResData.ResSeasonDataBin
	(*ResSeasonRankAwardsDataBin)(nil),              // 215: ResData.ResSeasonRankAwardsDataBin
	(*ResInSeasonRankAwardsDataBin)(nil),            // 216: ResData.ResInSeasonRankAwardsDataBin
	(*ResSeasonRankTaskDataBin)(nil),                // 217: ResData.ResSeasonRankTaskDataBin
	(*ResSeasonGameTypesBin)(nil),                   // 218: ResData.ResSeasonGameTypesBin
	(*ResLanguageText)(nil),                         // 219: ResData.ResLanguageText
	(*ResSeasonPlayCenterBin)(nil),                  // 220: ResData.ResSeasonPlayCenterBin
	(*ResSeasonRankInherit)(nil),                    // 221: ResData.ResSeasonRankInherit
	(*ResSeasonPlayerConditions)(nil),               // 222: ResData.ResSeasonPlayerConditions
	(*ResSeasonPlayerConcludingMsg)(nil),            // 223: ResData.ResSeasonPlayerConcludingMsg
	(*SeasonConf)(nil),                              // 224: ResData.SeasonConf
	(*ResTemplateMailDataBin)(nil),                  // 225: ResData.ResTemplateMailDataBin
	(*MultiLangMailContent)(nil),                    // 226: ResData.MultiLangMailContent
	(*ResGlobalMailDataBin)(nil),                    // 227: ResData.ResGlobalMailDataBin
	(*ResMailSysOpt)(nil),                           // 228: ResData.ResMailSysOpt
	(*MailConf)(nil),                                // 229: ResData.MailConf
	(*ResTalkEmojiCfgDataBin)(nil),                  // 230: ResData.ResTalkEmojiCfgDataBin
	(*ResTalkQuickMsgCfgDataBin)(nil),               // 231: ResData.ResTalkQuickMsgCfgDataBin
	(*ResTalkInsideQuickMsgCfgDataBin)(nil),         // 232: ResData.ResTalkInsideQuickMsgCfgDataBin
	(*ResTalkTypeInfoCfgDataBin)(nil),               // 233: ResData.ResTalkTypeInfoCfgDataBin
	(*ResExpToLevelUpDataBin)(nil),                  // 234: ResData.ResExpToLevelUpDataBin
	(*ResExpBufDatabin)(nil),                        // 235: ResData.ResExpBufDatabin
	(*ExpConf)(nil),                                 // 236: ResData.ExpConf
	(*ResCondInfo)(nil),                             // 237: ResData.ResCondInfo
	(*ResGameUnlockDataBin)(nil),                    // 238: ResData.ResGameUnlockDataBin
	(*GameUnlockConf)(nil),                          // 239: ResData.GameUnlockConf
	(*ResTokenTaskCfgDataBin)(nil),                  // 240: ResData.ResTokenTaskCfgDataBin
	(*ResTokenTaskRefreshDataBin)(nil),              // 241: ResData.ResTokenTaskRefreshDataBin
	(*STTokenEffectInfo)(nil),                       // 242: ResData.STTokenEffectInfo
	(*ResTokenSeasonCfgDataBin)(nil),                // 243: ResData.ResTokenSeasonCfgDataBin
	(*ResTokenHangupCfgDataBin)(nil),                // 244: ResData.ResTokenHangupCfgDataBin
	(*ResTokenLevelDropInfo)(nil),                   // 245: ResData.ResTokenLevelDropInfo
	(*ResTokenLevelAwardDataBin)(nil),               // 246: ResData.ResTokenLevelAwardDataBin
	(*TokenConf)(nil),                               // 247: ResData.TokenConf
	(*ResRankDataBin)(nil),                          // 248: ResData.ResRankDataBin
	(*ResRankProtectedDatabin)(nil),                 // 249: ResData.ResRankProtectedDatabin
	(*ResRankKDatabin)(nil),                         // 250: ResData.ResRankKDatabin
	(*ResEloConstDatabin)(nil),                      // 251: ResData.ResEloConstDatabin
	(*ResBattleAwardDatabin)(nil),                   // 252: ResData.ResBattleAwardDatabin
	(*ResScoreCorrectionDatabin)(nil),               // 253: ResData.ResScoreCorrectionDatabin
	(*RankConf)(nil),                                // 254: ResData.RankConf
	(*ResRankConstDatabin)(nil),                     // 255: ResData.ResRankConstDatabin
	(*ResRoomRefusePunishDataBin)(nil),              // 256: ResData.ResRoomRefusePunishDataBin
	(*RoomConf)(nil),                                // 257: ResData.RoomConf
	(*Res_Chess_Slot_Struct)(nil),                   // 258: ResData.Res_Chess_Slot_Struct
	(*ResDT_ChessModelInfo)(nil),                    // 259: ResData.ResDT_ChessModelInfo
	(*ResDT_ChessComboInfo)(nil),                    // 260: ResData.ResDT_ChessComboInfo
	(*ResDT_ChessFuncInfo)(nil),                     // 261: ResData.ResDT_ChessFuncInfo
	(*ResChessHeroConfDataBin)(nil),                 // 262: ResData.ResChessHeroConfDataBin
	(*ResAlternativeSortDataBin)(nil),               // 263: ResData.ResAlternativeSortDataBin
	(*Res_PreEquip_Struct)(nil),                     // 264: ResData.Res_PreEquip_Struct
	(*ResEffectCombine)(nil),                        // 265: ResData.ResEffectCombine
	(*ResActiveSkill)(nil),                          // 266: ResData.ResActiveSkill
	(*ResPassiveSkill)(nil),                         // 267: ResData.ResPassiveSkill
	(*LordAIConf)(nil),                              // 268: ResData.LordAIConf
	(*AICommunicationItem)(nil),                     // 269: ResData.AICommunicationItem
	(*AIWatchPlayerRate)(nil),                       // 270: ResData.AIWatchPlayerRate
	(*ResAICommunicationCfg)(nil),                   // 271: ResData.ResAICommunicationCfg
	(*AIAttrScale)(nil),                             // 272: ResData.AIAttrScale
	(*ResEquipProp)(nil),                            // 273: ResData.ResEquipProp
	(*ResPropDisplayDataBin)(nil),                   // 274: ResData.ResPropDisplayDataBin
	(*ResEquipDataBin)(nil),                         // 275: ResData.ResEquipDataBin
	(*Res_Fetter_Num_Struct)(nil),                   // 276: ResData.Res_Fetter_Num_Struct
	(*ResDT_ChessGlobalEffectItem)(nil),             // 277: ResData.ResDT_ChessGlobalEffectItem
	(*ResDT_ChessSpecialParam)(nil),                 // 278: ResData.ResDT_ChessSpecialParam
	(*Res_Fetter_Struct)(nil),                       // 279: ResData.Res_Fetter_Struct
	(*Res_Fetter_Layer_Quality)(nil),                // 280: ResData.Res_Fetter_Layer_Quality
	(*Res_Fetter_Layer_Icon)(nil),                   // 281: ResData.Res_Fetter_Layer_Icon
	(*FetterConf)(nil),                              // 282: ResData.FetterConf
	(*ResDT_FetterAudioInfo)(nil),                   // 283: ResData.ResDT_FetterAudioInfo
	(*ResFetterConfDataBin)(nil),                    // 284: ResData.ResFetterConfDataBin
	(*ResEmbattleSeasonDataBin)(nil),                // 285: ResData.ResEmbattleSeasonDataBin
	(*ResLineupHeroInfo)(nil),                       // 286: ResData.ResLineupHeroInfo
	(*ResSeasonLineupDataBin)(nil),                  // 287: ResData.ResSeasonLineupDataBin
	(*ResSeasonLineupThumbnailCfg)(nil),             // 288: ResData.ResSeasonLineupThumbnailCfg
	(*LineupConf)(nil),                              // 289: ResData.LineupConf
	(*ResDefaultLordInfoConfDataBin)(nil),           // 290: ResData.ResDefaultLordInfoConfDataBin
	(*ResLordInfoConfDataBin)(nil),                  // 291: ResData.ResLordInfoConfDataBin
	(*ResLordSkillDataBin)(nil),                     // 292: ResData.ResLordSkillDataBin
	(*ResLordSkillLevelExpGatherConditionInfo)(nil), // 293: ResData.ResLordSkillLevelExpGatherConditionInfo
	(*ResLordSkillLevelDataBin)(nil),                // 294: ResData.ResLordSkillLevelDataBin
	(*ResLordSkinDataBin)(nil),                      // 295: ResData.ResLordSkinDataBin
	(*ResLordDetailsItem)(nil),                      // 296: ResData.ResLordDetailsItem
	(*ResLordFilesItem)(nil),                        // 297: ResData.ResLordFilesItem
	(*ResLordFileDataBin)(nil),                      // 298: ResData.ResLordFileDataBin
	(*STLordQuestionAndAnswerInfo)(nil),             // 299: ResData.STLordQuestionAndAnswerInfo
	(*ResLordQuestionAndAnswerDataBin)(nil),         // 300: ResData.ResLordQuestionAndAnswerDataBin
	(*ResDT_LordOutgameAudio)(nil),                  // 301: ResData.ResDT_LordOutgameAudio
	(*ResDT_LordIngameAudio)(nil),                   // 302: ResData.ResDT_LordIngameAudio
	(*ResLordAudioCfgDataBin)(nil),                  // 303: ResData.ResLordAudioCfgDataBin
	(*ResLordJiBanAudioCfgDataBin)(nil),             // 304: ResData.ResLordJiBanAudioCfgDataBin
	(*ResLordDefaultVoiceCfgDataBin)(nil),           // 305: ResData.ResLordDefaultVoiceCfgDataBin
	(*ResLordProficiencySettleDatabin)(nil),         // 306: ResData.ResLordProficiencySettleDatabin
	(*ResLordRankShowInfoDatabin)(nil),              // 307: ResData.ResLordRankShowInfoDatabin
	(*ResLordProficiencyLevelDatabin)(nil),          // 308: ResData.ResLordProficiencyLevelDatabin
	(*LordProficiencyParam)(nil),                    // 309: ResData.LordProficiencyParam
	(*ResLordPowerCommonDatabin)(nil),               // 310: ResData.ResLordPowerCommonDatabin
	(*ResLordBattlePointsDatabin)(nil),              // 311: ResData.ResLordBattlePointsDatabin
	(*ResLordShowScoreDatabin)(nil),                 // 312: ResData.ResLordShowScoreDatabin
	(*ResLordShowScoreCtrlDatabin)(nil),             // 313: ResData.ResLordShowScoreCtrlDatabin
	(*ResLordRecentResultsDatabin)(nil),             // 314: ResData.ResLordRecentResultsDatabin
	(*ResLordPowerRankTitleDatabin)(nil),            // 315: ResData.ResLordPowerRankTitleDatabin
	(*ResLordPowerRankMapDataBin)(nil),              // 316: ResData.ResLordPowerRankMapDataBin
	(*ResLordGroupDataBin)(nil),                     // 317: ResData.ResLordGroupDataBin
	(*LordConf)(nil),                                // 318: ResData.LordConf
	(*ResDTLordSelectRound)(nil),                    // 319: ResData.ResDTLordSelectRound
	(*ResDTLordSelectAIOpRange)(nil),                // 320: ResData.ResDTLordSelectAIOpRange
	(*ResPVPLordSelectModeCfg)(nil),                 // 321: ResData.ResPVPLordSelectModeCfg
	(*PvpLordSelectConf)(nil),                       // 322: ResData.PvpLordSelectConf
	(*ResSocialFriendTextCfg)(nil),                  // 323: ResData.ResSocialFriendTextCfg
	(*ResSocialCfg)(nil),                            // 324: ResData.ResSocialCfg
	(*SocialConf)(nil),                              // 325: ResData.SocialConf
	(*ResPersonaliseChessboardDataBin)(nil),         // 326: ResData.ResPersonaliseChessboardDataBin
	(*ResPersonaliseConstDatabin)(nil),              // 327: ResData.ResPersonaliseConstDatabin
	(*ResChessboardPartDataBin)(nil),                // 328: ResData.ResChessboardPartDataBin
	(*ResChessboardPartSetDataBin)(nil),             // 329: ResData.ResChessboardPartSetDataBin
	(*ResCommonIconCfg)(nil),                        // 330: ResData.ResCommonIconCfg
	(*ResPersonaliseEmojiDataBin)(nil),              // 331: ResData.ResPersonaliseEmojiDataBin
	(*ResPersonaliseSpecialEftDataBin)(nil),         // 332: ResData.ResPersonaliseSpecialEftDataBin
	(*ResPersonaliseTypeDatabin)(nil),               // 333: ResData.ResPersonaliseTypeDatabin
	(*PersonaliseConf)(nil),                         // 334: ResData.PersonaliseConf
	(*ResChessDataBin)(nil),                         // 335: ResData.ResChessDataBin
	(*ResChessSeasonInfo)(nil),                      // 336: ResData.ResChessSeasonInfo
	(*ResChessStatisticInfo)(nil),                   // 337: ResData.ResChessStatisticInfo
	(*ResChessCombInfo)(nil),                        // 338: ResData.ResChessCombInfo
	(*ResChessDecorateDataBin)(nil),                 // 339: ResData.ResChessDecorateDataBin
	(*ResDecorateCombineResolveData)(nil),           // 340: ResData.ResDecorateCombineResolveData
	(*ResCollectionTaskDataBin)(nil),                // 341: ResData.ResCollectionTaskDataBin
	(*ChessConf)(nil),                               // 342: ResData.ChessConf
	(*EquipConf)(nil),                               // 343: ResData.EquipConf
	(*ResCommonWealDataBin)(nil),                    // 344: ResData.ResCommonWealDataBin
	(*ResWealTaskDataBin)(nil),                      // 345: ResData.ResWealTaskDataBin
	(*ResWealExchangeDataBin)(nil),                  // 346: ResData.ResWealExchangeDataBin
	(*WealConf)(nil),                                // 347: ResData.WealConf
	(*ResAchieveTaskCfgDataBin)(nil),                // 348: ResData.ResAchieveTaskCfgDataBin
	(*ResAchieveTypeCfg)(nil),                       // 349: ResData.ResAchieveTypeCfg
	(*ResAchieveLevelDataBin)(nil),                  // 350: ResData.ResAchieveLevelDataBin
	(*AchieveConf)(nil),                             // 351: ResData.AchieveConf
	(*ResDT_BattleStatePhaseAudio)(nil),             // 352: ResData.ResDT_BattleStatePhaseAudio
	(*ResDT_BattleStateAudioInfo)(nil),              // 353: ResData.ResDT_BattleStateAudioInfo
	(*ResDT_BossStateAudioInfo)(nil),                // 354: ResData.ResDT_BossStateAudioInfo
	(*ResSceneAudioCfg)(nil),                        // 355: ResData.ResSceneAudioCfg
	(*ResSceneCfg)(nil),                             // 356: ResData.ResSceneCfg
	(*ResDefaultQualityBasedOnDevice)(nil),          // 357: ResData.ResDefaultQualityBasedOnDevice
	(*ResSOCScoreCfg)(nil),                          // 358: ResData.ResSOCScoreCfg
	(*ResChartsDatabin)(nil),                        // 359: ResData.ResChartsDatabin
	(*ResHundredRankIdxDatabin)(nil),                // 360: ResData.ResHundredRankIdxDatabin
	(*ResRanklistDatabin)(nil),                      // 361: ResData.ResRanklistDatabin
	(*ResRanklistSettleDatabin)(nil),                // 362: ResData.ResRanklistSettleDatabin
	(*RanklistConf)(nil),                            // 363: ResData.RanklistConf
	(*ResChargeDatabin)(nil),                        // 364: ResData.ResChargeDatabin
	(*ResCltUploadLogListCfg)(nil),                  // 365: ResData.ResCltUploadLogListCfg
	(*CltLogConf)(nil),                              // 366: ResData.CltLogConf
	(*ResHeroPropertyIconCfgDataBin)(nil),           // 367: ResData.ResHeroPropertyIconCfgDataBin
	(*ResChessHeroUpgradeAwardDatabin)(nil),         // 368: ResData.ResChessHeroUpgradeAwardDatabin
	(*ResDT_NBAIInfo)(nil),                          // 369: ResData.ResDT_NBAIInfo
	(*ResDT_NBPlayerInfo)(nil),                      // 370: ResData.ResDT_NBPlayerInfo
	(*ResNBCfg)(nil),                                // 371: ResData.ResNBCfg
	(*ResNBLevelCfg)(nil),                           // 372: ResData.ResNBLevelCfg
	(*ResNBShopCfg)(nil),                            // 373: ResData.ResNBShopCfg
	(*ResDT_NBChessBattlePos)(nil),                  // 374: ResData.ResDT_NBChessBattlePos
	(*ResNBChessBattlePosCfg)(nil),                  // 375: ResData.ResNBChessBattlePosCfg
	(*ResNBRoundPlayerCfg)(nil),                     // 376: ResData.ResNBRoundPlayerCfg
	(*ResNBChessHeroUpgradeAwardCfg)(nil),           // 377: ResData.ResNBChessHeroUpgradeAwardCfg
	(*ResDT_DynamicGuidePlayerStatusInfo)(nil),      // 378: ResData.ResDT_DynamicGuidePlayerStatusInfo
	(*ResDynamicGuidePlanCfg)(nil),                  // 379: ResData.ResDynamicGuidePlanCfg
	(*ResDT_DynamicGuideThreshold)(nil),             // 380: ResData.ResDT_DynamicGuideThreshold
	(*ResDynamicGuideThresholdCfg)(nil),             // 381: ResData.ResDynamicGuideThresholdCfg
	(*ResDT_DynamicGuideTipCloseConditionItem)(nil), // 382: ResData.ResDT_DynamicGuideTipCloseConditionItem
	(*ResDT_DynamicGuideTipPreOperateItem)(nil),     // 383: ResData.ResDT_DynamicGuideTipPreOperateItem
	(*ResDT_DynamicGuideTipItem)(nil),               // 384: ResData.ResDT_DynamicGuideTipItem
	(*ResDynamicGuideSingleBpCfg)(nil),              // 385: ResData.ResDynamicGuideSingleBpCfg
	(*ResDT_NBHelpUnlockTriggerTimeItem)(nil),       // 386: ResData.ResDT_NBHelpUnlockTriggerTimeItem
	(*ResNBHelpConfig)(nil),                         // 387: ResData.ResNBHelpConfig
	(*ResDT_NBUINameHintUnlockItem)(nil),            // 388: ResData.ResDT_NBUINameHintUnlockItem
	(*ResDT_NBUINameHintFinishItem)(nil),            // 389: ResData.ResDT_NBUINameHintFinishItem
	(*ResNBUINameHintCfg)(nil),                      // 390: ResData.ResNBUINameHintCfg
	(*ResDTAIParam)(nil),                            // 391: ResData.ResDTAIParam
	(*STAIDifficultyChg)(nil),                       // 392: ResData.STAIDifficultyChg
	(*ResAIDifficultyCfg)(nil),                      // 393: ResData.ResAIDifficultyCfg
	(*ResAIDifficultyChgCfg)(nil),                   // 394: ResData.ResAIDifficultyChgCfg
	(*ResDTWarmScript)(nil),                         // 395: ResData.ResDTWarmScript
	(*ResWarmAIStrategyCfg)(nil),                    // 396: ResData.ResWarmAIStrategyCfg
	(*ResLordUseWarmScripChgCfg)(nil),               // 397: ResData.ResLordUseWarmScripChgCfg
	(*ResWarmEMAParamCfg)(nil),                      // 398: ResData.ResWarmEMAParamCfg
	(*ResDTWarmBack)(nil),                           // 399: ResData.ResDTWarmBack
	(*ResDTWarmEMAStrategy)(nil),                    // 400: ResData.ResDTWarmEMAStrategy
	(*ResWarmAIRuleCfg)(nil),                        // 401: ResData.ResWarmAIRuleCfg
	(*ResDTStrategyScore)(nil),                      // 402: ResData.ResDTStrategyScore
	(*ResWarmAICondStrategy)(nil),                   // 403: ResData.ResWarmAICondStrategy
	(*ResWarmAIStrategyScore)(nil),                  // 404: ResData.ResWarmAIStrategyScore
	(*ResClientAIExtraFlag)(nil),                    // 405: ResData.ResClientAIExtraFlag
	(*WarmAIConf)(nil),                              // 406: ResData.WarmAIConf
	(*ResNewbieGrpDataBin)(nil),                     // 407: ResData.ResNewbieGrpDataBin
	(*ResNewbieTaskDataBin)(nil),                    // 408: ResData.ResNewbieTaskDataBin
	(*NewbieConf)(nil),                              // 409: ResData.NewbieConf
	(*ResTestServerPlayModKeyCfg)(nil),              // 410: ResData.ResTestServerPlayModKeyCfg
	(*TestConf)(nil),                                // 411: ResData.TestConf
	(*ResCardPackCfgDataBin)(nil),                   // 412: ResData.ResCardPackCfgDataBin
	(*DrawCardConf)(nil),                            // 413: ResData.DrawCardConf
	(*HelpSystemTab)(nil),                           // 414: ResData.HelpSystemTab
	(*HelpSystemPassage)(nil),                       // 415: ResData.HelpSystemPassage
	(*ResHelpSystemCfgDataBin)(nil),                 // 416: ResData.ResHelpSystemCfgDataBin
	(*ResNBGuideTriggerTimeItem)(nil),               // 417: ResData.ResNBGuideTriggerTimeItem
	(*ResNBGuideTriggerConditionItem)(nil),          // 418: ResData.ResNBGuideTriggerConditionItem
	(*ResNBGuideMainLineCfgDataBin)(nil),            // 419: ResData.ResNBGuideMainLineCfgDataBin
	(*ResDT_NBGuideIntroducer)(nil),                 // 420: ResData.ResDT_NBGuideIntroducer
	(*ResNBGuideIntroduceCfg)(nil),                  // 421: ResData.ResNBGuideIntroduceCfg
	(*ResNBGuideFingureCfg)(nil),                    // 422: ResData.ResNBGuideFingureCfg
	(*Vector2D)(nil),                                // 423: ResData.Vector2D
	(*ResDT_NBTip)(nil),                             // 424: ResData.ResDT_NBTip
	(*ResDT_NBFingure)(nil),                         // 425: ResData.ResDT_NBFingure
	(*ResNBGuideUICfg)(nil),                         // 426: ResData.ResNBGuideUICfg
	(*ResNBGuideTipCfg)(nil),                        // 427: ResData.ResNBGuideTipCfg
	(*ResNBGuideTlogCfg)(nil),                       // 428: ResData.ResNBGuideTlogCfg
	(*NewbieGuideConf)(nil),                         // 429: ResData.NewbieGuideConf
	(*NBAdditionalInfo)(nil),                        // 430: ResData.NBAdditionalInfo
	(*ResNBAdditionalDataBin)(nil),                  // 431: ResData.ResNBAdditionalDataBin
	(*ResNewbieConstDatabin)(nil),                   // 432: ResData.ResNewbieConstDatabin
	(*ResDT_TalentWeight)(nil),                      // 433: ResData.ResDT_TalentWeight
	(*ResTalentCfg)(nil),                            // 434: ResData.ResTalentCfg
	(*ResDT_TalentRebuildParam)(nil),                // 435: ResData.ResDT_TalentRebuildParam
	(*ResTalentRebuild)(nil),                        // 436: ResData.ResTalentRebuild
	(*ResTalentQuality)(nil),                        // 437: ResData.ResTalentQuality
	(*ResPlayerTalentSlot)(nil),                     // 438: ResData.ResPlayerTalentSlot
	(*ResPlayerTalentSlotGroup)(nil),                // 439: ResData.ResPlayerTalentSlotGroup
	(*ResPlayerTalent)(nil),                         // 440: ResData.ResPlayerTalent
	(*ResPlayerTalentSkill)(nil),                    // 441: ResData.ResPlayerTalentSkill
	(*ResPlayerTalentGroup)(nil),                    // 442: ResData.ResPlayerTalentGroup
	(*ResPlayerTalentMutexGroup)(nil),               // 443: ResData.ResPlayerTalentMutexGroup
	(*TalentConf)(nil),                              // 444: ResData.TalentConf
	(*ResFormationAttackRange)(nil),                 // 445: ResData.ResFormationAttackRange
	(*MaxFightInterest)(nil),                        // 446: ResData.MaxFightInterest
	(*ResMaxFightValueByCard)(nil),                  // 447: ResData.ResMaxFightValueByCard
	(*ResAIFormationHeroInfo)(nil),                  // 448: ResData.ResAIFormationHeroInfo
	(*ResAIFormations)(nil),                         // 449: ResData.ResAIFormations
	(*ResAIFormationFactors)(nil),                   // 450: ResData.ResAIFormationFactors
	(*ResWarmBTreeStrategy)(nil),                    // 451: ResData.ResWarmBTreeStrategy
	(*ResTriggerCalculateFormation)(nil),            // 452: ResData.ResTriggerCalculateFormation
	(*ChessAIThrowCoin)(nil),                        // 453: ResData.ChessAIThrowCoin
	(*ChessAIBuffShopItem)(nil),                     // 454: ResData.ChessAIBuffShopItem
	(*ChessAIBuffShop)(nil),                         // 455: ResData.ChessAIBuffShop
	(*ResChessAIDifficulty)(nil),                    // 456: ResData.ResChessAIDifficulty
	(*ResChessAIShopBuff)(nil),                      // 457: ResData.ResChessAIShopBuff
	(*ResChessAIDCardLevel)(nil),                    // 458: ResData.ResChessAIDCardLevel
	(*AIConstLevelConfig)(nil),                      // 459: ResData.AIConstLevelConfig
	(*ResChessAIConst)(nil),                         // 460: ResData.ResChessAIConst
	(*ResChessAINormalConst)(nil),                   // 461: ResData.ResChessAINormalConst
	(*StSubSettings)(nil),                           // 462: ResData.StSubSettings
	(*ResSettings)(nil),                             // 463: ResData.ResSettings
	(*PersonalDisplayInfo)(nil),                     // 464: ResData.PersonalDisplayInfo
	(*ResAcknowledgmentsDataBin)(nil),               // 465: ResData.ResAcknowledgmentsDataBin
	(*ResFreeGroupCfgDataBin)(nil),                  // 466: ResData.ResFreeGroupCfgDataBin
	(*ResFreeCfgDataBin)(nil),                       // 467: ResData.ResFreeCfgDataBin
	(*FreeConf)(nil),                                // 468: ResData.FreeConf
	(*ResChessManExpInfo)(nil),                      // 469: ResData.ResChessManExpInfo
	(*ResGuildConstCfg)(nil),                        // 470: ResData.ResGuildConstCfg
	(*ResGuildJoinLimitCfg)(nil),                    // 471: ResData.ResGuildJoinLimitCfg
	(*ResGuildLevelCfg)(nil),                        // 472: ResData.ResGuildLevelCfg
	(*ResGuildShowIDRefreshCfg)(nil),                // 473: ResData.ResGuildShowIDRefreshCfg
	(*ResGuildLabelCfg)(nil),                        // 474: ResData.ResGuildLabelCfg
	(*ResGuildIconCfg)(nil),                         // 475: ResData.ResGuildIconCfg
	(*ResGuildShowNumberBlackList)(nil),             // 476: ResData.ResGuildShowNumberBlackList
	(*GuildConf)(nil),                               // 477: ResData.GuildConf
	(*JumpInfo)(nil),                                // 478: ResData.JumpInfo
	(*ResJumpGlobalInfoDataBin)(nil),                // 479: ResData.ResJumpGlobalInfoDataBin
	(*ResProject8BossAwardValueCfg)(nil),            // 480: ResData.ResProject8BossAwardValueCfg
	(*ResProject8AwardPerformCfg)(nil),              // 481: ResData.ResProject8AwardPerformCfg
	(*ResProject8BossPresetShowCfg)(nil),            // 482: ResData.ResProject8BossPresetShowCfg
	(*ResProject8RelativeRecordCfg)(nil),            // 483: ResData.ResProject8RelativeRecordCfg
	(*ResProject8AirdropAwardCfg)(nil),              // 484: ResData.ResProject8AirdropAwardCfg
	(*ResProject8AirdropAwardTypeCfg)(nil),          // 485: ResData.ResProject8AirdropAwardTypeCfg
	(*ResAirdropAwardLogicGLCfg)(nil),               // 486: ResData.ResAirdropAwardLogicGLCfg
	(*IeDropConditionGroup)(nil),                    // 487: ResData.IeDropConditionGroup
	(*IeDropSubGroup)(nil),                          // 488: ResData.IeDropSubGroup
	(*ResIeDropScenario)(nil),                       // 489: ResData.ResIeDropScenario
	(*ResIeDropParamCfg)(nil),                       // 490: ResData.ResIeDropParamCfg
	(*ResAdministrativeCodeDatabin)(nil),            // 491: ResData.ResAdministrativeCodeDatabin
	(*ResGlobalCodeDatabin)(nil),                    // 492: ResData.ResGlobalCodeDatabin
	(*LbsConf)(nil),                                 // 493: ResData.LbsConf
	(*ResBattlePlayerLevelDataBin)(nil),             // 494: ResData.ResBattlePlayerLevelDataBin
	(*ResSystemEntryDataBin)(nil),                   // 495: ResData.ResSystemEntryDataBin
	(*ResLoadingBgCfgDataBin)(nil),                  // 496: ResData.ResLoadingBgCfgDataBin
	(*ResLoadingTextCfgDataBin)(nil),                // 497: ResData.ResLoadingTextCfgDataBin
	(*ResLoadingBgImageCfgDataBin)(nil),             // 498: ResData.ResLoadingBgImageCfgDataBin
	(*ResQtsPackageConfig)(nil),                     // 499: ResData.ResQtsPackageConfig
	(*PvpGameConf)(nil),                             // 500: ResData.PvpGameConf
	(*ResAISettleDetailDelayDataBin)(nil),           // 501: ResData.ResAISettleDetailDelayDataBin
	(*ResLobbyChartsInfoDatabin)(nil),               // 502: ResData.ResLobbyChartsInfoDatabin
	(*ResLobbySystemEntryCfg)(nil),                  // 503: ResData.ResLobbySystemEntryCfg
	(*LobbyRankShowIndexCfg)(nil),                   // 504: ResData.LobbyRankShowIndexCfg
	(*LobbyConf)(nil),                               // 505: ResData.LobbyConf
	(*ResPlayTemplateParam)(nil),                    // 506: ResData.ResPlayTemplateParam
	(*ResCurrencyRarityCfg)(nil),                    // 507: ResData.ResCurrencyRarityCfg
	(*ResPracticeConfig)(nil),                       // 508: ResData.ResPracticeConfig
	(*ResAndroidDeviceUICfg)(nil),                   // 509: ResData.ResAndroidDeviceUICfg
	(*ResRefTipsConfig)(nil),                        // 510: ResData.ResRefTipsConfig
	(*RefTipsCfg)(nil),                              // 511: ResData.RefTipsCfg
	(*ResLanguageCfg)(nil),                          // 512: ResData.ResLanguageCfg
	(*ResDistrictLanguageCfg)(nil),                  // 513: ResData.ResDistrictLanguageCfg
	(*ResCountryAgreementCfg)(nil),                  // 514: ResData.ResCountryAgreementCfg
	(*ResLordExclusiveSkillConfig)(nil),             // 515: ResData.ResLordExclusiveSkillConfig
	(*ResMNZDepositCardFetterIconCfg)(nil),          // 516: ResData.ResMNZDepositCardFetterIconCfg
	(*ResHomePageShowDataBin)(nil),                  // 517: ResData.ResHomePageShowDataBin
	(*ResRegionRulesCfg)(nil),                       // 518: ResData.ResRegionRulesCfg
	(*HomePageConf)(nil),                            // 519: ResData.HomePageConf
	(*BattleBroadcastDataBin)(nil),                  // 520: ResData.BattleBroadcastDataBin
	(*ResRecruitBattleRoundExtCfg)(nil),             // 521: ResData.ResRecruitBattleRoundExtCfg
	(*ResDT_LineupRecommend)(nil),                   // 522: ResData.ResDT_LineupRecommend
	(*ResRecruitConstDataBin)(nil),                  // 523: ResData.ResRecruitConstDataBin
	(*RecruitRankAward)(nil),                        // 524: ResData.RecruitRankAward
	(*ResDT_RecruitStepUpPopTipsItem)(nil),          // 525: ResData.ResDT_RecruitStepUpPopTipsItem
	(*ResDT_RecruitStepUpPresent)(nil),              // 526: ResData.ResDT_RecruitStepUpPresent
	(*ResRecruitStepDataBin)(nil),                   // 527: ResData.ResRecruitStepDataBin
	(*ResRecruitBanHeroCfg)(nil),                    // 528: ResData.ResRecruitBanHeroCfg
	(*ResRecruitChessAuctionRound)(nil),             // 529: ResData.ResRecruitChessAuctionRound
	(*RecruitTaskGuideCondInfo)(nil),                // 530: ResData.RecruitTaskGuideCondInfo
	(*ResRecruitTaskDataBin)(nil),                   // 531: ResData.ResRecruitTaskDataBin
	(*RecruitBattleConf)(nil),                       // 532: ResData.RecruitBattleConf
	(*ResPracticeConfig_Equip)(nil),                 // 533: ResData.ResPracticeConfig.Equip
	(*ResDT_AuctionDropInfo)(nil),                   // 534: ResData.ResDT_AuctionDropInfo
}
var file_os_res_data_proto_depIdxs = []int32{
	175, // 0: ResData.WhiteListConf.WhiteList:type_name -> ResData.ResWhiteListCfg
	176, // 1: ResData.WhiteListConf.BlackList:type_name -> ResData.ResBlackListCfg
	183, // 2: ResData.ResMatchStrategyCfg.EloRadius:type_name -> ResData.ResMatchStrategyRadiusInfo
	183, // 3: ResData.ResMatchStrategyCfg.RankRadius:type_name -> ResData.ResMatchStrategyRadiusInfo
	182, // 4: ResData.ResMatchStrategyCfg.AIDistribution:type_name -> ResData.ResMatchAIDistribution
	184, // 5: ResData.MatchConf.MatchStrategyCfg:type_name -> ResData.ResMatchStrategyCfg
	180, // 6: ResData.MatchConf.MatchPoolCfg:type_name -> ResData.ResMatchPoolCfg
	35,  // 7: ResData.ResPlayMod.UniqID:type_name -> ResData.PLAYMOD_TYPE
	36,  // 8: ResData.ResRandNameComb.Language:type_name -> ResData.GAMELANGUAGE_TYPE
	189, // 9: ResData.GlobalMiscConf.CommParam:type_name -> ResData.ResCommonConstCfg
	192, // 10: ResData.GlobalMiscConf.RandNameComb:type_name -> ResData.ResRandNameComb
	186, // 11: ResData.GlobalMiscConf.AIShowCfg:type_name -> ResData.ResAIShowCfg
	513, // 12: ResData.GlobalMiscConf.LanguageCfg:type_name -> ResData.ResDistrictLanguageCfg
	5,   // 13: ResData.ResGameTypeGroupCfg.GameType:type_name -> ResData.COM_GAME_TYPE
	6,   // 14: ResData.ResGameTypeGroupCfg.GameGroup:type_name -> ResData.COM_GAMETYPE_GROUP
	5,   // 15: ResData.ResGameTypeGrpBelongCfg.GameType:type_name -> ResData.COM_GAME_TYPE
	194, // 16: ResData.GameTypeConf.GameTypeGroup:type_name -> ResData.ResGameTypeGroupCfg
	195, // 17: ResData.GameTypeConf.GameTypeGrpBelong:type_name -> ResData.ResGameTypeGrpBelongCfg
	188, // 18: ResData.ResHeadImgInfoCfg.EnableInfo:type_name -> ResData.ResEnableInfo
	202, // 19: ResData.ResBGMCfg.BGMInfo:type_name -> ResData.ResDT_BGMInfo
	203, // 20: ResData.ResBGMCfg.SwitchTime:type_name -> ResData.ResDT_BGMSwitchTime
	188, // 21: ResData.ResHeadInfoCfg.EnableInfo:type_name -> ResData.ResEnableInfo
	206, // 22: ResData.ResGiftGuaranteeStrategyDataBin.StrategyCfgs:type_name -> ResData.ResGiftStrategyCfg
	197, // 23: ResData.ItemConf.PropInfo:type_name -> ResData.ResItemPropCfgDataBin
	198, // 24: ResData.ItemConf.MoneyInfo:type_name -> ResData.ResMoneyInfoCfg
	200, // 25: ResData.ItemConf.HeadImgInfo:type_name -> ResData.ResHeadImgInfoCfg
	205, // 26: ResData.ItemConf.HeadInfo:type_name -> ResData.ResHeadInfoCfg
	207, // 27: ResData.ItemConf.GiftGuaranteeStrategy:type_name -> ResData.ResGiftGuaranteeStrategyDataBin
	187, // 28: ResData.ResDropItemCfg.Award:type_name -> ResData.ResGameItem
	210, // 29: ResData.DropConf.DropData:type_name -> ResData.ResDropDataCfg
	209, // 30: ResData.DropConf.DropItem:type_name -> ResData.ResDropItemCfg
	211, // 31: ResData.DropConf.ItemLimit:type_name -> ResData.ResLimitInfoCfg
	212, // 32: ResData.DropConf.DropExcludeRepeat:type_name -> ResData.ResDropsExcludeRepeatDataBin
	17,  // 33: ResData.ResInSeasonRankAwardsDataBin.MailID:type_name -> ResData.EMailID
	237, // 34: ResData.ResSeasonRankTaskDataBin.FinishCond:type_name -> ResData.ResCondInfo
	35,  // 35: ResData.ResSeasonGameTypesBin.PlayModID:type_name -> ResData.PLAYMOD_TYPE
	187, // 36: ResData.ResSeasonGameTypesBin.ScoreProtectItemID:type_name -> ResData.ResGameItem
	36,  // 37: ResData.ResLanguageText.LanguageType:type_name -> ResData.GAMELANGUAGE_TYPE
	4,   // 38: ResData.ResSeasonPlayCenterBin.GameTypeTheme:type_name -> ResData.COM_GAME_BIG_TYPE_THEME
	54,  // 39: ResData.ResSeasonPlayCenterBin.GameTypeOpenMethod:type_name -> ResData.COM_GAMETYPE_OPEN_METHOD
	219, // 40: ResData.ResSeasonPlayCenterBin.Tips:type_name -> ResData.ResLanguageText
	55,  // 41: ResData.ResSeasonPlayerConditions.PlayerType:type_name -> ResData.COM_SEASON_PLAYER_TYPE
	56,  // 42: ResData.ResSeasonPlayerConditions.ConditionType:type_name -> ResData.COM_SEASON_PLAYER_CONDITION
	55,  // 43: ResData.ResSeasonPlayerConcludingMsg.PlayerType:type_name -> ResData.COM_SEASON_PLAYER_TYPE
	214, // 44: ResData.SeasonConf.Season:type_name -> ResData.ResSeasonDataBin
	215, // 45: ResData.SeasonConf.RankAwards:type_name -> ResData.ResSeasonRankAwardsDataBin
	217, // 46: ResData.SeasonConf.RankTaskData:type_name -> ResData.ResSeasonRankTaskDataBin
	218, // 47: ResData.SeasonConf.GameTypeData:type_name -> ResData.ResSeasonGameTypesBin
	221, // 48: ResData.SeasonConf.SeasonRankInherit:type_name -> ResData.ResSeasonRankInherit
	191, // 49: ResData.SeasonConf.PlayModeCfg:type_name -> ResData.ResPlayMod
	220, // 50: ResData.SeasonConf.PlayCenter:type_name -> ResData.ResSeasonPlayCenterBin
	222, // 51: ResData.SeasonConf.PlayerConds:type_name -> ResData.ResSeasonPlayerConditions
	223, // 52: ResData.SeasonConf.PlayerConcluding:type_name -> ResData.ResSeasonPlayerConcludingMsg
	216, // 53: ResData.SeasonConf.InSeasonRankAwards:type_name -> ResData.ResInSeasonRankAwardsDataBin
	36,  // 54: ResData.MultiLangMailContent.LanguageRule:type_name -> ResData.GAMELANGUAGE_TYPE
	237, // 55: ResData.ResGlobalMailDataBin.UnlockCond:type_name -> ResData.ResCondInfo
	226, // 56: ResData.ResGlobalMailDataBin.Contents:type_name -> ResData.MultiLangMailContent
	187, // 57: ResData.ResGlobalMailDataBin.Award:type_name -> ResData.ResGameItem
	225, // 58: ResData.MailConf.TemplateMail:type_name -> ResData.ResTemplateMailDataBin
	227, // 59: ResData.MailConf.GlobalMail:type_name -> ResData.ResGlobalMailDataBin
	228, // 60: ResData.MailConf.MailSysOpt:type_name -> ResData.ResMailSysOpt
	68,  // 61: ResData.ResTalkInsideQuickMsgCfgDataBin.aiCommunicationType:type_name -> ResData.AICommunicationType
	234, // 62: ResData.ExpConf.ExpToLvlUp:type_name -> ResData.ResExpToLevelUpDataBin
	235, // 63: ResData.ExpConf.ExpBuf:type_name -> ResData.ResExpBufDatabin
	237, // 64: ResData.ResGameUnlockDataBin.UnlockCond:type_name -> ResData.ResCondInfo
	238, // 65: ResData.GameUnlockConf.GameUnlock:type_name -> ResData.ResGameUnlockDataBin
	237, // 66: ResData.ResTokenTaskCfgDataBin.FinishCond:type_name -> ResData.ResCondInfo
	187, // 67: ResData.ResTokenSeasonCfgDataBin.HighTokenCost:type_name -> ResData.ResGameItem
	187, // 68: ResData.ResTokenSeasonCfgDataBin.DeluxeTokenCost:type_name -> ResData.ResGameItem
	187, // 69: ResData.ResTokenSeasonCfgDataBin.High2DeluxeTokenCost:type_name -> ResData.ResGameItem
	187, // 70: ResData.ResTokenSeasonCfgDataBin.LevelCost:type_name -> ResData.ResGameItem
	242, // 71: ResData.ResTokenSeasonCfgDataBin.NormalTokenEffect:type_name -> ResData.STTokenEffectInfo
	242, // 72: ResData.ResTokenSeasonCfgDataBin.HighTokenEffect:type_name -> ResData.STTokenEffectInfo
	242, // 73: ResData.ResTokenSeasonCfgDataBin.DeluxeTokenEffect:type_name -> ResData.STTokenEffectInfo
	245, // 74: ResData.ResTokenLevelAwardDataBin.NormalDropInfos:type_name -> ResData.ResTokenLevelDropInfo
	245, // 75: ResData.ResTokenLevelAwardDataBin.HighDropInfos:type_name -> ResData.ResTokenLevelDropInfo
	240, // 76: ResData.TokenConf.TokenTaskCfg:type_name -> ResData.ResTokenTaskCfgDataBin
	241, // 77: ResData.TokenConf.TokenTaskRefresh:type_name -> ResData.ResTokenTaskRefreshDataBin
	243, // 78: ResData.TokenConf.TokenSeasonCfg:type_name -> ResData.ResTokenSeasonCfgDataBin
	246, // 79: ResData.TokenConf.TokenLevelAward:type_name -> ResData.ResTokenLevelAwardDataBin
	244, // 80: ResData.TokenConf.TokenHangupCfg:type_name -> ResData.ResTokenHangupCfgDataBin
	248, // 81: ResData.RankConf.Rank:type_name -> ResData.ResRankDataBin
	249, // 82: ResData.RankConf.Protect:type_name -> ResData.ResRankProtectedDatabin
	250, // 83: ResData.RankConf.KValue:type_name -> ResData.ResRankKDatabin
	251, // 84: ResData.RankConf.EloConst:type_name -> ResData.ResEloConstDatabin
	252, // 85: ResData.RankConf.BattleAward:type_name -> ResData.ResBattleAwardDatabin
	253, // 86: ResData.RankConf.ScoreCorrection:type_name -> ResData.ResScoreCorrectionDatabin
	256, // 87: ResData.RoomConf.RefusePunish:type_name -> ResData.ResRoomRefusePunishDataBin
	181, // 88: ResData.RoomConf.RankRange:type_name -> ResData.ResMatchRankRangeCfg
	28,  // 89: ResData.ResChessHeroConfDataBin.ChessRelative:type_name -> ResData.RES_RELATIVE_ID
	258, // 90: ResData.ResChessHeroConfDataBin.Slot:type_name -> ResData.Res_Chess_Slot_Struct
	261, // 91: ResData.ResChessHeroConfDataBin.FuncInfo:type_name -> ResData.ResDT_ChessFuncInfo
	259, // 92: ResData.ResChessHeroConfDataBin.CardHighModelInfo:type_name -> ResData.ResDT_ChessModelInfo
	259, // 93: ResData.ResChessHeroConfDataBin.CardLowModelInfo:type_name -> ResData.ResDT_ChessModelInfo
	260, // 94: ResData.ResChessHeroConfDataBin.Combos:type_name -> ResData.ResDT_ChessComboInfo
	141, // 95: ResData.ResChessHeroConfDataBin.lowPriorityWearType:type_name -> ResData.EQUIP_TYPE
	26,  // 96: ResData.ResChessHeroConfDataBin.heroModes:type_name -> ResData.HeroModeType
	169, // 97: ResData.ResChessHeroConfDataBin.Layer:type_name -> ResData.ResLayerType
	70,  // 98: ResData.AICommunicationItem.triggerType:type_name -> ResData.AICommunicationTrigger
	68,  // 99: ResData.AICommunicationItem.communicationType:type_name -> ResData.AICommunicationType
	270, // 100: ResData.ResAICommunicationCfg.PlayerCountWatchRateList:type_name -> ResData.AIWatchPlayerRate
	269, // 101: ResData.ResAICommunicationCfg.items:type_name -> ResData.AICommunicationItem
	67,  // 102: ResData.AIAttrScale.Type:type_name -> ResData.AIAttrType
	273, // 103: ResData.ResEquipDataBin.PropChange:type_name -> ResData.ResEquipProp
	141, // 104: ResData.ResEquipDataBin.Type:type_name -> ResData.EQUIP_TYPE
	267, // 105: ResData.ResEquipDataBin.PassiveSkill:type_name -> ResData.ResPassiveSkill
	265, // 106: ResData.ResEquipDataBin.EffectCombine:type_name -> ResData.ResEffectCombine
	266, // 107: ResData.ResEquipDataBin.ActiveSkill:type_name -> ResData.ResActiveSkill
	28,  // 108: ResData.ResEquipDataBin.AdditionRelative:type_name -> ResData.RES_RELATIVE_ID
	73,  // 109: ResData.ResEquipDataBin.UpgradeType:type_name -> ResData.RES_PROJECT8_EQUIP_UPGRADE_TYPE
	72,  // 110: ResData.ResEquipDataBin.EquipFuncType:type_name -> ResData.RES_PROJECT8_EQUIP_FUNC_TYPE
	142, // 111: ResData.ResEquipDataBin.UseType:type_name -> ResData.EQUIP_USE_TYPE
	272, // 112: ResData.ResEquipDataBin.AIAttrs:type_name -> ResData.AIAttrScale
	277, // 113: ResData.Res_Fetter_Struct.Effect:type_name -> ResData.ResDT_ChessGlobalEffectItem
	278, // 114: ResData.Res_Fetter_Struct.SpecialParam:type_name -> ResData.ResDT_ChessSpecialParam
	284, // 115: ResData.FetterConf.FetterData:type_name -> ResData.ResFetterConfDataBin
	28,  // 116: ResData.ResFetterConfDataBin.FetterID:type_name -> ResData.RES_RELATIVE_ID
	276, // 117: ResData.ResFetterConfDataBin.FetterPeopleNum:type_name -> ResData.Res_Fetter_Num_Struct
	279, // 118: ResData.ResFetterConfDataBin.FetterEffect:type_name -> ResData.Res_Fetter_Struct
	280, // 119: ResData.ResFetterConfDataBin.FetterLayerQuality:type_name -> ResData.Res_Fetter_Layer_Quality
	281, // 120: ResData.ResFetterConfDataBin.FetterLayerIcon:type_name -> ResData.Res_Fetter_Layer_Icon
	283, // 121: ResData.ResFetterConfDataBin.AudioInfo:type_name -> ResData.ResDT_FetterAudioInfo
	27,  // 122: ResData.ResFetterConfDataBin.relativeModes:type_name -> ResData.RelativeModeType
	286, // 123: ResData.ResSeasonLineupDataBin.FinalHeroes:type_name -> ResData.ResLineupHeroInfo
	286, // 124: ResData.ResSeasonLineupDataBin.EarlyHeroes:type_name -> ResData.ResLineupHeroInfo
	78,  // 125: ResData.ResSeasonLineupDataBin.LineUpType:type_name -> ResData.LINE_UP_TYPE
	28,  // 126: ResData.ResSeasonLineupThumbnailCfg.MajorRelative:type_name -> ResData.RES_RELATIVE_ID
	287, // 127: ResData.LineupConf.SeasonLineup:type_name -> ResData.ResSeasonLineupDataBin
	6,   // 128: ResData.ResLordInfoConfDataBin.GameTypeGroup:type_name -> ResData.COM_GAMETYPE_GROUP
	188, // 129: ResData.ResLordInfoConfDataBin.EnableInfo:type_name -> ResData.ResEnableInfo
	81,  // 130: ResData.ResLordSkillDataBin.Interaction:type_name -> ResData.LordSkillInteraction
	83,  // 131: ResData.ResLordSkillDataBin.InteractionParam:type_name -> ResData.LordSkillInteractionParam
	84,  // 132: ResData.ResLordSkillDataBin.SkillInstType:type_name -> ResData.ELordSkillInstType
	80,  // 133: ResData.ResLordSkillDataBin.RoundState:type_name -> ResData.RoundStateBit
	85,  // 134: ResData.ResLordSkillDataBin.PhaseParam:type_name -> ResData.ELordSkillPhaseParam
	293, // 135: ResData.ResLordSkillLevelDataBin.ExpGatherConditionInfos:type_name -> ResData.ResLordSkillLevelExpGatherConditionInfo
	188, // 136: ResData.ResLordSkinDataBin.EnableInfo:type_name -> ResData.ResEnableInfo
	237, // 137: ResData.ResLordFilesItem.UnlockCond:type_name -> ResData.ResCondInfo
	296, // 138: ResData.ResLordFileDataBin.ResLordDetailsItems:type_name -> ResData.ResLordDetailsItem
	297, // 139: ResData.ResLordFileDataBin.ResLordFilesItems:type_name -> ResData.ResLordFilesItem
	187, // 140: ResData.ResLordQuestionAndAnswerDataBin.AskQuestionsCost:type_name -> ResData.ResGameItem
	187, // 141: ResData.ResLordQuestionAndAnswerDataBin.RefreshQuestionsCost:type_name -> ResData.ResGameItem
	299, // 142: ResData.ResLordQuestionAndAnswerDataBin.QAInfo:type_name -> ResData.STLordQuestionAndAnswerInfo
	301, // 143: ResData.ResLordAudioCfgDataBin.OutgameAudio:type_name -> ResData.ResDT_LordOutgameAudio
	302, // 144: ResData.ResLordAudioCfgDataBin.IngameAudio:type_name -> ResData.ResDT_LordIngameAudio
	5,   // 145: ResData.ResLordProficiencySettleDatabin.GameType:type_name -> ResData.COM_GAME_TYPE
	309, // 146: ResData.ResLordProficiencyLevelDatabin.UnLockValue:type_name -> ResData.LordProficiencyParam
	291, // 147: ResData.LordConf.LordData:type_name -> ResData.ResLordInfoConfDataBin
	295, // 148: ResData.LordConf.SkinData:type_name -> ResData.ResLordSkinDataBin
	306, // 149: ResData.LordConf.LordProficiencySettleCfg:type_name -> ResData.ResLordProficiencySettleDatabin
	308, // 150: ResData.LordConf.LordProficiencyLevelCfg:type_name -> ResData.ResLordProficiencyLevelDatabin
	310, // 151: ResData.LordConf.LordPowerCommonCfg:type_name -> ResData.ResLordPowerCommonDatabin
	311, // 152: ResData.LordConf.LordBattlePointsCfg:type_name -> ResData.ResLordBattlePointsDatabin
	312, // 153: ResData.LordConf.LordShowScoreCfg:type_name -> ResData.ResLordShowScoreDatabin
	313, // 154: ResData.LordConf.LordShowScoreCtrlCfg:type_name -> ResData.ResLordShowScoreCtrlDatabin
	314, // 155: ResData.LordConf.LordRecentResultsCfg:type_name -> ResData.ResLordRecentResultsDatabin
	315, // 156: ResData.LordConf.LordPowerRankTitleCfg:type_name -> ResData.ResLordPowerRankTitleDatabin
	316, // 157: ResData.LordConf.LordPowerRankMapCfg:type_name -> ResData.ResLordPowerRankMapDataBin
	298, // 158: ResData.LordConf.LordFileCfg:type_name -> ResData.ResLordFileDataBin
	300, // 159: ResData.LordConf.LordQuestionAndAnswerCfg:type_name -> ResData.ResLordQuestionAndAnswerDataBin
	317, // 160: ResData.LordConf.LordGroupDataBin:type_name -> ResData.ResLordGroupDataBin
	319, // 161: ResData.ResPVPLordSelectModeCfg.RoundList:type_name -> ResData.ResDTLordSelectRound
	320, // 162: ResData.ResPVPLordSelectModeCfg.StageConfirmAIOp:type_name -> ResData.ResDTLordSelectAIOpRange
	320, // 163: ResData.ResPVPLordSelectModeCfg.StageBanAIOp:type_name -> ResData.ResDTLordSelectAIOpRange
	321, // 164: ResData.PvpLordSelectConf.PVPLordSelectModeCfg:type_name -> ResData.ResPVPLordSelectModeCfg
	324, // 165: ResData.SocialConf.SocialData:type_name -> ResData.ResSocialCfg
	6,   // 166: ResData.ResPersonaliseChessboardDataBin.GameTypeGroup:type_name -> ResData.COM_GAMETYPE_GROUP
	188, // 167: ResData.ResPersonaliseChessboardDataBin.EnableInfo:type_name -> ResData.ResEnableInfo
	6,   // 168: ResData.ResPersonaliseConstDatabin.GameTypeGroup:type_name -> ResData.COM_GAMETYPE_GROUP
	188, // 169: ResData.ResChessboardPartDataBin.EnableInfo:type_name -> ResData.ResEnableInfo
	68,  // 170: ResData.ResPersonaliseEmojiDataBin.aiCommunicationType:type_name -> ResData.AICommunicationType
	188, // 171: ResData.ResPersonaliseEmojiDataBin.EnableInfo:type_name -> ResData.ResEnableInfo
	92,  // 172: ResData.ResPersonaliseSpecialEftDataBin.Class:type_name -> ResData.ESpecialEftClass
	91,  // 173: ResData.ResPersonaliseSpecialEftDataBin.Type:type_name -> ResData.ESpecialEftType
	188, // 174: ResData.ResPersonaliseSpecialEftDataBin.EnableInfo:type_name -> ResData.ResEnableInfo
	173, // 175: ResData.ResPersonaliseTypeDatabin.Type:type_name -> ResData.ResPersonaliseTypeDatabin.PersonaliseType
	326, // 176: ResData.PersonaliseConf.ChessBoardCfg:type_name -> ResData.ResPersonaliseChessboardDataBin
	327, // 177: ResData.PersonaliseConf.PersonaliseConstCfg:type_name -> ResData.ResPersonaliseConstDatabin
	328, // 178: ResData.PersonaliseConf.ChessBoardPartDataBin:type_name -> ResData.ResChessboardPartDataBin
	329, // 179: ResData.PersonaliseConf.ChessBoardPartSetDataBin:type_name -> ResData.ResChessboardPartSetDataBin
	331, // 180: ResData.PersonaliseConf.EmojiDataBin:type_name -> ResData.ResPersonaliseEmojiDataBin
	332, // 181: ResData.PersonaliseConf.SpecialEftDataBin:type_name -> ResData.ResPersonaliseSpecialEftDataBin
	15,  // 182: ResData.ResChessDecorateDataBin.DecorateType:type_name -> ResData.COM_CHESSDECORATE_SUBTYPE
	44,  // 183: ResData.ResChessDecorateDataBin.Quality:type_name -> ResData.RES_PROP_QUALITY_TYPE
	15,  // 184: ResData.ResDecorateCombineResolveData.DecorateType:type_name -> ResData.COM_CHESSDECORATE_SUBTYPE
	335, // 185: ResData.ChessConf.ChessData:type_name -> ResData.ResChessDataBin
	262, // 186: ResData.ChessConf.PlayModChessHeroConf:type_name -> ResData.ResChessHeroConfDataBin
	336, // 187: ResData.ChessConf.ChessSeasonInfo:type_name -> ResData.ResChessSeasonInfo
	337, // 188: ResData.ChessConf.ChessStatisticInfo:type_name -> ResData.ResChessStatisticInfo
	338, // 189: ResData.ChessConf.ChessCombInfo:type_name -> ResData.ResChessCombInfo
	339, // 190: ResData.ChessConf.ChessDecorateData:type_name -> ResData.ResChessDecorateDataBin
	340, // 191: ResData.ChessConf.DecorateCombineResolve:type_name -> ResData.ResDecorateCombineResolveData
	275, // 192: ResData.EquipConf.EquipData:type_name -> ResData.ResEquipDataBin
	237, // 193: ResData.ResWealTaskDataBin.FinishCond:type_name -> ResData.ResCondInfo
	237, // 194: ResData.ResWealTaskDataBin.UnlockCond:type_name -> ResData.ResCondInfo
	187, // 195: ResData.ResWealExchangeDataBin.ExchangeItem:type_name -> ResData.ResGameItem
	187, // 196: ResData.ResWealExchangeDataBin.CostItem:type_name -> ResData.ResGameItem
	344, // 197: ResData.WealConf.CommonWealData:type_name -> ResData.ResCommonWealDataBin
	345, // 198: ResData.WealConf.WealTaskData:type_name -> ResData.ResWealTaskDataBin
	346, // 199: ResData.WealConf.WealExchangeData:type_name -> ResData.ResWealExchangeDataBin
	237, // 200: ResData.ResAchieveTaskCfgDataBin.FinishCond:type_name -> ResData.ResCondInfo
	348, // 201: ResData.AchieveConf.AchieveTaskCfg:type_name -> ResData.ResAchieveTaskCfgDataBin
	350, // 202: ResData.AchieveConf.AchieveLevelCfg:type_name -> ResData.ResAchieveLevelDataBin
	352, // 203: ResData.ResDT_BattleStateAudioInfo.Prepare:type_name -> ResData.ResDT_BattleStatePhaseAudio
	352, // 204: ResData.ResDT_BattleStateAudioInfo.Teleport:type_name -> ResData.ResDT_BattleStatePhaseAudio
	352, // 205: ResData.ResDT_BattleStateAudioInfo.Race:type_name -> ResData.ResDT_BattleStatePhaseAudio
	352, // 206: ResData.ResDT_BattleStateAudioInfo.RoundWin:type_name -> ResData.ResDT_BattleStatePhaseAudio
	352, // 207: ResData.ResDT_BattleStateAudioInfo.RoundLose:type_name -> ResData.ResDT_BattleStatePhaseAudio
	353, // 208: ResData.ResSceneAudioCfg.Battle:type_name -> ResData.ResDT_BattleStateAudioInfo
	354, // 209: ResData.ResSceneAudioCfg.BossBattle:type_name -> ResData.ResDT_BossStateAudioInfo
	187, // 210: ResData.ResRanklistSettleDatabin.Award:type_name -> ResData.ResGameItem
	361, // 211: ResData.RanklistConf.RanklistCfg:type_name -> ResData.ResRanklistDatabin
	362, // 212: ResData.RanklistConf.RanklistSettleCfg:type_name -> ResData.ResRanklistSettleDatabin
	365, // 213: ResData.CltLogConf.CltUploadLogCfg:type_name -> ResData.ResCltUploadLogListCfg
	369, // 214: ResData.ResNBCfg.AI:type_name -> ResData.ResDT_NBAIInfo
	370, // 215: ResData.ResNBCfg.Player:type_name -> ResData.ResDT_NBPlayerInfo
	374, // 216: ResData.ResNBChessBattlePosCfg.BattlePos:type_name -> ResData.ResDT_NBChessBattlePos
	378, // 217: ResData.ResDynamicGuidePlanCfg.PlayerStatus:type_name -> ResData.ResDT_DynamicGuidePlayerStatusInfo
	380, // 218: ResData.ResDynamicGuideThresholdCfg.Threshold:type_name -> ResData.ResDT_DynamicGuideThreshold
	383, // 219: ResData.ResDT_DynamicGuideTipItem.PreOperate:type_name -> ResData.ResDT_DynamicGuideTipPreOperateItem
	384, // 220: ResData.ResDynamicGuideSingleBpCfg.ClosedTip:type_name -> ResData.ResDT_DynamicGuideTipItem
	384, // 221: ResData.ResDynamicGuideSingleBpCfg.OpenedTip:type_name -> ResData.ResDT_DynamicGuideTipItem
	382, // 222: ResData.ResDynamicGuideSingleBpCfg.CloseConditions:type_name -> ResData.ResDT_DynamicGuideTipCloseConditionItem
	386, // 223: ResData.ResNBHelpConfig.UnlockTriggers:type_name -> ResData.ResDT_NBHelpUnlockTriggerTimeItem
	388, // 224: ResData.ResNBUINameHintCfg.Unlock:type_name -> ResData.ResDT_NBUINameHintUnlockItem
	389, // 225: ResData.ResNBUINameHintCfg.Finish:type_name -> ResData.ResDT_NBUINameHintFinishItem
	423, // 226: ResData.ResNBUINameHintCfg.Offset:type_name -> ResData.Vector2D
	391, // 227: ResData.ResAIDifficultyCfg.AIParam:type_name -> ResData.ResDTAIParam
	391, // 228: ResData.ResAIDifficultyCfg.GuaranteeAIParam:type_name -> ResData.ResDTAIParam
	392, // 229: ResData.ResAIDifficultyChgCfg.DifficultyChg:type_name -> ResData.STAIDifficultyChg
	395, // 230: ResData.ResWarmAIStrategyCfg.WarmScript:type_name -> ResData.ResDTWarmScript
	113, // 231: ResData.ResLordUseWarmScripChgCfg.UseType:type_name -> ResData.EPVPLordUseType
	395, // 232: ResData.ResLordUseWarmScripChgCfg.WarmScript:type_name -> ResData.ResDTWarmScript
	400, // 233: ResData.ResWarmAIRuleCfg.EMA:type_name -> ResData.ResDTWarmEMAStrategy
	399, // 234: ResData.ResWarmAIRuleCfg.WarmBack:type_name -> ResData.ResDTWarmBack
	237, // 235: ResData.ResWarmAICondStrategy.CheckCond:type_name -> ResData.ResCondInfo
	402, // 236: ResData.ResWarmAICondStrategy.StrategyScoreInfo:type_name -> ResData.ResDTStrategyScore
	237, // 237: ResData.ResWarmAIStrategyScore.ScoreCond:type_name -> ResData.ResCondInfo
	115, // 238: ResData.ResClientAIExtraFlag.ID:type_name -> ResData.EClientAIExtraFlag
	396, // 239: ResData.WarmAIConf.WarmAIStrategyCfg:type_name -> ResData.ResWarmAIStrategyCfg
	401, // 240: ResData.WarmAIConf.WarmAIRuleCfg:type_name -> ResData.ResWarmAIRuleCfg
	398, // 241: ResData.WarmAIConf.WarmEMAParamCfg:type_name -> ResData.ResWarmEMAParamCfg
	489, // 242: ResData.WarmAIConf.WarmAIScript:type_name -> ResData.ResIeDropScenario
	393, // 243: ResData.WarmAIConf.AIDifficultyCfg:type_name -> ResData.ResAIDifficultyCfg
	394, // 244: ResData.WarmAIConf.AIDifficultyChgCfg:type_name -> ResData.ResAIDifficultyChgCfg
	403, // 245: ResData.WarmAIConf.WarmAICondStrategy:type_name -> ResData.ResWarmAICondStrategy
	404, // 246: ResData.WarmAIConf.WarmAIStrategyScore:type_name -> ResData.ResWarmAIStrategyScore
	397, // 247: ResData.WarmAIConf.LordUseWarmScriptChgCfg:type_name -> ResData.ResLordUseWarmScripChgCfg
	405, // 248: ResData.WarmAIConf.ClientAIExtraFlag:type_name -> ResData.ResClientAIExtraFlag
	237, // 249: ResData.ResNewbieGrpDataBin.UnlockCond:type_name -> ResData.ResCondInfo
	237, // 250: ResData.ResNewbieTaskDataBin.FinishCond:type_name -> ResData.ResCondInfo
	116, // 251: ResData.ResNewbieTaskDataBin.TaskType:type_name -> ResData.ENewbieTaskType
	407, // 252: ResData.NewbieConf.NewbieGrpDataBin:type_name -> ResData.ResNewbieGrpDataBin
	408, // 253: ResData.NewbieConf.NewbieTaskDataBin:type_name -> ResData.ResNewbieTaskDataBin
	410, // 254: ResData.TestConf.TestCfg:type_name -> ResData.ResTestServerPlayModKeyCfg
	117, // 255: ResData.ResCardPackCfgDataBin.CardType:type_name -> ResData.ECardPackType
	187, // 256: ResData.ResCardPackCfgDataBin.CostItem:type_name -> ResData.ResGameItem
	187, // 257: ResData.ResCardPackCfgDataBin.ExchangeKeyCostItems:type_name -> ResData.ResGameItem
	412, // 258: ResData.DrawCardConf.CardPackCfg:type_name -> ResData.ResCardPackCfgDataBin
	415, // 259: ResData.HelpSystemTab.Passage:type_name -> ResData.HelpSystemPassage
	414, // 260: ResData.ResHelpSystemCfgDataBin.TabData:type_name -> ResData.HelpSystemTab
	417, // 261: ResData.ResNBGuideMainLineCfgDataBin.Triggers:type_name -> ResData.ResNBGuideTriggerTimeItem
	418, // 262: ResData.ResNBGuideMainLineCfgDataBin.Conditions:type_name -> ResData.ResNBGuideTriggerConditionItem
	418, // 263: ResData.ResNBGuideMainLineCfgDataBin.SkipConditions:type_name -> ResData.ResNBGuideTriggerConditionItem
	420, // 264: ResData.ResNBGuideIntroduceCfg.Introducer:type_name -> ResData.ResDT_NBGuideIntroducer
	423, // 265: ResData.ResDT_NBTip.Offset:type_name -> ResData.Vector2D
	423, // 266: ResData.ResDT_NBFingure.Offset:type_name -> ResData.Vector2D
	423, // 267: ResData.ResDT_NBFingure.FrameSize:type_name -> ResData.Vector2D
	423, // 268: ResData.ResDT_NBFingure.FrameOffset:type_name -> ResData.Vector2D
	424, // 269: ResData.ResNBGuideUICfg.Tip:type_name -> ResData.ResDT_NBTip
	425, // 270: ResData.ResNBGuideUICfg.Fingure:type_name -> ResData.ResDT_NBFingure
	419, // 271: ResData.NewbieGuideConf.NewbieGuideCfg:type_name -> ResData.ResNBGuideMainLineCfgDataBin
	428, // 272: ResData.NewbieGuideConf.NewbieGuideTlog:type_name -> ResData.ResNBGuideTlogCfg
	430, // 273: ResData.ResNBAdditionalDataBin.AdditionalInfo:type_name -> ResData.NBAdditionalInfo
	132, // 274: ResData.ResDT_TalentWeight.CheckType:type_name -> ResData.RES_TALENT_WEIGHT_CHECK_TYPE
	130, // 275: ResData.ResTalentCfg.Type:type_name -> ResData.RES_TALENT_TYPE
	433, // 276: ResData.ResTalentCfg.WeightAdditions:type_name -> ResData.ResDT_TalentWeight
	133, // 277: ResData.ResTalentCfg.UnLockType:type_name -> ResData.RES_TALENT_UNLOCK_TYPE
	435, // 278: ResData.ResTalentRebuild.RebuildParams:type_name -> ResData.ResDT_TalentRebuildParam
	438, // 279: ResData.ResPlayerTalentSlotGroup.Slots:type_name -> ResData.ResPlayerTalentSlot
	135, // 280: ResData.ResPlayerTalent.AITalentType:type_name -> ResData.PlayerTalentAIType
	136, // 281: ResData.ResPlayerTalent.FuncType:type_name -> ResData.RES_TALENT_FUNC_TYPE
	137, // 282: ResData.ResPlayerTalentSkill.skillIndicateType:type_name -> ResData.TalentSkilIndicateType
	138, // 283: ResData.ResPlayerTalentSkill.triggerDir:type_name -> ResData.PlayerTalentTriggerSkillDirection
	130, // 284: ResData.ResPlayerTalentGroup.TalentGroupType:type_name -> ResData.RES_TALENT_TYPE
	440, // 285: ResData.TalentConf.PlayerTalentCfg:type_name -> ResData.ResPlayerTalent
	446, // 286: ResData.ResMaxFightValueByCard.InterestScale:type_name -> ResData.MaxFightInterest
	140, // 287: ResData.ResAIFormations.LaunchType:type_name -> ResData.AIFormationType
	448, // 288: ResData.ResAIFormations.Heros:type_name -> ResData.ResAIFormationHeroInfo
	28,  // 289: ResData.ResAIFormations.MainRelative1:type_name -> ResData.RES_RELATIVE_ID
	28,  // 290: ResData.ResAIFormations.MainRelative2:type_name -> ResData.RES_RELATIVE_ID
	454, // 291: ResData.ChessAIBuffShop.Quality:type_name -> ResData.ChessAIBuffShopItem
	453, // 292: ResData.ResChessAIDifficulty.ThrowCoin:type_name -> ResData.ChessAIThrowCoin
	455, // 293: ResData.ResChessAIShopBuff.FormationBuff:type_name -> ResData.ChessAIBuffShop
	455, // 294: ResData.ResChessAIShopBuff.WorkerBuff:type_name -> ResData.ChessAIBuffShop
	459, // 295: ResData.ResChessAIConst.LevelConfs:type_name -> ResData.AIConstLevelConfig
	143, // 296: ResData.ResChessAINormalConst.ID:type_name -> ResData.AINormalConstKey
	462, // 297: ResData.ResSettings.SubItems:type_name -> ResData.StSubSettings
	464, // 298: ResData.ResAcknowledgmentsDataBin.PersonalInfo:type_name -> ResData.PersonalDisplayInfo
	466, // 299: ResData.FreeConf.FreeGroupCfg:type_name -> ResData.ResFreeGroupCfgDataBin
	467, // 300: ResData.FreeConf.FreeCfg:type_name -> ResData.ResFreeCfgDataBin
	187, // 301: ResData.ResGuildShowIDRefreshCfg.CostItem:type_name -> ResData.ResGameItem
	470, // 302: ResData.GuildConf.GuildConstCfg:type_name -> ResData.ResGuildConstCfg
	471, // 303: ResData.GuildConf.GuildJoinLimitCfg:type_name -> ResData.ResGuildJoinLimitCfg
	472, // 304: ResData.GuildConf.GuildLevelCfg:type_name -> ResData.ResGuildLevelCfg
	473, // 305: ResData.GuildConf.GuildShowIDRefreshCfg:type_name -> ResData.ResGuildShowIDRefreshCfg
	474, // 306: ResData.GuildConf.GuildLabelCfg:type_name -> ResData.ResGuildLabelCfg
	475, // 307: ResData.GuildConf.GuildIconCfg:type_name -> ResData.ResGuildIconCfg
	476, // 308: ResData.GuildConf.GuildShowNumberBlackList:type_name -> ResData.ResGuildShowNumberBlackList
	478, // 309: ResData.ResJumpGlobalInfoDataBin.Params:type_name -> ResData.JumpInfo
	487, // 310: ResData.IeDropSubGroup.ConditionGroup:type_name -> ResData.IeDropConditionGroup
	35,  // 311: ResData.ResIeDropScenario.PlayModID:type_name -> ResData.PLAYMOD_TYPE
	488, // 312: ResData.ResIeDropScenario.DropSubItems:type_name -> ResData.IeDropSubGroup
	491, // 313: ResData.LbsConf.AdminAreaCodeCfg:type_name -> ResData.ResAdministrativeCodeDatabin
	492, // 314: ResData.LbsConf.GlobalCodeCfg:type_name -> ResData.ResGlobalCodeDatabin
	501, // 315: ResData.PvpGameConf.AISettleDelay:type_name -> ResData.ResAISettleDetailDelayDataBin
	502, // 316: ResData.LobbyConf.LobbyChartsDataBin:type_name -> ResData.ResLobbyChartsInfoDatabin
	166, // 317: ResData.ResPlayTemplateParam.GridType:type_name -> ResData.ResGridType
	167, // 318: ResData.ResPlayTemplateParam.FormulaAPFunc:type_name -> ResData.ResFormulaAPFunc
	168, // 319: ResData.ResPlayTemplateParam.DamageMpRecoverType:type_name -> ResData.ResDamageMpRecoverType
	533, // 320: ResData.ResPracticeConfig.Equips:type_name -> ResData.ResPracticeConfig.Equip
	510, // 321: ResData.RefTipsCfg.RefTipsConfigs:type_name -> ResData.ResRefTipsConfig
	36,  // 322: ResData.ResLanguageCfg.LanguageRule:type_name -> ResData.GAMELANGUAGE_TYPE
	36,  // 323: ResData.ResDistrictLanguageCfg.LanguageRule:type_name -> ResData.GAMELANGUAGE_TYPE
	37,  // 324: ResData.ResCountryAgreementCfg.AgeConfrimeMethod:type_name -> ResData.AgeAuthentication_Method
	28,  // 325: ResData.ResMNZDepositCardFetterIconCfg.FetterID:type_name -> ResData.RES_RELATIVE_ID
	174, // 326: ResData.ResHomePageShowDataBin.ShowName:type_name -> ResData.ResHomePageShowDataBin.HomePageShowName
	36,  // 327: ResData.ResRegionRulesCfg.LanguageRule:type_name -> ResData.GAMELANGUAGE_TYPE
	517, // 328: ResData.HomePageConf.HomePageShowDataBin:type_name -> ResData.ResHomePageShowDataBin
	170, // 329: ResData.BattleBroadcastDataBin.Type:type_name -> ResData.ResBattleBroadcastType
	522, // 330: ResData.ResRecruitConstDataBin.LineupRecommend:type_name -> ResData.ResDT_LineupRecommend
	525, // 331: ResData.ResDT_RecruitStepUpPresent.PopTipsItem:type_name -> ResData.ResDT_RecruitStepUpPopTipsItem
	524, // 332: ResData.ResRecruitStepDataBin.RankAward:type_name -> ResData.RecruitRankAward
	526, // 333: ResData.ResRecruitStepDataBin.StepUpPresent:type_name -> ResData.ResDT_RecruitStepUpPresent
	534, // 334: ResData.ResRecruitChessAuctionRound.DropInfo:type_name -> ResData.ResDT_AuctionDropInfo
	530, // 335: ResData.ResRecruitTaskDataBin.TaskUnLockCond:type_name -> ResData.RecruitTaskGuideCondInfo
	530, // 336: ResData.ResRecruitTaskDataBin.TaskShowCond:type_name -> ResData.RecruitTaskGuideCondInfo
	530, // 337: ResData.ResRecruitTaskDataBin.TaskFinishCond:type_name -> ResData.RecruitTaskGuideCondInfo
	530, // 338: ResData.ResRecruitTaskDataBin.TaskCloseCond:type_name -> ResData.RecruitTaskGuideCondInfo
	172, // 339: ResData.ResRecruitTaskDataBin.TaskType:type_name -> ResData.CLIENT_TASKTYPE
	523, // 340: ResData.RecruitBattleConf.RecruitConstDataBin:type_name -> ResData.ResRecruitConstDataBin
	527, // 341: ResData.RecruitBattleConf.RecruitStepDataBin:type_name -> ResData.ResRecruitStepDataBin
	531, // 342: ResData.RecruitBattleConf.RecruitTaskDataBin:type_name -> ResData.ResRecruitTaskDataBin
	343, // [343:343] is the sub-list for method output_type
	343, // [343:343] is the sub-list for method input_type
	343, // [343:343] is the sub-list for extension type_name
	343, // [343:343] is the sub-list for extension extendee
	0,   // [0:343] is the sub-list for field type_name
}

func init() { file_os_res_data_proto_init() }
func file_os_res_data_proto_init() {
	if File_os_res_data_proto != nil {
		return
	}
	file_os_res_data_legacy_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_os_res_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResWhiteListCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResBlackListCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WhiteListConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResZoneRegisterCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGlobalTxtInfoCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResMatchPoolCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResMatchRankRangeCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResMatchAIDistribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResMatchStrategyRadiusInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResMatchStrategyCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResAIShowCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGameItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResEnableInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResCommonConstCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResAudioMiscConstCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResPlayMod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResRandNameComb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalMiscConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGameTypeGroupCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGameTypeGrpBelongCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameTypeConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResItemPropCfgDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResMoneyInfoCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResItemShowCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResHeadImgInfoCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResSystemUICfgDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_BGMInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_BGMSwitchTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResBGMCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResHeadInfoCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGiftStrategyCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGiftGuaranteeStrategyDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDropItemCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDropDataCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResLimitInfoCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDropsExcludeRepeatDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResSeasonDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResSeasonRankAwardsDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResInSeasonRankAwardsDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResSeasonRankTaskDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResSeasonGameTypesBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResLanguageText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResSeasonPlayCenterBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResSeasonRankInherit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResSeasonPlayerConditions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResSeasonPlayerConcludingMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeasonConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResTemplateMailDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiLangMailContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGlobalMailDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResMailSysOpt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MailConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResTalkEmojiCfgDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResTalkQuickMsgCfgDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResTalkInsideQuickMsgCfgDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResTalkTypeInfoCfgDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResExpToLevelUpDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResExpBufDatabin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResCondInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGameUnlockDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameUnlockConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResTokenTaskCfgDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResTokenTaskRefreshDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*STTokenEffectInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResTokenSeasonCfgDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResTokenHangupCfgDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResTokenLevelDropInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResTokenLevelAwardDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResRankDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResRankProtectedDatabin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResRankKDatabin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResEloConstDatabin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResBattleAwardDatabin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResScoreCorrectionDatabin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResRankConstDatabin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResRoomRefusePunishDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Res_Chess_Slot_Struct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_ChessModelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_ChessComboInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_ChessFuncInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResChessHeroConfDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResAlternativeSortDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Res_PreEquip_Struct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResEffectCombine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResActiveSkill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResPassiveSkill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LordAIConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AICommunicationItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AIWatchPlayerRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResAICommunicationCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AIAttrScale); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResEquipProp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResPropDisplayDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResEquipDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Res_Fetter_Num_Struct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_ChessGlobalEffectItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_ChessSpecialParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Res_Fetter_Struct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Res_Fetter_Layer_Quality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Res_Fetter_Layer_Icon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetterConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_FetterAudioInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResFetterConfDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResEmbattleSeasonDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResLineupHeroInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResSeasonLineupDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResSeasonLineupThumbnailCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LineupConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDefaultLordInfoConfDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResLordInfoConfDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResLordSkillDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResLordSkillLevelExpGatherConditionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResLordSkillLevelDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResLordSkinDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResLordDetailsItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResLordFilesItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResLordFileDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*STLordQuestionAndAnswerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResLordQuestionAndAnswerDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_LordOutgameAudio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_LordIngameAudio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResLordAudioCfgDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResLordJiBanAudioCfgDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResLordDefaultVoiceCfgDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResLordProficiencySettleDatabin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResLordRankShowInfoDatabin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResLordProficiencyLevelDatabin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LordProficiencyParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResLordPowerCommonDatabin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResLordBattlePointsDatabin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResLordShowScoreDatabin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResLordShowScoreCtrlDatabin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResLordRecentResultsDatabin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResLordPowerRankTitleDatabin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResLordPowerRankMapDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResLordGroupDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LordConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDTLordSelectRound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDTLordSelectAIOpRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResPVPLordSelectModeCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PvpLordSelectConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResSocialFriendTextCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResSocialCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SocialConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResPersonaliseChessboardDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResPersonaliseConstDatabin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResChessboardPartDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResChessboardPartSetDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResCommonIconCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResPersonaliseEmojiDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResPersonaliseSpecialEftDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResPersonaliseTypeDatabin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonaliseConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResChessDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResChessSeasonInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResChessStatisticInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResChessCombInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResChessDecorateDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDecorateCombineResolveData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResCollectionTaskDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChessConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResCommonWealDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResWealTaskDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResWealExchangeDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WealConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResAchieveTaskCfgDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResAchieveTypeCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResAchieveLevelDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AchieveConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_BattleStatePhaseAudio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_BattleStateAudioInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_BossStateAudioInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResSceneAudioCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResSceneCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDefaultQualityBasedOnDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResSOCScoreCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResChartsDatabin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResHundredRankIdxDatabin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResRanklistDatabin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResRanklistSettleDatabin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RanklistConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResChargeDatabin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResCltUploadLogListCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CltLogConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResHeroPropertyIconCfgDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResChessHeroUpgradeAwardDatabin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_NBAIInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_NBPlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResNBCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResNBLevelCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResNBShopCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_NBChessBattlePos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResNBChessBattlePosCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResNBRoundPlayerCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResNBChessHeroUpgradeAwardCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_DynamicGuidePlayerStatusInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDynamicGuidePlanCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_DynamicGuideThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDynamicGuideThresholdCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_DynamicGuideTipCloseConditionItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_DynamicGuideTipPreOperateItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_DynamicGuideTipItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDynamicGuideSingleBpCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_NBHelpUnlockTriggerTimeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResNBHelpConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_NBUINameHintUnlockItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_NBUINameHintFinishItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResNBUINameHintCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDTAIParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*STAIDifficultyChg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResAIDifficultyCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResAIDifficultyChgCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDTWarmScript); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResWarmAIStrategyCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResLordUseWarmScripChgCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResWarmEMAParamCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDTWarmBack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDTWarmEMAStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResWarmAIRuleCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDTStrategyScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResWarmAICondStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResWarmAIStrategyScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResClientAIExtraFlag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WarmAIConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResNewbieGrpDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResNewbieTaskDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewbieConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResTestServerPlayModKeyCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResCardPackCfgDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawCardConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelpSystemTab); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelpSystemPassage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResHelpSystemCfgDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResNBGuideTriggerTimeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResNBGuideTriggerConditionItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResNBGuideMainLineCfgDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_NBGuideIntroducer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResNBGuideIntroduceCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResNBGuideFingureCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vector2D); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_NBTip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_NBFingure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResNBGuideUICfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResNBGuideTipCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResNBGuideTlogCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewbieGuideConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NBAdditionalInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResNBAdditionalDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResNewbieConstDatabin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_TalentWeight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResTalentCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_TalentRebuildParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResTalentRebuild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResTalentQuality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResPlayerTalentSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResPlayerTalentSlotGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResPlayerTalent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResPlayerTalentSkill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResPlayerTalentGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResPlayerTalentMutexGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TalentConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResFormationAttackRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxFightInterest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResMaxFightValueByCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResAIFormationHeroInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[274].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResAIFormations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[275].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResAIFormationFactors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[276].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResWarmBTreeStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[277].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResTriggerCalculateFormation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChessAIThrowCoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[279].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChessAIBuffShopItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[280].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChessAIBuffShop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[281].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResChessAIDifficulty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[282].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResChessAIShopBuff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[283].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResChessAIDCardLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[284].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AIConstLevelConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[285].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResChessAIConst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[286].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResChessAINormalConst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[287].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StSubSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[288].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[289].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonalDisplayInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[290].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResAcknowledgmentsDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[291].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResFreeGroupCfgDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[292].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResFreeCfgDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[293].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FreeConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[294].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResChessManExpInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[295].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGuildConstCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[296].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGuildJoinLimitCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[297].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGuildLevelCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[298].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGuildShowIDRefreshCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[299].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGuildLabelCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[300].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGuildIconCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[301].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGuildShowNumberBlackList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[302].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[303].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JumpInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[304].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResJumpGlobalInfoDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[305].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResProject8BossAwardValueCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[306].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResProject8AwardPerformCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[307].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResProject8BossPresetShowCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[308].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResProject8RelativeRecordCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[309].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResProject8AirdropAwardCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[310].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResProject8AirdropAwardTypeCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[311].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResAirdropAwardLogicGLCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[312].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IeDropConditionGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[313].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IeDropSubGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[314].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResIeDropScenario); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[315].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResIeDropParamCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[316].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResAdministrativeCodeDatabin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[317].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGlobalCodeDatabin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[318].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LbsConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[319].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResBattlePlayerLevelDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[320].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResSystemEntryDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[321].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResLoadingBgCfgDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[322].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResLoadingTextCfgDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[323].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResLoadingBgImageCfgDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[324].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResQtsPackageConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[325].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PvpGameConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[326].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResAISettleDetailDelayDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[327].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResLobbyChartsInfoDatabin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[328].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResLobbySystemEntryCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[329].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LobbyRankShowIndexCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[330].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LobbyConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[331].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResPlayTemplateParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[332].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResCurrencyRarityCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[333].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResPracticeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[334].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResAndroidDeviceUICfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[335].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResRefTipsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[336].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefTipsCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[337].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResLanguageCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[338].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDistrictLanguageCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[339].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResCountryAgreementCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[340].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResLordExclusiveSkillConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[341].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResMNZDepositCardFetterIconCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[342].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResHomePageShowDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[343].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResRegionRulesCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[344].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomePageConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[345].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleBroadcastDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[346].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResRecruitBattleRoundExtCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[347].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_LineupRecommend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[348].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResRecruitConstDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[349].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecruitRankAward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[350].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_RecruitStepUpPopTipsItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[351].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_RecruitStepUpPresent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[352].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResRecruitStepDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[353].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResRecruitBanHeroCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[354].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResRecruitChessAuctionRound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[355].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecruitTaskGuideCondInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[356].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResRecruitTaskDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[357].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecruitBattleConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_proto_msgTypes[358].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResPracticeConfig_Equip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_os_res_data_proto_rawDesc,
			NumEnums:      175,
			NumMessages:   359,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_os_res_data_proto_goTypes,
		DependencyIndexes: file_os_res_data_proto_depIdxs,
		EnumInfos:         file_os_res_data_proto_enumTypes,
		MessageInfos:      file_os_res_data_proto_msgTypes,
	}.Build()
	File_os_res_data_proto = out.File
	file_os_res_data_proto_rawDesc = nil
	file_os_res_data_proto_goTypes = nil
	file_os_res_data_proto_depIdxs = nil
}
