// THIS FILE IS AUTOMATIC GENERATED BY REFLECT TOOL
// DO NOT MODIFY THIS FILE MANUALLY

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.9
// source: os_res_data_legacy.proto

package resdata

import (
	_ "git.woa.com/bingo/bingo/codegenerator/option"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "osgame/model/osserver/proto/osproto"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RES_PROJECT8_DROP_ITEM_TYPE int32

const (
	RES_PROJECT8_DROP_ITEM_TYPE_RES_PROJECT8_DROP_ITEM_TYPE_NULL           RES_PROJECT8_DROP_ITEM_TYPE = 0
	RES_PROJECT8_DROP_ITEM_TYPE_RES_PROJECT8_DROP_ITEM_TYPE_HERO           RES_PROJECT8_DROP_ITEM_TYPE = 1
	RES_PROJECT8_DROP_ITEM_TYPE_RES_PROJECT8_DROP_ITEM_TYPE_EQUIP          RES_PROJECT8_DROP_ITEM_TYPE = 2
	RES_PROJECT8_DROP_ITEM_TYPE_RES_PROJECT8_DROP_ITEM_TYPE_COIN           RES_PROJECT8_DROP_ITEM_TYPE = 3
	RES_PROJECT8_DROP_ITEM_TYPE_RES_PROJECT8_DROP_ITEM_TYPE_HERO_AND_EQUIP RES_PROJECT8_DROP_ITEM_TYPE = 4
	RES_PROJECT8_DROP_ITEM_TYPE_RES_PROJECT8_DROP_ITEM_TYPE_TALENT         RES_PROJECT8_DROP_ITEM_TYPE = 5
	RES_PROJECT8_DROP_ITEM_TYPE_RES_PROJECT8_DROP_ITEM_TYPE_LOGIC_GL       RES_PROJECT8_DROP_ITEM_TYPE = 6
	RES_PROJECT8_DROP_ITEM_TYPE_RES_PROJECT8_DROP_ITEM_TYPE_PLAYER_HP      RES_PROJECT8_DROP_ITEM_TYPE = 7
)

// Enum value maps for RES_PROJECT8_DROP_ITEM_TYPE.
var (
	RES_PROJECT8_DROP_ITEM_TYPE_name = map[int32]string{
		0: "RES_PROJECT8_DROP_ITEM_TYPE_NULL",
		1: "RES_PROJECT8_DROP_ITEM_TYPE_HERO",
		2: "RES_PROJECT8_DROP_ITEM_TYPE_EQUIP",
		3: "RES_PROJECT8_DROP_ITEM_TYPE_COIN",
		4: "RES_PROJECT8_DROP_ITEM_TYPE_HERO_AND_EQUIP",
		5: "RES_PROJECT8_DROP_ITEM_TYPE_TALENT",
		6: "RES_PROJECT8_DROP_ITEM_TYPE_LOGIC_GL",
		7: "RES_PROJECT8_DROP_ITEM_TYPE_PLAYER_HP",
	}
	RES_PROJECT8_DROP_ITEM_TYPE_value = map[string]int32{
		"RES_PROJECT8_DROP_ITEM_TYPE_NULL":           0,
		"RES_PROJECT8_DROP_ITEM_TYPE_HERO":           1,
		"RES_PROJECT8_DROP_ITEM_TYPE_EQUIP":          2,
		"RES_PROJECT8_DROP_ITEM_TYPE_COIN":           3,
		"RES_PROJECT8_DROP_ITEM_TYPE_HERO_AND_EQUIP": 4,
		"RES_PROJECT8_DROP_ITEM_TYPE_TALENT":         5,
		"RES_PROJECT8_DROP_ITEM_TYPE_LOGIC_GL":       6,
		"RES_PROJECT8_DROP_ITEM_TYPE_PLAYER_HP":      7,
	}
)

func (x RES_PROJECT8_DROP_ITEM_TYPE) Enum() *RES_PROJECT8_DROP_ITEM_TYPE {
	p := new(RES_PROJECT8_DROP_ITEM_TYPE)
	*p = x
	return p
}

func (x RES_PROJECT8_DROP_ITEM_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_PROJECT8_DROP_ITEM_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_legacy_proto_enumTypes[0].Descriptor()
}

func (RES_PROJECT8_DROP_ITEM_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_legacy_proto_enumTypes[0]
}

func (x RES_PROJECT8_DROP_ITEM_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_PROJECT8_DROP_ITEM_TYPE.Descriptor instead.
func (RES_PROJECT8_DROP_ITEM_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{0}
}

type RES_RoundFunction int32

const (
	RES_RoundFunction_ROUNDFUNCTIONN_NULL RES_RoundFunction = 0
	RES_RoundFunction_ROUND_START         RES_RoundFunction = 1
	RES_RoundFunction_ROUND_TALENT        RES_RoundFunction = 2
	RES_RoundFunction_ROUND_RELEASE       RES_RoundFunction = 3
	RES_RoundFunction_ROUND_AUCTION       RES_RoundFunction = 4
	RES_RoundFunction_ROUND_MONSTER       RES_RoundFunction = 5
	RES_RoundFunction_ROUND_FIGHT         RES_RoundFunction = 6
	RES_RoundFunction_ROUND_POPULATION    RES_RoundFunction = 7
	RES_RoundFunction_ROUNDFUNCTIONN_MAX  RES_RoundFunction = 8
)

// Enum value maps for RES_RoundFunction.
var (
	RES_RoundFunction_name = map[int32]string{
		0: "ROUNDFUNCTIONN_NULL",
		1: "ROUND_START",
		2: "ROUND_TALENT",
		3: "ROUND_RELEASE",
		4: "ROUND_AUCTION",
		5: "ROUND_MONSTER",
		6: "ROUND_FIGHT",
		7: "ROUND_POPULATION",
		8: "ROUNDFUNCTIONN_MAX",
	}
	RES_RoundFunction_value = map[string]int32{
		"ROUNDFUNCTIONN_NULL": 0,
		"ROUND_START":         1,
		"ROUND_TALENT":        2,
		"ROUND_RELEASE":       3,
		"ROUND_AUCTION":       4,
		"ROUND_MONSTER":       5,
		"ROUND_FIGHT":         6,
		"ROUND_POPULATION":    7,
		"ROUNDFUNCTIONN_MAX":  8,
	}
)

func (x RES_RoundFunction) Enum() *RES_RoundFunction {
	p := new(RES_RoundFunction)
	*p = x
	return p
}

func (x RES_RoundFunction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_RoundFunction) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_legacy_proto_enumTypes[1].Descriptor()
}

func (RES_RoundFunction) Type() protoreflect.EnumType {
	return &file_os_res_data_legacy_proto_enumTypes[1]
}

func (x RES_RoundFunction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_RoundFunction.Descriptor instead.
func (RES_RoundFunction) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{1}
}

type RES_Massive_Treasure_TYPE int32

const (
	RES_Massive_Treasure_TYPE_RES_Massive_Treasure_NULL      RES_Massive_Treasure_TYPE = 0
	RES_Massive_Treasure_TYPE_RES_Massive_Treasure_Optional  RES_Massive_Treasure_TYPE = 1
	RES_Massive_Treasure_TYPE_RES_Massive_Treasure_After     RES_Massive_Treasure_TYPE = 2
	RES_Massive_Treasure_TYPE_RES_Massive_Treasure_Pay       RES_Massive_Treasure_TYPE = 3
	RES_Massive_Treasure_TYPE_RES_Massive_Treasure_Heritage  RES_Massive_Treasure_TYPE = 4
	RES_Massive_Treasure_TYPE_RES_Massive_Treasure_Condition RES_Massive_Treasure_TYPE = 5
)

// Enum value maps for RES_Massive_Treasure_TYPE.
var (
	RES_Massive_Treasure_TYPE_name = map[int32]string{
		0: "RES_Massive_Treasure_NULL",
		1: "RES_Massive_Treasure_Optional",
		2: "RES_Massive_Treasure_After",
		3: "RES_Massive_Treasure_Pay",
		4: "RES_Massive_Treasure_Heritage",
		5: "RES_Massive_Treasure_Condition",
	}
	RES_Massive_Treasure_TYPE_value = map[string]int32{
		"RES_Massive_Treasure_NULL":      0,
		"RES_Massive_Treasure_Optional":  1,
		"RES_Massive_Treasure_After":     2,
		"RES_Massive_Treasure_Pay":       3,
		"RES_Massive_Treasure_Heritage":  4,
		"RES_Massive_Treasure_Condition": 5,
	}
)

func (x RES_Massive_Treasure_TYPE) Enum() *RES_Massive_Treasure_TYPE {
	p := new(RES_Massive_Treasure_TYPE)
	*p = x
	return p
}

func (x RES_Massive_Treasure_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_Massive_Treasure_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_legacy_proto_enumTypes[2].Descriptor()
}

func (RES_Massive_Treasure_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_legacy_proto_enumTypes[2]
}

func (x RES_Massive_Treasure_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_Massive_Treasure_TYPE.Descriptor instead.
func (RES_Massive_Treasure_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{2}
}

type RES_Massive_Treasure_Child_TYPE int32

const (
	RES_Massive_Treasure_Child_TYPE_RES_Massive_Treasure_Child_Null             RES_Massive_Treasure_Child_TYPE = 0
	RES_Massive_Treasure_Child_TYPE_RES_Massive_Treasure_Child_Condition_Change RES_Massive_Treasure_Child_TYPE = 1
	RES_Massive_Treasure_Child_TYPE_RES_Massive_Treasure_Child_Progressive      RES_Massive_Treasure_Child_TYPE = 2
	RES_Massive_Treasure_Child_TYPE_RES_Massive_Treasure_Child_Heritage         RES_Massive_Treasure_Child_TYPE = 3
)

// Enum value maps for RES_Massive_Treasure_Child_TYPE.
var (
	RES_Massive_Treasure_Child_TYPE_name = map[int32]string{
		0: "RES_Massive_Treasure_Child_Null",
		1: "RES_Massive_Treasure_Child_Condition_Change",
		2: "RES_Massive_Treasure_Child_Progressive",
		3: "RES_Massive_Treasure_Child_Heritage",
	}
	RES_Massive_Treasure_Child_TYPE_value = map[string]int32{
		"RES_Massive_Treasure_Child_Null":             0,
		"RES_Massive_Treasure_Child_Condition_Change": 1,
		"RES_Massive_Treasure_Child_Progressive":      2,
		"RES_Massive_Treasure_Child_Heritage":         3,
	}
)

func (x RES_Massive_Treasure_Child_TYPE) Enum() *RES_Massive_Treasure_Child_TYPE {
	p := new(RES_Massive_Treasure_Child_TYPE)
	*p = x
	return p
}

func (x RES_Massive_Treasure_Child_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_Massive_Treasure_Child_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_legacy_proto_enumTypes[3].Descriptor()
}

func (RES_Massive_Treasure_Child_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_data_legacy_proto_enumTypes[3]
}

func (x RES_Massive_Treasure_Child_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_Massive_Treasure_Child_TYPE.Descriptor instead.
func (RES_Massive_Treasure_Child_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{3}
}

type ResProject8AwardInfo_AwardLevelType int32

const (
	ResProject8AwardInfo_AwardLevelType_Default ResProject8AwardInfo_AwardLevelType = 0
	ResProject8AwardInfo_AwardLevelType_1       ResProject8AwardInfo_AwardLevelType = 1
	ResProject8AwardInfo_AwardLevelType_2       ResProject8AwardInfo_AwardLevelType = 2
	ResProject8AwardInfo_AwardLevelType_3       ResProject8AwardInfo_AwardLevelType = 3
	ResProject8AwardInfo_AwardLevelType_4       ResProject8AwardInfo_AwardLevelType = 4
)

// Enum value maps for ResProject8AwardInfo_AwardLevelType.
var (
	ResProject8AwardInfo_AwardLevelType_name = map[int32]string{
		0: "AwardLevelType_Default",
		1: "AwardLevelType_1",
		2: "AwardLevelType_2",
		3: "AwardLevelType_3",
		4: "AwardLevelType_4",
	}
	ResProject8AwardInfo_AwardLevelType_value = map[string]int32{
		"AwardLevelType_Default": 0,
		"AwardLevelType_1":       1,
		"AwardLevelType_2":       2,
		"AwardLevelType_3":       3,
		"AwardLevelType_4":       4,
	}
)

func (x ResProject8AwardInfo_AwardLevelType) Enum() *ResProject8AwardInfo_AwardLevelType {
	p := new(ResProject8AwardInfo_AwardLevelType)
	*p = x
	return p
}

func (x ResProject8AwardInfo_AwardLevelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResProject8AwardInfo_AwardLevelType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_legacy_proto_enumTypes[4].Descriptor()
}

func (ResProject8AwardInfo_AwardLevelType) Type() protoreflect.EnumType {
	return &file_os_res_data_legacy_proto_enumTypes[4]
}

func (x ResProject8AwardInfo_AwardLevelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResProject8AwardInfo_AwardLevelType.Descriptor instead.
func (ResProject8AwardInfo_AwardLevelType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{110, 0}
}

type ResRoundStateFlow_RoundStageType int32

const (
	ResRoundStateFlow_RoundStageType_Warmup   ResRoundStateFlow_RoundStageType = 0
	ResRoundStateFlow_RoundStageType_Progress ResRoundStateFlow_RoundStageType = 1
	ResRoundStateFlow_RoundStageType_Duel     ResRoundStateFlow_RoundStageType = 2
	ResRoundStateFlow_RoundStageType_Final    ResRoundStateFlow_RoundStageType = 3
)

// Enum value maps for ResRoundStateFlow_RoundStageType.
var (
	ResRoundStateFlow_RoundStageType_name = map[int32]string{
		0: "RoundStageType_Warmup",
		1: "RoundStageType_Progress",
		2: "RoundStageType_Duel",
		3: "RoundStageType_Final",
	}
	ResRoundStateFlow_RoundStageType_value = map[string]int32{
		"RoundStageType_Warmup":   0,
		"RoundStageType_Progress": 1,
		"RoundStageType_Duel":     2,
		"RoundStageType_Final":    3,
	}
)

func (x ResRoundStateFlow_RoundStageType) Enum() *ResRoundStateFlow_RoundStageType {
	p := new(ResRoundStateFlow_RoundStageType)
	*p = x
	return p
}

func (x ResRoundStateFlow_RoundStageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResRoundStateFlow_RoundStageType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_legacy_proto_enumTypes[5].Descriptor()
}

func (ResRoundStateFlow_RoundStageType) Type() protoreflect.EnumType {
	return &file_os_res_data_legacy_proto_enumTypes[5]
}

func (x ResRoundStateFlow_RoundStageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResRoundStateFlow_RoundStageType.Descriptor instead.
func (ResRoundStateFlow_RoundStageType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{131, 0}
}

type ResDT_LevelCommonInfo_SettleRuleType int32

const (
	ResDT_LevelCommonInfo_SettleRuleType_GAMERESULT ResDT_LevelCommonInfo_SettleRuleType = 0
	ResDT_LevelCommonInfo_SettleRuleType_RANK       ResDT_LevelCommonInfo_SettleRuleType = 1
	ResDT_LevelCommonInfo_SettleRuleType_LAST       ResDT_LevelCommonInfo_SettleRuleType = 2
)

// Enum value maps for ResDT_LevelCommonInfo_SettleRuleType.
var (
	ResDT_LevelCommonInfo_SettleRuleType_name = map[int32]string{
		0: "SettleRuleType_GAMERESULT",
		1: "SettleRuleType_RANK",
		2: "SettleRuleType_LAST",
	}
	ResDT_LevelCommonInfo_SettleRuleType_value = map[string]int32{
		"SettleRuleType_GAMERESULT": 0,
		"SettleRuleType_RANK":       1,
		"SettleRuleType_LAST":       2,
	}
)

func (x ResDT_LevelCommonInfo_SettleRuleType) Enum() *ResDT_LevelCommonInfo_SettleRuleType {
	p := new(ResDT_LevelCommonInfo_SettleRuleType)
	*p = x
	return p
}

func (x ResDT_LevelCommonInfo_SettleRuleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResDT_LevelCommonInfo_SettleRuleType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_legacy_proto_enumTypes[6].Descriptor()
}

func (ResDT_LevelCommonInfo_SettleRuleType) Type() protoreflect.EnumType {
	return &file_os_res_data_legacy_proto_enumTypes[6]
}

func (x ResDT_LevelCommonInfo_SettleRuleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResDT_LevelCommonInfo_SettleRuleType.Descriptor instead.
func (ResDT_LevelCommonInfo_SettleRuleType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{136, 0}
}

type ResPlayConstParam_KeyType int32

const (
	ResPlayConstParam_KeyType_NULL                                       ResPlayConstParam_KeyType = 0
	ResPlayConstParam_KeyType_WIN_COIN                                   ResPlayConstParam_KeyType = 1
	ResPlayConstParam_KeyType_COIN_INTEREST_DEVISION_NUM                 ResPlayConstParam_KeyType = 2
	ResPlayConstParam_KeyType_COIN_INTEREST_1                            ResPlayConstParam_KeyType = 3
	ResPlayConstParam_KeyType_COIN_INTEREST_2                            ResPlayConstParam_KeyType = 4
	ResPlayConstParam_KeyType_COIN_INTEREST_3                            ResPlayConstParam_KeyType = 5
	ResPlayConstParam_KeyType_COIN_INTEREST_4                            ResPlayConstParam_KeyType = 6
	ResPlayConstParam_KeyType_COIN_INTEREST_5                            ResPlayConstParam_KeyType = 7
	ResPlayConstParam_KeyType_OVER_TIME_BUFF1                            ResPlayConstParam_KeyType = 8
	ResPlayConstParam_KeyType_OVER_TIME_BUFF2                            ResPlayConstParam_KeyType = 9
	ResPlayConstParam_KeyType_PLAYER_MAX_BASE_LEVEL                      ResPlayConstParam_KeyType = 20
	ResPlayConstParam_KeyType_HUAMULAN_UNIT_ID_1                         ResPlayConstParam_KeyType = 28
	ResPlayConstParam_KeyType_HUAMULAN_UNIT_ID_2                         ResPlayConstParam_KeyType = 29
	ResPlayConstParam_KeyType_HUAMULAN_UNIT_BUFF_1                       ResPlayConstParam_KeyType = 30
	ResPlayConstParam_KeyType_HUAMULAN_UNIT_BUFF_2                       ResPlayConstParam_KeyType = 31
	ResPlayConstParam_KeyType_MP_MIN_VALUE                               ResPlayConstParam_KeyType = 32
	ResPlayConstParam_KeyType_BATTLE_Relative_Element_RANDOM_EFFECT_NUM  ResPlayConstParam_KeyType = 33
	ResPlayConstParam_KeyType_PROJ8_BUY_EXP_ONCE                         ResPlayConstParam_KeyType = 34
	ResPlayConstParam_KeyType_PROJ8_AUCTION_ADD_TIME                     ResPlayConstParam_KeyType = 35
	ResPlayConstParam_KeyType_TALENT_REBUILD_HP                          ResPlayConstParam_KeyType = 36
	ResPlayConstParam_KeyType_TALENT_REBUILD_COUNT                       ResPlayConstParam_KeyType = 37
	ResPlayConstParam_KeyType_TD_REGENERATE_SHOW_CARD_LIST_COST          ResPlayConstParam_KeyType = 38
	ResPlayConstParam_KeyType_SANFEN_UNIT_BUFF_1                         ResPlayConstParam_KeyType = 39
	ResPlayConstParam_KeyType_SANFEN_UNIT_BUFF_2                         ResPlayConstParam_KeyType = 40
	ResPlayConstParam_KeyType_SANFEN_UNIT_BUFF_3                         ResPlayConstParam_KeyType = 41
	ResPlayConstParam_KeyType_SANFEN_UNIT_BUFF_4                         ResPlayConstParam_KeyType = 42
	ResPlayConstParam_KeyType_SANFEN_UNIT_ID_1                           ResPlayConstParam_KeyType = 43
	ResPlayConstParam_KeyType_SANFEN_UNIT_ID_2                           ResPlayConstParam_KeyType = 44
	ResPlayConstParam_KeyType_SANFEN_UNIT_ID_3                           ResPlayConstParam_KeyType = 45
	ResPlayConstParam_KeyType_SANFEN_UNIT_ID_4                           ResPlayConstParam_KeyType = 46
	ResPlayConstParam_KeyType_PROJ8_LORD_AWARD_EXHIBITION_PORTRAIT_DELAY ResPlayConstParam_KeyType = 50
	ResPlayConstParam_KeyType_PROJ8_LORD_AWARD_EXHIBITION_AWARD_DELAY    ResPlayConstParam_KeyType = 51
	ResPlayConstParam_KeyType_PROJ8_LORD_AWARD_EXHIBITION_INTERVAL       ResPlayConstParam_KeyType = 52
	ResPlayConstParam_KeyType_PROJ8_LORD_AWARD_ANNOUNCE_DELAY            ResPlayConstParam_KeyType = 53
	ResPlayConstParam_KeyType_PROJ8_LORD_AWARD_ANNOUNCE_TIME             ResPlayConstParam_KeyType = 54
	ResPlayConstParam_KeyType_PROJ8_EXCHANGE_MAX_CARD_COUNT              ResPlayConstParam_KeyType = 55
	ResPlayConstParam_KeyType_PROJ8_EXCHANGE_CHOOSE_CARD_COUNT           ResPlayConstParam_KeyType = 56
	ResPlayConstParam_KeyType_PROJ8_EXCHANGE_CHOOSE_CARD_DURATION        ResPlayConstParam_KeyType = 57
	ResPlayConstParam_KeyType_PROJ8_EXCHANGE_LOCK_CARD_DURATION          ResPlayConstParam_KeyType = 58
	ResPlayConstParam_KeyType_PROJ8_BOSS_SCENE_ID                        ResPlayConstParam_KeyType = 59
	ResPlayConstParam_KeyType_PROJ8_MATCH_DATA_TYPE                      ResPlayConstParam_KeyType = 60
	ResPlayConstParam_KeyType_EACH_ROUND_FIRST_REPICK_CARD_BASE_COST     ResPlayConstParam_KeyType = 62
	ResPlayConstParam_KeyType_EACH_ROUND_REPICK_CARD_BASE_COST           ResPlayConstParam_KeyType = 63
	ResPlayConstParam_KeyType_TEMPLATE_ID                                ResPlayConstParam_KeyType = 64
	ResPlayConstParam_KeyType_DESIGN_SCENE_ID                            ResPlayConstParam_KeyType = 65
	ResPlayConstParam_KeyType_BALANCETEST_WUKONG_BUFF_COUNT1             ResPlayConstParam_KeyType = 66
	ResPlayConstParam_KeyType_BALANCETEST_WUKONG_BUFF_COUNT2             ResPlayConstParam_KeyType = 67
	ResPlayConstParam_KeyType_BALANCETEST_BAJIE_BUFF_COUNT1              ResPlayConstParam_KeyType = 68
	ResPlayConstParam_KeyType_BALANCETEST_BAJIE_BUFF_COUNT2              ResPlayConstParam_KeyType = 69
	ResPlayConstParam_KeyType_BALANCETEST_BAJIE_BUFF_COUNT3              ResPlayConstParam_KeyType = 70
	ResPlayConstParam_KeyType_DRAG_HEIGHT1                               ResPlayConstParam_KeyType = 71
	ResPlayConstParam_KeyType_DRAG_HEIGHT2                               ResPlayConstParam_KeyType = 72
	ResPlayConstParam_KeyType_DRAG_RADIUS1                               ResPlayConstParam_KeyType = 73
	ResPlayConstParam_KeyType_DRAG_RADIUS2                               ResPlayConstParam_KeyType = 74
	ResPlayConstParam_KeyType_RULER_EQUIP_RANDOM_NUM                     ResPlayConstParam_KeyType = 75
	ResPlayConstParam_KeyType_DEPOSIT_CARD_CLEAR_COUNTDOWN_TIME          ResPlayConstParam_KeyType = 76
	ResPlayConstParam_KeyType_AUCTION_RAISE_CD_TIME                      ResPlayConstParam_KeyType = 77
	ResPlayConstParam_KeyType_EQUIP_HUANHUALINGPAI_CHANGE_COUNT          ResPlayConstParam_KeyType = 78
	ResPlayConstParam_KeyType_EQUIP_HUANHUALINGPAI_START_SELECT_COUNT    ResPlayConstParam_KeyType = 79
	ResPlayConstParam_KeyType_SHARED_ALTERNATIVE_SLOT_COUNT              ResPlayConstParam_KeyType = 80
	ResPlayConstParam_KeyType_ALTERNATIVE_SLOT_COUNT                     ResPlayConstParam_KeyType = 81
	ResPlayConstParam_KeyType_SPECIAL_CARD_POOL_OFFSET                   ResPlayConstParam_KeyType = 82
	ResPlayConstParam_KeyType_LORD_HP                                    ResPlayConstParam_KeyType = 83
	ResPlayConstParam_KeyType_SANFEN_1AREA                               ResPlayConstParam_KeyType = 84
	ResPlayConstParam_KeyType_SANFEN_2AREA                               ResPlayConstParam_KeyType = 85
	ResPlayConstParam_KeyType_SANFEN_3AREA                               ResPlayConstParam_KeyType = 86
	ResPlayConstParam_KeyType_CHANGAN_GET_CHANGAN_COIN_BUFF              ResPlayConstParam_KeyType = 87
)

// Enum value maps for ResPlayConstParam_KeyType.
var (
	ResPlayConstParam_KeyType_name = map[int32]string{
		0:  "KeyType_NULL",
		1:  "KeyType_WIN_COIN",
		2:  "KeyType_COIN_INTEREST_DEVISION_NUM",
		3:  "KeyType_COIN_INTEREST_1",
		4:  "KeyType_COIN_INTEREST_2",
		5:  "KeyType_COIN_INTEREST_3",
		6:  "KeyType_COIN_INTEREST_4",
		7:  "KeyType_COIN_INTEREST_5",
		8:  "KeyType_OVER_TIME_BUFF1",
		9:  "KeyType_OVER_TIME_BUFF2",
		20: "KeyType_PLAYER_MAX_BASE_LEVEL",
		28: "KeyType_HUAMULAN_UNIT_ID_1",
		29: "KeyType_HUAMULAN_UNIT_ID_2",
		30: "KeyType_HUAMULAN_UNIT_BUFF_1",
		31: "KeyType_HUAMULAN_UNIT_BUFF_2",
		32: "KeyType_MP_MIN_VALUE",
		33: "KeyType_BATTLE_Relative_Element_RANDOM_EFFECT_NUM",
		34: "KeyType_PROJ8_BUY_EXP_ONCE",
		35: "KeyType_PROJ8_AUCTION_ADD_TIME",
		36: "KeyType_TALENT_REBUILD_HP",
		37: "KeyType_TALENT_REBUILD_COUNT",
		38: "KeyType_TD_REGENERATE_SHOW_CARD_LIST_COST",
		39: "KeyType_SANFEN_UNIT_BUFF_1",
		40: "KeyType_SANFEN_UNIT_BUFF_2",
		41: "KeyType_SANFEN_UNIT_BUFF_3",
		42: "KeyType_SANFEN_UNIT_BUFF_4",
		43: "KeyType_SANFEN_UNIT_ID_1",
		44: "KeyType_SANFEN_UNIT_ID_2",
		45: "KeyType_SANFEN_UNIT_ID_3",
		46: "KeyType_SANFEN_UNIT_ID_4",
		50: "KeyType_PROJ8_LORD_AWARD_EXHIBITION_PORTRAIT_DELAY",
		51: "KeyType_PROJ8_LORD_AWARD_EXHIBITION_AWARD_DELAY",
		52: "KeyType_PROJ8_LORD_AWARD_EXHIBITION_INTERVAL",
		53: "KeyType_PROJ8_LORD_AWARD_ANNOUNCE_DELAY",
		54: "KeyType_PROJ8_LORD_AWARD_ANNOUNCE_TIME",
		55: "KeyType_PROJ8_EXCHANGE_MAX_CARD_COUNT",
		56: "KeyType_PROJ8_EXCHANGE_CHOOSE_CARD_COUNT",
		57: "KeyType_PROJ8_EXCHANGE_CHOOSE_CARD_DURATION",
		58: "KeyType_PROJ8_EXCHANGE_LOCK_CARD_DURATION",
		59: "KeyType_PROJ8_BOSS_SCENE_ID",
		60: "KeyType_PROJ8_MATCH_DATA_TYPE",
		62: "KeyType_EACH_ROUND_FIRST_REPICK_CARD_BASE_COST",
		63: "KeyType_EACH_ROUND_REPICK_CARD_BASE_COST",
		64: "KeyType_TEMPLATE_ID",
		65: "KeyType_DESIGN_SCENE_ID",
		66: "KeyType_BALANCETEST_WUKONG_BUFF_COUNT1",
		67: "KeyType_BALANCETEST_WUKONG_BUFF_COUNT2",
		68: "KeyType_BALANCETEST_BAJIE_BUFF_COUNT1",
		69: "KeyType_BALANCETEST_BAJIE_BUFF_COUNT2",
		70: "KeyType_BALANCETEST_BAJIE_BUFF_COUNT3",
		71: "KeyType_DRAG_HEIGHT1",
		72: "KeyType_DRAG_HEIGHT2",
		73: "KeyType_DRAG_RADIUS1",
		74: "KeyType_DRAG_RADIUS2",
		75: "KeyType_RULER_EQUIP_RANDOM_NUM",
		76: "KeyType_DEPOSIT_CARD_CLEAR_COUNTDOWN_TIME",
		77: "KeyType_AUCTION_RAISE_CD_TIME",
		78: "KeyType_EQUIP_HUANHUALINGPAI_CHANGE_COUNT",
		79: "KeyType_EQUIP_HUANHUALINGPAI_START_SELECT_COUNT",
		80: "KeyType_SHARED_ALTERNATIVE_SLOT_COUNT",
		81: "KeyType_ALTERNATIVE_SLOT_COUNT",
		82: "KeyType_SPECIAL_CARD_POOL_OFFSET",
		83: "KeyType_LORD_HP",
		84: "KeyType_SANFEN_1AREA",
		85: "KeyType_SANFEN_2AREA",
		86: "KeyType_SANFEN_3AREA",
		87: "KeyType_CHANGAN_GET_CHANGAN_COIN_BUFF",
	}
	ResPlayConstParam_KeyType_value = map[string]int32{
		"KeyType_NULL":                                       0,
		"KeyType_WIN_COIN":                                   1,
		"KeyType_COIN_INTEREST_DEVISION_NUM":                 2,
		"KeyType_COIN_INTEREST_1":                            3,
		"KeyType_COIN_INTEREST_2":                            4,
		"KeyType_COIN_INTEREST_3":                            5,
		"KeyType_COIN_INTEREST_4":                            6,
		"KeyType_COIN_INTEREST_5":                            7,
		"KeyType_OVER_TIME_BUFF1":                            8,
		"KeyType_OVER_TIME_BUFF2":                            9,
		"KeyType_PLAYER_MAX_BASE_LEVEL":                      20,
		"KeyType_HUAMULAN_UNIT_ID_1":                         28,
		"KeyType_HUAMULAN_UNIT_ID_2":                         29,
		"KeyType_HUAMULAN_UNIT_BUFF_1":                       30,
		"KeyType_HUAMULAN_UNIT_BUFF_2":                       31,
		"KeyType_MP_MIN_VALUE":                               32,
		"KeyType_BATTLE_Relative_Element_RANDOM_EFFECT_NUM":  33,
		"KeyType_PROJ8_BUY_EXP_ONCE":                         34,
		"KeyType_PROJ8_AUCTION_ADD_TIME":                     35,
		"KeyType_TALENT_REBUILD_HP":                          36,
		"KeyType_TALENT_REBUILD_COUNT":                       37,
		"KeyType_TD_REGENERATE_SHOW_CARD_LIST_COST":          38,
		"KeyType_SANFEN_UNIT_BUFF_1":                         39,
		"KeyType_SANFEN_UNIT_BUFF_2":                         40,
		"KeyType_SANFEN_UNIT_BUFF_3":                         41,
		"KeyType_SANFEN_UNIT_BUFF_4":                         42,
		"KeyType_SANFEN_UNIT_ID_1":                           43,
		"KeyType_SANFEN_UNIT_ID_2":                           44,
		"KeyType_SANFEN_UNIT_ID_3":                           45,
		"KeyType_SANFEN_UNIT_ID_4":                           46,
		"KeyType_PROJ8_LORD_AWARD_EXHIBITION_PORTRAIT_DELAY": 50,
		"KeyType_PROJ8_LORD_AWARD_EXHIBITION_AWARD_DELAY":    51,
		"KeyType_PROJ8_LORD_AWARD_EXHIBITION_INTERVAL":       52,
		"KeyType_PROJ8_LORD_AWARD_ANNOUNCE_DELAY":            53,
		"KeyType_PROJ8_LORD_AWARD_ANNOUNCE_TIME":             54,
		"KeyType_PROJ8_EXCHANGE_MAX_CARD_COUNT":              55,
		"KeyType_PROJ8_EXCHANGE_CHOOSE_CARD_COUNT":           56,
		"KeyType_PROJ8_EXCHANGE_CHOOSE_CARD_DURATION":        57,
		"KeyType_PROJ8_EXCHANGE_LOCK_CARD_DURATION":          58,
		"KeyType_PROJ8_BOSS_SCENE_ID":                        59,
		"KeyType_PROJ8_MATCH_DATA_TYPE":                      60,
		"KeyType_EACH_ROUND_FIRST_REPICK_CARD_BASE_COST":     62,
		"KeyType_EACH_ROUND_REPICK_CARD_BASE_COST":           63,
		"KeyType_TEMPLATE_ID":                                64,
		"KeyType_DESIGN_SCENE_ID":                            65,
		"KeyType_BALANCETEST_WUKONG_BUFF_COUNT1":             66,
		"KeyType_BALANCETEST_WUKONG_BUFF_COUNT2":             67,
		"KeyType_BALANCETEST_BAJIE_BUFF_COUNT1":              68,
		"KeyType_BALANCETEST_BAJIE_BUFF_COUNT2":              69,
		"KeyType_BALANCETEST_BAJIE_BUFF_COUNT3":              70,
		"KeyType_DRAG_HEIGHT1":                               71,
		"KeyType_DRAG_HEIGHT2":                               72,
		"KeyType_DRAG_RADIUS1":                               73,
		"KeyType_DRAG_RADIUS2":                               74,
		"KeyType_RULER_EQUIP_RANDOM_NUM":                     75,
		"KeyType_DEPOSIT_CARD_CLEAR_COUNTDOWN_TIME":          76,
		"KeyType_AUCTION_RAISE_CD_TIME":                      77,
		"KeyType_EQUIP_HUANHUALINGPAI_CHANGE_COUNT":          78,
		"KeyType_EQUIP_HUANHUALINGPAI_START_SELECT_COUNT":    79,
		"KeyType_SHARED_ALTERNATIVE_SLOT_COUNT":              80,
		"KeyType_ALTERNATIVE_SLOT_COUNT":                     81,
		"KeyType_SPECIAL_CARD_POOL_OFFSET":                   82,
		"KeyType_LORD_HP":                                    83,
		"KeyType_SANFEN_1AREA":                               84,
		"KeyType_SANFEN_2AREA":                               85,
		"KeyType_SANFEN_3AREA":                               86,
		"KeyType_CHANGAN_GET_CHANGAN_COIN_BUFF":              87,
	}
)

func (x ResPlayConstParam_KeyType) Enum() *ResPlayConstParam_KeyType {
	p := new(ResPlayConstParam_KeyType)
	*p = x
	return p
}

func (x ResPlayConstParam_KeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResPlayConstParam_KeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_data_legacy_proto_enumTypes[7].Descriptor()
}

func (ResPlayConstParam_KeyType) Type() protoreflect.EnumType {
	return &file_os_res_data_legacy_proto_enumTypes[7]
}

func (x ResPlayConstParam_KeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResPlayConstParam_KeyType.Descriptor instead.
func (ResPlayConstParam_KeyType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{138, 0}
}

type ResDT_Common_KeyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type uint32   `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Arg  []uint32 `protobuf:"varint,2,rep,packed,name=Arg,proto3" json:"Arg,omitempty"`
}

func (x *ResDT_Common_KeyValue) Reset() {
	*x = ResDT_Common_KeyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_Common_KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_Common_KeyValue) ProtoMessage() {}

func (x *ResDT_Common_KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_Common_KeyValue.ProtoReflect.Descriptor instead.
func (*ResDT_Common_KeyValue) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{0}
}

func (x *ResDT_Common_KeyValue) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ResDT_Common_KeyValue) GetArg() []uint32 {
	if x != nil {
		return x.Arg
	}
	return nil
}

type ResDT_RewardItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemType uint32 `protobuf:"varint,1,opt,name=ItemType,proto3" json:"ItemType,omitempty"`
	ItemId   uint32 `protobuf:"varint,2,opt,name=ItemId,proto3" json:"ItemId,omitempty"`
	ItemNum  uint32 `protobuf:"varint,3,opt,name=ItemNum,proto3" json:"ItemNum,omitempty"`
}

func (x *ResDT_RewardItem) Reset() {
	*x = ResDT_RewardItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_RewardItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_RewardItem) ProtoMessage() {}

func (x *ResDT_RewardItem) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_RewardItem.ProtoReflect.Descriptor instead.
func (*ResDT_RewardItem) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{1}
}

func (x *ResDT_RewardItem) GetItemType() uint32 {
	if x != nil {
		return x.ItemType
	}
	return 0
}

func (x *ResDT_RewardItem) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *ResDT_RewardItem) GetItemNum() uint32 {
	if x != nil {
		return x.ItemNum
	}
	return 0
}

type ResGuideTipInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CfgID      int32  `protobuf:"varint,1,opt,name=CfgID,proto3" json:"CfgID,omitempty"`
	ImagePath  string `protobuf:"bytes,2,opt,name=ImagePath,proto3" json:"ImagePath,omitempty"`
	TipIcon    string `protobuf:"bytes,3,opt,name=TipIcon,proto3" json:"TipIcon,omitempty"`
	TipTitle   string `protobuf:"bytes,4,opt,name=TipTitle,proto3" json:"TipTitle,omitempty"`
	TipContent string `protobuf:"bytes,5,opt,name=TipContent,proto3" json:"TipContent,omitempty"`
	TipPos     uint32 `protobuf:"varint,6,opt,name=TipPos,proto3" json:"TipPos,omitempty"`
	TipVoice   string `protobuf:"bytes,7,opt,name=TipVoice,proto3" json:"TipVoice,omitempty"`
}

func (x *ResGuideTipInfo) Reset() {
	*x = ResGuideTipInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGuideTipInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGuideTipInfo) ProtoMessage() {}

func (x *ResGuideTipInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGuideTipInfo.ProtoReflect.Descriptor instead.
func (*ResGuideTipInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{2}
}

func (x *ResGuideTipInfo) GetCfgID() int32 {
	if x != nil {
		return x.CfgID
	}
	return 0
}

func (x *ResGuideTipInfo) GetImagePath() string {
	if x != nil {
		return x.ImagePath
	}
	return ""
}

func (x *ResGuideTipInfo) GetTipIcon() string {
	if x != nil {
		return x.TipIcon
	}
	return ""
}

func (x *ResGuideTipInfo) GetTipTitle() string {
	if x != nil {
		return x.TipTitle
	}
	return ""
}

func (x *ResGuideTipInfo) GetTipContent() string {
	if x != nil {
		return x.TipContent
	}
	return ""
}

func (x *ResGuideTipInfo) GetTipPos() uint32 {
	if x != nil {
		return x.TipPos
	}
	return 0
}

func (x *ResGuideTipInfo) GetTipVoice() string {
	if x != nil {
		return x.TipVoice
	}
	return ""
}

type ResDT_IntParamArrayNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param int32 `protobuf:"varint,1,opt,name=Param,proto3" json:"Param,omitempty"`
}

func (x *ResDT_IntParamArrayNode) Reset() {
	*x = ResDT_IntParamArrayNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_IntParamArrayNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_IntParamArrayNode) ProtoMessage() {}

func (x *ResDT_IntParamArrayNode) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_IntParamArrayNode.ProtoReflect.Descriptor instead.
func (*ResDT_IntParamArrayNode) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{3}
}

func (x *ResDT_IntParamArrayNode) GetParam() int32 {
	if x != nil {
		return x.Param
	}
	return 0
}

type ResDT_JumpForm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetWayDesc     string `protobuf:"bytes,1,opt,name=GetWayDesc,proto3" json:"GetWayDesc,omitempty"`
	JumpEntry      int32  `protobuf:"varint,2,opt,name=JumpEntry,proto3" json:"JumpEntry,omitempty"`
	JumpParam1     int32  `protobuf:"varint,3,opt,name=JumpParam1,proto3" json:"JumpParam1,omitempty"`
	JumpParam2     int32  `protobuf:"varint,4,opt,name=JumpParam2,proto3" json:"JumpParam2,omitempty"`
	JumpUrl        string `protobuf:"bytes,5,opt,name=JumpUrl,proto3" json:"JumpUrl,omitempty"`
	JumpOnTimeStr  string `protobuf:"bytes,6,opt,name=JumpOnTimeStr,proto3" json:"JumpOnTimeStr,omitempty"`
	JumpOffTimeStr string `protobuf:"bytes,7,opt,name=JumpOffTimeStr,proto3" json:"JumpOffTimeStr,omitempty"`
}

func (x *ResDT_JumpForm) Reset() {
	*x = ResDT_JumpForm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_JumpForm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_JumpForm) ProtoMessage() {}

func (x *ResDT_JumpForm) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_JumpForm.ProtoReflect.Descriptor instead.
func (*ResDT_JumpForm) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{4}
}

func (x *ResDT_JumpForm) GetGetWayDesc() string {
	if x != nil {
		return x.GetWayDesc
	}
	return ""
}

func (x *ResDT_JumpForm) GetJumpEntry() int32 {
	if x != nil {
		return x.JumpEntry
	}
	return 0
}

func (x *ResDT_JumpForm) GetJumpParam1() int32 {
	if x != nil {
		return x.JumpParam1
	}
	return 0
}

func (x *ResDT_JumpForm) GetJumpParam2() int32 {
	if x != nil {
		return x.JumpParam2
	}
	return 0
}

func (x *ResDT_JumpForm) GetJumpUrl() string {
	if x != nil {
		return x.JumpUrl
	}
	return ""
}

func (x *ResDT_JumpForm) GetJumpOnTimeStr() string {
	if x != nil {
		return x.JumpOnTimeStr
	}
	return ""
}

func (x *ResDT_JumpForm) GetJumpOffTimeStr() string {
	if x != nil {
		return x.JumpOffTimeStr
	}
	return ""
}

type ResDT_PveRewardShowInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardType uint32 `protobuf:"varint,1,opt,name=RewardType,proto3" json:"RewardType,omitempty"`
	RewardID   uint32 `protobuf:"varint,2,opt,name=RewardID,proto3" json:"RewardID,omitempty"`
	RewardCnt  uint32 `protobuf:"varint,3,opt,name=RewardCnt,proto3" json:"RewardCnt,omitempty"`
}

func (x *ResDT_PveRewardShowInfo) Reset() {
	*x = ResDT_PveRewardShowInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_PveRewardShowInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_PveRewardShowInfo) ProtoMessage() {}

func (x *ResDT_PveRewardShowInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_PveRewardShowInfo.ProtoReflect.Descriptor instead.
func (*ResDT_PveRewardShowInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{5}
}

func (x *ResDT_PveRewardShowInfo) GetRewardType() uint32 {
	if x != nil {
		return x.RewardType
	}
	return 0
}

func (x *ResDT_PveRewardShowInfo) GetRewardID() uint32 {
	if x != nil {
		return x.RewardID
	}
	return 0
}

func (x *ResDT_PveRewardShowInfo) GetRewardCnt() uint32 {
	if x != nil {
		return x.RewardCnt
	}
	return 0
}

type ResDT_MapBuff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Camp           uint32 `protobuf:"varint,2,opt,name=Camp,proto3" json:"Camp,omitempty"`
	HeroType       uint32 `protobuf:"varint,3,opt,name=HeroType,proto3" json:"HeroType,omitempty"`
	HeroDamageType uint32 `protobuf:"varint,4,opt,name=HeroDamageType,proto3" json:"HeroDamageType,omitempty"`
	HeroAttackType uint32 `protobuf:"varint,5,opt,name=HeroAttackType,proto3" json:"HeroAttackType,omitempty"`
}

func (x *ResDT_MapBuff) Reset() {
	*x = ResDT_MapBuff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_MapBuff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_MapBuff) ProtoMessage() {}

func (x *ResDT_MapBuff) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_MapBuff.ProtoReflect.Descriptor instead.
func (*ResDT_MapBuff) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{6}
}

func (x *ResDT_MapBuff) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResDT_MapBuff) GetCamp() uint32 {
	if x != nil {
		return x.Camp
	}
	return 0
}

func (x *ResDT_MapBuff) GetHeroType() uint32 {
	if x != nil {
		return x.HeroType
	}
	return 0
}

func (x *ResDT_MapBuff) GetHeroDamageType() uint32 {
	if x != nil {
		return x.HeroDamageType
	}
	return 0
}

func (x *ResDT_MapBuff) GetHeroAttackType() uint32 {
	if x != nil {
		return x.HeroAttackType
	}
	return 0
}

type ResDT_CostInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CostType  uint32 `protobuf:"varint,1,opt,name=CostType,proto3" json:"CostType,omitempty"`
	CostPrice uint32 `protobuf:"varint,2,opt,name=CostPrice,proto3" json:"CostPrice,omitempty"`
}

func (x *ResDT_CostInfo) Reset() {
	*x = ResDT_CostInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_CostInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_CostInfo) ProtoMessage() {}

func (x *ResDT_CostInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_CostInfo.ProtoReflect.Descriptor instead.
func (*ResDT_CostInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{7}
}

func (x *ResDT_CostInfo) GetCostType() uint32 {
	if x != nil {
		return x.CostType
	}
	return 0
}

func (x *ResDT_CostInfo) GetCostPrice() uint32 {
	if x != nil {
		return x.CostPrice
	}
	return 0
}

type ResDT_PveReviveInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReviveCost []*ResDT_CostInfo `protobuf:"bytes,1,rep,name=ReviveCost,proto3" json:"ReviveCost,omitempty"`
	ReviveBuff []uint32          `protobuf:"varint,2,rep,packed,name=ReviveBuff,proto3" json:"ReviveBuff,omitempty"`
}

func (x *ResDT_PveReviveInfo) Reset() {
	*x = ResDT_PveReviveInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_PveReviveInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_PveReviveInfo) ProtoMessage() {}

func (x *ResDT_PveReviveInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_PveReviveInfo.ProtoReflect.Descriptor instead.
func (*ResDT_PveReviveInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{8}
}

func (x *ResDT_PveReviveInfo) GetReviveCost() []*ResDT_CostInfo {
	if x != nil {
		return x.ReviveCost
	}
	return nil
}

func (x *ResDT_PveReviveInfo) GetReviveBuff() []uint32 {
	if x != nil {
		return x.ReviveBuff
	}
	return nil
}

type ResLevelCfgInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CfgID                 int32                      `protobuf:"varint,1,opt,name=CfgID,proto3" json:"CfgID,omitempty"`
	ChapterId             int32                      `protobuf:"varint,2,opt,name=ChapterId,proto3" json:"ChapterId,omitempty"`
	LevelNo               uint32                     `protobuf:"varint,3,opt,name=LevelNo,proto3" json:"LevelNo,omitempty"`
	LevelDifficulty       uint32                     `protobuf:"varint,4,opt,name=LevelDifficulty,proto3" json:"LevelDifficulty,omitempty"`
	ChallengeNum          uint32                     `protobuf:"varint,5,opt,name=ChallengeNum,proto3" json:"ChallengeNum,omitempty"`
	MaxAcntNum            uint32                     `protobuf:"varint,6,opt,name=MaxAcntNum,proto3" json:"MaxAcntNum,omitempty"`
	Name                  string                     `protobuf:"bytes,7,opt,name=Name,proto3" json:"Name,omitempty"`
	DesignFileName        string                     `protobuf:"bytes,8,opt,name=DesignFileName,proto3" json:"DesignFileName,omitempty"`
	ArtistFileName        string                     `protobuf:"bytes,9,opt,name=ArtistFileName,proto3" json:"ArtistFileName,omitempty"`
	LevelType             int32                      `protobuf:"varint,10,opt,name=LevelType,proto3" json:"LevelType,omitempty"`
	LevelIcon             string                     `protobuf:"bytes,11,opt,name=LevelIcon,proto3" json:"LevelIcon,omitempty"`
	SelfCampAIPlayerLevel uint32                     `protobuf:"varint,12,opt,name=SelfCampAIPlayerLevel,proto3" json:"SelfCampAIPlayerLevel,omitempty"`
	SelfCampAIHeroID      []uint32                   `protobuf:"varint,13,rep,packed,name=SelfCampAIHeroID,proto3" json:"SelfCampAIHeroID,omitempty"`
	AIPlayerLevel         uint32                     `protobuf:"varint,14,opt,name=AIPlayerLevel,proto3" json:"AIPlayerLevel,omitempty"`
	AIHeroID              []uint32                   `protobuf:"varint,15,rep,packed,name=AIHeroID,proto3" json:"AIHeroID,omitempty"`
	HeroNum               int32                      `protobuf:"varint,16,opt,name=HeroNum,proto3" json:"HeroNum,omitempty"`
	HeroAIType            int32                      `protobuf:"varint,17,opt,name=HeroAIType,proto3" json:"HeroAIType,omitempty"`
	StarDetail            []*ResDT_IntParamArrayNode `protobuf:"bytes,18,rep,name=StarDetail,proto3" json:"StarDetail,omitempty"`
	LoseCondition         int32                      `protobuf:"varint,19,opt,name=LoseCondition,proto3" json:"LoseCondition,omitempty"`
	DefaultActive         uint32                     `protobuf:"varint,20,opt,name=DefaultActive,proto3" json:"DefaultActive,omitempty"`
	ActivateLevelId       int32                      `protobuf:"varint,21,opt,name=ActivateLevelId,proto3" json:"ActivateLevelId,omitempty"`
	RewardShowDetail      []*ResDT_PveRewardShowInfo `protobuf:"bytes,22,rep,name=RewardShowDetail,proto3" json:"RewardShowDetail,omitempty"`
	RecommendLevel        []int32                    `protobuf:"varint,23,rep,packed,name=RecommendLevel,proto3" json:"RecommendLevel,omitempty"`
	RecommendPower        []int32                    `protobuf:"varint,24,rep,packed,name=RecommendPower,proto3" json:"RecommendPower,omitempty"`
	ServerCheckPower      []int32                    `protobuf:"varint,25,rep,packed,name=ServerCheckPower,proto3" json:"ServerCheckPower,omitempty"`
	HideMinimap           uint32                     `protobuf:"varint,26,opt,name=HideMinimap,proto3" json:"HideMinimap,omitempty"`
	ThumbnailPath         string                     `protobuf:"bytes,27,opt,name=ThumbnailPath,proto3" json:"ThumbnailPath,omitempty"`
	MapPath               string                     `protobuf:"bytes,28,opt,name=MapPath,proto3" json:"MapPath,omitempty"`
	BigMapPath            string                     `protobuf:"bytes,29,opt,name=BigMapPath,proto3" json:"BigMapPath,omitempty"`
	MapWidth              int32                      `protobuf:"varint,30,opt,name=MapWidth,proto3" json:"MapWidth,omitempty"`
	MapHeight             int32                      `protobuf:"varint,31,opt,name=MapHeight,proto3" json:"MapHeight,omitempty"`
	SmallMapWidth         int32                      `protobuf:"varint,32,opt,name=SmallMapWidth,proto3" json:"SmallMapWidth,omitempty"`
	SmallMapHeight        int32                      `protobuf:"varint,33,opt,name=SmallMapHeight,proto3" json:"SmallMapHeight,omitempty"`
	BigMapWidth           int32                      `protobuf:"varint,34,opt,name=BigMapWidth,proto3" json:"BigMapWidth,omitempty"`
	BigMapHeight          int32                      `protobuf:"varint,35,opt,name=BigMapHeight,proto3" json:"BigMapHeight,omitempty"`
	UseNavHeightLimit     int32                      `protobuf:"varint,36,opt,name=UseNavHeightLimit,proto3" json:"UseNavHeightLimit,omitempty"`
	PassDialogId          int32                      `protobuf:"varint,37,opt,name=PassDialogId,proto3" json:"PassDialogId,omitempty"`
	PreDialogId           int32                      `protobuf:"varint,38,opt,name=PreDialogId,proto3" json:"PreDialogId,omitempty"`
	FailureDialogId       int32                      `protobuf:"varint,39,opt,name=FailureDialogId,proto3" json:"FailureDialogId,omitempty"`
	EnterConsumeAP        uint32                     `protobuf:"varint,40,opt,name=EnterConsumeAP,proto3" json:"EnterConsumeAP,omitempty"`
	FinishConsumeAP       uint32                     `protobuf:"varint,41,opt,name=FinishConsumeAP,proto3" json:"FinishConsumeAP,omitempty"`
	BattleListID          uint32                     `protobuf:"varint,42,opt,name=BattleListID,proto3" json:"BattleListID,omitempty"`
	SettleIDDetail        []uint32                   `protobuf:"varint,43,rep,packed,name=SettleIDDetail,proto3" json:"SettleIDDetail,omitempty"`
	SoulGrow              uint32                     `protobuf:"varint,44,opt,name=SoulGrow,proto3" json:"SoulGrow,omitempty"`
	SoulAllocID           uint32                     `protobuf:"varint,45,opt,name=SoulAllocID,proto3" json:"SoulAllocID,omitempty"`
	AttackOrderID         uint32                     `protobuf:"varint,46,opt,name=AttackOrderID,proto3" json:"AttackOrderID,omitempty"`
	ReviveTime            uint32                     `protobuf:"varint,47,opt,name=ReviveTime,proto3" json:"ReviveTime,omitempty"`
	DynamicPropertyCfg    uint32                     `protobuf:"varint,48,opt,name=DynamicPropertyCfg,proto3" json:"DynamicPropertyCfg,omitempty"`
	MusicStartEvent       string                     `protobuf:"bytes,49,opt,name=MusicStartEvent,proto3" json:"MusicStartEvent,omitempty"`
	MusicEndEvent         string                     `protobuf:"bytes,50,opt,name=MusicEndEvent,proto3" json:"MusicEndEvent,omitempty"`
	AmbientSoundEvent     string                     `protobuf:"bytes,51,opt,name=AmbientSoundEvent,proto3" json:"AmbientSoundEvent,omitempty"`
	BankResourceName      string                     `protobuf:"bytes,52,opt,name=BankResourceName,proto3" json:"BankResourceName,omitempty"`
	HorizonMethod         uint32                     `protobuf:"varint,53,opt,name=HorizonMethod,proto3" json:"HorizonMethod,omitempty"`
	ActorHorizonMethod    uint32                     `protobuf:"varint,54,opt,name=ActorHorizonMethod,proto3" json:"ActorHorizonMethod,omitempty"`
	IsOpenAutoAI          uint32                     `protobuf:"varint,55,opt,name=IsOpenAutoAI,proto3" json:"IsOpenAutoAI,omitempty"`
	MapBuffs              []*ResDT_MapBuff           `protobuf:"bytes,56,rep,name=MapBuffs,proto3" json:"MapBuffs,omitempty"`
	LevelDesc             string                     `protobuf:"bytes,57,opt,name=LevelDesc,proto3" json:"LevelDesc,omitempty"`
	ReviveInfo            []*ResDT_PveReviveInfo     `protobuf:"bytes,58,rep,name=ReviveInfo,proto3" json:"ReviveInfo,omitempty"`
	ReviveTimeMax         uint32                     `protobuf:"varint,59,opt,name=ReviveTimeMax,proto3" json:"ReviveTimeMax,omitempty"`
	ExtraSkillId          int32                      `protobuf:"varint,60,opt,name=ExtraSkillId,proto3" json:"ExtraSkillId,omitempty"`
	ExtraSkill2Id         int32                      `protobuf:"varint,61,opt,name=ExtraSkill2Id,proto3" json:"ExtraSkill2Id,omitempty"`
	ExtraSkill3Id         int32                      `protobuf:"varint,62,opt,name=ExtraSkill3Id,proto3" json:"ExtraSkill3Id,omitempty"`
	ExtraSkillLogicSlot   uint32                     `protobuf:"varint,63,opt,name=ExtraSkillLogicSlot,proto3" json:"ExtraSkillLogicSlot,omitempty"`
	ExtraSkill2LogicSlot  uint32                     `protobuf:"varint,64,opt,name=ExtraSkill2LogicSlot,proto3" json:"ExtraSkill2LogicSlot,omitempty"`
	ExtraSkill3LogicSlot  uint32                     `protobuf:"varint,65,opt,name=ExtraSkill3LogicSlot,proto3" json:"ExtraSkill3LogicSlot,omitempty"`
	ExtraPassiveSkillId   int32                      `protobuf:"varint,66,opt,name=ExtraPassiveSkillId,proto3" json:"ExtraPassiveSkillId,omitempty"`
	FinResultType         uint32                     `protobuf:"varint,67,opt,name=FinResultType,proto3" json:"FinResultType,omitempty"`
	RandPickHero          uint32                     `protobuf:"varint,68,opt,name=RandPickHero,proto3" json:"RandPickHero,omitempty"`
	SoulConfigId          uint32                     `protobuf:"varint,69,opt,name=SoulConfigId,proto3" json:"SoulConfigId,omitempty"`
	ShowTrainingHelper    uint32                     `protobuf:"varint,70,opt,name=ShowTrainingHelper,proto3" json:"ShowTrainingHelper,omitempty"`
	GuideLevelSubType     uint32                     `protobuf:"varint,71,opt,name=GuideLevelSubType,proto3" json:"GuideLevelSubType,omitempty"`
	SupportCameraDrag     uint32                     `protobuf:"varint,72,opt,name=SupportCameraDrag,proto3" json:"SupportCameraDrag,omitempty"`
	SceneBrightnessSetID  uint32                     `protobuf:"varint,73,opt,name=SceneBrightnessSetID,proto3" json:"SceneBrightnessSetID,omitempty"`
	DyingMoveSpeed        int32                      `protobuf:"varint,74,opt,name=DyingMoveSpeed,proto3" json:"DyingMoveSpeed,omitempty"`
	HeroAILogicGraph      string                     `protobuf:"bytes,75,opt,name=HeroAILogicGraph,proto3" json:"HeroAILogicGraph,omitempty"`
}

func (x *ResLevelCfgInfo) Reset() {
	*x = ResLevelCfgInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResLevelCfgInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResLevelCfgInfo) ProtoMessage() {}

func (x *ResLevelCfgInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResLevelCfgInfo.ProtoReflect.Descriptor instead.
func (*ResLevelCfgInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{9}
}

func (x *ResLevelCfgInfo) GetCfgID() int32 {
	if x != nil {
		return x.CfgID
	}
	return 0
}

func (x *ResLevelCfgInfo) GetChapterId() int32 {
	if x != nil {
		return x.ChapterId
	}
	return 0
}

func (x *ResLevelCfgInfo) GetLevelNo() uint32 {
	if x != nil {
		return x.LevelNo
	}
	return 0
}

func (x *ResLevelCfgInfo) GetLevelDifficulty() uint32 {
	if x != nil {
		return x.LevelDifficulty
	}
	return 0
}

func (x *ResLevelCfgInfo) GetChallengeNum() uint32 {
	if x != nil {
		return x.ChallengeNum
	}
	return 0
}

func (x *ResLevelCfgInfo) GetMaxAcntNum() uint32 {
	if x != nil {
		return x.MaxAcntNum
	}
	return 0
}

func (x *ResLevelCfgInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResLevelCfgInfo) GetDesignFileName() string {
	if x != nil {
		return x.DesignFileName
	}
	return ""
}

func (x *ResLevelCfgInfo) GetArtistFileName() string {
	if x != nil {
		return x.ArtistFileName
	}
	return ""
}

func (x *ResLevelCfgInfo) GetLevelType() int32 {
	if x != nil {
		return x.LevelType
	}
	return 0
}

func (x *ResLevelCfgInfo) GetLevelIcon() string {
	if x != nil {
		return x.LevelIcon
	}
	return ""
}

func (x *ResLevelCfgInfo) GetSelfCampAIPlayerLevel() uint32 {
	if x != nil {
		return x.SelfCampAIPlayerLevel
	}
	return 0
}

func (x *ResLevelCfgInfo) GetSelfCampAIHeroID() []uint32 {
	if x != nil {
		return x.SelfCampAIHeroID
	}
	return nil
}

func (x *ResLevelCfgInfo) GetAIPlayerLevel() uint32 {
	if x != nil {
		return x.AIPlayerLevel
	}
	return 0
}

func (x *ResLevelCfgInfo) GetAIHeroID() []uint32 {
	if x != nil {
		return x.AIHeroID
	}
	return nil
}

func (x *ResLevelCfgInfo) GetHeroNum() int32 {
	if x != nil {
		return x.HeroNum
	}
	return 0
}

func (x *ResLevelCfgInfo) GetHeroAIType() int32 {
	if x != nil {
		return x.HeroAIType
	}
	return 0
}

func (x *ResLevelCfgInfo) GetStarDetail() []*ResDT_IntParamArrayNode {
	if x != nil {
		return x.StarDetail
	}
	return nil
}

func (x *ResLevelCfgInfo) GetLoseCondition() int32 {
	if x != nil {
		return x.LoseCondition
	}
	return 0
}

func (x *ResLevelCfgInfo) GetDefaultActive() uint32 {
	if x != nil {
		return x.DefaultActive
	}
	return 0
}

func (x *ResLevelCfgInfo) GetActivateLevelId() int32 {
	if x != nil {
		return x.ActivateLevelId
	}
	return 0
}

func (x *ResLevelCfgInfo) GetRewardShowDetail() []*ResDT_PveRewardShowInfo {
	if x != nil {
		return x.RewardShowDetail
	}
	return nil
}

func (x *ResLevelCfgInfo) GetRecommendLevel() []int32 {
	if x != nil {
		return x.RecommendLevel
	}
	return nil
}

func (x *ResLevelCfgInfo) GetRecommendPower() []int32 {
	if x != nil {
		return x.RecommendPower
	}
	return nil
}

func (x *ResLevelCfgInfo) GetServerCheckPower() []int32 {
	if x != nil {
		return x.ServerCheckPower
	}
	return nil
}

func (x *ResLevelCfgInfo) GetHideMinimap() uint32 {
	if x != nil {
		return x.HideMinimap
	}
	return 0
}

func (x *ResLevelCfgInfo) GetThumbnailPath() string {
	if x != nil {
		return x.ThumbnailPath
	}
	return ""
}

func (x *ResLevelCfgInfo) GetMapPath() string {
	if x != nil {
		return x.MapPath
	}
	return ""
}

func (x *ResLevelCfgInfo) GetBigMapPath() string {
	if x != nil {
		return x.BigMapPath
	}
	return ""
}

func (x *ResLevelCfgInfo) GetMapWidth() int32 {
	if x != nil {
		return x.MapWidth
	}
	return 0
}

func (x *ResLevelCfgInfo) GetMapHeight() int32 {
	if x != nil {
		return x.MapHeight
	}
	return 0
}

func (x *ResLevelCfgInfo) GetSmallMapWidth() int32 {
	if x != nil {
		return x.SmallMapWidth
	}
	return 0
}

func (x *ResLevelCfgInfo) GetSmallMapHeight() int32 {
	if x != nil {
		return x.SmallMapHeight
	}
	return 0
}

func (x *ResLevelCfgInfo) GetBigMapWidth() int32 {
	if x != nil {
		return x.BigMapWidth
	}
	return 0
}

func (x *ResLevelCfgInfo) GetBigMapHeight() int32 {
	if x != nil {
		return x.BigMapHeight
	}
	return 0
}

func (x *ResLevelCfgInfo) GetUseNavHeightLimit() int32 {
	if x != nil {
		return x.UseNavHeightLimit
	}
	return 0
}

func (x *ResLevelCfgInfo) GetPassDialogId() int32 {
	if x != nil {
		return x.PassDialogId
	}
	return 0
}

func (x *ResLevelCfgInfo) GetPreDialogId() int32 {
	if x != nil {
		return x.PreDialogId
	}
	return 0
}

func (x *ResLevelCfgInfo) GetFailureDialogId() int32 {
	if x != nil {
		return x.FailureDialogId
	}
	return 0
}

func (x *ResLevelCfgInfo) GetEnterConsumeAP() uint32 {
	if x != nil {
		return x.EnterConsumeAP
	}
	return 0
}

func (x *ResLevelCfgInfo) GetFinishConsumeAP() uint32 {
	if x != nil {
		return x.FinishConsumeAP
	}
	return 0
}

func (x *ResLevelCfgInfo) GetBattleListID() uint32 {
	if x != nil {
		return x.BattleListID
	}
	return 0
}

func (x *ResLevelCfgInfo) GetSettleIDDetail() []uint32 {
	if x != nil {
		return x.SettleIDDetail
	}
	return nil
}

func (x *ResLevelCfgInfo) GetSoulGrow() uint32 {
	if x != nil {
		return x.SoulGrow
	}
	return 0
}

func (x *ResLevelCfgInfo) GetSoulAllocID() uint32 {
	if x != nil {
		return x.SoulAllocID
	}
	return 0
}

func (x *ResLevelCfgInfo) GetAttackOrderID() uint32 {
	if x != nil {
		return x.AttackOrderID
	}
	return 0
}

func (x *ResLevelCfgInfo) GetReviveTime() uint32 {
	if x != nil {
		return x.ReviveTime
	}
	return 0
}

func (x *ResLevelCfgInfo) GetDynamicPropertyCfg() uint32 {
	if x != nil {
		return x.DynamicPropertyCfg
	}
	return 0
}

func (x *ResLevelCfgInfo) GetMusicStartEvent() string {
	if x != nil {
		return x.MusicStartEvent
	}
	return ""
}

func (x *ResLevelCfgInfo) GetMusicEndEvent() string {
	if x != nil {
		return x.MusicEndEvent
	}
	return ""
}

func (x *ResLevelCfgInfo) GetAmbientSoundEvent() string {
	if x != nil {
		return x.AmbientSoundEvent
	}
	return ""
}

func (x *ResLevelCfgInfo) GetBankResourceName() string {
	if x != nil {
		return x.BankResourceName
	}
	return ""
}

func (x *ResLevelCfgInfo) GetHorizonMethod() uint32 {
	if x != nil {
		return x.HorizonMethod
	}
	return 0
}

func (x *ResLevelCfgInfo) GetActorHorizonMethod() uint32 {
	if x != nil {
		return x.ActorHorizonMethod
	}
	return 0
}

func (x *ResLevelCfgInfo) GetIsOpenAutoAI() uint32 {
	if x != nil {
		return x.IsOpenAutoAI
	}
	return 0
}

func (x *ResLevelCfgInfo) GetMapBuffs() []*ResDT_MapBuff {
	if x != nil {
		return x.MapBuffs
	}
	return nil
}

func (x *ResLevelCfgInfo) GetLevelDesc() string {
	if x != nil {
		return x.LevelDesc
	}
	return ""
}

func (x *ResLevelCfgInfo) GetReviveInfo() []*ResDT_PveReviveInfo {
	if x != nil {
		return x.ReviveInfo
	}
	return nil
}

func (x *ResLevelCfgInfo) GetReviveTimeMax() uint32 {
	if x != nil {
		return x.ReviveTimeMax
	}
	return 0
}

func (x *ResLevelCfgInfo) GetExtraSkillId() int32 {
	if x != nil {
		return x.ExtraSkillId
	}
	return 0
}

func (x *ResLevelCfgInfo) GetExtraSkill2Id() int32 {
	if x != nil {
		return x.ExtraSkill2Id
	}
	return 0
}

func (x *ResLevelCfgInfo) GetExtraSkill3Id() int32 {
	if x != nil {
		return x.ExtraSkill3Id
	}
	return 0
}

func (x *ResLevelCfgInfo) GetExtraSkillLogicSlot() uint32 {
	if x != nil {
		return x.ExtraSkillLogicSlot
	}
	return 0
}

func (x *ResLevelCfgInfo) GetExtraSkill2LogicSlot() uint32 {
	if x != nil {
		return x.ExtraSkill2LogicSlot
	}
	return 0
}

func (x *ResLevelCfgInfo) GetExtraSkill3LogicSlot() uint32 {
	if x != nil {
		return x.ExtraSkill3LogicSlot
	}
	return 0
}

func (x *ResLevelCfgInfo) GetExtraPassiveSkillId() int32 {
	if x != nil {
		return x.ExtraPassiveSkillId
	}
	return 0
}

func (x *ResLevelCfgInfo) GetFinResultType() uint32 {
	if x != nil {
		return x.FinResultType
	}
	return 0
}

func (x *ResLevelCfgInfo) GetRandPickHero() uint32 {
	if x != nil {
		return x.RandPickHero
	}
	return 0
}

func (x *ResLevelCfgInfo) GetSoulConfigId() uint32 {
	if x != nil {
		return x.SoulConfigId
	}
	return 0
}

func (x *ResLevelCfgInfo) GetShowTrainingHelper() uint32 {
	if x != nil {
		return x.ShowTrainingHelper
	}
	return 0
}

func (x *ResLevelCfgInfo) GetGuideLevelSubType() uint32 {
	if x != nil {
		return x.GuideLevelSubType
	}
	return 0
}

func (x *ResLevelCfgInfo) GetSupportCameraDrag() uint32 {
	if x != nil {
		return x.SupportCameraDrag
	}
	return 0
}

func (x *ResLevelCfgInfo) GetSceneBrightnessSetID() uint32 {
	if x != nil {
		return x.SceneBrightnessSetID
	}
	return 0
}

func (x *ResLevelCfgInfo) GetDyingMoveSpeed() int32 {
	if x != nil {
		return x.DyingMoveSpeed
	}
	return 0
}

func (x *ResLevelCfgInfo) GetHeroAILogicGraph() string {
	if x != nil {
		return x.HeroAILogicGraph
	}
	return ""
}

type ResDT_UnUseSkill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnUseSkillList []uint32 `protobuf:"varint,1,rep,packed,name=UnUseSkillList,proto3" json:"UnUseSkillList,omitempty"`
}

func (x *ResDT_UnUseSkill) Reset() {
	*x = ResDT_UnUseSkill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_UnUseSkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_UnUseSkill) ProtoMessage() {}

func (x *ResDT_UnUseSkill) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_UnUseSkill.ProtoReflect.Descriptor instead.
func (*ResDT_UnUseSkill) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{10}
}

func (x *ResDT_UnUseSkill) GetUnUseSkillList() []uint32 {
	if x != nil {
		return x.UnUseSkillList
	}
	return nil
}

type DynamicAttributeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseHP int32 `protobuf:"varint,1,opt,name=BaseHP,proto3" json:"BaseHP,omitempty"`
	AD     int32 `protobuf:"varint,2,opt,name=AD,proto3" json:"AD,omitempty"`
	AP     int32 `protobuf:"varint,3,opt,name=AP,proto3" json:"AP,omitempty"`
	Def    int32 `protobuf:"varint,4,opt,name=Def,proto3" json:"Def,omitempty"`
	Res    int32 `protobuf:"varint,5,opt,name=Res,proto3" json:"Res,omitempty"`
}

func (x *DynamicAttributeInfo) Reset() {
	*x = DynamicAttributeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicAttributeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicAttributeInfo) ProtoMessage() {}

func (x *DynamicAttributeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicAttributeInfo.ProtoReflect.Descriptor instead.
func (*DynamicAttributeInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{11}
}

func (x *DynamicAttributeInfo) GetBaseHP() int32 {
	if x != nil {
		return x.BaseHP
	}
	return 0
}

func (x *DynamicAttributeInfo) GetAD() int32 {
	if x != nil {
		return x.AD
	}
	return 0
}

func (x *DynamicAttributeInfo) GetAP() int32 {
	if x != nil {
		return x.AP
	}
	return 0
}

func (x *DynamicAttributeInfo) GetDef() int32 {
	if x != nil {
		return x.Def
	}
	return 0
}

func (x *DynamicAttributeInfo) GetRes() int32 {
	if x != nil {
		return x.Res
	}
	return 0
}

type ResDT_SkillDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillDescType      string `protobuf:"bytes,1,opt,name=SkillDescType,proto3" json:"SkillDescType,omitempty"`
	SkillDescBaseValue string `protobuf:"bytes,2,opt,name=SkillDescBaseValue,proto3" json:"SkillDescBaseValue,omitempty"`
	SkillDescGrowth    string `protobuf:"bytes,3,opt,name=SkillDescGrowth,proto3" json:"SkillDescGrowth,omitempty"`
	SkillDescValueType uint32 `protobuf:"varint,4,opt,name=SkillDescValueType,proto3" json:"SkillDescValueType,omitempty"`
}

func (x *ResDT_SkillDescription) Reset() {
	*x = ResDT_SkillDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_SkillDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_SkillDescription) ProtoMessage() {}

func (x *ResDT_SkillDescription) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_SkillDescription.ProtoReflect.Descriptor instead.
func (*ResDT_SkillDescription) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{12}
}

func (x *ResDT_SkillDescription) GetSkillDescType() string {
	if x != nil {
		return x.SkillDescType
	}
	return ""
}

func (x *ResDT_SkillDescription) GetSkillDescBaseValue() string {
	if x != nil {
		return x.SkillDescBaseValue
	}
	return ""
}

func (x *ResDT_SkillDescription) GetSkillDescGrowth() string {
	if x != nil {
		return x.SkillDescGrowth
	}
	return ""
}

func (x *ResDT_SkillDescription) GetSkillDescValueType() uint32 {
	if x != nil {
		return x.SkillDescValueType
	}
	return 0
}

type ResSkillCfgInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CfgID                 int32  `protobuf:"varint,1,opt,name=CfgID,proto3" json:"CfgID,omitempty"`
	SkillName             string `protobuf:"bytes,2,opt,name=SkillName,proto3" json:"SkillName,omitempty"`
	SkillDesc             string `protobuf:"bytes,3,opt,name=SkillDesc,proto3" json:"SkillDesc,omitempty"`
	SkillUpTip            string `protobuf:"bytes,4,opt,name=SkillUpTip,proto3" json:"SkillUpTip,omitempty"`
	IconPath              string `protobuf:"bytes,5,opt,name=IconPath,proto3" json:"IconPath,omitempty"`
	ModelPath             string `protobuf:"bytes,6,opt,name=ModelPath,proto3" json:"ModelPath,omitempty"`
	CoolDown              int32  `protobuf:"varint,7,opt,name=CoolDown,proto3" json:"CoolDown,omitempty"`
	Prefab                string `protobuf:"bytes,8,opt,name=Prefab,proto3" json:"Prefab,omitempty"`
	MaxAttackDistance     int32  `protobuf:"varint,10,opt,name=MaxAttackDistance,proto3" json:"MaxAttackDistance,omitempty"`
	SkillTargetRule       uint32 `protobuf:"varint,11,opt,name=SkillTargetRule,proto3" json:"SkillTargetRule,omitempty"`
	AttackSpeedAffectRate int32  `protobuf:"varint,14,opt,name=AttackSpeedAffectRate,proto3" json:"AttackSpeedAffectRate,omitempty"`
	TriggerWhenControlled bool   `protobuf:"varint,20,opt,name=TriggerWhenControlled,proto3" json:"TriggerWhenControlled,omitempty"`
	Property              string `protobuf:"bytes,21,opt,name=property,proto3" json:"property,omitempty"`
	Param1                string `protobuf:"bytes,22,opt,name=param1,proto3" json:"param1,omitempty"`
	Param2                string `protobuf:"bytes,23,opt,name=param2,proto3" json:"param2,omitempty"`
	Param3                string `protobuf:"bytes,24,opt,name=param3,proto3" json:"param3,omitempty"`
	OutSkillDesc          string `protobuf:"bytes,25,opt,name=OutSkillDesc,proto3" json:"OutSkillDesc,omitempty"`
	WorldViewShort        string `protobuf:"bytes,26,opt,name=WorldViewShort,proto3" json:"WorldViewShort,omitempty"`
}

func (x *ResSkillCfgInfo) Reset() {
	*x = ResSkillCfgInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResSkillCfgInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResSkillCfgInfo) ProtoMessage() {}

func (x *ResSkillCfgInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResSkillCfgInfo.ProtoReflect.Descriptor instead.
func (*ResSkillCfgInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{13}
}

func (x *ResSkillCfgInfo) GetCfgID() int32 {
	if x != nil {
		return x.CfgID
	}
	return 0
}

func (x *ResSkillCfgInfo) GetSkillName() string {
	if x != nil {
		return x.SkillName
	}
	return ""
}

func (x *ResSkillCfgInfo) GetSkillDesc() string {
	if x != nil {
		return x.SkillDesc
	}
	return ""
}

func (x *ResSkillCfgInfo) GetSkillUpTip() string {
	if x != nil {
		return x.SkillUpTip
	}
	return ""
}

func (x *ResSkillCfgInfo) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *ResSkillCfgInfo) GetModelPath() string {
	if x != nil {
		return x.ModelPath
	}
	return ""
}

func (x *ResSkillCfgInfo) GetCoolDown() int32 {
	if x != nil {
		return x.CoolDown
	}
	return 0
}

func (x *ResSkillCfgInfo) GetPrefab() string {
	if x != nil {
		return x.Prefab
	}
	return ""
}

func (x *ResSkillCfgInfo) GetMaxAttackDistance() int32 {
	if x != nil {
		return x.MaxAttackDistance
	}
	return 0
}

func (x *ResSkillCfgInfo) GetSkillTargetRule() uint32 {
	if x != nil {
		return x.SkillTargetRule
	}
	return 0
}

func (x *ResSkillCfgInfo) GetAttackSpeedAffectRate() int32 {
	if x != nil {
		return x.AttackSpeedAffectRate
	}
	return 0
}

func (x *ResSkillCfgInfo) GetTriggerWhenControlled() bool {
	if x != nil {
		return x.TriggerWhenControlled
	}
	return false
}

func (x *ResSkillCfgInfo) GetProperty() string {
	if x != nil {
		return x.Property
	}
	return ""
}

func (x *ResSkillCfgInfo) GetParam1() string {
	if x != nil {
		return x.Param1
	}
	return ""
}

func (x *ResSkillCfgInfo) GetParam2() string {
	if x != nil {
		return x.Param2
	}
	return ""
}

func (x *ResSkillCfgInfo) GetParam3() string {
	if x != nil {
		return x.Param3
	}
	return ""
}

func (x *ResSkillCfgInfo) GetOutSkillDesc() string {
	if x != nil {
		return x.OutSkillDesc
	}
	return ""
}

func (x *ResSkillCfgInfo) GetWorldViewShort() string {
	if x != nil {
		return x.WorldViewShort
	}
	return ""
}

type ResDT_SkillDynamicIndicatorActorStateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateParam []*ResDT_IntParamArrayNode `protobuf:"bytes,1,rep,name=StateParam,proto3" json:"StateParam,omitempty"`
}

func (x *ResDT_SkillDynamicIndicatorActorStateInfo) Reset() {
	*x = ResDT_SkillDynamicIndicatorActorStateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_SkillDynamicIndicatorActorStateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_SkillDynamicIndicatorActorStateInfo) ProtoMessage() {}

func (x *ResDT_SkillDynamicIndicatorActorStateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_SkillDynamicIndicatorActorStateInfo.ProtoReflect.Descriptor instead.
func (*ResDT_SkillDynamicIndicatorActorStateInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{14}
}

func (x *ResDT_SkillDynamicIndicatorActorStateInfo) GetStateParam() []*ResDT_IntParamArrayNode {
	if x != nil {
		return x.StateParam
	}
	return nil
}

type ResDT_SkillFunc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillFuncType  uint32                     `protobuf:"varint,1,opt,name=SkillFuncType,proto3" json:"SkillFuncType,omitempty"`
	SkillFuncFreq  uint32                     `protobuf:"varint,2,opt,name=SkillFuncFreq,proto3" json:"SkillFuncFreq,omitempty"`
	SkillFuncParam []*ResDT_IntParamArrayNode `protobuf:"bytes,3,rep,name=SkillFuncParam,proto3" json:"SkillFuncParam,omitempty"`
}

func (x *ResDT_SkillFunc) Reset() {
	*x = ResDT_SkillFunc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_SkillFunc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_SkillFunc) ProtoMessage() {}

func (x *ResDT_SkillFunc) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_SkillFunc.ProtoReflect.Descriptor instead.
func (*ResDT_SkillFunc) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{15}
}

func (x *ResDT_SkillFunc) GetSkillFuncType() uint32 {
	if x != nil {
		return x.SkillFuncType
	}
	return 0
}

func (x *ResDT_SkillFunc) GetSkillFuncFreq() uint32 {
	if x != nil {
		return x.SkillFuncFreq
	}
	return 0
}

func (x *ResDT_SkillFunc) GetSkillFuncParam() []*ResDT_IntParamArrayNode {
	if x != nil {
		return x.SkillFuncParam
	}
	return nil
}

type ResDT_SkillPassiveCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConditionType  uint32                     `protobuf:"varint,1,opt,name=ConditionType,proto3" json:"ConditionType,omitempty"`
	ConditionParam []*ResDT_IntParamArrayNode `protobuf:"bytes,2,rep,name=ConditionParam,proto3" json:"ConditionParam,omitempty"`
}

func (x *ResDT_SkillPassiveCondition) Reset() {
	*x = ResDT_SkillPassiveCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_SkillPassiveCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_SkillPassiveCondition) ProtoMessage() {}

func (x *ResDT_SkillPassiveCondition) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_SkillPassiveCondition.ProtoReflect.Descriptor instead.
func (*ResDT_SkillPassiveCondition) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{16}
}

func (x *ResDT_SkillPassiveCondition) GetConditionType() uint32 {
	if x != nil {
		return x.ConditionType
	}
	return 0
}

func (x *ResDT_SkillPassiveCondition) GetConditionParam() []*ResDT_IntParamArrayNode {
	if x != nil {
		return x.ConditionParam
	}
	return nil
}

type ResDT_ShowBuffType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     int32   `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Params   []int32 `protobuf:"varint,2,rep,packed,name=Params,proto3" json:"Params,omitempty"`
	Priority int32   `protobuf:"varint,3,opt,name=Priority,proto3" json:"Priority,omitempty"`
}

func (x *ResDT_ShowBuffType) Reset() {
	*x = ResDT_ShowBuffType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_ShowBuffType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_ShowBuffType) ProtoMessage() {}

func (x *ResDT_ShowBuffType) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_ShowBuffType.ProtoReflect.Descriptor instead.
func (*ResDT_ShowBuffType) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{17}
}

func (x *ResDT_ShowBuffType) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ResDT_ShowBuffType) GetParams() []int32 {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *ResDT_ShowBuffType) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type ResDT_SkillMarkLayerEffectName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LayerEffectPath string `protobuf:"bytes,1,opt,name=LayerEffectPath,proto3" json:"LayerEffectPath,omitempty"`
}

func (x *ResDT_SkillMarkLayerEffectName) Reset() {
	*x = ResDT_SkillMarkLayerEffectName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_SkillMarkLayerEffectName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_SkillMarkLayerEffectName) ProtoMessage() {}

func (x *ResDT_SkillMarkLayerEffectName) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_SkillMarkLayerEffectName.ProtoReflect.Descriptor instead.
func (*ResDT_SkillMarkLayerEffectName) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{18}
}

func (x *ResDT_SkillMarkLayerEffectName) GetLayerEffectPath() string {
	if x != nil {
		return x.LayerEffectPath
	}
	return ""
}

type ResSkillMarkCfgInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CfgID                                 int32                             `protobuf:"varint,1,opt,name=CfgID,proto3" json:"CfgID,omitempty"`
	DependCfgID                           int32                             `protobuf:"varint,2,opt,name=DependCfgID,proto3" json:"DependCfgID,omitempty"`
	MarkName                              string                            `protobuf:"bytes,3,opt,name=MarkName,proto3" json:"MarkName,omitempty"`
	MarkDesc                              string                            `protobuf:"bytes,4,opt,name=MarkDesc,proto3" json:"MarkDesc,omitempty"`
	ActionName                            string                            `protobuf:"bytes,5,opt,name=ActionName,proto3" json:"ActionName,omitempty"`
	MaxLayer                              int32                             `protobuf:"varint,6,opt,name=MaxLayer,proto3" json:"MaxLayer,omitempty"`
	CostLayer                             int32                             `protobuf:"varint,7,opt,name=CostLayer,proto3" json:"CostLayer,omitempty"`
	TriggerLayer                          int32                             `protobuf:"varint,8,opt,name=TriggerLayer,proto3" json:"TriggerLayer,omitempty"`
	ImmuneTime                            int32                             `protobuf:"varint,9,opt,name=ImmuneTime,proto3" json:"ImmuneTime,omitempty"`
	LastMaxTime                           int32                             `protobuf:"varint,10,opt,name=LastMaxTime,proto3" json:"LastMaxTime,omitempty"`
	AddMarkImmuneTime                     int32                             `protobuf:"varint,11,opt,name=AddMarkImmuneTime,proto3" json:"AddMarkImmuneTime,omitempty"`
	AutoTrigger                           uint32                            `protobuf:"varint,12,opt,name=AutoTrigger,proto3" json:"AutoTrigger,omitempty"`
	AutoTriggerOnDead                     uint32                            `protobuf:"varint,13,opt,name=AutoTriggerOnDead,proto3" json:"AutoTriggerOnDead,omitempty"`
	EffectMask                            uint32                            `protobuf:"varint,14,opt,name=EffectMask,proto3" json:"EffectMask,omitempty"`
	LayerEffectName                       []*ResDT_SkillMarkLayerEffectName `protobuf:"bytes,15,rep,name=LayerEffectName,proto3" json:"LayerEffectName,omitempty"`
	HostPlayerTriggerParticleSortingOrder int32                             `protobuf:"varint,16,opt,name=HostPlayerTriggerParticleSortingOrder,proto3" json:"HostPlayerTriggerParticleSortingOrder,omitempty"`
	BuffID                                int32                             `protobuf:"varint,17,opt,name=BuffID,proto3" json:"BuffID,omitempty"`
	BuffTargetType                        int32                             `protobuf:"varint,18,opt,name=BuffTargetType,proto3" json:"BuffTargetType,omitempty"`
}

func (x *ResSkillMarkCfgInfo) Reset() {
	*x = ResSkillMarkCfgInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResSkillMarkCfgInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResSkillMarkCfgInfo) ProtoMessage() {}

func (x *ResSkillMarkCfgInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResSkillMarkCfgInfo.ProtoReflect.Descriptor instead.
func (*ResSkillMarkCfgInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{19}
}

func (x *ResSkillMarkCfgInfo) GetCfgID() int32 {
	if x != nil {
		return x.CfgID
	}
	return 0
}

func (x *ResSkillMarkCfgInfo) GetDependCfgID() int32 {
	if x != nil {
		return x.DependCfgID
	}
	return 0
}

func (x *ResSkillMarkCfgInfo) GetMarkName() string {
	if x != nil {
		return x.MarkName
	}
	return ""
}

func (x *ResSkillMarkCfgInfo) GetMarkDesc() string {
	if x != nil {
		return x.MarkDesc
	}
	return ""
}

func (x *ResSkillMarkCfgInfo) GetActionName() string {
	if x != nil {
		return x.ActionName
	}
	return ""
}

func (x *ResSkillMarkCfgInfo) GetMaxLayer() int32 {
	if x != nil {
		return x.MaxLayer
	}
	return 0
}

func (x *ResSkillMarkCfgInfo) GetCostLayer() int32 {
	if x != nil {
		return x.CostLayer
	}
	return 0
}

func (x *ResSkillMarkCfgInfo) GetTriggerLayer() int32 {
	if x != nil {
		return x.TriggerLayer
	}
	return 0
}

func (x *ResSkillMarkCfgInfo) GetImmuneTime() int32 {
	if x != nil {
		return x.ImmuneTime
	}
	return 0
}

func (x *ResSkillMarkCfgInfo) GetLastMaxTime() int32 {
	if x != nil {
		return x.LastMaxTime
	}
	return 0
}

func (x *ResSkillMarkCfgInfo) GetAddMarkImmuneTime() int32 {
	if x != nil {
		return x.AddMarkImmuneTime
	}
	return 0
}

func (x *ResSkillMarkCfgInfo) GetAutoTrigger() uint32 {
	if x != nil {
		return x.AutoTrigger
	}
	return 0
}

func (x *ResSkillMarkCfgInfo) GetAutoTriggerOnDead() uint32 {
	if x != nil {
		return x.AutoTriggerOnDead
	}
	return 0
}

func (x *ResSkillMarkCfgInfo) GetEffectMask() uint32 {
	if x != nil {
		return x.EffectMask
	}
	return 0
}

func (x *ResSkillMarkCfgInfo) GetLayerEffectName() []*ResDT_SkillMarkLayerEffectName {
	if x != nil {
		return x.LayerEffectName
	}
	return nil
}

func (x *ResSkillMarkCfgInfo) GetHostPlayerTriggerParticleSortingOrder() int32 {
	if x != nil {
		return x.HostPlayerTriggerParticleSortingOrder
	}
	return 0
}

func (x *ResSkillMarkCfgInfo) GetBuffID() int32 {
	if x != nil {
		return x.BuffID
	}
	return 0
}

func (x *ResSkillMarkCfgInfo) GetBuffTargetType() int32 {
	if x != nil {
		return x.BuffTargetType
	}
	return 0
}

type ResSkillPassiveCfgInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CfgID                 int32                          `protobuf:"varint,1,opt,name=CfgID,proto3" json:"CfgID,omitempty"`
	CoolDown              int32                          `protobuf:"varint,2,opt,name=CoolDown,proto3" json:"CoolDown,omitempty"`
	ShowAsElite           uint32                         `protobuf:"varint,3,opt,name=ShowAsElite,proto3" json:"ShowAsElite,omitempty"`
	SkillType             int32                          `protobuf:"varint,4,opt,name=SkillType,proto3" json:"SkillType,omitempty"`
	PassiveName           string                         `protobuf:"bytes,5,opt,name=PassiveName,proto3" json:"PassiveName,omitempty"`
	PassiveDesc           string                         `protobuf:"bytes,6,opt,name=PassiveDesc,proto3" json:"PassiveDesc,omitempty"`
	ActionName            string                         `protobuf:"bytes,7,opt,name=ActionName,proto3" json:"ActionName,omitempty"`
	PassiveEventType      uint32                         `protobuf:"varint,8,opt,name=PassiveEventType,proto3" json:"PassiveEventType,omitempty"`
	PassiveEventParam1    int32                          `protobuf:"varint,9,opt,name=PassiveEventParam1,proto3" json:"PassiveEventParam1,omitempty"`
	PassiveEventParam2    int32                          `protobuf:"varint,10,opt,name=PassiveEventParam2,proto3" json:"PassiveEventParam2,omitempty"`
	PassiveEventParam3    int32                          `protobuf:"varint,11,opt,name=PassiveEventParam3,proto3" json:"PassiveEventParam3,omitempty"`
	PassiveEventParam4    int32                          `protobuf:"varint,12,opt,name=PassiveEventParam4,proto3" json:"PassiveEventParam4,omitempty"`
	PassiveEventParam5    int32                          `protobuf:"varint,13,opt,name=PassiveEventParam5,proto3" json:"PassiveEventParam5,omitempty"`
	PassiveEventParam6    int32                          `protobuf:"varint,14,opt,name=PassiveEventParam6,proto3" json:"PassiveEventParam6,omitempty"`
	PassiveEventParam7    int32                          `protobuf:"varint,15,opt,name=PassiveEventParam7,proto3" json:"PassiveEventParam7,omitempty"`
	PassiveConditonMode   uint32                         `protobuf:"varint,16,opt,name=PassiveConditonMode,proto3" json:"PassiveConditonMode,omitempty"`
	PassiveConditon       []*ResDT_SkillPassiveCondition `protobuf:"bytes,17,rep,name=PassiveConditon,proto3" json:"PassiveConditon,omitempty"`
	PassiveExposing       uint32                         `protobuf:"varint,19,opt,name=PassiveExposing,proto3" json:"PassiveExposing,omitempty"`
	NotResetCondition     uint32                         `protobuf:"varint,20,opt,name=NotResetCondition,proto3" json:"NotResetCondition,omitempty"`
	PassiveAffix          string                         `protobuf:"bytes,21,opt,name=PassiveAffix,proto3" json:"PassiveAffix,omitempty"`
	BindSkinID            uint32                         `protobuf:"varint,22,opt,name=BindSkinID,proto3" json:"BindSkinID,omitempty"`
	TogetherUpdateGroupID uint32                         `protobuf:"varint,23,opt,name=TogetherUpdateGroupID,proto3" json:"TogetherUpdateGroupID,omitempty"`
	DisplayCoolDown       bool                           `protobuf:"varint,24,opt,name=DisplayCoolDown,proto3" json:"DisplayCoolDown,omitempty"`
}

func (x *ResSkillPassiveCfgInfo) Reset() {
	*x = ResSkillPassiveCfgInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResSkillPassiveCfgInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResSkillPassiveCfgInfo) ProtoMessage() {}

func (x *ResSkillPassiveCfgInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResSkillPassiveCfgInfo.ProtoReflect.Descriptor instead.
func (*ResSkillPassiveCfgInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{20}
}

func (x *ResSkillPassiveCfgInfo) GetCfgID() int32 {
	if x != nil {
		return x.CfgID
	}
	return 0
}

func (x *ResSkillPassiveCfgInfo) GetCoolDown() int32 {
	if x != nil {
		return x.CoolDown
	}
	return 0
}

func (x *ResSkillPassiveCfgInfo) GetShowAsElite() uint32 {
	if x != nil {
		return x.ShowAsElite
	}
	return 0
}

func (x *ResSkillPassiveCfgInfo) GetSkillType() int32 {
	if x != nil {
		return x.SkillType
	}
	return 0
}

func (x *ResSkillPassiveCfgInfo) GetPassiveName() string {
	if x != nil {
		return x.PassiveName
	}
	return ""
}

func (x *ResSkillPassiveCfgInfo) GetPassiveDesc() string {
	if x != nil {
		return x.PassiveDesc
	}
	return ""
}

func (x *ResSkillPassiveCfgInfo) GetActionName() string {
	if x != nil {
		return x.ActionName
	}
	return ""
}

func (x *ResSkillPassiveCfgInfo) GetPassiveEventType() uint32 {
	if x != nil {
		return x.PassiveEventType
	}
	return 0
}

func (x *ResSkillPassiveCfgInfo) GetPassiveEventParam1() int32 {
	if x != nil {
		return x.PassiveEventParam1
	}
	return 0
}

func (x *ResSkillPassiveCfgInfo) GetPassiveEventParam2() int32 {
	if x != nil {
		return x.PassiveEventParam2
	}
	return 0
}

func (x *ResSkillPassiveCfgInfo) GetPassiveEventParam3() int32 {
	if x != nil {
		return x.PassiveEventParam3
	}
	return 0
}

func (x *ResSkillPassiveCfgInfo) GetPassiveEventParam4() int32 {
	if x != nil {
		return x.PassiveEventParam4
	}
	return 0
}

func (x *ResSkillPassiveCfgInfo) GetPassiveEventParam5() int32 {
	if x != nil {
		return x.PassiveEventParam5
	}
	return 0
}

func (x *ResSkillPassiveCfgInfo) GetPassiveEventParam6() int32 {
	if x != nil {
		return x.PassiveEventParam6
	}
	return 0
}

func (x *ResSkillPassiveCfgInfo) GetPassiveEventParam7() int32 {
	if x != nil {
		return x.PassiveEventParam7
	}
	return 0
}

func (x *ResSkillPassiveCfgInfo) GetPassiveConditonMode() uint32 {
	if x != nil {
		return x.PassiveConditonMode
	}
	return 0
}

func (x *ResSkillPassiveCfgInfo) GetPassiveConditon() []*ResDT_SkillPassiveCondition {
	if x != nil {
		return x.PassiveConditon
	}
	return nil
}

func (x *ResSkillPassiveCfgInfo) GetPassiveExposing() uint32 {
	if x != nil {
		return x.PassiveExposing
	}
	return 0
}

func (x *ResSkillPassiveCfgInfo) GetNotResetCondition() uint32 {
	if x != nil {
		return x.NotResetCondition
	}
	return 0
}

func (x *ResSkillPassiveCfgInfo) GetPassiveAffix() string {
	if x != nil {
		return x.PassiveAffix
	}
	return ""
}

func (x *ResSkillPassiveCfgInfo) GetBindSkinID() uint32 {
	if x != nil {
		return x.BindSkinID
	}
	return 0
}

func (x *ResSkillPassiveCfgInfo) GetTogetherUpdateGroupID() uint32 {
	if x != nil {
		return x.TogetherUpdateGroupID
	}
	return 0
}

func (x *ResSkillPassiveCfgInfo) GetDisplayCoolDown() bool {
	if x != nil {
		return x.DisplayCoolDown
	}
	return false
}

type ResRandomSkillPassiveRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RandomSkillPassiveKey int32                      `protobuf:"varint,1,opt,name=RandomSkillPassiveKey,proto3" json:"RandomSkillPassiveKey,omitempty"`
	RandomSkillPassiveID1 []*ResDT_IntParamArrayNode `protobuf:"bytes,2,rep,name=RandomSkillPassiveID1,proto3" json:"RandomSkillPassiveID1,omitempty"`
	RandomSkillPassiveID2 []*ResDT_IntParamArrayNode `protobuf:"bytes,3,rep,name=RandomSkillPassiveID2,proto3" json:"RandomSkillPassiveID2,omitempty"`
}

func (x *ResRandomSkillPassiveRule) Reset() {
	*x = ResRandomSkillPassiveRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResRandomSkillPassiveRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResRandomSkillPassiveRule) ProtoMessage() {}

func (x *ResRandomSkillPassiveRule) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResRandomSkillPassiveRule.ProtoReflect.Descriptor instead.
func (*ResRandomSkillPassiveRule) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{21}
}

func (x *ResRandomSkillPassiveRule) GetRandomSkillPassiveKey() int32 {
	if x != nil {
		return x.RandomSkillPassiveKey
	}
	return 0
}

func (x *ResRandomSkillPassiveRule) GetRandomSkillPassiveID1() []*ResDT_IntParamArrayNode {
	if x != nil {
		return x.RandomSkillPassiveID1
	}
	return nil
}

func (x *ResRandomSkillPassiveRule) GetRandomSkillPassiveID2() []*ResDT_IntParamArrayNode {
	if x != nil {
		return x.RandomSkillPassiveID2
	}
	return nil
}

type ResSkillCombineCfgInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CfgID                      int32               `protobuf:"varint,1,opt,name=CfgID,proto3" json:"CfgID,omitempty"`
	PermanentBuffType          uint32              `protobuf:"varint,2,opt,name=PermanentBuffType,proto3" json:"PermanentBuffType,omitempty"`
	TriggerRate                int32               `protobuf:"varint,3,opt,name=TriggerRate,proto3" json:"TriggerRate,omitempty"`
	CroupID                    int32               `protobuf:"varint,4,opt,name=CroupID,proto3" json:"CroupID,omitempty"`
	ClearRule                  uint32              `protobuf:"varint,6,opt,name=ClearRule,proto3" json:"ClearRule,omitempty"`
	OverlayRule                uint32              `protobuf:"varint,7,opt,name=OverlayRule,proto3" json:"OverlayRule,omitempty"`
	OverlayMax                 uint32              `protobuf:"varint,8,opt,name=OverlayMax,proto3" json:"OverlayMax,omitempty"`
	EffectType                 int32               `protobuf:"varint,9,opt,name=EffectType,proto3" json:"EffectType,omitempty"`
	ControlEffectType          uint32              `protobuf:"varint,11,opt,name=ControlEffectType,proto3" json:"ControlEffectType,omitempty"`
	ShowType                   uint32              `protobuf:"varint,12,opt,name=ShowType,proto3" json:"ShowType,omitempty"`
	Prefab                     string              `protobuf:"bytes,16,opt,name=Prefab,proto3" json:"Prefab,omitempty"`
	Duration                   int32               `protobuf:"varint,17,opt,name=Duration,proto3" json:"Duration,omitempty"`
	ChangeDurationProperty     uint32              `protobuf:"varint,18,opt,name=ChangeDurationProperty,proto3" json:"ChangeDurationProperty,omitempty"`
	ChangeDurationPropertyRate int32               `protobuf:"varint,19,opt,name=ChangeDurationPropertyRate,proto3" json:"ChangeDurationPropertyRate,omitempty"`
	SkillFuncInfo              []*ResDT_SkillFunc  `protobuf:"bytes,20,rep,name=SkillFuncInfo,proto3" json:"SkillFuncInfo,omitempty"`
	ExtraEffectSlotType        int32               `protobuf:"varint,24,opt,name=ExtraEffectSlotType,proto3" json:"ExtraEffectSlotType,omitempty"`
	TakeEffectCountMax         uint32              `protobuf:"varint,25,opt,name=takeEffectCountMax,proto3" json:"takeEffectCountMax,omitempty"`
	EffectSubTypeMask          int32               `protobuf:"varint,29,opt,name=EffectSubTypeMask,proto3" json:"EffectSubTypeMask,omitempty"`
	ImmunityDamageMask         int32               `protobuf:"varint,30,opt,name=ImmunityDamageMask,proto3" json:"ImmunityDamageMask,omitempty"`
	ShowBuffType               *ResDT_ShowBuffType `protobuf:"bytes,31,opt,name=ShowBuffType,proto3" json:"ShowBuffType,omitempty"`
	OverlayNotRelatedSource    bool                `protobuf:"varint,32,opt,name=OverlayNotRelatedSource,proto3" json:"OverlayNotRelatedSource,omitempty"`
}

func (x *ResSkillCombineCfgInfo) Reset() {
	*x = ResSkillCombineCfgInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResSkillCombineCfgInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResSkillCombineCfgInfo) ProtoMessage() {}

func (x *ResSkillCombineCfgInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResSkillCombineCfgInfo.ProtoReflect.Descriptor instead.
func (*ResSkillCombineCfgInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{22}
}

func (x *ResSkillCombineCfgInfo) GetCfgID() int32 {
	if x != nil {
		return x.CfgID
	}
	return 0
}

func (x *ResSkillCombineCfgInfo) GetPermanentBuffType() uint32 {
	if x != nil {
		return x.PermanentBuffType
	}
	return 0
}

func (x *ResSkillCombineCfgInfo) GetTriggerRate() int32 {
	if x != nil {
		return x.TriggerRate
	}
	return 0
}

func (x *ResSkillCombineCfgInfo) GetCroupID() int32 {
	if x != nil {
		return x.CroupID
	}
	return 0
}

func (x *ResSkillCombineCfgInfo) GetClearRule() uint32 {
	if x != nil {
		return x.ClearRule
	}
	return 0
}

func (x *ResSkillCombineCfgInfo) GetOverlayRule() uint32 {
	if x != nil {
		return x.OverlayRule
	}
	return 0
}

func (x *ResSkillCombineCfgInfo) GetOverlayMax() uint32 {
	if x != nil {
		return x.OverlayMax
	}
	return 0
}

func (x *ResSkillCombineCfgInfo) GetEffectType() int32 {
	if x != nil {
		return x.EffectType
	}
	return 0
}

func (x *ResSkillCombineCfgInfo) GetControlEffectType() uint32 {
	if x != nil {
		return x.ControlEffectType
	}
	return 0
}

func (x *ResSkillCombineCfgInfo) GetShowType() uint32 {
	if x != nil {
		return x.ShowType
	}
	return 0
}

func (x *ResSkillCombineCfgInfo) GetPrefab() string {
	if x != nil {
		return x.Prefab
	}
	return ""
}

func (x *ResSkillCombineCfgInfo) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *ResSkillCombineCfgInfo) GetChangeDurationProperty() uint32 {
	if x != nil {
		return x.ChangeDurationProperty
	}
	return 0
}

func (x *ResSkillCombineCfgInfo) GetChangeDurationPropertyRate() int32 {
	if x != nil {
		return x.ChangeDurationPropertyRate
	}
	return 0
}

func (x *ResSkillCombineCfgInfo) GetSkillFuncInfo() []*ResDT_SkillFunc {
	if x != nil {
		return x.SkillFuncInfo
	}
	return nil
}

func (x *ResSkillCombineCfgInfo) GetExtraEffectSlotType() int32 {
	if x != nil {
		return x.ExtraEffectSlotType
	}
	return 0
}

func (x *ResSkillCombineCfgInfo) GetTakeEffectCountMax() uint32 {
	if x != nil {
		return x.TakeEffectCountMax
	}
	return 0
}

func (x *ResSkillCombineCfgInfo) GetEffectSubTypeMask() int32 {
	if x != nil {
		return x.EffectSubTypeMask
	}
	return 0
}

func (x *ResSkillCombineCfgInfo) GetImmunityDamageMask() int32 {
	if x != nil {
		return x.ImmunityDamageMask
	}
	return 0
}

func (x *ResSkillCombineCfgInfo) GetShowBuffType() *ResDT_ShowBuffType {
	if x != nil {
		return x.ShowBuffType
	}
	return nil
}

func (x *ResSkillCombineCfgInfo) GetOverlayNotRelatedSource() bool {
	if x != nil {
		return x.OverlayNotRelatedSource
	}
	return false
}

type ResBuffRmvInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CfgID               int32 `protobuf:"varint,1,opt,name=CfgID,proto3" json:"CfgID,omitempty"`
	RmvLayer            int32 `protobuf:"varint,2,opt,name=RmvLayer,proto3" json:"RmvLayer,omitempty"`
	NewLayerLengthRatio int32 `protobuf:"varint,3,opt,name=NewLayerLengthRatio,proto3" json:"NewLayerLengthRatio,omitempty"`
}

func (x *ResBuffRmvInfo) Reset() {
	*x = ResBuffRmvInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResBuffRmvInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResBuffRmvInfo) ProtoMessage() {}

func (x *ResBuffRmvInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResBuffRmvInfo.ProtoReflect.Descriptor instead.
func (*ResBuffRmvInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{23}
}

func (x *ResBuffRmvInfo) GetCfgID() int32 {
	if x != nil {
		return x.CfgID
	}
	return 0
}

func (x *ResBuffRmvInfo) GetRmvLayer() int32 {
	if x != nil {
		return x.RmvLayer
	}
	return 0
}

func (x *ResBuffRmvInfo) GetNewLayerLengthRatio() int32 {
	if x != nil {
		return x.NewLayerLengthRatio
	}
	return 0
}

type ResGlobalInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfType  uint32 `protobuf:"varint,1,opt,name=ConfType,proto3" json:"ConfType,omitempty"`
	ConfValue uint32 `protobuf:"varint,2,opt,name=ConfValue,proto3" json:"ConfValue,omitempty"`
}

func (x *ResGlobalInfo) Reset() {
	*x = ResGlobalInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGlobalInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGlobalInfo) ProtoMessage() {}

func (x *ResGlobalInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGlobalInfo.ProtoReflect.Descriptor instead.
func (*ResGlobalInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{24}
}

func (x *ResGlobalInfo) GetConfType() uint32 {
	if x != nil {
		return x.ConfType
	}
	return 0
}

func (x *ResGlobalInfo) GetConfValue() uint32 {
	if x != nil {
		return x.ConfValue
	}
	return 0
}

type ResBattleGlobalTxtInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxtConfType uint32 `protobuf:"varint,1,opt,name=TxtConfType,proto3" json:"TxtConfType,omitempty"`
	TextVal     string `protobuf:"bytes,2,opt,name=TextVal,proto3" json:"TextVal,omitempty"`
}

func (x *ResBattleGlobalTxtInfo) Reset() {
	*x = ResBattleGlobalTxtInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResBattleGlobalTxtInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResBattleGlobalTxtInfo) ProtoMessage() {}

func (x *ResBattleGlobalTxtInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResBattleGlobalTxtInfo.ProtoReflect.Descriptor instead.
func (*ResBattleGlobalTxtInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{25}
}

func (x *ResBattleGlobalTxtInfo) GetTxtConfType() uint32 {
	if x != nil {
		return x.TxtConfType
	}
	return 0
}

func (x *ResBattleGlobalTxtInfo) GetTextVal() string {
	if x != nil {
		return x.TextVal
	}
	return ""
}

type ResDT_ItemSrc_Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type uint32 `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	ID   uint32 `protobuf:"varint,2,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ResDT_ItemSrc_Info) Reset() {
	*x = ResDT_ItemSrc_Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_ItemSrc_Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_ItemSrc_Info) ProtoMessage() {}

func (x *ResDT_ItemSrc_Info) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_ItemSrc_Info.ProtoReflect.Descriptor instead.
func (*ResDT_ItemSrc_Info) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{26}
}

func (x *ResDT_ItemSrc_Info) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ResDT_ItemSrc_Info) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

type ResDT_FuncEft_Obj struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    uint32 `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	ValType uint32 `protobuf:"varint,2,opt,name=ValType,proto3" json:"ValType,omitempty"`
	Value   int32  `protobuf:"varint,3,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *ResDT_FuncEft_Obj) Reset() {
	*x = ResDT_FuncEft_Obj{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_FuncEft_Obj) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_FuncEft_Obj) ProtoMessage() {}

func (x *ResDT_FuncEft_Obj) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_FuncEft_Obj.ProtoReflect.Descriptor instead.
func (*ResDT_FuncEft_Obj) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{27}
}

func (x *ResDT_FuncEft_Obj) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ResDT_FuncEft_Obj) GetValType() uint32 {
	if x != nil {
		return x.ValType
	}
	return 0
}

func (x *ResDT_FuncEft_Obj) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type ResSymbolInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                uint32                `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name              string                `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Desc              string                `protobuf:"bytes,3,opt,name=Desc,proto3" json:"Desc,omitempty"`
	Icon              uint32                `protobuf:"varint,4,opt,name=Icon,proto3" json:"Icon,omitempty"`
	CommonIcon        uint32                `protobuf:"varint,5,opt,name=CommonIcon,proto3" json:"CommonIcon,omitempty"`
	Level             uint32                `protobuf:"varint,6,opt,name=Level,proto3" json:"Level,omitempty"`
	Color             uint32                `protobuf:"varint,7,opt,name=Color,proto3" json:"Color,omitempty"`
	IsShow            uint32                `protobuf:"varint,8,opt,name=IsShow,proto3" json:"IsShow,omitempty"`
	Type              uint32                `protobuf:"varint,9,opt,name=Type,proto3" json:"Type,omitempty"`
	OverLimit         int32                 `protobuf:"varint,10,opt,name=OverLimit,proto3" json:"OverLimit,omitempty"`
	CoinBuy           uint32                `protobuf:"varint,11,opt,name=CoinBuy,proto3" json:"CoinBuy,omitempty"`
	CouponsBuy        uint32                `protobuf:"varint,12,opt,name=CouponsBuy,proto3" json:"CouponsBuy,omitempty"`
	PVPCoinBuy        uint32                `protobuf:"varint,13,opt,name=PVPCoinBuy,proto3" json:"PVPCoinBuy,omitempty"`
	BurningCoinBuy    uint32                `protobuf:"varint,14,opt,name=BurningCoinBuy,proto3" json:"BurningCoinBuy,omitempty"`
	ArenaCoinBuy      uint32                `protobuf:"varint,15,opt,name=ArenaCoinBuy,proto3" json:"ArenaCoinBuy,omitempty"`
	GuildCoinBuy      uint32                `protobuf:"varint,16,opt,name=GuildCoinBuy,proto3" json:"GuildCoinBuy,omitempty"`
	DiamondBuy        uint32                `protobuf:"varint,17,opt,name=DiamondBuy,proto3" json:"DiamondBuy,omitempty"`
	IsBuyMixPay       uint32                `protobuf:"varint,18,opt,name=IsBuyMixPay,proto3" json:"IsBuyMixPay,omitempty"`
	CombatEft         int32                 `protobuf:"varint,19,opt,name=CombatEft,proto3" json:"CombatEft,omitempty"`
	GuildFacLv        uint32                `protobuf:"varint,20,opt,name=GuildFacLv,proto3" json:"GuildFacLv,omitempty"`
	GuildHisConstruct uint32                `protobuf:"varint,21,opt,name=GuildHisConstruct,proto3" json:"GuildHisConstruct,omitempty"`
	GuildConstruct    uint32                `protobuf:"varint,22,opt,name=GuildConstruct,proto3" json:"GuildConstruct,omitempty"`
	DisplayName       string                `protobuf:"bytes,23,opt,name=DisplayName,proto3" json:"DisplayName,omitempty"`
	LvlUpCoin         uint32                `protobuf:"varint,24,opt,name=LvlUpCoin,proto3" json:"LvlUpCoin,omitempty"`
	BreakCoin         uint32                `protobuf:"varint,25,opt,name=BreakCoin,proto3" json:"BreakCoin,omitempty"`
	InitSymbolID      uint32                `protobuf:"varint,26,opt,name=InitSymbolID,proto3" json:"InitSymbolID,omitempty"`
	ResetCoin         uint32                `protobuf:"varint,27,opt,name=ResetCoin,proto3" json:"ResetCoin,omitempty"`
	NeedResetPswd     uint32                `protobuf:"varint,28,opt,name=NeedResetPswd,proto3" json:"NeedResetPswd,omitempty"`
	InitOnTimeStr     string                `protobuf:"bytes,29,opt,name=InitOnTimeStr,proto3" json:"InitOnTimeStr,omitempty"`
	InitCnt           uint32                `protobuf:"varint,30,opt,name=InitCnt,proto3" json:"InitCnt,omitempty"`
	FuncEftList       []*ResDT_FuncEft_Obj  `protobuf:"bytes,31,rep,name=FuncEftList,proto3" json:"FuncEftList,omitempty"`
	PveEftList        []*ResDT_FuncEft_Obj  `protobuf:"bytes,32,rep,name=PveEftList,proto3" json:"PveEftList,omitempty"`
	SrcInfo           []*ResDT_ItemSrc_Info `protobuf:"bytes,33,rep,name=SrcInfo,proto3" json:"SrcInfo,omitempty"`
}

func (x *ResSymbolInfo) Reset() {
	*x = ResSymbolInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResSymbolInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResSymbolInfo) ProtoMessage() {}

func (x *ResSymbolInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResSymbolInfo.ProtoReflect.Descriptor instead.
func (*ResSymbolInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{28}
}

func (x *ResSymbolInfo) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResSymbolInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResSymbolInfo) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ResSymbolInfo) GetIcon() uint32 {
	if x != nil {
		return x.Icon
	}
	return 0
}

func (x *ResSymbolInfo) GetCommonIcon() uint32 {
	if x != nil {
		return x.CommonIcon
	}
	return 0
}

func (x *ResSymbolInfo) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ResSymbolInfo) GetColor() uint32 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *ResSymbolInfo) GetIsShow() uint32 {
	if x != nil {
		return x.IsShow
	}
	return 0
}

func (x *ResSymbolInfo) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ResSymbolInfo) GetOverLimit() int32 {
	if x != nil {
		return x.OverLimit
	}
	return 0
}

func (x *ResSymbolInfo) GetCoinBuy() uint32 {
	if x != nil {
		return x.CoinBuy
	}
	return 0
}

func (x *ResSymbolInfo) GetCouponsBuy() uint32 {
	if x != nil {
		return x.CouponsBuy
	}
	return 0
}

func (x *ResSymbolInfo) GetPVPCoinBuy() uint32 {
	if x != nil {
		return x.PVPCoinBuy
	}
	return 0
}

func (x *ResSymbolInfo) GetBurningCoinBuy() uint32 {
	if x != nil {
		return x.BurningCoinBuy
	}
	return 0
}

func (x *ResSymbolInfo) GetArenaCoinBuy() uint32 {
	if x != nil {
		return x.ArenaCoinBuy
	}
	return 0
}

func (x *ResSymbolInfo) GetGuildCoinBuy() uint32 {
	if x != nil {
		return x.GuildCoinBuy
	}
	return 0
}

func (x *ResSymbolInfo) GetDiamondBuy() uint32 {
	if x != nil {
		return x.DiamondBuy
	}
	return 0
}

func (x *ResSymbolInfo) GetIsBuyMixPay() uint32 {
	if x != nil {
		return x.IsBuyMixPay
	}
	return 0
}

func (x *ResSymbolInfo) GetCombatEft() int32 {
	if x != nil {
		return x.CombatEft
	}
	return 0
}

func (x *ResSymbolInfo) GetGuildFacLv() uint32 {
	if x != nil {
		return x.GuildFacLv
	}
	return 0
}

func (x *ResSymbolInfo) GetGuildHisConstruct() uint32 {
	if x != nil {
		return x.GuildHisConstruct
	}
	return 0
}

func (x *ResSymbolInfo) GetGuildConstruct() uint32 {
	if x != nil {
		return x.GuildConstruct
	}
	return 0
}

func (x *ResSymbolInfo) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ResSymbolInfo) GetLvlUpCoin() uint32 {
	if x != nil {
		return x.LvlUpCoin
	}
	return 0
}

func (x *ResSymbolInfo) GetBreakCoin() uint32 {
	if x != nil {
		return x.BreakCoin
	}
	return 0
}

func (x *ResSymbolInfo) GetInitSymbolID() uint32 {
	if x != nil {
		return x.InitSymbolID
	}
	return 0
}

func (x *ResSymbolInfo) GetResetCoin() uint32 {
	if x != nil {
		return x.ResetCoin
	}
	return 0
}

func (x *ResSymbolInfo) GetNeedResetPswd() uint32 {
	if x != nil {
		return x.NeedResetPswd
	}
	return 0
}

func (x *ResSymbolInfo) GetInitOnTimeStr() string {
	if x != nil {
		return x.InitOnTimeStr
	}
	return ""
}

func (x *ResSymbolInfo) GetInitCnt() uint32 {
	if x != nil {
		return x.InitCnt
	}
	return 0
}

func (x *ResSymbolInfo) GetFuncEftList() []*ResDT_FuncEft_Obj {
	if x != nil {
		return x.FuncEftList
	}
	return nil
}

func (x *ResSymbolInfo) GetPveEftList() []*ResDT_FuncEft_Obj {
	if x != nil {
		return x.PveEftList
	}
	return nil
}

func (x *ResSymbolInfo) GetSrcInfo() []*ResDT_ItemSrc_Info {
	if x != nil {
		return x.SrcInfo
	}
	return nil
}

type ResDT_ConditionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type             uint32  `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	KeyDetail        []int32 `protobuf:"varint,2,rep,packed,name=KeyDetail,proto3" json:"KeyDetail,omitempty"`
	ComparetorDetail []int32 `protobuf:"varint,3,rep,packed,name=ComparetorDetail,proto3" json:"ComparetorDetail,omitempty"`
	ValueDetail      []int32 `protobuf:"varint,4,rep,packed,name=ValueDetail,proto3" json:"ValueDetail,omitempty"`
}

func (x *ResDT_ConditionInfo) Reset() {
	*x = ResDT_ConditionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_ConditionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_ConditionInfo) ProtoMessage() {}

func (x *ResDT_ConditionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_ConditionInfo.ProtoReflect.Descriptor instead.
func (*ResDT_ConditionInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{29}
}

func (x *ResDT_ConditionInfo) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ResDT_ConditionInfo) GetKeyDetail() []int32 {
	if x != nil {
		return x.KeyDetail
	}
	return nil
}

func (x *ResDT_ConditionInfo) GetComparetorDetail() []int32 {
	if x != nil {
		return x.ComparetorDetail
	}
	return nil
}

func (x *ResDT_ConditionInfo) GetValueDetail() []int32 {
	if x != nil {
		return x.ValueDetail
	}
	return nil
}

type ResEvaluateStarInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CondID     uint32                 `protobuf:"varint,1,opt,name=CondID,proto3" json:"CondID,omitempty"`
	CondDesc   string                 `protobuf:"bytes,2,opt,name=CondDesc,proto3" json:"CondDesc,omitempty"`
	LogicType  uint32                 `protobuf:"varint,3,opt,name=LogicType,proto3" json:"LogicType,omitempty"`
	HideDetail uint32                 `protobuf:"varint,4,opt,name=HideDetail,proto3" json:"HideDetail,omitempty"`
	Conditions []*ResDT_ConditionInfo `protobuf:"bytes,5,rep,name=Conditions,proto3" json:"Conditions,omitempty"`
}

func (x *ResEvaluateStarInfo) Reset() {
	*x = ResEvaluateStarInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResEvaluateStarInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResEvaluateStarInfo) ProtoMessage() {}

func (x *ResEvaluateStarInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResEvaluateStarInfo.ProtoReflect.Descriptor instead.
func (*ResEvaluateStarInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{30}
}

func (x *ResEvaluateStarInfo) GetCondID() uint32 {
	if x != nil {
		return x.CondID
	}
	return 0
}

func (x *ResEvaluateStarInfo) GetCondDesc() string {
	if x != nil {
		return x.CondDesc
	}
	return ""
}

func (x *ResEvaluateStarInfo) GetLogicType() uint32 {
	if x != nil {
		return x.LogicType
	}
	return 0
}

func (x *ResEvaluateStarInfo) GetHideDetail() uint32 {
	if x != nil {
		return x.HideDetail
	}
	return 0
}

func (x *ResEvaluateStarInfo) GetConditions() []*ResDT_ConditionInfo {
	if x != nil {
		return x.Conditions
	}
	return nil
}

type ResDT_CompensateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelDiff uint32 `protobuf:"varint,1,opt,name=LevelDiff,proto3" json:"LevelDiff,omitempty"`
	ExtraRate uint32 `protobuf:"varint,2,opt,name=ExtraRate,proto3" json:"ExtraRate,omitempty"`
}

func (x *ResDT_CompensateInfo) Reset() {
	*x = ResDT_CompensateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_CompensateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_CompensateInfo) ProtoMessage() {}

func (x *ResDT_CompensateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_CompensateInfo.ProtoReflect.Descriptor instead.
func (*ResDT_CompensateInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{31}
}

func (x *ResDT_CompensateInfo) GetLevelDiff() uint32 {
	if x != nil {
		return x.LevelDiff
	}
	return 0
}

func (x *ResDT_CompensateInfo) GetExtraRate() uint32 {
	if x != nil {
		return x.ExtraRate
	}
	return 0
}

type ResDT_PickRuleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PickType      uint32   `protobuf:"varint,1,opt,name=PickType,proto3" json:"PickType,omitempty"`
	Param         []uint32 `protobuf:"varint,2,rep,packed,name=Param,proto3" json:"Param,omitempty"`
	AllowSwapHero uint32   `protobuf:"varint,3,opt,name=AllowSwapHero,proto3" json:"AllowSwapHero,omitempty"`
}

func (x *ResDT_PickRuleInfo) Reset() {
	*x = ResDT_PickRuleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_PickRuleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_PickRuleInfo) ProtoMessage() {}

func (x *ResDT_PickRuleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_PickRuleInfo.ProtoReflect.Descriptor instead.
func (*ResDT_PickRuleInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{32}
}

func (x *ResDT_PickRuleInfo) GetPickType() uint32 {
	if x != nil {
		return x.PickType
	}
	return 0
}

func (x *ResDT_PickRuleInfo) GetParam() []uint32 {
	if x != nil {
		return x.Param
	}
	return nil
}

func (x *ResDT_PickRuleInfo) GetAllowSwapHero() uint32 {
	if x != nil {
		return x.AllowSwapHero
	}
	return 0
}

type ResRenderCullingExclude struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ExludePrefabPath string `protobuf:"bytes,2,opt,name=ExludePrefabPath,proto3" json:"ExludePrefabPath,omitempty"`
}

func (x *ResRenderCullingExclude) Reset() {
	*x = ResRenderCullingExclude{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResRenderCullingExclude) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResRenderCullingExclude) ProtoMessage() {}

func (x *ResRenderCullingExclude) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResRenderCullingExclude.ProtoReflect.Descriptor instead.
func (*ResRenderCullingExclude) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{33}
}

func (x *ResRenderCullingExclude) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResRenderCullingExclude) GetExludePrefabPath() string {
	if x != nil {
		return x.ExludePrefabPath
	}
	return ""
}

type ResDT_TeamRangeRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleType  uint32   `protobuf:"varint,1,opt,name=RuleType,proto3" json:"RuleType,omitempty"`
	RuleParam []uint32 `protobuf:"varint,2,rep,packed,name=RuleParam,proto3" json:"RuleParam,omitempty"`
}

func (x *ResDT_TeamRangeRule) Reset() {
	*x = ResDT_TeamRangeRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_TeamRangeRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_TeamRangeRule) ProtoMessage() {}

func (x *ResDT_TeamRangeRule) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_TeamRangeRule.ProtoReflect.Descriptor instead.
func (*ResDT_TeamRangeRule) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{34}
}

func (x *ResDT_TeamRangeRule) GetRuleType() uint32 {
	if x != nil {
		return x.RuleType
	}
	return 0
}

func (x *ResDT_TeamRangeRule) GetRuleParam() []uint32 {
	if x != nil {
		return x.RuleParam
	}
	return nil
}

type ResTextData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag     uint32 `protobuf:"varint,1,opt,name=Tag,proto3" json:"Tag,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
}

func (x *ResTextData) Reset() {
	*x = ResTextData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResTextData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResTextData) ProtoMessage() {}

func (x *ResTextData) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResTextData.ProtoReflect.Descriptor instead.
func (*ResTextData) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{35}
}

func (x *ResTextData) GetTag() uint32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *ResTextData) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type ResRankGradeConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Grade                                  uint32   `protobuf:"varint,1,opt,name=Grade,proto3" json:"Grade,omitempty"`
	LogicGrade                             uint32   `protobuf:"varint,2,opt,name=LogicGrade,proto3" json:"LogicGrade,omitempty"`
	IsUsed                                 uint32   `protobuf:"varint,3,opt,name=IsUsed,proto3" json:"IsUsed,omitempty"`
	GradeDesc                              string   `protobuf:"bytes,4,opt,name=GradeDesc,proto3" json:"GradeDesc,omitempty"`
	GradeLevelDesc                         string   `protobuf:"bytes,5,opt,name=GradeLevelDesc,proto3" json:"GradeLevelDesc,omitempty"`
	GradeLevel                             uint32   `protobuf:"varint,6,opt,name=GradeLevel,proto3" json:"GradeLevel,omitempty"`
	GradeUpNeedFightCnt                    int32    `protobuf:"varint,7,opt,name=GradeUpNeedFightCnt,proto3" json:"GradeUpNeedFightCnt,omitempty"`
	GradeUpNeedWinCnt                      int32    `protobuf:"varint,8,opt,name=GradeUpNeedWinCnt,proto3" json:"GradeUpNeedWinCnt,omitempty"`
	GradeUpNeedScore                       uint32   `protobuf:"varint,9,opt,name=GradeUpNeedScore,proto3" json:"GradeUpNeedScore,omitempty"`
	ProtectGradeScore                      uint32   `protobuf:"varint,10,opt,name=ProtectGradeScore,proto3" json:"ProtectGradeScore,omitempty"`
	EqualizeScore                          uint32   `protobuf:"varint,11,opt,name=EqualizeScore,proto3" json:"EqualizeScore,omitempty"`
	LosePerformanceMaxScore                uint32   `protobuf:"varint,12,opt,name=LosePerformanceMaxScore,proto3" json:"LosePerformanceMaxScore,omitempty"`
	GradePicturePath                       string   `protobuf:"bytes,13,opt,name=GradePicturePath,proto3" json:"GradePicturePath,omitempty"`
	GradePicturePathSuperMaster            string   `protobuf:"bytes,14,opt,name=GradePicturePathSuperMaster,proto3" json:"GradePicturePathSuperMaster,omitempty"`
	GradeSmallPicPath                      string   `protobuf:"bytes,15,opt,name=GradeSmallPicPath,proto3" json:"GradeSmallPicPath,omitempty"`
	GradeSmallPicPathSuperMaster           string   `protobuf:"bytes,16,opt,name=GradeSmallPicPathSuperMaster,proto3" json:"GradeSmallPicPathSuperMaster,omitempty"`
	GradeFramePicPath                      string   `protobuf:"bytes,17,opt,name=GradeFramePicPath,proto3" json:"GradeFramePicPath,omitempty"`
	GradeFramePicPathSuperMaster           string   `protobuf:"bytes,18,opt,name=GradeFramePicPathSuperMaster,proto3" json:"GradeFramePicPathSuperMaster,omitempty"`
	GradeParticleBg                        string   `protobuf:"bytes,19,opt,name=GradeParticleBg,proto3" json:"GradeParticleBg,omitempty"`
	GradeParticleBgSuperMaster             string   `protobuf:"bytes,20,opt,name=GradeParticleBgSuperMaster,proto3" json:"GradeParticleBgSuperMaster,omitempty"`
	TRankAdjustMMR                         int32    `protobuf:"varint,21,opt,name=TRankAdjustMMR,proto3" json:"TRankAdjustMMR,omitempty"`
	GuildSignInPoint                       uint32   `protobuf:"varint,22,opt,name=GuildSignInPoint,proto3" json:"GuildSignInPoint,omitempty"`
	MultiMatchMMRAdjustValue               int32    `protobuf:"varint,23,opt,name=MultiMatchMMRAdjustValue,proto3" json:"MultiMatchMMRAdjustValue,omitempty"`
	BaseMMR                                int32    `protobuf:"varint,24,opt,name=BaseMMR,proto3" json:"BaseMMR,omitempty"`
	ConWinCnt                              uint32   `protobuf:"varint,25,opt,name=ConWinCnt,proto3" json:"ConWinCnt,omitempty"`
	BelongBigGrade                         uint32   `protobuf:"varint,26,opt,name=BelongBigGrade,proto3" json:"BelongBigGrade,omitempty"`
	BigGradeName                           string   `protobuf:"bytes,27,opt,name=BigGradeName,proto3" json:"BigGradeName,omitempty"`
	RewardDesc                             string   `protobuf:"bytes,28,opt,name=RewardDesc,proto3" json:"RewardDesc,omitempty"`
	RewardDescExp                          string   `protobuf:"bytes,29,opt,name=RewardDescExp,proto3" json:"RewardDescExp,omitempty"`
	NormalMMRAddValue                      uint32   `protobuf:"varint,30,opt,name=NormalMMRAddValue,proto3" json:"NormalMMRAddValue,omitempty"`
	AddStarScore                           uint32   `protobuf:"varint,31,opt,name=AddStarScore,proto3" json:"AddStarScore,omitempty"`
	ConWinScore                            []uint32 `protobuf:"varint,32,rep,packed,name=ConWinScore,proto3" json:"ConWinScore,omitempty"`
	ConLossScore                           []uint32 `protobuf:"varint,33,rep,packed,name=ConLossScore,proto3" json:"ConLossScore,omitempty"`
	MVPScore                               []uint32 `protobuf:"varint,34,rep,packed,name=MVPScore,proto3" json:"MVPScore,omitempty"`
	GoldMedalScore                         uint32   `protobuf:"varint,35,opt,name=GoldMedalScore,proto3" json:"GoldMedalScore,omitempty"`
	SilverMedalScore                       uint32   `protobuf:"varint,36,opt,name=SilverMedalScore,proto3" json:"SilverMedalScore,omitempty"`
	GuildMatchScoreAddRate                 int32    `protobuf:"varint,37,opt,name=GuildMatchScoreAddRate,proto3" json:"GuildMatchScoreAddRate,omitempty"`
	GameComplaintXiaojiDel                 int32    `protobuf:"varint,38,opt,name=GameComplaintXiaojiDel,proto3" json:"GameComplaintXiaojiDel,omitempty"`
	GameSettleXiaojiDel                    int32    `protobuf:"varint,39,opt,name=GameSettleXiaojiDel,proto3" json:"GameSettleXiaojiDel,omitempty"`
	ComplaintSysSongDel                    int32    `protobuf:"varint,40,opt,name=ComplaintSysSongDel,proto3" json:"ComplaintSysSongDel,omitempty"`
	ComplaintSysGuajiDel                   int32    `protobuf:"varint,41,opt,name=ComplaintSysGuajiDel,proto3" json:"ComplaintSysGuajiDel,omitempty"`
	MatchLogParam                          int32    `protobuf:"varint,42,opt,name=MatchLogParam,proto3" json:"MatchLogParam,omitempty"`
	BackflowPlayerWarmBattle               int32    `protobuf:"varint,43,opt,name=BackflowPlayerWarmBattle,proto3" json:"BackflowPlayerWarmBattle,omitempty"`
	RankELO                                int32    `protobuf:"varint,44,opt,name=RankELO,proto3" json:"RankELO,omitempty"`
	MultiMatchELOAdjustValue               int32    `protobuf:"varint,45,opt,name=MultiMatchELOAdjustValue,proto3" json:"MultiMatchELOAdjustValue,omitempty"`
	GameGuajiDelAddRate                    int32    `protobuf:"varint,46,opt,name=GameGuajiDelAddRate,proto3" json:"GameGuajiDelAddRate,omitempty"`
	UnconfirmDelCredit                     int32    `protobuf:"varint,47,opt,name=UnconfirmDelCredit,proto3" json:"UnconfirmDelCredit,omitempty"`
	OutGameDelCredit                       int32    `protobuf:"varint,48,opt,name=OutGameDelCredit,proto3" json:"OutGameDelCredit,omitempty"`
	AIRankAttackRate                       int32    `protobuf:"varint,49,opt,name=AIRankAttackRate,proto3" json:"AIRankAttackRate,omitempty"`
	WarmBattleAIElo                        int32    `protobuf:"varint,50,opt,name=WarmBattleAIElo,proto3" json:"WarmBattleAIElo,omitempty"`
	MMRCommonAlgorithmPoint                int32    `protobuf:"varint,51,opt,name=MMRCommonAlgorithmPoint,proto3" json:"MMRCommonAlgorithmPoint,omitempty"`
	IsFullScoreBigGradeUp                  uint32   `protobuf:"varint,52,opt,name=IsFullScoreBigGradeUp,proto3" json:"IsFullScoreBigGradeUp,omitempty"`
	IsFullScoreSmallGradeUp                uint32   `protobuf:"varint,53,opt,name=IsFullScoreSmallGradeUp,proto3" json:"IsFullScoreSmallGradeUp,omitempty"`
	GradeUpWinRewardBraveScore             uint32   `protobuf:"varint,54,opt,name=GradeUpWinRewardBraveScore,proto3" json:"GradeUpWinRewardBraveScore,omitempty"`
	GradeUpLosePerformWellBraveScore       uint32   `protobuf:"varint,55,opt,name=GradeUpLosePerformWellBraveScore,proto3" json:"GradeUpLosePerformWellBraveScore,omitempty"`
	GradeUpLosePerformGoodBraveScore       uint32   `protobuf:"varint,56,opt,name=GradeUpLosePerformGoodBraveScore,proto3" json:"GradeUpLosePerformGoodBraveScore,omitempty"`
	GradeUpLoseTeammateViolationBraveScore uint32   `protobuf:"varint,57,opt,name=GradeUpLoseTeammateViolationBraveScore,proto3" json:"GradeUpLoseTeammateViolationBraveScore,omitempty"`
	HangupCompensateID                     uint32   `protobuf:"varint,58,opt,name=HangupCompensateID,proto3" json:"HangupCompensateID,omitempty"`
	OffLineHostAIGradeLv                   uint32   `protobuf:"varint,59,opt,name=OffLineHostAIGradeLv,proto3" json:"OffLineHostAIGradeLv,omitempty"`
}

func (x *ResRankGradeConf) Reset() {
	*x = ResRankGradeConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResRankGradeConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResRankGradeConf) ProtoMessage() {}

func (x *ResRankGradeConf) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResRankGradeConf.ProtoReflect.Descriptor instead.
func (*ResRankGradeConf) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{36}
}

func (x *ResRankGradeConf) GetGrade() uint32 {
	if x != nil {
		return x.Grade
	}
	return 0
}

func (x *ResRankGradeConf) GetLogicGrade() uint32 {
	if x != nil {
		return x.LogicGrade
	}
	return 0
}

func (x *ResRankGradeConf) GetIsUsed() uint32 {
	if x != nil {
		return x.IsUsed
	}
	return 0
}

func (x *ResRankGradeConf) GetGradeDesc() string {
	if x != nil {
		return x.GradeDesc
	}
	return ""
}

func (x *ResRankGradeConf) GetGradeLevelDesc() string {
	if x != nil {
		return x.GradeLevelDesc
	}
	return ""
}

func (x *ResRankGradeConf) GetGradeLevel() uint32 {
	if x != nil {
		return x.GradeLevel
	}
	return 0
}

func (x *ResRankGradeConf) GetGradeUpNeedFightCnt() int32 {
	if x != nil {
		return x.GradeUpNeedFightCnt
	}
	return 0
}

func (x *ResRankGradeConf) GetGradeUpNeedWinCnt() int32 {
	if x != nil {
		return x.GradeUpNeedWinCnt
	}
	return 0
}

func (x *ResRankGradeConf) GetGradeUpNeedScore() uint32 {
	if x != nil {
		return x.GradeUpNeedScore
	}
	return 0
}

func (x *ResRankGradeConf) GetProtectGradeScore() uint32 {
	if x != nil {
		return x.ProtectGradeScore
	}
	return 0
}

func (x *ResRankGradeConf) GetEqualizeScore() uint32 {
	if x != nil {
		return x.EqualizeScore
	}
	return 0
}

func (x *ResRankGradeConf) GetLosePerformanceMaxScore() uint32 {
	if x != nil {
		return x.LosePerformanceMaxScore
	}
	return 0
}

func (x *ResRankGradeConf) GetGradePicturePath() string {
	if x != nil {
		return x.GradePicturePath
	}
	return ""
}

func (x *ResRankGradeConf) GetGradePicturePathSuperMaster() string {
	if x != nil {
		return x.GradePicturePathSuperMaster
	}
	return ""
}

func (x *ResRankGradeConf) GetGradeSmallPicPath() string {
	if x != nil {
		return x.GradeSmallPicPath
	}
	return ""
}

func (x *ResRankGradeConf) GetGradeSmallPicPathSuperMaster() string {
	if x != nil {
		return x.GradeSmallPicPathSuperMaster
	}
	return ""
}

func (x *ResRankGradeConf) GetGradeFramePicPath() string {
	if x != nil {
		return x.GradeFramePicPath
	}
	return ""
}

func (x *ResRankGradeConf) GetGradeFramePicPathSuperMaster() string {
	if x != nil {
		return x.GradeFramePicPathSuperMaster
	}
	return ""
}

func (x *ResRankGradeConf) GetGradeParticleBg() string {
	if x != nil {
		return x.GradeParticleBg
	}
	return ""
}

func (x *ResRankGradeConf) GetGradeParticleBgSuperMaster() string {
	if x != nil {
		return x.GradeParticleBgSuperMaster
	}
	return ""
}

func (x *ResRankGradeConf) GetTRankAdjustMMR() int32 {
	if x != nil {
		return x.TRankAdjustMMR
	}
	return 0
}

func (x *ResRankGradeConf) GetGuildSignInPoint() uint32 {
	if x != nil {
		return x.GuildSignInPoint
	}
	return 0
}

func (x *ResRankGradeConf) GetMultiMatchMMRAdjustValue() int32 {
	if x != nil {
		return x.MultiMatchMMRAdjustValue
	}
	return 0
}

func (x *ResRankGradeConf) GetBaseMMR() int32 {
	if x != nil {
		return x.BaseMMR
	}
	return 0
}

func (x *ResRankGradeConf) GetConWinCnt() uint32 {
	if x != nil {
		return x.ConWinCnt
	}
	return 0
}

func (x *ResRankGradeConf) GetBelongBigGrade() uint32 {
	if x != nil {
		return x.BelongBigGrade
	}
	return 0
}

func (x *ResRankGradeConf) GetBigGradeName() string {
	if x != nil {
		return x.BigGradeName
	}
	return ""
}

func (x *ResRankGradeConf) GetRewardDesc() string {
	if x != nil {
		return x.RewardDesc
	}
	return ""
}

func (x *ResRankGradeConf) GetRewardDescExp() string {
	if x != nil {
		return x.RewardDescExp
	}
	return ""
}

func (x *ResRankGradeConf) GetNormalMMRAddValue() uint32 {
	if x != nil {
		return x.NormalMMRAddValue
	}
	return 0
}

func (x *ResRankGradeConf) GetAddStarScore() uint32 {
	if x != nil {
		return x.AddStarScore
	}
	return 0
}

func (x *ResRankGradeConf) GetConWinScore() []uint32 {
	if x != nil {
		return x.ConWinScore
	}
	return nil
}

func (x *ResRankGradeConf) GetConLossScore() []uint32 {
	if x != nil {
		return x.ConLossScore
	}
	return nil
}

func (x *ResRankGradeConf) GetMVPScore() []uint32 {
	if x != nil {
		return x.MVPScore
	}
	return nil
}

func (x *ResRankGradeConf) GetGoldMedalScore() uint32 {
	if x != nil {
		return x.GoldMedalScore
	}
	return 0
}

func (x *ResRankGradeConf) GetSilverMedalScore() uint32 {
	if x != nil {
		return x.SilverMedalScore
	}
	return 0
}

func (x *ResRankGradeConf) GetGuildMatchScoreAddRate() int32 {
	if x != nil {
		return x.GuildMatchScoreAddRate
	}
	return 0
}

func (x *ResRankGradeConf) GetGameComplaintXiaojiDel() int32 {
	if x != nil {
		return x.GameComplaintXiaojiDel
	}
	return 0
}

func (x *ResRankGradeConf) GetGameSettleXiaojiDel() int32 {
	if x != nil {
		return x.GameSettleXiaojiDel
	}
	return 0
}

func (x *ResRankGradeConf) GetComplaintSysSongDel() int32 {
	if x != nil {
		return x.ComplaintSysSongDel
	}
	return 0
}

func (x *ResRankGradeConf) GetComplaintSysGuajiDel() int32 {
	if x != nil {
		return x.ComplaintSysGuajiDel
	}
	return 0
}

func (x *ResRankGradeConf) GetMatchLogParam() int32 {
	if x != nil {
		return x.MatchLogParam
	}
	return 0
}

func (x *ResRankGradeConf) GetBackflowPlayerWarmBattle() int32 {
	if x != nil {
		return x.BackflowPlayerWarmBattle
	}
	return 0
}

func (x *ResRankGradeConf) GetRankELO() int32 {
	if x != nil {
		return x.RankELO
	}
	return 0
}

func (x *ResRankGradeConf) GetMultiMatchELOAdjustValue() int32 {
	if x != nil {
		return x.MultiMatchELOAdjustValue
	}
	return 0
}

func (x *ResRankGradeConf) GetGameGuajiDelAddRate() int32 {
	if x != nil {
		return x.GameGuajiDelAddRate
	}
	return 0
}

func (x *ResRankGradeConf) GetUnconfirmDelCredit() int32 {
	if x != nil {
		return x.UnconfirmDelCredit
	}
	return 0
}

func (x *ResRankGradeConf) GetOutGameDelCredit() int32 {
	if x != nil {
		return x.OutGameDelCredit
	}
	return 0
}

func (x *ResRankGradeConf) GetAIRankAttackRate() int32 {
	if x != nil {
		return x.AIRankAttackRate
	}
	return 0
}

func (x *ResRankGradeConf) GetWarmBattleAIElo() int32 {
	if x != nil {
		return x.WarmBattleAIElo
	}
	return 0
}

func (x *ResRankGradeConf) GetMMRCommonAlgorithmPoint() int32 {
	if x != nil {
		return x.MMRCommonAlgorithmPoint
	}
	return 0
}

func (x *ResRankGradeConf) GetIsFullScoreBigGradeUp() uint32 {
	if x != nil {
		return x.IsFullScoreBigGradeUp
	}
	return 0
}

func (x *ResRankGradeConf) GetIsFullScoreSmallGradeUp() uint32 {
	if x != nil {
		return x.IsFullScoreSmallGradeUp
	}
	return 0
}

func (x *ResRankGradeConf) GetGradeUpWinRewardBraveScore() uint32 {
	if x != nil {
		return x.GradeUpWinRewardBraveScore
	}
	return 0
}

func (x *ResRankGradeConf) GetGradeUpLosePerformWellBraveScore() uint32 {
	if x != nil {
		return x.GradeUpLosePerformWellBraveScore
	}
	return 0
}

func (x *ResRankGradeConf) GetGradeUpLosePerformGoodBraveScore() uint32 {
	if x != nil {
		return x.GradeUpLosePerformGoodBraveScore
	}
	return 0
}

func (x *ResRankGradeConf) GetGradeUpLoseTeammateViolationBraveScore() uint32 {
	if x != nil {
		return x.GradeUpLoseTeammateViolationBraveScore
	}
	return 0
}

func (x *ResRankGradeConf) GetHangupCompensateID() uint32 {
	if x != nil {
		return x.HangupCompensateID
	}
	return 0
}

func (x *ResRankGradeConf) GetOffLineHostAIGradeLv() uint32 {
	if x != nil {
		return x.OffLineHostAIGradeLv
	}
	return 0
}

type ResDT_AllocRuleParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberChooseType uint32 `protobuf:"varint,1,opt,name=MemberChooseType,proto3" json:"MemberChooseType,omitempty"`
	DivideType       uint32 `protobuf:"varint,2,opt,name=DivideType,proto3" json:"DivideType,omitempty"`
	RangeRadius      int32  `protobuf:"varint,3,opt,name=RangeRadius,proto3" json:"RangeRadius,omitempty"`
	IncomeRate       int32  `protobuf:"varint,4,opt,name=IncomeRate,proto3" json:"IncomeRate,omitempty"`
	DeadAddIncome    uint32 `protobuf:"varint,5,opt,name=DeadAddIncome,proto3" json:"DeadAddIncome,omitempty"`
}

func (x *ResDT_AllocRuleParam) Reset() {
	*x = ResDT_AllocRuleParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_AllocRuleParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_AllocRuleParam) ProtoMessage() {}

func (x *ResDT_AllocRuleParam) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_AllocRuleParam.ProtoReflect.Descriptor instead.
func (*ResDT_AllocRuleParam) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{37}
}

func (x *ResDT_AllocRuleParam) GetMemberChooseType() uint32 {
	if x != nil {
		return x.MemberChooseType
	}
	return 0
}

func (x *ResDT_AllocRuleParam) GetDivideType() uint32 {
	if x != nil {
		return x.DivideType
	}
	return 0
}

func (x *ResDT_AllocRuleParam) GetRangeRadius() int32 {
	if x != nil {
		return x.RangeRadius
	}
	return 0
}

func (x *ResDT_AllocRuleParam) GetIncomeRate() int32 {
	if x != nil {
		return x.IncomeRate
	}
	return 0
}

func (x *ResDT_AllocRuleParam) GetDeadAddIncome() uint32 {
	if x != nil {
		return x.DeadAddIncome
	}
	return 0
}

type ResDT_IncomeAttackRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttakerType     uint32                  `protobuf:"varint,1,opt,name=AttakerType,proto3" json:"AttakerType,omitempty"`
	IncomeMemberArr []*ResDT_AllocRuleParam `protobuf:"bytes,2,rep,name=IncomeMemberArr,proto3" json:"IncomeMemberArr,omitempty"`
}

func (x *ResDT_IncomeAttackRule) Reset() {
	*x = ResDT_IncomeAttackRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_IncomeAttackRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_IncomeAttackRule) ProtoMessage() {}

func (x *ResDT_IncomeAttackRule) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_IncomeAttackRule.ProtoReflect.Descriptor instead.
func (*ResDT_IncomeAttackRule) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{38}
}

func (x *ResDT_IncomeAttackRule) GetAttakerType() uint32 {
	if x != nil {
		return x.AttakerType
	}
	return 0
}

func (x *ResDT_IncomeAttackRule) GetIncomeMemberArr() []*ResDT_AllocRuleParam {
	if x != nil {
		return x.IncomeMemberArr
	}
	return nil
}

type ResSoulAddition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                      uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	HeroKillType            int32  `protobuf:"varint,2,opt,name=HeroKillType,proto3" json:"HeroKillType,omitempty"`
	ExpAddRate              int32  `protobuf:"varint,3,opt,name=ExpAddRate,proto3" json:"ExpAddRate,omitempty"`
	GoldCoinInBattleAddRate int32  `protobuf:"varint,4,opt,name=GoldCoinInBattleAddRate,proto3" json:"GoldCoinInBattleAddRate,omitempty"`
	GoldRewardValue         uint32 `protobuf:"varint,5,opt,name=GoldRewardValue,proto3" json:"GoldRewardValue,omitempty"`
	KillTargetState         int32  `protobuf:"varint,6,opt,name=KillTargetState,proto3" json:"KillTargetState,omitempty"`
	AssitTargetState        int32  `protobuf:"varint,7,opt,name=AssitTargetState,proto3" json:"AssitTargetState,omitempty"`
	DeathTargetState        int32  `protobuf:"varint,8,opt,name=DeathTargetState,proto3" json:"DeathTargetState,omitempty"`
}

func (x *ResSoulAddition) Reset() {
	*x = ResSoulAddition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResSoulAddition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResSoulAddition) ProtoMessage() {}

func (x *ResSoulAddition) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResSoulAddition.ProtoReflect.Descriptor instead.
func (*ResSoulAddition) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{39}
}

func (x *ResSoulAddition) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResSoulAddition) GetHeroKillType() int32 {
	if x != nil {
		return x.HeroKillType
	}
	return 0
}

func (x *ResSoulAddition) GetExpAddRate() int32 {
	if x != nil {
		return x.ExpAddRate
	}
	return 0
}

func (x *ResSoulAddition) GetGoldCoinInBattleAddRate() int32 {
	if x != nil {
		return x.GoldCoinInBattleAddRate
	}
	return 0
}

func (x *ResSoulAddition) GetGoldRewardValue() uint32 {
	if x != nil {
		return x.GoldRewardValue
	}
	return 0
}

func (x *ResSoulAddition) GetKillTargetState() int32 {
	if x != nil {
		return x.KillTargetState
	}
	return 0
}

func (x *ResSoulAddition) GetAssitTargetState() int32 {
	if x != nil {
		return x.AssitTargetState
	}
	return 0
}

func (x *ResSoulAddition) GetDeathTargetState() int32 {
	if x != nil {
		return x.DeathTargetState
	}
	return 0
}

type HeroJobFeature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobFeature string `protobuf:"bytes,1,opt,name=JobFeature,proto3" json:"JobFeature,omitempty"`
}

func (x *HeroJobFeature) Reset() {
	*x = HeroJobFeature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeroJobFeature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeroJobFeature) ProtoMessage() {}

func (x *HeroJobFeature) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeroJobFeature.ProtoReflect.Descriptor instead.
func (*HeroJobFeature) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{40}
}

func (x *HeroJobFeature) GetJobFeature() string {
	if x != nil {
		return x.JobFeature
	}
	return ""
}

type ResHeroCampBuff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroRelationID   uint32 `protobuf:"varint,1,opt,name=HeroRelationID,proto3" json:"HeroRelationID,omitempty"`
	BuffRelationType uint32 `protobuf:"varint,2,opt,name=BuffRelationType,proto3" json:"BuffRelationType,omitempty"`
	RelatedHero      uint32 `protobuf:"varint,3,opt,name=RelatedHero,proto3" json:"RelatedHero,omitempty"`
	BuffID           int32  `protobuf:"varint,4,opt,name=BuffID,proto3" json:"BuffID,omitempty"`
	MinNumForTrigger int32  `protobuf:"varint,5,opt,name=MinNumForTrigger,proto3" json:"MinNumForTrigger,omitempty"`
}

func (x *ResHeroCampBuff) Reset() {
	*x = ResHeroCampBuff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResHeroCampBuff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResHeroCampBuff) ProtoMessage() {}

func (x *ResHeroCampBuff) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResHeroCampBuff.ProtoReflect.Descriptor instead.
func (*ResHeroCampBuff) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{41}
}

func (x *ResHeroCampBuff) GetHeroRelationID() uint32 {
	if x != nil {
		return x.HeroRelationID
	}
	return 0
}

func (x *ResHeroCampBuff) GetBuffRelationType() uint32 {
	if x != nil {
		return x.BuffRelationType
	}
	return 0
}

func (x *ResHeroCampBuff) GetRelatedHero() uint32 {
	if x != nil {
		return x.RelatedHero
	}
	return 0
}

func (x *ResHeroCampBuff) GetBuffID() int32 {
	if x != nil {
		return x.BuffID
	}
	return 0
}

func (x *ResHeroCampBuff) GetMinNumForTrigger() int32 {
	if x != nil {
		return x.MinNumForTrigger
	}
	return 0
}

type ResDT_EnergyState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    uint32 `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	ResName string `protobuf:"bytes,2,opt,name=ResName,proto3" json:"ResName,omitempty"`
}

func (x *ResDT_EnergyState) Reset() {
	*x = ResDT_EnergyState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_EnergyState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_EnergyState) ProtoMessage() {}

func (x *ResDT_EnergyState) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_EnergyState.ProtoReflect.Descriptor instead.
func (*ResDT_EnergyState) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{42}
}

func (x *ResDT_EnergyState) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ResDT_EnergyState) GetResName() string {
	if x != nil {
		return x.ResName
	}
	return ""
}

type ResHeroJobBuff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID             uint32               `protobuf:"varint,1,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	JobType             uint32               `protobuf:"varint,2,opt,name=JobType,proto3" json:"JobType,omitempty"`
	Attr                []*ResDT_FuncEft_Obj `protobuf:"bytes,3,rep,name=Attr,proto3" json:"Attr,omitempty"`
	BuffId              []int32              `protobuf:"varint,4,rep,packed,name=BuffId,proto3" json:"BuffId,omitempty"`
	SelfCampTipAgePath  string               `protobuf:"bytes,5,opt,name=SelfCampTipAgePath,proto3" json:"SelfCampTipAgePath,omitempty"`
	EnemyCampTipAgePath string               `protobuf:"bytes,6,opt,name=EnemyCampTipAgePath,proto3" json:"EnemyCampTipAgePath,omitempty"`
	TipsBuffId          int32                `protobuf:"varint,7,opt,name=TipsBuffId,proto3" json:"TipsBuffId,omitempty"`
}

func (x *ResHeroJobBuff) Reset() {
	*x = ResHeroJobBuff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResHeroJobBuff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResHeroJobBuff) ProtoMessage() {}

func (x *ResHeroJobBuff) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResHeroJobBuff.ProtoReflect.Descriptor instead.
func (*ResHeroJobBuff) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{43}
}

func (x *ResHeroJobBuff) GetGroupID() uint32 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *ResHeroJobBuff) GetJobType() uint32 {
	if x != nil {
		return x.JobType
	}
	return 0
}

func (x *ResHeroJobBuff) GetAttr() []*ResDT_FuncEft_Obj {
	if x != nil {
		return x.Attr
	}
	return nil
}

func (x *ResHeroJobBuff) GetBuffId() []int32 {
	if x != nil {
		return x.BuffId
	}
	return nil
}

func (x *ResHeroJobBuff) GetSelfCampTipAgePath() string {
	if x != nil {
		return x.SelfCampTipAgePath
	}
	return ""
}

func (x *ResHeroJobBuff) GetEnemyCampTipAgePath() string {
	if x != nil {
		return x.EnemyCampTipAgePath
	}
	return ""
}

func (x *ResHeroJobBuff) GetTipsBuffId() int32 {
	if x != nil {
		return x.TipsBuffId
	}
	return 0
}

type ResHeroBuff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID             uint32               `protobuf:"varint,1,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	HeroID              int32                `protobuf:"varint,2,opt,name=HeroID,proto3" json:"HeroID,omitempty"`
	Attr                []*ResDT_FuncEft_Obj `protobuf:"bytes,3,rep,name=Attr,proto3" json:"Attr,omitempty"`
	BuffId              []int32              `protobuf:"varint,4,rep,packed,name=BuffId,proto3" json:"BuffId,omitempty"`
	SelfCampTipAgePath  string               `protobuf:"bytes,5,opt,name=SelfCampTipAgePath,proto3" json:"SelfCampTipAgePath,omitempty"`
	EnemyCampTipAgePath string               `protobuf:"bytes,6,opt,name=EnemyCampTipAgePath,proto3" json:"EnemyCampTipAgePath,omitempty"`
}

func (x *ResHeroBuff) Reset() {
	*x = ResHeroBuff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResHeroBuff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResHeroBuff) ProtoMessage() {}

func (x *ResHeroBuff) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResHeroBuff.ProtoReflect.Descriptor instead.
func (*ResHeroBuff) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{44}
}

func (x *ResHeroBuff) GetGroupID() uint32 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *ResHeroBuff) GetHeroID() int32 {
	if x != nil {
		return x.HeroID
	}
	return 0
}

func (x *ResHeroBuff) GetAttr() []*ResDT_FuncEft_Obj {
	if x != nil {
		return x.Attr
	}
	return nil
}

func (x *ResHeroBuff) GetBuffId() []int32 {
	if x != nil {
		return x.BuffId
	}
	return nil
}

func (x *ResHeroBuff) GetSelfCampTipAgePath() string {
	if x != nil {
		return x.SelfCampTipAgePath
	}
	return ""
}

func (x *ResHeroBuff) GetEnemyCampTipAgePath() string {
	if x != nil {
		return x.EnemyCampTipAgePath
	}
	return ""
}

type ResDT_RegisterSale_Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid      uint32 `protobuf:"varint,1,opt,name=IsValid,proto3" json:"IsValid,omitempty"`
	StartTimeStr string `protobuf:"bytes,2,opt,name=StartTimeStr,proto3" json:"StartTimeStr,omitempty"`
	ValidTime    uint32 `protobuf:"varint,3,opt,name=ValidTime,proto3" json:"ValidTime,omitempty"`
	BuyCoupons   uint32 `protobuf:"varint,4,opt,name=BuyCoupons,proto3" json:"BuyCoupons,omitempty"`
	BuyCoin      uint32 `protobuf:"varint,5,opt,name=BuyCoin,proto3" json:"BuyCoin,omitempty"`
	BuyDiamond   uint32 `protobuf:"varint,6,opt,name=BuyDiamond,proto3" json:"BuyDiamond,omitempty"`
	BuyItemCnt   uint32 `protobuf:"varint,7,opt,name=BuyItemCnt,proto3" json:"BuyItemCnt,omitempty"`
	SortID       uint32 `protobuf:"varint,8,opt,name=SortID,proto3" json:"SortID,omitempty"`
}

func (x *ResDT_RegisterSale_Info) Reset() {
	*x = ResDT_RegisterSale_Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_RegisterSale_Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_RegisterSale_Info) ProtoMessage() {}

func (x *ResDT_RegisterSale_Info) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_RegisterSale_Info.ProtoReflect.Descriptor instead.
func (*ResDT_RegisterSale_Info) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{45}
}

func (x *ResDT_RegisterSale_Info) GetIsValid() uint32 {
	if x != nil {
		return x.IsValid
	}
	return 0
}

func (x *ResDT_RegisterSale_Info) GetStartTimeStr() string {
	if x != nil {
		return x.StartTimeStr
	}
	return ""
}

func (x *ResDT_RegisterSale_Info) GetValidTime() uint32 {
	if x != nil {
		return x.ValidTime
	}
	return 0
}

func (x *ResDT_RegisterSale_Info) GetBuyCoupons() uint32 {
	if x != nil {
		return x.BuyCoupons
	}
	return 0
}

func (x *ResDT_RegisterSale_Info) GetBuyCoin() uint32 {
	if x != nil {
		return x.BuyCoin
	}
	return 0
}

func (x *ResDT_RegisterSale_Info) GetBuyDiamond() uint32 {
	if x != nil {
		return x.BuyDiamond
	}
	return 0
}

func (x *ResDT_RegisterSale_Info) GetBuyItemCnt() uint32 {
	if x != nil {
		return x.BuyItemCnt
	}
	return 0
}

func (x *ResDT_RegisterSale_Info) GetSortID() uint32 {
	if x != nil {
		return x.SortID
	}
	return 0
}

type ResDT_SkinFeature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IconPath string `protobuf:"bytes,1,opt,name=IconPath,proto3" json:"IconPath,omitempty"`
	Flag     string `protobuf:"bytes,2,opt,name=Flag,proto3" json:"Flag,omitempty"`
	Desc     string `protobuf:"bytes,3,opt,name=Desc,proto3" json:"Desc,omitempty"`
}

func (x *ResDT_SkinFeature) Reset() {
	*x = ResDT_SkinFeature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_SkinFeature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_SkinFeature) ProtoMessage() {}

func (x *ResDT_SkinFeature) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_SkinFeature.ProtoReflect.Descriptor instead.
func (*ResDT_SkinFeature) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{46}
}

func (x *ResDT_SkinFeature) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *ResDT_SkinFeature) GetFlag() string {
	if x != nil {
		return x.Flag
	}
	return ""
}

func (x *ResDT_SkinFeature) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type ResDT_SkinVoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkinSoundResPack          string `protobuf:"bytes,1,opt,name=SkinSoundResPack,proto3" json:"SkinSoundResPack,omitempty"`
	SoundSwitchEvent          uint32 `protobuf:"varint,2,opt,name=SoundSwitchEvent,proto3" json:"SoundSwitchEvent,omitempty"`
	SkinSoundPostfix          string `protobuf:"bytes,3,opt,name=SkinSoundPostfix,proto3" json:"SkinSoundPostfix,omitempty"`
	LobbySoundBankResPack     string `protobuf:"bytes,4,opt,name=LobbySoundBankResPack,proto3" json:"LobbySoundBankResPack,omitempty"`
	PortalSoundPostfix        string `protobuf:"bytes,5,opt,name=PortalSoundPostfix,proto3" json:"PortalSoundPostfix,omitempty"`
	LobbyHeroTalkSoundResPack string `protobuf:"bytes,6,opt,name=LobbyHeroTalkSoundResPack,proto3" json:"LobbyHeroTalkSoundResPack,omitempty"`
}

func (x *ResDT_SkinVoice) Reset() {
	*x = ResDT_SkinVoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_SkinVoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_SkinVoice) ProtoMessage() {}

func (x *ResDT_SkinVoice) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_SkinVoice.ProtoReflect.Descriptor instead.
func (*ResDT_SkinVoice) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{47}
}

func (x *ResDT_SkinVoice) GetSkinSoundResPack() string {
	if x != nil {
		return x.SkinSoundResPack
	}
	return ""
}

func (x *ResDT_SkinVoice) GetSoundSwitchEvent() uint32 {
	if x != nil {
		return x.SoundSwitchEvent
	}
	return 0
}

func (x *ResDT_SkinVoice) GetSkinSoundPostfix() string {
	if x != nil {
		return x.SkinSoundPostfix
	}
	return ""
}

func (x *ResDT_SkinVoice) GetLobbySoundBankResPack() string {
	if x != nil {
		return x.LobbySoundBankResPack
	}
	return ""
}

func (x *ResDT_SkinVoice) GetPortalSoundPostfix() string {
	if x != nil {
		return x.PortalSoundPostfix
	}
	return ""
}

func (x *ResDT_SkinVoice) GetLobbyHeroTalkSoundResPack() string {
	if x != nil {
		return x.LobbyHeroTalkSoundResPack
	}
	return ""
}

type ResClashAddition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttackerMark   uint32 `protobuf:"varint,1,opt,name=AttackerMark,proto3" json:"AttackerMark,omitempty"`
	SuffererMark   uint32 `protobuf:"varint,2,opt,name=SuffererMark,proto3" json:"SuffererMark,omitempty"`
	DamageAddition uint32 `protobuf:"varint,3,opt,name=DamageAddition,proto3" json:"DamageAddition,omitempty"`
	DynamicConfig  uint32 `protobuf:"varint,4,opt,name=DynamicConfig,proto3" json:"DynamicConfig,omitempty"`
}

func (x *ResClashAddition) Reset() {
	*x = ResClashAddition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResClashAddition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResClashAddition) ProtoMessage() {}

func (x *ResClashAddition) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResClashAddition.ProtoReflect.Descriptor instead.
func (*ResClashAddition) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{48}
}

func (x *ResClashAddition) GetAttackerMark() uint32 {
	if x != nil {
		return x.AttackerMark
	}
	return 0
}

func (x *ResClashAddition) GetSuffererMark() uint32 {
	if x != nil {
		return x.SuffererMark
	}
	return 0
}

func (x *ResClashAddition) GetDamageAddition() uint32 {
	if x != nil {
		return x.DamageAddition
	}
	return 0
}

func (x *ResClashAddition) GetDynamicConfig() uint32 {
	if x != nil {
		return x.DynamicConfig
	}
	return 0
}

type ResPropertyValueInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PropertyType    uint32 `protobuf:"varint,1,opt,name=PropertyType,proto3" json:"PropertyType,omitempty"`
	UpperLimitValue int32  `protobuf:"varint,2,opt,name=UpperLimitValue,proto3" json:"UpperLimitValue,omitempty"`
}

func (x *ResPropertyValueInfo) Reset() {
	*x = ResPropertyValueInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResPropertyValueInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResPropertyValueInfo) ProtoMessage() {}

func (x *ResPropertyValueInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResPropertyValueInfo.ProtoReflect.Descriptor instead.
func (*ResPropertyValueInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{49}
}

func (x *ResPropertyValueInfo) GetPropertyType() uint32 {
	if x != nil {
		return x.PropertyType
	}
	return 0
}

func (x *ResPropertyValueInfo) GetUpperLimitValue() int32 {
	if x != nil {
		return x.UpperLimitValue
	}
	return 0
}

type ResBattleFloatText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                 uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Text               string `protobuf:"bytes,2,opt,name=Text,proto3" json:"Text,omitempty"`
	Fontsize           uint32 `protobuf:"varint,3,opt,name=fontsize,proto3" json:"fontsize,omitempty"`
	Animation          string `protobuf:"bytes,4,opt,name=animation,proto3" json:"animation,omitempty"`
	LifeTime           uint32 `protobuf:"varint,5,opt,name=lifeTime,proto3" json:"lifeTime,omitempty"`
	FloatThresholdTime uint32 `protobuf:"varint,6,opt,name=floatThresholdTime,proto3" json:"floatThresholdTime,omitempty"`
}

func (x *ResBattleFloatText) Reset() {
	*x = ResBattleFloatText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResBattleFloatText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResBattleFloatText) ProtoMessage() {}

func (x *ResBattleFloatText) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResBattleFloatText.ProtoReflect.Descriptor instead.
func (*ResBattleFloatText) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{50}
}

func (x *ResBattleFloatText) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResBattleFloatText) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ResBattleFloatText) GetFontsize() uint32 {
	if x != nil {
		return x.Fontsize
	}
	return 0
}

func (x *ResBattleFloatText) GetAnimation() string {
	if x != nil {
		return x.Animation
	}
	return ""
}

func (x *ResBattleFloatText) GetLifeTime() uint32 {
	if x != nil {
		return x.LifeTime
	}
	return 0
}

func (x *ResBattleFloatText) GetFloatThresholdTime() uint32 {
	if x != nil {
		return x.FloatThresholdTime
	}
	return 0
}

type ResDT_DigitFloatInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Threshold int32   `protobuf:"varint,1,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Scale     float32 `protobuf:"fixed32,2,opt,name=scale,proto3" json:"scale,omitempty"`
	TextSize  float32 `protobuf:"fixed32,3,opt,name=textSize,proto3" json:"textSize,omitempty"`
	OffsetX   float32 `protobuf:"fixed32,4,opt,name=offsetX,proto3" json:"offsetX,omitempty"`
	OffsetY   float32 `protobuf:"fixed32,5,opt,name=offsetY,proto3" json:"offsetY,omitempty"`
}

func (x *ResDT_DigitFloatInterval) Reset() {
	*x = ResDT_DigitFloatInterval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_DigitFloatInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_DigitFloatInterval) ProtoMessage() {}

func (x *ResDT_DigitFloatInterval) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_DigitFloatInterval.ProtoReflect.Descriptor instead.
func (*ResDT_DigitFloatInterval) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{51}
}

func (x *ResDT_DigitFloatInterval) GetThreshold() int32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *ResDT_DigitFloatInterval) GetScale() float32 {
	if x != nil {
		return x.Scale
	}
	return 0
}

func (x *ResDT_DigitFloatInterval) GetTextSize() float32 {
	if x != nil {
		return x.TextSize
	}
	return 0
}

func (x *ResDT_DigitFloatInterval) GetOffsetX() float32 {
	if x != nil {
		return x.OffsetX
	}
	return 0
}

func (x *ResDT_DigitFloatInterval) GetOffsetY() float32 {
	if x != nil {
		return x.OffsetY
	}
	return 0
}

type ResDigitFloatTextCfgInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          uint32                      `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	AnimName    string                      `protobuf:"bytes,2,opt,name=AnimName,proto3" json:"AnimName,omitempty"`
	LifeTime    uint32                      `protobuf:"varint,3,opt,name=lifeTime,proto3" json:"lifeTime,omitempty"`
	LR          int32                       `protobuf:"varint,4,opt,name=LR,proto3" json:"LR,omitempty"`
	ShowSign    int32                       `protobuf:"varint,5,opt,name=ShowSign,proto3" json:"ShowSign,omitempty"`
	PostFix     string                      `protobuf:"bytes,6,opt,name=PostFix,proto3" json:"PostFix,omitempty"`
	IconOffset1 float32                     `protobuf:"fixed32,7,opt,name=iconOffset1,proto3" json:"iconOffset1,omitempty"`
	IconOffset2 float32                     `protobuf:"fixed32,8,opt,name=iconOffset2,proto3" json:"iconOffset2,omitempty"`
	Intervals   []*ResDT_DigitFloatInterval `protobuf:"bytes,9,rep,name=Intervals,proto3" json:"Intervals,omitempty"`
}

func (x *ResDigitFloatTextCfgInfo) Reset() {
	*x = ResDigitFloatTextCfgInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDigitFloatTextCfgInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDigitFloatTextCfgInfo) ProtoMessage() {}

func (x *ResDigitFloatTextCfgInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDigitFloatTextCfgInfo.ProtoReflect.Descriptor instead.
func (*ResDigitFloatTextCfgInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{52}
}

func (x *ResDigitFloatTextCfgInfo) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResDigitFloatTextCfgInfo) GetAnimName() string {
	if x != nil {
		return x.AnimName
	}
	return ""
}

func (x *ResDigitFloatTextCfgInfo) GetLifeTime() uint32 {
	if x != nil {
		return x.LifeTime
	}
	return 0
}

func (x *ResDigitFloatTextCfgInfo) GetLR() int32 {
	if x != nil {
		return x.LR
	}
	return 0
}

func (x *ResDigitFloatTextCfgInfo) GetShowSign() int32 {
	if x != nil {
		return x.ShowSign
	}
	return 0
}

func (x *ResDigitFloatTextCfgInfo) GetPostFix() string {
	if x != nil {
		return x.PostFix
	}
	return ""
}

func (x *ResDigitFloatTextCfgInfo) GetIconOffset1() float32 {
	if x != nil {
		return x.IconOffset1
	}
	return 0
}

func (x *ResDigitFloatTextCfgInfo) GetIconOffset2() float32 {
	if x != nil {
		return x.IconOffset2
	}
	return 0
}

func (x *ResDigitFloatTextCfgInfo) GetIntervals() []*ResDT_DigitFloatInterval {
	if x != nil {
		return x.Intervals
	}
	return nil
}

type ResAiParamConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Param int32  `protobuf:"varint,2,opt,name=Param,proto3" json:"Param,omitempty"`
}

func (x *ResAiParamConf) Reset() {
	*x = ResAiParamConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResAiParamConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResAiParamConf) ProtoMessage() {}

func (x *ResAiParamConf) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResAiParamConf.ProtoReflect.Descriptor instead.
func (*ResAiParamConf) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{53}
}

func (x *ResAiParamConf) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ResAiParamConf) GetParam() int32 {
	if x != nil {
		return x.Param
	}
	return 0
}

type ResSpeedAdjustRangeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid       uint32 `protobuf:"varint,1,opt,name=Valid,proto3" json:"Valid,omitempty"`
	MinValue    int32  `protobuf:"varint,2,opt,name=MinValue,proto3" json:"MinValue,omitempty"`
	MaxValue    int32  `protobuf:"varint,3,opt,name=MaxValue,proto3" json:"MaxValue,omitempty"`
	Attenuation uint32 `protobuf:"varint,4,opt,name=Attenuation,proto3" json:"Attenuation,omitempty"`
}

func (x *ResSpeedAdjustRangeConfig) Reset() {
	*x = ResSpeedAdjustRangeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResSpeedAdjustRangeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResSpeedAdjustRangeConfig) ProtoMessage() {}

func (x *ResSpeedAdjustRangeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResSpeedAdjustRangeConfig.ProtoReflect.Descriptor instead.
func (*ResSpeedAdjustRangeConfig) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{54}
}

func (x *ResSpeedAdjustRangeConfig) GetValid() uint32 {
	if x != nil {
		return x.Valid
	}
	return 0
}

func (x *ResSpeedAdjustRangeConfig) GetMinValue() int32 {
	if x != nil {
		return x.MinValue
	}
	return 0
}

func (x *ResSpeedAdjustRangeConfig) GetMaxValue() int32 {
	if x != nil {
		return x.MaxValue
	}
	return 0
}

func (x *ResSpeedAdjustRangeConfig) GetAttenuation() uint32 {
	if x != nil {
		return x.Attenuation
	}
	return 0
}

type ResSpeedAdjustConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type               uint32                       `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Valid              uint32                       `protobuf:"varint,2,opt,name=Valid,proto3" json:"Valid,omitempty"`
	ReferenceBaseSpeed uint32                       `protobuf:"varint,3,opt,name=ReferenceBaseSpeed,proto3" json:"ReferenceBaseSpeed,omitempty"`
	StepAdjust         uint32                       `protobuf:"varint,4,opt,name=StepAdjust,proto3" json:"StepAdjust,omitempty"`
	RangeConfigs       []*ResSpeedAdjustRangeConfig `protobuf:"bytes,5,rep,name=RangeConfigs,proto3" json:"RangeConfigs,omitempty"`
}

func (x *ResSpeedAdjustConfig) Reset() {
	*x = ResSpeedAdjustConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResSpeedAdjustConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResSpeedAdjustConfig) ProtoMessage() {}

func (x *ResSpeedAdjustConfig) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResSpeedAdjustConfig.ProtoReflect.Descriptor instead.
func (*ResSpeedAdjustConfig) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{55}
}

func (x *ResSpeedAdjustConfig) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ResSpeedAdjustConfig) GetValid() uint32 {
	if x != nil {
		return x.Valid
	}
	return 0
}

func (x *ResSpeedAdjustConfig) GetReferenceBaseSpeed() uint32 {
	if x != nil {
		return x.ReferenceBaseSpeed
	}
	return 0
}

func (x *ResSpeedAdjustConfig) GetStepAdjust() uint32 {
	if x != nil {
		return x.StepAdjust
	}
	return 0
}

func (x *ResSpeedAdjustConfig) GetRangeConfigs() []*ResSpeedAdjustRangeConfig {
	if x != nil {
		return x.RangeConfigs
	}
	return nil
}

type ResBattleRoyaleParamByMMR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Grade            uint32 `protobuf:"varint,1,opt,name=Grade,proto3" json:"Grade,omitempty"`
	BigGrade         uint32 `protobuf:"varint,2,opt,name=BigGrade,proto3" json:"BigGrade,omitempty"`
	BigGradeName     string `protobuf:"bytes,3,opt,name=BigGradeName,proto3" json:"BigGradeName,omitempty"`
	StarCon          uint32 `protobuf:"varint,4,opt,name=StarCon,proto3" json:"StarCon,omitempty"`
	GradeName        string `protobuf:"bytes,5,opt,name=GradeName,proto3" json:"GradeName,omitempty"`
	MMR              int32  `protobuf:"varint,6,opt,name=MMR,proto3" json:"MMR,omitempty"`
	GradeAdjustPoint int32  `protobuf:"varint,7,opt,name=GradeAdjustPoint,proto3" json:"GradeAdjustPoint,omitempty"`
	AddParam         int32  `protobuf:"varint,8,opt,name=AddParam,proto3" json:"AddParam,omitempty"`
	MinusParam       int32  `protobuf:"varint,9,opt,name=MinusParam,proto3" json:"MinusParam,omitempty"`
	DropGrade        int32  `protobuf:"varint,10,opt,name=DropGrade,proto3" json:"DropGrade,omitempty"`
	RankShowGrade    uint32 `protobuf:"varint,11,opt,name=RankShowGrade,proto3" json:"RankShowGrade,omitempty"`
}

func (x *ResBattleRoyaleParamByMMR) Reset() {
	*x = ResBattleRoyaleParamByMMR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResBattleRoyaleParamByMMR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResBattleRoyaleParamByMMR) ProtoMessage() {}

func (x *ResBattleRoyaleParamByMMR) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResBattleRoyaleParamByMMR.ProtoReflect.Descriptor instead.
func (*ResBattleRoyaleParamByMMR) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{56}
}

func (x *ResBattleRoyaleParamByMMR) GetGrade() uint32 {
	if x != nil {
		return x.Grade
	}
	return 0
}

func (x *ResBattleRoyaleParamByMMR) GetBigGrade() uint32 {
	if x != nil {
		return x.BigGrade
	}
	return 0
}

func (x *ResBattleRoyaleParamByMMR) GetBigGradeName() string {
	if x != nil {
		return x.BigGradeName
	}
	return ""
}

func (x *ResBattleRoyaleParamByMMR) GetStarCon() uint32 {
	if x != nil {
		return x.StarCon
	}
	return 0
}

func (x *ResBattleRoyaleParamByMMR) GetGradeName() string {
	if x != nil {
		return x.GradeName
	}
	return ""
}

func (x *ResBattleRoyaleParamByMMR) GetMMR() int32 {
	if x != nil {
		return x.MMR
	}
	return 0
}

func (x *ResBattleRoyaleParamByMMR) GetGradeAdjustPoint() int32 {
	if x != nil {
		return x.GradeAdjustPoint
	}
	return 0
}

func (x *ResBattleRoyaleParamByMMR) GetAddParam() int32 {
	if x != nil {
		return x.AddParam
	}
	return 0
}

func (x *ResBattleRoyaleParamByMMR) GetMinusParam() int32 {
	if x != nil {
		return x.MinusParam
	}
	return 0
}

func (x *ResBattleRoyaleParamByMMR) GetDropGrade() int32 {
	if x != nil {
		return x.DropGrade
	}
	return 0
}

func (x *ResBattleRoyaleParamByMMR) GetRankShowGrade() uint32 {
	if x != nil {
		return x.RankShowGrade
	}
	return 0
}

type ResAIReuseParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	LevelID       uint32 `protobuf:"varint,2,opt,name=LevelID,proto3" json:"LevelID,omitempty"`
	Time          uint32 `protobuf:"varint,3,opt,name=Time,proto3" json:"Time,omitempty"`
	Epx           uint32 `protobuf:"varint,4,opt,name=Epx,proto3" json:"Epx,omitempty"`
	Money         uint32 `protobuf:"varint,5,opt,name=Money,proto3" json:"Money,omitempty"`
	Level         uint32 `protobuf:"varint,6,opt,name=Level,proto3" json:"Level,omitempty"`
	EquipRate     uint32 `protobuf:"varint,7,opt,name=EquipRate,proto3" json:"EquipRate,omitempty"`
	EquipList     string `protobuf:"bytes,8,opt,name=EquipList,proto3" json:"EquipList,omitempty"`
	LeftHeroNum_1 uint32 `protobuf:"varint,9,opt,name=LeftHeroNum_1,json=LeftHeroNum1,proto3" json:"LeftHeroNum_1,omitempty"`
	LeftHeroNum_2 uint32 `protobuf:"varint,10,opt,name=LeftHeroNum_2,json=LeftHeroNum2,proto3" json:"LeftHeroNum_2,omitempty"`
	LeftHeroNum_3 uint32 `protobuf:"varint,11,opt,name=LeftHeroNum_3,json=LeftHeroNum3,proto3" json:"LeftHeroNum_3,omitempty"`
	LeftHeroNum_5 uint32 `protobuf:"varint,12,opt,name=LeftHeroNum_5,json=LeftHeroNum5,proto3" json:"LeftHeroNum_5,omitempty"`
	AttackRate    uint32 `protobuf:"varint,13,opt,name=AttackRate,proto3" json:"AttackRate,omitempty"`
	DropMax       uint32 `protobuf:"varint,14,opt,name=DropMax,proto3" json:"DropMax,omitempty"`
	ShenFuNum     uint32 `protobuf:"varint,15,opt,name=ShenFuNum,proto3" json:"ShenFuNum,omitempty"`
	ShenFuIdList  string `protobuf:"bytes,16,opt,name=ShenFuIdList,proto3" json:"ShenFuIdList,omitempty"`
	UseSkillRate  uint32 `protobuf:"varint,17,opt,name=UseSkillRate,proto3" json:"UseSkillRate,omitempty"`
	CoolTime      uint32 `protobuf:"varint,18,opt,name=CoolTime,proto3" json:"CoolTime,omitempty"`
}

func (x *ResAIReuseParams) Reset() {
	*x = ResAIReuseParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResAIReuseParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResAIReuseParams) ProtoMessage() {}

func (x *ResAIReuseParams) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResAIReuseParams.ProtoReflect.Descriptor instead.
func (*ResAIReuseParams) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{57}
}

func (x *ResAIReuseParams) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResAIReuseParams) GetLevelID() uint32 {
	if x != nil {
		return x.LevelID
	}
	return 0
}

func (x *ResAIReuseParams) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *ResAIReuseParams) GetEpx() uint32 {
	if x != nil {
		return x.Epx
	}
	return 0
}

func (x *ResAIReuseParams) GetMoney() uint32 {
	if x != nil {
		return x.Money
	}
	return 0
}

func (x *ResAIReuseParams) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ResAIReuseParams) GetEquipRate() uint32 {
	if x != nil {
		return x.EquipRate
	}
	return 0
}

func (x *ResAIReuseParams) GetEquipList() string {
	if x != nil {
		return x.EquipList
	}
	return ""
}

func (x *ResAIReuseParams) GetLeftHeroNum_1() uint32 {
	if x != nil {
		return x.LeftHeroNum_1
	}
	return 0
}

func (x *ResAIReuseParams) GetLeftHeroNum_2() uint32 {
	if x != nil {
		return x.LeftHeroNum_2
	}
	return 0
}

func (x *ResAIReuseParams) GetLeftHeroNum_3() uint32 {
	if x != nil {
		return x.LeftHeroNum_3
	}
	return 0
}

func (x *ResAIReuseParams) GetLeftHeroNum_5() uint32 {
	if x != nil {
		return x.LeftHeroNum_5
	}
	return 0
}

func (x *ResAIReuseParams) GetAttackRate() uint32 {
	if x != nil {
		return x.AttackRate
	}
	return 0
}

func (x *ResAIReuseParams) GetDropMax() uint32 {
	if x != nil {
		return x.DropMax
	}
	return 0
}

func (x *ResAIReuseParams) GetShenFuNum() uint32 {
	if x != nil {
		return x.ShenFuNum
	}
	return 0
}

func (x *ResAIReuseParams) GetShenFuIdList() string {
	if x != nil {
		return x.ShenFuIdList
	}
	return ""
}

func (x *ResAIReuseParams) GetUseSkillRate() uint32 {
	if x != nil {
		return x.UseSkillRate
	}
	return 0
}

func (x *ResAIReuseParams) GetCoolTime() uint32 {
	if x != nil {
		return x.CoolTime
	}
	return 0
}

type ResDT_SceneSkin_Property struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Desc string `protobuf:"bytes,1,opt,name=Desc,proto3" json:"Desc,omitempty"`
	Icon string `protobuf:"bytes,2,opt,name=Icon,proto3" json:"Icon,omitempty"`
}

func (x *ResDT_SceneSkin_Property) Reset() {
	*x = ResDT_SceneSkin_Property{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_SceneSkin_Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_SceneSkin_Property) ProtoMessage() {}

func (x *ResDT_SceneSkin_Property) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_SceneSkin_Property.ProtoReflect.Descriptor instead.
func (*ResDT_SceneSkin_Property) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{58}
}

func (x *ResDT_SceneSkin_Property) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ResDT_SceneSkin_Property) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

type ResSceneSkinInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SceneSkinID         uint32                      `protobuf:"varint,1,opt,name=SceneSkinID,proto3" json:"SceneSkinID,omitempty"`
	SceneSkinName       string                      `protobuf:"bytes,2,opt,name=SceneSkinName,proto3" json:"SceneSkinName,omitempty"`
	SceneSkinDesc       string                      `protobuf:"bytes,3,opt,name=SceneSkinDesc,proto3" json:"SceneSkinDesc,omitempty"`
	SceneSkinIcon       string                      `protobuf:"bytes,4,opt,name=SceneSkinIcon,proto3" json:"SceneSkinIcon,omitempty"`
	SceneSkinPic        string                      `protobuf:"bytes,5,opt,name=SceneSkinPic,proto3" json:"SceneSkinPic,omitempty"`
	SceneSkinBG         string                      `protobuf:"bytes,6,opt,name=SceneSkinBG,proto3" json:"SceneSkinBG,omitempty"`
	SceneSkinBust       string                      `protobuf:"bytes,7,opt,name=SceneSkinBust,proto3" json:"SceneSkinBust,omitempty"`
	SceneLoadingIcon    string                      `protobuf:"bytes,8,opt,name=SceneLoadingIcon,proto3" json:"SceneLoadingIcon,omitempty"`
	SceneSkinThumb      string                      `protobuf:"bytes,9,opt,name=SceneSkinThumb,proto3" json:"SceneSkinThumb,omitempty"`
	SceneSkinPath       string                      `protobuf:"bytes,10,opt,name=SceneSkinPath,proto3" json:"SceneSkinPath,omitempty"`
	SceneSkinLevel      uint32                      `protobuf:"varint,11,opt,name=SceneSkinLevel,proto3" json:"SceneSkinLevel,omitempty"`
	SceneSkinProps      []*ResDT_SceneSkin_Property `protobuf:"bytes,12,rep,name=SceneSkinProps,proto3" json:"SceneSkinProps,omitempty"`
	SceneSkinCloudPath  string                      `protobuf:"bytes,13,opt,name=SceneSkinCloudPath,proto3" json:"SceneSkinCloudPath,omitempty"`
	ShareSkinUrl        string                      `protobuf:"bytes,14,opt,name=ShareSkinUrl,proto3" json:"ShareSkinUrl,omitempty"`
	ShareSkinVideoUrl   string                      `protobuf:"bytes,15,opt,name=ShareSkinVideoUrl,proto3" json:"ShareSkinVideoUrl,omitempty"`
	SceneBankName       string                      `protobuf:"bytes,16,opt,name=SceneBankName,proto3" json:"SceneBankName,omitempty"`
	SceneSkinSoundEvent string                      `protobuf:"bytes,17,opt,name=SceneSkinSoundEvent,proto3" json:"SceneSkinSoundEvent,omitempty"`
	SceneEnvSound       string                      `protobuf:"bytes,18,opt,name=SceneEnvSound,proto3" json:"SceneEnvSound,omitempty"`
	GameStartSound      string                      `protobuf:"bytes,19,opt,name=GameStartSound,proto3" json:"GameStartSound,omitempty"`
	PreBattleSound      string                      `protobuf:"bytes,20,opt,name=PreBattleSound,proto3" json:"PreBattleSound,omitempty"`
	WinSound            string                      `protobuf:"bytes,21,opt,name=WinSound,proto3" json:"WinSound,omitempty"`
	FailSound           string                      `protobuf:"bytes,22,opt,name=FailSound,proto3" json:"FailSound,omitempty"`
	BattlePrepareSound  string                      `protobuf:"bytes,23,opt,name=BattlePrepareSound,proto3" json:"BattlePrepareSound,omitempty"`
	SceneRankSinPath    string                      `protobuf:"bytes,24,opt,name=SceneRankSinPath,proto3" json:"SceneRankSinPath,omitempty"`
	SceneRankHeadPath   string                      `protobuf:"bytes,25,opt,name=SceneRankHeadPath,proto3" json:"SceneRankHeadPath,omitempty"`
	SceneRankLvlBgPath  string                      `protobuf:"bytes,26,opt,name=SceneRankLvlBgPath,proto3" json:"SceneRankLvlBgPath,omitempty"`
}

func (x *ResSceneSkinInfo) Reset() {
	*x = ResSceneSkinInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResSceneSkinInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResSceneSkinInfo) ProtoMessage() {}

func (x *ResSceneSkinInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResSceneSkinInfo.ProtoReflect.Descriptor instead.
func (*ResSceneSkinInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{59}
}

func (x *ResSceneSkinInfo) GetSceneSkinID() uint32 {
	if x != nil {
		return x.SceneSkinID
	}
	return 0
}

func (x *ResSceneSkinInfo) GetSceneSkinName() string {
	if x != nil {
		return x.SceneSkinName
	}
	return ""
}

func (x *ResSceneSkinInfo) GetSceneSkinDesc() string {
	if x != nil {
		return x.SceneSkinDesc
	}
	return ""
}

func (x *ResSceneSkinInfo) GetSceneSkinIcon() string {
	if x != nil {
		return x.SceneSkinIcon
	}
	return ""
}

func (x *ResSceneSkinInfo) GetSceneSkinPic() string {
	if x != nil {
		return x.SceneSkinPic
	}
	return ""
}

func (x *ResSceneSkinInfo) GetSceneSkinBG() string {
	if x != nil {
		return x.SceneSkinBG
	}
	return ""
}

func (x *ResSceneSkinInfo) GetSceneSkinBust() string {
	if x != nil {
		return x.SceneSkinBust
	}
	return ""
}

func (x *ResSceneSkinInfo) GetSceneLoadingIcon() string {
	if x != nil {
		return x.SceneLoadingIcon
	}
	return ""
}

func (x *ResSceneSkinInfo) GetSceneSkinThumb() string {
	if x != nil {
		return x.SceneSkinThumb
	}
	return ""
}

func (x *ResSceneSkinInfo) GetSceneSkinPath() string {
	if x != nil {
		return x.SceneSkinPath
	}
	return ""
}

func (x *ResSceneSkinInfo) GetSceneSkinLevel() uint32 {
	if x != nil {
		return x.SceneSkinLevel
	}
	return 0
}

func (x *ResSceneSkinInfo) GetSceneSkinProps() []*ResDT_SceneSkin_Property {
	if x != nil {
		return x.SceneSkinProps
	}
	return nil
}

func (x *ResSceneSkinInfo) GetSceneSkinCloudPath() string {
	if x != nil {
		return x.SceneSkinCloudPath
	}
	return ""
}

func (x *ResSceneSkinInfo) GetShareSkinUrl() string {
	if x != nil {
		return x.ShareSkinUrl
	}
	return ""
}

func (x *ResSceneSkinInfo) GetShareSkinVideoUrl() string {
	if x != nil {
		return x.ShareSkinVideoUrl
	}
	return ""
}

func (x *ResSceneSkinInfo) GetSceneBankName() string {
	if x != nil {
		return x.SceneBankName
	}
	return ""
}

func (x *ResSceneSkinInfo) GetSceneSkinSoundEvent() string {
	if x != nil {
		return x.SceneSkinSoundEvent
	}
	return ""
}

func (x *ResSceneSkinInfo) GetSceneEnvSound() string {
	if x != nil {
		return x.SceneEnvSound
	}
	return ""
}

func (x *ResSceneSkinInfo) GetGameStartSound() string {
	if x != nil {
		return x.GameStartSound
	}
	return ""
}

func (x *ResSceneSkinInfo) GetPreBattleSound() string {
	if x != nil {
		return x.PreBattleSound
	}
	return ""
}

func (x *ResSceneSkinInfo) GetWinSound() string {
	if x != nil {
		return x.WinSound
	}
	return ""
}

func (x *ResSceneSkinInfo) GetFailSound() string {
	if x != nil {
		return x.FailSound
	}
	return ""
}

func (x *ResSceneSkinInfo) GetBattlePrepareSound() string {
	if x != nil {
		return x.BattlePrepareSound
	}
	return ""
}

func (x *ResSceneSkinInfo) GetSceneRankSinPath() string {
	if x != nil {
		return x.SceneRankSinPath
	}
	return ""
}

func (x *ResSceneSkinInfo) GetSceneRankHeadPath() string {
	if x != nil {
		return x.SceneRankHeadPath
	}
	return ""
}

func (x *ResSceneSkinInfo) GetSceneRankLvlBgPath() string {
	if x != nil {
		return x.SceneRankLvlBgPath
	}
	return ""
}

type ResActionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionID           uint32          `protobuf:"varint,1,opt,name=ActionID,proto3" json:"ActionID,omitempty"`
	ActionName         string          `protobuf:"bytes,2,opt,name=ActionName,proto3" json:"ActionName,omitempty"`
	ActionDesc         string          `protobuf:"bytes,3,opt,name=ActionDesc,proto3" json:"ActionDesc,omitempty"`
	ActionIcon         string          `protobuf:"bytes,4,opt,name=ActionIcon,proto3" json:"ActionIcon,omitempty"`
	Quality            uint32          `protobuf:"varint,5,opt,name=Quality,proto3" json:"Quality,omitempty"`
	ActionClass        uint32          `protobuf:"varint,6,opt,name=ActionClass,proto3" json:"ActionClass,omitempty"`
	BindHeroID         uint32          `protobuf:"varint,7,opt,name=BindHeroID,proto3" json:"BindHeroID,omitempty"`
	BindSkinID         uint32          `protobuf:"varint,8,opt,name=BindSkinID,proto3" json:"BindSkinID,omitempty"`
	PreviewImageUrl    string          `protobuf:"bytes,9,opt,name=PreviewImageUrl,proto3" json:"PreviewImageUrl,omitempty"`
	PreviewVideoUrl    string          `protobuf:"bytes,10,opt,name=PreviewVideoUrl,proto3" json:"PreviewVideoUrl,omitempty"`
	ActionAgePath      string          `protobuf:"bytes,11,opt,name=ActionAgePath,proto3" json:"ActionAgePath,omitempty"`
	IsMovable          uint32          `protobuf:"varint,12,opt,name=IsMovable,proto3" json:"IsMovable,omitempty"`
	IsActionAgeForever uint32          `protobuf:"varint,13,opt,name=IsActionAgeForever,proto3" json:"IsActionAgeForever,omitempty"`
	GroupID            uint32          `protobuf:"varint,14,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	DiamondOneDay      uint32          `protobuf:"varint,15,opt,name=DiamondOneDay,proto3" json:"DiamondOneDay,omitempty"`
	JumpForm           *ResDT_JumpForm `protobuf:"bytes,16,opt,name=JumpForm,proto3" json:"JumpForm,omitempty"`
}

func (x *ResActionInfo) Reset() {
	*x = ResActionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResActionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResActionInfo) ProtoMessage() {}

func (x *ResActionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResActionInfo.ProtoReflect.Descriptor instead.
func (*ResActionInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{60}
}

func (x *ResActionInfo) GetActionID() uint32 {
	if x != nil {
		return x.ActionID
	}
	return 0
}

func (x *ResActionInfo) GetActionName() string {
	if x != nil {
		return x.ActionName
	}
	return ""
}

func (x *ResActionInfo) GetActionDesc() string {
	if x != nil {
		return x.ActionDesc
	}
	return ""
}

func (x *ResActionInfo) GetActionIcon() string {
	if x != nil {
		return x.ActionIcon
	}
	return ""
}

func (x *ResActionInfo) GetQuality() uint32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *ResActionInfo) GetActionClass() uint32 {
	if x != nil {
		return x.ActionClass
	}
	return 0
}

func (x *ResActionInfo) GetBindHeroID() uint32 {
	if x != nil {
		return x.BindHeroID
	}
	return 0
}

func (x *ResActionInfo) GetBindSkinID() uint32 {
	if x != nil {
		return x.BindSkinID
	}
	return 0
}

func (x *ResActionInfo) GetPreviewImageUrl() string {
	if x != nil {
		return x.PreviewImageUrl
	}
	return ""
}

func (x *ResActionInfo) GetPreviewVideoUrl() string {
	if x != nil {
		return x.PreviewVideoUrl
	}
	return ""
}

func (x *ResActionInfo) GetActionAgePath() string {
	if x != nil {
		return x.ActionAgePath
	}
	return ""
}

func (x *ResActionInfo) GetIsMovable() uint32 {
	if x != nil {
		return x.IsMovable
	}
	return 0
}

func (x *ResActionInfo) GetIsActionAgeForever() uint32 {
	if x != nil {
		return x.IsActionAgeForever
	}
	return 0
}

func (x *ResActionInfo) GetGroupID() uint32 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *ResActionInfo) GetDiamondOneDay() uint32 {
	if x != nil {
		return x.DiamondOneDay
	}
	return 0
}

func (x *ResActionInfo) GetJumpForm() *ResDT_JumpForm {
	if x != nil {
		return x.JumpForm
	}
	return nil
}

type ResAnimActionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionID   uint32 `protobuf:"varint,1,opt,name=ActionID,proto3" json:"ActionID,omitempty"`
	ActionName string `protobuf:"bytes,2,opt,name=ActionName,proto3" json:"ActionName,omitempty"`
}

func (x *ResAnimActionConfig) Reset() {
	*x = ResAnimActionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResAnimActionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResAnimActionConfig) ProtoMessage() {}

func (x *ResAnimActionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResAnimActionConfig.ProtoReflect.Descriptor instead.
func (*ResAnimActionConfig) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{61}
}

func (x *ResAnimActionConfig) GetActionID() uint32 {
	if x != nil {
		return x.ActionID
	}
	return 0
}

func (x *ResAnimActionConfig) GetActionName() string {
	if x != nil {
		return x.ActionName
	}
	return ""
}

type ResTeamInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamIndex                     uint32 `protobuf:"varint,1,opt,name=TeamIndex,proto3" json:"TeamIndex,omitempty"`
	BattleInteractiveParticlePath string `protobuf:"bytes,2,opt,name=BattleInteractiveParticlePath,proto3" json:"BattleInteractiveParticlePath,omitempty"`
}

func (x *ResTeamInfo) Reset() {
	*x = ResTeamInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResTeamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResTeamInfo) ProtoMessage() {}

func (x *ResTeamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResTeamInfo.ProtoReflect.Descriptor instead.
func (*ResTeamInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{62}
}

func (x *ResTeamInfo) GetTeamIndex() uint32 {
	if x != nil {
		return x.TeamIndex
	}
	return 0
}

func (x *ResTeamInfo) GetBattleInteractiveParticlePath() string {
	if x != nil {
		return x.BattleInteractiveParticlePath
	}
	return ""
}

type ResDT_ChessEffectNum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeNum uint32 `protobuf:"varint,1,opt,name=RelativeNum,proto3" json:"RelativeNum,omitempty"`
}

func (x *ResDT_ChessEffectNum) Reset() {
	*x = ResDT_ChessEffectNum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_ChessEffectNum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_ChessEffectNum) ProtoMessage() {}

func (x *ResDT_ChessEffectNum) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_ChessEffectNum.ProtoReflect.Descriptor instead.
func (*ResDT_ChessEffectNum) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{63}
}

func (x *ResDT_ChessEffectNum) GetRelativeNum() uint32 {
	if x != nil {
		return x.RelativeNum
	}
	return 0
}

type ResDT_ChessIconPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IconPath string `protobuf:"bytes,1,opt,name=IconPath,proto3" json:"IconPath,omitempty"`
}

func (x *ResDT_ChessIconPath) Reset() {
	*x = ResDT_ChessIconPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_ChessIconPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_ChessIconPath) ProtoMessage() {}

func (x *ResDT_ChessIconPath) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_ChessIconPath.ProtoReflect.Descriptor instead.
func (*ResDT_ChessIconPath) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{64}
}

func (x *ResDT_ChessIconPath) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

type ResDT_ChessRelativeQuality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeQuality uint32 `protobuf:"varint,1,opt,name=RelativeQuality,proto3" json:"RelativeQuality,omitempty"`
}

func (x *ResDT_ChessRelativeQuality) Reset() {
	*x = ResDT_ChessRelativeQuality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_ChessRelativeQuality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_ChessRelativeQuality) ProtoMessage() {}

func (x *ResDT_ChessRelativeQuality) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_ChessRelativeQuality.ProtoReflect.Descriptor instead.
func (*ResDT_ChessRelativeQuality) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{65}
}

func (x *ResDT_ChessRelativeQuality) GetRelativeQuality() uint32 {
	if x != nil {
		return x.RelativeQuality
	}
	return 0
}

type ResDT_AuctionDropInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DropPlanID          []uint32 `protobuf:"varint,1,rep,packed,name=DropPlanID,proto3" json:"DropPlanID,omitempty"`
	ChessSecurityPlanID uint32   `protobuf:"varint,2,opt,name=ChessSecurityPlanID,proto3" json:"ChessSecurityPlanID,omitempty"`
}

func (x *ResDT_AuctionDropInfo) Reset() {
	*x = ResDT_AuctionDropInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_AuctionDropInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_AuctionDropInfo) ProtoMessage() {}

func (x *ResDT_AuctionDropInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_AuctionDropInfo.ProtoReflect.Descriptor instead.
func (*ResDT_AuctionDropInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{66}
}

func (x *ResDT_AuctionDropInfo) GetDropPlanID() []uint32 {
	if x != nil {
		return x.DropPlanID
	}
	return nil
}

func (x *ResDT_AuctionDropInfo) GetChessSecurityPlanID() uint32 {
	if x != nil {
		return x.ChessSecurityPlanID
	}
	return 0
}

type ResChessAuctionRound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       uint32                 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	GroupID  uint32                 `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	Power    uint32                 `protobuf:"varint,3,opt,name=Power,proto3" json:"Power,omitempty"`
	DropInfo *ResDT_AuctionDropInfo `protobuf:"bytes,4,opt,name=DropInfo,proto3" json:"DropInfo,omitempty"`
}

func (x *ResChessAuctionRound) Reset() {
	*x = ResChessAuctionRound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResChessAuctionRound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResChessAuctionRound) ProtoMessage() {}

func (x *ResChessAuctionRound) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResChessAuctionRound.ProtoReflect.Descriptor instead.
func (*ResChessAuctionRound) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{67}
}

func (x *ResChessAuctionRound) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResChessAuctionRound) GetGroupID() uint32 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *ResChessAuctionRound) GetPower() uint32 {
	if x != nil {
		return x.Power
	}
	return 0
}

func (x *ResChessAuctionRound) GetDropInfo() *ResDT_AuctionDropInfo {
	if x != nil {
		return x.DropInfo
	}
	return nil
}

type RessChessAIUpgradeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level     uint32 `protobuf:"varint,1,opt,name=Level,proto3" json:"Level,omitempty"`
	RoundLow  uint32 `protobuf:"varint,2,opt,name=RoundLow,proto3" json:"RoundLow,omitempty"`
	RoundHigh uint32 `protobuf:"varint,3,opt,name=RoundHigh,proto3" json:"RoundHigh,omitempty"`
}

func (x *RessChessAIUpgradeConfig) Reset() {
	*x = RessChessAIUpgradeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RessChessAIUpgradeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RessChessAIUpgradeConfig) ProtoMessage() {}

func (x *RessChessAIUpgradeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RessChessAIUpgradeConfig.ProtoReflect.Descriptor instead.
func (*RessChessAIUpgradeConfig) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{68}
}

func (x *RessChessAIUpgradeConfig) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *RessChessAIUpgradeConfig) GetRoundLow() uint32 {
	if x != nil {
		return x.RoundLow
	}
	return 0
}

func (x *RessChessAIUpgradeConfig) GetRoundHigh() uint32 {
	if x != nil {
		return x.RoundHigh
	}
	return 0
}

type ResChessAuctionItemCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlivePlayers uint32 `protobuf:"varint,1,opt,name=AlivePlayers,proto3" json:"AlivePlayers,omitempty"`
	ItemCount    uint32 `protobuf:"varint,2,opt,name=ItemCount,proto3" json:"ItemCount,omitempty"`
}

func (x *ResChessAuctionItemCount) Reset() {
	*x = ResChessAuctionItemCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResChessAuctionItemCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResChessAuctionItemCount) ProtoMessage() {}

func (x *ResChessAuctionItemCount) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResChessAuctionItemCount.ProtoReflect.Descriptor instead.
func (*ResChessAuctionItemCount) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{69}
}

func (x *ResChessAuctionItemCount) GetAlivePlayers() uint32 {
	if x != nil {
		return x.AlivePlayers
	}
	return 0
}

func (x *ResChessAuctionItemCount) GetItemCount() uint32 {
	if x != nil {
		return x.ItemCount
	}
	return 0
}

type ResChessAuctionTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	RaiseTime uint32 `protobuf:"varint,2,opt,name=RaiseTime,proto3" json:"RaiseTime,omitempty"`
	ShowTime  uint32 `protobuf:"varint,3,opt,name=ShowTime,proto3" json:"ShowTime,omitempty"`
}

func (x *ResChessAuctionTime) Reset() {
	*x = ResChessAuctionTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResChessAuctionTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResChessAuctionTime) ProtoMessage() {}

func (x *ResChessAuctionTime) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResChessAuctionTime.ProtoReflect.Descriptor instead.
func (*ResChessAuctionTime) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{70}
}

func (x *ResChessAuctionTime) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResChessAuctionTime) GetRaiseTime() uint32 {
	if x != nil {
		return x.RaiseTime
	}
	return 0
}

func (x *ResChessAuctionTime) GetShowTime() uint32 {
	if x != nil {
		return x.ShowTime
	}
	return 0
}

type ResChessAuctionUnlockCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode        uint32 `protobuf:"varint,1,opt,name=Mode,proto3" json:"Mode,omitempty"`
	Phase1Count int32  `protobuf:"varint,2,opt,name=Phase1Count,proto3" json:"Phase1Count,omitempty"`
	Phase2Count int32  `protobuf:"varint,3,opt,name=Phase2Count,proto3" json:"Phase2Count,omitempty"`
	Phase3Count int32  `protobuf:"varint,4,opt,name=Phase3Count,proto3" json:"Phase3Count,omitempty"`
}

func (x *ResChessAuctionUnlockCfg) Reset() {
	*x = ResChessAuctionUnlockCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResChessAuctionUnlockCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResChessAuctionUnlockCfg) ProtoMessage() {}

func (x *ResChessAuctionUnlockCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResChessAuctionUnlockCfg.ProtoReflect.Descriptor instead.
func (*ResChessAuctionUnlockCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{71}
}

func (x *ResChessAuctionUnlockCfg) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *ResChessAuctionUnlockCfg) GetPhase1Count() int32 {
	if x != nil {
		return x.Phase1Count
	}
	return 0
}

func (x *ResChessAuctionUnlockCfg) GetPhase2Count() int32 {
	if x != nil {
		return x.Phase2Count
	}
	return 0
}

func (x *ResChessAuctionUnlockCfg) GetPhase3Count() int32 {
	if x != nil {
		return x.Phase3Count
	}
	return 0
}

type ResChessAuctionDividendCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JoinCount uint32   `protobuf:"varint,1,opt,name=JoinCount,proto3" json:"JoinCount,omitempty"`
	PosOrder  []uint32 `protobuf:"varint,2,rep,packed,name=PosOrder,proto3" json:"PosOrder,omitempty"`
}

func (x *ResChessAuctionDividendCfg) Reset() {
	*x = ResChessAuctionDividendCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResChessAuctionDividendCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResChessAuctionDividendCfg) ProtoMessage() {}

func (x *ResChessAuctionDividendCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResChessAuctionDividendCfg.ProtoReflect.Descriptor instead.
func (*ResChessAuctionDividendCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{72}
}

func (x *ResChessAuctionDividendCfg) GetJoinCount() uint32 {
	if x != nil {
		return x.JoinCount
	}
	return 0
}

func (x *ResChessAuctionDividendCfg) GetPosOrder() []uint32 {
	if x != nil {
		return x.PosOrder
	}
	return nil
}

type ResDT_ChessPresetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigId uint32   `protobuf:"varint,1,opt,name=ConfigId,proto3" json:"ConfigId,omitempty"`
	CoordX   int32    `protobuf:"varint,3,opt,name=CoordX,proto3" json:"CoordX,omitempty"`
	CoordZ   int32    `protobuf:"varint,4,opt,name=CoordZ,proto3" json:"CoordZ,omitempty"`
	EquipID  []uint32 `protobuf:"varint,5,rep,packed,name=EquipID,proto3" json:"EquipID,omitempty"`
}

func (x *ResDT_ChessPresetInfo) Reset() {
	*x = ResDT_ChessPresetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_ChessPresetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_ChessPresetInfo) ProtoMessage() {}

func (x *ResDT_ChessPresetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_ChessPresetInfo.ProtoReflect.Descriptor instead.
func (*ResDT_ChessPresetInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{73}
}

func (x *ResDT_ChessPresetInfo) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *ResDT_ChessPresetInfo) GetCoordX() int32 {
	if x != nil {
		return x.CoordX
	}
	return 0
}

func (x *ResDT_ChessPresetInfo) GetCoordZ() int32 {
	if x != nil {
		return x.CoordZ
	}
	return 0
}

func (x *ResDT_ChessPresetInfo) GetEquipID() []uint32 {
	if x != nil {
		return x.EquipID
	}
	return nil
}

type ResProj8EffectDegree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID     uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Degree uint32 `protobuf:"varint,2,opt,name=Degree,proto3" json:"Degree,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Type   uint32 `protobuf:"varint,4,opt,name=Type,proto3" json:"Type,omitempty"`
	Icon   string `protobuf:"bytes,5,opt,name=Icon,proto3" json:"Icon,omitempty"`
}

func (x *ResProj8EffectDegree) Reset() {
	*x = ResProj8EffectDegree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResProj8EffectDegree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResProj8EffectDegree) ProtoMessage() {}

func (x *ResProj8EffectDegree) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResProj8EffectDegree.ProtoReflect.Descriptor instead.
func (*ResProj8EffectDegree) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{74}
}

func (x *ResProj8EffectDegree) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResProj8EffectDegree) GetDegree() uint32 {
	if x != nil {
		return x.Degree
	}
	return 0
}

func (x *ResProj8EffectDegree) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResProj8EffectDegree) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ResProj8EffectDegree) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

type ResChessPreset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PresetID     uint32                   `protobuf:"varint,1,opt,name=PresetID,proto3" json:"PresetID,omitempty"`
	Preload      uint32                   `protobuf:"varint,2,opt,name=Preload,proto3" json:"Preload,omitempty"`
	PrepareSound string                   `protobuf:"bytes,3,opt,name=PrepareSound,proto3" json:"PrepareSound,omitempty"`
	Desc         string                   `protobuf:"bytes,4,opt,name=Desc,proto3" json:"Desc,omitempty"`
	PresetDetail []*ResDT_ChessPresetInfo `protobuf:"bytes,5,rep,name=PresetDetail,proto3" json:"PresetDetail,omitempty"`
}

func (x *ResChessPreset) Reset() {
	*x = ResChessPreset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResChessPreset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResChessPreset) ProtoMessage() {}

func (x *ResChessPreset) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResChessPreset.ProtoReflect.Descriptor instead.
func (*ResChessPreset) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{75}
}

func (x *ResChessPreset) GetPresetID() uint32 {
	if x != nil {
		return x.PresetID
	}
	return 0
}

func (x *ResChessPreset) GetPreload() uint32 {
	if x != nil {
		return x.Preload
	}
	return 0
}

func (x *ResChessPreset) GetPrepareSound() string {
	if x != nil {
		return x.PrepareSound
	}
	return ""
}

func (x *ResChessPreset) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ResChessPreset) GetPresetDetail() []*ResDT_ChessPresetInfo {
	if x != nil {
		return x.PresetDetail
	}
	return nil
}

type ResChessPickCardAutoTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID     uint32   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	HeroID []uint32 `protobuf:"varint,2,rep,packed,name=HeroID,proto3" json:"HeroID,omitempty"`
}

func (x *ResChessPickCardAutoTest) Reset() {
	*x = ResChessPickCardAutoTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResChessPickCardAutoTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResChessPickCardAutoTest) ProtoMessage() {}

func (x *ResChessPickCardAutoTest) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResChessPickCardAutoTest.ProtoReflect.Descriptor instead.
func (*ResChessPickCardAutoTest) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{76}
}

func (x *ResChessPickCardAutoTest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResChessPickCardAutoTest) GetHeroID() []uint32 {
	if x != nil {
		return x.HeroID
	}
	return nil
}

type ResChessSkinInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkinID            uint32 `protobuf:"varint,1,opt,name=SkinID,proto3" json:"SkinID,omitempty"`
	HeroComposeSound2 string `protobuf:"bytes,2,opt,name=HeroComposeSound2,proto3" json:"HeroComposeSound2,omitempty"`
	HeroComposeSound3 string `protobuf:"bytes,3,opt,name=HeroComposeSound3,proto3" json:"HeroComposeSound3,omitempty"`
	HeroBuySound      string `protobuf:"bytes,4,opt,name=HeroBuySound,proto3" json:"HeroBuySound,omitempty"`
	HeroWinSound      string `protobuf:"bytes,5,opt,name=HeroWinSound,proto3" json:"HeroWinSound,omitempty"`
	HeroOnFightSound  string `protobuf:"bytes,6,opt,name=HeroOnFightSound,proto3" json:"HeroOnFightSound,omitempty"`
	BankNameVO        string `protobuf:"bytes,7,opt,name=BankNameVO,proto3" json:"BankNameVO,omitempty"`
	BankNameSFX       string `protobuf:"bytes,8,opt,name=BankNameSFX,proto3" json:"BankNameSFX,omitempty"`
}

func (x *ResChessSkinInfo) Reset() {
	*x = ResChessSkinInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResChessSkinInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResChessSkinInfo) ProtoMessage() {}

func (x *ResChessSkinInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResChessSkinInfo.ProtoReflect.Descriptor instead.
func (*ResChessSkinInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{77}
}

func (x *ResChessSkinInfo) GetSkinID() uint32 {
	if x != nil {
		return x.SkinID
	}
	return 0
}

func (x *ResChessSkinInfo) GetHeroComposeSound2() string {
	if x != nil {
		return x.HeroComposeSound2
	}
	return ""
}

func (x *ResChessSkinInfo) GetHeroComposeSound3() string {
	if x != nil {
		return x.HeroComposeSound3
	}
	return ""
}

func (x *ResChessSkinInfo) GetHeroBuySound() string {
	if x != nil {
		return x.HeroBuySound
	}
	return ""
}

func (x *ResChessSkinInfo) GetHeroWinSound() string {
	if x != nil {
		return x.HeroWinSound
	}
	return ""
}

func (x *ResChessSkinInfo) GetHeroOnFightSound() string {
	if x != nil {
		return x.HeroOnFightSound
	}
	return ""
}

func (x *ResChessSkinInfo) GetBankNameVO() string {
	if x != nil {
		return x.BankNameVO
	}
	return ""
}

func (x *ResChessSkinInfo) GetBankNameSFX() string {
	if x != nil {
		return x.BankNameSFX
	}
	return ""
}

type ResChessSimulate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	PresetID1 uint32 `protobuf:"varint,2,opt,name=PresetID1,proto3" json:"PresetID1,omitempty"`
	PresetID2 uint32 `protobuf:"varint,3,opt,name=PresetID2,proto3" json:"PresetID2,omitempty"`
	Type      uint32 `protobuf:"varint,4,opt,name=Type,proto3" json:"Type,omitempty"`
}

func (x *ResChessSimulate) Reset() {
	*x = ResChessSimulate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResChessSimulate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResChessSimulate) ProtoMessage() {}

func (x *ResChessSimulate) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResChessSimulate.ProtoReflect.Descriptor instead.
func (*ResChessSimulate) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{78}
}

func (x *ResChessSimulate) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResChessSimulate) GetPresetID1() uint32 {
	if x != nil {
		return x.PresetID1
	}
	return 0
}

func (x *ResChessSimulate) GetPresetID2() uint32 {
	if x != nil {
		return x.PresetID2
	}
	return 0
}

func (x *ResChessSimulate) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type ResChessQualityStarInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChessQuality                 uint32 `protobuf:"varint,1,opt,name=ChessQuality,proto3" json:"ChessQuality,omitempty"`
	StarLevel                    uint32 `protobuf:"varint,2,opt,name=StarLevel,proto3" json:"StarLevel,omitempty"`
	ChessBuyPrice                int32  `protobuf:"varint,3,opt,name=ChessBuyPrice,proto3" json:"ChessBuyPrice,omitempty"`
	ChessSellPrice               int32  `protobuf:"varint,4,opt,name=ChessSellPrice,proto3" json:"ChessSellPrice,omitempty"`
	ChessBuyPriceSuperFastMode   int32  `protobuf:"varint,5,opt,name=ChessBuyPriceSuperFastMode,proto3" json:"ChessBuyPriceSuperFastMode,omitempty"`
	ChessSellPriceSuperFastMode  int32  `protobuf:"varint,6,opt,name=ChessSellPriceSuperFastMode,proto3" json:"ChessSellPriceSuperFastMode,omitempty"`
	ChessDmageValue              int32  `protobuf:"varint,7,opt,name=ChessDmageValue,proto3" json:"ChessDmageValue,omitempty"`
	ChessDmageValueFastMode      int32  `protobuf:"varint,8,opt,name=ChessDmageValueFastMode,proto3" json:"ChessDmageValueFastMode,omitempty"`
	ChessDmageValueSuperFastMode int32  `protobuf:"varint,9,opt,name=ChessDmageValueSuperFastMode,proto3" json:"ChessDmageValueSuperFastMode,omitempty"`
	ChessValueScore              int32  `protobuf:"varint,10,opt,name=ChessValueScore,proto3" json:"ChessValueScore,omitempty"`
}

func (x *ResChessQualityStarInfo) Reset() {
	*x = ResChessQualityStarInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResChessQualityStarInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResChessQualityStarInfo) ProtoMessage() {}

func (x *ResChessQualityStarInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResChessQualityStarInfo.ProtoReflect.Descriptor instead.
func (*ResChessQualityStarInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{79}
}

func (x *ResChessQualityStarInfo) GetChessQuality() uint32 {
	if x != nil {
		return x.ChessQuality
	}
	return 0
}

func (x *ResChessQualityStarInfo) GetStarLevel() uint32 {
	if x != nil {
		return x.StarLevel
	}
	return 0
}

func (x *ResChessQualityStarInfo) GetChessBuyPrice() int32 {
	if x != nil {
		return x.ChessBuyPrice
	}
	return 0
}

func (x *ResChessQualityStarInfo) GetChessSellPrice() int32 {
	if x != nil {
		return x.ChessSellPrice
	}
	return 0
}

func (x *ResChessQualityStarInfo) GetChessBuyPriceSuperFastMode() int32 {
	if x != nil {
		return x.ChessBuyPriceSuperFastMode
	}
	return 0
}

func (x *ResChessQualityStarInfo) GetChessSellPriceSuperFastMode() int32 {
	if x != nil {
		return x.ChessSellPriceSuperFastMode
	}
	return 0
}

func (x *ResChessQualityStarInfo) GetChessDmageValue() int32 {
	if x != nil {
		return x.ChessDmageValue
	}
	return 0
}

func (x *ResChessQualityStarInfo) GetChessDmageValueFastMode() int32 {
	if x != nil {
		return x.ChessDmageValueFastMode
	}
	return 0
}

func (x *ResChessQualityStarInfo) GetChessDmageValueSuperFastMode() int32 {
	if x != nil {
		return x.ChessDmageValueSuperFastMode
	}
	return 0
}

func (x *ResChessQualityStarInfo) GetChessValueScore() int32 {
	if x != nil {
		return x.ChessValueScore
	}
	return 0
}

type ResChessCardQualityChance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerLv    uint32   `protobuf:"varint,1,opt,name=PlayerLv,proto3" json:"PlayerLv,omitempty"`
	ChanceValue []uint32 `protobuf:"varint,2,rep,packed,name=ChanceValue,proto3" json:"ChanceValue,omitempty"`
	CardNum     int32    `protobuf:"varint,3,opt,name=CardNum,proto3" json:"CardNum,omitempty"`
	ShowUI      int32    `protobuf:"varint,4,opt,name=ShowUI,proto3" json:"ShowUI,omitempty"`
}

func (x *ResChessCardQualityChance) Reset() {
	*x = ResChessCardQualityChance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResChessCardQualityChance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResChessCardQualityChance) ProtoMessage() {}

func (x *ResChessCardQualityChance) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResChessCardQualityChance.ProtoReflect.Descriptor instead.
func (*ResChessCardQualityChance) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{80}
}

func (x *ResChessCardQualityChance) GetPlayerLv() uint32 {
	if x != nil {
		return x.PlayerLv
	}
	return 0
}

func (x *ResChessCardQualityChance) GetChanceValue() []uint32 {
	if x != nil {
		return x.ChanceValue
	}
	return nil
}

func (x *ResChessCardQualityChance) GetCardNum() int32 {
	if x != nil {
		return x.CardNum
	}
	return 0
}

func (x *ResChessCardQualityChance) GetShowUI() int32 {
	if x != nil {
		return x.ShowUI
	}
	return 0
}

type ResChessPhaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhaseID  uint32 `protobuf:"varint,1,opt,name=PhaseID,proto3" json:"PhaseID,omitempty"`
	Duration uint32 `protobuf:"varint,2,opt,name=Duration,proto3" json:"Duration,omitempty"`
}

func (x *ResChessPhaseInfo) Reset() {
	*x = ResChessPhaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResChessPhaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResChessPhaseInfo) ProtoMessage() {}

func (x *ResChessPhaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResChessPhaseInfo.ProtoReflect.Descriptor instead.
func (*ResChessPhaseInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{81}
}

func (x *ResChessPhaseInfo) GetPhaseID() uint32 {
	if x != nil {
		return x.PhaseID
	}
	return 0
}

func (x *ResChessPhaseInfo) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type ResExtraFightHeroInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroCfgID uint32 `protobuf:"varint,1,opt,name=HeroCfgID,proto3" json:"HeroCfgID,omitempty"`
}

func (x *ResExtraFightHeroInfo) Reset() {
	*x = ResExtraFightHeroInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResExtraFightHeroInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResExtraFightHeroInfo) ProtoMessage() {}

func (x *ResExtraFightHeroInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResExtraFightHeroInfo.ProtoReflect.Descriptor instead.
func (*ResExtraFightHeroInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{82}
}

func (x *ResExtraFightHeroInfo) GetHeroCfgID() uint32 {
	if x != nil {
		return x.HeroCfgID
	}
	return 0
}

type StreakReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Round                   int32  `protobuf:"varint,1,opt,name=Round,proto3" json:"Round,omitempty"`
	WinReward               uint32 `protobuf:"varint,2,opt,name=WinReward,proto3" json:"WinReward,omitempty"`
	LoseReward              uint32 `protobuf:"varint,3,opt,name=LoseReward,proto3" json:"LoseReward,omitempty"`
	FastModeWinReward       uint32 `protobuf:"varint,4,opt,name=FastModeWinReward,proto3" json:"FastModeWinReward,omitempty"`
	FastModeLoseReward      uint32 `protobuf:"varint,5,opt,name=FastModeLoseReward,proto3" json:"FastModeLoseReward,omitempty"`
	SuperFastModeWinReward  uint32 `protobuf:"varint,6,opt,name=SuperFastModeWinReward,proto3" json:"SuperFastModeWinReward,omitempty"`
	SuperFastModeLoseReward uint32 `protobuf:"varint,7,opt,name=SuperFastModeLoseReward,proto3" json:"SuperFastModeLoseReward,omitempty"`
}

func (x *StreakReward) Reset() {
	*x = StreakReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreakReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreakReward) ProtoMessage() {}

func (x *StreakReward) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreakReward.ProtoReflect.Descriptor instead.
func (*StreakReward) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{83}
}

func (x *StreakReward) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *StreakReward) GetWinReward() uint32 {
	if x != nil {
		return x.WinReward
	}
	return 0
}

func (x *StreakReward) GetLoseReward() uint32 {
	if x != nil {
		return x.LoseReward
	}
	return 0
}

func (x *StreakReward) GetFastModeWinReward() uint32 {
	if x != nil {
		return x.FastModeWinReward
	}
	return 0
}

func (x *StreakReward) GetFastModeLoseReward() uint32 {
	if x != nil {
		return x.FastModeLoseReward
	}
	return 0
}

func (x *StreakReward) GetSuperFastModeWinReward() uint32 {
	if x != nil {
		return x.SuperFastModeWinReward
	}
	return 0
}

func (x *StreakReward) GetSuperFastModeLoseReward() uint32 {
	if x != nil {
		return x.SuperFastModeLoseReward
	}
	return 0
}

type StreakFinishReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count            uint32 `protobuf:"varint,1,opt,name=Count,proto3" json:"Count,omitempty"`
	FinishWinReward  uint32 `protobuf:"varint,2,opt,name=FinishWinReward,proto3" json:"FinishWinReward,omitempty"`
	FinishLoseReward uint32 `protobuf:"varint,3,opt,name=FinishLoseReward,proto3" json:"FinishLoseReward,omitempty"`
}

func (x *StreakFinishReward) Reset() {
	*x = StreakFinishReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreakFinishReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreakFinishReward) ProtoMessage() {}

func (x *StreakFinishReward) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreakFinishReward.ProtoReflect.Descriptor instead.
func (*StreakFinishReward) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{84}
}

func (x *StreakFinishReward) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *StreakFinishReward) GetFinishWinReward() uint32 {
	if x != nil {
		return x.FinishWinReward
	}
	return 0
}

func (x *StreakFinishReward) GetFinishLoseReward() uint32 {
	if x != nil {
		return x.FinishLoseReward
	}
	return 0
}

type ResDT_SettlePhrase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phrase string `protobuf:"bytes,1,opt,name=Phrase,proto3" json:"Phrase,omitempty"`
}

func (x *ResDT_SettlePhrase) Reset() {
	*x = ResDT_SettlePhrase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_SettlePhrase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_SettlePhrase) ProtoMessage() {}

func (x *ResDT_SettlePhrase) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_SettlePhrase.ProtoReflect.Descriptor instead.
func (*ResDT_SettlePhrase) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{85}
}

func (x *ResDT_SettlePhrase) GetPhrase() string {
	if x != nil {
		return x.Phrase
	}
	return ""
}

type ResChessSettlePhrase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank       uint32                `protobuf:"varint,1,opt,name=Rank,proto3" json:"Rank,omitempty"`
	Relative   uint32                `protobuf:"varint,2,opt,name=Relative,proto3" json:"Relative,omitempty"`
	PhraseList []*ResDT_SettlePhrase `protobuf:"bytes,3,rep,name=PhraseList,proto3" json:"PhraseList,omitempty"`
}

func (x *ResChessSettlePhrase) Reset() {
	*x = ResChessSettlePhrase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResChessSettlePhrase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResChessSettlePhrase) ProtoMessage() {}

func (x *ResChessSettlePhrase) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResChessSettlePhrase.ProtoReflect.Descriptor instead.
func (*ResChessSettlePhrase) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{86}
}

func (x *ResChessSettlePhrase) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *ResChessSettlePhrase) GetRelative() uint32 {
	if x != nil {
		return x.Relative
	}
	return 0
}

func (x *ResChessSettlePhrase) GetPhraseList() []*ResDT_SettlePhrase {
	if x != nil {
		return x.PhraseList
	}
	return nil
}

type ResChessRecommendArrangeCfgInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             uint32   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Type           uint32   `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Name           string   `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Difficulty     uint32   `protobuf:"varint,4,opt,name=Difficulty,proto3" json:"Difficulty,omitempty"`
	RecommendIndex uint32   `protobuf:"varint,5,opt,name=RecommendIndex,proto3" json:"RecommendIndex,omitempty"`
	Desc           string   `protobuf:"bytes,6,opt,name=Desc,proto3" json:"Desc,omitempty"`
	Feature        string   `protobuf:"bytes,7,opt,name=Feature,proto3" json:"Feature,omitempty"`
	HeroList       []uint32 `protobuf:"varint,8,rep,packed,name=HeroList,proto3" json:"HeroList,omitempty"`
	KeyHero        []uint32 `protobuf:"varint,9,rep,packed,name=KeyHero,proto3" json:"KeyHero,omitempty"`
}

func (x *ResChessRecommendArrangeCfgInfo) Reset() {
	*x = ResChessRecommendArrangeCfgInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResChessRecommendArrangeCfgInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResChessRecommendArrangeCfgInfo) ProtoMessage() {}

func (x *ResChessRecommendArrangeCfgInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResChessRecommendArrangeCfgInfo.ProtoReflect.Descriptor instead.
func (*ResChessRecommendArrangeCfgInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{87}
}

func (x *ResChessRecommendArrangeCfgInfo) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResChessRecommendArrangeCfgInfo) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ResChessRecommendArrangeCfgInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResChessRecommendArrangeCfgInfo) GetDifficulty() uint32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *ResChessRecommendArrangeCfgInfo) GetRecommendIndex() uint32 {
	if x != nil {
		return x.RecommendIndex
	}
	return 0
}

func (x *ResChessRecommendArrangeCfgInfo) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ResChessRecommendArrangeCfgInfo) GetFeature() string {
	if x != nil {
		return x.Feature
	}
	return ""
}

func (x *ResChessRecommendArrangeCfgInfo) GetHeroList() []uint32 {
	if x != nil {
		return x.HeroList
	}
	return nil
}

func (x *ResChessRecommendArrangeCfgInfo) GetKeyHero() []uint32 {
	if x != nil {
		return x.KeyHero
	}
	return nil
}

type ChessArrangeProbabilityRegion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	MaxValue uint32 `protobuf:"varint,2,opt,name=MaxValue,proto3" json:"MaxValue,omitempty"`
	MinValue uint32 `protobuf:"varint,3,opt,name=MinValue,proto3" json:"MinValue,omitempty"`
}

func (x *ChessArrangeProbabilityRegion) Reset() {
	*x = ChessArrangeProbabilityRegion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChessArrangeProbabilityRegion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChessArrangeProbabilityRegion) ProtoMessage() {}

func (x *ChessArrangeProbabilityRegion) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChessArrangeProbabilityRegion.ProtoReflect.Descriptor instead.
func (*ChessArrangeProbabilityRegion) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{88}
}

func (x *ChessArrangeProbabilityRegion) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ChessArrangeProbabilityRegion) GetMaxValue() uint32 {
	if x != nil {
		return x.MaxValue
	}
	return 0
}

func (x *ChessArrangeProbabilityRegion) GetMinValue() uint32 {
	if x != nil {
		return x.MinValue
	}
	return 0
}

type ResProj8HelpDescMain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Title      string `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	ShowSystem uint32 `protobuf:"varint,3,opt,name=ShowSystem,proto3" json:"ShowSystem,omitempty"`
}

func (x *ResProj8HelpDescMain) Reset() {
	*x = ResProj8HelpDescMain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResProj8HelpDescMain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResProj8HelpDescMain) ProtoMessage() {}

func (x *ResProj8HelpDescMain) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResProj8HelpDescMain.ProtoReflect.Descriptor instead.
func (*ResProj8HelpDescMain) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{89}
}

func (x *ResProj8HelpDescMain) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResProj8HelpDescMain) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResProj8HelpDescMain) GetShowSystem() uint32 {
	if x != nil {
		return x.ShowSystem
	}
	return 0
}

type ResProj8HelpDescPics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *ResProj8HelpDescPics) Reset() {
	*x = ResProj8HelpDescPics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResProj8HelpDescPics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResProj8HelpDescPics) ProtoMessage() {}

func (x *ResProj8HelpDescPics) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResProj8HelpDescPics.ProtoReflect.Descriptor instead.
func (*ResProj8HelpDescPics) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{90}
}

func (x *ResProj8HelpDescPics) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type ResProj8HelpDescItems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              int32                   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ParentID        uint32                  `protobuf:"varint,2,opt,name=ParentID,proto3" json:"ParentID,omitempty"`
	Title           string                  `protobuf:"bytes,3,opt,name=Title,proto3" json:"Title,omitempty"`
	Pics            []*ResProj8HelpDescPics `protobuf:"bytes,4,rep,name=Pics,proto3" json:"Pics,omitempty"`
	VideoID         uint32                  `protobuf:"varint,5,opt,name=VideoID,proto3" json:"VideoID,omitempty"`
	Content         string                  `protobuf:"bytes,6,opt,name=Content,proto3" json:"Content,omitempty"`
	ContentUserBack string                  `protobuf:"bytes,7,opt,name=ContentUserBack,proto3" json:"ContentUserBack,omitempty"`
}

func (x *ResProj8HelpDescItems) Reset() {
	*x = ResProj8HelpDescItems{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResProj8HelpDescItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResProj8HelpDescItems) ProtoMessage() {}

func (x *ResProj8HelpDescItems) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResProj8HelpDescItems.ProtoReflect.Descriptor instead.
func (*ResProj8HelpDescItems) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{91}
}

func (x *ResProj8HelpDescItems) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResProj8HelpDescItems) GetParentID() uint32 {
	if x != nil {
		return x.ParentID
	}
	return 0
}

func (x *ResProj8HelpDescItems) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResProj8HelpDescItems) GetPics() []*ResProj8HelpDescPics {
	if x != nil {
		return x.Pics
	}
	return nil
}

func (x *ResProj8HelpDescItems) GetVideoID() uint32 {
	if x != nil {
		return x.VideoID
	}
	return 0
}

func (x *ResProj8HelpDescItems) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ResProj8HelpDescItems) GetContentUserBack() string {
	if x != nil {
		return x.ContentUserBack
	}
	return ""
}

type ResProj8HelpOperate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Title        string `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	LocalVideo   string `protobuf:"bytes,3,opt,name=LocalVideo,proto3" json:"LocalVideo,omitempty"`
	NetVideo     string `protobuf:"bytes,4,opt,name=NetVideo,proto3" json:"NetVideo,omitempty"`
	NetVideoSize string `protobuf:"bytes,5,opt,name=NetVideoSize,proto3" json:"NetVideoSize,omitempty"`
}

func (x *ResProj8HelpOperate) Reset() {
	*x = ResProj8HelpOperate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResProj8HelpOperate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResProj8HelpOperate) ProtoMessage() {}

func (x *ResProj8HelpOperate) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResProj8HelpOperate.ProtoReflect.Descriptor instead.
func (*ResProj8HelpOperate) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{92}
}

func (x *ResProj8HelpOperate) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResProj8HelpOperate) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResProj8HelpOperate) GetLocalVideo() string {
	if x != nil {
		return x.LocalVideo
	}
	return ""
}

func (x *ResProj8HelpOperate) GetNetVideo() string {
	if x != nil {
		return x.NetVideo
	}
	return ""
}

func (x *ResProj8HelpOperate) GetNetVideoSize() string {
	if x != nil {
		return x.NetVideoSize
	}
	return ""
}

type ResChessSubProcInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubProcType uint32 `protobuf:"varint,1,opt,name=SubProcType,proto3" json:"SubProcType,omitempty"`
	Condition   uint32 `protobuf:"varint,2,opt,name=Condition,proto3" json:"Condition,omitempty"`
	Weight      uint32 `protobuf:"varint,3,opt,name=Weight,proto3" json:"Weight,omitempty"`
	TextContent string `protobuf:"bytes,4,opt,name=TextContent,proto3" json:"TextContent,omitempty"`
	SoundEvent  string `protobuf:"bytes,5,opt,name=SoundEvent,proto3" json:"SoundEvent,omitempty"`
}

func (x *ResChessSubProcInfo) Reset() {
	*x = ResChessSubProcInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResChessSubProcInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResChessSubProcInfo) ProtoMessage() {}

func (x *ResChessSubProcInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResChessSubProcInfo.ProtoReflect.Descriptor instead.
func (*ResChessSubProcInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{93}
}

func (x *ResChessSubProcInfo) GetSubProcType() uint32 {
	if x != nil {
		return x.SubProcType
	}
	return 0
}

func (x *ResChessSubProcInfo) GetCondition() uint32 {
	if x != nil {
		return x.Condition
	}
	return 0
}

func (x *ResChessSubProcInfo) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ResChessSubProcInfo) GetTextContent() string {
	if x != nil {
		return x.TextContent
	}
	return ""
}

func (x *ResChessSubProcInfo) GetSoundEvent() string {
	if x != nil {
		return x.SoundEvent
	}
	return ""
}

type ResChessCardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroCfgId uint32 `protobuf:"varint,1,opt,name=HeroCfgId,proto3" json:"HeroCfgId,omitempty"`
	CardNum   uint32 `protobuf:"varint,2,opt,name=CardNum,proto3" json:"CardNum,omitempty"`
}

func (x *ResChessCardInfo) Reset() {
	*x = ResChessCardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResChessCardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResChessCardInfo) ProtoMessage() {}

func (x *ResChessCardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResChessCardInfo.ProtoReflect.Descriptor instead.
func (*ResChessCardInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{94}
}

func (x *ResChessCardInfo) GetHeroCfgId() uint32 {
	if x != nil {
		return x.HeroCfgId
	}
	return 0
}

func (x *ResChessCardInfo) GetCardNum() uint32 {
	if x != nil {
		return x.CardNum
	}
	return 0
}

type ExchangeCardRoundInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundID              uint32 `protobuf:"varint,1,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
	RandGroupID          uint32 `protobuf:"varint,2,opt,name=RandGroupID,proto3" json:"RandGroupID,omitempty"`
	ChooseDuration       uint32 `protobuf:"varint,3,opt,name=ChooseDuration,proto3" json:"ChooseDuration,omitempty"`
	ExchangeCardDuration uint32 `protobuf:"varint,4,opt,name=ExchangeCardDuration,proto3" json:"ExchangeCardDuration,omitempty"`
	ChooseCardTurn       uint32 `protobuf:"varint,5,opt,name=ChooseCardTurn,proto3" json:"ChooseCardTurn,omitempty"`
}

func (x *ExchangeCardRoundInfo) Reset() {
	*x = ExchangeCardRoundInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeCardRoundInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeCardRoundInfo) ProtoMessage() {}

func (x *ExchangeCardRoundInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeCardRoundInfo.ProtoReflect.Descriptor instead.
func (*ExchangeCardRoundInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{95}
}

func (x *ExchangeCardRoundInfo) GetRoundID() uint32 {
	if x != nil {
		return x.RoundID
	}
	return 0
}

func (x *ExchangeCardRoundInfo) GetRandGroupID() uint32 {
	if x != nil {
		return x.RandGroupID
	}
	return 0
}

func (x *ExchangeCardRoundInfo) GetChooseDuration() uint32 {
	if x != nil {
		return x.ChooseDuration
	}
	return 0
}

func (x *ExchangeCardRoundInfo) GetExchangeCardDuration() uint32 {
	if x != nil {
		return x.ExchangeCardDuration
	}
	return 0
}

func (x *ExchangeCardRoundInfo) GetChooseCardTurn() uint32 {
	if x != nil {
		return x.ChooseCardTurn
	}
	return 0
}

type ExchangeCardRandRewardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                    uint32   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	RandGroupID           uint32   `protobuf:"varint,2,opt,name=RandGroupID,proto3" json:"RandGroupID,omitempty"`
	Weight                uint32   `protobuf:"varint,3,opt,name=Weight,proto3" json:"Weight,omitempty"`
	CardList              []uint32 `protobuf:"varint,4,rep,packed,name=CardList,proto3" json:"CardList,omitempty"`
	CommonHeroPoolID      uint32   `protobuf:"varint,5,opt,name=CommonHeroPoolID,proto3" json:"CommonHeroPoolID,omitempty"`
	CommonEquipPoolID     uint32   `protobuf:"varint,6,opt,name=CommonEquipPoolID,proto3" json:"CommonEquipPoolID,omitempty"`
	CommonHeroEquipPoolID uint32   `protobuf:"varint,7,opt,name=CommonHeroEquipPoolID,proto3" json:"CommonHeroEquipPoolID,omitempty"`
	MinCount              uint32   `protobuf:"varint,8,opt,name=MinCount,proto3" json:"MinCount,omitempty"`
	MaxCount              uint32   `protobuf:"varint,9,opt,name=MaxCount,proto3" json:"MaxCount,omitempty"`
	SingleCardValue       uint32   `protobuf:"varint,10,opt,name=SingleCardValue,proto3" json:"SingleCardValue,omitempty"`
}

func (x *ExchangeCardRandRewardInfo) Reset() {
	*x = ExchangeCardRandRewardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeCardRandRewardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeCardRandRewardInfo) ProtoMessage() {}

func (x *ExchangeCardRandRewardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeCardRandRewardInfo.ProtoReflect.Descriptor instead.
func (*ExchangeCardRandRewardInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{96}
}

func (x *ExchangeCardRandRewardInfo) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ExchangeCardRandRewardInfo) GetRandGroupID() uint32 {
	if x != nil {
		return x.RandGroupID
	}
	return 0
}

func (x *ExchangeCardRandRewardInfo) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ExchangeCardRandRewardInfo) GetCardList() []uint32 {
	if x != nil {
		return x.CardList
	}
	return nil
}

func (x *ExchangeCardRandRewardInfo) GetCommonHeroPoolID() uint32 {
	if x != nil {
		return x.CommonHeroPoolID
	}
	return 0
}

func (x *ExchangeCardRandRewardInfo) GetCommonEquipPoolID() uint32 {
	if x != nil {
		return x.CommonEquipPoolID
	}
	return 0
}

func (x *ExchangeCardRandRewardInfo) GetCommonHeroEquipPoolID() uint32 {
	if x != nil {
		return x.CommonHeroEquipPoolID
	}
	return 0
}

func (x *ExchangeCardRandRewardInfo) GetMinCount() uint32 {
	if x != nil {
		return x.MinCount
	}
	return 0
}

func (x *ExchangeCardRandRewardInfo) GetMaxCount() uint32 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

func (x *ExchangeCardRandRewardInfo) GetSingleCardValue() uint32 {
	if x != nil {
		return x.SingleCardValue
	}
	return 0
}

type ResChessRewardBoxInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	DropID   uint32 `protobuf:"varint,2,opt,name=DropID,proto3" json:"DropID,omitempty"`
	Desc1    string `protobuf:"bytes,3,opt,name=Desc1,proto3" json:"Desc1,omitempty"`
	Desc2    string `protobuf:"bytes,4,opt,name=Desc2,proto3" json:"Desc2,omitempty"`
	MeshPath string `protobuf:"bytes,5,opt,name=MeshPath,proto3" json:"MeshPath,omitempty"`
	IconPath string `protobuf:"bytes,6,opt,name=IconPath,proto3" json:"IconPath,omitempty"`
}

func (x *ResChessRewardBoxInfo) Reset() {
	*x = ResChessRewardBoxInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResChessRewardBoxInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResChessRewardBoxInfo) ProtoMessage() {}

func (x *ResChessRewardBoxInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResChessRewardBoxInfo.ProtoReflect.Descriptor instead.
func (*ResChessRewardBoxInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{97}
}

func (x *ResChessRewardBoxInfo) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResChessRewardBoxInfo) GetDropID() uint32 {
	if x != nil {
		return x.DropID
	}
	return 0
}

func (x *ResChessRewardBoxInfo) GetDesc1() string {
	if x != nil {
		return x.Desc1
	}
	return ""
}

func (x *ResChessRewardBoxInfo) GetDesc2() string {
	if x != nil {
		return x.Desc2
	}
	return ""
}

func (x *ResChessRewardBoxInfo) GetMeshPath() string {
	if x != nil {
		return x.MeshPath
	}
	return ""
}

func (x *ResChessRewardBoxInfo) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

type ResChessCardPoolInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quality        uint32              `protobuf:"varint,1,opt,name=Quality,proto3" json:"Quality,omitempty"`
	ChessCardInfos []*ResChessCardInfo `protobuf:"bytes,2,rep,name=ChessCardInfos,proto3" json:"ChessCardInfos,omitempty"`
}

func (x *ResChessCardPoolInfo) Reset() {
	*x = ResChessCardPoolInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResChessCardPoolInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResChessCardPoolInfo) ProtoMessage() {}

func (x *ResChessCardPoolInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResChessCardPoolInfo.ProtoReflect.Descriptor instead.
func (*ResChessCardPoolInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{98}
}

func (x *ResChessCardPoolInfo) GetQuality() uint32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *ResChessCardPoolInfo) GetChessCardInfos() []*ResChessCardInfo {
	if x != nil {
		return x.ChessCardInfos
	}
	return nil
}

type ResChessMonsterDropInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonsterID            uint32 `protobuf:"varint,1,opt,name=MonsterID,proto3" json:"MonsterID,omitempty"`
	MonsterName          string `protobuf:"bytes,2,opt,name=MonsterName,proto3" json:"MonsterName,omitempty"`
	EntertainmentSubType uint32 `protobuf:"varint,3,opt,name=EntertainmentSubType,proto3" json:"EntertainmentSubType,omitempty"`
	RoundStart           uint32 `protobuf:"varint,4,opt,name=RoundStart,proto3" json:"RoundStart,omitempty"`
	RoundEnd             uint32 `protobuf:"varint,5,opt,name=RoundEnd,proto3" json:"RoundEnd,omitempty"`
	NormalDropID         uint32 `protobuf:"varint,6,opt,name=NormalDropID,proto3" json:"NormalDropID,omitempty"`
	WarmBattleDropID     uint32 `protobuf:"varint,7,opt,name=WarmBattleDropID,proto3" json:"WarmBattleDropID,omitempty"`
	TailDropID           uint32 `protobuf:"varint,8,opt,name=TailDropID,proto3" json:"TailDropID,omitempty"`
}

func (x *ResChessMonsterDropInfo) Reset() {
	*x = ResChessMonsterDropInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResChessMonsterDropInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResChessMonsterDropInfo) ProtoMessage() {}

func (x *ResChessMonsterDropInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResChessMonsterDropInfo.ProtoReflect.Descriptor instead.
func (*ResChessMonsterDropInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{99}
}

func (x *ResChessMonsterDropInfo) GetMonsterID() uint32 {
	if x != nil {
		return x.MonsterID
	}
	return 0
}

func (x *ResChessMonsterDropInfo) GetMonsterName() string {
	if x != nil {
		return x.MonsterName
	}
	return ""
}

func (x *ResChessMonsterDropInfo) GetEntertainmentSubType() uint32 {
	if x != nil {
		return x.EntertainmentSubType
	}
	return 0
}

func (x *ResChessMonsterDropInfo) GetRoundStart() uint32 {
	if x != nil {
		return x.RoundStart
	}
	return 0
}

func (x *ResChessMonsterDropInfo) GetRoundEnd() uint32 {
	if x != nil {
		return x.RoundEnd
	}
	return 0
}

func (x *ResChessMonsterDropInfo) GetNormalDropID() uint32 {
	if x != nil {
		return x.NormalDropID
	}
	return 0
}

func (x *ResChessMonsterDropInfo) GetWarmBattleDropID() uint32 {
	if x != nil {
		return x.WarmBattleDropID
	}
	return 0
}

func (x *ResChessMonsterDropInfo) GetTailDropID() uint32 {
	if x != nil {
		return x.TailDropID
	}
	return 0
}

type ChessSingleDropProbability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EquipGroupID uint32 `protobuf:"varint,1,opt,name=EquipGroupID,proto3" json:"EquipGroupID,omitempty"`
	Probability  uint32 `protobuf:"varint,2,opt,name=Probability,proto3" json:"Probability,omitempty"`
}

func (x *ChessSingleDropProbability) Reset() {
	*x = ChessSingleDropProbability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChessSingleDropProbability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChessSingleDropProbability) ProtoMessage() {}

func (x *ChessSingleDropProbability) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChessSingleDropProbability.ProtoReflect.Descriptor instead.
func (*ChessSingleDropProbability) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{100}
}

func (x *ChessSingleDropProbability) GetEquipGroupID() uint32 {
	if x != nil {
		return x.EquipGroupID
	}
	return 0
}

func (x *ChessSingleDropProbability) GetProbability() uint32 {
	if x != nil {
		return x.Probability
	}
	return 0
}

type ResChessDropInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DropID               uint32                        `protobuf:"varint,1,opt,name=DropID,proto3" json:"DropID,omitempty"`
	DropName             string                        `protobuf:"bytes,2,opt,name=DropName,proto3" json:"DropName,omitempty"`
	DropDescLabel        string                        `protobuf:"bytes,3,opt,name=DropDescLabel,proto3" json:"DropDescLabel,omitempty"`
	DropModel            string                        `protobuf:"bytes,4,opt,name=DropModel,proto3" json:"DropModel,omitempty"`
	DropQuality          uint32                        `protobuf:"varint,5,opt,name=DropQuality,proto3" json:"DropQuality,omitempty"`
	EmptyDropProbability uint32                        `protobuf:"varint,6,opt,name=EmptyDropProbability,proto3" json:"EmptyDropProbability,omitempty"`
	DropProbability      []*ChessSingleDropProbability `protobuf:"bytes,7,rep,name=DropProbability,proto3" json:"DropProbability,omitempty"`
}

func (x *ResChessDropInfo) Reset() {
	*x = ResChessDropInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResChessDropInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResChessDropInfo) ProtoMessage() {}

func (x *ResChessDropInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResChessDropInfo.ProtoReflect.Descriptor instead.
func (*ResChessDropInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{101}
}

func (x *ResChessDropInfo) GetDropID() uint32 {
	if x != nil {
		return x.DropID
	}
	return 0
}

func (x *ResChessDropInfo) GetDropName() string {
	if x != nil {
		return x.DropName
	}
	return ""
}

func (x *ResChessDropInfo) GetDropDescLabel() string {
	if x != nil {
		return x.DropDescLabel
	}
	return ""
}

func (x *ResChessDropInfo) GetDropModel() string {
	if x != nil {
		return x.DropModel
	}
	return ""
}

func (x *ResChessDropInfo) GetDropQuality() uint32 {
	if x != nil {
		return x.DropQuality
	}
	return 0
}

func (x *ResChessDropInfo) GetEmptyDropProbability() uint32 {
	if x != nil {
		return x.EmptyDropProbability
	}
	return 0
}

func (x *ResChessDropInfo) GetDropProbability() []*ChessSingleDropProbability {
	if x != nil {
		return x.DropProbability
	}
	return nil
}

type ResChessDropEquipGroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EquipGroupID     uint32 `protobuf:"varint,1,opt,name=EquipGroupID,proto3" json:"EquipGroupID,omitempty"`
	EquipID          uint32 `protobuf:"varint,2,opt,name=EquipID,proto3" json:"EquipID,omitempty"`
	EquipType        uint32 `protobuf:"varint,3,opt,name=EquipType,proto3" json:"EquipType,omitempty"`
	EquipProbability uint32 `protobuf:"varint,4,opt,name=EquipProbability,proto3" json:"EquipProbability,omitempty"`
}

func (x *ResChessDropEquipGroupInfo) Reset() {
	*x = ResChessDropEquipGroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResChessDropEquipGroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResChessDropEquipGroupInfo) ProtoMessage() {}

func (x *ResChessDropEquipGroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResChessDropEquipGroupInfo.ProtoReflect.Descriptor instead.
func (*ResChessDropEquipGroupInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{102}
}

func (x *ResChessDropEquipGroupInfo) GetEquipGroupID() uint32 {
	if x != nil {
		return x.EquipGroupID
	}
	return 0
}

func (x *ResChessDropEquipGroupInfo) GetEquipID() uint32 {
	if x != nil {
		return x.EquipID
	}
	return 0
}

func (x *ResChessDropEquipGroupInfo) GetEquipType() uint32 {
	if x != nil {
		return x.EquipType
	}
	return 0
}

func (x *ResChessDropEquipGroupInfo) GetEquipProbability() uint32 {
	if x != nil {
		return x.EquipProbability
	}
	return 0
}

type ResChessEquipPickInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundID           uint32   `protobuf:"varint,1,opt,name=RoundID,proto3" json:"RoundID,omitempty"`
	Time              uint32   `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
	PickCount         uint32   `protobuf:"varint,3,opt,name=PickCount,proto3" json:"PickCount,omitempty"`
	LimitRefreshCount uint32   `protobuf:"varint,4,opt,name=LimitRefreshCount,proto3" json:"LimitRefreshCount,omitempty"`
	DropID            []uint32 `protobuf:"varint,5,rep,packed,name=DropID,proto3" json:"DropID,omitempty"`
}

func (x *ResChessEquipPickInfo) Reset() {
	*x = ResChessEquipPickInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResChessEquipPickInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResChessEquipPickInfo) ProtoMessage() {}

func (x *ResChessEquipPickInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResChessEquipPickInfo.ProtoReflect.Descriptor instead.
func (*ResChessEquipPickInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{103}
}

func (x *ResChessEquipPickInfo) GetRoundID() uint32 {
	if x != nil {
		return x.RoundID
	}
	return 0
}

func (x *ResChessEquipPickInfo) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *ResChessEquipPickInfo) GetPickCount() uint32 {
	if x != nil {
		return x.PickCount
	}
	return 0
}

func (x *ResChessEquipPickInfo) GetLimitRefreshCount() uint32 {
	if x != nil {
		return x.LimitRefreshCount
	}
	return 0
}

func (x *ResChessEquipPickInfo) GetDropID() []uint32 {
	if x != nil {
		return x.DropID
	}
	return nil
}

type ResChessEquipRefreshCost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountID uint32 `protobuf:"varint,1,opt,name=CountID,proto3" json:"CountID,omitempty"`
	Cost    uint32 `protobuf:"varint,2,opt,name=Cost,proto3" json:"Cost,omitempty"`
}

func (x *ResChessEquipRefreshCost) Reset() {
	*x = ResChessEquipRefreshCost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResChessEquipRefreshCost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResChessEquipRefreshCost) ProtoMessage() {}

func (x *ResChessEquipRefreshCost) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResChessEquipRefreshCost.ProtoReflect.Descriptor instead.
func (*ResChessEquipRefreshCost) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{104}
}

func (x *ResChessEquipRefreshCost) GetCountID() uint32 {
	if x != nil {
		return x.CountID
	}
	return 0
}

func (x *ResChessEquipRefreshCost) GetCost() uint32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

type ResDT_ChessPresetFormationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X uint32 `protobuf:"varint,1,opt,name=X,proto3" json:"X,omitempty"`
	Y uint32 `protobuf:"varint,2,opt,name=Y,proto3" json:"Y,omitempty"`
}

func (x *ResDT_ChessPresetFormationInfo) Reset() {
	*x = ResDT_ChessPresetFormationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_ChessPresetFormationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_ChessPresetFormationInfo) ProtoMessage() {}

func (x *ResDT_ChessPresetFormationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_ChessPresetFormationInfo.ProtoReflect.Descriptor instead.
func (*ResDT_ChessPresetFormationInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{105}
}

func (x *ResDT_ChessPresetFormationInfo) GetX() uint32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *ResDT_ChessPresetFormationInfo) GetY() uint32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type ResChessPresetFormation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          uint32                            `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	SubID       uint32                            `protobuf:"varint,2,opt,name=SubID,proto3" json:"SubID,omitempty"`
	Name        string                            `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Desc        string                            `protobuf:"bytes,4,opt,name=Desc,proto3" json:"Desc,omitempty"`
	Image       string                            `protobuf:"bytes,5,opt,name=Image,proto3" json:"Image,omitempty"`
	FrontNum    uint32                            `protobuf:"varint,6,opt,name=FrontNum,proto3" json:"FrontNum,omitempty"`
	Front       []*ResDT_ChessPresetFormationInfo `protobuf:"bytes,7,rep,name=Front,proto3" json:"Front,omitempty"`
	BackNum     uint32                            `protobuf:"varint,8,opt,name=BackNum,proto3" json:"BackNum,omitempty"`
	Back        []*ResDT_ChessPresetFormationInfo `protobuf:"bytes,9,rep,name=Back,proto3" json:"Back,omitempty"`
	AssassinNum uint32                            `protobuf:"varint,10,opt,name=AssassinNum,proto3" json:"AssassinNum,omitempty"`
	Assassin    []*ResDT_ChessPresetFormationInfo `protobuf:"bytes,11,rep,name=Assassin,proto3" json:"Assassin,omitempty"`
}

func (x *ResChessPresetFormation) Reset() {
	*x = ResChessPresetFormation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResChessPresetFormation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResChessPresetFormation) ProtoMessage() {}

func (x *ResChessPresetFormation) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResChessPresetFormation.ProtoReflect.Descriptor instead.
func (*ResChessPresetFormation) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{106}
}

func (x *ResChessPresetFormation) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResChessPresetFormation) GetSubID() uint32 {
	if x != nil {
		return x.SubID
	}
	return 0
}

func (x *ResChessPresetFormation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResChessPresetFormation) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ResChessPresetFormation) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *ResChessPresetFormation) GetFrontNum() uint32 {
	if x != nil {
		return x.FrontNum
	}
	return 0
}

func (x *ResChessPresetFormation) GetFront() []*ResDT_ChessPresetFormationInfo {
	if x != nil {
		return x.Front
	}
	return nil
}

func (x *ResChessPresetFormation) GetBackNum() uint32 {
	if x != nil {
		return x.BackNum
	}
	return 0
}

func (x *ResChessPresetFormation) GetBack() []*ResDT_ChessPresetFormationInfo {
	if x != nil {
		return x.Back
	}
	return nil
}

func (x *ResChessPresetFormation) GetAssassinNum() uint32 {
	if x != nil {
		return x.AssassinNum
	}
	return 0
}

func (x *ResChessPresetFormation) GetAssassin() []*ResDT_ChessPresetFormationInfo {
	if x != nil {
		return x.Assassin
	}
	return nil
}

type ResDT_IgnoreCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ratio      uint32 `protobuf:"varint,1,opt,name=Ratio,proto3" json:"Ratio,omitempty"`
	DiscardNum uint32 `protobuf:"varint,2,opt,name=DiscardNum,proto3" json:"DiscardNum,omitempty"`
}

func (x *ResDT_IgnoreCard) Reset() {
	*x = ResDT_IgnoreCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_IgnoreCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_IgnoreCard) ProtoMessage() {}

func (x *ResDT_IgnoreCard) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_IgnoreCard.ProtoReflect.Descriptor instead.
func (*ResDT_IgnoreCard) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{107}
}

func (x *ResDT_IgnoreCard) GetRatio() uint32 {
	if x != nil {
		return x.Ratio
	}
	return 0
}

func (x *ResDT_IgnoreCard) GetDiscardNum() uint32 {
	if x != nil {
		return x.DiscardNum
	}
	return 0
}

type ResChessAILevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AILevel               uint32              `protobuf:"varint,1,opt,name=AILevel,proto3" json:"AILevel,omitempty"`
	ExceedBattleScoreInfo []*ResDT_IgnoreCard `protobuf:"bytes,2,rep,name=ExceedBattleScoreInfo,proto3" json:"ExceedBattleScoreInfo,omitempty"`
	MinOpInterval         uint32              `protobuf:"varint,3,opt,name=MinOpInterval,proto3" json:"MinOpInterval,omitempty"`
	MaxOpInterval         uint32              `protobuf:"varint,4,opt,name=MaxOpInterval,proto3" json:"MaxOpInterval,omitempty"`
	SellUseLess           uint32              `protobuf:"varint,5,opt,name=SellUseLess,proto3" json:"SellUseLess,omitempty"`
	ClearDepositCard      uint32              `protobuf:"varint,6,opt,name=ClearDepositCard,proto3" json:"ClearDepositCard,omitempty"`
	UseSkill              uint32              `protobuf:"varint,7,opt,name=UseSkill,proto3" json:"UseSkill,omitempty"`
	FastHighRelative      uint32              `protobuf:"varint,8,opt,name=FastHighRelative,proto3" json:"FastHighRelative,omitempty"`
	HighStarFirst         uint32              `protobuf:"varint,9,opt,name=HighStarFirst,proto3" json:"HighStarFirst,omitempty"`
	DelayUpgradeRound     uint32              `protobuf:"varint,10,opt,name=DelayUpgradeRound,proto3" json:"DelayUpgradeRound,omitempty"`
	GoldEnoughUpgrade     uint32              `protobuf:"varint,11,opt,name=GoldEnoughUpgrade,proto3" json:"GoldEnoughUpgrade,omitempty"`
	RearrangeEquip        uint32              `protobuf:"varint,12,opt,name=RearrangeEquip,proto3" json:"RearrangeEquip,omitempty"`
	RandomEquip           uint32              `protobuf:"varint,13,opt,name=RandomEquip,proto3" json:"RandomEquip,omitempty"`
	RoundBuyCardNum       uint32              `protobuf:"varint,14,opt,name=RoundBuyCardNum,proto3" json:"RoundBuyCardNum,omitempty"`
	UseSlotNum            uint32              `protobuf:"varint,15,opt,name=UseSlotNum,proto3" json:"UseSlotNum,omitempty"`
	NoRelative            uint32              `protobuf:"varint,16,opt,name=NoRelative,proto3" json:"NoRelative,omitempty"`
	DiscardGoldRate       int32               `protobuf:"varint,17,opt,name=DiscardGoldRate,proto3" json:"DiscardGoldRate,omitempty"`
	EquipWeak             uint32              `protobuf:"varint,18,opt,name=EquipWeak,proto3" json:"EquipWeak,omitempty"`
	NoFormation           uint32              `protobuf:"varint,19,opt,name=NoFormation,proto3" json:"NoFormation,omitempty"`
	NoSubjectiveRepick    uint32              `protobuf:"varint,20,opt,name=NoSubjectiveRepick,proto3" json:"NoSubjectiveRepick,omitempty"`
	NoRiskRepick          uint32              `protobuf:"varint,21,opt,name=NoRiskRepick,proto3" json:"NoRiskRepick,omitempty"`
	UseEquipNum           int32               `protobuf:"varint,22,opt,name=UseEquipNum,proto3" json:"UseEquipNum,omitempty"`
	FastModeDiscardGold   uint32              `protobuf:"varint,23,opt,name=FastModeDiscardGold,proto3" json:"FastModeDiscardGold,omitempty"`
}

func (x *ResChessAILevel) Reset() {
	*x = ResChessAILevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResChessAILevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResChessAILevel) ProtoMessage() {}

func (x *ResChessAILevel) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResChessAILevel.ProtoReflect.Descriptor instead.
func (*ResChessAILevel) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{108}
}

func (x *ResChessAILevel) GetAILevel() uint32 {
	if x != nil {
		return x.AILevel
	}
	return 0
}

func (x *ResChessAILevel) GetExceedBattleScoreInfo() []*ResDT_IgnoreCard {
	if x != nil {
		return x.ExceedBattleScoreInfo
	}
	return nil
}

func (x *ResChessAILevel) GetMinOpInterval() uint32 {
	if x != nil {
		return x.MinOpInterval
	}
	return 0
}

func (x *ResChessAILevel) GetMaxOpInterval() uint32 {
	if x != nil {
		return x.MaxOpInterval
	}
	return 0
}

func (x *ResChessAILevel) GetSellUseLess() uint32 {
	if x != nil {
		return x.SellUseLess
	}
	return 0
}

func (x *ResChessAILevel) GetClearDepositCard() uint32 {
	if x != nil {
		return x.ClearDepositCard
	}
	return 0
}

func (x *ResChessAILevel) GetUseSkill() uint32 {
	if x != nil {
		return x.UseSkill
	}
	return 0
}

func (x *ResChessAILevel) GetFastHighRelative() uint32 {
	if x != nil {
		return x.FastHighRelative
	}
	return 0
}

func (x *ResChessAILevel) GetHighStarFirst() uint32 {
	if x != nil {
		return x.HighStarFirst
	}
	return 0
}

func (x *ResChessAILevel) GetDelayUpgradeRound() uint32 {
	if x != nil {
		return x.DelayUpgradeRound
	}
	return 0
}

func (x *ResChessAILevel) GetGoldEnoughUpgrade() uint32 {
	if x != nil {
		return x.GoldEnoughUpgrade
	}
	return 0
}

func (x *ResChessAILevel) GetRearrangeEquip() uint32 {
	if x != nil {
		return x.RearrangeEquip
	}
	return 0
}

func (x *ResChessAILevel) GetRandomEquip() uint32 {
	if x != nil {
		return x.RandomEquip
	}
	return 0
}

func (x *ResChessAILevel) GetRoundBuyCardNum() uint32 {
	if x != nil {
		return x.RoundBuyCardNum
	}
	return 0
}

func (x *ResChessAILevel) GetUseSlotNum() uint32 {
	if x != nil {
		return x.UseSlotNum
	}
	return 0
}

func (x *ResChessAILevel) GetNoRelative() uint32 {
	if x != nil {
		return x.NoRelative
	}
	return 0
}

func (x *ResChessAILevel) GetDiscardGoldRate() int32 {
	if x != nil {
		return x.DiscardGoldRate
	}
	return 0
}

func (x *ResChessAILevel) GetEquipWeak() uint32 {
	if x != nil {
		return x.EquipWeak
	}
	return 0
}

func (x *ResChessAILevel) GetNoFormation() uint32 {
	if x != nil {
		return x.NoFormation
	}
	return 0
}

func (x *ResChessAILevel) GetNoSubjectiveRepick() uint32 {
	if x != nil {
		return x.NoSubjectiveRepick
	}
	return 0
}

func (x *ResChessAILevel) GetNoRiskRepick() uint32 {
	if x != nil {
		return x.NoRiskRepick
	}
	return 0
}

func (x *ResChessAILevel) GetUseEquipNum() int32 {
	if x != nil {
		return x.UseEquipNum
	}
	return 0
}

func (x *ResChessAILevel) GetFastModeDiscardGold() uint32 {
	if x != nil {
		return x.FastModeDiscardGold
	}
	return 0
}

type ResProject8ShopInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           uint32            `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	CoinType     uint32            `protobuf:"varint,2,opt,name=CoinType,proto3" json:"CoinType,omitempty"`
	CoinCost     uint32            `protobuf:"varint,3,opt,name=CoinCost,proto3" json:"CoinCost,omitempty"`
	BuyLimitType uint32            `protobuf:"varint,4,opt,name=BuyLimitType,proto3" json:"BuyLimitType,omitempty"`
	BuyLimitCnt  uint32            `protobuf:"varint,5,opt,name=BuyLimitCnt,proto3" json:"BuyLimitCnt,omitempty"`
	BaseAward    *ResDT_RewardItem `protobuf:"bytes,6,opt,name=BaseAward,proto3" json:"BaseAward,omitempty"`
	IsShow       uint32            `protobuf:"varint,7,opt,name=IsShow,proto3" json:"IsShow,omitempty"`
}

func (x *ResProject8ShopInfo) Reset() {
	*x = ResProject8ShopInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResProject8ShopInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResProject8ShopInfo) ProtoMessage() {}

func (x *ResProject8ShopInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResProject8ShopInfo.ProtoReflect.Descriptor instead.
func (*ResProject8ShopInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{109}
}

func (x *ResProject8ShopInfo) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResProject8ShopInfo) GetCoinType() uint32 {
	if x != nil {
		return x.CoinType
	}
	return 0
}

func (x *ResProject8ShopInfo) GetCoinCost() uint32 {
	if x != nil {
		return x.CoinCost
	}
	return 0
}

func (x *ResProject8ShopInfo) GetBuyLimitType() uint32 {
	if x != nil {
		return x.BuyLimitType
	}
	return 0
}

func (x *ResProject8ShopInfo) GetBuyLimitCnt() uint32 {
	if x != nil {
		return x.BuyLimitCnt
	}
	return 0
}

func (x *ResProject8ShopInfo) GetBaseAward() *ResDT_RewardItem {
	if x != nil {
		return x.BaseAward
	}
	return nil
}

func (x *ResProject8ShopInfo) GetIsShow() uint32 {
	if x != nil {
		return x.IsShow
	}
	return 0
}

type ResProject8AwardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         uint32                              `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ShowIndex  uint32                              `protobuf:"varint,2,opt,name=ShowIndex,proto3" json:"ShowIndex,omitempty"`
	AwardLevel ResProject8AwardInfo_AwardLevelType `protobuf:"varint,3,opt,name=AwardLevel,proto3,enum=ResData.ResProject8AwardInfo_AwardLevelType" json:"AwardLevel,omitempty"`
	AwardDes   string                              `protobuf:"bytes,4,opt,name=AwardDes,proto3" json:"AwardDes,omitempty"`
	DropIDList []uint32                            `protobuf:"varint,5,rep,packed,name=DropIDList,proto3" json:"DropIDList,omitempty"`
}

func (x *ResProject8AwardInfo) Reset() {
	*x = ResProject8AwardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResProject8AwardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResProject8AwardInfo) ProtoMessage() {}

func (x *ResProject8AwardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResProject8AwardInfo.ProtoReflect.Descriptor instead.
func (*ResProject8AwardInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{110}
}

func (x *ResProject8AwardInfo) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResProject8AwardInfo) GetShowIndex() uint32 {
	if x != nil {
		return x.ShowIndex
	}
	return 0
}

func (x *ResProject8AwardInfo) GetAwardLevel() ResProject8AwardInfo_AwardLevelType {
	if x != nil {
		return x.AwardLevel
	}
	return ResProject8AwardInfo_AwardLevelType_Default
}

func (x *ResProject8AwardInfo) GetAwardDes() string {
	if x != nil {
		return x.AwardDes
	}
	return ""
}

func (x *ResProject8AwardInfo) GetDropIDList() []uint32 {
	if x != nil {
		return x.DropIDList
	}
	return nil
}

type ResProject8LordActionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	LordID     uint32 `protobuf:"varint,2,opt,name=LordID,proto3" json:"LordID,omitempty"`
	ActionDes  string `protobuf:"bytes,3,opt,name=ActionDes,proto3" json:"ActionDes,omitempty"`
	ActionPath string `protobuf:"bytes,4,opt,name=ActionPath,proto3" json:"ActionPath,omitempty"`
}

func (x *ResProject8LordActionInfo) Reset() {
	*x = ResProject8LordActionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResProject8LordActionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResProject8LordActionInfo) ProtoMessage() {}

func (x *ResProject8LordActionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResProject8LordActionInfo.ProtoReflect.Descriptor instead.
func (*ResProject8LordActionInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{111}
}

func (x *ResProject8LordActionInfo) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResProject8LordActionInfo) GetLordID() uint32 {
	if x != nil {
		return x.LordID
	}
	return 0
}

func (x *ResProject8LordActionInfo) GetActionDes() string {
	if x != nil {
		return x.ActionDes
	}
	return ""
}

func (x *ResProject8LordActionInfo) GetActionPath() string {
	if x != nil {
		return x.ActionPath
	}
	return ""
}

type ResProject8BossRoundConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	RoundNum         uint32 `protobuf:"varint,2,opt,name=RoundNum,proto3" json:"RoundNum,omitempty"`
	PlayerCount      uint32 `protobuf:"varint,3,opt,name=PlayerCount,proto3" json:"PlayerCount,omitempty"`
	PresetID         uint32 `protobuf:"varint,4,opt,name=PresetID,proto3" json:"PresetID,omitempty"`
	MatchType        uint32 `protobuf:"varint,5,opt,name=MatchType,proto3" json:"MatchType,omitempty"`
	RoundEnd         uint32 `protobuf:"varint,6,opt,name=RoundEnd,proto3" json:"RoundEnd,omitempty"`
	RaceTime         uint32 `protobuf:"varint,7,opt,name=RaceTime,proto3" json:"RaceTime,omitempty"`
	AwardTime        uint32 `protobuf:"varint,8,opt,name=AwardTime,proto3" json:"AwardTime,omitempty"`
	BossEnterAge     string `protobuf:"bytes,9,opt,name=BossEnterAge,proto3" json:"BossEnterAge,omitempty"`
	AwardChooseType  uint32 `protobuf:"varint,10,opt,name=AwardChooseType,proto3" json:"AwardChooseType,omitempty"`
	GroupPlayerCount uint32 `protobuf:"varint,11,opt,name=GroupPlayerCount,proto3" json:"GroupPlayerCount,omitempty"`
}

func (x *ResProject8BossRoundConfig) Reset() {
	*x = ResProject8BossRoundConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResProject8BossRoundConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResProject8BossRoundConfig) ProtoMessage() {}

func (x *ResProject8BossRoundConfig) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResProject8BossRoundConfig.ProtoReflect.Descriptor instead.
func (*ResProject8BossRoundConfig) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{112}
}

func (x *ResProject8BossRoundConfig) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResProject8BossRoundConfig) GetRoundNum() uint32 {
	if x != nil {
		return x.RoundNum
	}
	return 0
}

func (x *ResProject8BossRoundConfig) GetPlayerCount() uint32 {
	if x != nil {
		return x.PlayerCount
	}
	return 0
}

func (x *ResProject8BossRoundConfig) GetPresetID() uint32 {
	if x != nil {
		return x.PresetID
	}
	return 0
}

func (x *ResProject8BossRoundConfig) GetMatchType() uint32 {
	if x != nil {
		return x.MatchType
	}
	return 0
}

func (x *ResProject8BossRoundConfig) GetRoundEnd() uint32 {
	if x != nil {
		return x.RoundEnd
	}
	return 0
}

func (x *ResProject8BossRoundConfig) GetRaceTime() uint32 {
	if x != nil {
		return x.RaceTime
	}
	return 0
}

func (x *ResProject8BossRoundConfig) GetAwardTime() uint32 {
	if x != nil {
		return x.AwardTime
	}
	return 0
}

func (x *ResProject8BossRoundConfig) GetBossEnterAge() string {
	if x != nil {
		return x.BossEnterAge
	}
	return ""
}

func (x *ResProject8BossRoundConfig) GetAwardChooseType() uint32 {
	if x != nil {
		return x.AwardChooseType
	}
	return 0
}

func (x *ResProject8BossRoundConfig) GetGroupPlayerCount() uint32 {
	if x != nil {
		return x.GroupPlayerCount
	}
	return 0
}

type ResProject8BossAwardCountCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Num           uint32 `protobuf:"varint,2,opt,name=Num,proto3" json:"Num,omitempty"`
	RankNum       uint32 `protobuf:"varint,3,opt,name=RankNum,proto3" json:"RankNum,omitempty"`
	GroupAwardNum uint32 `protobuf:"varint,4,opt,name=GroupAwardNum,proto3" json:"GroupAwardNum,omitempty"`
}

func (x *ResProject8BossAwardCountCfg) Reset() {
	*x = ResProject8BossAwardCountCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResProject8BossAwardCountCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResProject8BossAwardCountCfg) ProtoMessage() {}

func (x *ResProject8BossAwardCountCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResProject8BossAwardCountCfg.ProtoReflect.Descriptor instead.
func (*ResProject8BossAwardCountCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{113}
}

func (x *ResProject8BossAwardCountCfg) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResProject8BossAwardCountCfg) GetNum() uint32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *ResProject8BossAwardCountCfg) GetRankNum() uint32 {
	if x != nil {
		return x.RankNum
	}
	return 0
}

func (x *ResProject8BossAwardCountCfg) GetGroupAwardNum() uint32 {
	if x != nil {
		return x.GroupAwardNum
	}
	return 0
}

type ResProject8PlanCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                   uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Power                uint32 `protobuf:"varint,2,opt,name=Power,proto3" json:"Power,omitempty"`
	BossHpAwardID        uint32 `protobuf:"varint,3,opt,name=BossHpAwardID,proto3" json:"BossHpAwardID,omitempty"`
	BossChooseAwardID    uint32 `protobuf:"varint,4,opt,name=BossChooseAwardID,proto3" json:"BossChooseAwardID,omitempty"`
	ExchangeCardID       uint32 `protobuf:"varint,5,opt,name=ExchangeCardID,proto3" json:"ExchangeCardID,omitempty"`
	GrabAwardID          uint32 `protobuf:"varint,6,opt,name=GrabAwardID,proto3" json:"GrabAwardID,omitempty"`
	AirdropAwardID       uint32 `protobuf:"varint,7,opt,name=AirdropAwardID,proto3" json:"AirdropAwardID,omitempty"`
	PlayerTalentSlotType uint32 `protobuf:"varint,8,opt,name=PlayerTalentSlotType,proto3" json:"PlayerTalentSlotType,omitempty"`
	StartRank            uint32 `protobuf:"varint,9,opt,name=StartRank,proto3" json:"StartRank,omitempty"`
	RandLordDropID       uint32 `protobuf:"varint,10,opt,name=RandLordDropID,proto3" json:"RandLordDropID,omitempty"`
	AuctionGroupID       uint32 `protobuf:"varint,11,opt,name=AuctionGroupID,proto3" json:"AuctionGroupID,omitempty"`
	EndRank              uint32 `protobuf:"varint,12,opt,name=EndRank,proto3" json:"EndRank,omitempty"`
}

func (x *ResProject8PlanCfg) Reset() {
	*x = ResProject8PlanCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResProject8PlanCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResProject8PlanCfg) ProtoMessage() {}

func (x *ResProject8PlanCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResProject8PlanCfg.ProtoReflect.Descriptor instead.
func (*ResProject8PlanCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{114}
}

func (x *ResProject8PlanCfg) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResProject8PlanCfg) GetPower() uint32 {
	if x != nil {
		return x.Power
	}
	return 0
}

func (x *ResProject8PlanCfg) GetBossHpAwardID() uint32 {
	if x != nil {
		return x.BossHpAwardID
	}
	return 0
}

func (x *ResProject8PlanCfg) GetBossChooseAwardID() uint32 {
	if x != nil {
		return x.BossChooseAwardID
	}
	return 0
}

func (x *ResProject8PlanCfg) GetExchangeCardID() uint32 {
	if x != nil {
		return x.ExchangeCardID
	}
	return 0
}

func (x *ResProject8PlanCfg) GetGrabAwardID() uint32 {
	if x != nil {
		return x.GrabAwardID
	}
	return 0
}

func (x *ResProject8PlanCfg) GetAirdropAwardID() uint32 {
	if x != nil {
		return x.AirdropAwardID
	}
	return 0
}

func (x *ResProject8PlanCfg) GetPlayerTalentSlotType() uint32 {
	if x != nil {
		return x.PlayerTalentSlotType
	}
	return 0
}

func (x *ResProject8PlanCfg) GetStartRank() uint32 {
	if x != nil {
		return x.StartRank
	}
	return 0
}

func (x *ResProject8PlanCfg) GetRandLordDropID() uint32 {
	if x != nil {
		return x.RandLordDropID
	}
	return 0
}

func (x *ResProject8PlanCfg) GetAuctionGroupID() uint32 {
	if x != nil {
		return x.AuctionGroupID
	}
	return 0
}

func (x *ResProject8PlanCfg) GetEndRank() uint32 {
	if x != nil {
		return x.EndRank
	}
	return 0
}

type ResProject8BossChooseAwardCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         uint32   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	GroupID    uint32   `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	Power      uint32   `protobuf:"varint,3,opt,name=Power,proto3" json:"Power,omitempty"`
	DropIDList []uint32 `protobuf:"varint,4,rep,packed,name=DropIDList,proto3" json:"DropIDList,omitempty"`
}

func (x *ResProject8BossChooseAwardCfg) Reset() {
	*x = ResProject8BossChooseAwardCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResProject8BossChooseAwardCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResProject8BossChooseAwardCfg) ProtoMessage() {}

func (x *ResProject8BossChooseAwardCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResProject8BossChooseAwardCfg.ProtoReflect.Descriptor instead.
func (*ResProject8BossChooseAwardCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{115}
}

func (x *ResProject8BossChooseAwardCfg) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResProject8BossChooseAwardCfg) GetGroupID() uint32 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *ResProject8BossChooseAwardCfg) GetPower() uint32 {
	if x != nil {
		return x.Power
	}
	return 0
}

func (x *ResProject8BossChooseAwardCfg) GetDropIDList() []uint32 {
	if x != nil {
		return x.DropIDList
	}
	return nil
}

type ResProject8BossHpAwardCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         uint32   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	GroupID    uint32   `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	Power      uint32   `protobuf:"varint,3,opt,name=Power,proto3" json:"Power,omitempty"`
	DropIDList []uint32 `protobuf:"varint,4,rep,packed,name=DropIDList,proto3" json:"DropIDList,omitempty"`
}

func (x *ResProject8BossHpAwardCfg) Reset() {
	*x = ResProject8BossHpAwardCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResProject8BossHpAwardCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResProject8BossHpAwardCfg) ProtoMessage() {}

func (x *ResProject8BossHpAwardCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResProject8BossHpAwardCfg.ProtoReflect.Descriptor instead.
func (*ResProject8BossHpAwardCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{116}
}

func (x *ResProject8BossHpAwardCfg) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResProject8BossHpAwardCfg) GetGroupID() uint32 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *ResProject8BossHpAwardCfg) GetPower() uint32 {
	if x != nil {
		return x.Power
	}
	return 0
}

func (x *ResProject8BossHpAwardCfg) GetDropIDList() []uint32 {
	if x != nil {
		return x.DropIDList
	}
	return nil
}

type ResProject8GrabAwardCountCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID   uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Num  uint32 `protobuf:"varint,2,opt,name=Num,proto3" json:"Num,omitempty"`
	Time uint32 `protobuf:"varint,3,opt,name=Time,proto3" json:"Time,omitempty"`
}

func (x *ResProject8GrabAwardCountCfg) Reset() {
	*x = ResProject8GrabAwardCountCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResProject8GrabAwardCountCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResProject8GrabAwardCountCfg) ProtoMessage() {}

func (x *ResProject8GrabAwardCountCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResProject8GrabAwardCountCfg.ProtoReflect.Descriptor instead.
func (*ResProject8GrabAwardCountCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{117}
}

func (x *ResProject8GrabAwardCountCfg) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResProject8GrabAwardCountCfg) GetNum() uint32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *ResProject8GrabAwardCountCfg) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

type ResProject8GrabAwardDropCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         uint32   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	GroupID    uint32   `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	Power      uint32   `protobuf:"varint,3,opt,name=Power,proto3" json:"Power,omitempty"`
	DropIDList []uint32 `protobuf:"varint,4,rep,packed,name=DropIDList,proto3" json:"DropIDList,omitempty"`
}

func (x *ResProject8GrabAwardDropCfg) Reset() {
	*x = ResProject8GrabAwardDropCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResProject8GrabAwardDropCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResProject8GrabAwardDropCfg) ProtoMessage() {}

func (x *ResProject8GrabAwardDropCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResProject8GrabAwardDropCfg.ProtoReflect.Descriptor instead.
func (*ResProject8GrabAwardDropCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{118}
}

func (x *ResProject8GrabAwardDropCfg) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResProject8GrabAwardDropCfg) GetGroupID() uint32 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *ResProject8GrabAwardDropCfg) GetPower() uint32 {
	if x != nil {
		return x.Power
	}
	return 0
}

func (x *ResProject8GrabAwardDropCfg) GetDropIDList() []uint32 {
	if x != nil {
		return x.DropIDList
	}
	return nil
}

type ResProject8GrabAwardGlobalCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID    uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Value uint32 `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *ResProject8GrabAwardGlobalCfg) Reset() {
	*x = ResProject8GrabAwardGlobalCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResProject8GrabAwardGlobalCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResProject8GrabAwardGlobalCfg) ProtoMessage() {}

func (x *ResProject8GrabAwardGlobalCfg) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResProject8GrabAwardGlobalCfg.ProtoReflect.Descriptor instead.
func (*ResProject8GrabAwardGlobalCfg) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{119}
}

func (x *ResProject8GrabAwardGlobalCfg) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResProject8GrabAwardGlobalCfg) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type ResDT_DropGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DropGroupID        uint32 `protobuf:"varint,1,opt,name=DropGroupID,proto3" json:"DropGroupID,omitempty"`
	DropGroupProbality uint32 `protobuf:"varint,2,opt,name=DropGroupProbality,proto3" json:"DropGroupProbality,omitempty"`
}

func (x *ResDT_DropGroup) Reset() {
	*x = ResDT_DropGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_DropGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_DropGroup) ProtoMessage() {}

func (x *ResDT_DropGroup) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_DropGroup.ProtoReflect.Descriptor instead.
func (*ResDT_DropGroup) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{120}
}

func (x *ResDT_DropGroup) GetDropGroupID() uint32 {
	if x != nil {
		return x.DropGroupID
	}
	return 0
}

func (x *ResDT_DropGroup) GetDropGroupProbality() uint32 {
	if x != nil {
		return x.DropGroupProbality
	}
	return 0
}

type ResProject8DropPlanInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        uint32             `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	DropGroup []*ResDT_DropGroup `protobuf:"bytes,2,rep,name=DropGroup,proto3" json:"DropGroup,omitempty"`
}

func (x *ResProject8DropPlanInfo) Reset() {
	*x = ResProject8DropPlanInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResProject8DropPlanInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResProject8DropPlanInfo) ProtoMessage() {}

func (x *ResProject8DropPlanInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResProject8DropPlanInfo.ProtoReflect.Descriptor instead.
func (*ResProject8DropPlanInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{121}
}

func (x *ResProject8DropPlanInfo) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResProject8DropPlanInfo) GetDropGroup() []*ResDT_DropGroup {
	if x != nil {
		return x.DropGroup
	}
	return nil
}

type ResDT_DropGroupCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConditionType   uint32 `protobuf:"varint,1,opt,name=ConditionType,proto3" json:"ConditionType,omitempty"`
	ConditionParam1 uint32 `protobuf:"varint,2,opt,name=ConditionParam1,proto3" json:"ConditionParam1,omitempty"`
	ConditionParam2 uint32 `protobuf:"varint,3,opt,name=ConditionParam2,proto3" json:"ConditionParam2,omitempty"`
	ConditionParam3 uint32 `protobuf:"varint,4,opt,name=ConditionParam3,proto3" json:"ConditionParam3,omitempty"`
}

func (x *ResDT_DropGroupCondition) Reset() {
	*x = ResDT_DropGroupCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_DropGroupCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_DropGroupCondition) ProtoMessage() {}

func (x *ResDT_DropGroupCondition) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_DropGroupCondition.ProtoReflect.Descriptor instead.
func (*ResDT_DropGroupCondition) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{122}
}

func (x *ResDT_DropGroupCondition) GetConditionType() uint32 {
	if x != nil {
		return x.ConditionType
	}
	return 0
}

func (x *ResDT_DropGroupCondition) GetConditionParam1() uint32 {
	if x != nil {
		return x.ConditionParam1
	}
	return 0
}

func (x *ResDT_DropGroupCondition) GetConditionParam2() uint32 {
	if x != nil {
		return x.ConditionParam2
	}
	return 0
}

func (x *ResDT_DropGroupCondition) GetConditionParam3() uint32 {
	if x != nil {
		return x.ConditionParam3
	}
	return 0
}

type ResDT_DropCardPoolParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EffectedByCardPool   uint32 `protobuf:"varint,1,opt,name=EffectedByCardPool,proto3" json:"EffectedByCardPool,omitempty"`
	CardPoolLevel        uint32 `protobuf:"varint,2,opt,name=CardPoolLevel,proto3" json:"CardPoolLevel,omitempty"`
	CardPoolCostParam1   uint32 `protobuf:"varint,3,opt,name=CardPoolCostParam1,proto3" json:"CardPoolCostParam1,omitempty"`
	CardPoolCostParam2   uint32 `protobuf:"varint,4,opt,name=CardPoolCostParam2,proto3" json:"CardPoolCostParam2,omitempty"`
	CardPoolFetterParam1 uint32 `protobuf:"varint,5,opt,name=CardPoolFetterParam1,proto3" json:"CardPoolFetterParam1,omitempty"`
	CardPoolFetterParam2 uint32 `protobuf:"varint,6,opt,name=CardPoolFetterParam2,proto3" json:"CardPoolFetterParam2,omitempty"`
	CardPoolStarParam    uint32 `protobuf:"varint,7,opt,name=CardPoolStarParam,proto3" json:"CardPoolStarParam,omitempty"`
}

func (x *ResDT_DropCardPoolParam) Reset() {
	*x = ResDT_DropCardPoolParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_DropCardPoolParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_DropCardPoolParam) ProtoMessage() {}

func (x *ResDT_DropCardPoolParam) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_DropCardPoolParam.ProtoReflect.Descriptor instead.
func (*ResDT_DropCardPoolParam) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{123}
}

func (x *ResDT_DropCardPoolParam) GetEffectedByCardPool() uint32 {
	if x != nil {
		return x.EffectedByCardPool
	}
	return 0
}

func (x *ResDT_DropCardPoolParam) GetCardPoolLevel() uint32 {
	if x != nil {
		return x.CardPoolLevel
	}
	return 0
}

func (x *ResDT_DropCardPoolParam) GetCardPoolCostParam1() uint32 {
	if x != nil {
		return x.CardPoolCostParam1
	}
	return 0
}

func (x *ResDT_DropCardPoolParam) GetCardPoolCostParam2() uint32 {
	if x != nil {
		return x.CardPoolCostParam2
	}
	return 0
}

func (x *ResDT_DropCardPoolParam) GetCardPoolFetterParam1() uint32 {
	if x != nil {
		return x.CardPoolFetterParam1
	}
	return 0
}

func (x *ResDT_DropCardPoolParam) GetCardPoolFetterParam2() uint32 {
	if x != nil {
		return x.CardPoolFetterParam2
	}
	return 0
}

func (x *ResDT_DropCardPoolParam) GetCardPoolStarParam() uint32 {
	if x != nil {
		return x.CardPoolStarParam
	}
	return 0
}

type ResProject8DropInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                   uint32                      `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	IndexID              uint32                      `protobuf:"varint,2,opt,name=IndexID,proto3" json:"IndexID,omitempty"`
	ItemType             RES_PROJECT8_DROP_ITEM_TYPE `protobuf:"varint,3,opt,name=ItemType,proto3,enum=ResData.RES_PROJECT8_DROP_ITEM_TYPE" json:"ItemType,omitempty"`
	ItemID               uint32                      `protobuf:"varint,4,opt,name=ItemID,proto3" json:"ItemID,omitempty"`
	ItemCount            uint32                      `protobuf:"varint,5,opt,name=ItemCount,proto3" json:"ItemCount,omitempty"`
	ProbabilityType      uint32                      `protobuf:"varint,6,opt,name=ProbabilityType,proto3" json:"ProbabilityType,omitempty"`
	Probability          uint32                      `protobuf:"varint,7,opt,name=Probability,proto3" json:"Probability,omitempty"`
	ProbabilityParamType uint32                      `protobuf:"varint,8,opt,name=ProbabilityParamType,proto3" json:"ProbabilityParamType,omitempty"`
	ProbabilityParam1    uint32                      `protobuf:"varint,9,opt,name=ProbabilityParam1,proto3" json:"ProbabilityParam1,omitempty"`
	ProbabilityParam2    uint32                      `protobuf:"varint,10,opt,name=ProbabilityParam2,proto3" json:"ProbabilityParam2,omitempty"`
	ConditionGroup       []*ResDT_DropGroupCondition `protobuf:"bytes,11,rep,name=ConditionGroup,proto3" json:"ConditionGroup,omitempty"`
	Discount             int32                       `protobuf:"varint,12,opt,name=Discount,proto3" json:"Discount,omitempty"`
	CardPoolParam        *ResDT_DropCardPoolParam    `protobuf:"bytes,13,opt,name=CardPoolParam,proto3" json:"CardPoolParam,omitempty"`
}

func (x *ResProject8DropInfo) Reset() {
	*x = ResProject8DropInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResProject8DropInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResProject8DropInfo) ProtoMessage() {}

func (x *ResProject8DropInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResProject8DropInfo.ProtoReflect.Descriptor instead.
func (*ResProject8DropInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{124}
}

func (x *ResProject8DropInfo) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResProject8DropInfo) GetIndexID() uint32 {
	if x != nil {
		return x.IndexID
	}
	return 0
}

func (x *ResProject8DropInfo) GetItemType() RES_PROJECT8_DROP_ITEM_TYPE {
	if x != nil {
		return x.ItemType
	}
	return RES_PROJECT8_DROP_ITEM_TYPE_RES_PROJECT8_DROP_ITEM_TYPE_NULL
}

func (x *ResProject8DropInfo) GetItemID() uint32 {
	if x != nil {
		return x.ItemID
	}
	return 0
}

func (x *ResProject8DropInfo) GetItemCount() uint32 {
	if x != nil {
		return x.ItemCount
	}
	return 0
}

func (x *ResProject8DropInfo) GetProbabilityType() uint32 {
	if x != nil {
		return x.ProbabilityType
	}
	return 0
}

func (x *ResProject8DropInfo) GetProbability() uint32 {
	if x != nil {
		return x.Probability
	}
	return 0
}

func (x *ResProject8DropInfo) GetProbabilityParamType() uint32 {
	if x != nil {
		return x.ProbabilityParamType
	}
	return 0
}

func (x *ResProject8DropInfo) GetProbabilityParam1() uint32 {
	if x != nil {
		return x.ProbabilityParam1
	}
	return 0
}

func (x *ResProject8DropInfo) GetProbabilityParam2() uint32 {
	if x != nil {
		return x.ProbabilityParam2
	}
	return 0
}

func (x *ResProject8DropInfo) GetConditionGroup() []*ResDT_DropGroupCondition {
	if x != nil {
		return x.ConditionGroup
	}
	return nil
}

func (x *ResProject8DropInfo) GetDiscount() int32 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *ResProject8DropInfo) GetCardPoolParam() *ResDT_DropCardPoolParam {
	if x != nil {
		return x.CardPoolParam
	}
	return nil
}

type RoundPopulationDamageFix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Damage     uint32 `protobuf:"varint,1,opt,name=Damage,proto3" json:"Damage,omitempty"`
	Correction int32  `protobuf:"varint,2,opt,name=Correction,proto3" json:"Correction,omitempty"`
}

func (x *RoundPopulationDamageFix) Reset() {
	*x = RoundPopulationDamageFix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundPopulationDamageFix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundPopulationDamageFix) ProtoMessage() {}

func (x *RoundPopulationDamageFix) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundPopulationDamageFix.ProtoReflect.Descriptor instead.
func (*RoundPopulationDamageFix) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{125}
}

func (x *RoundPopulationDamageFix) GetDamage() uint32 {
	if x != nil {
		return x.Damage
	}
	return 0
}

func (x *RoundPopulationDamageFix) GetCorrection() int32 {
	if x != nil {
		return x.Correction
	}
	return 0
}

type ResBloodEffectConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillCombineId int32 `protobuf:"varint,1,opt,name=SkillCombineId,proto3" json:"SkillCombineId,omitempty"`
}

func (x *ResBloodEffectConfig) Reset() {
	*x = ResBloodEffectConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResBloodEffectConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResBloodEffectConfig) ProtoMessage() {}

func (x *ResBloodEffectConfig) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResBloodEffectConfig.ProtoReflect.Descriptor instead.
func (*ResBloodEffectConfig) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{126}
}

func (x *ResBloodEffectConfig) GetSkillCombineId() int32 {
	if x != nil {
		return x.SkillCombineId
	}
	return 0
}

type ResDT_AwakeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AwakeType   uint32                     `protobuf:"varint,1,opt,name=AwakeType,proto3" json:"AwakeType,omitempty"`
	AwakeParam  []*ResDT_IntParamArrayNode `protobuf:"bytes,2,rep,name=AwakeParam,proto3" json:"AwakeParam,omitempty"`
	AwakeBuffID uint32                     `protobuf:"varint,3,opt,name=AwakeBuffID,proto3" json:"AwakeBuffID,omitempty"`
	AwakeLabel  string                     `protobuf:"bytes,4,opt,name=AwakeLabel,proto3" json:"AwakeLabel,omitempty"`
}

func (x *ResDT_AwakeInfo) Reset() {
	*x = ResDT_AwakeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_AwakeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_AwakeInfo) ProtoMessage() {}

func (x *ResDT_AwakeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_AwakeInfo.ProtoReflect.Descriptor instead.
func (*ResDT_AwakeInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{127}
}

func (x *ResDT_AwakeInfo) GetAwakeType() uint32 {
	if x != nil {
		return x.AwakeType
	}
	return 0
}

func (x *ResDT_AwakeInfo) GetAwakeParam() []*ResDT_IntParamArrayNode {
	if x != nil {
		return x.AwakeParam
	}
	return nil
}

func (x *ResDT_AwakeInfo) GetAwakeBuffID() uint32 {
	if x != nil {
		return x.AwakeBuffID
	}
	return 0
}

func (x *ResDT_AwakeInfo) GetAwakeLabel() string {
	if x != nil {
		return x.AwakeLabel
	}
	return ""
}

type ResSpecialGearAwakeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AwakeID   uint32             `protobuf:"varint,1,opt,name=AwakeID,proto3" json:"AwakeID,omitempty"`
	AwakeInfo []*ResDT_AwakeInfo `protobuf:"bytes,2,rep,name=AwakeInfo,proto3" json:"AwakeInfo,omitempty"`
}

func (x *ResSpecialGearAwakeInfo) Reset() {
	*x = ResSpecialGearAwakeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResSpecialGearAwakeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResSpecialGearAwakeInfo) ProtoMessage() {}

func (x *ResSpecialGearAwakeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResSpecialGearAwakeInfo.ProtoReflect.Descriptor instead.
func (*ResSpecialGearAwakeInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{128}
}

func (x *ResSpecialGearAwakeInfo) GetAwakeID() uint32 {
	if x != nil {
		return x.AwakeID
	}
	return 0
}

func (x *ResSpecialGearAwakeInfo) GetAwakeInfo() []*ResDT_AwakeInfo {
	if x != nil {
		return x.AwakeInfo
	}
	return nil
}

type ResGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    uint32                 `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	SubType uint32                 `protobuf:"varint,2,opt,name=SubType,proto3" json:"SubType,omitempty"`
	Cfg     *ResDT_Common_KeyValue `protobuf:"bytes,3,opt,name=Cfg,proto3" json:"Cfg,omitempty"`
}

func (x *ResGroup) Reset() {
	*x = ResGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGroup) ProtoMessage() {}

func (x *ResGroup) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGroup.ProtoReflect.Descriptor instead.
func (*ResGroup) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{129}
}

func (x *ResGroup) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ResGroup) GetSubType() uint32 {
	if x != nil {
		return x.SubType
	}
	return 0
}

func (x *ResGroup) GetCfg() *ResDT_Common_KeyValue {
	if x != nil {
		return x.Cfg
	}
	return nil
}

type RES_RoundFunctionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundFunction RES_RoundFunction `protobuf:"varint,1,opt,name=RoundFunction,proto3,enum=ResData.RES_RoundFunction" json:"RoundFunction,omitempty"`
	RoundIcon     string            `protobuf:"bytes,2,opt,name=RoundIcon,proto3" json:"RoundIcon,omitempty"`
}

func (x *RES_RoundFunctionData) Reset() {
	*x = RES_RoundFunctionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RES_RoundFunctionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RES_RoundFunctionData) ProtoMessage() {}

func (x *RES_RoundFunctionData) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RES_RoundFunctionData.ProtoReflect.Descriptor instead.
func (*RES_RoundFunctionData) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{130}
}

func (x *RES_RoundFunctionData) GetRoundFunction() RES_RoundFunction {
	if x != nil {
		return x.RoundFunction
	}
	return RES_RoundFunction_ROUNDFUNCTIONN_NULL
}

func (x *RES_RoundFunctionData) GetRoundIcon() string {
	if x != nil {
		return x.RoundIcon
	}
	return ""
}

type ResRoundStateFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundNum           uint32                           `protobuf:"varint,1,opt,name=RoundNum,proto3" json:"RoundNum,omitempty"`
	RoundStage         ResRoundStateFlow_RoundStageType `protobuf:"varint,2,opt,name=RoundStage,proto3,enum=ResData.ResRoundStateFlow_RoundStageType" json:"RoundStage,omitempty"`
	NoInterest         uint32                           `protobuf:"varint,3,opt,name=NoInterest,proto3" json:"NoInterest,omitempty"`
	NoRefreshCard      uint32                           `protobuf:"varint,4,opt,name=NoRefreshCard,proto3" json:"NoRefreshCard,omitempty"`
	AddCoin            uint32                           `protobuf:"varint,5,opt,name=AddCoin,proto3" json:"AddCoin,omitempty"`
	AddExp             uint32                           `protobuf:"varint,6,opt,name=AddExp,proto3" json:"AddExp,omitempty"`
	RoundName          string                           `protobuf:"bytes,7,opt,name=RoundName,proto3" json:"RoundName,omitempty"`
	RoundStateType     uint32                           `protobuf:"varint,8,opt,name=RoundStateType,proto3" json:"RoundStateType,omitempty"`
	SaveRecoverData    uint32                           `protobuf:"varint,9,opt,name=SaveRecoverData,proto3" json:"SaveRecoverData,omitempty"`
	DisplayRoundNum    string                           `protobuf:"bytes,10,opt,name=DisplayRoundNum,proto3" json:"DisplayRoundNum,omitempty"`
	SynchroEntry       uint32                           `protobuf:"varint,11,opt,name=SynchroEntry,proto3" json:"SynchroEntry,omitempty"`
	RoundFunctionDatas []*RES_RoundFunctionData         `protobuf:"bytes,12,rep,name=RoundFunctionDatas,proto3" json:"RoundFunctionDatas,omitempty"`
	RoundNickName      string                           `protobuf:"bytes,13,opt,name=RoundNickName,proto3" json:"RoundNickName,omitempty"`
	StageIcon          string                           `protobuf:"bytes,14,opt,name=StageIcon,proto3" json:"StageIcon,omitempty"`
	DefaultShow        bool                             `protobuf:"varint,15,opt,name=DefaultShow,proto3" json:"DefaultShow,omitempty"`
}

func (x *ResRoundStateFlow) Reset() {
	*x = ResRoundStateFlow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResRoundStateFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResRoundStateFlow) ProtoMessage() {}

func (x *ResRoundStateFlow) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResRoundStateFlow.ProtoReflect.Descriptor instead.
func (*ResRoundStateFlow) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{131}
}

func (x *ResRoundStateFlow) GetRoundNum() uint32 {
	if x != nil {
		return x.RoundNum
	}
	return 0
}

func (x *ResRoundStateFlow) GetRoundStage() ResRoundStateFlow_RoundStageType {
	if x != nil {
		return x.RoundStage
	}
	return ResRoundStateFlow_RoundStageType_Warmup
}

func (x *ResRoundStateFlow) GetNoInterest() uint32 {
	if x != nil {
		return x.NoInterest
	}
	return 0
}

func (x *ResRoundStateFlow) GetNoRefreshCard() uint32 {
	if x != nil {
		return x.NoRefreshCard
	}
	return 0
}

func (x *ResRoundStateFlow) GetAddCoin() uint32 {
	if x != nil {
		return x.AddCoin
	}
	return 0
}

func (x *ResRoundStateFlow) GetAddExp() uint32 {
	if x != nil {
		return x.AddExp
	}
	return 0
}

func (x *ResRoundStateFlow) GetRoundName() string {
	if x != nil {
		return x.RoundName
	}
	return ""
}

func (x *ResRoundStateFlow) GetRoundStateType() uint32 {
	if x != nil {
		return x.RoundStateType
	}
	return 0
}

func (x *ResRoundStateFlow) GetSaveRecoverData() uint32 {
	if x != nil {
		return x.SaveRecoverData
	}
	return 0
}

func (x *ResRoundStateFlow) GetDisplayRoundNum() string {
	if x != nil {
		return x.DisplayRoundNum
	}
	return ""
}

func (x *ResRoundStateFlow) GetSynchroEntry() uint32 {
	if x != nil {
		return x.SynchroEntry
	}
	return 0
}

func (x *ResRoundStateFlow) GetRoundFunctionDatas() []*RES_RoundFunctionData {
	if x != nil {
		return x.RoundFunctionDatas
	}
	return nil
}

func (x *ResRoundStateFlow) GetRoundNickName() string {
	if x != nil {
		return x.RoundNickName
	}
	return ""
}

func (x *ResRoundStateFlow) GetStageIcon() string {
	if x != nil {
		return x.StageIcon
	}
	return ""
}

func (x *ResRoundStateFlow) GetDefaultShow() bool {
	if x != nil {
		return x.DefaultShow
	}
	return false
}

type ResBattleRoundState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundNum           uint32 `protobuf:"varint,1,opt,name=RoundNum,proto3" json:"RoundNum,omitempty"`
	PrepareTime        int32  `protobuf:"varint,2,opt,name=PrepareTime,proto3" json:"PrepareTime,omitempty"`
	RaceTime           int32  `protobuf:"varint,3,opt,name=RaceTime,proto3" json:"RaceTime,omitempty"`
	OverTime           int32  `protobuf:"varint,4,opt,name=OverTime,proto3" json:"OverTime,omitempty"`
	ExtraDamage        uint32 `protobuf:"varint,5,opt,name=ExtraDamage,proto3" json:"ExtraDamage,omitempty"`
	TeleportataionTime int32  `protobuf:"varint,6,opt,name=TeleportataionTime,proto3" json:"TeleportataionTime,omitempty"`
	PreRaceTime        int32  `protobuf:"varint,7,opt,name=PreRaceTime,proto3" json:"PreRaceTime,omitempty"`
	DamageUpperLimit   uint32 `protobuf:"varint,8,opt,name=DamageUpperLimit,proto3" json:"DamageUpperLimit,omitempty"`
	AirdropTime        int32  `protobuf:"varint,9,opt,name=AirdropTime,proto3" json:"AirdropTime,omitempty"`
}

func (x *ResBattleRoundState) Reset() {
	*x = ResBattleRoundState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResBattleRoundState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResBattleRoundState) ProtoMessage() {}

func (x *ResBattleRoundState) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResBattleRoundState.ProtoReflect.Descriptor instead.
func (*ResBattleRoundState) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{132}
}

func (x *ResBattleRoundState) GetRoundNum() uint32 {
	if x != nil {
		return x.RoundNum
	}
	return 0
}

func (x *ResBattleRoundState) GetPrepareTime() int32 {
	if x != nil {
		return x.PrepareTime
	}
	return 0
}

func (x *ResBattleRoundState) GetRaceTime() int32 {
	if x != nil {
		return x.RaceTime
	}
	return 0
}

func (x *ResBattleRoundState) GetOverTime() int32 {
	if x != nil {
		return x.OverTime
	}
	return 0
}

func (x *ResBattleRoundState) GetExtraDamage() uint32 {
	if x != nil {
		return x.ExtraDamage
	}
	return 0
}

func (x *ResBattleRoundState) GetTeleportataionTime() int32 {
	if x != nil {
		return x.TeleportataionTime
	}
	return 0
}

func (x *ResBattleRoundState) GetPreRaceTime() int32 {
	if x != nil {
		return x.PreRaceTime
	}
	return 0
}

func (x *ResBattleRoundState) GetDamageUpperLimit() uint32 {
	if x != nil {
		return x.DamageUpperLimit
	}
	return 0
}

func (x *ResBattleRoundState) GetAirdropTime() int32 {
	if x != nil {
		return x.AirdropTime
	}
	return 0
}

type ResGameWatchLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundStateType uint32 `protobuf:"varint,1,opt,name=RoundStateType,proto3" json:"RoundStateType,omitempty"`
	AllowGameWatch bool   `protobuf:"varint,2,opt,name=AllowGameWatch,proto3" json:"AllowGameWatch,omitempty"`
}

func (x *ResGameWatchLimit) Reset() {
	*x = ResGameWatchLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGameWatchLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGameWatchLimit) ProtoMessage() {}

func (x *ResGameWatchLimit) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGameWatchLimit.ProtoReflect.Descriptor instead.
func (*ResGameWatchLimit) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{133}
}

func (x *ResGameWatchLimit) GetRoundStateType() uint32 {
	if x != nil {
		return x.RoundStateType
	}
	return 0
}

func (x *ResGameWatchLimit) GetAllowGameWatch() bool {
	if x != nil {
		return x.AllowGameWatch
	}
	return false
}

type ResDT_ChessMoveTestInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigId uint32 `protobuf:"varint,1,opt,name=ConfigId,proto3" json:"ConfigId,omitempty"`
	CoordX   int32  `protobuf:"varint,2,opt,name=CoordX,proto3" json:"CoordX,omitempty"`
	CoordZ   int32  `protobuf:"varint,3,opt,name=CoordZ,proto3" json:"CoordZ,omitempty"`
	Delay    uint32 `protobuf:"varint,4,opt,name=Delay,proto3" json:"Delay,omitempty"`
	DestX    int32  `protobuf:"varint,5,opt,name=DestX,proto3" json:"DestX,omitempty"`
	DestZ    int32  `protobuf:"varint,6,opt,name=DestZ,proto3" json:"DestZ,omitempty"`
}

func (x *ResDT_ChessMoveTestInfo) Reset() {
	*x = ResDT_ChessMoveTestInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_ChessMoveTestInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_ChessMoveTestInfo) ProtoMessage() {}

func (x *ResDT_ChessMoveTestInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_ChessMoveTestInfo.ProtoReflect.Descriptor instead.
func (*ResDT_ChessMoveTestInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{134}
}

func (x *ResDT_ChessMoveTestInfo) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *ResDT_ChessMoveTestInfo) GetCoordX() int32 {
	if x != nil {
		return x.CoordX
	}
	return 0
}

func (x *ResDT_ChessMoveTestInfo) GetCoordZ() int32 {
	if x != nil {
		return x.CoordZ
	}
	return 0
}

func (x *ResDT_ChessMoveTestInfo) GetDelay() uint32 {
	if x != nil {
		return x.Delay
	}
	return 0
}

func (x *ResDT_ChessMoveTestInfo) GetDestX() int32 {
	if x != nil {
		return x.DestX
	}
	return 0
}

func (x *ResDT_ChessMoveTestInfo) GetDestZ() int32 {
	if x != nil {
		return x.DestZ
	}
	return 0
}

type ResChessMoveTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PresetID     uint32                     `protobuf:"varint,1,opt,name=PresetID,proto3" json:"PresetID,omitempty"`
	PresetDetail []*ResDT_ChessMoveTestInfo `protobuf:"bytes,2,rep,name=PresetDetail,proto3" json:"PresetDetail,omitempty"`
}

func (x *ResChessMoveTest) Reset() {
	*x = ResChessMoveTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResChessMoveTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResChessMoveTest) ProtoMessage() {}

func (x *ResChessMoveTest) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResChessMoveTest.ProtoReflect.Descriptor instead.
func (*ResChessMoveTest) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{135}
}

func (x *ResChessMoveTest) GetPresetID() uint32 {
	if x != nil {
		return x.PresetID
	}
	return 0
}

func (x *ResChessMoveTest) GetPresetDetail() []*ResDT_ChessMoveTestInfo {
	if x != nil {
		return x.PresetDetail
	}
	return nil
}

type ResDT_LevelCommonInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                              string                               `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	DesignFileName                    string                               `protobuf:"bytes,2,opt,name=DesignFileName,proto3" json:"DesignFileName,omitempty"`
	ArtistFileName                    string                               `protobuf:"bytes,3,opt,name=ArtistFileName,proto3" json:"ArtistFileName,omitempty"`
	ArtistExtFileName                 string                               `protobuf:"bytes,4,opt,name=ArtistExtFileName,proto3" json:"ArtistExtFileName,omitempty"`
	ForbiddenKickoutBeforeGameLoading uint32                               `protobuf:"varint,5,opt,name=ForbiddenKickoutBeforeGameLoading,proto3" json:"ForbiddenKickoutBeforeGameLoading,omitempty"`
	ConfirmType                       uint32                               `protobuf:"varint,6,opt,name=ConfirmType,proto3" json:"ConfirmType,omitempty"`
	NightStartTime                    uint32                               `protobuf:"varint,7,opt,name=NightStartTime,proto3" json:"NightStartTime,omitempty"`
	NightEndTime                      uint32                               `protobuf:"varint,8,opt,name=NightEndTime,proto3" json:"NightEndTime,omitempty"`
	NightDays                         uint32                               `protobuf:"varint,9,opt,name=NightDays,proto3" json:"NightDays,omitempty"`
	MaxAcntNum                        uint32                               `protobuf:"varint,10,opt,name=MaxAcntNum,proto3" json:"MaxAcntNum,omitempty"`
	MaxCamp                           uint32                               `protobuf:"varint,11,opt,name=MaxCamp,proto3" json:"MaxCamp,omitempty"`
	LeastAcntNum                      uint32                               `protobuf:"varint,12,opt,name=LeastAcntNum,proto3" json:"LeastAcntNum,omitempty"`
	MaxAcntTimeOut                    uint32                               `protobuf:"varint,13,opt,name=MaxAcntTimeOut,proto3" json:"MaxAcntTimeOut,omitempty"`
	ValidRoomType                     uint32                               `protobuf:"varint,14,opt,name=ValidRoomType,proto3" json:"ValidRoomType,omitempty"`
	IsAllowAddComAI                   uint32                               `protobuf:"varint,15,opt,name=IsAllowAddComAI,proto3" json:"IsAllowAddComAI,omitempty"`
	HeroNum                           uint32                               `protobuf:"varint,16,opt,name=HeroNum,proto3" json:"HeroNum,omitempty"`
	IsAllowHeroDup                    uint32                               `protobuf:"varint,17,opt,name=IsAllowHeroDup,proto3" json:"IsAllowHeroDup,omitempty"`
	HeroFormId                        uint32                               `protobuf:"varint,18,opt,name=HeroFormId,proto3" json:"HeroFormId,omitempty"`
	HeroAIType                        int32                                `protobuf:"varint,19,opt,name=HeroAIType,proto3" json:"HeroAIType,omitempty"`
	ComputerHeroAI                    string                               `protobuf:"bytes,20,opt,name=ComputerHeroAI,proto3" json:"ComputerHeroAI,omitempty"`
	HeroBornAgeDelayTime              int32                                `protobuf:"varint,21,opt,name=HeroBornAgeDelayTime,proto3" json:"HeroBornAgeDelayTime,omitempty"`
	ThumbnailPath                     string                               `protobuf:"bytes,22,opt,name=ThumbnailPath,proto3" json:"ThumbnailPath,omitempty"`
	MapPath                           string                               `protobuf:"bytes,23,opt,name=MapPath,proto3" json:"MapPath,omitempty"`
	BigMapPath                        string                               `protobuf:"bytes,24,opt,name=BigMapPath,proto3" json:"BigMapPath,omitempty"`
	MapWidth                          int32                                `protobuf:"varint,25,opt,name=MapWidth,proto3" json:"MapWidth,omitempty"`
	MapHeight                         int32                                `protobuf:"varint,26,opt,name=MapHeight,proto3" json:"MapHeight,omitempty"`
	SmallMapWidth                     int32                                `protobuf:"varint,27,opt,name=SmallMapWidth,proto3" json:"SmallMapWidth,omitempty"`
	SmallMapHeight                    int32                                `protobuf:"varint,28,opt,name=SmallMapHeight,proto3" json:"SmallMapHeight,omitempty"`
	BigMapWidth                       int32                                `protobuf:"varint,29,opt,name=BigMapWidth,proto3" json:"BigMapWidth,omitempty"`
	BigMapHeight                      int32                                `protobuf:"varint,30,opt,name=BigMapHeight,proto3" json:"BigMapHeight,omitempty"`
	MapBlockWidth                     int32                                `protobuf:"varint,31,opt,name=MapBlockWidth,proto3" json:"MapBlockWidth,omitempty"`
	MapBlockHeight                    int32                                `protobuf:"varint,32,opt,name=MapBlockHeight,proto3" json:"MapBlockHeight,omitempty"`
	UseNavHeightLimit                 int32                                `protobuf:"varint,33,opt,name=UseNavHeightLimit,proto3" json:"UseNavHeightLimit,omitempty"`
	MapFowScale                       float32                              `protobuf:"fixed32,34,opt,name=MapFowScale,proto3" json:"MapFowScale,omitempty"`
	BigMapFowScale                    float32                              `protobuf:"fixed32,35,opt,name=BigMapFowScale,proto3" json:"BigMapFowScale,omitempty"`
	SoulAllocID                       uint32                               `protobuf:"varint,36,opt,name=SoulAllocID,proto3" json:"SoulAllocID,omitempty"`
	IsOpenExpCompensate               uint32                               `protobuf:"varint,37,opt,name=IsOpenExpCompensate,proto3" json:"IsOpenExpCompensate,omitempty"`
	ExpCompensateDetail               []*ResDT_CompensateInfo              `protobuf:"bytes,38,rep,name=ExpCompensateDetail,proto3" json:"ExpCompensateDetail,omitempty"`
	IsOpenCoinCompensate              uint32                               `protobuf:"varint,39,opt,name=IsOpenCoinCompensate,proto3" json:"IsOpenCoinCompensate,omitempty"`
	CoinCompensateDetail              []*ResDT_CompensateInfo              `protobuf:"bytes,40,rep,name=CoinCompensateDetail,proto3" json:"CoinCompensateDetail,omitempty"`
	ExtraSkillId                      int32                                `protobuf:"varint,41,opt,name=ExtraSkillId,proto3" json:"ExtraSkillId,omitempty"`
	ExtraSkill2Id                     int32                                `protobuf:"varint,42,opt,name=ExtraSkill2Id,proto3" json:"ExtraSkill2Id,omitempty"`
	ExtraSkill3Id                     int32                                `protobuf:"varint,43,opt,name=ExtraSkill3Id,proto3" json:"ExtraSkill3Id,omitempty"`
	ExtraSkill4Id                     int32                                `protobuf:"varint,44,opt,name=ExtraSkill4Id,proto3" json:"ExtraSkill4Id,omitempty"`
	ExtraPassiveSkillId1              int32                                `protobuf:"varint,45,opt,name=ExtraPassiveSkillId1,proto3" json:"ExtraPassiveSkillId1,omitempty"`
	ExtraPassiveSkillId2              int32                                `protobuf:"varint,46,opt,name=ExtraPassiveSkillId2,proto3" json:"ExtraPassiveSkillId2,omitempty"`
	ExtraSkillLogicSlot               uint32                               `protobuf:"varint,47,opt,name=ExtraSkillLogicSlot,proto3" json:"ExtraSkillLogicSlot,omitempty"`
	ExtraSkill2LogicSlot              uint32                               `protobuf:"varint,48,opt,name=ExtraSkill2LogicSlot,proto3" json:"ExtraSkill2LogicSlot,omitempty"`
	ExtraSkill3LogicSlot              uint32                               `protobuf:"varint,49,opt,name=ExtraSkill3LogicSlot,proto3" json:"ExtraSkill3LogicSlot,omitempty"`
	ExtraSkill4LogicSlot              uint32                               `protobuf:"varint,50,opt,name=ExtraSkill4LogicSlot,proto3" json:"ExtraSkill4LogicSlot,omitempty"`
	FinResultType                     uint32                               `protobuf:"varint,51,opt,name=FinResultType,proto3" json:"FinResultType,omitempty"`
	RandPickHero                      uint32                               `protobuf:"varint,52,opt,name=RandPickHero,proto3" json:"RandPickHero,omitempty"`
	PreloadActorList                  string                               `protobuf:"bytes,53,opt,name=PreloadActorList,proto3" json:"PreloadActorList,omitempty"`
	AddWinCondStarId                  uint32                               `protobuf:"varint,54,opt,name=AddWinCondStarId,proto3" json:"AddWinCondStarId,omitempty"`
	AddLoseCondStarId                 uint32                               `protobuf:"varint,55,opt,name=AddLoseCondStarId,proto3" json:"AddLoseCondStarId,omitempty"`
	TimeDuration                      uint32                               `protobuf:"varint,56,opt,name=TimeDuration,proto3" json:"TimeDuration,omitempty"`
	SoulConfigId                      uint32                               `protobuf:"varint,57,opt,name=SoulConfigId,proto3" json:"SoulConfigId,omitempty"`
	CameraFlip                        uint32                               `protobuf:"varint,58,opt,name=CameraFlip,proto3" json:"CameraFlip,omitempty"`
	CameraRotate                      uint32                               `protobuf:"varint,59,opt,name=CameraRotate,proto3" json:"CameraRotate,omitempty"`
	SoldierActivateCountDelay1        int32                                `protobuf:"varint,60,opt,name=SoldierActivateCountDelay1,proto3" json:"SoldierActivateCountDelay1,omitempty"`
	SoldierActivateCountDelay2        int32                                `protobuf:"varint,61,opt,name=SoldierActivateCountDelay2,proto3" json:"SoldierActivateCountDelay2,omitempty"`
	SoldierActivateDelay              int32                                `protobuf:"varint,62,opt,name=SoldierActivateDelay,proto3" json:"SoldierActivateDelay,omitempty"`
	BattleEquipLimit                  uint32                               `protobuf:"varint,63,opt,name=BattleEquipLimit,proto3" json:"BattleEquipLimit,omitempty"`
	BirthLevelConfig                  uint32                               `protobuf:"varint,64,opt,name=BirthLevelConfig,proto3" json:"BirthLevelConfig,omitempty"`
	ChaosPickRule                     uint32                               `protobuf:"varint,65,opt,name=ChaosPickRule,proto3" json:"ChaosPickRule,omitempty"`
	HeadPtsUpperLimit                 uint32                               `protobuf:"varint,66,opt,name=HeadPtsUpperLimit,proto3" json:"HeadPtsUpperLimit,omitempty"`
	SrvLeastDestoryTowerNum           uint32                               `protobuf:"varint,67,opt,name=SrvLeastDestoryTowerNum,proto3" json:"SrvLeastDestoryTowerNum,omitempty"`
	SrvLeastDestoryBaseNum            uint32                               `protobuf:"varint,68,opt,name=SrvLeastDestoryBaseNum,proto3" json:"SrvLeastDestoryBaseNum,omitempty"`
	SrvLeastKillCntNum                uint32                               `protobuf:"varint,69,opt,name=SrvLeastKillCntNum,proto3" json:"SrvLeastKillCntNum,omitempty"`
	DealHangUp                        uint32                               `protobuf:"varint,70,opt,name=DealHangUp,proto3" json:"DealHangUp,omitempty"`
	UnLockCondID                      uint32                               `protobuf:"varint,71,opt,name=UnLockCondID,proto3" json:"UnLockCondID,omitempty"`
	ShowHonor                         uint32                               `protobuf:"varint,72,opt,name=ShowHonor,proto3" json:"ShowHonor,omitempty"`
	PickRuleInfo                      *ResDT_PickRuleInfo                  `protobuf:"bytes,73,opt,name=PickRuleInfo,proto3" json:"PickRuleInfo,omitempty"`
	PickTime                          uint32                               `protobuf:"varint,74,opt,name=PickTime,proto3" json:"PickTime,omitempty"`
	CooldownReduceUpperLimit          uint32                               `protobuf:"varint,75,opt,name=CooldownReduceUpperLimit,proto3" json:"CooldownReduceUpperLimit,omitempty"`
	PvpDifficulty                     int32                                `protobuf:"varint,76,opt,name=pvpDifficulty,proto3" json:"pvpDifficulty,omitempty"`
	ChatID                            uint32                               `protobuf:"varint,77,opt,name=chatID,proto3" json:"chatID,omitempty"`
	UnUseSkillInfo                    *ResDT_UnUseSkill                    `protobuf:"bytes,78,opt,name=UnUseSkillInfo,proto3" json:"UnUseSkillInfo,omitempty"`
	AttackOrderID                     uint32                               `protobuf:"varint,79,opt,name=AttackOrderID,proto3" json:"AttackOrderID,omitempty"`
	DynamicPropertyCfg                uint32                               `protobuf:"varint,80,opt,name=DynamicPropertyCfg,proto3" json:"DynamicPropertyCfg,omitempty"`
	OriginalGoldCoinInBattle          uint32                               `protobuf:"varint,81,opt,name=OriginalGoldCoinInBattle,proto3" json:"OriginalGoldCoinInBattle,omitempty"`
	CompensateExpBuffID               uint32                               `protobuf:"varint,82,opt,name=CompensateExpBuffID,proto3" json:"CompensateExpBuffID,omitempty"`
	CompensateGoldBuffID              uint32                               `protobuf:"varint,83,opt,name=CompensateGoldBuffID,proto3" json:"CompensateGoldBuffID,omitempty"`
	BattleTaskOfCamp1                 uint32                               `protobuf:"varint,84,opt,name=BattleTaskOfCamp1,proto3" json:"BattleTaskOfCamp1,omitempty"`
	BattleTaskOfCamp2                 uint32                               `protobuf:"varint,85,opt,name=BattleTaskOfCamp2,proto3" json:"BattleTaskOfCamp2,omitempty"`
	MusicStartEvent                   string                               `protobuf:"bytes,86,opt,name=MusicStartEvent,proto3" json:"MusicStartEvent,omitempty"`
	MusicEndEvent                     string                               `protobuf:"bytes,87,opt,name=MusicEndEvent,proto3" json:"MusicEndEvent,omitempty"`
	AmbientSoundEvent                 string                               `protobuf:"bytes,88,opt,name=AmbientSoundEvent,proto3" json:"AmbientSoundEvent,omitempty"`
	BankResourceName                  string                               `protobuf:"bytes,89,opt,name=BankResourceName,proto3" json:"BankResourceName,omitempty"`
	SupportCameraDrag                 uint32                               `protobuf:"varint,90,opt,name=SupportCameraDrag,proto3" json:"SupportCameraDrag,omitempty"`
	GameMatchName                     string                               `protobuf:"bytes,91,opt,name=GameMatchName,proto3" json:"GameMatchName,omitempty"`
	HorizonMethod                     uint32                               `protobuf:"varint,92,opt,name=HorizonMethod,proto3" json:"HorizonMethod,omitempty"`
	IsEnableShopHorizonTab            uint32                               `protobuf:"varint,93,opt,name=IsEnableShopHorizonTab,proto3" json:"IsEnableShopHorizonTab,omitempty"`
	IsEnableOrnamentSlot              uint32                               `protobuf:"varint,94,opt,name=IsEnableOrnamentSlot,proto3" json:"IsEnableOrnamentSlot,omitempty"`
	IsEnableGemstoneSlot              uint32                               `protobuf:"varint,95,opt,name=IsEnableGemstoneSlot,proto3" json:"IsEnableGemstoneSlot,omitempty"`
	EnableExtCommonSlot               uint32                               `protobuf:"varint,96,opt,name=EnableExtCommonSlot,proto3" json:"EnableExtCommonSlot,omitempty"`
	IsDisablePackage                  uint32                               `protobuf:"varint,97,opt,name=IsDisablePackage,proto3" json:"IsDisablePackage,omitempty"`
	OrnamentSkillId                   int32                                `protobuf:"varint,98,opt,name=OrnamentSkillId,proto3" json:"OrnamentSkillId,omitempty"`
	OrnamentSwitchCD                  int32                                `protobuf:"varint,99,opt,name=OrnamentSwitchCD,proto3" json:"OrnamentSwitchCD,omitempty"`
	OrnamentFirstSwitchCD             int32                                `protobuf:"varint,100,opt,name=OrnamentFirstSwitchCD,proto3" json:"OrnamentFirstSwitchCD,omitempty"`
	OrnamentFirstSwitchCDEftTime      int32                                `protobuf:"varint,101,opt,name=OrnamentFirstSwitchCDEftTime,proto3" json:"OrnamentFirstSwitchCDEftTime,omitempty"`
	CompeteSvrJudgeNum                uint32                               `protobuf:"varint,102,opt,name=CompeteSvrJudgeNum,proto3" json:"CompeteSvrJudgeNum,omitempty"`
	JudgeNum                          uint32                               `protobuf:"varint,103,opt,name=JudgeNum,proto3" json:"JudgeNum,omitempty"`
	PauseNum                          uint32                               `protobuf:"varint,104,opt,name=PauseNum,proto3" json:"PauseNum,omitempty"`
	CompetePauseNum                   uint32                               `protobuf:"varint,105,opt,name=CompetePauseNum,proto3" json:"CompetePauseNum,omitempty"`
	WealGameSubType                   uint32                               `protobuf:"varint,106,opt,name=WealGameSubType,proto3" json:"WealGameSubType,omitempty"`
	SupportHighTowerSoldier           uint32                               `protobuf:"varint,107,opt,name=SupportHighTowerSoldier,proto3" json:"SupportHighTowerSoldier,omitempty"`
	ShowTeamHint                      uint32                               `protobuf:"varint,108,opt,name=ShowTeamHint,proto3" json:"ShowTeamHint,omitempty"`
	ShowWinRatio                      uint32                               `protobuf:"varint,109,opt,name=ShowWinRatio,proto3" json:"ShowWinRatio,omitempty"`
	ForceTimeoutPick                  uint32                               `protobuf:"varint,110,opt,name=ForceTimeoutPick,proto3" json:"ForceTimeoutPick,omitempty"`
	EnableEquipExtraActiveSkill       uint32                               `protobuf:"varint,111,opt,name=EnableEquipExtraActiveSkill,proto3" json:"EnableEquipExtraActiveSkill,omitempty"`
	FakeSightRange                    int32                                `protobuf:"varint,112,opt,name=FakeSightRange,proto3" json:"FakeSightRange,omitempty"`
	HeroLiftTime                      int32                                `protobuf:"varint,113,opt,name=HeroLiftTime,proto3" json:"HeroLiftTime,omitempty"`
	HeroLiftTimeMaxLimit              int32                                `protobuf:"varint,114,opt,name=HeroLiftTimeMaxLimit,proto3" json:"HeroLiftTimeMaxLimit,omitempty"`
	ItemSellDiscount                  int32                                `protobuf:"varint,115,opt,name=ItemSellDiscount,proto3" json:"ItemSellDiscount,omitempty"`
	TowerWarmerAlways                 uint32                               `protobuf:"varint,116,opt,name=TowerWarmerAlways,proto3" json:"TowerWarmerAlways,omitempty"`
	ForbidEquip                       string                               `protobuf:"bytes,117,opt,name=ForbidEquip,proto3" json:"ForbidEquip,omitempty"`
	BelongEquip                       string                               `protobuf:"bytes,118,opt,name=BelongEquip,proto3" json:"BelongEquip,omitempty"`
	ForbidShopEquip                   string                               `protobuf:"bytes,119,opt,name=ForbidShopEquip,proto3" json:"ForbidShopEquip,omitempty"`
	ForbidReplaceShopEquip            string                               `protobuf:"bytes,120,opt,name=ForbidReplaceShopEquip,proto3" json:"ForbidReplaceShopEquip,omitempty"`
	PriceRaiseEquip                   string                               `protobuf:"bytes,121,opt,name=PriceRaiseEquip,proto3" json:"PriceRaiseEquip,omitempty"`
	PriceRaiseRatio                   string                               `protobuf:"bytes,122,opt,name=PriceRaiseRatio,proto3" json:"PriceRaiseRatio,omitempty"`
	AllHeroValid                      uint32                               `protobuf:"varint,123,opt,name=AllHeroValid,proto3" json:"AllHeroValid,omitempty"`
	UseShenfuEquipSys                 uint32                               `protobuf:"varint,124,opt,name=UseShenfuEquipSys,proto3" json:"UseShenfuEquipSys,omitempty"`
	UseColorfulHud                    uint32                               `protobuf:"varint,125,opt,name=UseColorfulHud,proto3" json:"UseColorfulHud,omitempty"`
	HeroJobBuffGroupID                uint32                               `protobuf:"varint,126,opt,name=HeroJobBuffGroupID,proto3" json:"HeroJobBuffGroupID,omitempty"`
	HeroBuffGroupID                   uint32                               `protobuf:"varint,127,opt,name=HeroBuffGroupID,proto3" json:"HeroBuffGroupID,omitempty"`
	IntimacyBuffGroupID               uint32                               `protobuf:"varint,128,opt,name=IntimacyBuffGroupID,proto3" json:"IntimacyBuffGroupID,omitempty"`
	FinDramaID                        uint32                               `protobuf:"varint,129,opt,name=FinDramaID,proto3" json:"FinDramaID,omitempty"`
	LevelSwitchID                     uint32                               `protobuf:"varint,130,opt,name=LevelSwitchID,proto3" json:"LevelSwitchID,omitempty"`
	CompeteSvrSurrenderTime           uint32                               `protobuf:"varint,131,opt,name=CompeteSvrSurrenderTime,proto3" json:"CompeteSvrSurrenderTime,omitempty"`
	SurrenderTime                     uint32                               `protobuf:"varint,132,opt,name=SurrenderTime,proto3" json:"SurrenderTime,omitempty"`
	OriginalPriceSellTime             uint32                               `protobuf:"varint,133,opt,name=OriginalPriceSellTime,proto3" json:"OriginalPriceSellTime,omitempty"`
	SceneBrightnessSetID              uint32                               `protobuf:"varint,134,opt,name=SceneBrightnessSetID,proto3" json:"SceneBrightnessSetID,omitempty"`
	SceneWeatherEffect                string                               `protobuf:"bytes,135,opt,name=SceneWeatherEffect,proto3" json:"SceneWeatherEffect,omitempty"`
	VoteHeroParam                     uint32                               `protobuf:"varint,136,opt,name=VoteHeroParam,proto3" json:"VoteHeroParam,omitempty"`
	SpeciSettingMemoryThreshold       uint32                               `protobuf:"varint,137,opt,name=SpeciSettingMemoryThreshold,proto3" json:"SpeciSettingMemoryThreshold,omitempty"`
	ForbidGpuScoreThreshold           uint32                               `protobuf:"varint,138,opt,name=ForbidGpuScoreThreshold,proto3" json:"ForbidGpuScoreThreshold,omitempty"`
	ForbidMemoryThreshold             uint32                               `protobuf:"varint,139,opt,name=ForbidMemoryThreshold,proto3" json:"ForbidMemoryThreshold,omitempty"`
	WarningMemoryThreshold            uint32                               `protobuf:"varint,140,opt,name=WarningMemoryThreshold,proto3" json:"WarningMemoryThreshold,omitempty"`
	ForceLowQualityDeviceScore        uint32                               `protobuf:"varint,141,opt,name=ForceLowQualityDeviceScore,proto3" json:"ForceLowQualityDeviceScore,omitempty"`
	ForceLowFPSDeviceScore            uint32                               `protobuf:"varint,142,opt,name=ForceLowFPSDeviceScore,proto3" json:"ForceLowFPSDeviceScore,omitempty"`
	SettingStrategyIndex              uint32                               `protobuf:"varint,143,opt,name=SettingStrategyIndex,proto3" json:"SettingStrategyIndex,omitempty"`
	StreamScene                       uint32                               `protobuf:"varint,144,opt,name=streamScene,proto3" json:"streamScene,omitempty"`
	BlankModel                        uint32                               `protobuf:"varint,145,opt,name=blankModel,proto3" json:"blankModel,omitempty"`
	ViewPortWidth                     int32                                `protobuf:"varint,146,opt,name=ViewPortWidth,proto3" json:"ViewPortWidth,omitempty"`
	ViewPortHeight                    int32                                `protobuf:"varint,147,opt,name=ViewPortHeight,proto3" json:"ViewPortHeight,omitempty"`
	KillEftUseType                    uint32                               `protobuf:"varint,148,opt,name=KillEftUseType,proto3" json:"KillEftUseType,omitempty"`
	KillEftUseListID                  uint32                               `protobuf:"varint,149,opt,name=KillEftUseListID,proto3" json:"KillEftUseListID,omitempty"`
	CityEftUseType                    uint32                               `protobuf:"varint,150,opt,name=CityEftUseType,proto3" json:"CityEftUseType,omitempty"`
	CityEftUseListID                  uint32                               `protobuf:"varint,151,opt,name=CityEftUseListID,proto3" json:"CityEftUseListID,omitempty"`
	DeadEftUseType                    uint32                               `protobuf:"varint,152,opt,name=DeadEftUseType,proto3" json:"DeadEftUseType,omitempty"`
	DeadEftUseListID                  uint32                               `protobuf:"varint,153,opt,name=DeadEftUseListID,proto3" json:"DeadEftUseListID,omitempty"`
	BornEftUseType                    uint32                               `protobuf:"varint,154,opt,name=BornEftUseType,proto3" json:"BornEftUseType,omitempty"`
	BornEftUseListID                  uint32                               `protobuf:"varint,155,opt,name=BornEftUseListID,proto3" json:"BornEftUseListID,omitempty"`
	MatchEngineType                   uint32                               `protobuf:"varint,156,opt,name=MatchEngineType,proto3" json:"MatchEngineType,omitempty"`
	LerpMode                          uint32                               `protobuf:"varint,157,opt,name=LerpMode,proto3" json:"LerpMode,omitempty"`
	SceneType                         uint32                               `protobuf:"varint,158,opt,name=SceneType,proto3" json:"SceneType,omitempty"`
	EnableTrialCommunity              uint32                               `protobuf:"varint,159,opt,name=EnableTrialCommunity,proto3" json:"EnableTrialCommunity,omitempty"`
	ReportReason                      uint32                               `protobuf:"varint,160,opt,name=ReportReason,proto3" json:"ReportReason,omitempty"`
	DisableVideoReport                uint32                               `protobuf:"varint,161,opt,name=DisableVideoReport,proto3" json:"DisableVideoReport,omitempty"`
	ReportUrlID                       uint32                               `protobuf:"varint,162,opt,name=ReportUrlID,proto3" json:"ReportUrlID,omitempty"`
	NotCalcNewMVP                     uint32                               `protobuf:"varint,163,opt,name=NotCalcNewMVP,proto3" json:"NotCalcNewMVP,omitempty"`
	ValuePropertyIndex                uint32                               `protobuf:"varint,164,opt,name=valuePropertyIndex,proto3" json:"valuePropertyIndex,omitempty"`
	JungleEquipLevelNotShareIncome    uint32                               `protobuf:"varint,165,opt,name=JungleEquipLevelNotShareIncome,proto3" json:"JungleEquipLevelNotShareIncome,omitempty"`
	AidEquipLevelNotShareIncome       uint32                               `protobuf:"varint,166,opt,name=AidEquipLevelNotShareIncome,proto3" json:"AidEquipLevelNotShareIncome,omitempty"`
	AidNotShareIncomeLastTime         uint32                               `protobuf:"varint,167,opt,name=AidNotShareIncomeLastTime,proto3" json:"AidNotShareIncomeLastTime,omitempty"`
	ExtraIfsId                        uint32                               `protobuf:"varint,168,opt,name=ExtraIfsId,proto3" json:"ExtraIfsId,omitempty"`
	ExtraIfsDlShowPic                 string                               `protobuf:"bytes,169,opt,name=ExtraIfsDlShowPic,proto3" json:"ExtraIfsDlShowPic,omitempty"`
	IsEnableBusinessEffect            uint32                               `protobuf:"varint,170,opt,name=IsEnableBusinessEffect,proto3" json:"IsEnableBusinessEffect,omitempty"`
	DyingMoveSpeed                    int32                                `protobuf:"varint,171,opt,name=DyingMoveSpeed,proto3" json:"DyingMoveSpeed,omitempty"`
	DropItemInBattleType              uint32                               `protobuf:"varint,172,opt,name=DropItemInBattleType,proto3" json:"DropItemInBattleType,omitempty"`
	DropItemInBattleRuleID            []uint32                             `protobuf:"varint,173,rep,packed,name=DropItemInBattleRuleID,proto3" json:"DropItemInBattleRuleID,omitempty"`
	DisableSelectSkill                uint32                               `protobuf:"varint,174,opt,name=DisableSelectSkill,proto3" json:"DisableSelectSkill,omitempty"`
	DisableSelectSymbol               uint32                               `protobuf:"varint,175,opt,name=DisableSelectSymbol,proto3" json:"DisableSelectSymbol,omitempty"`
	DisableSelectEquipList            uint32                               `protobuf:"varint,176,opt,name=DisableSelectEquipList,proto3" json:"DisableSelectEquipList,omitempty"`
	HangUp2AssistInterval             uint32                               `protobuf:"varint,177,opt,name=HangUp2AssistInterval,proto3" json:"HangUp2AssistInterval,omitempty"`
	UsableHeroCreateMethod            uint32                               `protobuf:"varint,178,opt,name=UsableHeroCreateMethod,proto3" json:"UsableHeroCreateMethod,omitempty"`
	UsableHeroCreateRuleID            uint32                               `protobuf:"varint,179,opt,name=UsableHeroCreateRuleID,proto3" json:"UsableHeroCreateRuleID,omitempty"`
	RankScoreRuleId                   uint32                               `protobuf:"varint,180,opt,name=RankScoreRuleId,proto3" json:"RankScoreRuleId,omitempty"`
	CsModeValid                       uint32                               `protobuf:"varint,181,opt,name=CsModeValid,proto3" json:"CsModeValid,omitempty"`
	LevelActivityId                   uint32                               `protobuf:"varint,182,opt,name=LevelActivityId,proto3" json:"LevelActivityId,omitempty"`
	IsSameTeamDiffCamp                uint32                               `protobuf:"varint,183,opt,name=IsSameTeamDiffCamp,proto3" json:"IsSameTeamDiffCamp,omitempty"`
	MaxTeamAcntNum                    uint32                               `protobuf:"varint,184,opt,name=MaxTeamAcntNum,proto3" json:"MaxTeamAcntNum,omitempty"`
	TeamRangeRule                     *ResDT_TeamRangeRule                 `protobuf:"bytes,185,opt,name=TeamRangeRule,proto3" json:"TeamRangeRule,omitempty"`
	IsSkipWhiteList                   uint32                               `protobuf:"varint,186,opt,name=IsSkipWhiteList,proto3" json:"IsSkipWhiteList,omitempty"`
	SettleRule                        ResDT_LevelCommonInfo_SettleRuleType `protobuf:"varint,187,opt,name=SettleRule,proto3,enum=ResData.ResDT_LevelCommonInfo_SettleRuleType" json:"SettleRule,omitempty"`
	PreBPHeroID                       uint32                               `protobuf:"varint,188,opt,name=PreBPHeroID,proto3" json:"PreBPHeroID,omitempty"`
	PreBanHeroNum                     uint32                               `protobuf:"varint,189,opt,name=PreBanHeroNum,proto3" json:"PreBanHeroNum,omitempty"`
	ShareLogoIcon                     string                               `protobuf:"bytes,190,opt,name=ShareLogoIcon,proto3" json:"ShareLogoIcon,omitempty"`
	CampPlayerConfID                  uint32                               `protobuf:"varint,191,opt,name=CampPlayerConfID,proto3" json:"CampPlayerConfID,omitempty"`
	FullLvlSymbolPageOpen             uint32                               `protobuf:"varint,192,opt,name=FullLvlSymbolPageOpen,proto3" json:"FullLvlSymbolPageOpen,omitempty"`
	IgnoreHangupCheck                 uint32                               `protobuf:"varint,193,opt,name=IgnoreHangupCheck,proto3" json:"IgnoreHangupCheck,omitempty"`
	AllowNormalRoom                   uint32                               `protobuf:"varint,194,opt,name=AllowNormalRoom,proto3" json:"AllowNormalRoom,omitempty"`
	CombineGameID                     uint32                               `protobuf:"varint,195,opt,name=CombineGameID,proto3" json:"CombineGameID,omitempty"`
}

func (x *ResDT_LevelCommonInfo) Reset() {
	*x = ResDT_LevelCommonInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_LevelCommonInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_LevelCommonInfo) ProtoMessage() {}

func (x *ResDT_LevelCommonInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_LevelCommonInfo.ProtoReflect.Descriptor instead.
func (*ResDT_LevelCommonInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{136}
}

func (x *ResDT_LevelCommonInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResDT_LevelCommonInfo) GetDesignFileName() string {
	if x != nil {
		return x.DesignFileName
	}
	return ""
}

func (x *ResDT_LevelCommonInfo) GetArtistFileName() string {
	if x != nil {
		return x.ArtistFileName
	}
	return ""
}

func (x *ResDT_LevelCommonInfo) GetArtistExtFileName() string {
	if x != nil {
		return x.ArtistExtFileName
	}
	return ""
}

func (x *ResDT_LevelCommonInfo) GetForbiddenKickoutBeforeGameLoading() uint32 {
	if x != nil {
		return x.ForbiddenKickoutBeforeGameLoading
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetConfirmType() uint32 {
	if x != nil {
		return x.ConfirmType
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetNightStartTime() uint32 {
	if x != nil {
		return x.NightStartTime
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetNightEndTime() uint32 {
	if x != nil {
		return x.NightEndTime
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetNightDays() uint32 {
	if x != nil {
		return x.NightDays
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetMaxAcntNum() uint32 {
	if x != nil {
		return x.MaxAcntNum
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetMaxCamp() uint32 {
	if x != nil {
		return x.MaxCamp
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetLeastAcntNum() uint32 {
	if x != nil {
		return x.LeastAcntNum
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetMaxAcntTimeOut() uint32 {
	if x != nil {
		return x.MaxAcntTimeOut
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetValidRoomType() uint32 {
	if x != nil {
		return x.ValidRoomType
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetIsAllowAddComAI() uint32 {
	if x != nil {
		return x.IsAllowAddComAI
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetHeroNum() uint32 {
	if x != nil {
		return x.HeroNum
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetIsAllowHeroDup() uint32 {
	if x != nil {
		return x.IsAllowHeroDup
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetHeroFormId() uint32 {
	if x != nil {
		return x.HeroFormId
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetHeroAIType() int32 {
	if x != nil {
		return x.HeroAIType
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetComputerHeroAI() string {
	if x != nil {
		return x.ComputerHeroAI
	}
	return ""
}

func (x *ResDT_LevelCommonInfo) GetHeroBornAgeDelayTime() int32 {
	if x != nil {
		return x.HeroBornAgeDelayTime
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetThumbnailPath() string {
	if x != nil {
		return x.ThumbnailPath
	}
	return ""
}

func (x *ResDT_LevelCommonInfo) GetMapPath() string {
	if x != nil {
		return x.MapPath
	}
	return ""
}

func (x *ResDT_LevelCommonInfo) GetBigMapPath() string {
	if x != nil {
		return x.BigMapPath
	}
	return ""
}

func (x *ResDT_LevelCommonInfo) GetMapWidth() int32 {
	if x != nil {
		return x.MapWidth
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetMapHeight() int32 {
	if x != nil {
		return x.MapHeight
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetSmallMapWidth() int32 {
	if x != nil {
		return x.SmallMapWidth
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetSmallMapHeight() int32 {
	if x != nil {
		return x.SmallMapHeight
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetBigMapWidth() int32 {
	if x != nil {
		return x.BigMapWidth
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetBigMapHeight() int32 {
	if x != nil {
		return x.BigMapHeight
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetMapBlockWidth() int32 {
	if x != nil {
		return x.MapBlockWidth
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetMapBlockHeight() int32 {
	if x != nil {
		return x.MapBlockHeight
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetUseNavHeightLimit() int32 {
	if x != nil {
		return x.UseNavHeightLimit
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetMapFowScale() float32 {
	if x != nil {
		return x.MapFowScale
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetBigMapFowScale() float32 {
	if x != nil {
		return x.BigMapFowScale
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetSoulAllocID() uint32 {
	if x != nil {
		return x.SoulAllocID
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetIsOpenExpCompensate() uint32 {
	if x != nil {
		return x.IsOpenExpCompensate
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetExpCompensateDetail() []*ResDT_CompensateInfo {
	if x != nil {
		return x.ExpCompensateDetail
	}
	return nil
}

func (x *ResDT_LevelCommonInfo) GetIsOpenCoinCompensate() uint32 {
	if x != nil {
		return x.IsOpenCoinCompensate
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetCoinCompensateDetail() []*ResDT_CompensateInfo {
	if x != nil {
		return x.CoinCompensateDetail
	}
	return nil
}

func (x *ResDT_LevelCommonInfo) GetExtraSkillId() int32 {
	if x != nil {
		return x.ExtraSkillId
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetExtraSkill2Id() int32 {
	if x != nil {
		return x.ExtraSkill2Id
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetExtraSkill3Id() int32 {
	if x != nil {
		return x.ExtraSkill3Id
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetExtraSkill4Id() int32 {
	if x != nil {
		return x.ExtraSkill4Id
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetExtraPassiveSkillId1() int32 {
	if x != nil {
		return x.ExtraPassiveSkillId1
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetExtraPassiveSkillId2() int32 {
	if x != nil {
		return x.ExtraPassiveSkillId2
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetExtraSkillLogicSlot() uint32 {
	if x != nil {
		return x.ExtraSkillLogicSlot
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetExtraSkill2LogicSlot() uint32 {
	if x != nil {
		return x.ExtraSkill2LogicSlot
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetExtraSkill3LogicSlot() uint32 {
	if x != nil {
		return x.ExtraSkill3LogicSlot
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetExtraSkill4LogicSlot() uint32 {
	if x != nil {
		return x.ExtraSkill4LogicSlot
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetFinResultType() uint32 {
	if x != nil {
		return x.FinResultType
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetRandPickHero() uint32 {
	if x != nil {
		return x.RandPickHero
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetPreloadActorList() string {
	if x != nil {
		return x.PreloadActorList
	}
	return ""
}

func (x *ResDT_LevelCommonInfo) GetAddWinCondStarId() uint32 {
	if x != nil {
		return x.AddWinCondStarId
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetAddLoseCondStarId() uint32 {
	if x != nil {
		return x.AddLoseCondStarId
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetTimeDuration() uint32 {
	if x != nil {
		return x.TimeDuration
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetSoulConfigId() uint32 {
	if x != nil {
		return x.SoulConfigId
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetCameraFlip() uint32 {
	if x != nil {
		return x.CameraFlip
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetCameraRotate() uint32 {
	if x != nil {
		return x.CameraRotate
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetSoldierActivateCountDelay1() int32 {
	if x != nil {
		return x.SoldierActivateCountDelay1
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetSoldierActivateCountDelay2() int32 {
	if x != nil {
		return x.SoldierActivateCountDelay2
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetSoldierActivateDelay() int32 {
	if x != nil {
		return x.SoldierActivateDelay
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetBattleEquipLimit() uint32 {
	if x != nil {
		return x.BattleEquipLimit
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetBirthLevelConfig() uint32 {
	if x != nil {
		return x.BirthLevelConfig
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetChaosPickRule() uint32 {
	if x != nil {
		return x.ChaosPickRule
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetHeadPtsUpperLimit() uint32 {
	if x != nil {
		return x.HeadPtsUpperLimit
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetSrvLeastDestoryTowerNum() uint32 {
	if x != nil {
		return x.SrvLeastDestoryTowerNum
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetSrvLeastDestoryBaseNum() uint32 {
	if x != nil {
		return x.SrvLeastDestoryBaseNum
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetSrvLeastKillCntNum() uint32 {
	if x != nil {
		return x.SrvLeastKillCntNum
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetDealHangUp() uint32 {
	if x != nil {
		return x.DealHangUp
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetUnLockCondID() uint32 {
	if x != nil {
		return x.UnLockCondID
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetShowHonor() uint32 {
	if x != nil {
		return x.ShowHonor
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetPickRuleInfo() *ResDT_PickRuleInfo {
	if x != nil {
		return x.PickRuleInfo
	}
	return nil
}

func (x *ResDT_LevelCommonInfo) GetPickTime() uint32 {
	if x != nil {
		return x.PickTime
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetCooldownReduceUpperLimit() uint32 {
	if x != nil {
		return x.CooldownReduceUpperLimit
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetPvpDifficulty() int32 {
	if x != nil {
		return x.PvpDifficulty
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetChatID() uint32 {
	if x != nil {
		return x.ChatID
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetUnUseSkillInfo() *ResDT_UnUseSkill {
	if x != nil {
		return x.UnUseSkillInfo
	}
	return nil
}

func (x *ResDT_LevelCommonInfo) GetAttackOrderID() uint32 {
	if x != nil {
		return x.AttackOrderID
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetDynamicPropertyCfg() uint32 {
	if x != nil {
		return x.DynamicPropertyCfg
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetOriginalGoldCoinInBattle() uint32 {
	if x != nil {
		return x.OriginalGoldCoinInBattle
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetCompensateExpBuffID() uint32 {
	if x != nil {
		return x.CompensateExpBuffID
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetCompensateGoldBuffID() uint32 {
	if x != nil {
		return x.CompensateGoldBuffID
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetBattleTaskOfCamp1() uint32 {
	if x != nil {
		return x.BattleTaskOfCamp1
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetBattleTaskOfCamp2() uint32 {
	if x != nil {
		return x.BattleTaskOfCamp2
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetMusicStartEvent() string {
	if x != nil {
		return x.MusicStartEvent
	}
	return ""
}

func (x *ResDT_LevelCommonInfo) GetMusicEndEvent() string {
	if x != nil {
		return x.MusicEndEvent
	}
	return ""
}

func (x *ResDT_LevelCommonInfo) GetAmbientSoundEvent() string {
	if x != nil {
		return x.AmbientSoundEvent
	}
	return ""
}

func (x *ResDT_LevelCommonInfo) GetBankResourceName() string {
	if x != nil {
		return x.BankResourceName
	}
	return ""
}

func (x *ResDT_LevelCommonInfo) GetSupportCameraDrag() uint32 {
	if x != nil {
		return x.SupportCameraDrag
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetGameMatchName() string {
	if x != nil {
		return x.GameMatchName
	}
	return ""
}

func (x *ResDT_LevelCommonInfo) GetHorizonMethod() uint32 {
	if x != nil {
		return x.HorizonMethod
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetIsEnableShopHorizonTab() uint32 {
	if x != nil {
		return x.IsEnableShopHorizonTab
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetIsEnableOrnamentSlot() uint32 {
	if x != nil {
		return x.IsEnableOrnamentSlot
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetIsEnableGemstoneSlot() uint32 {
	if x != nil {
		return x.IsEnableGemstoneSlot
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetEnableExtCommonSlot() uint32 {
	if x != nil {
		return x.EnableExtCommonSlot
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetIsDisablePackage() uint32 {
	if x != nil {
		return x.IsDisablePackage
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetOrnamentSkillId() int32 {
	if x != nil {
		return x.OrnamentSkillId
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetOrnamentSwitchCD() int32 {
	if x != nil {
		return x.OrnamentSwitchCD
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetOrnamentFirstSwitchCD() int32 {
	if x != nil {
		return x.OrnamentFirstSwitchCD
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetOrnamentFirstSwitchCDEftTime() int32 {
	if x != nil {
		return x.OrnamentFirstSwitchCDEftTime
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetCompeteSvrJudgeNum() uint32 {
	if x != nil {
		return x.CompeteSvrJudgeNum
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetJudgeNum() uint32 {
	if x != nil {
		return x.JudgeNum
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetPauseNum() uint32 {
	if x != nil {
		return x.PauseNum
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetCompetePauseNum() uint32 {
	if x != nil {
		return x.CompetePauseNum
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetWealGameSubType() uint32 {
	if x != nil {
		return x.WealGameSubType
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetSupportHighTowerSoldier() uint32 {
	if x != nil {
		return x.SupportHighTowerSoldier
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetShowTeamHint() uint32 {
	if x != nil {
		return x.ShowTeamHint
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetShowWinRatio() uint32 {
	if x != nil {
		return x.ShowWinRatio
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetForceTimeoutPick() uint32 {
	if x != nil {
		return x.ForceTimeoutPick
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetEnableEquipExtraActiveSkill() uint32 {
	if x != nil {
		return x.EnableEquipExtraActiveSkill
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetFakeSightRange() int32 {
	if x != nil {
		return x.FakeSightRange
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetHeroLiftTime() int32 {
	if x != nil {
		return x.HeroLiftTime
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetHeroLiftTimeMaxLimit() int32 {
	if x != nil {
		return x.HeroLiftTimeMaxLimit
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetItemSellDiscount() int32 {
	if x != nil {
		return x.ItemSellDiscount
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetTowerWarmerAlways() uint32 {
	if x != nil {
		return x.TowerWarmerAlways
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetForbidEquip() string {
	if x != nil {
		return x.ForbidEquip
	}
	return ""
}

func (x *ResDT_LevelCommonInfo) GetBelongEquip() string {
	if x != nil {
		return x.BelongEquip
	}
	return ""
}

func (x *ResDT_LevelCommonInfo) GetForbidShopEquip() string {
	if x != nil {
		return x.ForbidShopEquip
	}
	return ""
}

func (x *ResDT_LevelCommonInfo) GetForbidReplaceShopEquip() string {
	if x != nil {
		return x.ForbidReplaceShopEquip
	}
	return ""
}

func (x *ResDT_LevelCommonInfo) GetPriceRaiseEquip() string {
	if x != nil {
		return x.PriceRaiseEquip
	}
	return ""
}

func (x *ResDT_LevelCommonInfo) GetPriceRaiseRatio() string {
	if x != nil {
		return x.PriceRaiseRatio
	}
	return ""
}

func (x *ResDT_LevelCommonInfo) GetAllHeroValid() uint32 {
	if x != nil {
		return x.AllHeroValid
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetUseShenfuEquipSys() uint32 {
	if x != nil {
		return x.UseShenfuEquipSys
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetUseColorfulHud() uint32 {
	if x != nil {
		return x.UseColorfulHud
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetHeroJobBuffGroupID() uint32 {
	if x != nil {
		return x.HeroJobBuffGroupID
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetHeroBuffGroupID() uint32 {
	if x != nil {
		return x.HeroBuffGroupID
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetIntimacyBuffGroupID() uint32 {
	if x != nil {
		return x.IntimacyBuffGroupID
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetFinDramaID() uint32 {
	if x != nil {
		return x.FinDramaID
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetLevelSwitchID() uint32 {
	if x != nil {
		return x.LevelSwitchID
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetCompeteSvrSurrenderTime() uint32 {
	if x != nil {
		return x.CompeteSvrSurrenderTime
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetSurrenderTime() uint32 {
	if x != nil {
		return x.SurrenderTime
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetOriginalPriceSellTime() uint32 {
	if x != nil {
		return x.OriginalPriceSellTime
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetSceneBrightnessSetID() uint32 {
	if x != nil {
		return x.SceneBrightnessSetID
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetSceneWeatherEffect() string {
	if x != nil {
		return x.SceneWeatherEffect
	}
	return ""
}

func (x *ResDT_LevelCommonInfo) GetVoteHeroParam() uint32 {
	if x != nil {
		return x.VoteHeroParam
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetSpeciSettingMemoryThreshold() uint32 {
	if x != nil {
		return x.SpeciSettingMemoryThreshold
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetForbidGpuScoreThreshold() uint32 {
	if x != nil {
		return x.ForbidGpuScoreThreshold
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetForbidMemoryThreshold() uint32 {
	if x != nil {
		return x.ForbidMemoryThreshold
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetWarningMemoryThreshold() uint32 {
	if x != nil {
		return x.WarningMemoryThreshold
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetForceLowQualityDeviceScore() uint32 {
	if x != nil {
		return x.ForceLowQualityDeviceScore
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetForceLowFPSDeviceScore() uint32 {
	if x != nil {
		return x.ForceLowFPSDeviceScore
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetSettingStrategyIndex() uint32 {
	if x != nil {
		return x.SettingStrategyIndex
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetStreamScene() uint32 {
	if x != nil {
		return x.StreamScene
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetBlankModel() uint32 {
	if x != nil {
		return x.BlankModel
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetViewPortWidth() int32 {
	if x != nil {
		return x.ViewPortWidth
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetViewPortHeight() int32 {
	if x != nil {
		return x.ViewPortHeight
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetKillEftUseType() uint32 {
	if x != nil {
		return x.KillEftUseType
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetKillEftUseListID() uint32 {
	if x != nil {
		return x.KillEftUseListID
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetCityEftUseType() uint32 {
	if x != nil {
		return x.CityEftUseType
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetCityEftUseListID() uint32 {
	if x != nil {
		return x.CityEftUseListID
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetDeadEftUseType() uint32 {
	if x != nil {
		return x.DeadEftUseType
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetDeadEftUseListID() uint32 {
	if x != nil {
		return x.DeadEftUseListID
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetBornEftUseType() uint32 {
	if x != nil {
		return x.BornEftUseType
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetBornEftUseListID() uint32 {
	if x != nil {
		return x.BornEftUseListID
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetMatchEngineType() uint32 {
	if x != nil {
		return x.MatchEngineType
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetLerpMode() uint32 {
	if x != nil {
		return x.LerpMode
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetSceneType() uint32 {
	if x != nil {
		return x.SceneType
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetEnableTrialCommunity() uint32 {
	if x != nil {
		return x.EnableTrialCommunity
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetReportReason() uint32 {
	if x != nil {
		return x.ReportReason
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetDisableVideoReport() uint32 {
	if x != nil {
		return x.DisableVideoReport
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetReportUrlID() uint32 {
	if x != nil {
		return x.ReportUrlID
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetNotCalcNewMVP() uint32 {
	if x != nil {
		return x.NotCalcNewMVP
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetValuePropertyIndex() uint32 {
	if x != nil {
		return x.ValuePropertyIndex
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetJungleEquipLevelNotShareIncome() uint32 {
	if x != nil {
		return x.JungleEquipLevelNotShareIncome
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetAidEquipLevelNotShareIncome() uint32 {
	if x != nil {
		return x.AidEquipLevelNotShareIncome
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetAidNotShareIncomeLastTime() uint32 {
	if x != nil {
		return x.AidNotShareIncomeLastTime
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetExtraIfsId() uint32 {
	if x != nil {
		return x.ExtraIfsId
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetExtraIfsDlShowPic() string {
	if x != nil {
		return x.ExtraIfsDlShowPic
	}
	return ""
}

func (x *ResDT_LevelCommonInfo) GetIsEnableBusinessEffect() uint32 {
	if x != nil {
		return x.IsEnableBusinessEffect
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetDyingMoveSpeed() int32 {
	if x != nil {
		return x.DyingMoveSpeed
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetDropItemInBattleType() uint32 {
	if x != nil {
		return x.DropItemInBattleType
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetDropItemInBattleRuleID() []uint32 {
	if x != nil {
		return x.DropItemInBattleRuleID
	}
	return nil
}

func (x *ResDT_LevelCommonInfo) GetDisableSelectSkill() uint32 {
	if x != nil {
		return x.DisableSelectSkill
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetDisableSelectSymbol() uint32 {
	if x != nil {
		return x.DisableSelectSymbol
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetDisableSelectEquipList() uint32 {
	if x != nil {
		return x.DisableSelectEquipList
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetHangUp2AssistInterval() uint32 {
	if x != nil {
		return x.HangUp2AssistInterval
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetUsableHeroCreateMethod() uint32 {
	if x != nil {
		return x.UsableHeroCreateMethod
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetUsableHeroCreateRuleID() uint32 {
	if x != nil {
		return x.UsableHeroCreateRuleID
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetRankScoreRuleId() uint32 {
	if x != nil {
		return x.RankScoreRuleId
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetCsModeValid() uint32 {
	if x != nil {
		return x.CsModeValid
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetLevelActivityId() uint32 {
	if x != nil {
		return x.LevelActivityId
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetIsSameTeamDiffCamp() uint32 {
	if x != nil {
		return x.IsSameTeamDiffCamp
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetMaxTeamAcntNum() uint32 {
	if x != nil {
		return x.MaxTeamAcntNum
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetTeamRangeRule() *ResDT_TeamRangeRule {
	if x != nil {
		return x.TeamRangeRule
	}
	return nil
}

func (x *ResDT_LevelCommonInfo) GetIsSkipWhiteList() uint32 {
	if x != nil {
		return x.IsSkipWhiteList
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetSettleRule() ResDT_LevelCommonInfo_SettleRuleType {
	if x != nil {
		return x.SettleRule
	}
	return ResDT_LevelCommonInfo_SettleRuleType_GAMERESULT
}

func (x *ResDT_LevelCommonInfo) GetPreBPHeroID() uint32 {
	if x != nil {
		return x.PreBPHeroID
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetPreBanHeroNum() uint32 {
	if x != nil {
		return x.PreBanHeroNum
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetShareLogoIcon() string {
	if x != nil {
		return x.ShareLogoIcon
	}
	return ""
}

func (x *ResDT_LevelCommonInfo) GetCampPlayerConfID() uint32 {
	if x != nil {
		return x.CampPlayerConfID
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetFullLvlSymbolPageOpen() uint32 {
	if x != nil {
		return x.FullLvlSymbolPageOpen
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetIgnoreHangupCheck() uint32 {
	if x != nil {
		return x.IgnoreHangupCheck
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetAllowNormalRoom() uint32 {
	if x != nil {
		return x.AllowNormalRoom
	}
	return 0
}

func (x *ResDT_LevelCommonInfo) GetCombineGameID() uint32 {
	if x != nil {
		return x.CombineGameID
	}
	return 0
}

type ResEntertainmentLevelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId                          uint32                 `protobuf:"varint,1,opt,name=MapId,proto3" json:"MapId,omitempty"`
	LevelCommonInfo                *ResDT_LevelCommonInfo `protobuf:"bytes,2,opt,name=LevelCommonInfo,proto3" json:"LevelCommonInfo,omitempty"`
	IsCanPVP                       uint32                 `protobuf:"varint,3,opt,name=IsCanPVP,proto3" json:"IsCanPVP,omitempty"`
	IsCanPVE                       uint32                 `protobuf:"varint,4,opt,name=IsCanPVE,proto3" json:"IsCanPVE,omitempty"`
	EntertainmentSubType           uint32                 `protobuf:"varint,5,opt,name=EntertainmentSubType,proto3" json:"EntertainmentSubType,omitempty"`
	UseNickName                    uint32                 `protobuf:"varint,6,opt,name=UseNickName,proto3" json:"UseNickName,omitempty"`
	NewBattleRoyaleAINum           uint32                 `protobuf:"varint,7,opt,name=NewBattleRoyaleAINum,proto3" json:"NewBattleRoyaleAINum,omitempty"`
	WarmBattleRoyaleAINum          uint32                 `protobuf:"varint,8,opt,name=WarmBattleRoyaleAINum,proto3" json:"WarmBattleRoyaleAINum,omitempty"`
	FailWarmBattleRoyaleAINum      uint32                 `protobuf:"varint,9,opt,name=FailWarmBattleRoyaleAINum,proto3" json:"FailWarmBattleRoyaleAINum,omitempty"`
	LowNormalBattleRoyaleAINum     uint32                 `protobuf:"varint,10,opt,name=LowNormalBattleRoyaleAINum,proto3" json:"LowNormalBattleRoyaleAINum,omitempty"`
	MiddleNormalBattleRoyaleAINum  uint32                 `protobuf:"varint,11,opt,name=MiddleNormalBattleRoyaleAINum,proto3" json:"MiddleNormalBattleRoyaleAINum,omitempty"`
	HighNormalBattleRoyaleAINum    uint32                 `protobuf:"varint,12,opt,name=HighNormalBattleRoyaleAINum,proto3" json:"HighNormalBattleRoyaleAINum,omitempty"`
	MultiCampRewardIndex           uint32                 `protobuf:"varint,13,opt,name=MultiCampRewardIndex,proto3" json:"MultiCampRewardIndex,omitempty"`
	MultiCampKillRewardLimit       uint32                 `protobuf:"varint,14,opt,name=MultiCampKillRewardLimit,proto3" json:"MultiCampKillRewardLimit,omitempty"`
	MultiCampKillRewardCoin        uint32                 `protobuf:"varint,15,opt,name=MultiCampKillRewardCoin,proto3" json:"MultiCampKillRewardCoin,omitempty"`
	MultiCampKillRewardExp         uint32                 `protobuf:"varint,16,opt,name=MultiCampKillRewardExp,proto3" json:"MultiCampKillRewardExp,omitempty"`
	MultiCampKillRewardProficiency uint32                 `protobuf:"varint,17,opt,name=MultiCampKillRewardProficiency,proto3" json:"MultiCampKillRewardProficiency,omitempty"`
	MultiCampKillRewardParam       uint32                 `protobuf:"varint,18,opt,name=MultiCampKillRewardParam,proto3" json:"MultiCampKillRewardParam,omitempty"`
	EnableMatchScore               uint32                 `protobuf:"varint,19,opt,name=EnableMatchScore,proto3" json:"EnableMatchScore,omitempty"`
	WarmBattleExtraParam           uint32                 `protobuf:"varint,20,opt,name=WarmBattleExtraParam,proto3" json:"WarmBattleExtraParam,omitempty"`
	IsUseOneRoomMatch              uint32                 `protobuf:"varint,21,opt,name=IsUseOneRoomMatch,proto3" json:"IsUseOneRoomMatch,omitempty"`
	CustomType                     uint32                 `protobuf:"varint,22,opt,name=CustomType,proto3" json:"CustomType,omitempty"`
}

func (x *ResEntertainmentLevelInfo) Reset() {
	*x = ResEntertainmentLevelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResEntertainmentLevelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResEntertainmentLevelInfo) ProtoMessage() {}

func (x *ResEntertainmentLevelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResEntertainmentLevelInfo.ProtoReflect.Descriptor instead.
func (*ResEntertainmentLevelInfo) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{137}
}

func (x *ResEntertainmentLevelInfo) GetMapId() uint32 {
	if x != nil {
		return x.MapId
	}
	return 0
}

func (x *ResEntertainmentLevelInfo) GetLevelCommonInfo() *ResDT_LevelCommonInfo {
	if x != nil {
		return x.LevelCommonInfo
	}
	return nil
}

func (x *ResEntertainmentLevelInfo) GetIsCanPVP() uint32 {
	if x != nil {
		return x.IsCanPVP
	}
	return 0
}

func (x *ResEntertainmentLevelInfo) GetIsCanPVE() uint32 {
	if x != nil {
		return x.IsCanPVE
	}
	return 0
}

func (x *ResEntertainmentLevelInfo) GetEntertainmentSubType() uint32 {
	if x != nil {
		return x.EntertainmentSubType
	}
	return 0
}

func (x *ResEntertainmentLevelInfo) GetUseNickName() uint32 {
	if x != nil {
		return x.UseNickName
	}
	return 0
}

func (x *ResEntertainmentLevelInfo) GetNewBattleRoyaleAINum() uint32 {
	if x != nil {
		return x.NewBattleRoyaleAINum
	}
	return 0
}

func (x *ResEntertainmentLevelInfo) GetWarmBattleRoyaleAINum() uint32 {
	if x != nil {
		return x.WarmBattleRoyaleAINum
	}
	return 0
}

func (x *ResEntertainmentLevelInfo) GetFailWarmBattleRoyaleAINum() uint32 {
	if x != nil {
		return x.FailWarmBattleRoyaleAINum
	}
	return 0
}

func (x *ResEntertainmentLevelInfo) GetLowNormalBattleRoyaleAINum() uint32 {
	if x != nil {
		return x.LowNormalBattleRoyaleAINum
	}
	return 0
}

func (x *ResEntertainmentLevelInfo) GetMiddleNormalBattleRoyaleAINum() uint32 {
	if x != nil {
		return x.MiddleNormalBattleRoyaleAINum
	}
	return 0
}

func (x *ResEntertainmentLevelInfo) GetHighNormalBattleRoyaleAINum() uint32 {
	if x != nil {
		return x.HighNormalBattleRoyaleAINum
	}
	return 0
}

func (x *ResEntertainmentLevelInfo) GetMultiCampRewardIndex() uint32 {
	if x != nil {
		return x.MultiCampRewardIndex
	}
	return 0
}

func (x *ResEntertainmentLevelInfo) GetMultiCampKillRewardLimit() uint32 {
	if x != nil {
		return x.MultiCampKillRewardLimit
	}
	return 0
}

func (x *ResEntertainmentLevelInfo) GetMultiCampKillRewardCoin() uint32 {
	if x != nil {
		return x.MultiCampKillRewardCoin
	}
	return 0
}

func (x *ResEntertainmentLevelInfo) GetMultiCampKillRewardExp() uint32 {
	if x != nil {
		return x.MultiCampKillRewardExp
	}
	return 0
}

func (x *ResEntertainmentLevelInfo) GetMultiCampKillRewardProficiency() uint32 {
	if x != nil {
		return x.MultiCampKillRewardProficiency
	}
	return 0
}

func (x *ResEntertainmentLevelInfo) GetMultiCampKillRewardParam() uint32 {
	if x != nil {
		return x.MultiCampKillRewardParam
	}
	return 0
}

func (x *ResEntertainmentLevelInfo) GetEnableMatchScore() uint32 {
	if x != nil {
		return x.EnableMatchScore
	}
	return 0
}

func (x *ResEntertainmentLevelInfo) GetWarmBattleExtraParam() uint32 {
	if x != nil {
		return x.WarmBattleExtraParam
	}
	return 0
}

func (x *ResEntertainmentLevelInfo) GetIsUseOneRoomMatch() uint32 {
	if x != nil {
		return x.IsUseOneRoomMatch
	}
	return 0
}

func (x *ResEntertainmentLevelInfo) GetCustomType() uint32 {
	if x != nil {
		return x.CustomType
	}
	return 0
}

type ResPlayConstParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  ResPlayConstParam_KeyType `protobuf:"varint,1,opt,name=Type,proto3,enum=ResData.ResPlayConstParam_KeyType" json:"Type,omitempty"`
	Value int32                     `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *ResPlayConstParam) Reset() {
	*x = ResPlayConstParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResPlayConstParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResPlayConstParam) ProtoMessage() {}

func (x *ResPlayConstParam) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResPlayConstParam.ProtoReflect.Descriptor instead.
func (*ResPlayConstParam) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{138}
}

func (x *ResPlayConstParam) GetType() ResPlayConstParam_KeyType {
	if x != nil {
		return x.Type
	}
	return ResPlayConstParam_KeyType_NULL
}

func (x *ResPlayConstParam) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type ResDT_DropMassiveCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group      string   `protobuf:"bytes,1,opt,name=Group,proto3" json:"Group,omitempty"`
	Weight     string   `protobuf:"bytes,2,opt,name=Weight,proto3" json:"Weight,omitempty"`
	Price      string   `protobuf:"bytes,3,opt,name=Price,proto3" json:"Price,omitempty"`
	Title      string   `protobuf:"bytes,4,opt,name=Title,proto3" json:"Title,omitempty"`
	ParamGroup []uint32 `protobuf:"varint,5,rep,packed,name=ParamGroup,proto3" json:"ParamGroup,omitempty"`
}

func (x *ResDT_DropMassiveCondition) Reset() {
	*x = ResDT_DropMassiveCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDT_DropMassiveCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDT_DropMassiveCondition) ProtoMessage() {}

func (x *ResDT_DropMassiveCondition) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDT_DropMassiveCondition.ProtoReflect.Descriptor instead.
func (*ResDT_DropMassiveCondition) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{139}
}

func (x *ResDT_DropMassiveCondition) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *ResDT_DropMassiveCondition) GetWeight() string {
	if x != nil {
		return x.Weight
	}
	return ""
}

func (x *ResDT_DropMassiveCondition) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *ResDT_DropMassiveCondition) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResDT_DropMassiveCondition) GetParamGroup() []uint32 {
	if x != nil {
		return x.ParamGroup
	}
	return nil
}

type ResMassiveTreasureDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                    uint32                        `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Type                  uint32                        `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`
	ChildType             uint32                        `protobuf:"varint,3,opt,name=ChildType,proto3" json:"ChildType,omitempty"`
	CanReceiveCount       uint32                        `protobuf:"varint,4,opt,name=CanReceiveCount,proto3" json:"CanReceiveCount,omitempty"`
	ShowAwardCount        uint32                        `protobuf:"varint,5,opt,name=ShowAwardCount,proto3" json:"ShowAwardCount,omitempty"`
	ConditionGroup        []*ResDT_DropMassiveCondition `protobuf:"bytes,6,rep,name=ConditionGroup,proto3" json:"ConditionGroup,omitempty"`
	IsCondition           bool                          `protobuf:"varint,7,opt,name=IsCondition,proto3" json:"IsCondition,omitempty"`
	ReceiveConditionGroup []uint32                      `protobuf:"varint,8,rep,packed,name=ReceiveConditionGroup,proto3" json:"ReceiveConditionGroup,omitempty"`
}

func (x *ResMassiveTreasureDataBin) Reset() {
	*x = ResMassiveTreasureDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_res_data_legacy_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResMassiveTreasureDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResMassiveTreasureDataBin) ProtoMessage() {}

func (x *ResMassiveTreasureDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_os_res_data_legacy_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResMassiveTreasureDataBin.ProtoReflect.Descriptor instead.
func (*ResMassiveTreasureDataBin) Descriptor() ([]byte, []int) {
	return file_os_res_data_legacy_proto_rawDescGZIP(), []int{140}
}

func (x *ResMassiveTreasureDataBin) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ResMassiveTreasureDataBin) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ResMassiveTreasureDataBin) GetChildType() uint32 {
	if x != nil {
		return x.ChildType
	}
	return 0
}

func (x *ResMassiveTreasureDataBin) GetCanReceiveCount() uint32 {
	if x != nil {
		return x.CanReceiveCount
	}
	return 0
}

func (x *ResMassiveTreasureDataBin) GetShowAwardCount() uint32 {
	if x != nil {
		return x.ShowAwardCount
	}
	return 0
}

func (x *ResMassiveTreasureDataBin) GetConditionGroup() []*ResDT_DropMassiveCondition {
	if x != nil {
		return x.ConditionGroup
	}
	return nil
}

func (x *ResMassiveTreasureDataBin) GetIsCondition() bool {
	if x != nil {
		return x.IsCondition
	}
	return false
}

func (x *ResMassiveTreasureDataBin) GetReceiveConditionGroup() []uint32 {
	if x != nil {
		return x.ReceiveConditionGroup
	}
	return nil
}

var File_os_res_data_legacy_proto protoreflect.FileDescriptor

var file_os_res_data_legacy_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6f, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x52, 0x65, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x1a, 0x15, 0x62, 0x69, 0x6e, 0x67, 0x6f, 0x67, 0x65, 0x6e, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x72, 0x65, 0x73, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x13, 0x63, 0x6c, 0x74, 0x67, 0x65, 0x6e, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x6f, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x65, 0x6e,
	0x75, 0x6d, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x5a, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x41, 0x72, 0x67, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x0f, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x8f, 0x82, 0xe6, 0x95,
	0xb0, 0xda, 0xb5, 0x18, 0x01, 0x33, 0x52, 0x03, 0x41, 0x72, 0x67, 0x22, 0x80, 0x01, 0x0a, 0x10,
	0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x26, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x08,
	0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x06, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44,
	0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x07, 0x49, 0x74, 0x65, 0x6d,
	0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe6,
	0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x07, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x22, 0xc1,
	0x02, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x47, 0x75, 0x69, 0x64, 0x65, 0x54, 0x69, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x20, 0x0a, 0x05, 0x43, 0x66, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0xba, 0x8f, 0xe5, 0x8f, 0xb7, 0x52, 0x05, 0x43,
	0x66, 0x67, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xa4, 0xb4,
	0xe5, 0x83, 0x8f, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x07, 0x54, 0x69, 0x70, 0x49, 0x63, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x8f, 0x90, 0xe7, 0xa4,
	0xba, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x07, 0x54,
	0x69, 0x70, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x08, 0x54, 0x69, 0x70, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x90,
	0x8d, 0xe5, 0xad, 0x97, 0x52, 0x08, 0x54, 0x69, 0x70, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2a,
	0x0a, 0x0a, 0x54, 0x69, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0x52, 0x0a,
	0x54, 0x69, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x54, 0x69,
	0x70, 0x50, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c,
	0xe6, 0x8f, 0x90, 0xe7, 0xa4, 0xba, 0xe4, 0xbd, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x06, 0x54, 0x69,
	0x70, 0x50, 0x6f, 0x73, 0x12, 0x2c, 0x0a, 0x08, 0x54, 0x69, 0x70, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xaf, 0xad, 0xe9,
	0x9f, 0xb3, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0x52, 0x08, 0x54, 0x69, 0x70, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x22, 0x35, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x49, 0x6e, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x04, 0xea, 0xb5,
	0x18, 0x00, 0x52, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x22, 0xa9, 0x03, 0x0a, 0x0e, 0x52, 0x65,
	0x73, 0x44, 0x54, 0x5f, 0x4a, 0x75, 0x6d, 0x70, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x36, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x57, 0x61, 0x79, 0x44, 0x65, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x96, 0xb9, 0xe5,
	0xbc, 0x8f, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x0a, 0x47, 0x65, 0x74, 0x57, 0x61, 0x79,
	0x44, 0x65, 0x73, 0x63, 0x12, 0x2e, 0x0a, 0x09, 0x4a, 0x75, 0x6d, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xb7, 0xb3,
	0xe8, 0xbd, 0xac, 0xe5, 0x85, 0xa5, 0xe5, 0x8f, 0xa3, 0x52, 0x09, 0x4a, 0x75, 0x6d, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x4a, 0x75, 0x6d, 0x70, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe8, 0xb7,
	0xb3, 0xe8, 0xbd, 0xac, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x31, 0x28, 0xe6, 0x95, 0xb0, 0xe5,
	0xad, 0x97, 0x29, 0x52, 0x0a, 0x4a, 0x75, 0x6d, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x12,
	0x39, 0x0a, 0x0a, 0x4a, 0x75, 0x6d, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe8, 0xb7, 0xb3, 0xe8, 0xbd, 0xac, 0xe5,
	0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x32, 0x28, 0xe6, 0x95, 0xb0, 0xe5, 0xad, 0x97, 0x29, 0x52, 0x0a,
	0x4a, 0x75, 0x6d, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x12, 0x35, 0x0a, 0x07, 0x4a, 0x75,
	0x6d, 0x70, 0x55, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xea, 0xb5, 0x18,
	0x17, 0xe8, 0xb7, 0xb3, 0xe8, 0xbd, 0xac, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x28, 0xe5, 0x8f,
	0xaf, 0xe9, 0x85, 0x8d, 0x75, 0x72, 0x6c, 0x29, 0x52, 0x07, 0x4a, 0x75, 0x6d, 0x70, 0x55, 0x72,
	0x6c, 0x12, 0x3f, 0x0a, 0x0d, 0x4a, 0x75, 0x6d, 0x70, 0x4f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe5, 0x8f,
	0xaf, 0xe8, 0xb7, 0xb3, 0xe8, 0xbd, 0xac, 0xe8, 0xb5, 0xb7, 0xe5, 0xa7, 0x8b, 0xe6, 0x97, 0xb6,
	0xe9, 0x97, 0xb4, 0x52, 0x0d, 0x4a, 0x75, 0x6d, 0x70, 0x4f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x72, 0x12, 0x41, 0x0a, 0x0e, 0x4a, 0x75, 0x6d, 0x70, 0x4f, 0x66, 0x66, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15,
	0xe5, 0x8f, 0xaf, 0xe8, 0xb7, 0xb3, 0xe8, 0xbd, 0xac, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0e, 0x4a, 0x75, 0x6d, 0x70, 0x4f, 0x66, 0x66, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x72, 0x22, 0x93, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f,
	0x50, 0x76, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2a, 0x0a, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0x52, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x08, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x06, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0x52, 0x08, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49,
	0x44, 0x12, 0x28, 0x0a, 0x09, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f,
	0x52, 0x09, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6e, 0x74, 0x22, 0xfb, 0x01, 0x0a, 0x0d,
	0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x4d, 0x61, 0x70, 0x42, 0x75, 0x66, 0x66, 0x12, 0x16, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xea, 0xb5, 0x18, 0x02, 0x49,
	0x44, 0x52, 0x02, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x04, 0x43, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0x94, 0x9f, 0xe6, 0x95, 0x88, 0xe9,
	0x98, 0xb5, 0xe8, 0x90, 0xa5, 0x52, 0x04, 0x43, 0x61, 0x6d, 0x70, 0x12, 0x2c, 0x0a, 0x08, 0x48,
	0x65, 0x72, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea,
	0xb5, 0x18, 0x0c, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe5, 0xae, 0x9a, 0xe4, 0xbd, 0x8d, 0x52,
	0x08, 0x48, 0x65, 0x72, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0e, 0x48, 0x65, 0x72,
	0x6f, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe4, 0xbc, 0xa4,
	0xe5, 0xae, 0xb3, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0e, 0x48, 0x65, 0x72, 0x6f, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0e, 0x48, 0x65, 0x72,
	0x6f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe6, 0x99, 0xae,
	0xe6, 0x94, 0xbb, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0e, 0x48, 0x65, 0x72, 0x6f, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0x68, 0x0a, 0x0e, 0x52, 0x65, 0x73,
	0x44, 0x54, 0x5f, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x08, 0x43,
	0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea,
	0xb5, 0x18, 0x0c, 0xe8, 0xb4, 0xa7, 0xe5, 0xb8, 0x81, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52,
	0x08, 0x43, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x43, 0x6f, 0x73,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5,
	0x18, 0x06, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0x52, 0x09, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x50, 0x76,
	0x65, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x48, 0x0a, 0x0a, 0x52,
	0x65, 0x76, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f,
	0x43, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0f, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0xb6,
	0x88, 0xe8, 0x80, 0x97, 0xda, 0xb5, 0x18, 0x01, 0x33, 0x52, 0x0a, 0x52, 0x65, 0x76, 0x69, 0x76,
	0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x42,
	0x75, 0x66, 0x66, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x0f, 0xea, 0xb5, 0x18, 0x06, 0x42,
	0x75, 0x66, 0x66, 0x49, 0x44, 0xda, 0xb5, 0x18, 0x01, 0x33, 0x52, 0x0a, 0x52, 0x65, 0x76, 0x69,
	0x76, 0x65, 0x42, 0x75, 0x66, 0x66, 0x22, 0xdd, 0x24, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x43, 0x66, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x05, 0x43, 0x66,
	0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe5,
	0x85, 0xb3, 0xe5, 0x8d, 0xa1, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x05, 0x43, 0x66, 0x67,
	0x49, 0x44, 0x12, 0x2a, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe7, 0xab, 0xa0, 0xe8, 0x8a,
	0x82, 0x49, 0x44, 0x52, 0x09, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x07, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x85, 0xb3, 0xe5, 0x8d, 0xa1, 0xe5, 0xba, 0x8f, 0xe5, 0x8f,
	0xb7, 0x52, 0x07, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x6f, 0x12, 0x3a, 0x0a, 0x0f, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x85, 0xb3, 0xe5, 0x8d, 0xa1, 0xe9,
	0x9a, 0xbe, 0xe5, 0xba, 0xa6, 0x52, 0x0f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5,
	0x18, 0x12, 0xe6, 0xaf, 0x8f, 0xe6, 0x97, 0xa5, 0xe6, 0x8c, 0x91, 0xe6, 0x88, 0x98, 0xe6, 0xac,
	0xa1, 0xe6, 0x95, 0xb0, 0x52, 0x0c, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x12, 0x30, 0x0a, 0x0a, 0x4d, 0x61, 0x78, 0x41, 0x63, 0x6e, 0x74, 0x4e, 0x75, 0x6d,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0x8e, 0xa9, 0xe5,
	0xae, 0xb6, 0xe4, 0xba, 0xba, 0xe6, 0x95, 0xb0, 0x52, 0x0a, 0x4d, 0x61, 0x78, 0x41, 0x63, 0x6e,
	0x74, 0x4e, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe5, 0x85, 0xb3, 0xe5, 0x8d, 0xa1, 0xe5, 0x90,
	0x8d, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x44, 0x65, 0x73, 0x69, 0x67,
	0x6e, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x19, 0xea, 0xb5, 0x18, 0x15, 0xe7, 0xad, 0x96, 0xe5, 0x88, 0x92, 0xe5, 0x85, 0xb3, 0xe5, 0x8d,
	0xa1, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0xe5, 0x90, 0x8d, 0x52, 0x0e, 0x44, 0x65, 0x73, 0x69,
	0x67, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x41, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe7, 0xbe, 0x8e, 0xe6, 0x9c, 0xaf, 0xe5, 0x85,
	0xb3, 0xe5, 0x8d, 0xa1, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0xe5, 0x90, 0x8d, 0x52, 0x0e, 0x41,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x09, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x85, 0xb3, 0xe5, 0x8d, 0xa1, 0xe6, 0xa8, 0xa1, 0xe5,
	0xbc, 0x8f, 0x52, 0x09, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a,
	0x09, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x85, 0xb3, 0xe5, 0x8d, 0xa1, 0xe5, 0xba, 0x95, 0xe5,
	0x9b, 0xbe, 0x52, 0x09, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x52, 0x0a,
	0x15, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x61, 0x6d, 0x70, 0x41, 0x49, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5,
	0x18, 0x18, 0xe5, 0xb7, 0xb1, 0xe6, 0x96, 0xb9, 0xe7, 0x94, 0xb5, 0xe8, 0x84, 0x91, 0xe7, 0x8e,
	0xa9, 0xe5, 0xae, 0xb6, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0x52, 0x15, 0x53, 0x65, 0x6c, 0x66,
	0x43, 0x61, 0x6d, 0x70, 0x41, 0x49, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x49, 0x0a, 0x10, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x61, 0x6d, 0x70, 0x41, 0x49, 0x48,
	0x65, 0x72, 0x6f, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x1d, 0xea, 0xb5, 0x18,
	0x14, 0xe5, 0xb7, 0xb1, 0xe6, 0x96, 0xb9, 0xe7, 0x94, 0xb5, 0xe8, 0x84, 0x91, 0xe8, 0x8b, 0xb1,
	0xe9, 0x9b, 0x84, 0x49, 0x44, 0xda, 0xb5, 0x18, 0x01, 0x35, 0x52, 0x10, 0x53, 0x65, 0x6c, 0x66,
	0x43, 0x61, 0x6d, 0x70, 0x41, 0x49, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x44, 0x12, 0x42, 0x0a, 0x0d,
	0x41, 0x49, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe6, 0x95, 0x8c, 0xe6, 0x96, 0xb9, 0xe7,
	0x94, 0xb5, 0xe8, 0x84, 0x91, 0xe7, 0x8e, 0xa9, 0xe5, 0xae, 0xb6, 0xe7, 0xad, 0x89, 0xe7, 0xba,
	0xa7, 0x52, 0x0d, 0x41, 0x49, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x39, 0x0a, 0x08, 0x41, 0x49, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x0d, 0x42, 0x1d, 0xea, 0xb5, 0x18, 0x14, 0xe6, 0x95, 0x8c, 0xe6, 0x96, 0xb9, 0xe7, 0x94,
	0xb5, 0xe8, 0x84, 0x91, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0x49, 0x44, 0xda, 0xb5, 0x18, 0x01,
	0x35, 0x52, 0x08, 0x41, 0x49, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x07, 0x48,
	0x65, 0x72, 0x6f, 0x4e, 0x75, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x07,
	0x48, 0x65, 0x72, 0x6f, 0x4e, 0x75, 0x6d, 0x12, 0x32, 0x0a, 0x0a, 0x48, 0x65, 0x72, 0x6f, 0x41,
	0x49, 0x54, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x42, 0x12, 0xea, 0xb5, 0x18,
	0x0e, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0x41, 0x49, 0xe6, 0x96, 0xb9, 0xe5, 0xbc, 0x8f, 0x52,
	0x0a, 0x48, 0x65, 0x72, 0x6f, 0x41, 0x49, 0x54, 0x79, 0x70, 0x65, 0x12, 0x57, 0x0a, 0x0a, 0x53,
	0x74, 0x61, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f,
	0x49, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4e, 0x6f, 0x64,
	0x65, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x98, 0x9f, 0xe7, 0xba, 0xa7, 0xe6, 0x9d, 0xa1,
	0xe4, 0xbb, 0xb6, 0xda, 0xb5, 0x18, 0x01, 0x33, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x36, 0x0a, 0x0d, 0x4c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x0c, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x52, 0x0d, 0x4c,
	0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0d,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6,
	0xbf, 0x80, 0xe6, 0xb4, 0xbb, 0x52, 0x0d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1b, 0xea,
	0xb5, 0x18, 0x17, 0xe9, 0x80, 0x9a, 0xe5, 0x85, 0xb3, 0xe5, 0x90, 0x8e, 0xe6, 0xbf, 0x80, 0xe6,
	0xb4, 0xbb, 0xe5, 0x85, 0xb3, 0xe5, 0x8d, 0xa1, 0x49, 0x44, 0x52, 0x0f, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x10, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18,
	0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x50, 0x76, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53,
	0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xa5, 0x96,
	0xe5, 0x8a, 0xb1, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0xda, 0xb5, 0x18, 0x01, 0x35, 0x52, 0x10,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x3d, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x17, 0x20, 0x03, 0x28, 0x05, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x8e,
	0xa8, 0xe8, 0x8d, 0x90, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0xda, 0xb5, 0x18, 0x01, 0x34, 0x52,
	0x0e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x3d, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0x18, 0x20, 0x03, 0x28, 0x05, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x8e, 0xa8,
	0xe8, 0x8d, 0x90, 0xe6, 0x88, 0x98, 0xe5, 0x8a, 0x9b, 0xda, 0xb5, 0x18, 0x01, 0x34, 0x52, 0x0e,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x4a,
	0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x18, 0x19, 0x20, 0x03, 0x28, 0x05, 0x42, 0x1e, 0xea, 0xb5, 0x18, 0x15, 0xe6, 0x9c,
	0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0x99, 0xa8, 0xe6, 0xa3, 0x80, 0xe6, 0x9f, 0xa5, 0xe6, 0x88, 0x98,
	0xe5, 0x8a, 0x9b, 0xda, 0xb5, 0x18, 0x01, 0x34, 0x52, 0x10, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0b, 0x48, 0x69,
	0x64, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x70, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x19, 0xea, 0xb5, 0x18, 0x15, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x98, 0xbe, 0xe7, 0xa4,
	0xba, 0xe7, 0xbc, 0xa9, 0xe7, 0x95, 0xa5, 0xe5, 0x9b, 0xbe, 0x52, 0x0b, 0x48, 0x69, 0x64, 0x65,
	0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x70, 0x12, 0x39, 0x0a, 0x0d, 0x54, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13,
	0xea, 0xb5, 0x18, 0x0f, 0xe7, 0xbc, 0xa9, 0xe7, 0x95, 0xa5, 0xe5, 0x9b, 0xbe, 0xe8, 0xb7, 0xaf,
	0xe5, 0xbe, 0x84, 0x52, 0x0d, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x2d, 0x0a, 0x07, 0x4d, 0x61, 0x70, 0x50, 0x61, 0x74, 0x68, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe5, 0xb0, 0x8f, 0xe5, 0x9c, 0xb0, 0xe5,
	0x9b, 0xbe, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x07, 0x4d, 0x61, 0x70, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x33, 0x0a, 0x0a, 0x42, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe5, 0xa4, 0xa7, 0xe5, 0x9c,
	0xb0, 0xe5, 0x9b, 0xbe, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x0a, 0x42, 0x69, 0x67, 0x4d,
	0x61, 0x70, 0x50, 0x61, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x08, 0x4d, 0x61, 0x70, 0x57, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe9, 0x80,
	0xbb, 0xe8, 0xbe, 0x91, 0xe5, 0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe5, 0xae, 0xbd, 0xe5, 0xba, 0xa6,
	0x52, 0x08, 0x4d, 0x61, 0x70, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x09, 0x4d, 0x61,
	0x70, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0xea,
	0xb5, 0x18, 0x12, 0xe9, 0x80, 0xbb, 0xe8, 0xbe, 0x91, 0xe5, 0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe9,
	0xab, 0x98, 0xe5, 0xba, 0xa6, 0x52, 0x09, 0x4d, 0x61, 0x70, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x39, 0x0a, 0x0d, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x57, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe5, 0xb0, 0x8f,
	0xe5, 0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe5, 0xae, 0xbd, 0xe5, 0xba, 0xa6, 0x52, 0x0d, 0x53, 0x6d,
	0x61, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x3b, 0x0a, 0x0e, 0x53,
	0x6d, 0x61, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe5, 0xb0, 0x8f, 0xe5, 0x9c, 0xb0, 0xe5,
	0x9b, 0xbe, 0xe9, 0xab, 0x98, 0xe5, 0xba, 0xa6, 0x52, 0x0e, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x4d,
	0x61, 0x70, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x42, 0x69, 0x67, 0x4d,
	0x61, 0x70, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x42, 0x13, 0xea,
	0xb5, 0x18, 0x0f, 0xe5, 0xa4, 0xa7, 0xe5, 0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe5, 0xae, 0xbd, 0xe5,
	0xba, 0xa6, 0x52, 0x0b, 0x42, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x37, 0x0a, 0x0c, 0x42, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x05, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe5, 0xa4, 0xa7, 0xe5, 0x9c,
	0xb0, 0xe5, 0x9b, 0xbe, 0xe9, 0xab, 0x98, 0xe5, 0xba, 0xa6, 0x52, 0x0c, 0x42, 0x69, 0x67, 0x4d,
	0x61, 0x70, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x4d, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x4e,
	0x61, 0x76, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x1f, 0xea, 0xb5, 0x18, 0x1b, 0xe5, 0x90, 0xaf, 0xe7, 0x94, 0xa8, 0xe5,
	0xaf, 0xbc, 0xe8, 0x88, 0xaa, 0xe7, 0x89, 0x87, 0xe9, 0xab, 0x98, 0xe5, 0xba, 0xa6, 0xe9, 0x99,
	0x90, 0xe5, 0x80, 0xbc, 0x52, 0x11, 0x55, 0x73, 0x65, 0x4e, 0x61, 0x76, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x36, 0x0a, 0x0c, 0x50, 0x61, 0x73, 0x73, 0x44,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x42, 0x12, 0xea,
	0xb5, 0x18, 0x0e, 0xe9, 0x80, 0x9a, 0xe5, 0x85, 0xb3, 0xe5, 0x89, 0xa7, 0xe6, 0x83, 0x85, 0x49,
	0x44, 0x52, 0x0c, 0x50, 0x61, 0x73, 0x73, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12,
	0x34, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0xe5, 0x85, 0xa5, 0xe5, 0x85, 0xb3,
	0xe5, 0x89, 0xa7, 0xe6, 0x83, 0x85, 0x49, 0x44, 0x52, 0x0b, 0x50, 0x72, 0x65, 0x44, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0f, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x05, 0x42, 0x12,
	0xea, 0xb5, 0x18, 0x0e, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe5, 0x89, 0xa7, 0xe6, 0x83, 0x85,
	0x49, 0x44, 0x52, 0x0f, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x41, 0x50, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18,
	0x12, 0xe8, 0xbf, 0x9b, 0xe5, 0x85, 0xa5, 0xe6, 0xb6, 0x88, 0xe8, 0x80, 0x97, 0xe4, 0xbd, 0x93,
	0xe5, 0x8a, 0x9b, 0x52, 0x0e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x41, 0x50, 0x12, 0x40, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x41, 0x50, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5,
	0x18, 0x12, 0xe5, 0xae, 0x8c, 0xe6, 0x88, 0x90, 0xe6, 0xb6, 0x88, 0xe8, 0x80, 0x97, 0xe4, 0xbd,
	0x93, 0xe5, 0x8a, 0x9b, 0x52, 0x0f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x41, 0x50, 0x12, 0x30, 0x0a, 0x0c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x44, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18,
	0x08, 0xe9, 0x98, 0xb5, 0xe5, 0xae, 0xb9, 0x49, 0x44, 0x52, 0x0c, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x49, 0x44, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x2b, 0x20, 0x03, 0x28, 0x0d, 0x42,
	0x11, 0xea, 0xb5, 0x18, 0x08, 0xe7, 0xbb, 0x93, 0xe7, 0xae, 0x97, 0x49, 0x44, 0xda, 0xb5, 0x18,
	0x01, 0x34, 0x52, 0x0e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x44, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x38, 0x0a, 0x08, 0x53, 0x6f, 0x75, 0x6c, 0x47, 0x72, 0x6f, 0x77, 0x18, 0x2c,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6,
	0xe5, 0xad, 0x98, 0xe5, 0x9c, 0xa8, 0xe9, 0xad, 0x82, 0xe5, 0x80, 0xbc, 0xe6, 0x88, 0x90, 0xe9,
	0x95, 0xbf, 0x52, 0x08, 0x53, 0x6f, 0x75, 0x6c, 0x47, 0x72, 0x6f, 0x77, 0x12, 0x40, 0x0a, 0x0b,
	0x53, 0x6f, 0x75, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x49, 0x44, 0x18, 0x2d, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x1e, 0xea, 0xb5, 0x18, 0x1a, 0xe9, 0xad, 0x82, 0xe5, 0x80, 0xbc, 0xe7, 0xbb, 0x8f,
	0xe9, 0xaa, 0x8c, 0xe5, 0x88, 0x86, 0xe9, 0x85, 0x8d, 0xe8, 0xa7, 0x84, 0xe5, 0x88, 0x99, 0x49,
	0x44, 0x52, 0x0b, 0x53, 0x6f, 0x75, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x49, 0x44, 0x12, 0x36,
	0x0a, 0x0d, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x94, 0xbb, 0xe5, 0x87,
	0xbb, 0xe9, 0xa1, 0xba, 0xe5, 0xba, 0x8f, 0x52, 0x0d, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x0a, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c,
	0xe5, 0xa4, 0x8d, 0xe6, 0xb4, 0xbb, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x52, 0x65,
	0x76, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x12, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x43, 0x66, 0x67, 0x18, 0x30,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x8a, 0xa8, 0xe6, 0x80, 0x81,
	0xe5, 0xb1, 0x9e, 0xe6, 0x80, 0xa7, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x12, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x43, 0x66, 0x67,
	0x12, 0x3a, 0x0a, 0x0f, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe9,
	0x9f, 0xb3, 0xe4, 0xb9, 0x90, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0x52, 0x0f, 0x4d, 0x75, 0x73,
	0x69, 0x63, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0d,
	0x4d, 0x75, 0x73, 0x69, 0x63, 0x45, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe9, 0x9f, 0xb3, 0xe4, 0xb9, 0x90, 0xe7,
	0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0x52, 0x0d, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x45, 0x6e, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x11, 0x41, 0x6d, 0x62, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x6f, 0x75, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe7, 0x8e, 0xaf, 0xe5, 0xa2, 0x83, 0xe9, 0x9f, 0xb3, 0x52, 0x11,
	0x41, 0x6d, 0x62, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x3a, 0x0a, 0x10, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xea, 0xb5, 0x18,
	0x0a, 0x42, 0x61, 0x6e, 0x6b, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0x52, 0x10, 0x42, 0x61, 0x6e,
	0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a,
	0x0d, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xa7, 0x86, 0xe9, 0x87, 0x8e,
	0xe6, 0x9c, 0xba, 0xe5, 0x88, 0xb6, 0x52, 0x0d, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x46, 0x0a, 0x12, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x6f,
	0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x36, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0xe8, 0xa7, 0x86,
	0xe9, 0x87, 0x8e, 0xe6, 0x9c, 0xba, 0xe5, 0x88, 0xb6, 0x52, 0x12, 0x41, 0x63, 0x74, 0x6f, 0x72,
	0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x40, 0x0a,
	0x0c, 0x49, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x49, 0x18, 0x37, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5,
	0xbc, 0x80, 0xe5, 0x90, 0xaf, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe6, 0x88, 0x98, 0xe6, 0x96,
	0x97, 0x52, 0x0c, 0x49, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x49, 0x12,
	0x47, 0x0a, 0x08, 0x4d, 0x61, 0x70, 0x42, 0x75, 0x66, 0x66, 0x73, 0x18, 0x38, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44,
	0x54, 0x5f, 0x4d, 0x61, 0x70, 0x42, 0x75, 0x66, 0x66, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0a, 0xe5,
	0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0x42, 0x55, 0x46, 0x46, 0xda, 0xb5, 0x18, 0x01, 0x34, 0x52, 0x08,
	0x4d, 0x61, 0x70, 0x42, 0x75, 0x66, 0x66, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x44, 0x65, 0x73, 0x63, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x0c, 0xe5, 0x85, 0xb3, 0xe5, 0x8d, 0xa1, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x09, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x12, 0x53, 0x0a, 0x0a, 0x52, 0x65, 0x76, 0x69,
	0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x3a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x52,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x50, 0x76, 0x65,
	0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x0c,
	0xe5, 0xa4, 0x8d, 0xe6, 0xb4, 0xbb, 0xe9, 0x9a, 0xbe, 0xe5, 0xba, 0xa6, 0xda, 0xb5, 0x18, 0x01,
	0x34, 0x52, 0x0a, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a,
	0x0d, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x3b,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0xa4, 0x8d, 0xe6, 0xb4, 0xbb,
	0xe5, 0xbc, 0xb9, 0xe7, 0xaa, 0x97, 0xe8, 0xae, 0xa1, 0xe6, 0x97, 0xb6, 0x52, 0x0d, 0x52, 0x65,
	0x76, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x36, 0x0a, 0x0c, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe6, 0x8a, 0x80,
	0xe8, 0x83, 0xbd, 0x49, 0x44, 0x52, 0x0c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0d, 0x45, 0x78, 0x74, 0x72, 0x61, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x32, 0x49, 0x64, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x05, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f,
	0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0x32, 0x49, 0x44, 0x52,
	0x0d, 0x45, 0x78, 0x74, 0x72, 0x61, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x32, 0x49, 0x64, 0x12, 0x39,
	0x0a, 0x0d, 0x45, 0x78, 0x74, 0x72, 0x61, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x33, 0x49, 0x64, 0x18,
	0x3e, 0x20, 0x01, 0x28, 0x05, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4,
	0x96, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0x33, 0x49, 0x44, 0x52, 0x0d, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x33, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x13, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x53, 0x6c, 0x6f, 0x74,
	0x18, 0x3f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe9, 0xa2, 0x9d, 0xe5,
	0xa4, 0x96, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe9, 0x80, 0xbb, 0xe8, 0xbe, 0x91, 0xe6, 0xa7,
	0xbd, 0xe4, 0xbd, 0x8d, 0x52, 0x13, 0x45, 0x78, 0x74, 0x72, 0x61, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x51, 0x0a, 0x14, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x32, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x53, 0x6c, 0x6f,
	0x74, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1d, 0xea, 0xb5, 0x18, 0x19, 0xe9, 0xa2, 0x9d,
	0xe5, 0xa4, 0x96, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0x32, 0xe9, 0x80, 0xbb, 0xe8, 0xbe, 0x91,
	0xe6, 0xa7, 0xbd, 0xe4, 0xbd, 0x8d, 0x52, 0x14, 0x45, 0x78, 0x74, 0x72, 0x61, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x32, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x51, 0x0a, 0x14,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x33, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x53, 0x6c, 0x6f, 0x74, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1d, 0xea, 0xb5, 0x18, 0x19,
	0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0x33, 0xe9, 0x80, 0xbb,
	0xe8, 0xbe, 0x91, 0xe6, 0xa7, 0xbd, 0xe4, 0xbd, 0x8d, 0x52, 0x14, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x33, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x53, 0x6c, 0x6f, 0x74, 0x12,
	0x4a, 0x0a, 0x13, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x42, 0x20, 0x01, 0x28, 0x05, 0x42, 0x18, 0xea, 0xb5,
	0x18, 0x14, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe8, 0xa2, 0xab, 0xe5, 0x8a, 0xa8, 0xe6, 0x8a,
	0x80, 0xe8, 0x83, 0xbd, 0x49, 0x44, 0x52, 0x13, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x73,
	0x73, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0d, 0x46,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x43, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe9, 0xa1,
	0xb5, 0xe9, 0x9d, 0xa2, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0d, 0x46, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x52, 0x61, 0x6e,
	0x64, 0x50, 0x69, 0x63, 0x6b, 0x48, 0x65, 0x72, 0x6f, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe9, 0x9a, 0x8f, 0xe6, 0x9c, 0xba, 0xe9, 0x80, 0x89, 0xe5, 0xb0,
	0x86, 0x52, 0x0c, 0x52, 0x61, 0x6e, 0x64, 0x50, 0x69, 0x63, 0x6b, 0x48, 0x65, 0x72, 0x6f, 0x12,
	0x3c, 0x0a, 0x0c, 0x53, 0x6f, 0x75, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x18,
	0x45, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x18, 0xea, 0xb5, 0x18, 0x14, 0xe9, 0xad, 0x82, 0xe5, 0x80,
	0xbc, 0xe5, 0x9f, 0xba, 0xe7, 0xa1, 0x80, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x49, 0x44, 0x52,
	0x0c, 0x53, 0x6f, 0x75, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x48, 0x0a,
	0x12, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x6c,
	0x70, 0x65, 0x72, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x18, 0xea, 0xb5, 0x18, 0x14, 0xe6,
	0x98, 0xbe, 0xe7, 0xa4, 0xba, 0xe8, 0xae, 0xad, 0xe7, 0xbb, 0x83, 0x47, 0x4d, 0xe9, 0x9d, 0xa2,
	0xe6, 0x9d, 0xbf, 0x52, 0x12, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x11, 0x47, 0x75, 0x69, 0x64, 0x65,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x47, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x96, 0xb0, 0xe6, 0x89, 0x8b, 0xe5, 0x85,
	0xb3, 0xe5, 0xad, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x11, 0x47, 0x75, 0x69, 0x64,
	0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a,
	0x11, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x44, 0x72,
	0x61, 0x67, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0xea, 0xb5, 0x18, 0x1b, 0xe6, 0x98,
	0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0xe5, 0x8f, 0xb3, 0xe6, 0x91, 0x87,
	0xe6, 0x9d, 0x86, 0xe6, 0x8b, 0x96, 0xe6, 0x8b, 0xbd, 0x52, 0x11, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x44, 0x72, 0x61, 0x67, 0x12, 0x50, 0x0a, 0x14,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x53,
	0x65, 0x74, 0x49, 0x44, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18,
	0xe5, 0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe4, 0xba, 0xae, 0xe5, 0xba, 0xa6, 0xe8, 0xb0, 0x83, 0xe8,
	0x8a, 0x82, 0xe7, 0xb4, 0xa2, 0xe5, 0xbc, 0x95, 0x52, 0x14, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x42,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x65, 0x74, 0x49, 0x44, 0x12, 0x38,
	0x0a, 0x0e, 0x44, 0x79, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x18, 0x4a, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0xbf, 0x92, 0xe6,
	0xad, 0xbb, 0xe7, 0xa7, 0xbb, 0xe9, 0x80, 0x9f, 0x52, 0x0e, 0x44, 0x79, 0x69, 0x6e, 0x67, 0x4d,
	0x6f, 0x76, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x10, 0x48, 0x65, 0x72, 0x6f,
	0x41, 0x49, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x47, 0x72, 0x61, 0x70, 0x68, 0x18, 0x4b, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x11, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0x41, 0x49,
	0xe9, 0x80, 0xbb, 0xe8, 0xbe, 0x91, 0xe5, 0x9b, 0xbe, 0x52, 0x10, 0x48, 0x65, 0x72, 0x6f, 0x41,
	0x49, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x47, 0x72, 0x61, 0x70, 0x68, 0x3a, 0x09, 0x8a, 0x97, 0x22,
	0x05, 0x43, 0x66, 0x67, 0x49, 0x44, 0x22, 0x5f, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f,
	0x55, 0x6e, 0x55, 0x73, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x4b, 0x0a, 0x0e, 0x55, 0x6e,
	0x55, 0x73, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0d, 0x42, 0x23, 0xea, 0xb5, 0x18, 0x1a, 0xe4, 0xb8, 0x8d, 0xe5, 0x8f, 0xaf, 0xe7, 0x94,
	0xa8, 0xe5, 0x8f, 0xac, 0xe5, 0x94, 0xa4, 0xe5, 0xb8, 0x88, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd,
	0x49, 0x44, 0xda, 0xb5, 0x18, 0x01, 0x35, 0x52, 0x0e, 0x55, 0x6e, 0x55, 0x73, 0x65, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc3, 0x01, 0x0a, 0x14, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x28, 0x0a, 0x06, 0x42, 0x61, 0x73, 0x65, 0x48, 0x50, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x9f, 0xba, 0xe7, 0xa1, 0x80, 0xe7, 0x94, 0x9f, 0xe5,
	0x91, 0xbd, 0x52, 0x06, 0x42, 0x61, 0x73, 0x65, 0x48, 0x50, 0x12, 0x1d, 0x0a, 0x02, 0x41, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe6, 0x94, 0xbb, 0xe5,
	0x87, 0xbb, 0xe5, 0x8a, 0x9b, 0x52, 0x02, 0x41, 0x44, 0x12, 0x20, 0x0a, 0x02, 0x41, 0x50, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0xb3, 0x95, 0xe6, 0x9c,
	0xaf, 0xe5, 0xbc, 0xba, 0xe5, 0xba, 0xa6, 0x52, 0x02, 0x41, 0x50, 0x12, 0x1c, 0x0a, 0x03, 0x44,
	0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x8a,
	0xa4, 0xe7, 0x94, 0xb2, 0x52, 0x03, 0x44, 0x65, 0x66, 0x12, 0x1c, 0x0a, 0x03, 0x52, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x8a, 0x97, 0xe6,
	0x80, 0xa7, 0x52, 0x03, 0x52, 0x65, 0x73, 0x3a, 0x04, 0xe0, 0x97, 0x22, 0x01, 0x22, 0x84, 0x02,
	0x0a, 0x16, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x0d, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x44, 0x65, 0x73, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0d, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x12, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x42, 0x61, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe5, 0x9f, 0xba, 0xe7,
	0xa1, 0x80, 0xe5, 0x80, 0xbc, 0x52, 0x12, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x65, 0x73, 0x63,
	0x42, 0x61, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x37, 0x0a, 0x0f, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe6, 0x88, 0x90, 0xe9, 0x95, 0xbf, 0xe5, 0x80,
	0xbc, 0x52, 0x0f, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x47, 0x72, 0x6f, 0x77,
	0x74, 0x68, 0x12, 0x40, 0x0a, 0x12, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x95, 0xb0, 0xe5, 0x80, 0xbc, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0x52, 0x12, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xf8, 0x07, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x43, 0x66, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x05, 0x43, 0x66, 0x67, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe6, 0x8a, 0x80,
	0xe8, 0x83, 0xbd, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x05, 0x43, 0x66, 0x67, 0x49, 0x44,
	0x12, 0x32, 0x0a, 0x09, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe5,
	0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x09, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x65, 0x73,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x8a, 0x80,
	0xe8, 0x83, 0xbd, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x09, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x12, 0x3a, 0x0a, 0x0a, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x55, 0x70, 0x54, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xea, 0xb5,
	0x18, 0x12, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe5, 0x8d, 0x87, 0xe7, 0xba, 0xa7, 0xe6, 0x8f,
	0x90, 0xe7, 0xa4, 0xba, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x0a, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x55,
	0x70, 0x54, 0x69, 0x70, 0x12, 0x2c, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x9b, 0xbe, 0xe6,
	0xa0, 0x87, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x2e, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0xa8, 0xa1, 0xe5, 0x9e,
	0x8b, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x2c, 0x0a, 0x08, 0x43, 0x6f, 0x6f, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x86, 0xb7, 0xe5, 0x8d, 0xb4,
	0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x08, 0x43, 0x6f, 0x6f, 0x6c, 0x44, 0x6f, 0x77, 0x6e,
	0x12, 0x28, 0x0a, 0x06, 0x50, 0x72, 0x65, 0x66, 0x61, 0x62, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x8a, 0xa8, 0xe4, 0xbd, 0x9c, 0xe8, 0xb7, 0xaf, 0xe5,
	0xbe, 0x84, 0x52, 0x06, 0x50, 0x72, 0x65, 0x66, 0x61, 0x62, 0x12, 0x44, 0x0a, 0x11, 0x4d, 0x61,
	0x78, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x9c, 0x80, 0xe5, 0xa4,
	0xa7, 0xe6, 0x94, 0xbb, 0xe5, 0x87, 0xbb, 0xe8, 0xb7, 0x9d, 0xe7, 0xa6, 0xbb, 0x52, 0x11, 0x4d,
	0x61, 0x78, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x40, 0x0a, 0x0f, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6,
	0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe7, 0xad, 0x9b, 0xe9, 0x80, 0x89, 0xe8, 0xa7, 0x84, 0xe5, 0x88,
	0x99, 0x52, 0x0f, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x4c, 0x0a, 0x15, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x94, 0xbb, 0xe9, 0x80, 0x9f, 0xe5, 0xbd, 0xb1,
	0xe5, 0x93, 0x8d, 0xe6, 0xaf, 0x94, 0xe4, 0xbe, 0x8b, 0x52, 0x15, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x53, 0x70, 0x65, 0x65, 0x64, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x55, 0x0a, 0x15, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x57, 0x68, 0x65, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x1f, 0xea, 0xb5, 0x18, 0x1b, 0xe5, 0x85, 0x81, 0xe8, 0xae, 0xb8, 0xe5, 0x8f, 0x97, 0xe6, 0x8e,
	0xa7, 0xe6, 0x97, 0xb6, 0xe9, 0x87, 0x8a, 0xe6, 0x94, 0xbe, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd,
	0x52, 0x15, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x57, 0x68, 0x65, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe5,
	0xb1, 0x9e, 0xe6, 0x80, 0xa7, 0xe5, 0x88, 0x97, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x12, 0x26, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x0a, 0x31, 0xe6, 0x98, 0x9f, 0xe5, 0x8f, 0x82, 0xe6,
	0x95, 0xb0, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x12, 0x26, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x32, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x0a,
	0x32, 0xe6, 0x98, 0x9f, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x32, 0x12, 0x26, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x33, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x0a, 0x33, 0xe6, 0x98, 0x9f, 0xe5, 0x8f, 0x82, 0xe6,
	0x95, 0xb0, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x33, 0x12, 0x3b, 0x0a, 0x0c, 0x4f, 0x75,
	0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x17, 0xea, 0xb5, 0x18, 0x0f, 0xe5, 0xb1, 0x80, 0xe5, 0xa4, 0x96, 0xe6, 0x8f, 0x8f, 0xe8,
	0xbf, 0xb0, 0xe5, 0x88, 0x97, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x0c, 0x4f, 0x75, 0x74, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x12, 0x3f, 0x0a, 0x0e, 0x57, 0x6f, 0x72, 0x6c, 0x64,
	0x56, 0x69, 0x65, 0x77, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x17, 0xea, 0xb5, 0x18, 0x0f, 0xe4, 0xb8, 0x96, 0xe7, 0x95, 0x8c, 0xe8, 0xa7, 0x82, 0xe7, 0x9f,
	0xad, 0xe5, 0x8f, 0xa5, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x0e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56,
	0x69, 0x65, 0x77, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x3a, 0x15, 0x8a, 0x97, 0x22, 0x05, 0x43, 0x66,
	0x67, 0x49, 0x44, 0x98, 0x97, 0x22, 0x01, 0xf0, 0x97, 0x22, 0x01, 0xf8, 0x97, 0x22, 0x01, 0x22,
	0x7e, 0x0a, 0x29, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x51, 0x0a, 0x0a,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54,
	0x5f, 0x49, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4e, 0x6f,
	0x64, 0x65, 0x42, 0x0f, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xda, 0xb5,
	0x18, 0x01, 0x35, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x22,
	0xd7, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x46,
	0x75, 0x6e, 0x63, 0x12, 0x30, 0x0a, 0x0d, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x46, 0x75, 0x6e, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0d, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x46, 0x75, 0x6e,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x0d, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x46, 0x75,
	0x6e, 0x63, 0x46, 0x72, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe4, 0xbd, 0x9c, 0xe7, 0x94, 0xa8, 0xe5, 0x91, 0xa8, 0xe6, 0x9c, 0x9f, 0x52, 0x0d,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x46, 0x72, 0x65, 0x71, 0x12, 0x5a, 0x0a,
	0x0e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x49, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x8f, 0x82,
	0xe6, 0x95, 0xb0, 0xda, 0xb5, 0x18, 0x02, 0x31, 0x38, 0x52, 0x0e, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x46, 0x75, 0x6e, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x22, 0xaa, 0x01, 0x0a, 0x1b, 0x52, 0x65,
	0x73, 0x44, 0x54, 0x5f, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x0d, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0d, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x59, 0x0a, 0x0e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65,
	0x73, 0x44, 0x54, 0x5f, 0x49, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x0f, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x8f, 0x82, 0xe6, 0x95,
	0xb0, 0xda, 0xb5, 0x18, 0x01, 0x39, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x9a, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x44, 0x54,
	0x5f, 0x53, 0x68, 0x6f, 0x77, 0x42, 0x75, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1c, 0xea, 0xb5, 0x18,
	0x06, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x0e, 0x42, 0x55, 0x46, 0x46, 0x5f,
	0x53, 0x48, 0x4f, 0x57, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x27, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x42,
	0x0f, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xda, 0xb5, 0x18, 0x01, 0x32,
	0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x29, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09,
	0xe4, 0xbc, 0x98, 0xe5, 0x85, 0x88, 0xe7, 0xba, 0xa7, 0x52, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x22, 0x56, 0x0a, 0x1e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0f, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xea, 0xb5, 0x18, 0x06, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x0f, 0x4c, 0x61, 0x79, 0x65,
	0x72, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22, 0xd4, 0x09, 0x0a, 0x13,
	0x52, 0x65, 0x73, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x43, 0x66, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x05, 0x43, 0x66, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x0e, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe5, 0x8d,
	0xb0, 0xe8, 0xae, 0xb0, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x05, 0x43, 0x66, 0x67, 0x49,
	0x44, 0x12, 0x3a, 0x0a, 0x0b, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x43, 0x66, 0x67, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x18, 0xea, 0xb5, 0x18, 0x14, 0xe5, 0x89, 0x8d, 0xe7,
	0xbd, 0xae, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe5, 0x8d, 0xb0, 0xe8, 0xae, 0xb0, 0x49, 0x44,
	0x52, 0x0b, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x43, 0x66, 0x67, 0x49, 0x44, 0x12, 0x32, 0x0a,
	0x08, 0x4d, 0x61, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe5, 0x8d, 0xb0, 0xe8, 0xae,
	0xb0, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x08, 0x4d, 0x61, 0x72, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x32, 0x0a, 0x08, 0x4d, 0x61, 0x72, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe5,
	0x8d, 0xb0, 0xe8, 0xae, 0xb0, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x08, 0x4d, 0x61, 0x72,
	0x6b, 0x44, 0x65, 0x73, 0x63, 0x12, 0x3c, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe6,
	0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe5, 0x8d, 0xb0, 0xe8, 0xae, 0xb0, 0xe5, 0x8a, 0xa8, 0xe4, 0xbd,
	0x9c, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe6, 0x8a, 0x80, 0xe8, 0x83,
	0xbd, 0xe5, 0x8d, 0xb0, 0xe8, 0xae, 0xb0, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe5, 0xb1, 0x82,
	0xe6, 0x95, 0xb0, 0x52, 0x08, 0x4d, 0x61, 0x78, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x3a, 0x0a,
	0x09, 0x43, 0x6f, 0x73, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe5, 0x8d, 0xb0, 0xe8,
	0xae, 0xb0, 0xe6, 0xb6, 0x88, 0xe8, 0x80, 0x97, 0xe5, 0xb1, 0x82, 0xe6, 0x95, 0xb0, 0x52, 0x09,
	0x43, 0x6f, 0x73, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0c, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe5, 0x8d, 0xb0, 0xe8, 0xae,
	0xb0, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe5, 0xb1, 0x82, 0xe6, 0x95, 0xb0, 0x52, 0x0c, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0a, 0x49,
	0x6d, 0x6d, 0x75, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe5, 0x8d, 0xb0, 0xe8, 0xae,
	0xb0, 0xe5, 0x85, 0x8d, 0xe7, 0x96, 0xab, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x49,
	0x6d, 0x6d, 0x75, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x4c, 0x61, 0x73,
	0x74, 0x4d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1c,
	0xea, 0xb5, 0x18, 0x18, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe5, 0x8d, 0xb0, 0xe8, 0xae, 0xb0,
	0xe6, 0x8c, 0x81, 0xe7, 0xbb, 0xad, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0b, 0x4c, 0x61,
	0x73, 0x74, 0x4d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x11, 0x41, 0x64, 0x64,
	0x4d, 0x61, 0x72, 0x6b, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x2e, 0xea, 0xb5, 0x18, 0x2a, 0xe5, 0x8d, 0xb0, 0xe8, 0xae, 0xb0,
	0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe5, 0x90, 0x8e, 0xe7, 0x9a, 0x84, 0xe5, 0x85, 0x8d, 0xe7,
	0x96, 0xab, 0xe5, 0x8d, 0xb0, 0xe8, 0xae, 0xb0, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a, 0xa0, 0xe6, 0x97,
	0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x11, 0x41, 0x64, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x49, 0x6d, 0x6d,
	0x75, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x41, 0x75, 0x74, 0x6f, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5,
	0x18, 0x18, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe5, 0x8d, 0xb0, 0xe8, 0xae, 0xb0, 0xe8, 0x87,
	0xaa, 0xe5, 0x8a, 0xa8, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0x52, 0x0b, 0x41, 0x75, 0x74, 0x6f,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x6f, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4f, 0x6e, 0x44, 0x65, 0x61, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0xad, 0xbb, 0xe4, 0xba, 0xa1, 0xe8, 0x87,
	0xaa, 0xe5, 0x8a, 0xa8, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0x52, 0x11, 0x41, 0x75, 0x74, 0x6f,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4f, 0x6e, 0x44, 0x65, 0x61, 0x64, 0x12, 0x3c, 0x0a,
	0x0a, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe5, 0x8d, 0xb0, 0xe8, 0xae, 0xb0, 0xe7, 0x89, 0xb9,
	0xe6, 0x95, 0x88, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0x9b, 0xe9, 0x80, 0x89, 0x52,
	0x0a, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x69, 0x0a, 0x0f, 0x4c,
	0x61, 0x79, 0x65, 0x72, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52,
	0x65, 0x73, 0x44, 0x54, 0x5f, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x16, 0xea,
	0xb5, 0x18, 0x0c, 0xe5, 0x8d, 0xb0, 0xe8, 0xae, 0xb0, 0xe7, 0x89, 0xb9, 0xe6, 0x95, 0x88, 0xda,
	0xb5, 0x18, 0x02, 0x31, 0x32, 0x52, 0x0f, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x7b, 0x0a, 0x25, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x05, 0x42, 0x25, 0xea, 0xb5, 0x18, 0x21, 0xe4, 0xb8, 0xbb, 0xe6, 0x8e,
	0xa7, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0xe4, 0xba, 0xa7, 0xe7, 0x94, 0x9f, 0xe7, 0x89, 0xb9,
	0xe6, 0x95, 0x88, 0xe7, 0x9a, 0x84, 0xe5, 0xb1, 0x82, 0xe7, 0xba, 0xa7, 0x52, 0x25, 0x48, 0x6f,
	0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x06, 0x42, 0x75, 0x66, 0x66, 0x49, 0x44, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0x42, 0x75, 0x66, 0x66, 0x49, 0x44, 0x52,
	0x06, 0x42, 0x75, 0x66, 0x66, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x0e, 0x42, 0x75, 0x66, 0x66, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0e, 0xea, 0xb5, 0x18, 0x0a, 0x42, 0x75, 0x66, 0x66, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0x52,
	0x0e, 0x42, 0x75, 0x66, 0x66, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x11, 0x8a, 0x97, 0x22, 0x05, 0x43, 0x66, 0x67, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0xf8, 0x97,
	0x22, 0x01, 0x22, 0xe3, 0x0c, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50,
	0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x43, 0x66, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a,
	0x05, 0x43, 0x66, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0xea, 0xb5,
	0x18, 0x0e, 0xe8, 0xa2, 0xab, 0xe5, 0x8a, 0xa8, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0x49, 0x44,
	0xc8, 0xc1, 0x18, 0x01, 0x52, 0x05, 0x43, 0x66, 0x67, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x08, 0x43,
	0x6f, 0x6f, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xea,
	0xb5, 0x18, 0x0c, 0xe5, 0x86, 0xb7, 0xe5, 0x8d, 0xb4, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52,
	0x08, 0x43, 0x6f, 0x6f, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x53, 0x68, 0x6f,
	0x77, 0x41, 0x73, 0x45, 0x6c, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19,
	0xea, 0xb5, 0x18, 0x15, 0xe5, 0xa4, 0xa7, 0xe8, 0xa1, 0x80, 0xe6, 0x9d, 0xa1, 0xe6, 0x98, 0xbe,
	0xe7, 0xa4, 0xba, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0x52, 0x0b, 0x53, 0x68, 0x6f, 0x77, 0x41,
	0x73, 0x45, 0x6c, 0x69, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe8,
	0xa2, 0xab, 0xe5, 0x8a, 0xa8, 0xe7, 0x94, 0x9f, 0xe6, 0x95, 0x88, 0xe4, 0xbe, 0x9d, 0xe8, 0xb5,
	0x96, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0x52, 0x09, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe8, 0xa2, 0xab,
	0xe5, 0x8a, 0xa8, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52,
	0x0b, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0b,
	0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x44, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe8, 0xa2, 0xab, 0xe5, 0x8a, 0xa8, 0xe6, 0x8a, 0x80,
	0xe8, 0x83, 0xbd, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x0b, 0x50, 0x61, 0x73, 0x73, 0x69,
	0x76, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x3c, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18,
	0xe8, 0xa2, 0xab, 0xe5, 0x8a, 0xa8, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe5, 0x8a, 0xa8, 0xe4,
	0xbd, 0x9c, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x10, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16,
	0xea, 0xb5, 0x18, 0x12, 0xe8, 0xa2, 0xab, 0xe5, 0x8a, 0xa8, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x10, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x12, 0x50, 0x61, 0x73, 0x73,
	0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x1d, 0xea, 0xb5, 0x18, 0x19, 0xe8, 0xa2, 0xab, 0xe5, 0x8a, 0xa8,
	0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe5, 0x8f, 0x82, 0xe6,
	0x95, 0xb0, 0x31, 0x52, 0x12, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x12, 0x4d, 0x0a, 0x12, 0x50, 0x61, 0x73, 0x73, 0x69,
	0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x1d, 0xea, 0xb5, 0x18, 0x19, 0xe8, 0xa2, 0xab, 0xe5, 0x8a, 0xa8, 0xe6,
	0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe5, 0x8f, 0x82, 0xe6, 0x95,
	0xb0, 0x32, 0x52, 0x12, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x12, 0x4d, 0x0a, 0x12, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x33, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x1d, 0xea, 0xb5, 0x18, 0x19, 0xe8, 0xa2, 0xab, 0xe5, 0x8a, 0xa8, 0xe6, 0x8a,
	0x80, 0xe8, 0x83, 0xbd, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0,
	0x33, 0x52, 0x12, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x33, 0x12, 0x4d, 0x0a, 0x12, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x34, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x1d, 0xea, 0xb5, 0x18, 0x19, 0xe8, 0xa2, 0xab, 0xe5, 0x8a, 0xa8, 0xe6, 0x8a, 0x80,
	0xe8, 0x83, 0xbd, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x34,
	0x52, 0x12, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x34, 0x12, 0x4d, 0x0a, 0x12, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x35, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x1d, 0xea, 0xb5, 0x18, 0x19, 0xe8, 0xa2, 0xab, 0xe5, 0x8a, 0xa8, 0xe6, 0x8a, 0x80, 0xe8,
	0x83, 0xbd, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x35, 0x52,
	0x12, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x35, 0x12, 0x4d, 0x0a, 0x12, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x36, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x1d, 0xea, 0xb5, 0x18, 0x19, 0xe8, 0xa2, 0xab, 0xe5, 0x8a, 0xa8, 0xe6, 0x8a, 0x80, 0xe8, 0x83,
	0xbd, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x36, 0x52, 0x12,
	0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x36, 0x12, 0x4d, 0x0a, 0x12, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x37, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1d,
	0xea, 0xb5, 0x18, 0x19, 0xe8, 0xa2, 0xab, 0xe5, 0x8a, 0xa8, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x37, 0x52, 0x12, 0x50,
	0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x37, 0x12, 0x4e, 0x0a, 0x13, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c,
	0xea, 0xb5, 0x18, 0x18, 0xe8, 0xa2, 0xab, 0xe5, 0x8a, 0xa8, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd,
	0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe9, 0x80, 0xbb, 0xe8, 0xbe, 0x91, 0x52, 0x13, 0x50, 0x61,
	0x73, 0x73, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x6b, 0x0a, 0x0f, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x52, 0x65, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x1b, 0xea, 0xb5, 0x18, 0x12, 0xe8, 0xa2, 0xab, 0xe5, 0x8a, 0xa8, 0xe6, 0x8a, 0x80, 0xe8,
	0x83, 0xbd, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xda, 0xb5, 0x18, 0x01, 0x32, 0x52, 0x0f, 0x50,
	0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x6f, 0x6e, 0x12, 0x46,
	0x0a, 0x0f, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x69, 0x6e,
	0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe8, 0xa2, 0xab,
	0xe5, 0x8a, 0xa8, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe6, 0x9a, 0xb4, 0xe9, 0x9c, 0xb2, 0xe8,
	0xa7, 0x86, 0xe9, 0x87, 0x8e, 0x52, 0x0f, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x45, 0x78,
	0x70, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x11, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe4, 0xb8, 0x8d, 0xe9, 0x87, 0x8d, 0xe7, 0xbd, 0xae,
	0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x52, 0x11, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0c, 0x50, 0x61, 0x73,
	0x73, 0x69, 0x76, 0x65, 0x41, 0x66, 0x66, 0x69, 0x78, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xaf, 0x8d, 0xe7, 0xbc, 0x80, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf,
	0xb0, 0x52, 0x0c, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x41, 0x66, 0x66, 0x69, 0x78, 0x12,
	0x32, 0x0a, 0x0a, 0x42, 0x69, 0x6e, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0xe7, 0xbb, 0x91, 0xe5, 0xae, 0x9a, 0xe7,
	0x9a, 0xae, 0xe8, 0x82, 0xa4, 0x49, 0x44, 0x52, 0x0a, 0x42, 0x69, 0x6e, 0x64, 0x53, 0x6b, 0x69,
	0x6e, 0x49, 0x44, 0x12, 0x4e, 0x0a, 0x15, 0x54, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x18, 0xea, 0xb5, 0x18, 0x14, 0xe5, 0x90, 0x8c, 0xe9, 0xa2, 0x91, 0xe7, 0x8e,
	0x87, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe7, 0xbb, 0x84, 0x49, 0x44, 0x52, 0x15, 0x54, 0x6f,
	0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f,
	0x6f, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x42, 0x16, 0xea, 0xb5,
	0x18, 0x12, 0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba, 0xe5, 0x86, 0xb7, 0xe5, 0x8d, 0xb4, 0xe8, 0xbf,
	0x9b, 0xe5, 0xba, 0xa6, 0x52, 0x0f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6f,
	0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x3a, 0x11, 0x8a, 0x97, 0x22, 0x05, 0x43, 0x66, 0x67, 0x49, 0x44,
	0xf0, 0x97, 0x22, 0x01, 0xf8, 0x97, 0x22, 0x01, 0x22, 0xf0, 0x02, 0x0a, 0x19, 0x52, 0x65, 0x73,
	0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x69,
	0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x53, 0x0a, 0x15, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x4b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1d, 0xea, 0xb5, 0x18, 0x15, 0xe6, 0x80, 0xaa, 0xe7, 0x89,
	0xa9, 0xe8, 0xa2, 0xab, 0xe5, 0x8a, 0xa8, 0xe8, 0xa7, 0x84, 0xe5, 0x88, 0x99, 0x4b, 0x45, 0x59,
	0xc8, 0xc1, 0x18, 0x01, 0x52, 0x15, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x70, 0x0a, 0x15, 0x52,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76,
	0x65, 0x49, 0x44, 0x31, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x52, 0x65, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x49, 0x6e, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x18, 0xea, 0xb5,
	0x18, 0x0e, 0xe6, 0x80, 0xaa, 0xe7, 0x89, 0xa9, 0xe8, 0xa2, 0xab, 0xe5, 0x8a, 0xa8, 0x49, 0x44,
	0xda, 0xb5, 0x18, 0x02, 0x32, 0x30, 0x52, 0x15, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x49, 0x44, 0x31, 0x12, 0x71, 0x0a,
	0x15, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x61, 0x73, 0x73,
	0x69, 0x76, 0x65, 0x49, 0x44, 0x32, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x52,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x49, 0x6e, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x19,
	0xea, 0xb5, 0x18, 0x0f, 0xe6, 0x80, 0xaa, 0xe7, 0x89, 0xa9, 0xe8, 0xa2, 0xab, 0xe5, 0x8a, 0xa8,
	0x32, 0x49, 0x44, 0xda, 0xb5, 0x18, 0x02, 0x32, 0x30, 0x52, 0x15, 0x52, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x49, 0x44, 0x32,
	0x3a, 0x19, 0x8a, 0x97, 0x22, 0x15, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x4b, 0x65, 0x79, 0x22, 0xa4, 0x0c, 0x0a, 0x16,
	0x52, 0x65, 0x73, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x43,
	0x66, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x05, 0x43, 0x66, 0x67, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x0e, 0xe6, 0x95, 0x88, 0xe6, 0x9e,
	0x9c, 0xe7, 0xbb, 0x84, 0xe5, 0x90, 0x88, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x05, 0x43,
	0x66, 0x67, 0x49, 0x44, 0x12, 0x4b, 0x0a, 0x11, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e,
	0x74, 0x42, 0x75, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x1d, 0xea, 0xb5, 0x18, 0x19, 0xe8, 0xb7, 0xa8, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe6, 0xb0,
	0xb8, 0xe4, 0xb9, 0x85, 0x62, 0x75, 0x66, 0x66, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x11,
	0x50, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x66, 0x66, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x32, 0x0a, 0x0b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xa7, 0xa6, 0xe5,
	0x8f, 0x91, 0xe5, 0x87, 0xa0, 0xe7, 0x8e, 0x87, 0x52, 0x0b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0xea, 0xb5, 0x18, 0x0b, 0xe5, 0x8a, 0x9f, 0xe8,
	0x83, 0xbd, 0xe7, 0xbb, 0x84, 0x49, 0x44, 0x52, 0x07, 0x43, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44,
	0x12, 0x4a, 0x0a, 0x09, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x2c, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0xb8, 0x85, 0xe9, 0x99, 0xa4, 0xe8,
	0xa7, 0x84, 0xe5, 0x88, 0x99, 0xf2, 0xb5, 0x18, 0x18, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49,
	0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x52, 0x55, 0x4c,
	0x45, 0x52, 0x09, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x50, 0x0a, 0x0b,
	0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x2e, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x8f, 0xa0, 0xe5, 0x8a, 0xa0, 0xe8, 0xa7, 0x84,
	0xe5, 0x88, 0x99, 0xf2, 0xb5, 0x18, 0x1a, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c,
	0x46, 0x55, 0x4e, 0x43, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x41, 0x59, 0x5f, 0x52, 0x55, 0x4c,
	0x45, 0x52, 0x0b, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x36,
	0x0a, 0x0a, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4d, 0x61, 0x78, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x8f, 0xa0, 0xe5, 0x8a, 0xa0, 0xe6, 0xac,
	0xa1, 0xe6, 0x95, 0xb0, 0xe4, 0xb8, 0x8a, 0xe9, 0x99, 0x90, 0x52, 0x0a, 0x4f, 0x76, 0x65, 0x72,
	0x6c, 0x61, 0x79, 0x4d, 0x61, 0x78, 0x12, 0x44, 0x0a, 0x0a, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x42, 0x24, 0xea, 0xb5, 0x18, 0x0c,
	0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x10,
	0x42, 0x55, 0x46, 0x46, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x52, 0x0a, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x11,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x8e, 0xa7,
	0xe5, 0x88, 0xb6, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x08,
	0x53, 0x68, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x21,
	0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0xf2, 0xb5, 0x18, 0x0d, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x52, 0x08, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x50,
	0x72, 0x65, 0x66, 0x61, 0x62, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x0c, 0xe5, 0x8a, 0xa8, 0xe4, 0xbd, 0x9c, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x06, 0x50,
	0x72, 0x65, 0x66, 0x61, 0x62, 0x12, 0x2c, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x8c, 0x81,
	0xe7, 0xbb, 0xad, 0xe6, 0x97, 0xb6, 0xe9, 0x95, 0xbf, 0x52, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe5, 0xbd, 0xb1, 0xe5, 0x93, 0x8d, 0xe6,
	0x8c, 0x81, 0xe7, 0xbb, 0xad, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe5, 0xb1, 0x9e, 0xe6, 0x80,
	0xa7, 0x52, 0x16, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x7e, 0x0a, 0x1a, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x52, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x42, 0x3e, 0xea,
	0xb5, 0x18, 0x3a, 0xe6, 0xaf, 0x8f, 0xe4, 0xb8, 0x80, 0xe7, 0x82, 0xb9, 0xe9, 0xa2, 0x9d, 0xe5,
	0xa4, 0x96, 0xe5, 0xb1, 0x9e, 0xe6, 0x80, 0xa7, 0xe5, 0x80, 0xbc, 0xe5, 0xa2, 0x9e, 0xe5, 0x8a,
	0xa0, 0xe6, 0x8c, 0x81, 0xe7, 0xbb, 0xad, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe4, 0xb8, 0x87,
	0xe5, 0x88, 0x86, 0xe4, 0xb9, 0x8b, 0x4e, 0xe6, 0xaf, 0xab, 0xe7, 0xa7, 0x92, 0x52, 0x1a, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x0d, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54,
	0x5f, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x42, 0x0f, 0xea, 0xb5, 0x18, 0x06,
	0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0xda, 0xb5, 0x18, 0x01, 0x34, 0x52, 0x0d, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x48, 0x0a, 0x13, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0xb3, 0x95,
	0xe7, 0x90, 0x83, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0xe6, 0xa7, 0xbd, 0xe4, 0xbd, 0x8d, 0x52,
	0x13, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x53, 0x6c, 0x6f, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x12, 0x74, 0x61, 0x6b, 0x65, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe5, 0x85, 0xa8, 0xe5, 0xb1, 0x80, 0xe7, 0x94, 0x9f, 0xe6,
	0x95, 0x88, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0xe4, 0xb8, 0x8a, 0xe9, 0x99, 0x90, 0x52, 0x12,
	0x74, 0x61, 0x6b, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d,
	0x61, 0x78, 0x12, 0x64, 0x0a, 0x11, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x53, 0x75, 0x62, 0x54,
	0x79, 0x70, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x42, 0x36, 0xea,
	0xb5, 0x18, 0x15, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0xe5, 0xad, 0x90, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0xe6, 0x8e, 0xa9, 0xe7, 0xa0, 0x81, 0xf2, 0xb5, 0x18, 0x19, 0x42, 0x55, 0x46, 0x46,
	0x5f, 0x53, 0x55, 0x42, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x52, 0x11, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x53, 0x75, 0x62,
	0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x55, 0x0a, 0x12, 0x49, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x25, 0xea, 0xb5, 0x18, 0x21, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c,
	0xe5, 0xad, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe5, 0x85, 0x8d, 0xe7, 0x96, 0xab, 0xe4,
	0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0xe6, 0x8e, 0xa9, 0xe7, 0xa0, 0x81, 0x52, 0x12, 0x49, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12,
	0x53, 0x0a, 0x0c, 0x53, 0x68, 0x6f, 0x77, 0x42, 0x75, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x53, 0x68, 0x6f, 0x77, 0x42, 0x75, 0x66, 0x66, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0x55, 0x49,
	0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba, 0x52, 0x0c, 0x53, 0x68, 0x6f, 0x77, 0x42, 0x75, 0x66, 0x66,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x59, 0x0a, 0x17, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4e,
	0x6f, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1f, 0xea, 0xb5, 0x18, 0x1b, 0xe5, 0x8f, 0xa0, 0xe5, 0x8a,
	0xa0, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0xe4, 0xb8, 0x8d, 0xe5, 0x8c, 0xba, 0xe5, 0x88, 0x86,
	0xe6, 0x9d, 0xa5, 0xe6, 0xba, 0x90, 0x52, 0x17, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4e,
	0x6f, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a,
	0x11, 0x8a, 0x97, 0x22, 0x05, 0x43, 0x66, 0x67, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0xf8, 0x97,
	0x22, 0x01, 0x22, 0xd4, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x42, 0x75, 0x66, 0x66, 0x52, 0x6d,
	0x76, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x05, 0x43, 0x66, 0x67, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x0e, 0xe5, 0x89, 0x8a, 0xe5, 0x87, 0x8f,
	0xe8, 0xa7, 0x84, 0xe5, 0x88, 0x99, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x05, 0x43, 0x66,
	0x67, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x08, 0x52, 0x6d, 0x76, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe6, 0x97, 0xb6, 0xe9, 0x97,
	0xb4, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe5, 0x89, 0x8a, 0xe5, 0x87, 0x8f, 0xe5, 0xb1, 0x82,
	0xe6, 0x95, 0xb0, 0x52, 0x08, 0x52, 0x6d, 0x76, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x4f, 0x0a,
	0x13, 0x4e, 0x65, 0x77, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1d, 0xea, 0xb5, 0x18, 0x19,
	0xe5, 0x90, 0x8e, 0xe7, 0xbb, 0xad, 0x42, 0x55, 0x46, 0x46, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0xe4, 0xb8, 0x87, 0xe5, 0x88, 0x86, 0xe6, 0xaf, 0x94, 0x52, 0x13, 0x4e, 0x65, 0x77, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x3a, 0x09,
	0x8a, 0x97, 0x22, 0x05, 0x43, 0x66, 0x67, 0x49, 0x44, 0x22, 0xa2, 0x01, 0x0a, 0x0d, 0x52, 0x65,
	0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4b, 0x0a, 0x08, 0x43,
	0x6f, 0x6e, 0x66, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2f, 0xea,
	0xb5, 0x18, 0x0f, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe9, 0xa1, 0xb9, 0xe5, 0x90, 0x8d, 0xe7,
	0xa7, 0xb0, 0xc8, 0xc1, 0x18, 0x01, 0xf2, 0xb5, 0x18, 0x14, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x4c,
	0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x08,
	0x43, 0x6f, 0x6e, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x66,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x0c, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe9, 0xa1, 0xb9, 0xe5, 0x80, 0xbc, 0x52, 0x09, 0x43,
	0x6f, 0x6e, 0x66, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x14, 0x8a, 0x97, 0x22, 0x08, 0x43, 0x6f,
	0x6e, 0x66, 0x54, 0x79, 0x70, 0x65, 0xf0, 0x97, 0x22, 0x01, 0xf8, 0x97, 0x22, 0x01, 0x22, 0xa3,
	0x01, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x54, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x0b, 0x54, 0x78, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1d,
	0xea, 0xb5, 0x18, 0x15, 0xe6, 0x96, 0x87, 0xe6, 0x9c, 0xac, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae,
	0xe9, 0xa1, 0xb9, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x0b, 0x54,
	0x78, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x54, 0x65,
	0x78, 0x74, 0x56, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xea, 0xb5, 0x18,
	0x15, 0xe6, 0x96, 0x87, 0xe6, 0x9c, 0xac, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe9, 0xa1, 0xb9,
	0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0x52, 0x07, 0x54, 0x65, 0x78, 0x74, 0x56, 0x61, 0x6c, 0x3a,
	0x13, 0x8a, 0x97, 0x22, 0x0b, 0x54, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x54, 0x79, 0x70, 0x65,
	0xf8, 0x97, 0x22, 0x01, 0x22, 0x4c, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x49, 0x74,
	0x65, 0x6d, 0x53, 0x72, 0x63, 0x5f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0x52, 0x02,
	0x49, 0x44, 0x22, 0x75, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x46, 0x75, 0x6e, 0x63,
	0x45, 0x66, 0x74, 0x5f, 0x4f, 0x62, 0x6a, 0x12, 0x18, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0xea, 0xb5, 0x18, 0x00, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x27, 0x0a, 0x07, 0x56, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe5, 0x80, 0xbc, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0x52, 0x07, 0x56, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xea, 0xb5, 0x18, 0x03, 0xe5,
	0x80, 0xbc, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8e, 0x0e, 0x0a, 0x0d, 0x52, 0x65,
	0x73, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0xc8,
	0xc1, 0x18, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x90, 0x8d, 0xe7, 0xa7,
	0xb0, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf,
	0xb0, 0x52, 0x04, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x08, 0xea, 0xb5, 0x18, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x52,
	0x04, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x49,
	0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x0a, 0xe9,
	0x80, 0x9a, 0xe7, 0x94, 0xa8, 0x69, 0x63, 0x6f, 0x6e, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7,
	0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe8, 0x89, 0xb2, 0xe7,
	0xb3, 0xbb, 0x52, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x06, 0x49, 0x73, 0x53,
	0x68, 0x6f, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6,
	0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe6, 0x98, 0xbe, 0xe7, 0xa4,
	0xba, 0x52, 0x06, 0x49, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x24, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0xac, 0xa6,
	0xe6, 0x96, 0x87, 0xe7, 0xb1, 0xbb, 0xe5, 0x88, 0xab, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2e, 0x0a, 0x09, 0x4f, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xa0, 0x86, 0xe5, 0x8f, 0xa0, 0xe4, 0xb8,
	0x8a, 0xe9, 0x99, 0x90, 0x52, 0x09, 0x4f, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x30, 0x0a, 0x07, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x75, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81, 0xe8, 0xb4, 0xad, 0xe4,
	0xb9, 0xb0, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0x52, 0x07, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x75,
	0x79, 0x12, 0x36, 0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x42, 0x75, 0x79, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe7, 0x82, 0xb9, 0xe5, 0x88,
	0xb8, 0xe8, 0xb4, 0xad, 0xe4, 0xb9, 0xb0, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0x52, 0x0a, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x42, 0x75, 0x79, 0x12, 0x36, 0x0a, 0x0a, 0x50, 0x56, 0x50,
	0x43, 0x6f, 0x69, 0x6e, 0x42, 0x75, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea,
	0xb5, 0x18, 0x12, 0x50, 0x56, 0x50, 0xe5, 0xb8, 0x81, 0xe8, 0xb4, 0xad, 0xe4, 0xb9, 0xb0, 0xe4,
	0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0x52, 0x0a, 0x50, 0x56, 0x50, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x75,
	0x79, 0x12, 0x41, 0x0a, 0x0e, 0x42, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x69, 0x6e,
	0x42, 0x75, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe8,
	0xbf, 0x9c, 0xe5, 0xbe, 0x81, 0xe5, 0xb8, 0x81, 0xe8, 0xb4, 0xad, 0xe4, 0xb9, 0xb0, 0xe4, 0xbb,
	0xb7, 0xe6, 0xa0, 0xbc, 0x52, 0x0e, 0x42, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x69,
	0x6e, 0x42, 0x75, 0x79, 0x12, 0x3d, 0x0a, 0x0c, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x43, 0x6f, 0x69,
	0x6e, 0x42, 0x75, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15,
	0xe7, 0xab, 0x9e, 0xe6, 0x8a, 0x80, 0xe5, 0xb8, 0x81, 0xe8, 0xb4, 0xad, 0xe4, 0xb9, 0xb0, 0xe4,
	0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0x52, 0x0c, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x43, 0x6f, 0x69, 0x6e,
	0x42, 0x75, 0x79, 0x12, 0x3a, 0x0a, 0x0c, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x69, 0x6e,
	0x42, 0x75, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5,
	0xb8, 0xae, 0xe8, 0xb4, 0xa1, 0xe8, 0xb4, 0xad, 0xe4, 0xb9, 0xb0, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0,
	0xbc, 0x52, 0x0c, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x75, 0x79, 0x12,
	0x36, 0x0a, 0x0a, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x42, 0x75, 0x79, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe9, 0x92, 0xbb, 0xe7, 0x9f, 0xb3, 0xe8,
	0xb4, 0xad, 0xe4, 0xb9, 0xb0, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0x52, 0x0a, 0x44, 0x69, 0x61,
	0x6d, 0x6f, 0x6e, 0x64, 0x42, 0x75, 0x79, 0x12, 0x3e, 0x0a, 0x0b, 0x49, 0x73, 0x42, 0x75, 0x79,
	0x4d, 0x69, 0x78, 0x50, 0x61, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5,
	0x18, 0x18, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0xe6, 0xb7,
	0xb7, 0xe5, 0x90, 0x88, 0xe6, 0x94, 0xaf, 0xe4, 0xbb, 0x98, 0x52, 0x0b, 0x49, 0x73, 0x42, 0x75,
	0x79, 0x4d, 0x69, 0x78, 0x50, 0x61, 0x79, 0x12, 0x2b, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x62, 0x61,
	0x74, 0x45, 0x66, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09,
	0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97, 0xe5, 0x8a, 0x9b, 0x52, 0x09, 0x43, 0x6f, 0x6d, 0x62, 0x61,
	0x74, 0x45, 0x66, 0x74, 0x12, 0x30, 0x0a, 0x0a, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x46, 0x61, 0x63,
	0x4c, 0x76, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xb7,
	0xa5, 0xe5, 0x9d, 0x8a, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0x52, 0x0a, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x46, 0x61, 0x63, 0x4c, 0x76, 0x12, 0x44, 0x0a, 0x11, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x48,
	0x69, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x8e, 0x86, 0xe5, 0x8f, 0xb2, 0xe5, 0xb8, 0xae,
	0xe8, 0xb4, 0xa1, 0xe8, 0xa6, 0x81, 0xe6, 0xb1, 0x82, 0x52, 0x11, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x48, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x38, 0x0a, 0x0e,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xb8, 0xae, 0xe8, 0xb4, 0xa1,
	0xe6, 0xb6, 0x88, 0xe8, 0x80, 0x97, 0x52, 0x0e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x32, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x0c, 0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0b, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x4c, 0x76,
	0x6c, 0x55, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea,
	0xb5, 0x18, 0x18, 0xe5, 0x8d, 0x87, 0xe7, 0xba, 0xa7, 0xe6, 0x89, 0x80, 0xe9, 0x9c, 0x80, 0xe9,
	0x93, 0xad, 0xe6, 0x96, 0x87, 0xe7, 0xa2, 0x8e, 0xe7, 0x89, 0x87, 0x52, 0x09, 0x4c, 0x76, 0x6c,
	0x55, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x43,
	0x6f, 0x69, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe5,
	0x88, 0x86, 0xe8, 0xa7, 0xa3, 0xe5, 0x8f, 0xaf, 0xe5, 0xbe, 0x97, 0xe9, 0x93, 0xad, 0xe6, 0x96,
	0x87, 0xe7, 0xa2, 0x8e, 0xe7, 0x89, 0x87, 0x52, 0x09, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x43, 0x6f,
	0x69, 0x6e, 0x12, 0x3a, 0x0a, 0x0c, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x49, 0x44, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0xaf,
	0xb9, 0xe5, 0xba, 0x94, 0x31, 0xe7, 0xba, 0xa7, 0xe9, 0x93, 0xad, 0xe6, 0x96, 0x87, 0x49, 0x44,
	0x52, 0x0c, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x3a,
	0x0a, 0x09, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe9, 0x87, 0x8d, 0xe7, 0xbd, 0xae, 0xe5, 0x8f, 0xaf,
	0xe5, 0xbe, 0x97, 0xe9, 0x93, 0xad, 0xe6, 0x96, 0x87, 0xe7, 0xa2, 0x8e, 0xe7, 0x89, 0x87, 0x52,
	0x09, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x48, 0x0a, 0x0d, 0x4e, 0x65,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x73, 0x77, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x22, 0xea, 0xb5, 0x18, 0x1e, 0xe9, 0x87, 0x8d, 0xe7, 0xbd, 0xae, 0xe6, 0x98, 0xaf,
	0xe5, 0x90, 0xa6, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe4, 0xba, 0x8c, 0xe7, 0xba, 0xa7, 0xe5,
	0xaf, 0x86, 0xe7, 0xa0, 0x81, 0x52, 0x0d, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x50, 0x73, 0x77, 0x64, 0x12, 0x36, 0x0a, 0x0d, 0x49, 0x6e, 0x69, 0x74, 0x4f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x0c, 0xe4, 0xb8, 0x8a, 0xe6, 0x9e, 0xb6, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0d, 0x49,
	0x6e, 0x69, 0x74, 0x4f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x12, 0x30, 0x0a, 0x07,
	0x49, 0x6e, 0x69, 0x74, 0x43, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea,
	0xb5, 0x18, 0x12, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe9, 0x93, 0xad, 0xe6, 0x96, 0x87, 0xe6,
	0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x07, 0x49, 0x6e, 0x69, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x53,
	0x0a, 0x0b, 0x46, 0x75, 0x6e, 0x63, 0x45, 0x66, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x1f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65,
	0x73, 0x44, 0x54, 0x5f, 0x46, 0x75, 0x6e, 0x63, 0x45, 0x66, 0x74, 0x5f, 0x4f, 0x62, 0x6a, 0x42,
	0x15, 0xea, 0xb5, 0x18, 0x0c, 0xe9, 0x93, 0xad, 0xe6, 0x96, 0x87, 0xe5, 0xb1, 0x9e, 0xe6, 0x80,
	0xa7, 0xda, 0xb5, 0x18, 0x01, 0x33, 0x52, 0x0b, 0x46, 0x75, 0x6e, 0x63, 0x45, 0x66, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x0a, 0x50, 0x76, 0x65, 0x45, 0x66, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x46, 0x75, 0x6e, 0x63, 0x45, 0x66, 0x74, 0x5f,
	0x4f, 0x62, 0x6a, 0x42, 0x18, 0xea, 0xb5, 0x18, 0x0f, 0x50, 0x56, 0x45, 0xe9, 0x93, 0xad, 0xe6,
	0x96, 0x87, 0xe5, 0xb1, 0x9e, 0xe6, 0x80, 0xa7, 0xda, 0xb5, 0x18, 0x01, 0x38, 0x52, 0x0a, 0x50,
	0x76, 0x65, 0x45, 0x66, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x07, 0x53, 0x72, 0x63,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x52, 0x65, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x53,
	0x72, 0x63, 0x5f, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x9d, 0xa5,
	0xe6, 0xba, 0x90, 0xda, 0xb5, 0x18, 0x02, 0x31, 0x30, 0x52, 0x07, 0x53, 0x72, 0x63, 0x49, 0x6e,
	0x66, 0x6f, 0x3a, 0x06, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0x22, 0xda, 0x01, 0x0a, 0x13, 0x52,
	0x65, 0x73, 0x44, 0x54, 0x5f, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2a, 0x0a, 0x09, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x05, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x03, 0xe9, 0x94, 0xae, 0xda, 0xb5,
	0x18, 0x01, 0x34, 0x52, 0x09, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x3e,
	0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x09, 0xe6, 0xaf,
	0x94, 0xe8, 0xbe, 0x83, 0xe7, 0xac, 0xa6, 0xda, 0xb5, 0x18, 0x01, 0x32, 0x52, 0x10, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x37,
	0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x05, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x95, 0xb0, 0xe5, 0x80, 0xbc, 0xe9,
	0x99, 0x90, 0xe5, 0x88, 0xb6, 0xda, 0xb5, 0x18, 0x01, 0x32, 0x52, 0x0b, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xc2, 0x02, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x45,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x2e, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x16, 0xea, 0xb5, 0x18, 0x0e, 0xe6, 0x98, 0x9f, 0xe7, 0xba, 0xa7, 0xe8, 0xaf, 0x84, 0xe4, 0xbb,
	0xb7, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x06, 0x43, 0x6f, 0x6e, 0x64, 0x49, 0x44, 0x12,
	0x32, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x64, 0x44, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x98, 0x9f, 0xe7, 0xba, 0xa7, 0xe8, 0xaf, 0x84,
	0xe4, 0xbb, 0xb7, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x08, 0x43, 0x6f, 0x6e, 0x64, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x2e, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x9d, 0xa1, 0xe4,
	0xbb, 0xb6, 0xe5, 0x85, 0xb3, 0xe7, 0xb3, 0xbb, 0x52, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x48, 0x69, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe6, 0x98, 0xaf,
	0xe5, 0x90, 0xa6, 0xe9, 0x9a, 0x90, 0xe8, 0x97, 0x8f, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xe6,
	0x8f, 0x90, 0xe7, 0xa4, 0xba, 0x52, 0x0a, 0x48, 0x69, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x4d, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x0f, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xda,
	0xb5, 0x18, 0x01, 0x33, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x3a, 0x0a, 0x8a, 0x97, 0x22, 0x06, 0x43, 0x6f, 0x6e, 0x64, 0x49, 0x44, 0x22, 0x76, 0x0a, 0x14,
	0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x09, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x69, 0x66,
	0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe7, 0xad, 0x89,
	0xe7, 0xba, 0xa7, 0xe5, 0xb7, 0xae, 0xe5, 0xb7, 0xae, 0xe8, 0xb7, 0x9d, 0x52, 0x09, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x12, 0x2b, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x52, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09,
	0xe4, 0xb8, 0x87, 0xe5, 0x88, 0x86, 0xe6, 0xaf, 0x94, 0x52, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x52, 0x61, 0x74, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x50,
	0x69, 0x63, 0x6b, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x08, 0x50,
	0x69, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea,
	0xb5, 0x18, 0x06, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0x52, 0x08, 0x50, 0x69, 0x63, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0d, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xa1, 0xa5, 0xe5, 0x85, 0x85, 0xe5, 0x8f,
	0x82, 0xe6, 0x95, 0xb0, 0xda, 0xb5, 0x18, 0x01, 0x34, 0x52, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x42, 0x0a, 0x0d, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x77, 0x61, 0x70, 0x48, 0x65, 0x72,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe6, 0x98, 0xaf,
	0xe5, 0x90, 0xa6, 0xe5, 0x85, 0x81, 0xe8, 0xae, 0xb8, 0xe4, 0xba, 0xa4, 0xe6, 0x8d, 0xa2, 0xe8,
	0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0x52, 0x0d, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x77, 0x61, 0x70,
	0x48, 0x65, 0x72, 0x6f, 0x22, 0x7b, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x52, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x43, 0x75, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18,
	0x02, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x3c, 0x0a, 0x10, 0x45,
	0x78, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x72, 0x65, 0x66, 0x61, 0x62, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0x50, 0x72, 0x65, 0x66, 0x61,
	0x62, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x10, 0x45, 0x78, 0x6c, 0x75, 0x64, 0x65, 0x50,
	0x72, 0x65, 0x66, 0x61, 0x62, 0x50, 0x61, 0x74, 0x68, 0x3a, 0x06, 0x8a, 0x97, 0x22, 0x02, 0x49,
	0x44, 0x22, 0x6c, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x08, 0x52, 0x75, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2d, 0x0a, 0x09, 0x52, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0d, 0x42, 0x0f, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xda,
	0xb5, 0x18, 0x01, 0x33, 0x52, 0x09, 0x52, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x22,
	0x4e, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x54, 0x65, 0x78, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19,
	0x0a, 0x03, 0x54, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xea, 0xb5, 0x18,
	0x03, 0x54, 0x41, 0x47, 0x52, 0x03, 0x54, 0x61, 0x67, 0x12, 0x24, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06,
	0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22,
	0xa4, 0x23, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x47, 0x72, 0x61, 0x64, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x12, 0x26, 0x0a, 0x05, 0x47, 0x72, 0x61, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xa1, 0xa8, 0xe7, 0x8e, 0xb0, 0xe6,
	0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0x52, 0x05, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x0a,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x47, 0x72, 0x61, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe9, 0x80, 0xbb, 0xe8, 0xbe, 0x91, 0xe6, 0xae, 0xb5, 0xe4,
	0xbd, 0x8d, 0x52, 0x0a, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x28,
	0x0a, 0x06, 0x49, 0x73, 0x55, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe7, 0x94, 0x9f, 0xe6, 0x95, 0x88,
	0x52, 0x06, 0x49, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x09, 0x47, 0x72, 0x61, 0x64,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xb5, 0x18,
	0x06, 0xe7, 0xba, 0xa7, 0xe5, 0x88, 0xab, 0x52, 0x09, 0x47, 0x72, 0x61, 0x64, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x38, 0x0a, 0x0e, 0x47, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x44, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c,
	0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xe7, 0xba, 0xa7, 0xe5, 0x88, 0xab, 0x52, 0x0e, 0x47, 0x72,
	0x61, 0x64, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x12, 0x2d, 0x0a, 0x0a,
	0x47, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe5, 0xb0, 0x8f, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0x52,
	0x0a, 0x47, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x48, 0x0a, 0x13, 0x47,
	0x72, 0x61, 0x64, 0x65, 0x55, 0x70, 0x4e, 0x65, 0x65, 0x64, 0x46, 0x69, 0x67, 0x68, 0x74, 0x43,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x99,
	0x8b, 0xe7, 0xba, 0xa7, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe5, 0x9c, 0xba, 0xe6, 0xac, 0xa1,
	0x52, 0x13, 0x47, 0x72, 0x61, 0x64, 0x65, 0x55, 0x70, 0x4e, 0x65, 0x65, 0x64, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x11, 0x47, 0x72, 0x61, 0x64, 0x65, 0x55, 0x70,
	0x4e, 0x65, 0x65, 0x64, 0x57, 0x69, 0x6e, 0x43, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe6, 0x99, 0x8b, 0xe7, 0xba, 0xa7, 0xe9, 0x9c, 0x80, 0xe8,
	0xa6, 0x81, 0xe8, 0x83, 0x9c, 0xe5, 0x88, 0xa9, 0xe5, 0x9c, 0xba, 0xe6, 0xac, 0xa1, 0x52, 0x11,
	0x47, 0x72, 0x61, 0x64, 0x65, 0x55, 0x70, 0x4e, 0x65, 0x65, 0x64, 0x57, 0x69, 0x6e, 0x43, 0x6e,
	0x74, 0x12, 0x42, 0x0a, 0x10, 0x47, 0x72, 0x61, 0x64, 0x65, 0x55, 0x70, 0x4e, 0x65, 0x65, 0x64,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18,
	0x12, 0xe6, 0x99, 0x8b, 0xe7, 0xba, 0xa7, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe8, 0x83, 0x9c,
	0xe7, 0x82, 0xb9, 0x52, 0x10, 0x47, 0x72, 0x61, 0x64, 0x65, 0x55, 0x70, 0x4e, 0x65, 0x65, 0x64,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x44, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x47, 0x72, 0x61, 0x64, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe4, 0xbf, 0x9d, 0xe7, 0xba, 0xa7, 0xe9, 0x9c, 0x80, 0xe8,
	0xa6, 0x81, 0xe7, 0xa7, 0xaf, 0xe5, 0x88, 0x86, 0x52, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x36, 0x0a, 0x0d, 0x45,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xa1, 0xa5, 0xe5, 0x81, 0xbf, 0xe7, 0xa7,
	0xaf, 0xe5, 0x88, 0x86, 0x52, 0x0d, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x53, 0x0a, 0x17, 0x4c, 0x6f, 0x73, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x78, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe8, 0xb4, 0xa5, 0xe6, 0x96, 0xb9,
	0xe8, 0xa1, 0xa8, 0xe7, 0x8e, 0xb0, 0xe5, 0x88, 0x86, 0xe4, 0xb8, 0x8a, 0xe9, 0x99, 0x90, 0x52,
	0x17, 0x4c, 0x6f, 0x73, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x4d, 0x61, 0x78, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x42, 0x0a, 0x10, 0x47, 0x72, 0x61, 0x64,
	0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xe5, 0x9b,
	0xbe, 0xe7, 0x89, 0x87, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x10, 0x47, 0x72, 0x61, 0x64,
	0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x64, 0x0a, 0x1b,
	0x47, 0x72, 0x61, 0x64, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x53, 0x75, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x22, 0xea, 0xb5, 0x18, 0x1e, 0xe8, 0xb6, 0x85, 0xe5, 0x87, 0xa1, 0xe5, 0xa4, 0xa7,
	0xe5, 0xb8, 0x88, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xe5, 0x9b, 0xbe, 0xe7, 0x89, 0x87, 0xe8,
	0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x1b, 0x47, 0x72, 0x61, 0x64, 0x65, 0x50, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x50, 0x61, 0x74, 0x68, 0x53, 0x75, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x4a, 0x0a, 0x11, 0x47, 0x72, 0x61, 0x64, 0x65, 0x53, 0x6d, 0x61, 0x6c, 0x6c,
	0x50, 0x69, 0x63, 0x50, 0x61, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xea,
	0xb5, 0x18, 0x18, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xe5, 0xba, 0x95, 0xe9, 0x83, 0xa8, 0xe5,
	0x9b, 0xbe, 0xe7, 0x89, 0x87, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x11, 0x47, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x50, 0x69, 0x63, 0x50, 0x61, 0x74, 0x68, 0x12, 0x6c,
	0x0a, 0x1c, 0x47, 0x72, 0x61, 0x64, 0x65, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x50, 0x69, 0x63, 0x50,
	0x61, 0x74, 0x68, 0x53, 0x75, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xea, 0xb5, 0x18, 0x24, 0xe8, 0xb6, 0x85, 0xe5, 0x87, 0xa1,
	0xe5, 0xa4, 0xa7, 0xe5, 0xb8, 0x88, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xe5, 0xba, 0x95, 0xe9,
	0x83, 0xa8, 0xe5, 0x9b, 0xbe, 0xe7, 0x89, 0x87, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x1c,
	0x47, 0x72, 0x61, 0x64, 0x65, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x50, 0x69, 0x63, 0x50, 0x61, 0x74,
	0x68, 0x53, 0x75, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x11,
	0x47, 0x72, 0x61, 0x64, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x50, 0x69, 0x63, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe6, 0xae, 0xb5,
	0xe4, 0xbd, 0x8d, 0xe8, 0xbe, 0xb9, 0xe6, 0xa1, 0x86, 0xe5, 0x9b, 0xbe, 0xe7, 0x89, 0x87, 0xe8,
	0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x11, 0x47, 0x72, 0x61, 0x64, 0x65, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x50, 0x69, 0x63, 0x50, 0x61, 0x74, 0x68, 0x12, 0x6c, 0x0a, 0x1c, 0x47, 0x72, 0x61, 0x64,
	0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x50, 0x69, 0x63, 0x50, 0x61, 0x74, 0x68, 0x53, 0x75, 0x70,
	0x65, 0x72, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28,
	0xea, 0xb5, 0x18, 0x24, 0xe8, 0xb6, 0x85, 0xe5, 0x87, 0xa1, 0xe5, 0xa4, 0xa7, 0xe5, 0xb8, 0x88,
	0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xe8, 0xbe, 0xb9, 0xe6, 0xa1, 0x86, 0xe5, 0x9b, 0xbe, 0xe7,
	0x89, 0x87, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x1c, 0x47, 0x72, 0x61, 0x64, 0x65, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x50, 0x69, 0x63, 0x50, 0x61, 0x74, 0x68, 0x53, 0x75, 0x70, 0x65, 0x72,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0f, 0x47, 0x72, 0x61, 0x64, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x42, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xe7, 0x89, 0xb9, 0xe6, 0x95,
	0x88, 0xe8, 0x83, 0x8c, 0xe6, 0x99, 0xaf, 0x52, 0x0f, 0x47, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x42, 0x67, 0x12, 0x62, 0x0a, 0x1a, 0x47, 0x72, 0x61, 0x64,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x42, 0x67, 0x53, 0x75, 0x70, 0x65, 0x72,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xea, 0xb5,
	0x18, 0x1e, 0xe8, 0xb6, 0x85, 0xe5, 0x87, 0xa1, 0xe5, 0xa4, 0xa7, 0xe5, 0xb8, 0x88, 0xe6, 0xae,
	0xb5, 0xe4, 0xbd, 0x8d, 0xe7, 0x89, 0xb9, 0xe6, 0x95, 0x88, 0xe8, 0x83, 0x8c, 0xe6, 0x99, 0xaf,
	0x52, 0x1a, 0x47, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x42,
	0x67, 0x53, 0x75, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0e,
	0x54, 0x52, 0x61, 0x6e, 0x6b, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x4d, 0x4d, 0x52, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe6, 0x8e, 0x92, 0xe4, 0xbd, 0x8d,
	0xe8, 0xb5, 0x9b, 0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90, 0x4d, 0x4d, 0x52, 0xe5, 0x80, 0xbc, 0x52,
	0x0e, 0x54, 0x52, 0x61, 0x6e, 0x6b, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x4d, 0x4d, 0x52, 0x12,
	0x45, 0x0a, 0x10, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe6,
	0x88, 0x98, 0xe9, 0x98, 0x9f, 0xe7, 0xad, 0xbe, 0xe5, 0x88, 0xb0, 0xe6, 0xb4, 0xbb, 0xe8, 0xb7,
	0x83, 0xe7, 0x82, 0xb9, 0x52, 0x10, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x49,
	0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x18, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4d, 0x4d, 0x52, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe7, 0xbb,
	0x84, 0xe9, 0x98, 0x9f, 0xe5, 0x8c, 0xb9, 0xe9, 0x85, 0x8d, 0x4d, 0x4d, 0x52, 0xe5, 0x8a, 0xa0,
	0xe6, 0x88, 0x90, 0xe5, 0x80, 0xbc, 0x52, 0x18, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4d, 0x4d, 0x52, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x30, 0x0a, 0x07, 0x42, 0x61, 0x73, 0x65, 0x4d, 0x4d, 0x52, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xe5, 0x9f, 0xba,
	0xe7, 0xa1, 0x80, 0x4d, 0x4d, 0x52, 0xe5, 0x80, 0xbc, 0x52, 0x07, 0x42, 0x61, 0x73, 0x65, 0x4d,
	0x4d, 0x52, 0x12, 0x40, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x43, 0x6e, 0x74, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x22, 0xea, 0xb5, 0x18, 0x1e, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4,
	0x96, 0xe5, 0x8a, 0xa0, 0xe6, 0x98, 0x9f, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe8, 0xbf, 0x9e,
	0xe8, 0x83, 0x9c, 0xe5, 0x9c, 0xba, 0xe6, 0xac, 0xa1, 0x52, 0x09, 0x43, 0x6f, 0x6e, 0x57, 0x69,
	0x6e, 0x43, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0e, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x42, 0x69,
	0x67, 0x47, 0x72, 0x61, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0xea, 0xb5,
	0x18, 0x0f, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe5, 0xa4, 0xa7, 0xe6, 0xae, 0xb5, 0xe4, 0xbd,
	0x8d, 0x52, 0x0e, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x42, 0x69, 0x67, 0x47, 0x72, 0x61, 0x64,
	0x65, 0x12, 0x37, 0x0a, 0x0c, 0x42, 0x69, 0x67, 0x47, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe5, 0xa4, 0xa7,
	0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0c, 0x42, 0x69,
	0x67, 0x47, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x73, 0x63, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0,
	0x52, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x73, 0x63, 0x12, 0x3f, 0x0a, 0x0d,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x73, 0x63, 0x45, 0x78, 0x70, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe6,
	0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xe4, 0xbd, 0x93, 0xe9, 0xaa, 0x8c, 0xe6, 0x9c, 0x8d, 0x52, 0x0d,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x73, 0x63, 0x45, 0x78, 0x70, 0x12, 0x44, 0x0a,
	0x11, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4d, 0x4d, 0x52, 0x41, 0x64, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x8c,
	0xb9, 0xe9, 0x85, 0x8d, 0x4d, 0x4d, 0x52, 0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90, 0xe5, 0x88, 0x86,
	0x52, 0x11, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4d, 0x4d, 0x52, 0x41, 0x64, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x53, 0x74, 0x61, 0x72, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe8,
	0x80, 0x81, 0xe5, 0x85, 0xb5, 0xe7, 0xa7, 0xaf, 0xe5, 0x88, 0x86, 0xe4, 0xb8, 0x8a, 0xe9, 0x99,
	0x90, 0x52, 0x0c, 0x41, 0x64, 0x64, 0x53, 0x74, 0x61, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x3e, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x20,
	0x20, 0x03, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x12, 0xe8, 0x80, 0x81, 0xe5, 0x85, 0xb5,
	0xe8, 0xbf, 0x9e, 0xe8, 0x83, 0x9c, 0xe7, 0xa7, 0xaf, 0xe5, 0x88, 0x86, 0xda, 0xb5, 0x18, 0x02,
	0x31, 0x30, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x40, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x4c, 0x6f, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x21, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x12, 0xe8, 0x80, 0x81, 0xe5, 0x85,
	0xb5, 0xe8, 0xbf, 0x9e, 0xe8, 0xb4, 0xa5, 0xe7, 0xa7, 0xaf, 0xe5, 0x88, 0x86, 0xda, 0xb5, 0x18,
	0x02, 0x31, 0x30, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x4c, 0x6f, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x35, 0x0a, 0x08, 0x4d, 0x56, 0x50, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x22, 0x20,
	0x03, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x0f, 0x4d, 0x56, 0x50, 0xe5, 0x8a, 0xa0, 0xe6,
	0x88, 0x90, 0xe7, 0xa7, 0xaf, 0xe5, 0x88, 0x86, 0xda, 0xb5, 0x18, 0x02, 0x31, 0x30, 0x52, 0x08,
	0x4d, 0x56, 0x50, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x3e, 0x0a, 0x0e, 0x47, 0x6f, 0x6c, 0x64,
	0x4d, 0x65, 0x64, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe9, 0x87, 0x91, 0xe7, 0x89, 0x8c, 0xe5, 0x8a, 0xa0, 0xe6,
	0x88, 0x90, 0xe7, 0xa7, 0xaf, 0xe5, 0x88, 0x86, 0x52, 0x0e, 0x47, 0x6f, 0x6c, 0x64, 0x4d, 0x65,
	0x64, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x42, 0x0a, 0x10, 0x53, 0x69, 0x6c, 0x76,
	0x65, 0x72, 0x4d, 0x65, 0x64, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe9, 0x93, 0xb6, 0xe7, 0x89, 0x8c, 0xe5, 0x8a,
	0xa0, 0xe6, 0x88, 0x90, 0xe7, 0xa7, 0xaf, 0xe5, 0x88, 0x86, 0x52, 0x10, 0x53, 0x69, 0x6c, 0x76,
	0x65, 0x72, 0x4d, 0x65, 0x64, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x57, 0x0a, 0x16,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41,
	0x64, 0x64, 0x52, 0x61, 0x74, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1f, 0xea, 0xb5,
	0x18, 0x1b, 0xe6, 0x88, 0x98, 0xe9, 0x98, 0x9f, 0xe8, 0xb5, 0x9b, 0xe7, 0xa7, 0xaf, 0xe5, 0x88,
	0x86, 0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90, 0xe7, 0xb3, 0xbb, 0xe6, 0x95, 0xb0, 0x52, 0x16, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x64,
	0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x60, 0x0a, 0x16, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x58, 0x69, 0x61, 0x6f, 0x6a, 0x69, 0x44, 0x65, 0x6c, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x05, 0x42, 0x28, 0xea, 0xb5, 0x18, 0x24, 0xe6, 0xb8, 0xb8, 0xe6, 0x88,
	0x8f, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe4, 0xb8, 0xbe, 0xe6, 0x8a, 0xa5, 0xe6, 0xb6, 0x88,
	0xe6, 0x9e, 0x81, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe6, 0x89, 0xa3, 0xe5, 0x88, 0x86, 0x52,
	0x16, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x58, 0x69,
	0x61, 0x6f, 0x6a, 0x69, 0x44, 0x65, 0x6c, 0x12, 0x5a, 0x0a, 0x13, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x58, 0x69, 0x61, 0x6f, 0x6a, 0x69, 0x44, 0x65, 0x6c, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x28, 0xea, 0xb5, 0x18, 0x24, 0xe6, 0xb8, 0xb8, 0xe6, 0x88, 0x8f,
	0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe7, 0xbb, 0x93, 0xe7, 0xae, 0x97, 0xe6, 0xb6, 0x88, 0xe6,
	0x9e, 0x81, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe6, 0x89, 0xa3, 0xe5, 0x88, 0x86, 0x52, 0x13,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x58, 0x69, 0x61, 0x6f, 0x6a, 0x69,
	0x44, 0x65, 0x6c, 0x12, 0x51, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74,
	0x53, 0x79, 0x73, 0x53, 0x6f, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x1f, 0xea, 0xb5, 0x18, 0x1b, 0xe5, 0xae, 0xa1, 0xe5, 0x88, 0xa4, 0xe7, 0xb3, 0xbb, 0xe7,
	0xbb, 0x9f, 0xe9, 0x80, 0x81, 0xe4, 0xba, 0xba, 0xe5, 0xa4, 0xb4, 0xe6, 0x89, 0xa3, 0xe5, 0x88,
	0x86, 0x52, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x53, 0x79, 0x73, 0x53,
	0x6f, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x12, 0x50, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x74, 0x53, 0x79, 0x73, 0x47, 0x75, 0x61, 0x6a, 0x69, 0x44, 0x65, 0x6c, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe5, 0xae, 0xa1, 0xe5, 0x88, 0xa4,
	0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe6, 0x8c, 0x82, 0xe6, 0x9c, 0xba, 0xe6, 0x89, 0xa3, 0xe5,
	0x88, 0x86, 0x52, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x53, 0x79, 0x73,
	0x47, 0x75, 0x61, 0x6a, 0x69, 0x44, 0x65, 0x6c, 0x12, 0x45, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x4c, 0x6f, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x1f, 0xea, 0xb5, 0x18, 0x1b, 0xe4, 0xba, 0x8c, 0xe7, 0xba, 0xa7, 0xe5, 0x8c, 0xb9, 0xe9, 0x85,
	0x8d, 0x6c, 0x6f, 0x67, 0xe6, 0x9d, 0x83, 0xe9, 0x87, 0x8d, 0xe7, 0xb3, 0xbb, 0xe6, 0x95, 0xb0,
	0x52, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x67, 0x0a, 0x18, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x57, 0x61, 0x72, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x2b, 0xea, 0xb5, 0x18, 0x27, 0xe5, 0x9b, 0x9e, 0xe6, 0xb5, 0x81, 0xe7, 0x8e, 0xa9,
	0xe5, 0xae, 0xb6, 0xe9, 0xa6, 0x96, 0xe6, 0xac, 0xa1, 0xe5, 0x8d, 0x95, 0xe6, 0x8e, 0x92, 0xe8,
	0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe6, 0xb8, 0xa9, 0xe6, 0x9a, 0x96, 0xe5, 0xb1, 0x80, 0x52, 0x18,
	0x42, 0x61, 0x63, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x57, 0x61,
	0x72, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x52, 0x61, 0x6e, 0x6b,
	0x45, 0x4c, 0x4f, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe5,
	0xaf, 0xb9, 0xe5, 0xba, 0x94, 0xe5, 0xae, 0x9e, 0xe5, 0x8a, 0x9b, 0xe5, 0x88, 0x86, 0x52, 0x07,
	0x52, 0x61, 0x6e, 0x6b, 0x45, 0x4c, 0x4f, 0x12, 0x58, 0x0a, 0x18, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x4c, 0x4f, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe7,
	0xbb, 0x84, 0xe9, 0x98, 0x9f, 0xe5, 0x8c, 0xb9, 0xe9, 0x85, 0x8d, 0x45, 0x4c, 0x4f, 0xe5, 0x8a,
	0xa0, 0xe6, 0x88, 0x90, 0xe5, 0x80, 0xbc, 0x52, 0x18, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x45, 0x4c, 0x4f, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x5a, 0x0a, 0x13, 0x47, 0x61, 0x6d, 0x65, 0x47, 0x75, 0x61, 0x6a, 0x69, 0x44, 0x65,
	0x6c, 0x41, 0x64, 0x64, 0x52, 0x61, 0x74, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x05, 0x42, 0x28,
	0xea, 0xb5, 0x18, 0x24, 0xe6, 0xb8, 0xb8, 0xe6, 0x88, 0x8f, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f,
	0xe6, 0x8c, 0x82, 0xe6, 0x9c, 0xba, 0xe6, 0x89, 0xa3, 0xe5, 0x88, 0x86, 0xe5, 0x8a, 0xa0, 0xe6,
	0x88, 0x90, 0xe6, 0xaf, 0x94, 0xe4, 0xbe, 0x8b, 0x52, 0x13, 0x47, 0x61, 0x6d, 0x65, 0x47, 0x75,
	0x61, 0x6a, 0x69, 0x44, 0x65, 0x6c, 0x41, 0x64, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x52, 0x0a,
	0x12, 0x55, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x44, 0x65, 0x6c, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x05, 0x42, 0x22, 0xea, 0xb5, 0x18, 0x1e, 0xe6,
	0x9c, 0xaa, 0xe7, 0xa1, 0xae, 0xe8, 0xae, 0xa4, 0xe6, 0xb8, 0xb8, 0xe6, 0x88, 0x8f, 0xe6, 0x89,
	0xa3, 0xe7, 0x9a, 0x84, 0xe4, 0xbf, 0xa1, 0xe8, 0xaa, 0x89, 0xe5, 0x88, 0x86, 0x52, 0x12, 0x55,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x44, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x12, 0x45, 0x0a, 0x10, 0x4f, 0x75, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x6c, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x30, 0x20, 0x01, 0x28, 0x05, 0x42, 0x19, 0xea, 0xb5, 0x18,
	0x15, 0xe9, 0xa1, 0xb6, 0xe5, 0x8f, 0xb7, 0xe6, 0x89, 0xa3, 0xe7, 0x9a, 0x84, 0xe4, 0xbf, 0xa1,
	0xe8, 0xaa, 0x89, 0xe5, 0x88, 0x86, 0x52, 0x10, 0x4f, 0x75, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x44,
	0x65, 0x6c, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x41, 0x0a, 0x10, 0x41, 0x49, 0x52, 0x61,
	0x6e, 0x6b, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x61, 0x74, 0x65, 0x18, 0x31, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x11, 0x41, 0x49, 0xe6, 0x94, 0xbb, 0xe5, 0x87, 0xbb,
	0xe5, 0x8a, 0x9b, 0xe6, 0xaf, 0x94, 0xe4, 0xbe, 0x8b, 0x52, 0x10, 0x41, 0x49, 0x52, 0x61, 0x6e,
	0x6b, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x57,
	0x61, 0x72, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x49, 0x45, 0x6c, 0x6f, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe6, 0xb8, 0xa9, 0xe6, 0x9a, 0x96,
	0xe5, 0xb1, 0x80, 0xe5, 0xaf, 0xb9, 0xe6, 0x89, 0x8b, 0x45, 0x6c, 0x6f, 0xe5, 0x88, 0x86, 0x52,
	0x0f, 0x57, 0x61, 0x72, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x49, 0x45, 0x6c, 0x6f,
	0x12, 0x56, 0x0a, 0x17, 0x4d, 0x4d, 0x52, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x41, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0x4d, 0x4d, 0x52, 0xe9, 0x80, 0x9a, 0xe7, 0x94, 0xa8,
	0xe7, 0xae, 0x97, 0xe6, 0xb3, 0x95, 0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90, 0xe5, 0x88, 0x86, 0x52,
	0x17, 0x4d, 0x4d, 0x52, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x15, 0x49, 0x73, 0x46, 0x75,
	0x6c, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x69, 0x67, 0x47, 0x72, 0x61, 0x64, 0x65, 0x55,
	0x70, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x22, 0xea, 0xb5, 0x18, 0x1e, 0xe6, 0xbb, 0xa1,
	0xe6, 0x98, 0x9f, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xa4, 0xa7, 0xe6, 0xae, 0xb5, 0xe4,
	0xbd, 0x8d, 0xe6, 0x99, 0x8b, 0xe7, 0xba, 0xa7, 0xe8, 0xb5, 0x9b, 0x52, 0x15, 0x49, 0x73, 0x46,
	0x75, 0x6c, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x69, 0x67, 0x47, 0x72, 0x61, 0x64, 0x65,
	0x55, 0x70, 0x12, 0x5c, 0x0a, 0x17, 0x49, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x47, 0x72, 0x61, 0x64, 0x65, 0x55, 0x70, 0x18, 0x35, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x22, 0xea, 0xb5, 0x18, 0x1e, 0xe6, 0xbb, 0xa1, 0xe6, 0x98, 0x9f, 0xe6,
	0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xb0, 0x8f, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xe6, 0x99,
	0x8b, 0xe7, 0xba, 0xa7, 0xe8, 0xb5, 0x9b, 0x52, 0x17, 0x49, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x47, 0x72, 0x61, 0x64, 0x65, 0x55, 0x70,
	0x12, 0x65, 0x0a, 0x1a, 0x47, 0x72, 0x61, 0x64, 0x65, 0x55, 0x70, 0x57, 0x69, 0x6e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x42, 0x72, 0x61, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x36,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x25, 0xea, 0xb5, 0x18, 0x21, 0xe6, 0x99, 0x8b, 0xe7, 0xba, 0xa7,
	0xe8, 0xb5, 0x9b, 0xe8, 0x83, 0x9c, 0xe5, 0x88, 0xa9, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe5,
	0x8b, 0x87, 0xe8, 0x80, 0x85, 0xe7, 0xa7, 0xaf, 0xe5, 0x88, 0x86, 0x52, 0x1a, 0x47, 0x72, 0x61,
	0x64, 0x65, 0x55, 0x70, 0x57, 0x69, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x72, 0x61,
	0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x7d, 0x0a, 0x20, 0x47, 0x72, 0x61, 0x64, 0x65,
	0x55, 0x70, 0x4c, 0x6f, 0x73, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x57, 0x65, 0x6c,
	0x6c, 0x42, 0x72, 0x61, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x31, 0xea, 0xb5, 0x18, 0x2d, 0xe6, 0x99, 0x8b, 0xe7, 0xba, 0xa7, 0xe8, 0xb5, 0x9b,
	0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe8, 0xa1, 0xa8, 0xe7, 0x8e, 0xb0, 0xe4, 0xbc, 0x98, 0xe7,
	0xa7, 0x80, 0xe8, 0xa1, 0xa5, 0xe5, 0x81, 0xbf, 0xe5, 0x8b, 0x87, 0xe8, 0x80, 0x85, 0xe7, 0xa7,
	0xaf, 0xe5, 0x88, 0x86, 0x52, 0x20, 0x47, 0x72, 0x61, 0x64, 0x65, 0x55, 0x70, 0x4c, 0x6f, 0x73,
	0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x57, 0x65, 0x6c, 0x6c, 0x42, 0x72, 0x61, 0x76,
	0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x7d, 0x0a, 0x20, 0x47, 0x72, 0x61, 0x64, 0x65, 0x55,
	0x70, 0x4c, 0x6f, 0x73, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x47, 0x6f, 0x6f, 0x64,
	0x42, 0x72, 0x61, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x31, 0xea, 0xb5, 0x18, 0x2d, 0xe6, 0x99, 0x8b, 0xe7, 0xba, 0xa7, 0xe8, 0xb5, 0x9b, 0xe5,
	0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe8, 0xa1, 0xa8, 0xe7, 0x8e, 0xb0, 0xe8, 0x89, 0xaf, 0xe5, 0xa5,
	0xbd, 0xe8, 0xa1, 0xa5, 0xe5, 0x81, 0xbf, 0xe5, 0x8b, 0x87, 0xe8, 0x80, 0x85, 0xe7, 0xa7, 0xaf,
	0xe5, 0x88, 0x86, 0x52, 0x20, 0x47, 0x72, 0x61, 0x64, 0x65, 0x55, 0x70, 0x4c, 0x6f, 0x73, 0x65,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x72, 0x61, 0x76, 0x65,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x26, 0x47, 0x72, 0x61, 0x64, 0x65, 0x55,
	0x70, 0x4c, 0x6f, 0x73, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x56, 0x69, 0x6f,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x72, 0x61, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x39, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x31, 0xea, 0xb5, 0x18, 0x2d, 0xe6, 0x99, 0x8b, 0xe7,
	0xba, 0xa7, 0xe8, 0xb5, 0x9b, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe9, 0x98, 0x9f, 0xe5, 0x8f,
	0x8b, 0xe8, 0xbf, 0x9d, 0xe8, 0xa7, 0x84, 0xe8, 0xa1, 0xa5, 0xe5, 0x81, 0xbf, 0xe5, 0x8b, 0x87,
	0xe8, 0x80, 0x85, 0xe7, 0xa7, 0xaf, 0xe5, 0x88, 0x86, 0x52, 0x26, 0x47, 0x72, 0x61, 0x64, 0x65,
	0x55, 0x70, 0x4c, 0x6f, 0x73, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x56, 0x69,
	0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x72, 0x61, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x42, 0x0a, 0x12, 0x48, 0x61, 0x6e, 0x67, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x65,
	0x6e, 0x73, 0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x12, 0xea,
	0xb5, 0x18, 0x0e, 0xe6, 0x8c, 0x82, 0xe6, 0x9c, 0xba, 0xe8, 0xa1, 0xa5, 0xe5, 0x81, 0xbf, 0x49,
	0x44, 0x52, 0x12, 0x48, 0x61, 0x6e, 0x67, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73,
	0x61, 0x74, 0x65, 0x49, 0x44, 0x12, 0x4f, 0x0a, 0x14, 0x4f, 0x66, 0x66, 0x4c, 0x69, 0x6e, 0x65,
	0x48, 0x6f, 0x73, 0x74, 0x41, 0x49, 0x47, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x76, 0x18, 0x3b, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1b, 0xea, 0xb5, 0x18, 0x17, 0xe7, 0xa6, 0xbb, 0xe7, 0xba, 0xbf, 0x41,
	0x49, 0xe5, 0xb0, 0x8f, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7,
	0x52, 0x14, 0x4f, 0x66, 0x66, 0x4c, 0x69, 0x6e, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x49, 0x47,
	0x72, 0x61, 0x64, 0x65, 0x4c, 0x76, 0x22, 0xa7, 0x02, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x44, 0x54,
	0x5f, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x52, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x36, 0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe7,
	0xad, 0x9b, 0xe9, 0x80, 0x89, 0x52, 0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x68, 0x6f,
	0x6f, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x44, 0x69, 0x76, 0x69, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x0c, 0xe6, 0x94, 0xb6, 0xe7, 0x9b, 0x8a, 0xe6, 0x96, 0xb9, 0xe5, 0xbc, 0x8f, 0x52, 0x0a, 0x44,
	0x69, 0x76, 0x69, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x0c, 0xe7, 0xad, 0x9b, 0xe9, 0x80, 0x89, 0xe5, 0x8d, 0x8a, 0xe5, 0xbe, 0x84,
	0x52, 0x0b, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x2d, 0x0a,
	0x0a, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe6, 0x94, 0xb6, 0xe7, 0x9b, 0x8a, 0xe6, 0xaf, 0x94,
	0x52, 0x0a, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0d,
	0x44, 0x65, 0x61, 0x64, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe6, 0xad, 0xbb, 0xe4, 0xba, 0xa1, 0xe6,
	0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0, 0xe6, 0x94, 0xb6, 0xe7, 0x9b,
	0x8a, 0x52, 0x0d, 0x44, 0x65, 0x61, 0x64, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x22, 0xaf, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x49, 0x6e, 0x63, 0x6f, 0x6d,
	0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x41,
	0x74, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe5, 0x87, 0xbb, 0xe6, 0x9d, 0x80, 0xe8, 0x80, 0x85, 0xe7,
	0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0b, 0x41, 0x74, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x5e, 0x0a, 0x0f, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x41, 0x72, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x52, 0x65,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x52, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x0c,
	0xe5, 0x88, 0x86, 0xe9, 0x85, 0x8d, 0xe6, 0x96, 0xb9, 0xe5, 0xbc, 0x8f, 0xda, 0xb5, 0x18, 0x01,
	0x35, 0x52, 0x0f, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41,
	0x72, 0x72, 0x22, 0xa7, 0x04, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x53, 0x6f, 0x75, 0x6c, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x34, 0x0a, 0x0c, 0x48, 0x65, 0x72, 0x6f, 0x4b, 0x69, 0x6c, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0x8b,
	0xb1, 0xe9, 0x9b, 0x84, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x52, 0x0c, 0x48, 0x65, 0x72, 0x6f,
	0x4b, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x41,
	0x64, 0x64, 0x52, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0e, 0xea, 0xb5,
	0x18, 0x0a, 0xe7, 0xbb, 0x8f, 0xe9, 0xaa, 0x8c, 0x42, 0x55, 0x46, 0x46, 0x52, 0x0a, 0x45, 0x78,
	0x70, 0x41, 0x64, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x17, 0x47, 0x6f, 0x6c, 0x64,
	0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x52,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x10, 0xe4,
	0xba, 0xba, 0xe5, 0xa4, 0xb4, 0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81, 0x42, 0x55, 0x46, 0x46, 0x52,
	0x17, 0x47, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x41, 0x64, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x47, 0x6f, 0x6c, 0x64,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe5, 0xa5, 0x96, 0xe9, 0x87, 0x91, 0xe5, 0x8c, 0x85,
	0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x0f, 0x47, 0x6f,
	0x6c, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4f, 0x0a,
	0x0f, 0x4b, 0x69, 0x6c, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x25, 0xea, 0xb5, 0x18, 0x21, 0xe8, 0x8e, 0xb7, 0xe5,
	0xbe, 0x97, 0xe4, 0xb8, 0x80, 0xe6, 0xac, 0xa1, 0xe5, 0x87, 0xbb, 0xe6, 0x9d, 0x80, 0xe5, 0x90,
	0x8e, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x52, 0x0f, 0x4b,
	0x69, 0x6c, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x51,
	0x0a, 0x10, 0x41, 0x73, 0x73, 0x69, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x25, 0xea, 0xb5, 0x18, 0x21, 0xe8, 0x8e,
	0xb7, 0xe5, 0xbe, 0x97, 0xe4, 0xb8, 0x80, 0xe6, 0xac, 0xa1, 0xe5, 0x8a, 0xa9, 0xe6, 0x94, 0xbb,
	0xe5, 0x90, 0x8e, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x52,
	0x10, 0x41, 0x73, 0x73, 0x69, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x51, 0x0a, 0x10, 0x44, 0x65, 0x61, 0x74, 0x68, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x25, 0xea, 0xb5, 0x18,
	0x21, 0xe8, 0x8e, 0xb7, 0xe5, 0xbe, 0x97, 0xe4, 0xb8, 0x80, 0xe6, 0xac, 0xa1, 0xe6, 0xad, 0xbb,
	0xe4, 0xba, 0xa1, 0xe5, 0x90, 0x8e, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe7, 0x8a, 0xb6, 0xe6,
	0x80, 0x81, 0x52, 0x10, 0x44, 0x65, 0x61, 0x74, 0x68, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x3a, 0x06, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0x22, 0x36, 0x0a, 0x0e,
	0x48, 0x65, 0x72, 0x6f, 0x4a, 0x6f, 0x62, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x24,
	0x0a, 0x0a, 0x4a, 0x6f, 0x62, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x04, 0xea, 0xb5, 0x18, 0x00, 0x52, 0x0a, 0x4a, 0x6f, 0x62, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0xc5, 0x02, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x48, 0x65, 0x72, 0x6f,
	0x43, 0x61, 0x6d, 0x70, 0x42, 0x75, 0x66, 0x66, 0x12, 0x3e, 0x0a, 0x0e, 0x48, 0x65, 0x72, 0x6f,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x16, 0xea, 0xb5, 0x18, 0x0e, 0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a, 0xe5, 0x85, 0xb3, 0xe7,
	0xb3, 0xbb, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x0e, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x3c, 0x0a, 0x10, 0x42, 0x75, 0x66, 0x66,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x10, 0x42, 0x75, 0x66, 0x66, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x48, 0x65, 0x72, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x0c, 0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0x52, 0x0b, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x48, 0x65, 0x72, 0x6f, 0x12, 0x28, 0x0a, 0x06, 0x42, 0x75,
	0x66, 0x66, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c,
	0xe4, 0xba, 0xa7, 0xe7, 0x94, 0x9f, 0x62, 0x75, 0x66, 0x66, 0x49, 0x44, 0x52, 0x06, 0x42, 0x75,
	0x66, 0x66, 0x49, 0x44, 0x12, 0x42, 0x0a, 0x10, 0x4d, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x46, 0x6f,
	0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x16,
	0xea, 0xb5, 0x18, 0x12, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x91, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91,
	0xe4, 0xba, 0xba, 0xe6, 0x95, 0xb0, 0x52, 0x10, 0x4d, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x46, 0x6f,
	0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x3a, 0x12, 0x8a, 0x97, 0x22, 0x0e, 0x48, 0x65,
	0x72, 0x6f, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x65, 0x0a, 0x11,
	0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x30, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe8, 0x83, 0xbd, 0xe9, 0x87, 0x8f, 0xe6, 0x9d,
	0xa1, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe5, 0x90, 0x8d, 0x52, 0x07, 0x52, 0x65, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xaf, 0x03, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x48, 0x65, 0x72, 0x6f, 0x4a,
	0x6f, 0x62, 0x42, 0x75, 0x66, 0x66, 0x12, 0x27, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0x42, 0x75, 0x66,
	0x66, 0xe7, 0xbb, 0x84, 0x49, 0x44, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12,
	0x30, 0x0a, 0x07, 0x4a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe8, 0x81, 0x8c, 0xe4,
	0xb8, 0x9a, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x07, 0x4a, 0x6f, 0x62, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x49, 0x0a, 0x04, 0x41, 0x74, 0x74, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f,
	0x46, 0x75, 0x6e, 0x63, 0x45, 0x66, 0x74, 0x5f, 0x4f, 0x62, 0x6a, 0x42, 0x19, 0xea, 0xb5, 0x18,
	0x10, 0xe8, 0x81, 0x8c, 0xe4, 0xb8, 0x9a, 0x42, 0x75, 0x66, 0x66, 0xe5, 0xb1, 0x9e, 0xe6, 0x80,
	0xa7, 0xda, 0xb5, 0x18, 0x01, 0x33, 0x52, 0x04, 0x41, 0x74, 0x74, 0x72, 0x12, 0x2d, 0x0a, 0x06,
	0x42, 0x75, 0x66, 0x66, 0x49, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x42, 0x15, 0xea, 0xb5,
	0x18, 0x0c, 0xe8, 0x81, 0x8c, 0xe4, 0xb8, 0x9a, 0x42, 0x75, 0x66, 0x66, 0x49, 0x44, 0xda, 0xb5,
	0x18, 0x01, 0x32, 0x52, 0x06, 0x42, 0x75, 0x66, 0x66, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x12, 0x53,
	0x65, 0x6c, 0x66, 0x43, 0x61, 0x6d, 0x70, 0x54, 0x69, 0x70, 0x41, 0x67, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe6, 0x88, 0x91,
	0xe6, 0x96, 0xb9, 0xe6, 0x8f, 0x90, 0xe7, 0xa4, 0xba, 0x61, 0x67, 0x65, 0xe8, 0xb7, 0xaf, 0xe5,
	0xbe, 0x84, 0x52, 0x12, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x61, 0x6d, 0x70, 0x54, 0x69, 0x70, 0x41,
	0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x4b, 0x0a, 0x13, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x43,
	0x61, 0x6d, 0x70, 0x54, 0x69, 0x70, 0x41, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe6, 0x95, 0x8c, 0xe6, 0x96, 0xb9, 0xe6,
	0x8f, 0x90, 0xe7, 0xa4, 0xba, 0x61, 0x67, 0x65, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x13,
	0x45, 0x6e, 0x65, 0x6d, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x54, 0x69, 0x70, 0x41, 0x67, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x0a, 0x54, 0x69, 0x70, 0x73, 0x42, 0x75, 0x66, 0x66, 0x49,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x8f, 0x90,
	0xe7, 0xa4, 0xba, 0x42, 0x75, 0x66, 0x66, 0x49, 0x44, 0x52, 0x0a, 0x54, 0x69, 0x70, 0x73, 0x42,
	0x75, 0x66, 0x66, 0x49, 0x64, 0x22, 0xf7, 0x02, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x48, 0x65, 0x72,
	0x6f, 0x42, 0x75, 0x66, 0x66, 0x12, 0x30, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x8d, 0x95, 0xe8,
	0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0x42, 0x75, 0x66, 0x66, 0xe7, 0xbb, 0x84, 0x49, 0x44, 0x52, 0x07,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x06, 0x48, 0x65, 0x72, 0x6f, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe8, 0x8b, 0xb1,
	0xe9, 0x9b, 0x84, 0x49, 0x44, 0x52, 0x06, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x44, 0x12, 0x49, 0x0a,
	0x04, 0x41, 0x74, 0x74, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x52, 0x65,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x46, 0x75, 0x6e, 0x63,
	0x45, 0x66, 0x74, 0x5f, 0x4f, 0x62, 0x6a, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x10, 0xe8, 0x81, 0x8c,
	0xe4, 0xb8, 0x9a, 0x42, 0x75, 0x66, 0x66, 0xe5, 0xb1, 0x9e, 0xe6, 0x80, 0xa7, 0xda, 0xb5, 0x18,
	0x01, 0x33, 0x52, 0x04, 0x41, 0x74, 0x74, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x42, 0x75, 0x66, 0x66,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0x81,
	0x8c, 0xe4, 0xb8, 0x9a, 0x42, 0x75, 0x66, 0x66, 0x49, 0x44, 0xda, 0xb5, 0x18, 0x01, 0x32, 0x52,
	0x06, 0x42, 0x75, 0x66, 0x66, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x12, 0x53, 0x65, 0x6c, 0x66, 0x43,
	0x61, 0x6d, 0x70, 0x54, 0x69, 0x70, 0x41, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe6, 0x88, 0x91, 0xe6, 0x96, 0xb9, 0xe6,
	0x8f, 0x90, 0xe7, 0xa4, 0xba, 0x61, 0x67, 0x65, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x12,
	0x53, 0x65, 0x6c, 0x66, 0x43, 0x61, 0x6d, 0x70, 0x54, 0x69, 0x70, 0x41, 0x67, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x4b, 0x0a, 0x13, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x54,
	0x69, 0x70, 0x41, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x19, 0xea, 0xb5, 0x18, 0x15, 0xe6, 0x95, 0x8c, 0xe6, 0x96, 0xb9, 0xe6, 0x8f, 0x90, 0xe7, 0xa4,
	0xba, 0x61, 0x67, 0x65, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x13, 0x45, 0x6e, 0x65, 0x6d,
	0x79, 0x43, 0x61, 0x6d, 0x70, 0x54, 0x69, 0x70, 0x41, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22,
	0xae, 0x03, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x5f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x07, 0x49,
	0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe8, 0xb5, 0xb7, 0xe6, 0x95, 0x88, 0x52, 0x07,
	0x49, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea,
	0xb5, 0x18, 0x0c, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52,
	0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x12, 0x2e, 0x0a,
	0x09, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x9c, 0x89, 0xe6, 0x95, 0x88, 0xe6, 0x97, 0xb6, 0xe9,
	0x95, 0xbf, 0x52, 0x09, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a,
	0x0a, 0x42, 0x75, 0x79, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe7, 0x82, 0xb9, 0xe5, 0x88, 0xb8, 0xe8, 0xb4, 0xad,
	0xe4, 0xb9, 0xb0, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0x52, 0x0a, 0x42, 0x75, 0x79, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x07, 0x42, 0x75, 0x79, 0x43, 0x6f, 0x69, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe9, 0x87, 0x91, 0xe5,
	0xb8, 0x81, 0xe8, 0xb4, 0xad, 0xe4, 0xb9, 0xb0, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0x52, 0x07,
	0x42, 0x75, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x36, 0x0a, 0x0a, 0x42, 0x75, 0x79, 0x44, 0x69,
	0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18,
	0x12, 0xe9, 0x92, 0xbb, 0xe7, 0x9f, 0xb3, 0xe8, 0xb4, 0xad, 0xe4, 0xb9, 0xb0, 0xe4, 0xbb, 0xb7,
	0xe6, 0xa0, 0xbc, 0x52, 0x0a, 0x42, 0x75, 0x79, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12,
	0x39, 0x0a, 0x0a, 0x42, 0x75, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe5, 0x85, 0x91, 0xe6, 0x8d, 0xa2, 0xe5,
	0x88, 0xb8, 0xe8, 0xb4, 0xad, 0xe4, 0xb9, 0xb0, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0x52, 0x0a,
	0x42, 0x75, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x53, 0x6f,
	0x72, 0x74, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08,
	0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0x49, 0x44, 0x52, 0x06, 0x53, 0x6f, 0x72, 0x74, 0x49, 0x44,
	0x22, 0x7b, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x53, 0x6b, 0x69, 0x6e, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x9b, 0xbe,
	0xe7, 0x89, 0x87, 0x52, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a,
	0x04, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xb5, 0x18,
	0x06, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a,
	0x04, 0x44, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xb5, 0x18,
	0x06, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x04, 0x44, 0x65, 0x73, 0x63, 0x22, 0xed, 0x03,
	0x0a, 0x0f, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x53, 0x6b, 0x69, 0x6e, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x12, 0x4e, 0x0a, 0x10, 0x53, 0x6b, 0x69, 0x6e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x50, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xea, 0xb5, 0x18,
	0x1e, 0xe7, 0x9a, 0xae, 0xe8, 0x82, 0xa4, 0xe9, 0x9f, 0xb3, 0xe6, 0x95, 0x88, 0xe8, 0xb5, 0x84,
	0xe6, 0xba, 0x90, 0xe5, 0x8c, 0x85, 0xe5, 0x90, 0x8d, 0xe5, 0x89, 0x8d, 0xe7, 0xbc, 0x80, 0x52,
	0x10, 0x53, 0x6b, 0x69, 0x6e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x50, 0x61, 0x63,
	0x6b, 0x12, 0x42, 0x0a, 0x10, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18,
	0x12, 0xe7, 0x9a, 0xae, 0xe8, 0x82, 0xa4, 0xe9, 0x9f, 0xb3, 0xe6, 0x95, 0x88, 0xe9, 0x85, 0x8d,
	0xe7, 0xbd, 0xae, 0x52, 0x10, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x10, 0x53, 0x6b, 0x69, 0x6e, 0x53, 0x6f, 0x75,
	0x6e, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe7, 0x9a, 0xae, 0xe8, 0x82, 0xa4, 0xe9, 0x9f, 0xb3, 0xe6, 0x95,
	0x88, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0xe5, 0x90, 0x8e, 0xe7, 0xbc, 0x80, 0x52, 0x10, 0x53,
	0x6b, 0x69, 0x6e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x66, 0x69, 0x78, 0x12,
	0x52, 0x0a, 0x15, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x61, 0x6e,
	0x6b, 0x52, 0x65, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c,
	0xea, 0xb5, 0x18, 0x18, 0xe5, 0xa4, 0xa7, 0xe5, 0x8e, 0x85, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba,
	0xe9, 0x9f, 0xb3, 0xe6, 0x95, 0x88, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0x52, 0x15, 0x4c, 0x6f,
	0x62, 0x62, 0x79, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x50,
	0x61, 0x63, 0x6b, 0x12, 0x46, 0x0a, 0x12, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x53, 0x6f, 0x75,
	0x6e, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x66, 0x69, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x9b, 0x9e, 0xe5, 0x9f, 0x8e, 0xe9, 0x9f, 0xb3, 0xe6, 0x95,
	0x88, 0xe5, 0x90, 0x8e, 0xe7, 0xbc, 0x80, 0x52, 0x12, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x53,
	0x6f, 0x75, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x66, 0x69, 0x78, 0x12, 0x60, 0x0a, 0x19, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x48, 0x65, 0x72, 0x6f, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x6f, 0x75, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22,
	0xea, 0xb5, 0x18, 0x1e, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe5, 0xaf, 0xb9, 0xe8, 0xaf, 0x9d,
	0xe9, 0x9f, 0xb3, 0xe6, 0x95, 0x88, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe5, 0x8c, 0x85, 0xe5,
	0x90, 0x8d, 0x52, 0x19, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x48, 0x65, 0x72, 0x6f, 0x54, 0x61, 0x6c,
	0x6b, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x22, 0xf6, 0x01,
	0x0a, 0x10, 0x52, 0x65, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x68, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x4d, 0x61,
	0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe6, 0x94,
	0xbb, 0xe5, 0x87, 0xbb, 0xe8, 0x80, 0x85, 0xe6, 0xa0, 0x87, 0xe8, 0xaf, 0x86, 0x52, 0x0c, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x37, 0x0a, 0x0c, 0x53,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x65, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe5, 0x8f, 0x97, 0xe5, 0x87, 0xbb, 0xe8, 0x80, 0x85,
	0xe6, 0xa0, 0x87, 0xe8, 0xaf, 0x86, 0x52, 0x0c, 0x53, 0x75, 0x66, 0x66, 0x65, 0x72, 0x65, 0x72,
	0x4d, 0x61, 0x72, 0x6b, 0x12, 0x38, 0x0a, 0x0e, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90, 0x52, 0x0e,
	0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36,
	0x0a, 0x0d, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x8a, 0xa8, 0xe6, 0x80,
	0x81, 0xe8, 0xb0, 0x83, 0xe6, 0x95, 0xb4, 0x52, 0x0d, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xa2, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x38, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xb1, 0x9e, 0xe6, 0x80,
	0xa7, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x0c, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0f, 0x55, 0x70, 0x70,
	0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xb1, 0x9e, 0xe6, 0x80, 0xa7, 0xe4, 0xb8,
	0x8a, 0xe9, 0x99, 0x90, 0x52, 0x0f, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x14, 0x8a, 0x97, 0x22, 0x0c, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0xf8, 0x97, 0x22, 0x01, 0x22, 0xb4, 0x02, 0x0a, 0x12,
	0x52, 0x65, 0x73, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a,
	0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xea, 0xb5,
	0x18, 0x06, 0xe6, 0x96, 0x87, 0xe6, 0x9c, 0xac, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x26, 0x0a, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0xad, 0x97, 0xe5, 0x8f, 0xb7,
	0x52, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x61, 0x6e,
	0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea,
	0xb5, 0x18, 0x06, 0xe5, 0x8a, 0xa8, 0xe7, 0x94, 0xbb, 0x52, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x98, 0xbe, 0xe7,
	0xa4, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x95, 0xbf, 0x52, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x52, 0x0a, 0x12, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x22,
	0xea, 0xb5, 0x18, 0x1e, 0xe7, 0x9b, 0xb8, 0xe5, 0x90, 0x8c, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87,
	0xe9, 0xa3, 0x98, 0xe5, 0xad, 0x97, 0xe9, 0x97, 0xb4, 0xe9, 0x9a, 0x94, 0xe6, 0x97, 0xb6, 0xe9,
	0x95, 0xbf, 0x52, 0x12, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x3a, 0x0a, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0xf0, 0x97,
	0x22, 0x01, 0x22, 0xdc, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x44, 0x69, 0x67,
	0x69, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x28, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc, 0x52, 0x09,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x20, 0x0a, 0x05, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe7, 0xbc,
	0xa9, 0xe6, 0x94, 0xbe, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x08, 0x74,
	0x65, 0x78, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x42, 0x0a, 0xea,
	0xb5, 0x18, 0x06, 0xe5, 0xad, 0x97, 0xe5, 0x8f, 0xb7, 0x52, 0x08, 0x74, 0x65, 0x78, 0x74, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x58, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x42, 0x0b, 0xea, 0xb5, 0x18, 0x07, 0xe5, 0x81, 0x8f, 0xe7, 0xa7, 0xbb,
	0x78, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x58, 0x12, 0x25, 0x0a, 0x07, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x59, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x42, 0x0b, 0xea, 0xb5, 0x18,
	0x07, 0xe5, 0x81, 0x8f, 0xe7, 0xa7, 0xbb, 0x79, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x59, 0x22, 0xd3, 0x03, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x44, 0x69, 0x67, 0x69, 0x74, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x54, 0x65, 0x78, 0x74, 0x43, 0x66, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x29, 0x0a, 0x08, 0x41, 0x6e, 0x69, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe5, 0x8a, 0xa8, 0xe7, 0x94, 0xbb, 0xe5, 0x90,
	0x8d, 0x52, 0x08, 0x41, 0x6e, 0x69, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x6c,
	0x69, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea,
	0xb5, 0x18, 0x0c, 0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x95, 0xbf, 0x52,
	0x08, 0x6c, 0x69, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x02, 0x4c, 0x52, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x8c, 0xba, 0xe5, 0x88,
	0x86, 0xe5, 0xb7, 0xa6, 0xe5, 0x8f, 0xb3, 0x52, 0x02, 0x4c, 0x52, 0x12, 0x2f, 0x0a, 0x08, 0x53,
	0x68, 0x6f, 0x77, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x13, 0xea,
	0xb5, 0x18, 0x0f, 0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba, 0xe6, 0xad, 0xa3, 0xe8, 0xb4, 0x9f, 0xe5,
	0x8f, 0xb7, 0x52, 0x08, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x24, 0x0a, 0x07,
	0x50, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea,
	0xb5, 0x18, 0x06, 0xe5, 0x90, 0x8e, 0xe7, 0xbc, 0x80, 0x52, 0x07, 0x50, 0x6f, 0x73, 0x74, 0x46,
	0x69, 0x78, 0x12, 0x31, 0x0a, 0x0b, 0x69, 0x63, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x31, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x42, 0x0f, 0xea, 0xb5, 0x18, 0x0b, 0x69, 0x63, 0x6f,
	0x6e, 0xe5, 0x81, 0x8f, 0xe7, 0xa7, 0xbb, 0x31, 0x52, 0x0b, 0x69, 0x63, 0x6f, 0x6e, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x31, 0x12, 0x31, 0x0a, 0x0b, 0x69, 0x63, 0x6f, 0x6e, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x42, 0x0f, 0xea, 0xb5, 0x18, 0x0b,
	0x69, 0x63, 0x6f, 0x6e, 0xe5, 0x81, 0x8f, 0xe7, 0xa7, 0xbb, 0x32, 0x52, 0x0b, 0x69, 0x63, 0x6f,
	0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x32, 0x12, 0x51, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x52, 0x65,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x44, 0x69, 0x67, 0x69,
	0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x06, 0xe5, 0x8c, 0xba, 0xe9, 0x97, 0xb4, 0xda, 0xb5, 0x18, 0x02, 0x31, 0x30,
	0x52, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x3a, 0x0a, 0x8a, 0x97, 0x22,
	0x02, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0x22, 0x4a, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x41, 0x69,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x16, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0x52, 0x02, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x52, 0x05, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x22, 0xc7, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x26, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x9c, 0x89, 0xe6,
	0x95, 0x88, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x08, 0x4d, 0x69, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0d, 0xea, 0xb5, 0x18,
	0x09, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x8f, 0xe5, 0x80, 0xbc, 0x52, 0x08, 0x4d, 0x69, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe6, 0x9c, 0x80, 0xe5,
	0xa4, 0xa7, 0xe5, 0x80, 0xbc, 0x52, 0x08, 0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2c, 0x0a, 0x0b, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe8, 0xa1, 0xb0, 0xe5, 0x87, 0x8f,
	0x52, 0x0b, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbf, 0x02,
	0x0a, 0x14, 0x52, 0x65, 0x73, 0x53, 0x70, 0x65, 0x65, 0x64, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x98, 0xaf, 0xe5, 0x90,
	0xa6, 0xe7, 0x94, 0x9f, 0xe6, 0x95, 0x88, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x46,
	0x0a, 0x12, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12,
	0xe8, 0x80, 0x83, 0xe8, 0x99, 0x91, 0xe5, 0x9f, 0xba, 0xe7, 0xa1, 0x80, 0xe9, 0x80, 0x9f, 0xe5,
	0xba, 0xa6, 0x52, 0x12, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x73,
	0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x0a, 0x53, 0x74, 0x65, 0x70, 0x41, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c,
	0xe5, 0x88, 0x86, 0xe6, 0xae, 0xb5, 0xe7, 0xb4, 0xaf, 0xe8, 0xae, 0xa1, 0x52, 0x0a, 0x53, 0x74,
	0x65, 0x70, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x0c, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x0f, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x88, 0x86, 0xe6, 0xae, 0xb5, 0xda, 0xb5,
	0x18, 0x01, 0x38, 0x52, 0x0c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x3a, 0x0c, 0x8a, 0x97, 0x22, 0x04, 0x54, 0x79, 0x70, 0x65, 0xf8, 0x97, 0x22, 0x01, 0x22,
	0xa7, 0x04, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x6f, 0x79,
	0x61, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x79, 0x4d, 0x4d, 0x52, 0x12, 0x20, 0x0a,
	0x05, 0x47, 0x72, 0x61, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5,
	0x18, 0x06, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0x52, 0x05, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12,
	0x29, 0x0a, 0x08, 0x42, 0x69, 0x67, 0x47, 0x72, 0x61, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe5, 0xa4, 0xa7, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d,
	0x52, 0x08, 0x42, 0x69, 0x67, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x42, 0x69,
	0x67, 0x47, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe5, 0xa4, 0xa7, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xe5,
	0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0c, 0x42, 0x69, 0x67, 0x47, 0x72, 0x61, 0x64, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x98, 0x9f, 0xe7, 0xba, 0xa7,
	0x52, 0x07, 0x53, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x09, 0x47, 0x72, 0x61,
	0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x09,
	0x47, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x03, 0x4d, 0x4d, 0x52,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xea, 0xb5, 0x18, 0x03, 0x4d, 0x4d, 0x52, 0x52,
	0x03, 0x4d, 0x4d, 0x52, 0x12, 0x39, 0x0a, 0x10, 0x47, 0x72, 0x61, 0x64, 0x65, 0x41, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0d,
	0xea, 0xb5, 0x18, 0x09, 0xe4, 0xbf, 0xae, 0xe6, 0xad, 0xa3, 0xe5, 0x88, 0x86, 0x52, 0x10, 0x47,
	0x72, 0x61, 0x64, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x2c, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x8a, 0xa0, 0xe5, 0x88, 0x86, 0xe7, 0xb3, 0xbb,
	0xe6, 0x95, 0xb0, 0x52, 0x08, 0x41, 0x64, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x30, 0x0a,
	0x0a, 0x4d, 0x69, 0x6e, 0x75, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x87, 0x8f, 0xe5, 0x88, 0x86, 0xe7, 0xb3, 0xbb,
	0xe6, 0x95, 0xb0, 0x52, 0x0a, 0x4d, 0x69, 0x6e, 0x75, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x31, 0x0a, 0x09, 0x44, 0x72, 0x6f, 0x70, 0x47, 0x72, 0x61, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x8e,
	0x89, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0x52, 0x09, 0x44, 0x72, 0x6f, 0x70, 0x47, 0x72, 0x61,
	0x64, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x68, 0x6f, 0x77, 0x47, 0x72,
	0x61, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0xea, 0xb5, 0x18, 0x1b, 0xe5,
	0xaf, 0xb9, 0xe5, 0xba, 0x94, 0xe6, 0x8e, 0x92, 0xe4, 0xbd, 0x8d, 0xe8, 0xb5, 0x9b, 0xe8, 0xa1,
	0xa8, 0xe7, 0x8e, 0xb0, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0x52, 0x0d, 0x52, 0x61, 0x6e, 0x6b,
	0x53, 0x68, 0x6f, 0x77, 0x47, 0x72, 0x61, 0x64, 0x65, 0x22, 0x95, 0x07, 0x0a, 0x10, 0x52, 0x65,
	0x73, 0x41, 0x49, 0x52, 0x65, 0x75, 0x73, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x16,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xea, 0xb5, 0x18, 0x02,
	0x49, 0x44, 0x52, 0x02, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x07, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe5, 0x85, 0xb3,
	0xe5, 0x8d, 0xa1, 0x49, 0x44, 0x52, 0x07, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5,
	0x18, 0x06, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x03, 0x45, 0x70, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18,
	0x06, 0xe7, 0xbb, 0x8f, 0xe9, 0xaa, 0x8c, 0x52, 0x03, 0x45, 0x70, 0x78, 0x12, 0x20, 0x0a, 0x05,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18,
	0x06, 0xe7, 0xbb, 0x8f, 0xe6, 0xb5, 0x8e, 0x52, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x26,
	0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea,
	0xb5, 0x18, 0x0c, 0xe9, 0xa2, 0x84, 0xe6, 0x9c, 0x9f, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0x52,
	0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x09, 0x45, 0x71, 0x75, 0x69, 0x70, 0x52,
	0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8,
	0xa3, 0x85, 0xe5, 0xa4, 0x87, 0xe6, 0xa6, 0x82, 0xe7, 0x8e, 0x87, 0x52, 0x09, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x52, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x45, 0x71, 0x75, 0x69, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0xe8,
	0xa3, 0x85, 0xe5, 0xa4, 0x87, 0x49, 0x44, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x09, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0d, 0x4c, 0x65, 0x66, 0x74,
	0x48, 0x65, 0x72, 0x6f, 0x4e, 0x75, 0x6d, 0x5f, 0x31, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x20, 0xea, 0xb5, 0x18, 0x1c, 0xe5, 0x9c, 0xba, 0xe4, 0xb8, 0x8a, 0xe7, 0x95, 0x99, 0xe5, 0xad,
	0x98, 0xe4, 0xba, 0xba, 0xe6, 0x95, 0xb0, 0x31, 0xe4, 0xba, 0xba, 0xe7, 0xbb, 0x84, 0xe9, 0x98,
	0x9f, 0x52, 0x0c, 0x4c, 0x65, 0x66, 0x74, 0x48, 0x65, 0x72, 0x6f, 0x4e, 0x75, 0x6d, 0x31, 0x12,
	0x45, 0x0a, 0x0d, 0x4c, 0x65, 0x66, 0x74, 0x48, 0x65, 0x72, 0x6f, 0x4e, 0x75, 0x6d, 0x5f, 0x32,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x20, 0xea, 0xb5, 0x18, 0x1c, 0xe5, 0x9c, 0xba, 0xe4,
	0xb8, 0x8a, 0xe7, 0x95, 0x99, 0xe5, 0xad, 0x98, 0xe4, 0xba, 0xba, 0xe6, 0x95, 0xb0, 0x32, 0xe4,
	0xba, 0xba, 0xe7, 0xbb, 0x84, 0xe9, 0x98, 0x9f, 0x52, 0x0c, 0x4c, 0x65, 0x66, 0x74, 0x48, 0x65,
	0x72, 0x6f, 0x4e, 0x75, 0x6d, 0x32, 0x12, 0x45, 0x0a, 0x0d, 0x4c, 0x65, 0x66, 0x74, 0x48, 0x65,
	0x72, 0x6f, 0x4e, 0x75, 0x6d, 0x5f, 0x33, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x20, 0xea,
	0xb5, 0x18, 0x1c, 0xe5, 0x9c, 0xba, 0xe4, 0xb8, 0x8a, 0xe7, 0x95, 0x99, 0xe5, 0xad, 0x98, 0xe4,
	0xba, 0xba, 0xe6, 0x95, 0xb0, 0x33, 0xe4, 0xba, 0xba, 0xe7, 0xbb, 0x84, 0xe9, 0x98, 0x9f, 0x52,
	0x0c, 0x4c, 0x65, 0x66, 0x74, 0x48, 0x65, 0x72, 0x6f, 0x4e, 0x75, 0x6d, 0x33, 0x12, 0x45, 0x0a,
	0x0d, 0x4c, 0x65, 0x66, 0x74, 0x48, 0x65, 0x72, 0x6f, 0x4e, 0x75, 0x6d, 0x5f, 0x35, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x20, 0xea, 0xb5, 0x18, 0x1c, 0xe5, 0x9c, 0xba, 0xe4, 0xb8, 0x8a,
	0xe7, 0x95, 0x99, 0xe5, 0xad, 0x98, 0xe4, 0xba, 0xba, 0xe6, 0x95, 0xb0, 0x35, 0xe4, 0xba, 0xba,
	0xe7, 0xbb, 0x84, 0xe9, 0x98, 0x9f, 0x52, 0x0c, 0x4c, 0x65, 0x66, 0x74, 0x48, 0x65, 0x72, 0x6f,
	0x4e, 0x75, 0x6d, 0x35, 0x12, 0x33, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x61,
	0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe6, 0x94,
	0xbb, 0xe5, 0x87, 0xbb, 0xe5, 0x8a, 0x9b, 0xe6, 0xaf, 0x94, 0xe4, 0xbe, 0x8b, 0x52, 0x0a, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x44, 0x72, 0x6f,
	0x70, 0x4d, 0x61, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c,
	0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0xe4, 0xb8, 0x8a, 0xe9, 0x99, 0x90, 0x52, 0x07, 0x44, 0x72,
	0x6f, 0x70, 0x4d, 0x61, 0x78, 0x12, 0x32, 0x0a, 0x09, 0x53, 0x68, 0x65, 0x6e, 0x46, 0x75, 0x4e,
	0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x10, 0x42, 0x75,
	0x66, 0x66, 0xe7, 0xa5, 0x9e, 0xe7, 0xac, 0xa6, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x09,
	0x53, 0x68, 0x65, 0x6e, 0x46, 0x75, 0x4e, 0x75, 0x6d, 0x12, 0x36, 0x0a, 0x0c, 0x53, 0x68, 0x65,
	0x6e, 0x46, 0x75, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x12, 0xea, 0xb5, 0x18, 0x0e, 0xe7, 0xa5, 0x9e, 0xe7, 0xac, 0xa6, 0x49, 0x64, 0xe5, 0x88, 0x97,
	0xe8, 0xa1, 0xa8, 0x52, 0x0c, 0x53, 0x68, 0x65, 0x6e, 0x46, 0x75, 0x49, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x8a, 0x80,
	0xe8, 0x83, 0xbd, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe5, 0x87, 0xa0, 0xe7, 0x8e, 0x87, 0x52,
	0x0c, 0x55, 0x73, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a,
	0x08, 0x43, 0x6f, 0x6f, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0xb8, 0xa9, 0xe6, 0x9a, 0x96, 0xe5, 0x86, 0xb7, 0xe5, 0x8d,
	0xb4, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x08, 0x43, 0x6f, 0x6f, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x5a, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x53, 0x6b, 0x69, 0x6e, 0x5f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x1e, 0x0a,
	0x04, 0x44, 0x65, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xb5, 0x18,
	0x06, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x04, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1e, 0x0a,
	0x04, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xb5, 0x18,
	0x06, 0xe5, 0x9b, 0xbe, 0xe7, 0x89, 0x87, 0x52, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x22, 0xc4, 0x0c,
	0x0a, 0x10, 0x52, 0x65, 0x73, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x0b, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x53, 0x6b, 0x69, 0x6e, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe5, 0x9c, 0xb0,
	0xe5, 0x9b, 0xbe, 0x49, 0x44, 0x52, 0x0b, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x53, 0x6b, 0x69, 0x6e,
	0x49, 0x44, 0x12, 0x36, 0x0a, 0x0d, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x53, 0x6b, 0x69, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5,
	0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0d, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x53, 0x6b, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0d, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x53, 0x6b, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe6, 0x8f, 0x8f,
	0xe8, 0xbf, 0xb0, 0x52, 0x0d, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x53, 0x6b, 0x69, 0x6e, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x36, 0x0a, 0x0d, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x53, 0x6b, 0x69, 0x6e, 0x49,
	0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5,
	0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0x52, 0x0d, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0c, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x53, 0x6b, 0x69, 0x6e, 0x50, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe5, 0x9b, 0xbe, 0xe7,
	0x89, 0x87, 0x52, 0x0c, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x53, 0x6b, 0x69, 0x6e, 0x50, 0x69, 0x63,
	0x12, 0x32, 0x0a, 0x0b, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x53, 0x6b, 0x69, 0x6e, 0x42, 0x47, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x9c, 0xb0, 0xe5, 0x9b,
	0xbe, 0xe8, 0x83, 0x8c, 0xe6, 0x99, 0xaf, 0x52, 0x0b, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x53, 0x6b,
	0x69, 0x6e, 0x42, 0x47, 0x12, 0x39, 0x0a, 0x0d, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x53, 0x6b, 0x69,
	0x6e, 0x42, 0x75, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xea, 0xb5, 0x18,
	0x0f, 0xe5, 0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe5, 0x8d, 0x8a, 0xe8, 0xba, 0xab, 0xe5, 0x83, 0x8f,
	0x52, 0x0d, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x53, 0x6b, 0x69, 0x6e, 0x42, 0x75, 0x73, 0x74, 0x12,
	0x40, 0x0a, 0x10, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x49,
	0x63, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x10, 0xe5,
	0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0xe5, 0x9b, 0xbe, 0x52,
	0x10, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x63, 0x6f,
	0x6e, 0x12, 0x3b, 0x0a, 0x0e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x53, 0x6b, 0x69, 0x6e, 0x54, 0x68,
	0x75, 0x6d, 0x62, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe5,
	0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe7, 0xbc, 0xa9, 0xe7, 0x95, 0xa5, 0xe5, 0x9b, 0xbe, 0x52, 0x0e,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x53, 0x6b, 0x69, 0x6e, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x12, 0x36,
	0x0a, 0x0d, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x53, 0x6b, 0x69, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x9c, 0xb0, 0xe5, 0x9b,
	0xbe, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x0d, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x53, 0x6b,
	0x69, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x0e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x53,
	0x6b, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7,
	0x52, 0x0e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x53, 0x6b, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x60, 0x0a, 0x0e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x53, 0x6b, 0x69, 0x6e, 0x50, 0x72, 0x6f,
	0x70, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x53, 0x6b,
	0x69, 0x6e, 0x5f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42, 0x15, 0xea, 0xb5, 0x18,
	0x0c, 0xe5, 0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe7, 0x89, 0xb9, 0xe6, 0x80, 0xa7, 0xda, 0xb5, 0x18,
	0x01, 0x35, 0x52, 0x0e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x53, 0x6b, 0x69, 0x6e, 0x50, 0x72, 0x6f,
	0x70, 0x73, 0x12, 0x40, 0x0a, 0x12, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x53, 0x6b, 0x69, 0x6e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x50, 0x61, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xb1, 0x8f, 0xe9, 0xa3, 0x8e, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84,
	0x52, 0x12, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x53, 0x6b, 0x69, 0x6e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x0c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x6b, 0x69,
	0x6e, 0x55, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12,
	0xe5, 0x88, 0x86, 0xe4, 0xba, 0xab, 0xe5, 0x9b, 0xbe, 0xe7, 0x89, 0x87, 0xe5, 0x9c, 0xb0, 0xe5,
	0x9d, 0x80, 0x52, 0x0c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x6b, 0x69, 0x6e, 0x55, 0x72, 0x6c,
	0x12, 0x44, 0x0a, 0x11, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x6b, 0x69, 0x6e, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18,
	0x12, 0xe5, 0x88, 0x86, 0xe4, 0xba, 0xab, 0xe8, 0xa7, 0x86, 0xe9, 0xa2, 0x91, 0xe5, 0x9c, 0xb0,
	0xe5, 0x9d, 0x80, 0x52, 0x11, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x6b, 0x69, 0x6e, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x34, 0x0a, 0x0d, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x42,
	0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xea,
	0xb5, 0x18, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0x52, 0x0d, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x13,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x53, 0x6b, 0x69, 0x6e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe7,
	0x9a, 0xae, 0xe8, 0x82, 0xa4, 0xe9, 0x9f, 0xb3, 0xe4, 0xb9, 0x90, 0x52, 0x13, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x53, 0x6b, 0x69, 0x6e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x36, 0x0a, 0x0d, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x45, 0x6e, 0x76, 0x53, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0x8e, 0xaf,
	0xe5, 0xa2, 0x83, 0xe9, 0x9f, 0xb3, 0xe6, 0x95, 0x88, 0x52, 0x0d, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x45, 0x6e, 0x76, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x38, 0x0a, 0x0e, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xbc, 0x80, 0xe5, 0xb1, 0x80, 0xe9, 0x9f, 0xb3, 0xe6,
	0x95, 0x88, 0x52, 0x0e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x3b, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f,
	0xe5, 0xaf, 0xb9, 0xe5, 0xb1, 0x80, 0xe5, 0x89, 0x8d, 0xe9, 0x9f, 0xb3, 0xe6, 0x95, 0x88, 0x52,
	0x0e, 0x50, 0x72, 0x65, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x2c, 0x0a, 0x08, 0x57, 0x69, 0x6e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0x83, 0x9c, 0xe5, 0x88, 0xa9, 0xe9, 0x9f, 0xb3,
	0xe6, 0x95, 0x88, 0x52, 0x08, 0x57, 0x69, 0x6e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2e, 0x0a,
	0x09, 0x46, 0x61, 0x69, 0x6c, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe9, 0x9f, 0xb3, 0xe6,
	0x95, 0x88, 0x52, 0x09, 0x46, 0x61, 0x69, 0x6c, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x46, 0x0a,
	0x12, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6,
	0x88, 0x98, 0xe6, 0x96, 0x97, 0xe5, 0x87, 0x86, 0xe5, 0xa4, 0x87, 0xe9, 0x9f, 0xb3, 0xe6, 0x95,
	0x88, 0x52, 0x12, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x53, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x3f, 0x0a, 0x10, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x52, 0x61,
	0x6e, 0x6b, 0x53, 0x69, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe6, 0x8e, 0x92, 0xe8, 0xa1, 0x8c, 0xe6, 0xa6, 0x9c, 0xe5, 0xba,
	0x95, 0xe5, 0x9b, 0xbe, 0x52, 0x10, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x53,
	0x69, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x44, 0x0a, 0x11, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x52,
	0x61, 0x6e, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x50, 0x61, 0x74, 0x68, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x8e, 0x92, 0xe8, 0xa1, 0x8c, 0xe6, 0xa6, 0x9c,
	0xe5, 0xa4, 0xb4, 0xe5, 0x83, 0x8f, 0xe6, 0xa1, 0x86, 0x52, 0x11, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x52, 0x61, 0x6e, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x46, 0x0a, 0x12,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x76, 0x6c, 0x42, 0x67, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x8e,
	0x92, 0xe8, 0xa1, 0x8c, 0xe6, 0xa6, 0x9c, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0xe6, 0xa1, 0x86,
	0x52, 0x12, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x76, 0x6c, 0x42, 0x67,
	0x50, 0x61, 0x74, 0x68, 0x22, 0x84, 0x07, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe5, 0x8a,
	0xa8, 0xe4, 0xbd, 0x9c, 0x49, 0x44, 0x52, 0x08, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x12, 0x30, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x8a, 0xa8, 0xe4, 0xbd, 0x9c,
	0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x8a, 0xa8, 0xe4,
	0xbd, 0x9c, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x73, 0x63, 0x12, 0x30, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x63,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x8a,
	0xa8, 0xe4, 0xbd, 0x9c, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x8a, 0xa8,
	0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe8, 0xb4, 0xa8, 0x52, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x32, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x8a, 0xa8,
	0xe4, 0xbd, 0x9c, 0xe5, 0x88, 0x86, 0xe7, 0xb1, 0xbb, 0x52, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x0a, 0x42, 0x69, 0x6e, 0x64, 0x48, 0x65,
	0x72, 0x6f, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e,
	0xe7, 0xbb, 0x91, 0xe5, 0xae, 0x9a, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0x49, 0x44, 0x52, 0x0a,
	0x42, 0x69, 0x6e, 0x64, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x0a, 0x42, 0x69,
	0x6e, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x12,
	0xea, 0xb5, 0x18, 0x0e, 0xe7, 0xbb, 0x91, 0xe5, 0xae, 0x9a, 0xe7, 0x9a, 0xae, 0xe8, 0x82, 0xa4,
	0x49, 0x44, 0x52, 0x0a, 0x42, 0x69, 0x6e, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x3d,
	0x0a, 0x0f, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe9, 0xa2, 0x84,
	0xe8, 0xa7, 0x88, 0xe5, 0x9b, 0xbe, 0xe7, 0x89, 0x87, 0x55, 0x52, 0x4c, 0x52, 0x0f, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x3d, 0x0a,
	0x0f, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe9, 0xa2, 0x84, 0xe8,
	0xa7, 0x88, 0xe8, 0xa7, 0x86, 0xe9, 0xa2, 0x91, 0x55, 0x52, 0x4c, 0x52, 0x0f, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x39, 0x0a, 0x0d,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe5, 0x8a, 0xa8, 0xe4, 0xbd, 0x9c, 0x41,
	0x67, 0x65, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x37, 0x0a, 0x09, 0x49, 0x73, 0x4d, 0x6f, 0x76,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15,
	0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8f, 0xaf, 0xe7, 0xa7, 0xbb, 0xe5, 0x8a, 0xa8, 0xe5,
	0x8a, 0xa8, 0xe4, 0xbd, 0x9c, 0x52, 0x09, 0x49, 0x73, 0x4d, 0x6f, 0x76, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x4c, 0x0a, 0x12, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x46,
	0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5,
	0x18, 0x18, 0xe5, 0x8a, 0xa8, 0xe4, 0xbd, 0x9c, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x97,
	0xa0, 0xe9, 0x99, 0x90, 0xe5, 0xbe, 0xaa, 0xe7, 0x8e, 0xaf, 0x52, 0x12, 0x49, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x12, 0x2c,
	0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x12, 0xea, 0xb5, 0x18, 0x0e, 0xe5, 0xa5, 0x97, 0xe7, 0xb3, 0xbb, 0xe5, 0x8a, 0xa8, 0xe4, 0xbd,
	0x9c, 0x49, 0x44, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x42, 0x0a, 0x0d,
	0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x44, 0x61, 0x79, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe4, 0xb8, 0x80, 0xe5, 0xa4, 0xa9, 0xe5,
	0x8f, 0xaf, 0xe8, 0xbd, 0xac, 0xe6, 0x8d, 0xa2, 0xe9, 0x92, 0xbb, 0xe7, 0x9f, 0xb3, 0xe6, 0x95,
	0xb0, 0x52, 0x0d, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x44, 0x61, 0x79,
	0x12, 0x39, 0x0a, 0x08, 0x4a, 0x75, 0x6d, 0x70, 0x46, 0x6f, 0x72, 0x6d, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73,
	0x44, 0x54, 0x5f, 0x4a, 0x75, 0x6d, 0x70, 0x46, 0x6f, 0x72, 0x6d, 0x42, 0x04, 0xea, 0xb5, 0x18,
	0x00, 0x52, 0x08, 0x4a, 0x75, 0x6d, 0x70, 0x46, 0x6f, 0x72, 0x6d, 0x22, 0x6b, 0x0a, 0x13, 0x52,
	0x65, 0x73, 0x41, 0x6e, 0x69, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x22, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0x52, 0x08, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x0a, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x73,
	0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x09, 0x54, 0x65, 0x61, 0x6d,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x0c, 0xe9, 0x98, 0x9f, 0xe4, 0xbc, 0x8d, 0xe7, 0xb4, 0xa2, 0xe5, 0xbc, 0x95, 0x52, 0x09, 0x54,
	0x65, 0x61, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x62, 0x0a, 0x1d, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe5, 0xb1, 0x80, 0xe5, 0x86, 0x85, 0xe4, 0xba, 0x92, 0xe5, 0x8a,
	0xa8, 0xe7, 0x89, 0xb9, 0xe6, 0x95, 0x88, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x1d, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x44, 0x0a, 0x14,
	0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x43, 0x68, 0x65, 0x73, 0x73, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x4e, 0x75, 0x6d, 0x12, 0x2c, 0x0a, 0x0b, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe4,
	0xba, 0xba, 0xe6, 0x95, 0xb0, 0x52, 0x0b, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4e,
	0x75, 0x6d, 0x22, 0x3d, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x43, 0x68, 0x65, 0x73,
	0x73, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x08, 0x49, 0x63, 0x6f,
	0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xb5, 0x18,
	0x06, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74,
	0x68, 0x22, 0x52, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x43, 0x68, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x34, 0x0a, 0x0f, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x93,
	0x81, 0xe8, 0xb4, 0xa8, 0x52, 0x0f, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x9c, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f,
	0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x37, 0x0a, 0x0a, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0d, 0x42, 0x17, 0xea, 0xb5, 0x18, 0x0e, 0xe6, 0x8b, 0x8d, 0xe5, 0x8d, 0x96, 0xe6,
	0x8e, 0x89, 0xe8, 0x90, 0xbd, 0x49, 0x44, 0xda, 0xb5, 0x18, 0x01, 0x36, 0x52, 0x0a, 0x44, 0x72,
	0x6f, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x4a, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x73,
	0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x18, 0xea, 0xb5, 0x18, 0x14, 0xe6, 0xa3, 0x8b, 0xe5, 0xad,
	0x90, 0xe4, 0xbf, 0x9d, 0xe5, 0xba, 0x95, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0x49, 0x44, 0x52,
	0x13, 0x43, 0x68, 0x65, 0x73, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6c,
	0x61, 0x6e, 0x49, 0x44, 0x22, 0xe0, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x43, 0x68, 0x65, 0x73,
	0x73, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1a, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x02, 0x49,
	0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x07, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0b,
	0xe6, 0x96, 0xb9, 0xe6, 0xa1, 0x88, 0xe7, 0xbb, 0x84, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x02, 0x52,
	0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x05, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x9d, 0x83,
	0xe9, 0x87, 0x8d, 0x52, 0x05, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x08, 0x44, 0x72,
	0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x52,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x41, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0xea, 0xb5,
	0x18, 0x00, 0x52, 0x08, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x3a, 0x19, 0x8a, 0x97,
	0x22, 0x02, 0x49, 0x44, 0x92, 0x97, 0x22, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0xf8,
	0x97, 0x22, 0x01, 0xa0, 0x97, 0x22, 0x01, 0x22, 0xb6, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x73,
	0x43, 0x68, 0x65, 0x73, 0x73, 0x41, 0x49, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0x52,
	0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x35, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4c,
	0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe9, 0x9a,
	0x8f, 0xe6, 0x9c, 0xba, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe6, 0x95, 0xb0, 0xe4, 0xb8, 0x8b,
	0xe9, 0x99, 0x90, 0x52, 0x08, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x6f, 0x77, 0x12, 0x37, 0x0a,
	0x09, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x69, 0x67, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe9, 0x9a, 0x8f, 0xe6, 0x9c, 0xba, 0xe5, 0x9b, 0x9e, 0xe5,
	0x90, 0x88, 0xe6, 0x95, 0xb0, 0xe4, 0xb8, 0x8a, 0xe9, 0x99, 0x90, 0x52, 0x09, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x48, 0x69, 0x67, 0x68, 0x3a, 0x08, 0xf8, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x02,
	0x22, 0xa3, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x43, 0x68, 0x65, 0x73, 0x73, 0x41, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a,
	0x0c, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1a, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0xad, 0x98, 0xe6, 0xb4, 0xbb, 0xe7,
	0x8e, 0xa9, 0xe5, 0xae, 0xb6, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xc8, 0xc1, 0x18, 0x01, 0x52,
	0x0c, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x31, 0x0a,
	0x09, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe6, 0x8b, 0x8d, 0xe5, 0x8d, 0x96, 0xe5, 0x93, 0x81, 0xe6,
	0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x09, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x3a, 0x14, 0x8a, 0x97, 0x22, 0x0c, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0xf8, 0x97, 0x22, 0x01, 0x22, 0xa7, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x43, 0x68,
	0x65, 0x73, 0x73, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x02,
	0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x09, 0x52, 0x61,
	0x69, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea,
	0xb5, 0x18, 0x12, 0xe5, 0x87, 0xba, 0xe4, 0xbb, 0xb7, 0xe9, 0x98, 0xb6, 0xe6, 0xae, 0xb5, 0xe6,
	0x97, 0xb6, 0xe9, 0x95, 0xbf, 0x52, 0x09, 0x52, 0x61, 0x69, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x32, 0x0a, 0x08, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe8, 0x8e, 0xb7, 0xe8, 0x83, 0x9c, 0xe9, 0x98,
	0xb6, 0xe6, 0xae, 0xb5, 0xe6, 0x97, 0xb6, 0xe9, 0x95, 0xbf, 0x52, 0x08, 0x53, 0x68, 0x6f, 0x77,
	0x54, 0x69, 0x6d, 0x65, 0x3a, 0x0a, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0xf8, 0x97, 0x22, 0x01,
	0x22, 0x8d, 0x02, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x43, 0x68, 0x65, 0x73, 0x73, 0x41, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x66, 0x67, 0x12, 0x28, 0x0a,
	0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0xea, 0xb5, 0x18,
	0x0c, 0xe8, 0xa7, 0xa3, 0xe9, 0x94, 0x81, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xc8, 0xc1, 0x18,
	0x01, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x31, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x19, 0xea, 0xb5,
	0x18, 0x15, 0xe7, 0xac, 0xac, 0xe4, 0xb8, 0x80, 0xe8, 0xbd, 0xae, 0xe8, 0xa7, 0xa3, 0xe9, 0x94,
	0x81, 0xe6, 0x80, 0xbb, 0xe6, 0x95, 0xb0, 0x52, 0x0b, 0x50, 0x68, 0x61, 0x73, 0x65, 0x31, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x50, 0x68, 0x61, 0x73, 0x65, 0x32, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe7,
	0xac, 0xac, 0xe4, 0xba, 0x8c, 0xe8, 0xbd, 0xae, 0xe8, 0xa7, 0xa3, 0xe9, 0x94, 0x81, 0xe6, 0x80,
	0xbb, 0xe6, 0x95, 0xb0, 0x52, 0x0b, 0x50, 0x68, 0x61, 0x73, 0x65, 0x32, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x50, 0x68, 0x61, 0x73, 0x65, 0x33, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe7, 0xac, 0xac, 0xe4,
	0xb8, 0x89, 0xe8, 0xbd, 0xae, 0xe8, 0xa7, 0xa3, 0xe9, 0x94, 0x81, 0xe6, 0x80, 0xbb, 0xe6, 0x95,
	0xb0, 0x52, 0x0b, 0x50, 0x68, 0x61, 0x73, 0x65, 0x33, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x10,
	0x8a, 0x97, 0x22, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0xf0, 0x97, 0x22, 0x01, 0xf8, 0x97, 0x22, 0x01,
	0x22, 0x90, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x43, 0x68, 0x65, 0x73, 0x73, 0x41, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x43, 0x66, 0x67, 0x12,
	0x32, 0x0a, 0x09, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x8f, 0x82, 0xe4, 0xb8, 0x8e, 0xe4, 0xba,
	0xba, 0xe6, 0x95, 0xb0, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x09, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x0f, 0xea, 0xb5, 0x18, 0x06, 0xe4, 0xbd, 0x8d, 0xe7, 0xbd,
	0xae, 0xda, 0xb5, 0x18, 0x01, 0x38, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x3a, 0x11, 0x8a, 0x97, 0x22, 0x09, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0xf8,
	0x97, 0x22, 0x01, 0x22, 0xb2, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x43, 0x68,
	0x65, 0x73, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a,
	0x08, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x06, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0x52, 0x08, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x06, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x58, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0b, 0xea, 0xb5, 0x18, 0x07, 0x58, 0xe5, 0x9d, 0x90, 0xe6, 0xa0, 0x87, 0x52, 0x06,
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x58, 0x12, 0x23, 0x0a, 0x06, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x5a,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xea, 0xb5, 0x18, 0x07, 0x5a, 0xe5, 0x9d, 0x90,
	0xe6, 0xa0, 0x87, 0x52, 0x06, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x5a, 0x12, 0x2b, 0x0a, 0x07, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x49, 0x44, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x11, 0xea, 0xb5,
	0x18, 0x08, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0x49, 0x44, 0xda, 0xb5, 0x18, 0x01, 0x33, 0x52,
	0x07, 0x45, 0x71, 0x75, 0x69, 0x70, 0x49, 0x44, 0x22, 0xcd, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x73,
	0x50, 0x72, 0x6f, 0x6a, 0x38, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x44, 0x65, 0x67, 0x72, 0x65,
	0x65, 0x12, 0x16, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xea,
	0xb5, 0x18, 0x02, 0x49, 0x44, 0x52, 0x02, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x06, 0x44, 0x65, 0x67,
	0x72, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe7,
	0x86, 0x9f, 0xe7, 0xbb, 0x83, 0xe5, 0xba, 0xa6, 0x52, 0x06, 0x44, 0x65, 0x67, 0x72, 0x65, 0x65,
	0x12, 0x24, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x0c, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x04,
	0x49, 0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c,
	0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0x52, 0x04, 0x49, 0x63,
	0x6f, 0x6e, 0x3a, 0x04, 0xf0, 0x97, 0x22, 0x01, 0x22, 0xaf, 0x02, 0x0a, 0x0e, 0x52, 0x65, 0x73,
	0x43, 0x68, 0x65, 0x73, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea,
	0xb5, 0x18, 0x08, 0xe6, 0x91, 0x86, 0xe6, 0x94, 0xbe, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52,
	0x08, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x07, 0x50, 0x72, 0x65,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09,
	0xe9, 0xa2, 0x84, 0xe5, 0x8a, 0xa0, 0xe8, 0xbd, 0xbd, 0x52, 0x07, 0x50, 0x72, 0x65, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x3a, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x87,
	0x86, 0xe5, 0xa4, 0x87, 0xe9, 0x98, 0xb6, 0xe6, 0xae, 0xb5, 0xe9, 0x9f, 0xb3, 0xe6, 0x95, 0x88,
	0x52, 0x0c, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1e,
	0x0a, 0x04, 0x44, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xb5,
	0x18, 0x06, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x04, 0x44, 0x65, 0x73, 0x63, 0x12, 0x54,
	0x0a, 0x0c, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52,
	0x65, 0x73, 0x44, 0x54, 0x5f, 0x43, 0x68, 0x65, 0x73, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90,
	0xda, 0xb5, 0x18, 0x02, 0x31, 0x30, 0x52, 0x0c, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x3a, 0x14, 0x8a, 0x97, 0x22, 0x08, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0xf8, 0x97, 0x22, 0x01, 0x22, 0x5b, 0x0a, 0x18, 0x52, 0x65,
	0x73, 0x43, 0x68, 0x65, 0x73, 0x73, 0x50, 0x69, 0x63, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x41, 0x75,
	0x74, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x06, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0x52, 0x02, 0x49, 0x44, 0x12, 0x27,
	0x0a, 0x06, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x44, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x0f,
	0xea, 0xb5, 0x18, 0x06, 0xe5, 0x8d, 0xa1, 0xe7, 0x89, 0x8c, 0xda, 0xb5, 0x18, 0x01, 0x35, 0x52,
	0x06, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x44, 0x22, 0x87, 0x04, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x43,
	0x68, 0x65, 0x73, 0x73, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x06,
	0x53, 0x6b, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x08, 0xe7, 0x9a, 0xae, 0xe8, 0x82, 0xa4, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x06,
	0x53, 0x6b, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x4a, 0x0a, 0x11, 0x48, 0x65, 0x72, 0x6f, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe4, 0xba, 0x8c,
	0xe6, 0x98, 0x9f, 0xe5, 0x90, 0x88, 0xe6, 0x88, 0x90, 0xe8, 0xaf, 0xad, 0xe9, 0x9f, 0xb3, 0x52,
	0x11, 0x48, 0x65, 0x72, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x6e,
	0x64, 0x32, 0x12, 0x4a, 0x0a, 0x11, 0x48, 0x65, 0x72, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73,
	0x65, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xea,
	0xb5, 0x18, 0x18, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe4, 0xb8, 0x89, 0xe6, 0x98, 0x9f, 0xe5,
	0x90, 0x88, 0xe6, 0x88, 0x90, 0xe8, 0xaf, 0xad, 0xe9, 0x9f, 0xb3, 0x52, 0x11, 0x48, 0x65, 0x72,
	0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x33, 0x12, 0x3a,
	0x0a, 0x0c, 0x48, 0x65, 0x72, 0x6f, 0x42, 0x75, 0x79, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90,
	0xe6, 0x8b, 0x9b, 0xe5, 0x8b, 0x9f, 0xe8, 0xaf, 0xad, 0xe9, 0x9f, 0xb3, 0x52, 0x0c, 0x48, 0x65,
	0x72, 0x6f, 0x42, 0x75, 0x79, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x0c, 0x48, 0x65,
	0x72, 0x6f, 0x57, 0x69, 0x6e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe8, 0x83, 0x9c, 0xe5,
	0x88, 0xa9, 0xe8, 0xaf, 0xad, 0xe9, 0x9f, 0xb3, 0x52, 0x0c, 0x48, 0x65, 0x72, 0x6f, 0x57, 0x69,
	0x6e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x42, 0x0a, 0x10, 0x48, 0x65, 0x72, 0x6f, 0x4f, 0x6e,
	0x46, 0x69, 0x67, 0x68, 0x74, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe4, 0xb8, 0x8a, 0xe9,
	0x98, 0xb5, 0xe8, 0xaf, 0xad, 0xe9, 0x9f, 0xb3, 0x52, 0x10, 0x48, 0x65, 0x72, 0x6f, 0x4f, 0x6e,
	0x46, 0x69, 0x67, 0x68, 0x74, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x0a, 0x42, 0x61,
	0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x4f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0x56, 0x4f,
	0x52, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x4f, 0x12, 0x33, 0x0a, 0x0b,
	0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x46, 0x58, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x11, 0xea, 0xb5, 0x18, 0x0d, 0x42, 0x61, 0x6e, 0x6b, 0xe8, 0xb5, 0x84, 0xe6, 0xba,
	0x90, 0x53, 0x46, 0x58, 0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x46,
	0x58, 0x3a, 0x0e, 0x8a, 0x97, 0x22, 0x06, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x44, 0xf0, 0x97, 0x22,
	0x01, 0x22, 0xa4, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x43, 0x68, 0x65, 0x73, 0x73, 0x53, 0x69,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x06, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2b,
	0x0a, 0x09, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x49, 0x44, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe6, 0x91, 0x86, 0xe6, 0x94, 0xbe, 0x49, 0x44, 0x31,
	0x52, 0x09, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x49, 0x44, 0x31, 0x12, 0x2b, 0x0a, 0x09, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x49, 0x44, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d,
	0xea, 0xb5, 0x18, 0x09, 0xe6, 0x91, 0x86, 0xe6, 0x94, 0xbe, 0x49, 0x44, 0x32, 0x52, 0x09, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x49, 0x44, 0x32, 0x12, 0x1e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe7, 0xa7, 0x8d, 0xe7,
	0xb1, 0xbb, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe7, 0x05, 0x0a, 0x17, 0x52, 0x65, 0x73,
	0x43, 0x68, 0x65, 0x73, 0x73, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x0c, 0x43, 0x68, 0x65, 0x73, 0x73, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x06,
	0xe5, 0x93, 0x81, 0xe8, 0xb4, 0xa8, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x0c, 0x43, 0x68, 0x65, 0x73,
	0x73, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e, 0xea, 0xb5, 0x18,
	0x06, 0xe6, 0x98, 0x9f, 0xe7, 0xba, 0xa7, 0xc8, 0xc1, 0x18, 0x02, 0x52, 0x09, 0x53, 0x74, 0x61,
	0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x36, 0x0a, 0x0d, 0x43, 0x68, 0x65, 0x73, 0x73, 0x42,
	0x75, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xea,
	0xb5, 0x18, 0x0c, 0xe8, 0xb4, 0xad, 0xe4, 0xb9, 0xb0, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0x52,
	0x0d, 0x43, 0x68, 0x65, 0x73, 0x73, 0x42, 0x75, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x38,
	0x0a, 0x0e, 0x43, 0x68, 0x65, 0x73, 0x73, 0x53, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x94, 0xae, 0xe5,
	0x8d, 0x96, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0x52, 0x0e, 0x43, 0x68, 0x65, 0x73, 0x73, 0x53,
	0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x1a, 0x43, 0x68, 0x65, 0x73,
	0x73, 0x42, 0x75, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x75, 0x70, 0x65, 0x72, 0x46, 0x61,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0xea, 0xb5,
	0x18, 0x12, 0xe5, 0xbf, 0xab, 0xe6, 0xa3, 0x8b, 0xe8, 0xb4, 0xad, 0xe4, 0xb9, 0xb0, 0xe4, 0xbb,
	0xb7, 0xe6, 0xa0, 0xbc, 0x52, 0x1a, 0x43, 0x68, 0x65, 0x73, 0x73, 0x42, 0x75, 0x79, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x53, 0x75, 0x70, 0x65, 0x72, 0x46, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x58, 0x0a, 0x1b, 0x43, 0x68, 0x65, 0x73, 0x73, 0x53, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x53, 0x75, 0x70, 0x65, 0x72, 0x46, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0xbf, 0xab, 0xe6, 0xa3,
	0x8b, 0xe5, 0x94, 0xae, 0xe5, 0x8d, 0x96, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0x52, 0x1b, 0x43,
	0x68, 0x65, 0x73, 0x73, 0x53, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x75, 0x70,
	0x65, 0x72, 0x46, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x0f, 0x43, 0x68,
	0x65, 0x73, 0x73, 0x44, 0x6d, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0xbb, 0x93, 0xe7, 0xae, 0x97, 0xe4,
	0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0x52, 0x0f, 0x43, 0x68, 0x65, 0x73, 0x73, 0x44, 0x6d, 0x61, 0x67,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x53, 0x0a, 0x17, 0x43, 0x68, 0x65, 0x73, 0x73, 0x44,
	0x6d, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe5, 0xa4, 0xa7,
	0xe4, 0xb9, 0xb1, 0xe6, 0x96, 0x97, 0xe7, 0xbb, 0x93, 0xe7, 0xae, 0x97, 0xe4, 0xbc, 0xa4, 0xe5,
	0xae, 0xb3, 0x52, 0x17, 0x43, 0x68, 0x65, 0x73, 0x73, 0x44, 0x6d, 0x61, 0x67, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x46, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x5a, 0x0a, 0x1c, 0x43,
	0x68, 0x65, 0x73, 0x73, 0x44, 0x6d, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x75,
	0x70, 0x65, 0x72, 0x46, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0xbf, 0xab, 0xe6, 0xa3, 0x8b, 0xe7, 0xbb, 0x93,
	0xe7, 0xae, 0x97, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0x52, 0x1c, 0x43, 0x68, 0x65, 0x73, 0x73,
	0x44, 0x6d, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x75, 0x70, 0x65, 0x72, 0x46,
	0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x73, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe4, 0xbb, 0xb7, 0xe5, 0x80, 0xbc, 0x52, 0x0f, 0x43, 0x68,
	0x65, 0x73, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x3a, 0x23, 0x8a,
	0x97, 0x22, 0x17, 0x43, 0x68, 0x65, 0x73, 0x73, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2c,
	0x20, 0x53, 0x74, 0x61, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0xf0, 0x97, 0x22, 0x01, 0xf8, 0x97,
	0x22, 0x01, 0x22, 0xf5, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x43, 0x68, 0x65, 0x73, 0x73, 0x43,
	0x61, 0x72, 0x64, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x30, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x76, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x8d, 0xa1, 0xe5, 0xba, 0x93, 0xe7, 0xad,
	0x89, 0xe7, 0xba, 0xa7, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x4c, 0x76, 0x12, 0x37, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x93, 0x81,
	0xe8, 0xb4, 0xa8, 0xe6, 0xa6, 0x82, 0xe7, 0x8e, 0x87, 0xda, 0xb5, 0x18, 0x01, 0x35, 0x52, 0x0b,
	0x43, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x43,
	0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0d, 0xea, 0xb5,
	0x18, 0x09, 0xe5, 0x8d, 0xa1, 0xe6, 0xa7, 0xbd, 0xe6, 0x95, 0xb0, 0x52, 0x07, 0x43, 0x61, 0x72,
	0x64, 0x4e, 0x75, 0x6d, 0x12, 0x2a, 0x0a, 0x06, 0x53, 0x68, 0x6f, 0x77, 0x55, 0x49, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6,
	0x55, 0x49, 0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba, 0x52, 0x06, 0x53, 0x68, 0x6f, 0x77, 0x55, 0x49,
	0x3a, 0x18, 0x8a, 0x97, 0x22, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x76, 0xf0, 0x97,
	0x22, 0x01, 0xf8, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x02, 0x22, 0x80, 0x01, 0x0a, 0x11, 0x52,
	0x65, 0x73, 0x43, 0x68, 0x65, 0x73, 0x73, 0x50, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x28, 0x0a, 0x07, 0x50, 0x68, 0x61, 0x73, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x06, 0xe9, 0x98, 0xb6, 0xe6, 0xae, 0xb5, 0xc8, 0xc1, 0x18,
	0x01, 0x52, 0x07, 0x50, 0x68, 0x61, 0x73, 0x65, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x08, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe6, 0x8c, 0x81, 0xe7, 0xbb, 0xad, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x08,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x13, 0x8a, 0x97, 0x22, 0x07, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0xf8, 0x97, 0x22, 0x01, 0x22, 0x62, 0x0a,
	0x15, 0x52, 0x65, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x46, 0x69, 0x67, 0x68, 0x74, 0x48, 0x65,
	0x72, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x09, 0x48, 0x65, 0x72, 0x6f, 0x43, 0x66,
	0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe8,
	0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x09, 0x48, 0x65, 0x72,
	0x6f, 0x43, 0x66, 0x67, 0x49, 0x44, 0x3a, 0x19, 0x8a, 0x97, 0x22, 0x09, 0x48, 0x65, 0x72, 0x6f,
	0x43, 0x66, 0x67, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0xf8, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22,
	0x02, 0x22, 0xe3, 0x03, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x12, 0x24, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x06, 0xe8, 0xbd, 0xae, 0xe6, 0x95, 0xb0, 0xc8, 0xc1, 0x18,
	0x01, 0x52, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x57, 0x69, 0x6e, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x0c, 0xe8, 0xbf, 0x9e, 0xe8, 0x83, 0x9c, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0x52, 0x09, 0x57,
	0x69, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x30, 0x0a, 0x0a, 0x4c, 0x6f, 0x73, 0x65,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe8, 0xbf, 0x9e, 0xe8, 0xb4, 0xa5, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0x52, 0x0a,
	0x4c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x47, 0x0a, 0x11, 0x46, 0x61,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x57, 0x69, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe5, 0xa4, 0xa7, 0xe4, 0xb9,
	0xb1, 0xe6, 0x96, 0x97, 0xe8, 0xbf, 0x9e, 0xe8, 0x83, 0x9c, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1,
	0x52, 0x11, 0x46, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x57, 0x69, 0x6e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x12, 0x49, 0x0a, 0x12, 0x46, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4c,
	0x6f, 0x73, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x19, 0xea, 0xb5, 0x18, 0x15, 0xe5, 0xa4, 0xa7, 0xe4, 0xb9, 0xb1, 0xe6, 0x96, 0x97, 0xe8, 0xbf,
	0x9e, 0xe8, 0xb4, 0xa5, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0x52, 0x12, 0x46, 0x61, 0x73, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x4e,
	0x0a, 0x16, 0x53, 0x75, 0x70, 0x65, 0x72, 0x46, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x57,
	0x69, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16,
	0xea, 0xb5, 0x18, 0x12, 0xe5, 0xbf, 0xab, 0xe6, 0xa3, 0x8b, 0xe8, 0xbf, 0x9e, 0xe8, 0x83, 0x9c,
	0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0x52, 0x16, 0x53, 0x75, 0x70, 0x65, 0x72, 0x46, 0x61, 0x73,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x57, 0x69, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x50,
	0x0a, 0x17, 0x53, 0x75, 0x70, 0x65, 0x72, 0x46, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4c,
	0x6f, 0x73, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0xbf, 0xab, 0xe6, 0xa3, 0x8b, 0xe8, 0xbf, 0x9e, 0xe8, 0xb4,
	0xa5, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0x52, 0x17, 0x53, 0x75, 0x70, 0x65, 0x72, 0x46, 0x61,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x3a, 0x15, 0x8a, 0x97, 0x22, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0xf0, 0x97, 0x22, 0x01, 0xf8,
	0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x02, 0x22, 0xdc, 0x01, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6b, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x20,
	0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea,
	0xb5, 0x18, 0x06, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x49, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x57, 0x69, 0x6e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0xea, 0xb5, 0x18, 0x1b, 0xe7,
	0xbb, 0x88, 0xe7, 0xbb, 0x93, 0xe8, 0xbf, 0x9e, 0xe8, 0x83, 0x9c, 0xe5, 0xa5, 0x96, 0xe5, 0x8a,
	0xb1, 0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81, 0xe6, 0x95, 0xb0, 0x52, 0x0f, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x57, 0x69, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x4b, 0x0a, 0x10, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x4c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0xea, 0xb5, 0x18, 0x1b, 0xe7, 0xbb, 0x88, 0xe7, 0xbb,
	0x93, 0xe8, 0xbf, 0x9e, 0xe8, 0xb4, 0xa5, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe9, 0x87, 0x91,
	0xe5, 0xb8, 0x81, 0xe6, 0x95, 0xb0, 0x52, 0x10, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4c, 0x6f,
	0x73, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x3a, 0x0c, 0xf0, 0x97, 0x22, 0x01, 0xf8, 0x97,
	0x22, 0x01, 0x98, 0x97, 0x22, 0x02, 0x22, 0x38, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x06,
	0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xb5,
	0x18, 0x06, 0xe6, 0x96, 0x87, 0xe6, 0x9c, 0xac, 0x52, 0x06, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65,
	0x22, 0xd5, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x43, 0x68, 0x65, 0x73, 0x73, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x52, 0x61, 0x6e,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x8e, 0x92,
	0xe5, 0x90, 0x8d, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x30, 0x0a,
	0x08, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0x81, 0x8c, 0xe4, 0xb8, 0x9a, 0xe9, 0x98, 0xb5, 0xe8, 0x90,
	0xa5, 0xc8, 0xc1, 0x18, 0x02, 0x52, 0x08, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x4f, 0x0a, 0x0a, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65,
	0x73, 0x44, 0x54, 0x5f, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65,
	0x42, 0x12, 0xea, 0xb5, 0x18, 0x09, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe8, 0xaf, 0xad, 0xda,
	0xb5, 0x18, 0x01, 0x33, 0x52, 0x0a, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x3a, 0x16, 0x8a, 0x97, 0x22, 0x0e, 0x52, 0x61, 0x6e, 0x6b, 0x2c, 0x20, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0xf0, 0x97, 0x22, 0x01, 0x22, 0xc2, 0x03, 0x0a, 0x1f, 0x52, 0x65, 0x73,
	0x43, 0x68, 0x65, 0x73, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x41, 0x72,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x66, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe9, 0x98,
	0xb5, 0xe5, 0xae, 0xb9, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x24,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe9, 0x98, 0xb5, 0xe5, 0xae, 0xb9, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe9, 0x98, 0xb5, 0xe5, 0xae, 0xb9, 0xe5, 0x90,
	0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x44, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x0c, 0xe9, 0x98, 0xb5, 0xe5, 0xae, 0xb9, 0xe9, 0x9a, 0xbe, 0xe5, 0xba, 0xa6,
	0x52, 0x0a, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x0e,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x8e, 0xa8, 0xe8, 0x8d, 0x90,
	0xe6, 0x8c, 0x87, 0xe6, 0x95, 0xb0, 0x52, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x63, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe9, 0x98, 0xb5, 0xe5, 0xae, 0xb9,
	0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x04, 0x44, 0x65, 0x73, 0x63, 0x12, 0x2a, 0x0a, 0x07,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea,
	0xb5, 0x18, 0x0c, 0xe9, 0x98, 0xb5, 0xe5, 0xae, 0xb9, 0xe7, 0x89, 0xb9, 0xe6, 0x80, 0xa7, 0x52,
	0x07, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x48, 0x65, 0x72, 0x6f,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x11, 0xea, 0xb5, 0x18, 0x08,
	0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0x49, 0x44, 0xda, 0xb5, 0x18, 0x01, 0x39, 0x52, 0x08, 0x48,
	0x65, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x48, 0x65,
	0x72, 0x6f, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x1e, 0xea, 0xb5, 0x18, 0x15, 0xe6, 0x98,
	0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x98, 0xaf, 0xe6, 0xa0, 0xb8, 0xe5, 0xbf, 0x83, 0xe8, 0x8b, 0xb1,
	0xe9, 0x9b, 0x84, 0xda, 0xb5, 0x18, 0x01, 0x39, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x48, 0x65, 0x72,
	0x6f, 0x3a, 0x0a, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0x22, 0x93, 0x01,
	0x0a, 0x1d, 0x43, 0x68, 0x65, 0x73, 0x73, 0x41, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72,
	0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xea, 0xb5, 0x18,
	0x02, 0x49, 0x44, 0x52, 0x02, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe6,
	0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe5, 0x80, 0xbc, 0x52, 0x08, 0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x4d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x8f,
	0xe5, 0x80, 0xbc, 0x52, 0x08, 0x4d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x04, 0xf0,
	0x97, 0x22, 0x01, 0x22, 0x82, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x38,
	0x48, 0x65, 0x6c, 0x70, 0x44, 0x65, 0x73, 0x63, 0x4d, 0x61, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0xa0, 0x87, 0xe9, 0xa2, 0x98, 0x52,
	0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c,
	0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0x52, 0x0a, 0x53, 0x68,
	0x6f, 0x77, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x36, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x50,
	0x72, 0x6f, 0x6a, 0x38, 0x48, 0x65, 0x6c, 0x70, 0x44, 0x65, 0x73, 0x63, 0x50, 0x69, 0x63, 0x73,
	0x12, 0x1e, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xea, 0xb5, 0x18, 0x06, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x22, 0xdb, 0x02, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x38, 0x48, 0x65, 0x6c,
	0x70, 0x44, 0x65, 0x73, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x06, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x25, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x09, 0xea, 0xb5, 0x18, 0x05, 0xe7, 0x88, 0xb6, 0x49, 0x44, 0x52,
	0x08, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x05, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0xa0,
	0x87, 0xe9, 0xa2, 0x98, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x50,
	0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x52, 0x65, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x38, 0x48, 0x65, 0x6c, 0x70,
	0x44, 0x65, 0x73, 0x63, 0x50, 0x69, 0x63, 0x73, 0x42, 0x0f, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x9b,
	0xbe, 0xe7, 0x89, 0x87, 0xda, 0xb5, 0x18, 0x01, 0x35, 0x52, 0x04, 0x50, 0x69, 0x63, 0x73, 0x12,
	0x26, 0x0a, 0x07, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe8, 0xa7, 0x86, 0xe9, 0xa2, 0x91, 0x49, 0x44, 0x52, 0x07,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xaf,
	0xb4, 0xe6, 0x98, 0x8e, 0xe6, 0x96, 0x87, 0xe6, 0x9c, 0xac, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xea, 0xb5,
	0x18, 0x1b, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe5, 0x9b, 0x9e, 0xe6, 0xb5, 0x81, 0xe7, 0x9a,
	0x84, 0xe8, 0xaf, 0xb4, 0xe6, 0x98, 0x8e, 0xe6, 0x96, 0x87, 0xe6, 0x9c, 0xac, 0x52, 0x0f, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x22, 0xf7,
	0x01, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x38, 0x48, 0x65, 0x6c, 0x70, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x06, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0x52, 0x02, 0x49, 0x44, 0x12, 0x20,
	0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea,
	0xb5, 0x18, 0x06, 0xe6, 0xa0, 0x87, 0xe9, 0xa2, 0x98, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x36, 0x0a, 0x0a, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x9c, 0xac, 0xe5, 0x9c, 0xb0,
	0xe8, 0xa7, 0x86, 0xe9, 0xa2, 0x91, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x0a, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x32, 0x0a, 0x08, 0x4e, 0x65, 0x74, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12,
	0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe8, 0xa7, 0x86, 0xe9, 0xa2, 0x91, 0xe5, 0x9c, 0xb0, 0xe5,
	0x9d, 0x80, 0x52, 0x08, 0x4e, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x3a, 0x0a, 0x0c,
	0x4e, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe8, 0xa7,
	0x86, 0xe9, 0xa2, 0x91, 0xe5, 0xa4, 0xa7, 0xe5, 0xb0, 0x8f, 0x52, 0x0c, 0x4e, 0x65, 0x74, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x86, 0x02, 0x0a, 0x13, 0x52, 0x65, 0x73,
	0x43, 0x68, 0x65, 0x73, 0x73, 0x53, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x35, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe5, 0xad, 0x90, 0xe7, 0x8e,
	0xaf, 0xe8, 0x8a, 0x82, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0b, 0x53, 0x75, 0x62, 0x50,
	0x72, 0x6f, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c,
	0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x52, 0x09, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x9d, 0x83,
	0xe9, 0x87, 0x8d, 0x52, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x32, 0x0a, 0x0b, 0x54,
	0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x96, 0x87, 0xe6, 0x9c, 0xac, 0xe5, 0x86, 0x85, 0xe5,
	0xae, 0xb9, 0x52, 0x0b, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x30, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xa3, 0xb0, 0xe9, 0x9f, 0xb3, 0xe4,
	0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0x52, 0x0a, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x22, 0x5e, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x43, 0x68, 0x65, 0x73, 0x73, 0x43, 0x61, 0x72,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x09, 0x48, 0x65, 0x72, 0x6f, 0x43, 0x66, 0x67,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44,
	0x52, 0x09, 0x48, 0x65, 0x72, 0x6f, 0x43, 0x66, 0x67, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x07, 0x43,
	0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5,
	0x18, 0x06, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x07, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75,
	0x6d, 0x22, 0xc5, 0x02, 0x0a, 0x15, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x07, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x08, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x07,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x0b, 0x52, 0x61, 0x6e, 0x64, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0xea, 0xb5,
	0x18, 0x0f, 0xe9, 0x9a, 0x8f, 0xe6, 0x9c, 0xba, 0xe6, 0x96, 0xb9, 0xe6, 0xa1, 0x88, 0xe7, 0xbb,
	0x84, 0x52, 0x0b, 0x52, 0x61, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x38,
	0x0a, 0x0e, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe9, 0x80, 0x89, 0xe7,
	0x89, 0x8c, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0e, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x14, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x72, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x8d, 0xa2, 0xe7,
	0x89, 0x8c, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x14, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x43, 0x61, 0x72, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38,
	0x0a, 0x0e, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x43, 0x61, 0x72, 0x64, 0x54, 0x75, 0x72, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe9, 0x80, 0x89, 0xe7,
	0x89, 0x8c, 0xe8, 0xbd, 0xae, 0xe6, 0xac, 0xa1, 0x52, 0x0e, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65,
	0x43, 0x61, 0x72, 0x64, 0x54, 0x75, 0x72, 0x6e, 0x3a, 0x0f, 0x8a, 0x97, 0x22, 0x07, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x49, 0x44, 0xf8, 0x97, 0x22, 0x01, 0x22, 0xca, 0x04, 0x0a, 0x1a, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x64, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x2f, 0x0a, 0x0b, 0x52, 0x61, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe6, 0x96, 0xb9, 0xe6, 0xa1,
	0x88, 0xe7, 0xbb, 0x84, 0x52, 0x0b, 0x52, 0x61, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x9d, 0x83, 0xe9, 0x87, 0x8d, 0x52, 0x06, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2b, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x0f, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0xa5, 0x96,
	0xe5, 0x8a, 0xb1, 0xda, 0xb5, 0x18, 0x01, 0x36, 0x52, 0x08, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x41, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x48, 0x65, 0x72, 0x6f,
	0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x15, 0xea, 0xb5,
	0x18, 0x11, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe5, 0x85, 0xac, 0xe5, 0x85, 0xb1, 0xe6, 0xb1,
	0xa0, 0x49, 0x44, 0x52, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x48, 0x65, 0x72, 0x6f, 0x50,
	0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x43, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x15, 0xea, 0xb5, 0x18, 0x11, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0xe5, 0x85, 0xac, 0xe5,
	0x85, 0xb1, 0xe6, 0xb1, 0xa0, 0x49, 0x44, 0x52, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x51, 0x0a, 0x15, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x48, 0x65, 0x72, 0x6f, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x6f, 0x6f,
	0x6c, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1b, 0xea, 0xb5, 0x18, 0x17, 0xe8,
	0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0xe5, 0x85, 0xac, 0xe5, 0x85,
	0xb1, 0xe6, 0xb1, 0xa0, 0x49, 0x44, 0x52, 0x15, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x48, 0x65,
	0x72, 0x6f, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x32, 0x0a,
	0x08, 0x4d, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x16, 0xea, 0xb5, 0x18, 0x12, 0xe4, 0xba, 0xba, 0xe6, 0x95, 0xb0, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb,
	0xb6, 0xe4, 0xb8, 0x8b, 0xe9, 0x99, 0x90, 0x52, 0x08, 0x4d, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x32, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe4, 0xba, 0xba, 0xe6, 0x95, 0xb0, 0xe6,
	0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe4, 0xb8, 0x8a, 0xe9, 0x99, 0x90, 0x52, 0x08, 0x4d, 0x61, 0x78,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0f, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43,
	0x61, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x8d, 0x95, 0xe5, 0x8d, 0xa1, 0xe4, 0xbb, 0xb7, 0xe5, 0x80, 0xbc,
	0x52, 0x0f, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x13, 0xf8, 0x97, 0x22, 0x01, 0x92, 0x97, 0x22, 0x0b, 0x52, 0x61, 0x6e, 0x64, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x22, 0x95, 0x02, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x43, 0x68,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x6f, 0x78, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1c, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5,
	0x18, 0x08, 0xe5, 0xae, 0x9d, 0xe7, 0xae, 0xb1, 0x49, 0x44, 0x52, 0x02, 0x49, 0x44, 0x12, 0x24,
	0x0a, 0x06, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c,
	0xea, 0xb5, 0x18, 0x08, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0x49, 0x44, 0x52, 0x06, 0x44, 0x72,
	0x6f, 0x70, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x05, 0x44, 0x65, 0x73, 0x63, 0x31, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x11, 0xea, 0xb5, 0x18, 0x0d, 0xe5, 0xae, 0x9d, 0xe7, 0xae, 0xb1, 0xe6,
	0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x31, 0x52, 0x05, 0x44, 0x65, 0x73, 0x63, 0x31, 0x12, 0x27, 0x0a,
	0x05, 0x44, 0x65, 0x73, 0x63, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xea, 0xb5,
	0x18, 0x0d, 0xe5, 0xae, 0x9d, 0xe7, 0xae, 0xb1, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x32, 0x52,
	0x05, 0x44, 0x65, 0x73, 0x63, 0x32, 0x12, 0x32, 0x0a, 0x08, 0x4d, 0x65, 0x73, 0x68, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0xae,
	0x9d, 0xe7, 0xae, 0xb1, 0xe6, 0xa8, 0xa1, 0xe5, 0x9e, 0x8b, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84,
	0x52, 0x08, 0x4d, 0x65, 0x73, 0x68, 0x50, 0x61, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x08, 0x49, 0x63,
	0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5,
	0x18, 0x12, 0xe5, 0xae, 0x9d, 0xe7, 0xae, 0xb1, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0xe8, 0xb7,
	0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x22, 0xae,
	0x01, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x43, 0x68, 0x65, 0x73, 0x73, 0x43, 0x61, 0x72, 0x64, 0x50,
	0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x8d,
	0xa1, 0xe7, 0x89, 0x87, 0xe5, 0x93, 0x81, 0xe8, 0xb4, 0xa8, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x07,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x4d, 0x0a, 0x0e, 0x43, 0x68, 0x65, 0x73, 0x73,
	0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x43, 0x68, 0x65,
	0x73, 0x73, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x00,
	0xda, 0xb5, 0x18, 0x02, 0x32, 0x30, 0x52, 0x0e, 0x43, 0x68, 0x65, 0x73, 0x73, 0x43, 0x61, 0x72,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x3a, 0x17, 0x8a, 0x97, 0x22, 0x07, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0xf0, 0x97, 0x22, 0x01, 0xf8, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x02, 0x22,
	0xfa, 0x03, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x43, 0x68, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x09, 0x4d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x08, 0xe6, 0x80, 0xaa, 0xe7, 0x89, 0xa9, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01,
	0x52, 0x09, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x0b, 0x4d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x80, 0xaa, 0xe7, 0x89, 0xa9, 0xe5, 0x90, 0x8d, 0xe7,
	0xa7, 0xb0, 0x52, 0x0b, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x4d, 0x0a, 0x14, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea,
	0xb5, 0x18, 0x15, 0xe5, 0xa8, 0xb1, 0xe4, 0xb9, 0x90, 0xe5, 0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe5,
	0xad, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x14, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x74,
	0x61, 0x69, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36,
	0x0a, 0x0a, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe6, 0x8e,
	0x89, 0xe8, 0x90, 0xbd, 0xe8, 0xb5, 0xb7, 0xe5, 0xa7, 0x8b, 0x52, 0x0a, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x45,
	0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x9b,
	0x9e, 0xe5, 0x90, 0x88, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f,
	0x52, 0x08, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x0c, 0x4e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0x49, 0x44, 0x52, 0x0c,
	0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x44, 0x12, 0x41, 0x0a, 0x10,
	0x57, 0x61, 0x72, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x44,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x11, 0xe6, 0xb8, 0xa9, 0xe6,
	0x9a, 0x96, 0xe5, 0xb1, 0x80, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0x49, 0x44, 0x52, 0x10, 0x57,
	0x61, 0x72, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x44, 0x12,
	0x38, 0x0a, 0x0a, 0x54, 0x61, 0x69, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x44, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x18, 0xea, 0xb5, 0x18, 0x14, 0xe5, 0xb0, 0xbe, 0xe9, 0x83, 0xa8, 0xe7,
	0x8e, 0xa9, 0xe5, 0xae, 0xb6, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0x49, 0x44, 0x52, 0x0a, 0x54,
	0x61, 0x69, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x44, 0x3a, 0x11, 0x8a, 0x97, 0x22, 0x09, 0x4d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0xf8, 0x97, 0x22, 0x01, 0x22, 0x76, 0x0a, 0x1a,
	0x43, 0x68, 0x65, 0x73, 0x73, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x50,
	0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x0c, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x06, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0x52, 0x0c, 0x45, 0x71, 0x75, 0x69, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18,
	0x06, 0xe6, 0xa6, 0x82, 0xe7, 0x8e, 0x87, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x22, 0xcc, 0x03, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x43, 0x68, 0x65, 0x73,
	0x73, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x06, 0x44, 0x72, 0x6f,
	0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe5,
	0xae, 0x9d, 0xe7, 0xae, 0xb1, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x06, 0x44, 0x72, 0x6f,
	0x70, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x08, 0x44, 0x72, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xae, 0x9d, 0xe7, 0xae,
	0xb1, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x08, 0x44, 0x72, 0x6f, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x36, 0x0a, 0x0d, 0x44, 0x72, 0x6f, 0x70, 0x44, 0x65, 0x73, 0x63, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xae,
	0x9d, 0xe7, 0xae, 0xb1, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x0d, 0x44, 0x72, 0x6f, 0x70,
	0x44, 0x65, 0x73, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x09, 0x44, 0x72, 0x6f,
	0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe5, 0xae, 0x9d, 0xe7, 0xae, 0xb1, 0xe6, 0xa8, 0xa1, 0xe5, 0x9e, 0x8b, 0x52, 0x09,
	0x44, 0x72, 0x6f, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x32, 0x0a, 0x0b, 0x44, 0x72, 0x6f,
	0x70, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xae, 0x9d, 0xe7, 0xae, 0xb1, 0xe5, 0x93, 0x81, 0xe8, 0xb4, 0xa8,
	0x52, 0x0b, 0x44, 0x72, 0x6f, 0x70, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x4a, 0x0a,
	0x14, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18,
	0x12, 0xe7, 0xa9, 0xba, 0xe7, 0x99, 0xbd, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0xe6, 0xa6, 0x82,
	0xe7, 0x8e, 0x87, 0x52, 0x14, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x72,
	0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x64, 0x0a, 0x0f, 0x44, 0x72, 0x6f,
	0x70, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x65,
	0x73, 0x73, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x62,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x8e, 0x89,
	0xe8, 0x90, 0xbd, 0xe9, 0x9b, 0x86, 0xe5, 0x90, 0x88, 0xda, 0xb5, 0x18, 0x01, 0x33, 0x52, 0x0f,
	0x44, 0x72, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x3a,
	0x12, 0x8a, 0x97, 0x22, 0x06, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0xf8,
	0x97, 0x22, 0x01, 0x22, 0x80, 0x02, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x43, 0x68, 0x65, 0x73, 0x73,
	0x44, 0x72, 0x6f, 0x70, 0x45, 0x71, 0x75, 0x69, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x36, 0x0a, 0x0c, 0x45, 0x71, 0x75, 0x69, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0xe6, 0x8e,
	0x89, 0xe8, 0x90, 0xbd, 0xe9, 0x9b, 0x86, 0xe5, 0x90, 0x88, 0x49, 0x44, 0x52, 0x0c, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x07, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18,
	0x08, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0x49, 0x44, 0x52, 0x07, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x49, 0x44, 0x12, 0x2e, 0x0a, 0x09, 0x45, 0x71, 0x75, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xa3, 0x85, 0xe5, 0xa4,
	0x87, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x09, 0x45, 0x71, 0x75, 0x69, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x3c, 0x0a, 0x10, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x62, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0xe6, 0xa6, 0x82, 0xe7, 0x8e, 0x87, 0x52, 0x10,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x3a, 0x14, 0xf8, 0x97, 0x22, 0x01, 0x92, 0x97, 0x22, 0x0c, 0x45, 0x71, 0x75, 0x69, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x22, 0xa1, 0x02, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x43, 0x68,
	0x65, 0x73, 0x73, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x69, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2a, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0x49, 0x44, 0xc8,
	0xc1, 0x18, 0x01, 0x52, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x04,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c,
	0xe6, 0x8a, 0xbd, 0xe5, 0x8d, 0xa1, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x04, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x50, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe8, 0xa3, 0x85, 0xe5, 0xa4,
	0x87, 0xe8, 0x8e, 0xb7, 0xe5, 0xbe, 0x97, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x09, 0x50,
	0x69, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x11, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe5,
	0x88, 0xb7, 0xe6, 0x96, 0xb0, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x52, 0x11, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29,
	0x0a, 0x06, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x44, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x11,
	0xea, 0xb5, 0x18, 0x08, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0x49, 0x44, 0xda, 0xb5, 0x18, 0x01,
	0x35, 0x52, 0x06, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x44, 0x3a, 0x0f, 0x8a, 0x97, 0x22, 0x07, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0xf8, 0x97, 0x22, 0x01, 0x22, 0x81, 0x01, 0x0a, 0x18, 0x52,
	0x65, 0x73, 0x43, 0x68, 0x65, 0x73, 0x73, 0x45, 0x71, 0x75, 0x69, 0x70, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x88,
	0xb7, 0xe6, 0x96, 0xb0, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x07,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x04, 0x43, 0x6f, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x88, 0xb7, 0xe6, 0x96,
	0xb0, 0xe8, 0xb4, 0xb9, 0xe7, 0x94, 0xa8, 0x52, 0x04, 0x43, 0x6f, 0x73, 0x74, 0x3a, 0x0f, 0x8a,
	0x97, 0x22, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0xf8, 0x97, 0x22, 0x01, 0x22, 0x4a,
	0x0a, 0x1e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x43, 0x68, 0x65, 0x73, 0x73, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x13, 0x0a, 0x01, 0x58, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0xea, 0xb5, 0x18,
	0x01, 0x58, 0x52, 0x01, 0x58, 0x12, 0x13, 0x0a, 0x01, 0x59, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x05, 0xea, 0xb5, 0x18, 0x01, 0x59, 0x52, 0x01, 0x59, 0x22, 0xf4, 0x04, 0x0a, 0x17, 0x52,
	0x65, 0x73, 0x43, 0x68, 0x65, 0x73, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x2d, 0x0a, 0x05, 0x53, 0x75, 0x62, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x17, 0xea, 0xb5, 0x18, 0x0f, 0xe9, 0x98, 0xb5, 0xe5, 0x9e, 0x8b, 0xe5, 0xad, 0x90,
	0xe7, 0xbc, 0x96, 0xe5, 0x8f, 0xb7, 0xc8, 0xc1, 0x18, 0x02, 0x52, 0x05, 0x53, 0x75, 0x62, 0x49,
	0x44, 0x12, 0x24, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe9, 0x98, 0xb5, 0xe5, 0x9e, 0x8b, 0xe5, 0x90, 0x8d, 0xe7, 0xa7,
	0xb0, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x63, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe9, 0x98, 0xb5, 0xe5, 0x9e,
	0x8b, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x04, 0x44, 0x65, 0x73, 0x63, 0x12, 0x26, 0x0a,
	0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe9, 0x98, 0xb5, 0xe5, 0x9e, 0x8b, 0xe5, 0x9b, 0xbe, 0xe7, 0x89, 0x87, 0x52, 0x05,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x4e, 0x75,
	0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x89, 0x8d,
	0xe6, 0x8e, 0x92, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x08, 0x46, 0x72, 0x6f, 0x6e, 0x74,
	0x4e, 0x75, 0x6d, 0x12, 0x4f, 0x0a, 0x05, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73,
	0x44, 0x54, 0x5f, 0x43, 0x68, 0x65, 0x73, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x06, 0xe5, 0x89, 0x8d, 0xe6, 0x8e, 0x92, 0xda, 0xb5, 0x18, 0x02, 0x31, 0x30, 0x52, 0x05, 0x46,
	0x72, 0x6f, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x42, 0x61, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x90, 0x8e, 0xe6, 0x8e,
	0x92, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x07, 0x42, 0x61, 0x63, 0x6b, 0x4e, 0x75, 0x6d,
	0x12, 0x4d, 0x0a, 0x04, 0x42, 0x61, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x43,
	0x68, 0x65, 0x73, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x90, 0x8e,
	0xe6, 0x8e, 0x92, 0xda, 0xb5, 0x18, 0x02, 0x31, 0x30, 0x52, 0x04, 0x42, 0x61, 0x63, 0x6b, 0x12,
	0x32, 0x0a, 0x0b, 0x41, 0x73, 0x73, 0x61, 0x73, 0x73, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x88, 0xba, 0xe5, 0xae, 0xa2,
	0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x0b, 0x41, 0x73, 0x73, 0x61, 0x73, 0x73, 0x69, 0x6e,
	0x4e, 0x75, 0x6d, 0x12, 0x55, 0x0a, 0x08, 0x41, 0x73, 0x73, 0x61, 0x73, 0x73, 0x69, 0x6e, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x43, 0x68, 0x65, 0x73, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x06, 0xe5, 0x88, 0xba, 0xe5, 0xae, 0xa2, 0xda, 0xb5, 0x18, 0x02, 0x31, 0x30,
	0x52, 0x08, 0x41, 0x73, 0x73, 0x61, 0x73, 0x73, 0x69, 0x6e, 0x3a, 0x15, 0x8a, 0x97, 0x22, 0x09,
	0x49, 0x44, 0x2c, 0x20, 0x53, 0x75, 0x62, 0x49, 0x44, 0xf0, 0x97, 0x22, 0x01, 0xf8, 0x97, 0x22,
	0x01, 0x22, 0x69, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x49, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe4, 0xb8, 0x87, 0xe5, 0x88, 0x86,
	0xe6, 0xaf, 0x94, 0x52, 0x05, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x30, 0x0a, 0x0a, 0x44, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x97, 0xa0, 0xe8, 0xa7, 0x86, 0xe7, 0x89, 0x8c, 0xe6, 0x95, 0xb0,
	0x52, 0x0a, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x22, 0x82, 0x0c, 0x0a,
	0x0f, 0x52, 0x65, 0x73, 0x43, 0x68, 0x65, 0x73, 0x73, 0x41, 0x49, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x2a, 0x0a, 0x07, 0x41, 0x49, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0x41, 0x49, 0xe9, 0x9a, 0xbe, 0xe5, 0xba, 0xa6, 0xc8,
	0xc1, 0x18, 0x01, 0x52, 0x07, 0x41, 0x49, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x63, 0x0a, 0x15,
	0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x52, 0x65,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x49, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x43, 0x61, 0x72, 0x64, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x09, 0xe8, 0xb6, 0x85, 0xe6,
	0x88, 0x98, 0xe5, 0x8a, 0x9b, 0xda, 0xb5, 0x18, 0x01, 0x35, 0x52, 0x15, 0x45, 0x78, 0x63, 0x65,
	0x65, 0x64, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x3c, 0x0a, 0x0d, 0x4d, 0x69, 0x6e, 0x4f, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x93,
	0x8d, 0xe4, 0xbd, 0x9c, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x8f, 0xe9, 0x97, 0xb4, 0xe9, 0x9a, 0x94,
	0x52, 0x0d, 0x4d, 0x69, 0x6e, 0x4f, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x3c, 0x0a, 0x0d, 0x4d, 0x61, 0x78, 0x4f, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x93, 0x8d, 0xe4,
	0xbd, 0x9c, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe9, 0x97, 0xb4, 0xe9, 0x9a, 0x94, 0x52, 0x0d,
	0x4d, 0x61, 0x78, 0x4f, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x38, 0x0a,
	0x0b, 0x53, 0x65, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x4c, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x94, 0xae, 0xe5, 0x8d, 0x96, 0xe6, 0x97,
	0xa0, 0xe7, 0x94, 0xa8, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0x52, 0x0b, 0x53, 0x65, 0x6c, 0x6c,
	0x55, 0x73, 0x65, 0x4c, 0x65, 0x73, 0x73, 0x12, 0x3f, 0x0a, 0x10, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe6, 0xb8, 0x85, 0xe7, 0x90, 0x86, 0xe5, 0xbc, 0x83,
	0xe7, 0x89, 0x8c, 0xe5, 0xba, 0x93, 0x52, 0x10, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x2f, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f,
	0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe6, 0x94, 0xbe, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0x52,
	0x08, 0x55, 0x73, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x48, 0x0a, 0x10, 0x46, 0x61, 0x73,
	0x74, 0x48, 0x69, 0x67, 0x68, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe5, 0xbf, 0xab, 0xe9, 0x80, 0x9f, 0xe6,
	0x88, 0x90, 0xe5, 0x9e, 0x8b, 0xe9, 0xab, 0x98, 0xe5, 0xb1, 0x82, 0xe7, 0xbe, 0x81, 0xe7, 0xbb,
	0x8a, 0x52, 0x10, 0x46, 0x61, 0x73, 0x74, 0x48, 0x69, 0x67, 0x68, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x48, 0x69, 0x67, 0x68, 0x53, 0x74, 0x61, 0x72, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12,
	0xe4, 0xbc, 0x98, 0xe5, 0x85, 0x88, 0xe4, 0xb8, 0x89, 0xe6, 0x98, 0x9f, 0xe5, 0x90, 0x88, 0xe6,
	0x88, 0x90, 0x52, 0x0d, 0x48, 0x69, 0x67, 0x68, 0x53, 0x74, 0x61, 0x72, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x12, 0x47, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5,
	0x18, 0x15, 0xe5, 0xbb, 0xb6, 0xe5, 0x90, 0x8e, 0xe5, 0x8d, 0x87, 0xe7, 0xba, 0xa7, 0xe5, 0x9b,
	0x9e, 0xe5, 0x90, 0x88, 0xe6, 0x95, 0xb0, 0x52, 0x11, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x44, 0x0a, 0x11, 0x47, 0x6f,
	0x6c, 0x64, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0xbb, 0xa1, 0xe9, 0x92,
	0xb1, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x8d, 0x87, 0xe7, 0xba, 0xa7, 0x52, 0x11, 0x47,
	0x6f, 0x6c, 0x64, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x12, 0x4a, 0x0a, 0x0e, 0x52, 0x65, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x22, 0xea, 0xb5, 0x18, 0x1e, 0xe9, 0x87,
	0x8d, 0xe6, 0x96, 0xb0, 0xe5, 0xae, 0x89, 0xe6, 0x8e, 0x92, 0xe5, 0xb7, 0xb2, 0xe8, 0xa3, 0x85,
	0xe5, 0xa4, 0x87, 0xe7, 0x9a, 0x84, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0x52, 0x0e, 0x52, 0x65,
	0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x12, 0x32, 0x0a, 0x0b,
	0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x45, 0x71, 0x75, 0x69, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe4, 0xb9, 0xb1, 0xe9, 0x80, 0x89, 0xe8, 0xa3, 0x85,
	0xe5, 0xa4, 0x87, 0x52, 0x0b, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x12, 0x43, 0x0a, 0x0f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x75, 0x79, 0x43, 0x61, 0x72, 0x64,
	0x4e, 0x75, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe6,
	0xaf, 0x8f, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe8, 0xb4, 0xad, 0xe5, 0x8d, 0xa1, 0xe6, 0x95,
	0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x0f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x75, 0x79, 0x43, 0x61,
	0x72, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x36, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x53, 0x6c, 0x6f, 0x74,
	0x4e, 0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe4,
	0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe6, 0xa7, 0xbd, 0xe4, 0xbd, 0x8d, 0xe6, 0x95, 0xb0, 0xe9, 0x87,
	0x8f, 0x52, 0x0a, 0x55, 0x73, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x33, 0x0a,
	0x0a, 0x4e, 0x6f, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe4, 0xb8, 0x8d, 0xe8, 0x80, 0x83, 0xe8, 0x99, 0x91,
	0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a, 0x52, 0x0a, 0x4e, 0x6f, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x47, 0x6f, 0x6c,
	0x64, 0x52, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1c, 0xea, 0xb5, 0x18,
	0x18, 0xe6, 0xaf, 0x8f, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe5, 0xbc, 0x83, 0xe9, 0x92, 0xb1,
	0xe4, 0xb8, 0x87, 0xe5, 0x88, 0x86, 0xe6, 0xaf, 0x94, 0x52, 0x0f, 0x44, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x47, 0x6f, 0x6c, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x09, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x57, 0x65, 0x61, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x25, 0xea,
	0xb5, 0x18, 0x21, 0xe4, 0xbc, 0x98, 0xe5, 0x85, 0x88, 0xe7, 0xbb, 0x99, 0xe6, 0x9c, 0x80, 0xe5,
	0xbc, 0xb1, 0xe7, 0x9a, 0x84, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe7, 0xa9, 0xbf, 0xe8, 0xa3,
	0x85, 0xe5, 0xa4, 0x87, 0x52, 0x09, 0x45, 0x71, 0x75, 0x69, 0x70, 0x57, 0x65, 0x61, 0x6b, 0x12,
	0x3b, 0x0a, 0x0b, 0x4e, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe4, 0xb8, 0x8d, 0xe4, 0xbd, 0xbf,
	0xe7, 0x94, 0xa8, 0xe5, 0xbf, 0xab, 0xe9, 0x80, 0x9f, 0xe9, 0x98, 0xb5, 0xe5, 0x9e, 0x8b, 0x52,
	0x0b, 0x4e, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x12,
	0x4e, 0x6f, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x69,
	0x63, 0x6b, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe4, 0xb8,
	0x8d, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7, 0xa7, 0x91, 0xe5, 0xad, 0xa6, 0xe6, 0x8a, 0xbd,
	0xe5, 0x8d, 0xa1, 0x52, 0x12, 0x4e, 0x6f, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x52, 0x65, 0x70, 0x69, 0x63, 0x6b, 0x12, 0x31, 0x0a, 0x0c, 0x4e, 0x6f, 0x52, 0x69, 0x73,
	0x6b, 0x52, 0x65, 0x70, 0x69, 0x63, 0x6b, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0xea,
	0xb5, 0x18, 0x09, 0xe4, 0xb8, 0x8d, 0xe6, 0x9d, 0xbf, 0xe5, 0x91, 0xbd, 0x52, 0x0c, 0x4e, 0x6f,
	0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x69, 0x63, 0x6b, 0x12, 0x3e, 0x0a, 0x0b, 0x55, 0x73,
	0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x4e, 0x75, 0x6d, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe4, 0xbd, 0xbf, 0xe7, 0x94,
	0xa8, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x0b, 0x55,
	0x73, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x4e, 0x75, 0x6d, 0x12, 0x54, 0x0a, 0x13, 0x46, 0x61,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x47, 0x6f, 0x6c,
	0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x22, 0xea, 0xb5, 0x18, 0x1e, 0xe4, 0xb9, 0xb1,
	0xe6, 0x96, 0x97, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe5,
	0xbc, 0x83, 0xe9, 0x92, 0xb1, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x13, 0x46, 0x61, 0x73,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x47, 0x6f, 0x6c, 0x64,
	0x3a, 0x0f, 0x8a, 0x97, 0x22, 0x07, 0x41, 0x49, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0xf8, 0x97, 0x22,
	0x01, 0x22, 0xee, 0x02, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x38, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe5, 0x95, 0x86, 0xe5, 0x93,
	0x81, 0x49, 0x44, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8,
	0xb4, 0xa7, 0xe5, 0xb8, 0x81, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x08, 0x43, 0x6f, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xb4, 0xa7,
	0xe5, 0xb8, 0x81, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x43,
	0x6f, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x42, 0x75, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe9,
	0x99, 0x90, 0xe8, 0xb4, 0xad, 0xe5, 0x91, 0xa8, 0xe6, 0x9c, 0x9f, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0x52, 0x0c, 0x42, 0x75, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x38, 0x0a, 0x0b, 0x42, 0x75, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x91, 0xa8, 0xe6, 0x9c, 0x9f,
	0xe9, 0x99, 0x90, 0xe8, 0xb4, 0xad, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x0b, 0x42, 0x75,
	0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x42, 0x61, 0x73,
	0x65, 0x41, 0x77, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x52,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x04, 0xea, 0xb5, 0x18, 0x00, 0x52, 0x09, 0x42,
	0x61, 0x73, 0x65, 0x41, 0x77, 0x61, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x06, 0x49, 0x73, 0x53, 0x68,
	0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x98,
	0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0x52, 0x06, 0x49, 0x73, 0x53, 0x68,
	0x6f, 0x77, 0x22, 0xc1, 0x04, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x38, 0x41, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x11, 0xe9, 0xa2, 0x86,
	0xe4, 0xb8, 0xbb, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe7, 0xbb, 0x84, 0x49, 0x44, 0xc8, 0xc1,
	0x18, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x09, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe5,
	0x87, 0xba, 0xe7, 0x8e, 0xb0, 0xe6, 0x97, 0xb6, 0xe6, 0x9c, 0xba, 0xc8, 0xc1, 0x18, 0x02, 0x52,
	0x09, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x5e, 0x0a, 0x0a, 0x41, 0x77,
	0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c,
	0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x38, 0x41, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x77,
	0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0x52, 0x0a,
	0x41, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x32, 0x0a, 0x08, 0x41, 0x77,
	0x61, 0x72, 0x64, 0x44, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5,
	0x18, 0x12, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xe8, 0xaf,
	0xb4, 0xe6, 0x98, 0x8e, 0x52, 0x08, 0x41, 0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x73, 0x12, 0x3d,
	0x0a, 0x0a, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0d, 0x42, 0x1d, 0xea, 0xb5, 0x18, 0x14, 0xe9, 0x87, 0x8d, 0xe5, 0xa4, 0x8d, 0xe5, 0xa5,
	0x96, 0xe5, 0x8a, 0xb1, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0x49, 0x44, 0xda, 0xb5, 0x18, 0x01,
	0x38, 0x52, 0x0a, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xdb, 0x01,
	0x0a, 0x0e, 0x41, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x16, 0x41, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x10,
	0x41, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x31,
	0x10, 0x01, 0x1a, 0x11, 0xaa, 0xb6, 0x18, 0x0d, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0xe5, 0xa5,
	0x96, 0xe5, 0x8a, 0xb1, 0x42, 0x12, 0x27, 0x0a, 0x10, 0x41, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x32, 0x10, 0x02, 0x1a, 0x11, 0xaa, 0xb6, 0x18,
	0x0d, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0x41, 0x12, 0x27,
	0x0a, 0x10, 0x41, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x33, 0x10, 0x03, 0x1a, 0x11, 0xaa, 0xb6, 0x18, 0x0d, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb,
	0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0x53, 0x12, 0x28, 0x0a, 0x10, 0x41, 0x77, 0x61, 0x72, 0x64,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x34, 0x10, 0x04, 0x1a, 0x12, 0xaa,
	0xb6, 0x18, 0x0e, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0x53,
	0x53, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x3a, 0x19, 0x8a, 0x97, 0x22,
	0x0d, 0x49, 0x44, 0x2c, 0x20, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0xf0, 0x97,
	0x22, 0x01, 0xf8, 0x97, 0x22, 0x01, 0x22, 0xc7, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x38, 0x4c, 0x6f, 0x72, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe8, 0xa1, 0xa8, 0xe6, 0x83, 0x85, 0x49, 0x44, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x24, 0x0a, 0x06, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0x49, 0x44,
	0x52, 0x06, 0x4c, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x09, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x0c, 0xe8, 0xa1, 0xa8, 0xe6, 0x83, 0x85, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x09, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xb5,
	0x18, 0x12, 0xe7, 0xbe, 0x8e, 0xe6, 0x9c, 0xaf, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0xb7,
	0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68,
	0x22, 0xe1, 0x04, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x38,
	0x42, 0x6f, 0x73, 0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18,
	0x06, 0xe8, 0xbd, 0xae, 0xe6, 0xac, 0xa1, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x08, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea,
	0xb5, 0x18, 0x0c, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0x52,
	0x08, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x35, 0x0a, 0x0b, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13,
	0xea, 0xb5, 0x18, 0x0f, 0xe6, 0x8c, 0x91, 0xe6, 0x88, 0x98, 0xe7, 0x8e, 0xa9, 0xe5, 0xae, 0xb6,
	0xe6, 0x95, 0xb0, 0x52, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2c, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0x42, 0x4f, 0x53, 0x53, 0xe6, 0x91, 0x86, 0xe6,
	0x94, 0xbe, 0x49, 0x44, 0x52, 0x08, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x2e,
	0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x8c, 0xb9, 0xe9, 0x85, 0x8d, 0xe8, 0xa7, 0x84,
	0xe5, 0x88, 0x99, 0x52, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c,
	0x0a, 0x08, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe5, 0x9b, 0x9e, 0xe5,
	0x90, 0x88, 0x52, 0x08, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x08,
	0x52, 0x61, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x0c, 0xe6, 0xad, 0xa3, 0xe8, 0xb5, 0x9b, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0x52, 0x08, 0x52, 0x61, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x41, 0x77,
	0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea,
	0xb5, 0x18, 0x0c, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52,
	0x09, 0x41, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x42, 0x6f,
	0x73, 0x73, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x11, 0xea, 0xb5, 0x18, 0x0d, 0x42, 0x4f, 0x53, 0x53, 0xe5, 0x87, 0xba, 0xe5, 0x9c, 0xba,
	0x41, 0x47, 0x45, 0x52, 0x0c, 0x42, 0x6f, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x67,
	0x65, 0x12, 0x40, 0x0a, 0x0f, 0x41, 0x77, 0x61, 0x72, 0x64, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12,
	0xe8, 0x87, 0xaa, 0xe9, 0x80, 0x89, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe6, 0x96, 0xb9, 0xe6,
	0xa1, 0x88, 0x52, 0x0f, 0x41, 0x77, 0x61, 0x72, 0x64, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x10, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea,
	0xb5, 0x18, 0x15, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84, 0xe8, 0x87, 0xaa, 0xe9, 0x80, 0x89, 0xe7,
	0x8e, 0xa9, 0xe5, 0xae, 0xb6, 0xe6, 0x95, 0xb0, 0x52, 0x10, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x18, 0x8a, 0x97, 0x22, 0x08,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0xf0, 0x97, 0x22, 0x01, 0xf8, 0x97, 0x22, 0x01,
	0x98, 0x97, 0x22, 0x01, 0x22, 0xde, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x38, 0x42, 0x6f, 0x73, 0x73, 0x41, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x43, 0x66, 0x67, 0x12, 0x1e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x06, 0xe4, 0xba, 0xba, 0xe6, 0x95, 0xb0, 0xc8, 0xc1, 0x18,
	0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x03, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe6, 0x95,
	0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x03, 0x4e, 0x75, 0x6d, 0x12, 0x30, 0x0a, 0x07, 0x52, 0x61, 0x6e,
	0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12,
	0xe6, 0x8e, 0x92, 0xe5, 0x90, 0x8d, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe6, 0x95, 0xb0, 0xe9,
	0x87, 0x8f, 0x52, 0x07, 0x52, 0x61, 0x6e, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x3c, 0x0a, 0x0d, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x77, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84, 0xe5, 0xa5,
	0x96, 0xe5, 0x8a, 0xb1, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x0d, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x41, 0x77, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x3a, 0x0a, 0x8a, 0x97, 0x22, 0x02, 0x49,
	0x44, 0xf8, 0x97, 0x22, 0x01, 0x22, 0xfd, 0x05, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x38, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x66, 0x67, 0x12, 0x27, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0xea, 0xb5, 0x18, 0x0f, 0xe9, 0x9a,
	0x8f, 0xe6, 0x9c, 0xba, 0xe6, 0x96, 0xb9, 0xe6, 0xa1, 0x88, 0xe7, 0xbb, 0x84, 0xc8, 0xc1, 0x18,
	0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x05, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x9d, 0x83, 0xe9, 0x87, 0x8d,
	0x52, 0x05, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0d, 0x42, 0x6f, 0x73, 0x73, 0x48,
	0x70, 0x41, 0x77, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19,
	0xea, 0xb5, 0x18, 0x15, 0xe6, 0x89, 0x93, 0xe9, 0x87, 0x8e, 0xe9, 0x9a, 0x8f, 0xe6, 0x9c, 0xba,
	0xe6, 0x96, 0xb9, 0xe6, 0xa1, 0x88, 0xe7, 0xbb, 0x84, 0x52, 0x0d, 0x42, 0x6f, 0x73, 0x73, 0x48,
	0x70, 0x41, 0x77, 0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x47, 0x0a, 0x11, 0x42, 0x6f, 0x73, 0x73,
	0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x41, 0x77, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe6, 0x89, 0x93, 0xe9, 0x87, 0x8e, 0xe8,
	0x87, 0xaa, 0xe9, 0x80, 0x89, 0xe6, 0x96, 0xb9, 0xe6, 0xa1, 0x88, 0xe7, 0xbb, 0x84, 0x52, 0x11,
	0x42, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x41, 0x77, 0x61, 0x72, 0x64, 0x49,
	0x44, 0x12, 0x3b, 0x0a, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x72,
	0x64, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe6,
	0x8d, 0xa2, 0xe7, 0x89, 0x8c, 0xe6, 0x96, 0xb9, 0xe6, 0xa1, 0x88, 0xe7, 0xbb, 0x84, 0x52, 0x0e,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x38,
	0x0a, 0x0b, 0x47, 0x72, 0x61, 0x62, 0x41, 0x77, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe4, 0xba, 0x89, 0xe5, 0xa4, 0xba, 0xe8,
	0xb5, 0x9b, 0xe6, 0x96, 0xb9, 0xe6, 0xa1, 0x88, 0xe7, 0xbb, 0x84, 0x52, 0x0b, 0x47, 0x72, 0x61,
	0x62, 0x41, 0x77, 0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x41, 0x0a, 0x0e, 0x41, 0x69, 0x72, 0x64,
	0x72, 0x6f, 0x70, 0x41, 0x77, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe5, 0x85, 0xa8, 0xe5, 0xb1, 0x80, 0xe6, 0x8a, 0x95, 0xe6,
	0x94, 0xbe, 0xe6, 0x96, 0xb9, 0xe6, 0xa1, 0x88, 0xe7, 0xbb, 0x84, 0x52, 0x0e, 0x41, 0x69, 0x72,
	0x64, 0x72, 0x6f, 0x70, 0x41, 0x77, 0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x4d, 0x0a, 0x14, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe7,
	0x8e, 0xa9, 0xe5, 0xae, 0xb6, 0xe5, 0xa4, 0xa9, 0xe8, 0xb5, 0x8b, 0xe6, 0xa7, 0xbd, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x14, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x61, 0x6c, 0x65,
	0x6e, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x20, 0xea,
	0xb5, 0x18, 0x0c, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xf2,
	0xb5, 0x18, 0x0c, 0x45, 0x50, 0x76, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x40, 0x0a, 0x0e, 0x52, 0x61,
	0x6e, 0x64, 0x4c, 0x6f, 0x72, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x18, 0xea, 0xb5, 0x18, 0x14, 0xe9, 0x9a, 0x8f, 0xe6, 0x9c, 0xba, 0xe9, 0xa2,
	0x86, 0xe4, 0xb8, 0xbb, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0x49, 0x44, 0x52, 0x0e, 0x52, 0x61,
	0x6e, 0x64, 0x4c, 0x6f, 0x72, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x44, 0x12, 0x3b, 0x0a, 0x0e,
	0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe6, 0x8b, 0x8d, 0xe5, 0x8d, 0x96,
	0xe6, 0x96, 0xb9, 0xe6, 0xa1, 0x88, 0xe7, 0xbb, 0x84, 0x52, 0x0e, 0x41, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x07, 0x45, 0x6e, 0x64,
	0x52, 0x61, 0x6e, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x20, 0xea, 0xb5, 0x18, 0x0c,
	0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xf2, 0xb5, 0x18, 0x0c,
	0x45, 0x50, 0x76, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x45, 0x6e,
	0x64, 0x52, 0x61, 0x6e, 0x6b, 0x3a, 0x0e, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0xf8, 0x97, 0x22,
	0x01, 0x98, 0x97, 0x22, 0x02, 0x22, 0xd9, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x73, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x38, 0x42, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x41,
	0x77, 0x61, 0x72, 0x64, 0x43, 0x66, 0x67, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0xea, 0xb5, 0x18, 0x0f, 0xe9, 0x9a, 0x8f, 0xe6, 0x9c, 0xba,
	0xe6, 0x96, 0xb9, 0xe6, 0xa1, 0x88, 0xe7, 0xbb, 0x84, 0xc8, 0xc1, 0x18, 0x02, 0x52, 0x07, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x05, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x9d, 0x83, 0xe9, 0x87,
	0x8d, 0x52, 0x05, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x0a, 0x44, 0x72, 0x6f, 0x70,
	0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x06, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xda, 0xb5, 0x18, 0x02, 0x31, 0x30, 0x52, 0x0a,
	0x44, 0x72, 0x6f, 0x70, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x3a, 0x15, 0x8a, 0x97, 0x22, 0x02,
	0x49, 0x44, 0x92, 0x97, 0x22, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0xf8, 0x97, 0x22,
	0x01, 0x22, 0xd5, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x38, 0x42, 0x6f, 0x73, 0x73, 0x48, 0x70, 0x41, 0x77, 0x61, 0x72, 0x64, 0x43, 0x66, 0x67, 0x12,
	0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18,
	0x02, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x07, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0xea, 0xb5,
	0x18, 0x0f, 0xe9, 0x9a, 0x8f, 0xe6, 0x9c, 0xba, 0xe6, 0x96, 0xb9, 0xe6, 0xa1, 0x88, 0xe7, 0xbb,
	0x84, 0xc8, 0xc1, 0x18, 0x02, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x20,
	0x0a, 0x05, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea,
	0xb5, 0x18, 0x06, 0xe6, 0x9d, 0x83, 0xe9, 0x87, 0x8d, 0x52, 0x05, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x12, 0x30, 0x0a, 0x0a, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1,
	0xda, 0xb5, 0x18, 0x02, 0x31, 0x30, 0x52, 0x0a, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x44, 0x4c, 0x69,
	0x73, 0x74, 0x3a, 0x15, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0x92, 0x97, 0x22, 0x07, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0xf8, 0x97, 0x22, 0x01, 0x22, 0x94, 0x01, 0x0a, 0x1c, 0x52, 0x65,
	0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x38, 0x47, 0x72, 0x61, 0x62, 0x41, 0x77, 0x61,
	0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x66, 0x67, 0x12, 0x1e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x06, 0xe4, 0xba, 0xba, 0xe6,
	0x95, 0xb0, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x03, 0x4e, 0x75,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xa5, 0x96,
	0xe5, 0x8a, 0xb1, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x03, 0x4e, 0x75, 0x6d, 0x12, 0x24,
	0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe4, 0xba, 0x89, 0xe5, 0xa4, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x95, 0xbf, 0x52, 0x04,
	0x54, 0x69, 0x6d, 0x65, 0x3a, 0x0a, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0xf8, 0x97, 0x22, 0x01,
	0x22, 0xd6, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x38,
	0x47, 0x72, 0x61, 0x62, 0x41, 0x77, 0x61, 0x72, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x66, 0x67,
	0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5,
	0x18, 0x02, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x07,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0xea,
	0xb5, 0x18, 0x0f, 0xe9, 0x9a, 0x8f, 0xe6, 0x9c, 0xba, 0xe6, 0x96, 0xb9, 0xe6, 0xa1, 0x88, 0xe7,
	0xbb, 0x84, 0xc8, 0xc1, 0x18, 0x02, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12,
	0x20, 0x0a, 0x05, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a,
	0xea, 0xb5, 0x18, 0x06, 0xe6, 0x9d, 0x83, 0xe9, 0x87, 0x8d, 0x52, 0x05, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x12, 0x2f, 0x0a, 0x0a, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x0f, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0xa5, 0x96, 0xe5, 0x8a,
	0xb1, 0xda, 0xb5, 0x18, 0x01, 0x38, 0x52, 0x0a, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x44, 0x4c, 0x69,
	0x73, 0x74, 0x3a, 0x15, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0x92, 0x97, 0x22, 0x07, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0xf8, 0x97, 0x22, 0x01, 0x22, 0x69, 0x0a, 0x1d, 0x52, 0x65, 0x73,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x38, 0x47, 0x72, 0x61, 0x62, 0x41, 0x77, 0x61, 0x72,
	0x64, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x66, 0x67, 0x12, 0x16, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0x52, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x0e, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0xf8, 0x97, 0x22, 0x01,
	0xf0, 0x97, 0x22, 0x01, 0x22, 0x7b, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x44, 0x72,
	0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2c, 0x0a, 0x0b, 0x44, 0x72, 0x6f, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5,
	0x18, 0x06, 0xe6, 0x96, 0xb9, 0xe6, 0xa1, 0x88, 0x52, 0x0b, 0x44, 0x72, 0x6f, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x12, 0x44, 0x72, 0x6f, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0xa6, 0x82, 0xe7, 0x8e, 0x87, 0x52, 0x12, 0x44,
	0x72, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x22, 0x98, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x38, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe6,
	0x8e, 0x89, 0xe8, 0x90, 0xbd, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x4f, 0x0a, 0x09, 0x44, 0x72, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73,
	0x44, 0x54, 0x5f, 0x44, 0x72, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x17, 0xea, 0xb5,
	0x18, 0x0e, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0xe9, 0x9b, 0x86, 0xe5, 0x90, 0x88, 0x49, 0x44,
	0xda, 0xb5, 0x18, 0x01, 0x38, 0x52, 0x09, 0x44, 0x72, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x3a, 0x0a, 0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0xf8, 0x97, 0x22, 0x01, 0x22, 0x8f, 0x02, 0x0a,
	0x18, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x44, 0x72, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0d, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x28, 0xea, 0xb5, 0x18, 0x00, 0xf2, 0xb5, 0x18, 0x20, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52,
	0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x44,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x0f, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x0b, 0xea, 0xb5, 0x18, 0x07, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x31, 0x52,
	0x0f, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x31,
	0x12, 0x35, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0b, 0xea, 0xb5, 0x18, 0x07, 0xe5,
	0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x32, 0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x12, 0x35, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x33, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x0b, 0xea, 0xb5, 0x18, 0x07, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x33, 0x52, 0x0f, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x33, 0x22, 0xb1,
	0x04, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x72,
	0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x40, 0x0a, 0x12, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x6f, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x85, 0xb3, 0xe8,
	0x81, 0x94, 0xe5, 0x8d, 0xa1, 0xe6, 0xb1, 0xa0, 0x52, 0x12, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x3c, 0x0a, 0x0d,
	0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x8d, 0xa1, 0xe6, 0xb1, 0xa0, 0xe9,
	0x9a, 0x8f, 0xe6, 0x9c, 0xba, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0x52, 0x0d, 0x43, 0x61, 0x72,
	0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x47, 0x0a, 0x12, 0x43, 0x61,
	0x72, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x31,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0xea, 0xb5, 0x18, 0x13, 0xe5, 0x8d, 0xa1, 0xe6,
	0xb1, 0xa0, 0xe8, 0xb4, 0xb9, 0xe7, 0x94, 0xa8, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x31, 0x52,
	0x12, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x31, 0x12, 0x47, 0x0a, 0x12, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x43,
	0x6f, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x17, 0xea, 0xb5, 0x18, 0x13, 0xe5, 0x8d, 0xa1, 0xe6, 0xb1, 0xa0, 0xe8, 0xb4, 0xb9, 0xe7, 0x94,
	0xa8, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x32, 0x52, 0x12, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f,
	0x6f, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x12, 0x5e, 0x0a, 0x14,
	0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x46, 0x65, 0x74, 0x74, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2a, 0xea, 0xb5, 0x18, 0x13,
	0xe5, 0x8d, 0xa1, 0xe6, 0xb1, 0xa0, 0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a, 0xe5, 0x8f, 0x82, 0xe6,
	0x95, 0xb0, 0x31, 0xf2, 0xb5, 0x18, 0x0f, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x14, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x6f, 0x6c,
	0x46, 0x65, 0x74, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x12, 0x5e, 0x0a, 0x14,
	0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x46, 0x65, 0x74, 0x74, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2a, 0xea, 0xb5, 0x18, 0x13,
	0xe5, 0x8d, 0xa1, 0xe6, 0xb1, 0xa0, 0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a, 0xe5, 0x8f, 0x82, 0xe6,
	0x95, 0xb0, 0x32, 0xf2, 0xb5, 0x18, 0x0f, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x14, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x6f, 0x6c,
	0x46, 0x65, 0x74, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x12, 0x44, 0x0a, 0x11,
	0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x8d, 0xa1,
	0xe6, 0xb1, 0xa0, 0xe6, 0x98, 0x9f, 0xe7, 0xba, 0xa7, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x52,
	0x11, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x22, 0x95, 0x07, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x38, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x2a, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe5, 0x94, 0xaf, 0xe4, 0xb8, 0x80, 0x49,
	0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x12, 0x55,
	0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x50,
	0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe6, 0x8e, 0x89, 0xe8,
	0x90, 0xbd, 0xe7, 0x89, 0xa9, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x08, 0x49, 0x74, 0x65,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0f, 0xea, 0xb5, 0x18, 0x0b, 0xe6, 0x8e, 0x89, 0xe8, 0x90,
	0xbd, 0xe7, 0x89, 0xa9, 0x49, 0x44, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x12, 0x31,
	0x0a, 0x09, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0xe7, 0x89, 0xa9,
	0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x09, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x5e, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x34, 0xea, 0xb5, 0x18, 0x0c,
	0xe6, 0xa6, 0x82, 0xe7, 0x8e, 0x87, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x20,
	0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x44, 0x52, 0x4f,
	0x50, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x52, 0x0f, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x32, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0xa6, 0x82, 0xe7,
	0x8e, 0x87, 0xe6, 0x95, 0xb0, 0xe5, 0x80, 0xbc, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x76, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x42, 0xea, 0xb5, 0x18, 0x18, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0xe6,
	0xa6, 0x82, 0xe7, 0x8e, 0x87, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0xf2, 0xb5, 0x18, 0x22, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54,
	0x38, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x41, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x14, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a,
	0x11, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x31, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0xea, 0xb5, 0x18, 0x13, 0xe6, 0x8e,
	0x89, 0xe8, 0x90, 0xbd, 0xe6, 0xa6, 0x82, 0xe7, 0x8e, 0x87, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0,
	0x31, 0x52, 0x11, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x31, 0x12, 0x45, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x17, 0xea, 0xb5, 0x18, 0x13, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0xe6, 0xa6, 0x82, 0xe7, 0x8e,
	0x87, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x32, 0x52, 0x11, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x12, 0x5a, 0x0a, 0x0e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65,
	0x73, 0x44, 0x54, 0x5f, 0x44, 0x72, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0x9d, 0xa1, 0xe4,
	0xbb, 0xb6, 0xda, 0xb5, 0x18, 0x01, 0x32, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2c, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe4,
	0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0xe6, 0x8a, 0x98, 0xe6, 0x89, 0xa3, 0x52, 0x08, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x0d, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x6f,
	0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x52,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x44, 0x72, 0x6f,
	0x70, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x04,
	0xea, 0xb5, 0x18, 0x00, 0x52, 0x0d, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x15, 0xf8, 0x97, 0x22, 0x01, 0x8a, 0x97, 0x22, 0x07, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x49, 0x44, 0x92, 0x97, 0x22, 0x02, 0x49, 0x44, 0x22, 0x8a, 0x01, 0x0a, 0x18, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x78, 0x12, 0x2c, 0x0a, 0x06, 0x44, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe4, 0xba, 0xba,
	0xe5, 0x8f, 0xa3, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x06, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe4,
	0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0xe6, 0xa0, 0xa1, 0xe6, 0xad, 0xa3, 0x52, 0x0a, 0x43, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x0e, 0x8a, 0x97, 0x22, 0x06, 0x44, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0xf8, 0x97, 0x22, 0x01, 0x22, 0x71, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x42, 0x6c,
	0x6f, 0x6f, 0x64, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x41, 0x0a, 0x0e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x11, 0xe6, 0x8a, 0x80,
	0xe8, 0x83, 0xbd, 0xe7, 0xbb, 0x84, 0xe5, 0x90, 0x88, 0xe8, 0xa1, 0xa8, 0x69, 0x64, 0xc8, 0xc1,
	0x18, 0x01, 0x52, 0x0e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65,
	0x49, 0x64, 0x3a, 0x16, 0x8a, 0x97, 0x22, 0x0e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x6d,
	0x62, 0x69, 0x6e, 0x65, 0x49, 0x64, 0xf0, 0x97, 0x22, 0x01, 0x22, 0xe8, 0x01, 0x0a, 0x0f, 0x52,
	0x65, 0x73, 0x44, 0x54, 0x5f, 0x41, 0x77, 0x61, 0x6b, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28,
	0x0a, 0x09, 0x41, 0x77, 0x61, 0x6b, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x09, 0x41,
	0x77, 0x61, 0x6b, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x51, 0x0a, 0x0a, 0x41, 0x77, 0x61, 0x6b,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x52,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x49, 0x6e, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x0f,
	0xea, 0xb5, 0x18, 0x06, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xda, 0xb5, 0x18, 0x01, 0x33, 0x52,
	0x0a, 0x41, 0x77, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2c, 0x0a, 0x0b, 0x41,
	0x77, 0x61, 0x6b, 0x65, 0x42, 0x75, 0x66, 0x66, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0x42, 0x55, 0x46, 0x46, 0x49, 0x44, 0x52, 0x0b, 0x41, 0x77,
	0x61, 0x6b, 0x65, 0x42, 0x75, 0x66, 0x66, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x0a, 0x41, 0x77, 0x61,
	0x6b, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea,
	0xb5, 0x18, 0x06, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0x52, 0x0a, 0x41, 0x77, 0x61, 0x6b, 0x65,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x90, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x47, 0x65, 0x61, 0x72, 0x41, 0x77, 0x61, 0x6b, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x26, 0x0a, 0x07, 0x41, 0x77, 0x61, 0x6b, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe8, 0xa7, 0x89, 0xe9, 0x86, 0x92, 0x49, 0x44,
	0x52, 0x07, 0x41, 0x77, 0x61, 0x6b, 0x65, 0x49, 0x44, 0x12, 0x4d, 0x0a, 0x09, 0x41, 0x77, 0x61,
	0x6b, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x52,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x41, 0x77, 0x61,
	0x6b, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xa7, 0x89, 0xe9,
	0x86, 0x92, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0xda, 0xb5, 0x18, 0x01, 0x35, 0x52, 0x09, 0x41,
	0x77, 0x61, 0x6b, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x98, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0x5b, 0xe9, 0x85, 0x8d,
	0xe7, 0xbd, 0xae, 0x5d, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x07, 0x53, 0x75, 0x62, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x03, 0x43, 0x66, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54,
	0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x0c, 0xea, 0xb5, 0x18, 0x08, 0x5b, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x5d, 0x52, 0x03,
	0x43, 0x66, 0x67, 0x22, 0xa4, 0x01, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x61, 0x0a,
	0x0d, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52,
	0x45, 0x53, 0x5f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x1f, 0xea, 0xb5, 0x18, 0x06, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x11,
	0x52, 0x45, 0x53, 0x5f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x28, 0x0a, 0x09, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0x52,
	0x09, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x22, 0x91, 0x09, 0x0a, 0x11, 0x52,
	0x65, 0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77,
	0x12, 0x2d, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x11, 0xea, 0xb5, 0x18, 0x09, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe6, 0x95,
	0xb0, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x08, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x12,
	0x5e, 0x0a, 0x0a, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65,
	0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x2e,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x13,
	0xea, 0xb5, 0x18, 0x0f, 0xe5, 0xa4, 0xa7, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe9, 0x98, 0xb6,
	0xe6, 0xae, 0xb5, 0x52, 0x0a, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x33, 0x0a, 0x0a, 0x4e, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe4, 0xb8, 0x8d, 0xe7, 0xbb, 0x93, 0xe7,
	0xae, 0x97, 0xe5, 0x88, 0xa9, 0xe6, 0x81, 0xaf, 0x52, 0x0a, 0x4e, 0x6f, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0d, 0x4e, 0x6f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x43, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18,
	0x0f, 0xe4, 0xb8, 0x8d, 0xe5, 0x88, 0xb7, 0xe6, 0x96, 0xb0, 0xe5, 0x8d, 0xa1, 0xe6, 0xb1, 0xa0,
	0x52, 0x0d, 0x4e, 0x6f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x61, 0x72, 0x64, 0x12,
	0x2d, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0, 0xe9, 0x87, 0x91, 0xe5,
	0xb8, 0x81, 0xe6, 0x95, 0xb0, 0x52, 0x07, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x2b,
	0x0a, 0x06, 0x41, 0x64, 0x64, 0x45, 0x78, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13,
	0xea, 0xb5, 0x18, 0x0f, 0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0, 0xe7, 0xbb, 0x8f, 0xe9, 0xaa, 0x8c,
	0xe6, 0x95, 0xb0, 0x52, 0x06, 0x41, 0x64, 0x64, 0x45, 0x78, 0x70, 0x12, 0x38, 0x0a, 0x09, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a,
	0xea, 0xb5, 0x18, 0x12, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba,
	0xe5, 0x90, 0x8d, 0xe5, 0xad, 0x97, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x09, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea,
	0xb5, 0x18, 0x0c, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x52,
	0x0e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x46, 0x0a, 0x0f, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe6, 0x98,
	0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xbf, 0x9d, 0xe5, 0xad, 0x98, 0xe5, 0x88, 0x86, 0xe6, 0xae, 0xb5,
	0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x0f, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x14, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba, 0xe5, 0x9b, 0x9e, 0xe5,
	0x90, 0x88, 0xf8, 0xb5, 0x18, 0x01, 0x52, 0x0f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x34, 0x0a, 0x0c, 0x53, 0x79, 0x6e, 0x63, 0x68,
	0x72, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea,
	0xb5, 0x18, 0x0c, 0xe5, 0x90, 0x8c, 0xe6, 0xad, 0xa5, 0xe8, 0xbf, 0x9b, 0xe5, 0x85, 0xa5, 0x52,
	0x0c, 0x53, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x65, 0x0a,
	0x12, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x52, 0x65, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x0c, 0xe5,
	0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe5, 0x8a, 0x9f, 0xe8, 0x83, 0xbd, 0xda, 0xb5, 0x18, 0x01, 0x33,
	0x52, 0x12, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x69, 0x63,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xea, 0xb5, 0x18,
	0x0f, 0xe5, 0xa4, 0xa7, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe6, 0xa0, 0x87, 0xe9, 0xa2, 0x98,
	0xf8, 0xb5, 0x18, 0x01, 0x52, 0x0d, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x69, 0x63, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x63, 0x6f, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xea, 0xb5, 0x18, 0x0d, 0xe5, 0xa4, 0xa7, 0xe5,
	0x9b, 0x9e, 0xe5, 0x90, 0x88, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x09, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x49, 0x63, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53,
	0x68, 0x6f, 0x77, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe9,
	0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe9, 0x98, 0xb6, 0xe6, 0xae, 0xb5, 0xe6, 0x98, 0xbe, 0xe7, 0xa4,
	0xba, 0x52, 0x0b, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x22, 0xb5,
	0x01, 0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x25, 0x0a, 0x15, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x57, 0x61, 0x72, 0x6d, 0x75, 0x70, 0x10, 0x00, 0x1a, 0x0a, 0xaa, 0xb6,
	0x18, 0x06, 0xe7, 0x83, 0xad, 0xe8, 0xba, 0xab, 0x12, 0x27, 0x0a, 0x17, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x10, 0x01, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0x8f, 0x91, 0xe8, 0x82,
	0xb2, 0x12, 0x23, 0x0a, 0x13, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x44, 0x75, 0x65, 0x6c, 0x10, 0x02, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06,
	0xe5, 0xaf, 0xb9, 0xe6, 0x8a, 0x97, 0x12, 0x24, 0x0a, 0x14, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x10, 0x03,
	0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0x86, 0xb3, 0xe8, 0xb5, 0x9b, 0x1a, 0x08, 0x88, 0xf9,
	0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x3a, 0x26, 0x8a, 0x97, 0x22, 0x08, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x4e, 0x75, 0x6d, 0x92, 0x97, 0x22, 0x0a, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x67, 0x65, 0xf0, 0x97, 0x22, 0x01, 0xf8, 0x97, 0x22, 0x01, 0x98, 0x97, 0x22, 0x02, 0x22, 0x95,
	0x04, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e,
	0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0xea, 0xb5, 0x18, 0x09, 0xe5, 0x9b,
	0x9e, 0xe5, 0x90, 0x88, 0xe6, 0x95, 0xb0, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x08, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x32, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c,
	0xe5, 0x87, 0x86, 0xe5, 0xa4, 0x87, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0b, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x52, 0x61, 0x63,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x0c, 0xe6, 0xad, 0xa3, 0xe8, 0xb5, 0x9b, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x08, 0x52,
	0x61, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x4f, 0x76, 0x65, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe5,
	0x8a, 0xa0, 0xe6, 0x97, 0xb6, 0xe8, 0xb5, 0x9b, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x08,
	0x4f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea,
	0xb5, 0x18, 0x0c, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0x52,
	0x0b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x12,
	0x54, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x74, 0x61, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe4, 0xbc,
	0xa0, 0xe9, 0x80, 0x81, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x12, 0x54, 0x65, 0x6c, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x61, 0x74, 0x61, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38,
	0x0a, 0x0b, 0x50, 0x72, 0x65, 0x52, 0x61, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x88, 0x98, 0xe5, 0x89, 0x8d, 0xe9,
	0xa2, 0x84, 0xe5, 0xa4, 0x87, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0b, 0x50, 0x72, 0x65,
	0x52, 0x61, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x10, 0x44, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0xe4, 0xb8,
	0x8a, 0xe9, 0x99, 0x90, 0x52, 0x10, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x70, 0x65,
	0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x41, 0x69, 0x72, 0x64, 0x72, 0x6f,
	0x70, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0xea, 0xb5, 0x18,
	0x12, 0xe5, 0x85, 0xa8, 0xe5, 0xb1, 0x80, 0xe6, 0x8a, 0x95, 0xe6, 0x94, 0xbe, 0xe6, 0x97, 0xb6,
	0xe9, 0x97, 0xb4, 0x52, 0x0b, 0x41, 0x69, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65,
	0x3a, 0x14, 0x8a, 0x97, 0x22, 0x08, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0xf0, 0x97,
	0x22, 0x01, 0xf8, 0x97, 0x22, 0x01, 0x22, 0xa9, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x47, 0x61,
	0x6d, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x38, 0x0a, 0x0e,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88,
	0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x52, 0x0e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x47,
	0x61, 0x6d, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x16,
	0xea, 0xb5, 0x18, 0x12, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x85, 0x81, 0xe8, 0xae, 0xb8,
	0xe8, 0xa7, 0x82, 0xe6, 0x88, 0x98, 0x52, 0x0e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x47, 0x61, 0x6d,
	0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x3a, 0x1a, 0x8a, 0x97, 0x22, 0x0e, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0xf0, 0x97, 0x22, 0x01, 0xf8, 0x97,
	0x22, 0x01, 0x22, 0xef, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x43, 0x68, 0x65,
	0x73, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22,
	0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x06, 0xea, 0xb5, 0x18, 0x02, 0x49, 0x44, 0x52, 0x08, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x06, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x58, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x0b, 0xea, 0xb5, 0x18, 0x07, 0x58, 0xe5, 0x9d, 0x90, 0xe6, 0xa0, 0x87, 0x52,
	0x06, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x58, 0x12, 0x23, 0x0a, 0x06, 0x43, 0x6f, 0x6f, 0x72, 0x64,
	0x5a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xea, 0xb5, 0x18, 0x07, 0x5a, 0xe5, 0x9d,
	0x90, 0xe6, 0xa0, 0x87, 0x52, 0x06, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x5a, 0x12, 0x20, 0x0a, 0x05,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xea, 0xb5, 0x18,
	0x06, 0xe5, 0xbb, 0xb6, 0xe6, 0x97, 0xb6, 0x52, 0x05, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x21,
	0x0a, 0x05, 0x44, 0x65, 0x73, 0x74, 0x58, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xea,
	0xb5, 0x18, 0x07, 0x58, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0x52, 0x05, 0x44, 0x65, 0x73, 0x74,
	0x58, 0x12, 0x21, 0x0a, 0x05, 0x44, 0x65, 0x73, 0x74, 0x5a, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0b, 0xea, 0xb5, 0x18, 0x07, 0x5a, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0x52, 0x05, 0x44,
	0x65, 0x73, 0x74, 0x5a, 0x22, 0xaa, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x43, 0x68, 0x65, 0x73,
	0x73, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x08, 0xe6, 0x91, 0x86, 0xe6, 0x94, 0xbe, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x08, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x56, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x43, 0x68,
	0x65, 0x73, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x10, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xda, 0xb5, 0x18, 0x02, 0x32,
	0x30, 0x52, 0x0c, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x3a,
	0x10, 0x8a, 0x97, 0x22, 0x08, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x49, 0x44, 0xf8, 0x97, 0x22,
	0x01, 0x22, 0xe4, 0x6d, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe5,
	0x85, 0xb3, 0xe5, 0x8d, 0xa1, 0xe5, 0x90, 0x8d, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41,
	0x0a, 0x0e, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe7, 0xad, 0x96, 0xe5,
	0x88, 0x92, 0xe5, 0x85, 0xb3, 0xe5, 0x8d, 0xa1, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0xe5, 0x90,
	0x8d, 0x52, 0x0e, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x41, 0x0a, 0x0e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe7,
	0xbe, 0x8e, 0xe6, 0x9c, 0xaf, 0xe5, 0x85, 0xb3, 0xe5, 0x8d, 0xa1, 0xe6, 0x96, 0x87, 0xe4, 0xbb,
	0xb6, 0xe5, 0x90, 0x8d, 0x52, 0x0e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x45, 0x78,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x19, 0xea, 0xb5, 0x18, 0x15, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe5, 0x85, 0xb3, 0xe5, 0x8d,
	0xa1, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0xe5, 0x90, 0x8d, 0x52, 0x11, 0x41, 0x72, 0x74, 0x69,
	0x73, 0x74, 0x45, 0x78, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x73, 0x0a,
	0x21, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x4b, 0x69, 0x63, 0x6b, 0x6f, 0x75,
	0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x25, 0xea, 0xb5, 0x18, 0x21, 0xe6, 0x98,
	0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0xe6, 0xb8, 0xb8, 0xe6, 0x88, 0x8f,
	0xe5, 0x89, 0x8d, 0xe7, 0xa6, 0x81, 0xe6, 0xad, 0xa2, 0xe9, 0xa1, 0xb6, 0xe5, 0x8f, 0xb7, 0x52,
	0x21, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x4b, 0x69, 0x63, 0x6b, 0x6f, 0x75,
	0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x38, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x9c, 0xb0,
	0xe5, 0x9b, 0xbe, 0xe7, 0xa1, 0xae, 0xe8, 0xae, 0xa4, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52,
	0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x0e,
	0x4e, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x28, 0xea, 0xb5, 0x18, 0x24, 0xe4, 0xb8, 0xad, 0xe4, 0xbd, 0x8e,
	0xe9, 0x85, 0x8d, 0xe5, 0xa4, 0x9c, 0xe6, 0x99, 0x9a, 0xe5, 0x9c, 0xba, 0xe6, 0x99, 0xaf, 0xe5,
	0xbc, 0x80, 0xe5, 0x90, 0xaf, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0x52, 0x0e,
	0x4e, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4c,
	0x0a, 0x0c, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x28, 0xea, 0xb5, 0x18, 0x24, 0xe4, 0xb8, 0xad, 0xe4, 0xbd, 0x8e,
	0xe9, 0x85, 0x8d, 0xe5, 0xa4, 0x9c, 0xe6, 0x99, 0x9a, 0xe5, 0x9c, 0xba, 0xe6, 0x99, 0xaf, 0xe7,
	0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0x52, 0x0c,
	0x4e, 0x69, 0x67, 0x68, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x09,
	0x4e, 0x69, 0x67, 0x68, 0x74, 0x44, 0x61, 0x79, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x25, 0xea, 0xb5, 0x18, 0x21, 0xe4, 0xb8, 0xad, 0xe4, 0xbd, 0x8e, 0xe9, 0x85, 0x8d, 0xe5, 0xa4,
	0x9c, 0xe6, 0x99, 0x9a, 0xe5, 0x9c, 0xba, 0xe6, 0x99, 0xaf, 0xe5, 0x90, 0xaf, 0xe7, 0x94, 0xa8,
	0xe5, 0xa4, 0xa9, 0xe6, 0x95, 0xb0, 0x52, 0x09, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x44, 0x61, 0x79,
	0x73, 0x12, 0x30, 0x0a, 0x0a, 0x4d, 0x61, 0x78, 0x41, 0x63, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0x8e, 0xa9, 0xe5, 0xae,
	0xb6, 0xe4, 0xba, 0xba, 0xe6, 0x95, 0xb0, 0x52, 0x0a, 0x4d, 0x61, 0x78, 0x41, 0x63, 0x6e, 0x74,
	0x4e, 0x75, 0x6d, 0x12, 0x2d, 0x0a, 0x07, 0x4d, 0x61, 0x78, 0x43, 0x61, 0x6d, 0x70, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7,
	0xe9, 0x98, 0xb5, 0xe8, 0x90, 0xa5, 0xe6, 0x95, 0xb0, 0x52, 0x07, 0x4d, 0x61, 0x78, 0x43, 0x61,
	0x6d, 0x70, 0x12, 0x40, 0x0a, 0x0c, 0x4c, 0x65, 0x61, 0x73, 0x74, 0x41, 0x63, 0x6e, 0x74, 0x4e,
	0x75, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe6, 0x9c,
	0x80, 0xe4, 0xbd, 0x8e, 0xe5, 0xbc, 0x80, 0xe5, 0xb1, 0x80, 0xe7, 0x8e, 0xa9, 0xe5, 0xae, 0xb6,
	0xe4, 0xba, 0xba, 0xe6, 0x95, 0xb0, 0x52, 0x0c, 0x4c, 0x65, 0x61, 0x73, 0x74, 0x41, 0x63, 0x6e,
	0x74, 0x4e, 0x75, 0x6d, 0x12, 0x44, 0x0a, 0x0e, 0x4d, 0x61, 0x78, 0x41, 0x63, 0x6e, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5,
	0x18, 0x18, 0xe6, 0xbb, 0xa1, 0xe4, 0xba, 0xba, 0xe5, 0xbc, 0x80, 0xe5, 0xb1, 0x80, 0xe8, 0xb6,
	0x85, 0xe6, 0x97, 0xb6, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x52, 0x0e, 0x4d, 0x61, 0x78, 0x41,
	0x63, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x12, 0x3c, 0x0a, 0x0d, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0xe6, 0x88, 0xbf,
	0xe9, 0x97, 0xb4, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0d, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x49, 0x73, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x41, 0x49, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x1f, 0xea, 0xb5, 0x18, 0x1b, 0xe6, 0x88, 0xbf, 0xe9, 0x97, 0xb4, 0xe6, 0x98, 0xaf,
	0xe5, 0x90, 0xa6, 0xe7, 0xa6, 0x81, 0xe6, 0xad, 0xa2, 0xe5, 0x8a, 0xa0, 0xe7, 0x94, 0xb5, 0xe8,
	0x84, 0x91, 0x52, 0x0f, 0x49, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x64, 0x64, 0x43, 0x6f,
	0x6d, 0x41, 0x49, 0x12, 0x30, 0x0a, 0x07, 0x48, 0x65, 0x72, 0x6f, 0x4e, 0x75, 0x6d, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0xad, 0xa6, 0xe5, 0xb0, 0x86,
	0xe4, 0xb8, 0x8a, 0xe5, 0x9c, 0xba, 0xe4, 0xba, 0xba, 0xe6, 0x95, 0xb0, 0x52, 0x07, 0x48, 0x65,
	0x72, 0x6f, 0x4e, 0x75, 0x6d, 0x12, 0x44, 0x0a, 0x0e, 0x49, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x48, 0x65, 0x72, 0x6f, 0x44, 0x75, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea,
	0xb5, 0x18, 0x18, 0xe6, 0xad, 0xa6, 0xe5, 0xb0, 0x86, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5,
	0x85, 0x81, 0xe8, 0xae, 0xb8, 0xe9, 0x87, 0x8d, 0xe5, 0xa4, 0x8d, 0x52, 0x0e, 0x49, 0x73, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x48, 0x65, 0x72, 0x6f, 0x44, 0x75, 0x70, 0x12, 0x2c, 0x0a, 0x0a, 0x48,
	0x65, 0x72, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x0c, 0xea, 0xb5, 0x18, 0x08, 0xe9, 0x98, 0xb5, 0xe5, 0xae, 0xb9, 0x49, 0x44, 0x52, 0x0a, 0x48,
	0x65, 0x72, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0a, 0x48, 0x65, 0x72,
	0x6f, 0x41, 0x49, 0x54, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x42, 0x12, 0xea,
	0xb5, 0x18, 0x0e, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0x41, 0x49, 0xe6, 0x96, 0xb9, 0xe5, 0xbc,
	0x8f, 0x52, 0x0a, 0x48, 0x65, 0x72, 0x6f, 0x41, 0x49, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a,
	0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x48, 0x65, 0x72, 0x6f, 0x41, 0x49, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xea, 0xb5, 0x18, 0x14, 0xe5, 0x85, 0xb3, 0xe5, 0x8d,
	0xa1, 0xe7, 0x89, 0xb9, 0xe5, 0xae, 0x9a, 0xe7, 0x94, 0xb5, 0xe8, 0x84, 0x91, 0x41, 0x49, 0x52,
	0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x48, 0x65, 0x72, 0x6f, 0x41, 0x49, 0x12,
	0x5c, 0x0a, 0x14, 0x48, 0x65, 0x72, 0x6f, 0x42, 0x6f, 0x72, 0x6e, 0x41, 0x67, 0x65, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x42, 0x28, 0xea,
	0xb5, 0x18, 0x24, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe5, 0x87, 0xba, 0xe7, 0x94, 0x9f, 0xe5,
	0x8a, 0xa8, 0xe7, 0x94, 0xbb, 0xe5, 0xbb, 0xb6, 0xe8, 0xbf, 0x9f, 0xe6, 0x92, 0xad, 0xe6, 0x94,
	0xbe, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x14, 0x48, 0x65, 0x72, 0x6f, 0x42, 0x6f, 0x72,
	0x6e, 0x41, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a,
	0x0d, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe7, 0xbc, 0xa9, 0xe7, 0x95, 0xa5,
	0xe5, 0x9b, 0xbe, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x0d, 0x54, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2d, 0x0a, 0x07, 0x4d, 0x61, 0x70, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe5,
	0xb0, 0x8f, 0xe5, 0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x07,
	0x4d, 0x61, 0x70, 0x50, 0x61, 0x74, 0x68, 0x12, 0x33, 0x0a, 0x0a, 0x42, 0x69, 0x67, 0x4d, 0x61,
	0x70, 0x50, 0x61, 0x74, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xea, 0xb5, 0x18,
	0x0f, 0xe5, 0xa4, 0xa7, 0xe5, 0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84,
	0x52, 0x0a, 0x42, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x50, 0x61, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x08,
	0x4d, 0x61, 0x70, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x42, 0x16,
	0xea, 0xb5, 0x18, 0x12, 0xe9, 0x80, 0xbb, 0xe8, 0xbe, 0x91, 0xe5, 0x9c, 0xb0, 0xe5, 0x9b, 0xbe,
	0xe5, 0xae, 0xbd, 0xe5, 0xba, 0xa6, 0x52, 0x08, 0x4d, 0x61, 0x70, 0x57, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x34, 0x0a, 0x09, 0x4d, 0x61, 0x70, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe9, 0x80, 0xbb, 0xe8, 0xbe, 0x91, 0xe5,
	0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe9, 0xab, 0x98, 0xe5, 0xba, 0xa6, 0x52, 0x09, 0x4d, 0x61, 0x70,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x39, 0x0a, 0x0d, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x4d,
	0x61, 0x70, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x13, 0xea,
	0xb5, 0x18, 0x0f, 0xe5, 0xb0, 0x8f, 0xe5, 0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe5, 0xae, 0xbd, 0xe5,
	0xba, 0xa6, 0x52, 0x0d, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x57, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x3b, 0x0a, 0x0e, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe5,
	0xb0, 0x8f, 0xe5, 0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe9, 0xab, 0x98, 0xe5, 0xba, 0xa6, 0x52, 0x0e,
	0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x35,
	0x0a, 0x0b, 0x42, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe5, 0xa4, 0xa7, 0xe5, 0x9c, 0xb0, 0xe5,
	0x9b, 0xbe, 0xe5, 0xae, 0xbd, 0xe5, 0xba, 0xa6, 0x52, 0x0b, 0x42, 0x69, 0x67, 0x4d, 0x61, 0x70,
	0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x37, 0x0a, 0x0c, 0x42, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x42, 0x13, 0xea, 0xb5, 0x18,
	0x0f, 0xe5, 0xa4, 0xa7, 0xe5, 0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe9, 0xab, 0x98, 0xe5, 0xba, 0xa6,
	0x52, 0x0c, 0x42, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3c,
	0x0a, 0x0d, 0x4d, 0x61, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x9c, 0xb0, 0xe5, 0x9b,
	0xbe, 0xe5, 0x88, 0x86, 0xe5, 0x9d, 0x97, 0xe5, 0xae, 0xbd, 0xe5, 0xba, 0xa6, 0x52, 0x0d, 0x4d,
	0x61, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x3e, 0x0a, 0x0e,
	0x4d, 0x61, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x9c, 0xb0, 0xe5, 0x9b, 0xbe,
	0xe5, 0x88, 0x86, 0xe5, 0x9d, 0x97, 0xe9, 0xab, 0x98, 0xe5, 0xba, 0xa6, 0x52, 0x0e, 0x4d, 0x61,
	0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x4d, 0x0a, 0x11,
	0x55, 0x73, 0x65, 0x4e, 0x61, 0x76, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1f, 0xea, 0xb5, 0x18, 0x1b, 0xe5, 0x90, 0xaf,
	0xe7, 0x94, 0xa8, 0xe5, 0xaf, 0xbc, 0xe8, 0x88, 0xaa, 0xe7, 0x89, 0x87, 0xe9, 0xab, 0x98, 0xe5,
	0xba, 0xa6, 0xe9, 0x99, 0x90, 0xe5, 0x80, 0xbc, 0x52, 0x11, 0x55, 0x73, 0x65, 0x4e, 0x61, 0x76,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x4d,
	0x61, 0x70, 0x46, 0x6f, 0x77, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x02,
	0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe5, 0xb0, 0x8f, 0xe5, 0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe8,
	0xbf, 0xb7, 0xe9, 0x9b, 0xbe, 0xe7, 0xbc, 0xa9, 0xe6, 0x94, 0xbe, 0xe5, 0x80, 0xbc, 0x52, 0x0b,
	0x4d, 0x61, 0x70, 0x46, 0x6f, 0x77, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x42,
	0x69, 0x67, 0x4d, 0x61, 0x70, 0x46, 0x6f, 0x77, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x02, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe5, 0xa4, 0xa7, 0xe5, 0x9c, 0xb0, 0xe5,
	0x9b, 0xbe, 0xe8, 0xbf, 0xb7, 0xe9, 0x9b, 0xbe, 0xe7, 0xbc, 0xa9, 0xe6, 0x94, 0xbe, 0xe5, 0x80,
	0xbc, 0x52, 0x0e, 0x42, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x46, 0x6f, 0x77, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x12, 0x40, 0x0a, 0x0b, 0x53, 0x6f, 0x75, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x49, 0x44,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1e, 0xea, 0xb5, 0x18, 0x1a, 0xe9, 0xad, 0x82, 0xe5,
	0x80, 0xbc, 0xe7, 0xbb, 0x8f, 0xe9, 0xaa, 0x8c, 0xe5, 0x88, 0x86, 0xe9, 0x85, 0x8d, 0xe8, 0xa7,
	0x84, 0xe5, 0x88, 0x99, 0x49, 0x44, 0x52, 0x0b, 0x53, 0x6f, 0x75, 0x6c, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x49, 0x44, 0x12, 0x4e, 0x0a, 0x13, 0x49, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x45, 0x78, 0x70,
	0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xbc, 0x80, 0xe5,
	0x90, 0xaf, 0xe7, 0xbb, 0x8f, 0xe9, 0xaa, 0x8c, 0xe8, 0xa1, 0xa5, 0xe5, 0x81, 0xbf, 0x52, 0x13,
	0x49, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73,
	0x61, 0x74, 0x65, 0x12, 0x66, 0x0a, 0x13, 0x45, 0x78, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e,
	0x73, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x26, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54,
	0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x15, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0xbb, 0x8f, 0xe9, 0xaa, 0x8c, 0xe8, 0xa1, 0xa5, 0xe5, 0x81,
	0xbf, 0xda, 0xb5, 0x18, 0x01, 0x35, 0x52, 0x13, 0x45, 0x78, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x65,
	0x6e, 0x73, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x50, 0x0a, 0x14, 0x49,
	0x73, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73,
	0x61, 0x74, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe6,
	0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0xe9, 0x87, 0x91, 0xe5, 0xb8,
	0x81, 0xe8, 0xa1, 0xa5, 0xe5, 0x81, 0xbf, 0x52, 0x14, 0x49, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x43,
	0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x12, 0x68, 0x0a,
	0x14, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x52, 0x65,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x43, 0x6f, 0x6d, 0x70,
	0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x0c,
	0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81, 0xe8, 0xa1, 0xa5, 0xe5, 0x81, 0xbf, 0xda, 0xb5, 0x18, 0x01,
	0x35, 0x52, 0x14, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x36, 0x0a, 0x0c, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x42, 0x12, 0xea,
	0xb5, 0x18, 0x0e, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0x49,
	0x44, 0x52, 0x0c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12,
	0x39, 0x0a, 0x0d, 0x45, 0x78, 0x74, 0x72, 0x61, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x32, 0x49, 0x64,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x05, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe9, 0xa2, 0x9d, 0xe5,
	0xa4, 0x96, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0x32, 0x49, 0x44, 0x52, 0x0d, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x32, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0d, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x33, 0x49, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe6, 0x8a, 0x80,
	0xe8, 0x83, 0xbd, 0x33, 0x49, 0x44, 0x52, 0x0d, 0x45, 0x78, 0x74, 0x72, 0x61, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x33, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0d, 0x45, 0x78, 0x74, 0x72, 0x61, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x34, 0x49, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x42, 0x13, 0xea, 0xb5,
	0x18, 0x0f, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0x34, 0x49,
	0x44, 0x52, 0x0d, 0x45, 0x78, 0x74, 0x72, 0x61, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x34, 0x49, 0x64,
	0x12, 0x4d, 0x0a, 0x14, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x31, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x42, 0x19,
	0xea, 0xb5, 0x18, 0x15, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe8, 0xa2, 0xab, 0xe5, 0x8a, 0xa8,
	0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0x49, 0x44, 0x31, 0x52, 0x14, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x31, 0x12,
	0x4d, 0x0a, 0x14, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x32, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x05, 0x42, 0x19, 0xea,
	0xb5, 0x18, 0x15, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe8, 0xa2, 0xab, 0xe5, 0x8a, 0xa8, 0xe6,
	0x8a, 0x80, 0xe8, 0x83, 0xbd, 0x49, 0x44, 0x32, 0x52, 0x14, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50,
	0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x32, 0x12, 0x4e,
	0x0a, 0x13, 0x45, 0x78, 0x74, 0x72, 0x61, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x53, 0x6c, 0x6f, 0x74, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18,
	0x18, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe9, 0x80, 0xbb,
	0xe8, 0xbe, 0x91, 0xe6, 0xa7, 0xbd, 0xe4, 0xbd, 0x8d, 0x52, 0x13, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x51,
	0x0a, 0x14, 0x45, 0x78, 0x74, 0x72, 0x61, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x32, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x53, 0x6c, 0x6f, 0x74, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1d, 0xea, 0xb5,
	0x18, 0x19, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0x32, 0xe9,
	0x80, 0xbb, 0xe8, 0xbe, 0x91, 0xe6, 0xa7, 0xbd, 0xe4, 0xbd, 0x8d, 0x52, 0x14, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x32, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x53, 0x6c, 0x6f,
	0x74, 0x12, 0x51, 0x0a, 0x14, 0x45, 0x78, 0x74, 0x72, 0x61, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x33,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x53, 0x6c, 0x6f, 0x74, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x1d, 0xea, 0xb5, 0x18, 0x19, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe6, 0x8a, 0x80, 0xe8, 0x83,
	0xbd, 0x33, 0xe9, 0x80, 0xbb, 0xe8, 0xbe, 0x91, 0xe6, 0xa7, 0xbd, 0xe4, 0xbd, 0x8d, 0x52, 0x14,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x33, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x53, 0x6c, 0x6f, 0x74, 0x12, 0x51, 0x0a, 0x14, 0x45, 0x78, 0x74, 0x72, 0x61, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x34, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x53, 0x6c, 0x6f, 0x74, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1d, 0xea, 0xb5, 0x18, 0x19, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe6, 0x8a,
	0x80, 0xe8, 0x83, 0xbd, 0x34, 0xe9, 0x80, 0xbb, 0xe8, 0xbe, 0x91, 0xe6, 0xa7, 0xbd, 0xe4, 0xbd,
	0x8d, 0x52, 0x14, 0x45, 0x78, 0x74, 0x72, 0x61, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x34, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x3c, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16,
	0xea, 0xb5, 0x18, 0x12, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe9, 0xa1, 0xb5, 0xe9, 0x9d, 0xa2,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0d, 0x46, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x52, 0x61, 0x6e, 0x64, 0x50, 0x69, 0x63,
	0x6b, 0x48, 0x65, 0x72, 0x6f, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x0c, 0xe9, 0x9a, 0x8f, 0xe6, 0x9c, 0xba, 0xe9, 0x80, 0x89, 0xe5, 0xb0, 0x86, 0x52, 0x0c, 0x52,
	0x61, 0x6e, 0x64, 0x50, 0x69, 0x63, 0x6b, 0x48, 0x65, 0x72, 0x6f, 0x12, 0x45, 0x0a, 0x10, 0x50,
	0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x35, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe9, 0xa2, 0x84, 0xe5, 0x8a,
	0xa0, 0xe8, 0xbd, 0xbd, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0x52, 0x10, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x44, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x57, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x72, 0x49, 0x64, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x18, 0xea, 0xb5,
	0x18, 0x14, 0xe9, 0x99, 0x84, 0xe5, 0x8a, 0xa0, 0xe8, 0x83, 0x9c, 0xe5, 0x88, 0xa9, 0xe6, 0x9d,
	0xa1, 0xe4, 0xbb, 0xb6, 0x49, 0x44, 0x52, 0x10, 0x41, 0x64, 0x64, 0x57, 0x69, 0x6e, 0x43, 0x6f,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x4c,
	0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x49, 0x64, 0x18, 0x37, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x18, 0xea, 0xb5, 0x18, 0x14, 0xe9, 0x99, 0x84, 0xe5, 0x8a, 0xa0, 0xe5,
	0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x49, 0x44, 0x52, 0x11, 0x41,
	0x64, 0x64, 0x4c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x49, 0x64,
	0x12, 0x3a, 0x0a, 0x0c, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x8d, 0x95, 0xe5,
	0xb1, 0x80, 0xe6, 0xb8, 0xb8, 0xe6, 0x88, 0x8f, 0xe6, 0x97, 0xb6, 0xe9, 0x95, 0xbf, 0x52, 0x0c,
	0x54, 0x69, 0x6d, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0c,
	0x53, 0x6f, 0x75, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x18, 0x39, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x18, 0xea, 0xb5, 0x18, 0x14, 0xe9, 0xad, 0x82, 0xe5, 0x80, 0xbc, 0xe5, 0x9f,
	0xba, 0xe7, 0xa1, 0x80, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x49, 0x44, 0x52, 0x0c, 0x53, 0x6f,
	0x75, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x0a, 0x43, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x46, 0x6c, 0x69, 0x70, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x0c, 0xe9, 0x95, 0x9c, 0xe5, 0xa4, 0xb4, 0xe5, 0x8f, 0x8d, 0xe8, 0xbd, 0xac,
	0x52, 0x0a, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x46, 0x6c, 0x69, 0x70, 0x12, 0x34, 0x0a, 0x0c,
	0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x18, 0x3b, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe9, 0x95, 0x9c, 0xe5, 0xa4, 0xb4, 0xe6, 0x97,
	0x8b, 0xe8, 0xbd, 0xac, 0x52, 0x0c, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x6f, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x57, 0x0a, 0x1a, 0x53, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x31,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x05, 0x42, 0x17, 0xea, 0xb5, 0x18, 0x13, 0xe5, 0x85, 0xb5, 0xe7,
	0xba, 0xbf, 0xe6, 0x92, 0xad, 0xe6, 0x8a, 0xa5, 0xe5, 0xbb, 0xb6, 0xe6, 0x97, 0xb6, 0x31, 0x52,
	0x1a, 0x53, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x31, 0x12, 0x57, 0x0a, 0x1a, 0x53,
	0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x32, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x17, 0xea, 0xb5, 0x18, 0x13, 0xe5, 0x85, 0xb5, 0xe7, 0xba, 0xbf, 0xe6, 0x92, 0xad, 0xe6, 0x8a,
	0xa5, 0xe5, 0xbb, 0xb6, 0xe6, 0x97, 0xb6, 0x32, 0x52, 0x1a, 0x53, 0x6f, 0x6c, 0x64, 0x69, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x32, 0x12, 0x4a, 0x0a, 0x14, 0x53, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x3e, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x85, 0xb5, 0xe7, 0xba, 0xbf, 0xe6, 0xbf,
	0x80, 0xe6, 0xb4, 0xbb, 0xe5, 0xbb, 0xb6, 0xe6, 0x97, 0xb6, 0x52, 0x14, 0x53, 0x6f, 0x6c, 0x64,
	0x69, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x12, 0x42, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12,
	0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0xe8, 0xb4, 0xad, 0xe4, 0xb9, 0xb0, 0xe9, 0x99, 0x90, 0xe5,
	0x88, 0xb6, 0x52, 0x10, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x42, 0x0a, 0x10, 0x42, 0x69, 0x72, 0x74, 0x68, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16,
	0xea, 0xb5, 0x18, 0x12, 0xe5, 0x87, 0xba, 0xe7, 0x94, 0x9f, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7,
	0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x10, 0x42, 0x69, 0x72, 0x74, 0x68, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3c, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6f,
	0x73, 0x50, 0x69, 0x63, 0x6b, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x16, 0xea, 0xb5, 0x18, 0x12, 0xe4, 0xb9, 0xb1, 0xe6, 0x96, 0x97, 0xe9, 0x80, 0x89, 0xe4, 0xba,
	0xba, 0xe8, 0xa7, 0x84, 0xe5, 0x88, 0x99, 0x52, 0x0d, 0x43, 0x68, 0x61, 0x6f, 0x73, 0x50, 0x69,
	0x63, 0x6b, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x11, 0x48, 0x65, 0x61, 0x64, 0x50, 0x74,
	0x73, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x42, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe4, 0xba, 0xba, 0xe5, 0xa4, 0xb4, 0xe4, 0xb8, 0x8a,
	0xe9, 0x99, 0x90, 0x52, 0x11, 0x48, 0x65, 0x61, 0x64, 0x50, 0x74, 0x73, 0x55, 0x70, 0x70, 0x65,
	0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x59, 0x0a, 0x17, 0x53, 0x72, 0x76, 0x4c, 0x65, 0x61,
	0x73, 0x74, 0x44, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0xea, 0xb5, 0x18, 0x1b, 0xe8, 0x83, 0x9c,
	0xe5, 0x88, 0xa9, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x91, 0xe6, 0x91, 0xa7, 0xe6, 0xaf, 0x81, 0xe5,
	0xa1, 0x94, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x17, 0x53, 0x72, 0x76, 0x4c, 0x65, 0x61,
	0x73, 0x74, 0x44, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x12, 0x5a, 0x0a, 0x16, 0x53, 0x72, 0x76, 0x4c, 0x65, 0x61, 0x73, 0x74, 0x44, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x44, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x22, 0xea, 0xb5, 0x18, 0x1e, 0xe8, 0x83, 0x9c, 0xe5, 0x88, 0xa9, 0xe6, 0x9c, 0x80,
	0xe5, 0xb0, 0x91, 0xe6, 0x91, 0xa7, 0xe6, 0xaf, 0x81, 0xe5, 0x9f, 0xba, 0xe5, 0x9c, 0xb0, 0xe6,
	0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x16, 0x53, 0x72, 0x76, 0x4c, 0x65, 0x61, 0x73, 0x74, 0x44,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x49, 0x0a,
	0x12, 0x53, 0x72, 0x76, 0x4c, 0x65, 0x61, 0x73, 0x74, 0x4b, 0x69, 0x6c, 0x6c, 0x43, 0x6e, 0x74,
	0x4e, 0x75, 0x6d, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe8,
	0x83, 0x9c, 0xe5, 0x88, 0xa9, 0xe4, 0xba, 0xba, 0xe5, 0xa4, 0xb4, 0xe6, 0x95, 0xb0, 0xe9, 0x99,
	0x90, 0xe5, 0x88, 0xb6, 0x52, 0x12, 0x53, 0x72, 0x76, 0x4c, 0x65, 0x61, 0x73, 0x74, 0x4b, 0x69,
	0x6c, 0x6c, 0x43, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x35, 0x0a, 0x0a, 0x44, 0x65, 0x61, 0x6c,
	0x48, 0x61, 0x6e, 0x67, 0x55, 0x70, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x15, 0xea, 0xb5,
	0x18, 0x11, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x9c, 0x89, 0xe6, 0x8c, 0x82, 0xe6, 0x9c,
	0xba, 0x41, 0x49, 0x52, 0x0a, 0x44, 0x65, 0x61, 0x6c, 0x48, 0x61, 0x6e, 0x67, 0x55, 0x70, 0x12,
	0x36, 0x0a, 0x0c, 0x55, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x49, 0x44, 0x18,
	0x47, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0xe8, 0xa7, 0xa3, 0xe9, 0x94,
	0x81, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x49, 0x44, 0x52, 0x0c, 0x55, 0x6e, 0x4c, 0x6f, 0x63,
	0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x09, 0x53, 0x68, 0x6f, 0x77, 0x48,
	0x6f, 0x6e, 0x6f, 0x72, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12,
	0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0xe8, 0x8d, 0xa3, 0xe8,
	0xaa, 0x89, 0x52, 0x09, 0x53, 0x68, 0x6f, 0x77, 0x48, 0x6f, 0x6e, 0x6f, 0x72, 0x12, 0x4b, 0x0a,
	0x0c, 0x50, 0x69, 0x63, 0x6b, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x49, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65,
	0x73, 0x44, 0x54, 0x5f, 0x50, 0x69, 0x63, 0x6b, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe9, 0x80, 0x89, 0xe5, 0xb0, 0x86, 0x52, 0x0c, 0x50, 0x69,
	0x63, 0x6b, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x08, 0x50, 0x69,
	0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e, 0xea, 0xb5,
	0x18, 0x0a, 0x50, 0x69, 0x63, 0x6b, 0xe6, 0x97, 0xb6, 0xe9, 0x95, 0xbf, 0x52, 0x08, 0x50, 0x69,
	0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x18, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f,
	0x77, 0x6e, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x86,
	0xb7, 0xe5, 0x8d, 0xb4, 0xe7, 0xbc, 0xa9, 0xe5, 0x87, 0x8f, 0xe4, 0xb8, 0x8a, 0xe9, 0x99, 0x90,
	0x52, 0x18, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65,
	0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x33, 0x0a, 0x0d, 0x70, 0x76,
	0x70, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x4c, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0x70, 0x76, 0x70, 0xe9, 0x9a, 0xbe, 0xe5, 0xba, 0xa6,
	0x52, 0x0d, 0x70, 0x76, 0x70, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12,
	0x2a, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x44, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x12, 0xea, 0xb5, 0x18, 0x0e, 0xe9, 0x80, 0x89, 0xe5, 0xb0, 0x86, 0xe8, 0x81, 0x8a, 0xe5, 0xa4,
	0xa9, 0x49, 0x44, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x44, 0x12, 0x47, 0x0a, 0x0e, 0x55,
	0x6e, 0x55, 0x73, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x4e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65,
	0x73, 0x44, 0x54, 0x5f, 0x55, 0x6e, 0x55, 0x73, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x42, 0x04,
	0xea, 0xb5, 0x18, 0x00, 0x52, 0x0e, 0x55, 0x6e, 0x55, 0x73, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x0d, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x0c, 0xe6, 0x94, 0xbb, 0xe5, 0x87, 0xbb, 0xe9, 0xa1, 0xba, 0xe5, 0xba, 0x8f, 0x52, 0x0d, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x46, 0x0a, 0x12,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x43,
	0x66, 0x67, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x8a,
	0xa8, 0xe6, 0x80, 0x81, 0xe5, 0xb1, 0x9e, 0xe6, 0x80, 0xa7, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae,
	0x52, 0x12, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x43, 0x66, 0x67, 0x12, 0x52, 0x0a, 0x18, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x47, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x18, 0x51, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x88, 0x9d, 0xe5,
	0xa7, 0x8b, 0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x18,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x47, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x69, 0x6e,
	0x49, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x54, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70,
	0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x42, 0x75, 0x66, 0x66, 0x49, 0x44, 0x18,
	0x52, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x22, 0xea, 0xb5, 0x18, 0x1e, 0xe8, 0xa1, 0xa5, 0xe5, 0x81,
	0xbf, 0xe9, 0xad, 0x82, 0xe5, 0x80, 0xbc, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0xe6, 0x94, 0xb6,
	0xe7, 0x9b, 0x8a, 0x42, 0x75, 0x66, 0x66, 0x49, 0x44, 0x52, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x65,
	0x6e, 0x73, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x42, 0x75, 0x66, 0x66, 0x49, 0x44, 0x12, 0x56,
	0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6c, 0x64,
	0x42, 0x75, 0x66, 0x66, 0x49, 0x44, 0x18, 0x53, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x22, 0xea, 0xb5,
	0x18, 0x1e, 0xe8, 0xa1, 0xa5, 0xe5, 0x81, 0xbf, 0xe5, 0xb1, 0x80, 0xe5, 0x86, 0x85, 0xe9, 0x87,
	0x91, 0xe5, 0xb8, 0x81, 0xe6, 0x94, 0xb6, 0xe7, 0x9b, 0x8a, 0x42, 0x75, 0x66, 0x66, 0x49, 0x44,
	0x52, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6c, 0x64,
	0x42, 0x75, 0x66, 0x66, 0x49, 0x44, 0x12, 0x41, 0x0a, 0x11, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x4f, 0x66, 0x43, 0x61, 0x6d, 0x70, 0x31, 0x18, 0x54, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe9, 0x98, 0xb5, 0xe8, 0x90, 0xa5, 0xe4, 0xb8, 0x80,
	0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x52, 0x11, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x4f, 0x66, 0x43, 0x61, 0x6d, 0x70, 0x31, 0x12, 0x41, 0x0a, 0x11, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x66, 0x43, 0x61, 0x6d, 0x70, 0x32, 0x18, 0x55,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe9, 0x98, 0xb5, 0xe8, 0x90, 0xa5,
	0xe4, 0xba, 0x8c, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x52, 0x11, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x66, 0x43, 0x61, 0x6d, 0x70, 0x32, 0x12, 0x3a, 0x0a, 0x0f,
	0x4d, 0x75, 0x73, 0x69, 0x63, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x56, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe9, 0x9f, 0xb3, 0xe4, 0xb9,
	0x90, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0x52, 0x0f, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0d, 0x4d, 0x75, 0x73, 0x69,
	0x63, 0x45, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x57, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe9, 0x9f, 0xb3, 0xe4, 0xb9, 0x90, 0xe7, 0xbb, 0x93, 0xe6, 0x9d,
	0x9f, 0x52, 0x0d, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x45, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x3b, 0x0a, 0x11, 0x41, 0x6d, 0x62, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x6e, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x58, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xea, 0xb5, 0x18,
	0x09, 0xe7, 0x8e, 0xaf, 0xe5, 0xa2, 0x83, 0xe9, 0x9f, 0xb3, 0x52, 0x11, 0x41, 0x6d, 0x62, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a,
	0x10, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x59, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xea, 0xb5, 0x18, 0x0a, 0x42, 0x61, 0x6e,
	0x6b, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0x52, 0x10, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x11, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x44, 0x72, 0x61, 0x67, 0x18, 0x5a,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0xea, 0xb5, 0x18, 0x1b, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6,
	0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0xe5, 0x8f, 0xb3, 0xe6, 0x91, 0x87, 0xe6, 0x9d, 0x86, 0xe6,
	0x8b, 0x96, 0xe6, 0x8b, 0xbd, 0x52, 0x11, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x44, 0x72, 0x61, 0x67, 0x12, 0x36, 0x0a, 0x0d, 0x47, 0x61, 0x6d, 0x65,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe5, 0x90, 0x8d, 0xe7, 0xa7,
	0xb0, 0x52, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x36, 0x0a, 0x0d, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xa7, 0x86,
	0xe9, 0x87, 0x8e, 0xe6, 0x9c, 0xba, 0xe5, 0x88, 0xb6, 0x52, 0x0d, 0x48, 0x6f, 0x72, 0x69, 0x7a,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x5a, 0x0a, 0x16, 0x49, 0x73, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x54,
	0x61, 0x62, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x22, 0xea, 0xb5, 0x18, 0x1e, 0xe6, 0x98,
	0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x90, 0xaf, 0xe7, 0x94, 0xa8, 0xe5, 0x95, 0x86, 0xe5, 0xba, 0x97,
	0xe8, 0xa7, 0x86, 0xe9, 0x87, 0x8e, 0xe9, 0xa1, 0xb5, 0xe7, 0xad, 0xbe, 0x52, 0x16, 0x49, 0x73,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f,
	0x6e, 0x54, 0x61, 0x62, 0x12, 0x4d, 0x0a, 0x14, 0x49, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x4f, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x18, 0x5e, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x90,
	0xaf, 0xe7, 0x94, 0xa8, 0xe9, 0xa5, 0xb0, 0xe5, 0x93, 0x81, 0xe6, 0xa0, 0x8f, 0x52, 0x14, 0x49,
	0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x6c, 0x6f, 0x74, 0x12, 0x4d, 0x0a, 0x14, 0x49, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x47,
	0x65, 0x6d, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x18, 0x5f, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x90, 0xaf,
	0xe7, 0x94, 0xa8, 0xe5, 0xae, 0x9d, 0xe7, 0x9f, 0xb3, 0xe6, 0xa0, 0x8f, 0x52, 0x14, 0x49, 0x73,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x65, 0x6d, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x53, 0x6c,
	0x6f, 0x74, 0x12, 0x4e, 0x0a, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x18, 0x60, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe6, 0x99, 0xae, 0xe9, 0x80,
	0x9a, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x13, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x6c,
	0x6f, 0x74, 0x12, 0x42, 0x0a, 0x10, 0x49, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x61, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5,
	0x18, 0x12, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x85, 0xb3, 0xe9, 0x97, 0xad, 0xe4, 0xbb,
	0x93, 0xe5, 0xba, 0x93, 0x52, 0x10, 0x49, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0f, 0x4f, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x62, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x12, 0xea, 0xb5, 0x18, 0x0e, 0xe9, 0xa5, 0xb0, 0xe5, 0x93, 0x81, 0xe6, 0x8a, 0x80, 0xe8, 0x83,
	0xbd, 0x49, 0x44, 0x52, 0x0f, 0x4f, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x10, 0x4f, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x43, 0x44, 0x18, 0x63, 0x20, 0x01, 0x28, 0x05, 0x42, 0x12,
	0xea, 0xb5, 0x18, 0x0e, 0xe9, 0xa5, 0xb0, 0xe5, 0x93, 0x81, 0xe5, 0x88, 0x87, 0xe6, 0x8d, 0xa2,
	0x43, 0x44, 0x52, 0x10, 0x4f, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x43, 0x44, 0x12, 0x4e, 0x0a, 0x15, 0x4f, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x43, 0x44, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x18, 0xea, 0xb5, 0x18, 0x14, 0xe9, 0xa6, 0x96, 0xe6, 0xac, 0xa1, 0xe9,
	0xa5, 0xb0, 0xe5, 0x93, 0x81, 0xe5, 0x88, 0x87, 0xe6, 0x8d, 0xa2, 0x43, 0x44, 0x52, 0x15, 0x4f,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x43, 0x44, 0x12, 0x6b, 0x0a, 0x1c, 0x4f, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x43, 0x44, 0x45, 0x66, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x05, 0x42, 0x27, 0xea, 0xb5, 0x18, 0x23,
	0xe9, 0xa6, 0x96, 0xe6, 0xac, 0xa1, 0xe9, 0xa5, 0xb0, 0xe5, 0x93, 0x81, 0xe5, 0x88, 0x87, 0xe6,
	0x8d, 0xa2, 0x43, 0x44, 0xe7, 0x9a, 0x84, 0xe7, 0x94, 0x9f, 0xe6, 0x95, 0x88, 0xe6, 0x97, 0xb6,
	0xe9, 0x97, 0xb4, 0x52, 0x1c, 0x4f, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x43, 0x44, 0x45, 0x66, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x49, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x53, 0x76, 0x72, 0x4a,
	0x75, 0x64, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea,
	0xb5, 0x18, 0x15, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe6, 0x9c, 0x8d, 0xe8, 0xa3, 0x81, 0xe5,
	0x88, 0xa4, 0xe4, 0xba, 0xba, 0xe6, 0x95, 0xb0, 0x52, 0x12, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74,
	0x65, 0x53, 0x76, 0x72, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x35, 0x0a, 0x08,
	0x4a, 0x75, 0x64, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19,
	0xea, 0xb5, 0x18, 0x15, 0xe6, 0xad, 0xa3, 0xe5, 0xbc, 0x8f, 0xe6, 0x9c, 0x8d, 0xe8, 0xa3, 0x81,
	0xe5, 0x88, 0xa4, 0xe4, 0xba, 0xba, 0xe6, 0x95, 0xb0, 0x52, 0x08, 0x4a, 0x75, 0x64, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x12, 0x2f, 0x0a, 0x08, 0x50, 0x61, 0x75, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x18,
	0x68, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe5, 0x8f, 0xaf, 0xe6, 0x9a,
	0x82, 0xe5, 0x81, 0x9c, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x52, 0x08, 0x50, 0x61, 0x75, 0x73,
	0x65, 0x4e, 0x75, 0x6d, 0x12, 0x46, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x50,
	0x61, 0x75, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea,
	0xb5, 0x18, 0x18, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe6, 0x9c, 0x8d, 0xe5, 0x8f, 0xaf, 0xe6,
	0x9a, 0x82, 0xe5, 0x81, 0x9c, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x52, 0x0f, 0x43, 0x6f, 0x6d,
	0x70, 0x65, 0x74, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x49, 0x0a, 0x0f,
	0x57, 0x65, 0x61, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x6a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0xea, 0xb5, 0x18, 0x1b, 0xe8, 0xbf, 0x90, 0xe8, 0x90,
	0xa5, 0xe6, 0xb4, 0xbb, 0xe5, 0x8a, 0xa8, 0xe6, 0xb8, 0xb8, 0xe6, 0x88, 0x8f, 0xe5, 0xad, 0x90,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0f, 0x57, 0x65, 0x61, 0x6c, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x53, 0x0a, 0x17, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x48, 0x69, 0x67, 0x68, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x6f, 0x6c, 0x64, 0x69,
	0x65, 0x72, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe6, 0x98,
	0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0xe9, 0xab, 0x98, 0xe5, 0x9c, 0xb0,
	0xe5, 0x85, 0xb5, 0x52, 0x17, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x69, 0x67, 0x68,
	0x54, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0c,
	0x53, 0x68, 0x6f, 0x77, 0x54, 0x65, 0x61, 0x6d, 0x48, 0x69, 0x6e, 0x74, 0x18, 0x6c, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xbc,
	0x80, 0xe5, 0x90, 0xaf, 0xe9, 0x98, 0xb5, 0xe5, 0xae, 0xb9, 0xe6, 0x8f, 0x90, 0xe7, 0xa4, 0xba,
	0x52, 0x0c, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x65, 0x61, 0x6d, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x40,
	0x0a, 0x0c, 0x53, 0x68, 0x6f, 0x77, 0x57, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x6d,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6,
	0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0xe5, 0x8f, 0x91, 0xe9, 0x80, 0x81, 0xe6, 0x88, 0x98, 0xe7,
	0xbb, 0xa9, 0x52, 0x0c, 0x53, 0x68, 0x6f, 0x77, 0x57, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x12, 0x4b, 0x0a, 0x10, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x50, 0x69, 0x63, 0x6b, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0xea, 0xb5, 0x18, 0x1b,
	0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0xe8, 0xb6, 0x85, 0xe6,
	0x97, 0xb6, 0xe8, 0xbf, 0x9b, 0xe6, 0xb8, 0xb8, 0xe6, 0x88, 0x8f, 0x52, 0x10, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x50, 0x69, 0x63, 0x6b, 0x12, 0x6a, 0x0a,
	0x1b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x6f, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x28, 0xea, 0xb5, 0x18, 0x24, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xbc,
	0x80, 0xe5, 0x90, 0xaf, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96,
	0xe4, 0xb8, 0xbb, 0xe5, 0x8a, 0xa8, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0x52, 0x1b, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x45, 0x78, 0x74, 0x72, 0x61, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x41, 0x0a, 0x0e, 0x46, 0x61, 0x6b,
	0x65, 0x53, 0x69, 0x67, 0x68, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x70, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe5, 0x81, 0x87, 0xe7, 0x82, 0xb9, 0xe4, 0xba, 0xae,
	0xe8, 0xa7, 0x86, 0xe9, 0x87, 0x8e, 0xe5, 0x8d, 0x8a, 0xe5, 0xbe, 0x84, 0x52, 0x0e, 0x46, 0x61,
	0x6b, 0x65, 0x53, 0x69, 0x67, 0x68, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x0c,
	0x48, 0x65, 0x72, 0x6f, 0x4c, 0x69, 0x66, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x71, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe5, 0x87,
	0xba, 0xe7, 0x94, 0x9f, 0xe7, 0x94, 0x9f, 0xe5, 0x91, 0xbd, 0xe6, 0x97, 0xb6, 0xe9, 0x95, 0xbf,
	0x52, 0x0c, 0x48, 0x65, 0x72, 0x6f, 0x4c, 0x69, 0x66, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x50,
	0x0a, 0x14, 0x48, 0x65, 0x72, 0x6f, 0x4c, 0x69, 0x66, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61,
	0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x72, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1c, 0xea, 0xb5,
	0x18, 0x18, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe7, 0x94, 0x9f, 0xe5, 0x91, 0xbd, 0xe6, 0x97,
	0xb6, 0xe9, 0x95, 0xbf, 0xe4, 0xb8, 0x8a, 0xe9, 0x99, 0x90, 0x52, 0x14, 0x48, 0x65, 0x72, 0x6f,
	0x4c, 0x69, 0x66, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x42, 0x0a, 0x10, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x6c, 0x6c, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x73, 0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12,
	0xe9, 0x81, 0x93, 0xe5, 0x85, 0xb7, 0xe5, 0x94, 0xae, 0xe5, 0x8d, 0x96, 0xe6, 0x8a, 0x98, 0xe6,
	0x8d, 0x9f, 0x52, 0x10, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x6c, 0x6c, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x11, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x57, 0x61, 0x72,
	0x6d, 0x65, 0x72, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe7, 0xae, 0xad, 0xe5, 0xa1, 0x94, 0xe5, 0x8d, 0x87, 0xe6, 0xb8,
	0xa9, 0xe6, 0x80, 0xbb, 0xe6, 0x98, 0xaf, 0xe9, 0x87, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x11, 0x54,
	0x6f, 0x77, 0x65, 0x72, 0x57, 0x61, 0x72, 0x6d, 0x65, 0x72, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73,
	0x12, 0x34, 0x0a, 0x0b, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x45, 0x71, 0x75, 0x69, 0x70, 0x18,
	0x75, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0xe5, 0xb1, 0x8f, 0xe8, 0x94,
	0xbd, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0x49, 0x44, 0x52, 0x0b, 0x46, 0x6f, 0x72, 0x62, 0x69,
	0x64, 0x45, 0x71, 0x75, 0x69, 0x70, 0x12, 0x3a, 0x0a, 0x0b, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x18, 0x76, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xea, 0xb5, 0x18,
	0x14, 0xe5, 0x85, 0xb3, 0xe5, 0x8d, 0xa1, 0xe4, 0xb8, 0x93, 0xe5, 0xb1, 0x9e, 0xe8, 0xa3, 0x85,
	0xe5, 0xa4, 0x87, 0x49, 0x44, 0x52, 0x0b, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x12, 0x42, 0x0a, 0x0f, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x53, 0x68, 0x6f, 0x70,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x18, 0x77, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xea, 0xb5, 0x18,
	0x14, 0xe5, 0x95, 0x86, 0xe5, 0xba, 0x97, 0xe5, 0xb1, 0x8f, 0xe8, 0x94, 0xbd, 0xe8, 0xa3, 0x85,
	0xe5, 0xa4, 0x87, 0x49, 0x44, 0x52, 0x0f, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x53, 0x68, 0x6f,
	0x70, 0x45, 0x71, 0x75, 0x69, 0x70, 0x12, 0x56, 0x0a, 0x16, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xea, 0xb5, 0x18, 0x1a, 0xe5, 0x95, 0x86, 0xe5,
	0xba, 0x97, 0xe5, 0xb1, 0x8f, 0xe8, 0x94, 0xbd, 0xe6, 0x9b, 0xbf, 0xe4, 0xbb, 0xa3, 0xe8, 0xa3,
	0x85, 0xe5, 0xa4, 0x87, 0x49, 0x44, 0x52, 0x16, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x45, 0x71, 0x75, 0x69, 0x70, 0x12, 0x42,
	0x0a, 0x0f, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x61, 0x69, 0x73, 0x65, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x18, 0x79, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xea, 0xb5, 0x18, 0x14, 0xe4, 0xbb, 0xb7,
	0xe6, 0xa0, 0xbc, 0xe9, 0x80, 0x92, 0xe5, 0xa2, 0x9e, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0x49,
	0x44, 0x52, 0x0f, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x61, 0x69, 0x73, 0x65, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x12, 0x49, 0x0a, 0x0f, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x61, 0x69, 0x73, 0x65,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xea, 0xb5, 0x18,
	0x1b, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0xe9, 0x80, 0x92,
	0xe5, 0xa2, 0x9e, 0xe4, 0xb8, 0x87, 0xe5, 0x88, 0x86, 0xe6, 0xaf, 0x94, 0x52, 0x0f, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x52, 0x61, 0x69, 0x73, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x3d, 0x0a,
	0x0c, 0x41, 0x6c, 0x6c, 0x48, 0x65, 0x72, 0x6f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x7b, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5,
	0x85, 0xa8, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0x52, 0x0c,
	0x41, 0x6c, 0x6c, 0x48, 0x65, 0x72, 0x6f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x50, 0x0a, 0x11,
	0x55, 0x73, 0x65, 0x53, 0x68, 0x65, 0x6e, 0x66, 0x75, 0x45, 0x71, 0x75, 0x69, 0x70, 0x53, 0x79,
	0x73, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x22, 0xea, 0xb5, 0x18, 0x1e, 0xe6, 0x98, 0xaf,
	0xe5, 0x90, 0xa6, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe6, 0x8b, 0xbe, 0xe5, 0x8f, 0x96, 0xe8,
	0xa3, 0x85, 0xe5, 0xa4, 0x87, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0x52, 0x11, 0x55, 0x73, 0x65,
	0x53, 0x68, 0x65, 0x6e, 0x66, 0x75, 0x45, 0x71, 0x75, 0x69, 0x70, 0x53, 0x79, 0x73, 0x12, 0x38,
	0x0a, 0x0e, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x66, 0x75, 0x6c, 0x48, 0x75, 0x64,
	0x18, 0x7d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xbd, 0xa9, 0xe8,
	0x89, 0xb2, 0xe8, 0xa1, 0x80, 0xe6, 0x9d, 0xa1, 0x52, 0x0e, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x66, 0x75, 0x6c, 0x48, 0x75, 0x64, 0x12, 0x49, 0x0a, 0x12, 0x48, 0x65, 0x72, 0x6f,
	0x4a, 0x6f, 0x62, 0x42, 0x75, 0x66, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x7e,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84,
	0xe8, 0x81, 0x8c, 0xe4, 0xb8, 0x9a, 0x42, 0x75, 0x66, 0x66, 0xe7, 0xbb, 0x84, 0x49, 0x44, 0x52,
	0x12, 0x48, 0x65, 0x72, 0x6f, 0x4a, 0x6f, 0x62, 0x42, 0x75, 0x66, 0x66, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x0f, 0x48, 0x65, 0x72, 0x6f, 0x42, 0x75, 0x66, 0x66, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5,
	0x18, 0x12, 0xe5, 0x8d, 0x95, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0x42, 0x75, 0x66, 0x66, 0xe7,
	0xbb, 0x84, 0x49, 0x44, 0x52, 0x0f, 0x48, 0x65, 0x72, 0x6f, 0x42, 0x75, 0x66, 0x66, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x49, 0x0a, 0x13, 0x49, 0x6e, 0x74, 0x69, 0x6d, 0x61, 0x63,
	0x79, 0x42, 0x75, 0x66, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x80, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe4, 0xba, 0xb2, 0xe5, 0xaf, 0x86, 0xe5,
	0xba, 0xa6, 0x42, 0x75, 0x66, 0x66, 0xe7, 0xbb, 0x84, 0x49, 0x44, 0x52, 0x13, 0x49, 0x6e, 0x74,
	0x69, 0x6d, 0x61, 0x63, 0x79, 0x42, 0x75, 0x66, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44,
	0x12, 0x33, 0x0a, 0x0a, 0x46, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x6d, 0x61, 0x49, 0x44, 0x18, 0x81,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0xe7, 0xbb, 0x93, 0xe6, 0x9d,
	0x9f, 0xe5, 0x89, 0xa7, 0xe6, 0x83, 0x85, 0x49, 0x44, 0x52, 0x0a, 0x46, 0x69, 0x6e, 0x44, 0x72,
	0x61, 0x6d, 0x61, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x49, 0x44, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea,
	0xb5, 0x18, 0x15, 0xe7, 0x8e, 0xa9, 0xe6, 0xb3, 0x95, 0xe5, 0xbc, 0x80, 0xe5, 0x85, 0xb3, 0xe8,
	0xa1, 0xa8, 0xe7, 0xb4, 0xa2, 0xe5, 0xbc, 0x95, 0x52, 0x0d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x44, 0x12, 0x54, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x70, 0x65,
	0x74, 0x65, 0x53, 0x76, 0x72, 0x53, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe6,
	0xaf, 0x94, 0xe8, 0xb5, 0x9b, 0xe6, 0x9c, 0x8d, 0xe6, 0x8a, 0x95, 0xe9, 0x99, 0x8d, 0xe6, 0x97,
	0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x17, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x53, 0x76, 0x72,
	0x53, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a,
	0x0d, 0x53, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x84,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe6, 0xad, 0xa3, 0xe5, 0xbc,
	0x8f, 0xe6, 0x9c, 0x8d, 0xe6, 0x8a, 0x95, 0xe9, 0x99, 0x8d, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0x52, 0x0d, 0x53, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x53, 0x0a, 0x15, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x53, 0x65, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0xe5, 0x8e, 0x9f, 0xe4, 0xbb,
	0xb7, 0xe5, 0x94, 0xae, 0xe5, 0x8d, 0x96, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x15, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x14, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x42, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x65, 0x74, 0x49, 0x44, 0x18, 0x86, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe5, 0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe4,
	0xba, 0xae, 0xe5, 0xba, 0xa6, 0xe8, 0xb0, 0x83, 0xe8, 0x8a, 0x82, 0xe7, 0xb4, 0xa2, 0xe5, 0xbc,
	0x95, 0x52, 0x14, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x53, 0x65, 0x74, 0x49, 0x44, 0x12, 0x4d, 0x0a, 0x12, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x87, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe5, 0x9c, 0xba, 0xe6, 0x99, 0xaf,
	0xe5, 0xa4, 0xa9, 0xe6, 0xb0, 0x94, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0xe9, 0x85, 0x8d, 0xe7,
	0xbd, 0xae, 0x52, 0x12, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x3d, 0x0a, 0x0d, 0x56, 0x6f, 0x74, 0x65, 0x48, 0x65,
	0x72, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16,
	0xea, 0xb5, 0x18, 0x12, 0xe6, 0x8a, 0x95, 0xe7, 0xa5, 0xa8, 0xe9, 0x80, 0x89, 0xe5, 0xb0, 0x86,
	0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x52, 0x0d, 0x56, 0x6f, 0x74, 0x65, 0x48, 0x65, 0x72, 0x6f,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x5f, 0x0a, 0x1b, 0x53, 0x70, 0x65, 0x63, 0x69, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x89, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18,
	0x18, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe5, 0x86, 0x85,
	0xe5, 0xad, 0x98, 0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc, 0x52, 0x1b, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x5a, 0x0a, 0x17, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64,
	0x47, 0x70, 0x75, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0xea, 0xb5, 0x18, 0x1b, 0xe6, 0x8b,
	0x92, 0xe7, 0xbb, 0x9d, 0xe5, 0x8f, 0x82, 0xe4, 0xb8, 0x8e, 0x47, 0x50, 0x55, 0xe8, 0xaf, 0x84,
	0xe5, 0x88, 0x86, 0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc, 0x52, 0x17, 0x46, 0x6f, 0x72, 0x62, 0x69,
	0x64, 0x47, 0x70, 0x75, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x53, 0x0a, 0x15, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x8b, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe6, 0x8b, 0x92, 0xe7, 0xbb, 0x9d, 0xe5, 0x8f,
	0x82, 0xe4, 0xb8, 0x8e, 0xe5, 0x86, 0x85, 0xe5, 0xad, 0x98, 0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc,
	0x52, 0x15, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x4f, 0x0a, 0x16, 0x57, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe8, 0xad,
	0xa6, 0xe5, 0x91, 0x8a, 0xe5, 0x86, 0x85, 0xe5, 0xad, 0x98, 0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc,
	0x52, 0x16, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x5d, 0x0a, 0x1a, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x4c, 0x6f, 0x77, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea,
	0xb5, 0x18, 0x18, 0xe5, 0xbc, 0xba, 0xe5, 0x88, 0xb6, 0xe4, 0xbd, 0x8e, 0xe9, 0x85, 0x8d, 0xe6,
	0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0xe8, 0xaf, 0x84, 0xe5, 0x88, 0x86, 0x52, 0x1a, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x4c, 0x6f, 0x77, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x58, 0x0a, 0x16, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x4c, 0x6f, 0x77, 0x46, 0x50, 0x53, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0xea, 0xb5, 0x18, 0x1b, 0xe5, 0xbc,
	0xba, 0xe5, 0x88, 0xb6, 0xe4, 0xbd, 0x8e, 0xe5, 0xb8, 0xa7, 0xe7, 0x8e, 0x87, 0xe6, 0x9c, 0xba,
	0xe5, 0x9e, 0x8b, 0xe8, 0xaf, 0x84, 0xe5, 0x88, 0x86, 0x52, 0x16, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x4c, 0x6f, 0x77, 0x46, 0x50, 0x53, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x4b, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe7, 0xad, 0x96, 0xe7,
	0x95, 0xa5, 0xe7, 0xb4, 0xa2, 0xe5, 0xbc, 0x95, 0x52, 0x14, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x33,
	0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x90, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0xb5, 0x81, 0xe5, 0xbc, 0x8f,
	0xe5, 0x8a, 0xa0, 0xe8, 0xbd, 0xbd, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x91, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0x99,
	0xbd, 0xe6, 0xa8, 0xa1, 0xe5, 0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0x52, 0x0a, 0x62, 0x6c, 0x61, 0x6e,
	0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x37, 0x0a, 0x0d, 0x56, 0x69, 0x65, 0x77, 0x50, 0x6f,
	0x72, 0x74, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x92, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10,
	0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xa7, 0x86, 0xe5, 0x8f, 0xa3, 0xe5, 0xae, 0xbd, 0xe5, 0xba, 0xa6,
	0x52, 0x0d, 0x56, 0x69, 0x65, 0x77, 0x50, 0x6f, 0x72, 0x74, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x39, 0x0a, 0x0e, 0x56, 0x69, 0x65, 0x77, 0x50, 0x6f, 0x72, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x93, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xa7,
	0x86, 0xe5, 0x8f, 0xa3, 0xe9, 0xab, 0x98, 0xe5, 0xba, 0xa6, 0x52, 0x0e, 0x56, 0x69, 0x65, 0x77,
	0x50, 0x6f, 0x72, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x45, 0x0a, 0x0e, 0x4b, 0x69,
	0x6c, 0x6c, 0x45, 0x66, 0x74, 0x55, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x94, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe5, 0x87, 0xbb, 0xe6, 0x9d, 0x80, 0xe7,
	0x89, 0xb9, 0xe6, 0x95, 0x88, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe6, 0x96, 0xb9, 0xe5, 0xbc,
	0x8f, 0x52, 0x0e, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x66, 0x74, 0x55, 0x73, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x4b, 0x0a, 0x10, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x66, 0x74, 0x55, 0x73, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x44, 0x18, 0x95, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1e, 0xea, 0xb5,
	0x18, 0x1a, 0xe5, 0x87, 0xbb, 0xe6, 0x9d, 0x80, 0xe7, 0x89, 0xb9, 0xe6, 0x95, 0x88, 0xe4, 0xbd,
	0xbf, 0xe7, 0x94, 0xa8, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x49, 0x44, 0x52, 0x10, 0x4b, 0x69,
	0x6c, 0x6c, 0x45, 0x66, 0x74, 0x55, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x44, 0x12, 0x45,
	0x0a, 0x0e, 0x43, 0x69, 0x74, 0x79, 0x45, 0x66, 0x74, 0x55, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe5, 0x9b, 0x9e,
	0xe5, 0x9f, 0x8e, 0xe7, 0x89, 0xb9, 0xe6, 0x95, 0x88, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe6,
	0x96, 0xb9, 0xe5, 0xbc, 0x8f, 0x52, 0x0e, 0x43, 0x69, 0x74, 0x79, 0x45, 0x66, 0x74, 0x55, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x10, 0x43, 0x69, 0x74, 0x79, 0x45, 0x66, 0x74,
	0x55, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x44, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x1e, 0xea, 0xb5, 0x18, 0x1a, 0xe5, 0x9b, 0x9e, 0xe5, 0x9f, 0x8e, 0xe7, 0x89, 0xb9, 0xe6,
	0x95, 0x88, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x49, 0x44,
	0x52, 0x10, 0x43, 0x69, 0x74, 0x79, 0x45, 0x66, 0x74, 0x55, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x44, 0x12, 0x45, 0x0a, 0x0e, 0x44, 0x65, 0x61, 0x64, 0x45, 0x66, 0x74, 0x55, 0x73, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18,
	0x18, 0xe6, 0xad, 0xbb, 0xe4, 0xba, 0xa1, 0xe7, 0x89, 0xb9, 0xe6, 0x95, 0x88, 0xe4, 0xbd, 0xbf,
	0xe7, 0x94, 0xa8, 0xe6, 0x96, 0xb9, 0xe5, 0xbc, 0x8f, 0x52, 0x0e, 0x44, 0x65, 0x61, 0x64, 0x45,
	0x66, 0x74, 0x55, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x10, 0x44, 0x65, 0x61,
	0x64, 0x45, 0x66, 0x74, 0x55, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x44, 0x18, 0x99, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x1e, 0xea, 0xb5, 0x18, 0x1a, 0xe6, 0xad, 0xbb, 0xe4, 0xba, 0xa1,
	0xe7, 0x89, 0xb9, 0xe6, 0x95, 0x88, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe5, 0x88, 0x97, 0xe8,
	0xa1, 0xa8, 0x49, 0x44, 0x52, 0x10, 0x44, 0x65, 0x61, 0x64, 0x45, 0x66, 0x74, 0x55, 0x73, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x44, 0x12, 0x45, 0x0a, 0x0e, 0x42, 0x6f, 0x72, 0x6e, 0x45, 0x66,
	0x74, 0x55, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe6, 0xb3, 0x89, 0xe6, 0xb0, 0xb4, 0xe7, 0x89, 0xb9, 0xe6, 0x95,
	0x88, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe6, 0x96, 0xb9, 0xe5, 0xbc, 0x8f, 0x52, 0x0e, 0x42,
	0x6f, 0x72, 0x6e, 0x45, 0x66, 0x74, 0x55, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a,
	0x10, 0x42, 0x6f, 0x72, 0x6e, 0x45, 0x66, 0x74, 0x55, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x44, 0x18, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1e, 0xea, 0xb5, 0x18, 0x1a, 0xe6, 0xb3,
	0x89, 0xe6, 0xb0, 0xb4, 0xe7, 0x89, 0xb9, 0xe6, 0x95, 0x88, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8,
	0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x49, 0x44, 0x52, 0x10, 0x42, 0x6f, 0x72, 0x6e, 0x45, 0x66,
	0x74, 0x55, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x44, 0x12, 0x41, 0x0a, 0x0f, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x9c, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5, 0x8c, 0xb9, 0xe9, 0x85, 0x8d,
	0xe5, 0xbc, 0x95, 0xe6, 0x93, 0x8e, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0f, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a,
	0x08, 0x4c, 0x65, 0x72, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x9d, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x8f, 0x92, 0xe5, 0x80, 0xbc, 0xe6, 0xa8, 0xa1, 0xe5,
	0xbc, 0x8f, 0x52, 0x08, 0x4c, 0x65, 0x72, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x09,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0x9c, 0xba, 0xe6, 0x99, 0xaf, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0x52, 0x09, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a,
	0x14, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5,
	0x18, 0x12, 0xe5, 0xae, 0xa1, 0xe5, 0x88, 0xa4, 0xe7, 0xa4, 0xbe, 0xe5, 0x8c, 0xba, 0xe5, 0xbc,
	0x80, 0xe5, 0x85, 0xb3, 0x52, 0x14, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x69, 0x61,
	0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x0c, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe7, 0xab, 0x8b, 0xe5, 0x8d, 0xb3, 0xe4, 0xb8, 0xbe,
	0xe6, 0x8a, 0xa5, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0c, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xa1, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6,
	0xe7, 0xa6, 0x81, 0xe7, 0x94, 0xa8, 0xe8, 0xa7, 0x86, 0xe9, 0xa2, 0x91, 0xe4, 0xb8, 0xbe, 0xe6,
	0x8a, 0xa5, 0x52, 0x12, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x55, 0x72, 0x6c, 0x49, 0x44, 0x18, 0xa2, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x15, 0xea, 0xb5,
	0x18, 0x11, 0xe4, 0xb8, 0xbe, 0xe6, 0x8a, 0xa5, 0x55, 0x52, 0x4c, 0xe8, 0xb7, 0xb3, 0xe8, 0xbd,
	0xac, 0x49, 0x44, 0x52, 0x0b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x49, 0x44,
	0x12, 0x43, 0x0a, 0x0d, 0x4e, 0x6f, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x4e, 0x65, 0x77, 0x4d, 0x56,
	0x50, 0x18, 0xa3, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe4, 0xb8,
	0x8d, 0xe8, 0xae, 0xa1, 0xe7, 0xae, 0x97, 0xe5, 0x88, 0x86, 0xe8, 0xb7, 0xaf, 0xe9, 0x87, 0x91,
	0xe9, 0x93, 0xb6, 0xe7, 0x89, 0x8c, 0x52, 0x0d, 0x4e, 0x6f, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x4e,
	0x65, 0x77, 0x4d, 0x56, 0x50, 0x12, 0x4d, 0x0a, 0x12, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xa4, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1c, 0xea, 0xb5, 0x18, 0x18, 0xe5, 0xb1, 0x9e, 0xe6, 0x80, 0xa7, 0xe6, 0x95,
	0xb0, 0xe5, 0x80, 0xbc, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe7, 0xb4, 0xa2, 0xe5, 0xbc, 0x95,
	0x52, 0x12, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x74, 0x0a, 0x1e, 0x4a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x6f, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0xa5, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2b, 0xea,
	0xb5, 0x18, 0x27, 0xe4, 0xb8, 0x8d, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x8f, 0xe6, 0xb5, 0x8e, 0xe5,
	0x92, 0x8c, 0xe7, 0xbb, 0x8f, 0xe9, 0xaa, 0x8c, 0xe6, 0x89, 0x93, 0xe9, 0x87, 0x8e, 0xe8, 0xa3,
	0x85, 0xe5, 0xa4, 0x87, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0x52, 0x1e, 0x4a, 0x75, 0x6e, 0x67,
	0x6c, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x6f, 0x74, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x6e, 0x0a, 0x1b, 0x41, 0x69,
	0x64, 0x45, 0x71, 0x75, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x6f, 0x74, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0xa6, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x2b, 0xea, 0xb5, 0x18, 0x27, 0xe4, 0xb8, 0x8d, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x8f, 0xe6,
	0xb5, 0x8e, 0xe5, 0x92, 0x8c, 0xe7, 0xbb, 0x8f, 0xe9, 0xaa, 0x8c, 0xe8, 0xbe, 0x85, 0xe5, 0x8a,
	0xa9, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0x52, 0x1b, 0x41,
	0x69, 0x64, 0x45, 0x71, 0x75, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x6f, 0x74, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x6a, 0x0a, 0x19, 0x41, 0x69,
	0x64, 0x4e, 0x6f, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x4c,
	0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0xa7, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2b,
	0xea, 0xb5, 0x18, 0x27, 0xe8, 0xbe, 0x85, 0xe5, 0x8a, 0xa9, 0xe4, 0xb8, 0x8d, 0xe5, 0x88, 0x86,
	0xe7, 0xbb, 0x8f, 0xe6, 0xb5, 0x8e, 0xe5, 0x92, 0x8c, 0xe7, 0xbb, 0x8f, 0xe9, 0xaa, 0x8c, 0xe6,
	0x8c, 0x81, 0xe7, 0xbb, 0xad, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x19, 0x41, 0x69, 0x64,
	0x4e, 0x6f, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x4c, 0x61,
	0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49,
	0x66, 0x73, 0x49, 0x64, 0x18, 0xa8, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18,
	0x0c, 0x49, 0x46, 0x53, 0xe5, 0x88, 0x86, 0xe5, 0x8c, 0x85, 0xe5, 0x8f, 0xb7, 0x52, 0x0a, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x49, 0x66, 0x73, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x11, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x49, 0x66, 0x73, 0x44, 0x6c, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x69, 0x63, 0x18, 0xa9,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe5, 0x88, 0x86, 0xe5, 0x8c,
	0x85, 0xe4, 0xb8, 0x8b, 0xe8, 0xbd, 0xbd, 0xe5, 0x9b, 0xbe, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80,
	0x52, 0x11, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x66, 0x73, 0x44, 0x6c, 0x53, 0x68, 0x6f, 0x77,
	0x50, 0x69, 0x63, 0x12, 0x5e, 0x0a, 0x16, 0x49, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0xaa, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x25, 0xea, 0xb5, 0x18, 0x21, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6,
	0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0xe5, 0xb1, 0x80, 0xe5, 0x86, 0x85, 0xe5, 0x95, 0x86, 0xe4,
	0xb8, 0x9a, 0xe5, 0x8c, 0x96, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0x52, 0x16, 0x49, 0x73, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x12, 0x39, 0x0a, 0x0e, 0x44, 0x79, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x76, 0x65,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0xab, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe6, 0xbf, 0x92, 0xe6, 0xad, 0xbb, 0xe7, 0xa7, 0xbb, 0xe9, 0x80, 0x9f, 0x52, 0x0e,
	0x44, 0x79, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x57,
	0x0a, 0x14, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0xac, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x22, 0xea,
	0xb5, 0x18, 0x1e, 0xe5, 0xb1, 0x80, 0xe5, 0x86, 0x85, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0xe5,
	0xb1, 0x80, 0xe5, 0xa4, 0x96, 0xe9, 0x81, 0x93, 0xe5, 0x85, 0xb7, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0x52, 0x14, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x62, 0x0a, 0x16, 0x44, 0x72, 0x6f, 0x70, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x49,
	0x44, 0x18, 0xad, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x29, 0xea, 0xb5, 0x18, 0x20, 0xe5, 0xb1,
	0x80, 0xe5, 0x86, 0x85, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0xe5, 0xb1, 0x80, 0xe5, 0xa4, 0x96,
	0xe9, 0x81, 0x93, 0xe5, 0x85, 0xb7, 0xe8, 0xa7, 0x84, 0xe5, 0x88, 0x99, 0x49, 0x44, 0xda, 0xb5,
	0x18, 0x01, 0x33, 0x52, 0x16, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x50, 0x0a, 0x12, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x18, 0xae, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0xea, 0xb5, 0x18, 0x1b, 0xe6, 0x98,
	0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xb1, 0x8f, 0xe8, 0x94, 0xbd, 0xe5, 0x8f, 0xac, 0xe5, 0x94, 0xa4,
	0xe5, 0xb8, 0x88, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0x52, 0x12, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x4c, 0x0a,
	0x13, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x18, 0xaf, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18,
	0x15, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xb1, 0x8f, 0xe8, 0x94, 0xbd, 0xe7, 0xac, 0xa6,
	0xe6, 0x96, 0x87, 0xe9, 0xa1, 0xb5, 0x52, 0x13, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x58, 0x0a, 0x16, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0xb0, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0xea, 0xb5,
	0x18, 0x1b, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xb1, 0x8f, 0xe8, 0x94, 0xbd, 0xe8, 0x87,
	0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0x52, 0x16, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x15, 0x48, 0x61, 0x6e, 0x67, 0x55, 0x70, 0x32,
	0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xb1,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0xea, 0xb5, 0x18, 0x1b, 0xe6, 0x8c, 0x82, 0xe6, 0x9c,
	0xba, 0xe5, 0x88, 0xb0, 0xe6, 0x89, 0x98, 0xe7, 0xae, 0xa1, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0xe9, 0x97, 0xb4, 0xe9, 0x9a, 0x94, 0x52, 0x15, 0x48, 0x61, 0x6e, 0x67, 0x55, 0x70, 0x32, 0x41,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x55, 0x0a,
	0x16, 0x55, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0xb2, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c,
	0xea, 0xb5, 0x18, 0x18, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84,
	0xe7, 0x94, 0x9f, 0xe6, 0x88, 0x90, 0xe8, 0xa7, 0x84, 0xe5, 0x88, 0x99, 0x52, 0x16, 0x55, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x57, 0x0a, 0x16, 0x55, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x65,
	0x72, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18, 0xb3,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1e, 0xea, 0xb5, 0x18, 0x1a, 0xe5, 0x8f, 0xaf, 0xe7, 0x94,
	0xa8, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe7, 0x94, 0x9f, 0xe6, 0x88, 0x90, 0xe8, 0xa7, 0x84,
	0xe5, 0x88, 0x99, 0x49, 0x44, 0x52, 0x16, 0x55, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x65, 0x72,
	0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x41, 0x0a,
	0x0f, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64,
	0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe6, 0x8e, 0x92,
	0xe5, 0x90, 0x8d, 0xe5, 0xbe, 0x97, 0xe5, 0x88, 0x86, 0xe8, 0xa7, 0x84, 0xe5, 0x88, 0x99, 0x52,
	0x0f, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x35, 0x0a, 0x0b, 0x43, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18,
	0xb5, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x12, 0xea, 0xb5, 0x18, 0x0e, 0x43, 0x53, 0xe6, 0xa8,
	0xa1, 0xe5, 0xbc, 0x8f, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0x52, 0x0b, 0x43, 0x73, 0x4d, 0x6f,
	0x64, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x0f, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0xb6, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x18, 0xea, 0xb5, 0x18, 0x14, 0xe5, 0x85, 0xb3, 0xe5, 0x8d, 0xa1, 0xe6, 0xb4, 0xbb,
	0xe5, 0x8a, 0xa8, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x49, 0x44, 0x52, 0x0f, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x12,
	0x49, 0x73, 0x53, 0x61, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x69, 0x66, 0x66, 0x43, 0x61,
	0x6d, 0x70, 0x18, 0xb7, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5, 0x18, 0x12, 0xe5,
	0x90, 0x8c, 0xe9, 0x98, 0x9f, 0xe4, 0xb8, 0x8d, 0xe5, 0x90, 0x8c, 0xe9, 0x98, 0xb5, 0xe8, 0x90,
	0xa5, 0x52, 0x12, 0x49, 0x73, 0x53, 0x61, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x69, 0x66,
	0x66, 0x43, 0x61, 0x6d, 0x70, 0x12, 0x3f, 0x0a, 0x0e, 0x4d, 0x61, 0x78, 0x54, 0x65, 0x61, 0x6d,
	0x41, 0x63, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0xb8, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16,
	0xea, 0xb5, 0x18, 0x12, 0xe7, 0xbb, 0x84, 0xe9, 0x98, 0x9f, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7,
	0xe4, 0xba, 0xba, 0xe6, 0x95, 0xb0, 0x52, 0x0e, 0x4d, 0x61, 0x78, 0x54, 0x65, 0x61, 0x6d, 0x41,
	0x63, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x55, 0x0a, 0x0d, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x18, 0xb9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x54,
	0x65, 0x61, 0x6d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x10, 0xea, 0xb5,
	0x18, 0x0c, 0xe7, 0xbb, 0x84, 0xe9, 0x98, 0x9f, 0xe8, 0xa7, 0x84, 0xe5, 0x88, 0x99, 0x52, 0x0d,
	0x54, 0x65, 0x61, 0x6d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x4d, 0x0a,
	0x0f, 0x49, 0x73, 0x53, 0x6b, 0x69, 0x70, 0x57, 0x68, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0xba, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x22, 0xea, 0xb5, 0x18, 0x1e, 0xe5, 0xbc, 0x80,
	0xe6, 0x88, 0xbf, 0xe9, 0x97, 0xb4, 0xe8, 0xb7, 0xb3, 0xe8, 0xbf, 0x87, 0xe7, 0x99, 0xbd, 0xe5,
	0x90, 0x8d, 0xe5, 0x8d, 0x95, 0xe6, 0xa3, 0x80, 0xe6, 0x9f, 0xa5, 0x52, 0x0f, 0x49, 0x73, 0x53,
	0x6b, 0x69, 0x70, 0x57, 0x68, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x0a,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x18, 0xbb, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2d, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44,
	0x54, 0x5f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe7, 0xbb, 0x93, 0xe7, 0xae, 0x97, 0xe8, 0xa7, 0x84, 0xe5,
	0x88, 0x99, 0x52, 0x0a, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x34,
	0x0a, 0x0b, 0x50, 0x72, 0x65, 0x42, 0x50, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x44, 0x18, 0xbc, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0xea, 0xb5, 0x18, 0x0d, 0xe9, 0xa2, 0x84, 0x42, 0x50, 0xe6,
	0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0x49, 0x44, 0x52, 0x0b, 0x50, 0x72, 0x65, 0x42, 0x50, 0x48, 0x65,
	0x72, 0x6f, 0x49, 0x44, 0x12, 0x3d, 0x0a, 0x0d, 0x50, 0x72, 0x65, 0x42, 0x61, 0x6e, 0x48, 0x65,
	0x72, 0x6f, 0x4e, 0x75, 0x6d, 0x18, 0xbd, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xea, 0xb5,
	0x18, 0x12, 0xe9, 0xa2, 0x84, 0x42, 0x61, 0x6e, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe4, 0xb8,
	0xaa, 0xe6, 0x95, 0xb0, 0x52, 0x0d, 0x50, 0x72, 0x65, 0x42, 0x61, 0x6e, 0x48, 0x65, 0x72, 0x6f,
	0x4e, 0x75, 0x6d, 0x12, 0x38, 0x0a, 0x0d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x6f, 0x67, 0x6f,
	0x49, 0x63, 0x6f, 0x6e, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xea, 0xb5, 0x18,
	0x0d, 0xe5, 0x88, 0x86, 0xe4, 0xba, 0xab, 0x4c, 0x4f, 0x47, 0x4f, 0xe5, 0x9b, 0xbe, 0x52, 0x0d,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x4b, 0x0a,
	0x10, 0x43, 0x61, 0x6d, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x49,
	0x44, 0x18, 0xbf, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1e, 0xea, 0xb5, 0x18, 0x1a, 0xe5, 0x8c,
	0xb9, 0xe9, 0x85, 0x8d, 0xe9, 0x98, 0xb5, 0xe8, 0x90, 0xa5, 0xe4, 0xba, 0xba, 0xe6, 0x95, 0xb0,
	0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x49, 0x44, 0x52, 0x10, 0x43, 0x61, 0x6d, 0x70, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x49, 0x44, 0x12, 0x56, 0x0a, 0x15, 0x46, 0x75,
	0x6c, 0x6c, 0x4c, 0x76, 0x6c, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x4f,
	0x70, 0x65, 0x6e, 0x18, 0xc0, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0xea, 0xb5, 0x18, 0x1b,
	0xe6, 0xbb, 0xa1, 0xe7, 0xba, 0xa7, 0xe7, 0xac, 0xa6, 0xe6, 0x96, 0x87, 0xe9, 0xa1, 0xb5, 0xe6,
	0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0x52, 0x15, 0x46, 0x75, 0x6c,
	0x6c, 0x4c, 0x76, 0x6c, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x4f, 0x70,
	0x65, 0x6e, 0x12, 0x4b, 0x0a, 0x11, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x48, 0x61, 0x6e, 0x67,
	0x75, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x18, 0xc1, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c,
	0xea, 0xb5, 0x18, 0x18, 0xe5, 0xb1, 0x8f, 0xe8, 0x94, 0xbd, 0xe5, 0xb1, 0x80, 0xe5, 0x86, 0x85,
	0xe6, 0x8c, 0x82, 0xe6, 0x9c, 0xba, 0xe6, 0xa3, 0x80, 0xe6, 0x9f, 0xa5, 0x52, 0x11, 0x49, 0x67,
	0x6e, 0x6f, 0x72, 0x65, 0x48, 0x61, 0x6e, 0x67, 0x75, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12,
	0x44, 0x0a, 0x0f, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x6f,
	0x6f, 0x6d, 0x18, 0xc2, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe5,
	0x85, 0x81, 0xe8, 0xae, 0xb8, 0xe5, 0xbc, 0x80, 0xe6, 0x88, 0xbf, 0xe9, 0x97, 0xb4, 0xe6, 0x8e,
	0x89, 0xe8, 0x90, 0xbd, 0x52, 0x0f, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x39, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65,
	0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0xc3, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x12, 0xea,
	0xb5, 0x18, 0x0e, 0xe7, 0xbb, 0x84, 0xe5, 0x90, 0x88, 0xe7, 0x8e, 0xa9, 0xe6, 0xb3, 0x95, 0x49,
	0x44, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44,
	0x22, 0x85, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x10, 0x00, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0x83, 0x9c, 0xe8, 0xb4, 0x9f, 0xe7, 0xbb,
	0x93, 0xe7, 0xae, 0x97, 0x12, 0x29, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x10, 0x01, 0x1a, 0x10, 0xaa,
	0xb6, 0x18, 0x0c, 0xe6, 0x8e, 0x92, 0xe5, 0x90, 0x8d, 0xe7, 0xbb, 0x93, 0xe7, 0xae, 0x97, 0x12,
	0x17, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x02, 0x22, 0x95, 0x0e, 0x0a, 0x19, 0x52, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x05, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe5, 0x85, 0xb3, 0xe5, 0x8d,
	0xa1, 0x49, 0x44, 0xc8, 0xc1, 0x18, 0x01, 0x52, 0x05, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x4e,
	0x0a, 0x0f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54, 0x5f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0xea, 0xb5, 0x18, 0x00, 0x52, 0x0f, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f,
	0x0a, 0x08, 0x49, 0x73, 0x43, 0x61, 0x6e, 0x50, 0x56, 0x50, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x94, 0xaf, 0xe6,
	0x8c, 0x81, 0x50, 0x56, 0x50, 0x52, 0x08, 0x49, 0x73, 0x43, 0x61, 0x6e, 0x50, 0x56, 0x50, 0x12,
	0x2f, 0x0a, 0x08, 0x49, 0x73, 0x43, 0x61, 0x6e, 0x50, 0x56, 0x45, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x94, 0xaf,
	0xe6, 0x8c, 0x81, 0x50, 0x56, 0x45, 0x52, 0x08, 0x49, 0x73, 0x43, 0x61, 0x6e, 0x50, 0x56, 0x45,
	0x12, 0x4d, 0x0a, 0x14, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19,
	0xea, 0xb5, 0x18, 0x15, 0xe5, 0xa8, 0xb1, 0xe4, 0xb9, 0x90, 0xe5, 0x9c, 0xb0, 0xe5, 0x9b, 0xbe,
	0xe5, 0xad, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x14, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x74, 0x61, 0x69, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x32, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x0c, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6,
	0xe5, 0x8c, 0xbf, 0xe5, 0x90, 0x8d, 0x52, 0x0b, 0x55, 0x73, 0x65, 0x4e, 0x69, 0x63, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x14, 0x4e, 0x65, 0x77, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x52, 0x6f, 0x79, 0x61, 0x6c, 0x65, 0x41, 0x49, 0x4e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x1e, 0xea, 0xb5, 0x18, 0x1a, 0xe5, 0xa4, 0xa7, 0xe9, 0x80, 0x83, 0xe6, 0x9d, 0x80,
	0xe6, 0x96, 0xb0, 0xe6, 0x89, 0x8b, 0xe5, 0xb1, 0x80, 0x41, 0x49, 0xe6, 0x95, 0xb0, 0xe9, 0x87,
	0x8f, 0x52, 0x14, 0x4e, 0x65, 0x77, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x6f, 0x79, 0x61,
	0x6c, 0x65, 0x41, 0x49, 0x4e, 0x75, 0x6d, 0x12, 0x54, 0x0a, 0x15, 0x57, 0x61, 0x72, 0x6d, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x65, 0x41, 0x49, 0x4e, 0x75, 0x6d,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1e, 0xea, 0xb5, 0x18, 0x1a, 0xe5, 0xa4, 0xa7, 0xe9,
	0x80, 0x83, 0xe6, 0x9d, 0x80, 0xe6, 0xb8, 0xa9, 0xe6, 0x9a, 0x96, 0xe5, 0xb1, 0x80, 0x41, 0x49,
	0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x15, 0x57, 0x61, 0x72, 0x6d, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x65, 0x41, 0x49, 0x4e, 0x75, 0x6d, 0x12, 0x62, 0x0a,
	0x19, 0x46, 0x61, 0x69, 0x6c, 0x57, 0x61, 0x72, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52,
	0x6f, 0x79, 0x61, 0x6c, 0x65, 0x41, 0x49, 0x4e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x24, 0xea, 0xb5, 0x18, 0x20, 0xe5, 0xa4, 0xa7, 0xe9, 0x80, 0x83, 0xe6, 0x9d, 0x80, 0xe8,
	0xbf, 0x9e, 0xe8, 0xb4, 0xa5, 0xe6, 0xb8, 0xa9, 0xe6, 0x9a, 0x96, 0xe5, 0xb1, 0x80, 0x41, 0x49,
	0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x19, 0x46, 0x61, 0x69, 0x6c, 0x57, 0x61, 0x72, 0x6d,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x65, 0x41, 0x49, 0x4e, 0x75,
	0x6d, 0x12, 0x64, 0x0a, 0x1a, 0x4c, 0x6f, 0x77, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x65, 0x41, 0x49, 0x4e, 0x75, 0x6d, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x24, 0xea, 0xb5, 0x18, 0x20, 0xe5, 0xa4, 0xa7, 0xe9, 0x80,
	0x83, 0xe6, 0x9d, 0x80, 0xe6, 0x99, 0xae, 0xe9, 0x80, 0x9a, 0xe5, 0xb1, 0x80, 0xe4, 0xbd, 0x8e,
	0xe7, 0xab, 0xaf, 0x41, 0x49, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x1a, 0x4c, 0x6f, 0x77,
	0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x6f, 0x79, 0x61,
	0x6c, 0x65, 0x41, 0x49, 0x4e, 0x75, 0x6d, 0x12, 0x6a, 0x0a, 0x1d, 0x4d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x6f, 0x79,
	0x61, 0x6c, 0x65, 0x41, 0x49, 0x4e, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x24,
	0xea, 0xb5, 0x18, 0x20, 0xe5, 0xa4, 0xa7, 0xe9, 0x80, 0x83, 0xe6, 0x9d, 0x80, 0xe6, 0x99, 0xae,
	0xe9, 0x80, 0x9a, 0xe5, 0xb1, 0x80, 0xe4, 0xb8, 0xad, 0xe7, 0xab, 0xaf, 0x41, 0x49, 0xe6, 0x95,
	0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x1d, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x65, 0x41, 0x49,
	0x4e, 0x75, 0x6d, 0x12, 0x66, 0x0a, 0x1b, 0x48, 0x69, 0x67, 0x68, 0x4e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x65, 0x41, 0x49, 0x4e,
	0x75, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x24, 0xea, 0xb5, 0x18, 0x20, 0xe5, 0xa4,
	0xa7, 0xe9, 0x80, 0x83, 0xe6, 0x9d, 0x80, 0xe6, 0x99, 0xae, 0xe9, 0x80, 0x9a, 0xe5, 0xb1, 0x80,
	0xe9, 0xab, 0x98, 0xe7, 0xab, 0xaf, 0x41, 0x49, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x1b,
	0x48, 0x69, 0x67, 0x68, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x52, 0x6f, 0x79, 0x61, 0x6c, 0x65, 0x41, 0x49, 0x4e, 0x75, 0x6d, 0x12, 0x53, 0x0a, 0x14, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x43, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0xea, 0xb5, 0x18, 0x1b, 0xe5,
	0xa4, 0x9a, 0xe9, 0x98, 0xb5, 0xe8, 0x90, 0xa5, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe5, 0x9c,
	0xb0, 0xe5, 0x9b, 0xbe, 0xe5, 0xba, 0x8f, 0xe5, 0x8f, 0xb7, 0x52, 0x14, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x43, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x5b, 0x0a, 0x18, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x61, 0x6d, 0x70, 0x4b, 0x69, 0x6c,
	0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1f, 0xea, 0xb5, 0x18, 0x1b, 0xe5, 0xa4, 0x9a, 0xe9, 0x98, 0xb5, 0xe8, 0x90,
	0xa5, 0xe4, 0xba, 0xba, 0xe5, 0xa4, 0xb4, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe4, 0xb8, 0x8a,
	0xe9, 0x99, 0x90, 0x52, 0x18, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x61, 0x6d, 0x70, 0x4b, 0x69,
	0x6c, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x59, 0x0a,
	0x17, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x61, 0x6d, 0x70, 0x4b, 0x69, 0x6c, 0x6c, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f,
	0xea, 0xb5, 0x18, 0x1b, 0xe5, 0xa4, 0x9a, 0xe9, 0x98, 0xb5, 0xe8, 0x90, 0xa5, 0xe4, 0xba, 0xba,
	0xe5, 0xa4, 0xb4, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81, 0x52,
	0x17, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x61, 0x6d, 0x70, 0x4b, 0x69, 0x6c, 0x6c, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x57, 0x0a, 0x16, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x43, 0x61, 0x6d, 0x70, 0x4b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x45,
	0x78, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0xea, 0xb5, 0x18, 0x1b, 0xe5, 0xa4,
	0x9a, 0xe9, 0x98, 0xb5, 0xe8, 0x90, 0xa5, 0xe4, 0xba, 0xba, 0xe5, 0xa4, 0xb4, 0xe5, 0xa5, 0x96,
	0xe5, 0x8a, 0xb1, 0xe7, 0xbb, 0x8f, 0xe9, 0xaa, 0x8c, 0x52, 0x16, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x43, 0x61, 0x6d, 0x70, 0x4b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x45, 0x78,
	0x70, 0x12, 0x6a, 0x0a, 0x1e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x61, 0x6d, 0x70, 0x4b, 0x69,
	0x6c, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x22, 0xea, 0xb5, 0x18, 0x1e, 0xe5,
	0xa4, 0x9a, 0xe9, 0x98, 0xb5, 0xe8, 0x90, 0xa5, 0xe4, 0xba, 0xba, 0xe5, 0xa4, 0xb4, 0xe5, 0xa5,
	0x96, 0xe5, 0x8a, 0xb1, 0xe7, 0x86, 0x9f, 0xe7, 0xbb, 0x83, 0xe5, 0xba, 0xa6, 0x52, 0x1e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x43, 0x61, 0x6d, 0x70, 0x4b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x55, 0x0a,
	0x18, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x61, 0x6d, 0x70, 0x4b, 0x69, 0x6c, 0x6c, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x19, 0xea, 0xb5, 0x18, 0x15, 0xe5, 0xa4, 0x9a, 0xe9, 0x98, 0xb5, 0xe8, 0x90, 0xa5, 0xe5, 0xa5,
	0x96, 0xe5, 0x8a, 0xb1, 0xe7, 0xb3, 0xbb, 0xe6, 0x95, 0xb0, 0x52, 0x18, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x43, 0x61, 0x6d, 0x70, 0x4b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x45, 0x0a, 0x10, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19,
	0xea, 0xb5, 0x18, 0x15, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf,
	0xe5, 0x8c, 0xb9, 0xe9, 0x85, 0x8d, 0xe5, 0x88, 0x86, 0x52, 0x10, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x4d, 0x0a, 0x14, 0x57,
	0x61, 0x72, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe6,
	0xb8, 0xa9, 0xe6, 0x9a, 0x96, 0xe5, 0xb1, 0x80, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe5, 0x8f,
	0x82, 0xe6, 0x95, 0xb0, 0x52, 0x14, 0x57, 0x61, 0x72, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x50, 0x0a, 0x11, 0x49, 0x73,
	0x55, 0x73, 0x65, 0x4f, 0x6e, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x22, 0xea, 0xb5, 0x18, 0x1e, 0xe6, 0x98, 0xaf, 0xe5, 0x90,
	0xa6, 0xe7, 0x94, 0xa8, 0xe4, 0xb8, 0x80, 0xe5, 0x8f, 0xb0, 0xe5, 0x8c, 0xb9, 0xe9, 0x85, 0x8d,
	0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0x99, 0xa8, 0x52, 0x11, 0x49, 0x73, 0x55, 0x73, 0x65,
	0x4f, 0x6e, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x33, 0x0a, 0x0a,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x13, 0xea, 0xb5, 0x18, 0x0f, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe5,
	0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x52, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x0d, 0x8a, 0x97, 0x22, 0x05, 0x4d, 0x61, 0x70, 0x49, 0x64, 0xf8, 0x97, 0x22, 0x01,
	0x22, 0xf7, 0x23, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x45, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52,
	0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x2e, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0d, 0xea, 0xb5, 0x18, 0x09, 0xe9, 0x85,
	0x8d, 0xe7, 0xbd, 0xae, 0xe5, 0x90, 0x8d, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0d, 0xea, 0xb5,
	0x18, 0x09, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe5, 0x80, 0xbc, 0x52, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xe3, 0x22, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x0c, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00,
	0x12, 0x2c, 0x0a, 0x10, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x57, 0x49, 0x4e, 0x5f,
	0x43, 0x4f, 0x49, 0x4e, 0x10, 0x01, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0x88, 0x98, 0xe6,
	0x96, 0x97, 0xe8, 0x83, 0x9c, 0xe5, 0x88, 0xa9, 0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81, 0x12, 0x3e,
	0x0a, 0x22, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x45, 0x53, 0x54, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x02, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe9, 0x87, 0x91, 0xe5,
	0xb8, 0x81, 0xe5, 0x88, 0xa9, 0xe6, 0x81, 0xaf, 0xe9, 0x99, 0xa4, 0xe6, 0x95, 0xb0, 0x12, 0x2e,
	0x0a, 0x17, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x45, 0x53, 0x54, 0x5f, 0x31, 0x10, 0x03, 0x1a, 0x11, 0xaa, 0xb6, 0x18,
	0x0d, 0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81, 0xe5, 0x88, 0xa9, 0xe6, 0x81, 0xaf, 0x31, 0x12, 0x2e,
	0x0a, 0x17, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x45, 0x53, 0x54, 0x5f, 0x32, 0x10, 0x04, 0x1a, 0x11, 0xaa, 0xb6, 0x18,
	0x0d, 0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81, 0xe5, 0x88, 0xa9, 0xe6, 0x81, 0xaf, 0x32, 0x12, 0x2e,
	0x0a, 0x17, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x45, 0x53, 0x54, 0x5f, 0x33, 0x10, 0x05, 0x1a, 0x11, 0xaa, 0xb6, 0x18,
	0x0d, 0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81, 0xe5, 0x88, 0xa9, 0xe6, 0x81, 0xaf, 0x33, 0x12, 0x2e,
	0x0a, 0x17, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x45, 0x53, 0x54, 0x5f, 0x34, 0x10, 0x06, 0x1a, 0x11, 0xaa, 0xb6, 0x18,
	0x0d, 0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81, 0xe5, 0x88, 0xa9, 0xe6, 0x81, 0xaf, 0x34, 0x12, 0x2e,
	0x0a, 0x17, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x45, 0x53, 0x54, 0x5f, 0x35, 0x10, 0x07, 0x1a, 0x11, 0xaa, 0xb6, 0x18,
	0x0d, 0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81, 0xe5, 0x88, 0xa9, 0xe6, 0x81, 0xaf, 0x35, 0x12, 0x2f,
	0x0a, 0x17, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x31, 0x10, 0x08, 0x1a, 0x12, 0xaa, 0xb6, 0x18,
	0x0e, 0xe5, 0x8a, 0xa0, 0xe6, 0x97, 0xb6, 0xe8, 0xb5, 0x9b, 0x42, 0x55, 0x46, 0x46, 0x31, 0x12,
	0x2f, 0x0a, 0x17, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x32, 0x10, 0x09, 0x1a, 0x12, 0xaa, 0xb6,
	0x18, 0x0e, 0xe5, 0x8a, 0xa0, 0xe6, 0x97, 0xb6, 0xe8, 0xb5, 0x9b, 0x42, 0x55, 0x46, 0x46, 0x32,
	0x12, 0x3f, 0x0a, 0x1d, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x4c, 0x41, 0x59,
	0x45, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x10, 0x14, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe7, 0x8e, 0xa9, 0xe5, 0xae, 0xb6, 0xe6,
	0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe5, 0x9f, 0xba, 0xe7, 0xa1, 0x80, 0xe7, 0xad, 0x89, 0xe7, 0xba,
	0xa7, 0x12, 0x3f, 0x0a, 0x1a, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x48, 0x55, 0x41,
	0x4d, 0x55, 0x4c, 0x41, 0x4e, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x31, 0x10,
	0x1c, 0x1a, 0x1f, 0xaa, 0xb6, 0x18, 0x1b, 0xe8, 0x8a, 0xb1, 0xe6, 0x9c, 0xa8, 0xe5, 0x85, 0xb0,
	0xe6, 0xad, 0xa6, 0xe5, 0x99, 0xa8, 0xe6, 0xa8, 0xa1, 0xe5, 0x9e, 0x8b, 0xe8, 0xbd, 0xbb, 0xe5,
	0x89, 0x91, 0x12, 0x3f, 0x0a, 0x1a, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x48, 0x55,
	0x41, 0x4d, 0x55, 0x4c, 0x41, 0x4e, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x32,
	0x10, 0x1d, 0x1a, 0x1f, 0xaa, 0xb6, 0x18, 0x1b, 0xe8, 0x8a, 0xb1, 0xe6, 0x9c, 0xa8, 0xe5, 0x85,
	0xb0, 0xe6, 0xad, 0xa6, 0xe5, 0x99, 0xa8, 0xe6, 0xa8, 0xa1, 0xe5, 0x9e, 0x8b, 0xe9, 0x87, 0x8d,
	0xe5, 0x89, 0x91, 0x12, 0x45, 0x0a, 0x1c, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x48,
	0x55, 0x41, 0x4d, 0x55, 0x4c, 0x41, 0x4e, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x42, 0x55, 0x46,
	0x46, 0x5f, 0x31, 0x10, 0x1e, 0x1a, 0x23, 0xaa, 0xb6, 0x18, 0x1f, 0xe8, 0x8a, 0xb1, 0xe6, 0x9c,
	0xa8, 0xe5, 0x85, 0xb0, 0xe6, 0xad, 0xa6, 0xe5, 0x99, 0xa8, 0xe6, 0xa8, 0xa1, 0xe5, 0x9e, 0x8b,
	0xe8, 0xbd, 0xbb, 0xe5, 0x89, 0x91, 0x42, 0x55, 0x46, 0x46, 0x12, 0x45, 0x0a, 0x1c, 0x4b, 0x65,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x48, 0x55, 0x41, 0x4d, 0x55, 0x4c, 0x41, 0x4e, 0x5f, 0x55,
	0x4e, 0x49, 0x54, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x32, 0x10, 0x1f, 0x1a, 0x23, 0xaa, 0xb6,
	0x18, 0x1f, 0xe8, 0x8a, 0xb1, 0xe6, 0x9c, 0xa8, 0xe5, 0x85, 0xb0, 0xe6, 0xad, 0xa6, 0xe5, 0x99,
	0xa8, 0xe6, 0xa8, 0xa1, 0xe5, 0x9e, 0x8b, 0xe9, 0x87, 0x8d, 0xe5, 0x89, 0x91, 0x42, 0x55, 0x46,
	0x46, 0x12, 0x33, 0x0a, 0x14, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x50, 0x5f,
	0x4d, 0x49, 0x4e, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x20, 0x1a, 0x19, 0xaa, 0xb6, 0x18,
	0x15, 0xe8, 0x93, 0x9d, 0xe9, 0x87, 0x8f, 0xe6, 0x80, 0xbb, 0xe5, 0x80, 0xbc, 0xe6, 0x9c, 0x80,
	0xe4, 0xbd, 0x8e, 0xe5, 0x80, 0xbc, 0x12, 0x68, 0x0a, 0x31, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d,
	0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x21, 0x1a, 0x31, 0xaa,
	0xb6, 0x18, 0x2d, 0xe5, 0x85, 0x83, 0xe7, 0xb4, 0xa0, 0xe4, 0xbd, 0xbf, 0xe8, 0x83, 0xbd, 0xe9,
	0x99, 0x84, 0xe5, 0x8a, 0xa0, 0xe5, 0x85, 0x83, 0xe7, 0xb4, 0xa0, 0xe4, 0xb9, 0x8b, 0xe5, 0x8a,
	0x9b, 0xe7, 0x9a, 0x84, 0xe7, 0xa7, 0x8d, 0xe7, 0xb1, 0xbb, 0xe6, 0x80, 0xbb, 0xe6, 0x95, 0xb0,
	0x12, 0x3f, 0x0a, 0x1a, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x52, 0x4f, 0x4a,
	0x38, 0x5f, 0x42, 0x55, 0x59, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x4f, 0x4e, 0x43, 0x45, 0x10, 0x22,
	0x1a, 0x1f, 0xaa, 0xb6, 0x18, 0x1b, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe5,
	0x8d, 0x95, 0xe6, 0xac, 0xa1, 0xe8, 0xb4, 0xad, 0xe4, 0xb9, 0xb0, 0xe7, 0xbb, 0x8f, 0xe9, 0xaa,
	0x8c, 0x12, 0x4c, 0x0a, 0x1e, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x52, 0x4f,
	0x4a, 0x38, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x10, 0x23, 0x1a, 0x28, 0xaa, 0xb6, 0x18, 0x24, 0xe8, 0x87, 0xaa, 0xe8, 0xb5,
	0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0x8b, 0x8d, 0xe5, 0x8d, 0x96, 0xe5, 0x8a, 0xa0, 0xe6, 0x97, 0xb6,
	0xe7, 0x8e, 0xaf, 0xe8, 0x8a, 0x82, 0xe6, 0xaf, 0xab, 0xe7, 0xa7, 0x92, 0xe6, 0x95, 0xb0, 0x12,
	0x44, 0x0a, 0x19, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e,
	0x54, 0x5f, 0x52, 0x45, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x48, 0x50, 0x10, 0x24, 0x1a, 0x25,
	0xaa, 0xb6, 0x18, 0x21, 0xe5, 0xa4, 0xa9, 0xe8, 0xb5, 0x8b, 0xe9, 0x87, 0x8d, 0xe9, 0x93, 0xb8,
	0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe8, 0xa1, 0x80, 0xe9, 0x87, 0x8f, 0xe4, 0xb8, 0x87, 0xe5,
	0x88, 0x86, 0xe6, 0xaf, 0x94, 0x12, 0x38, 0x0a, 0x1c, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x25, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0xa4, 0xa9,
	0xe8, 0xb5, 0x8b, 0xe9, 0x87, 0x8d, 0xe9, 0x93, 0xb8, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12,
	0x47, 0x0a, 0x29, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x44, 0x5f, 0x52, 0x45,
	0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x43, 0x41,
	0x52, 0x44, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x10, 0x26, 0x1a, 0x18,
	0xaa, 0xb6, 0x18, 0x14, 0x54, 0x44, 0xe9, 0x87, 0x8d, 0xe6, 0x96, 0xb0, 0xe9, 0x9a, 0x8f, 0xe6,
	0x9c, 0xba, 0xe6, 0xb6, 0x88, 0xe8, 0x80, 0x97, 0x12, 0x38, 0x0a, 0x1a, 0x4b, 0x65, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x53, 0x41, 0x4e, 0x46, 0x45, 0x4e, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f,
	0x42, 0x55, 0x46, 0x46, 0x5f, 0x31, 0x10, 0x27, 0x1a, 0x18, 0xaa, 0xb6, 0x18, 0x14, 0xe4, 0xb8,
	0x89, 0xe5, 0x88, 0x86, 0xe4, 0xb9, 0x8b, 0xe5, 0x9c, 0xb0, 0x31, 0xe5, 0x8f, 0xb7, 0x62, 0x75,
	0x66, 0x66, 0x12, 0x38, 0x0a, 0x1a, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x41,
	0x4e, 0x46, 0x45, 0x4e, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x32,
	0x10, 0x28, 0x1a, 0x18, 0xaa, 0xb6, 0x18, 0x14, 0xe4, 0xb8, 0x89, 0xe5, 0x88, 0x86, 0xe4, 0xb9,
	0x8b, 0xe5, 0x9c, 0xb0, 0x32, 0xe5, 0x8f, 0xb7, 0x62, 0x75, 0x66, 0x66, 0x12, 0x38, 0x0a, 0x1a,
	0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x41, 0x4e, 0x46, 0x45, 0x4e, 0x5f, 0x55,
	0x4e, 0x49, 0x54, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x33, 0x10, 0x29, 0x1a, 0x18, 0xaa, 0xb6,
	0x18, 0x14, 0xe4, 0xb8, 0x89, 0xe5, 0x88, 0x86, 0xe4, 0xb9, 0x8b, 0xe5, 0x9c, 0xb0, 0x33, 0xe5,
	0x8f, 0xb7, 0x62, 0x75, 0x66, 0x66, 0x12, 0x38, 0x0a, 0x1a, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x53, 0x41, 0x4e, 0x46, 0x45, 0x4e, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x42, 0x55,
	0x46, 0x46, 0x5f, 0x34, 0x10, 0x2a, 0x1a, 0x18, 0xaa, 0xb6, 0x18, 0x14, 0xe4, 0xb8, 0x89, 0xe5,
	0x88, 0x86, 0xe4, 0xb9, 0x8b, 0xe5, 0x9c, 0xb0, 0x34, 0xe5, 0x8f, 0xb7, 0x62, 0x75, 0x66, 0x66,
	0x12, 0x32, 0x0a, 0x18, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x41, 0x4e, 0x46,
	0x45, 0x4e, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x31, 0x10, 0x2b, 0x1a, 0x14,
	0xaa, 0xb6, 0x18, 0x10, 0xe4, 0xb8, 0x89, 0xe5, 0x88, 0x86, 0xe4, 0xb9, 0x8b, 0xe5, 0x9c, 0xb0,
	0x31, 0xe5, 0x8f, 0xb7, 0x12, 0x32, 0x0a, 0x18, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x53, 0x41, 0x4e, 0x46, 0x45, 0x4e, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x32,
	0x10, 0x2c, 0x1a, 0x14, 0xaa, 0xb6, 0x18, 0x10, 0xe4, 0xb8, 0x89, 0xe5, 0x88, 0x86, 0xe4, 0xb9,
	0x8b, 0xe5, 0x9c, 0xb0, 0x32, 0xe5, 0x8f, 0xb7, 0x12, 0x32, 0x0a, 0x18, 0x4b, 0x65, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x53, 0x41, 0x4e, 0x46, 0x45, 0x4e, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f,
	0x49, 0x44, 0x5f, 0x33, 0x10, 0x2d, 0x1a, 0x14, 0xaa, 0xb6, 0x18, 0x10, 0xe4, 0xb8, 0x89, 0xe5,
	0x88, 0x86, 0xe4, 0xb9, 0x8b, 0xe5, 0x9c, 0xb0, 0x33, 0xe5, 0x8f, 0xb7, 0x12, 0x32, 0x0a, 0x18,
	0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x41, 0x4e, 0x46, 0x45, 0x4e, 0x5f, 0x55,
	0x4e, 0x49, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x34, 0x10, 0x2e, 0x1a, 0x14, 0xaa, 0xb6, 0x18, 0x10,
	0xe4, 0xb8, 0x89, 0xe5, 0x88, 0x86, 0xe4, 0xb9, 0x8b, 0xe5, 0x9c, 0xb0, 0x34, 0xe5, 0x8f, 0xb7,
	0x12, 0x63, 0x0a, 0x32, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x52, 0x4f, 0x4a,
	0x38, 0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x45, 0x58, 0x48,
	0x49, 0x42, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x52, 0x41, 0x49, 0x54,
	0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x10, 0x32, 0x1a, 0x2b, 0xaa, 0xb6, 0x18, 0x27, 0xe8, 0x87,
	0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0xe5, 0xa5, 0x96,
	0xe5, 0x8a, 0xb1, 0xe7, 0xab, 0x8b, 0xe7, 0xbb, 0x98, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0xe5,
	0xbb, 0xb6, 0xe8, 0xbf, 0x9f, 0x12, 0x60, 0x0a, 0x2f, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x38, 0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x41, 0x57, 0x41, 0x52,
	0x44, 0x5f, 0x45, 0x58, 0x48, 0x49, 0x42, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x57, 0x41,
	0x52, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x10, 0x33, 0x1a, 0x2b, 0xaa, 0xb6, 0x18, 0x27,
	0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0xe5,
	0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe5, 0xae, 0x9d, 0xe7, 0xae, 0xb1, 0xe5, 0xb1, 0x95, 0xe7, 0xa4,
	0xba, 0xe5, 0xbb, 0xb6, 0xe8, 0xbf, 0x9f, 0x12, 0x57, 0x0a, 0x2c, 0x4b, 0x65, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x38, 0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x41, 0x57,
	0x41, 0x52, 0x44, 0x5f, 0x45, 0x58, 0x48, 0x49, 0x42, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x10, 0x34, 0x1a, 0x25, 0xaa, 0xb6, 0x18, 0x21, 0xe8,
	0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0xe5, 0xa5,
	0x96, 0xe5, 0x8a, 0xb1, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0xe9, 0x97, 0xb4, 0xe9, 0x9a, 0x94,
	0x12, 0x52, 0x0a, 0x27, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x52, 0x4f, 0x4a,
	0x38, 0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x41, 0x4e, 0x4e,
	0x4f, 0x55, 0x4e, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x10, 0x35, 0x1a, 0x25, 0xaa,
	0xb6, 0x18, 0x21, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe9, 0xa2, 0x86, 0xe4,
	0xb8, 0xbb, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe5, 0xbc, 0x80, 0xe5, 0xa5, 0x96, 0xe5, 0xbb,
	0xb6, 0xe8, 0xbf, 0x9f, 0x12, 0x51, 0x0a, 0x26, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x50, 0x52, 0x4f, 0x4a, 0x38, 0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x44,
	0x5f, 0x41, 0x4e, 0x4e, 0x4f, 0x55, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x36,
	0x1a, 0x25, 0xaa, 0xb6, 0x18, 0x21, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe9,
	0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe5, 0xbc, 0x80, 0xe5, 0xa5,
	0x96, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x12, 0x50, 0x0a, 0x25, 0x4b, 0x65, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x38, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x10, 0x37, 0x1a, 0x25, 0xaa, 0xb6, 0x18, 0x21, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3,
	0x8b, 0xe6, 0x8d, 0xa2, 0xe7, 0x89, 0x8c, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe5, 0x8f, 0x91,
	0xe7, 0x89, 0x8c, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x12, 0x53, 0x0a, 0x28, 0x4b, 0x65, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x38, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x43, 0x48, 0x4f, 0x4f, 0x53, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x38, 0x1a, 0x25, 0xaa, 0xb6, 0x18, 0x21, 0xe8, 0x87, 0xaa,
	0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0x8d, 0xa2, 0xe7, 0x89, 0x8c, 0xe5, 0x9b, 0x9e, 0xe5,
	0x90, 0x88, 0xe9, 0x80, 0x89, 0xe7, 0x89, 0x8c, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x12, 0x56,
	0x0a, 0x2b, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x38, 0x5f,
	0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x48, 0x4f, 0x4f, 0x53, 0x45, 0x5f,
	0x43, 0x41, 0x52, 0x44, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x39, 0x1a,
	0x25, 0xaa, 0xb6, 0x18, 0x21, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0x8d,
	0xa2, 0xe7, 0x89, 0x8c, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe9, 0x80, 0x89, 0xe7, 0x89, 0x8c,
	0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x12, 0x54, 0x0a, 0x29, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x38, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x3a, 0x1a, 0x25, 0xaa, 0xb6, 0x18, 0x21, 0xe8, 0x87, 0xaa, 0xe8, 0xb5,
	0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0x8d, 0xa2, 0xe7, 0x89, 0x8c, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88,
	0xe9, 0x94, 0x81, 0xe5, 0xae, 0x9a, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x12, 0x3c, 0x0a, 0x1b,
	0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x38, 0x5f, 0x42, 0x4f,
	0x53, 0x53, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x3b, 0x1a, 0x1b, 0xaa,
	0xb6, 0x18, 0x17, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x93, 0xe9,
	0x87, 0x8e, 0xe5, 0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x1d, 0x4b, 0x65,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x38, 0x5f, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x3c, 0x1a, 0x16, 0xaa,
	0xb6, 0x18, 0x12, 0xe5, 0x8c, 0xb9, 0xe9, 0x85, 0x8d, 0xe8, 0xa7, 0x84, 0xe5, 0x88, 0x99, 0xe7,
	0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x12, 0x5f, 0x0a, 0x2e, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x45, 0x41, 0x43, 0x48, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x46, 0x49, 0x52, 0x53,
	0x54, 0x5f, 0x52, 0x45, 0x50, 0x49, 0x43, 0x4b, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x42, 0x41,
	0x53, 0x45, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x10, 0x3e, 0x1a, 0x2b, 0xaa, 0xb6, 0x18, 0x27, 0xe6,
	0xaf, 0x8f, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe9, 0xa6, 0x96, 0xe6, 0xac, 0xa1, 0xe5, 0x88,
	0xb7, 0xe6, 0x96, 0xb0, 0xe5, 0x95, 0x86, 0xe5, 0xba, 0x97, 0xe5, 0x9f, 0xba, 0xe7, 0xa1, 0x80,
	0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0x12, 0x59, 0x0a, 0x28, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x45, 0x41, 0x43, 0x48, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x50,
	0x49, 0x43, 0x4b, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x4f,
	0x53, 0x54, 0x10, 0x3f, 0x1a, 0x2b, 0xaa, 0xb6, 0x18, 0x27, 0xe6, 0xaf, 0x8f, 0xe5, 0x9b, 0x9e,
	0xe5, 0x90, 0x88, 0xe5, 0x90, 0x8e, 0xe7, 0xbb, 0xad, 0xe5, 0x88, 0xb7, 0xe6, 0x96, 0xb0, 0xe5,
	0x95, 0x86, 0xe5, 0xba, 0x97, 0xe5, 0x9f, 0xba, 0xe7, 0xa1, 0x80, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0,
	0xbc, 0x12, 0x25, 0x0a, 0x13, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x45, 0x4d,
	0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x40, 0x1a, 0x0c, 0xaa, 0xb6, 0x18, 0x08,
	0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x17, 0x4b, 0x65, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x44, 0x45, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x5f, 0x49, 0x44, 0x10, 0x41, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0xe7, 0xad, 0x96, 0xe5, 0x88,
	0x92, 0xe5, 0x9c, 0xba, 0xe6, 0x99, 0xaf, 0x49, 0x44, 0x12, 0x50, 0x0a, 0x26, 0x4b, 0x65, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x54, 0x45, 0x53, 0x54,
	0x5f, 0x57, 0x55, 0x4b, 0x4f, 0x4e, 0x47, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x31, 0x10, 0x42, 0x1a, 0x24, 0xaa, 0xb6, 0x18, 0x20, 0xe5, 0xb9, 0xb3, 0xe8, 0xa1,
	0xa1, 0xe6, 0x80, 0xa7, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe6, 0x82, 0x9f, 0xe7, 0xa9, 0xba,
	0x62, 0x75, 0x66, 0x66, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x31, 0x12, 0x50, 0x0a, 0x26, 0x4b,
	0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x54, 0x45,
	0x53, 0x54, 0x5f, 0x57, 0x55, 0x4b, 0x4f, 0x4e, 0x47, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x32, 0x10, 0x43, 0x1a, 0x24, 0xaa, 0xb6, 0x18, 0x20, 0xe5, 0xb9, 0xb3,
	0xe8, 0xa1, 0xa1, 0xe6, 0x80, 0xa7, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe6, 0x82, 0x9f, 0xe7,
	0xa9, 0xba, 0x62, 0x75, 0x66, 0x66, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x32, 0x12, 0x52, 0x0a,
	0x25, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45,
	0x54, 0x45, 0x53, 0x54, 0x5f, 0x42, 0x41, 0x4a, 0x49, 0x45, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x5f,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x31, 0x10, 0x44, 0x1a, 0x27, 0xaa, 0xb6, 0x18, 0x23, 0xe5, 0xb9,
	0xb3, 0xe8, 0xa1, 0xa1, 0xe6, 0x80, 0xa7, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe5, 0x85, 0xab,
	0xe6, 0x88, 0x92, 0x31, 0xe6, 0x98, 0x9f, 0x62, 0x75, 0x66, 0x66, 0xe6, 0x95, 0xb0, 0xe9, 0x87,
	0x8f, 0x12, 0x52, 0x0a, 0x25, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x41, 0x4c,
	0x41, 0x4e, 0x43, 0x45, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x42, 0x41, 0x4a, 0x49, 0x45, 0x5f, 0x42,
	0x55, 0x46, 0x46, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x32, 0x10, 0x45, 0x1a, 0x27, 0xaa, 0xb6,
	0x18, 0x23, 0xe5, 0xb9, 0xb3, 0xe8, 0xa1, 0xa1, 0xe6, 0x80, 0xa7, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf,
	0x95, 0xe5, 0x85, 0xab, 0xe6, 0x88, 0x92, 0x32, 0xe6, 0x98, 0x9f, 0x62, 0x75, 0x66, 0x66, 0xe6,
	0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x12, 0x52, 0x0a, 0x25, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x42, 0x41, 0x4a,
	0x49, 0x45, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x33, 0x10, 0x46,
	0x1a, 0x27, 0xaa, 0xb6, 0x18, 0x23, 0xe5, 0xb9, 0xb3, 0xe8, 0xa1, 0xa1, 0xe6, 0x80, 0xa7, 0xe6,
	0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe5, 0x85, 0xab, 0xe6, 0x88, 0x92, 0x33, 0xe6, 0x98, 0x9f, 0x62,
	0x75, 0x66, 0x66, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x12, 0x31, 0x0a, 0x14, 0x4b, 0x65, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x52, 0x41, 0x47, 0x5f, 0x48, 0x45, 0x49, 0x47, 0x48, 0x54,
	0x31, 0x10, 0x47, 0x1a, 0x17, 0xaa, 0xb6, 0x18, 0x13, 0xe6, 0x8b, 0x96, 0xe5, 0x8a, 0xa8, 0xe5,
	0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe9, 0xab, 0x98, 0xe5, 0xba, 0xa6, 0x31, 0x12, 0x31, 0x0a, 0x14,
	0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x52, 0x41, 0x47, 0x5f, 0x48, 0x45, 0x49,
	0x47, 0x48, 0x54, 0x32, 0x10, 0x48, 0x1a, 0x17, 0xaa, 0xb6, 0x18, 0x13, 0xe6, 0x8b, 0x96, 0xe5,
	0x8a, 0xa8, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe9, 0xab, 0x98, 0xe5, 0xba, 0xa6, 0x32, 0x12,
	0x31, 0x0a, 0x14, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x52, 0x41, 0x47, 0x5f,
	0x52, 0x41, 0x44, 0x49, 0x55, 0x53, 0x31, 0x10, 0x49, 0x1a, 0x17, 0xaa, 0xb6, 0x18, 0x13, 0xe6,
	0x8b, 0x96, 0xe5, 0x8a, 0xa8, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe5, 0x8d, 0x8a, 0xe5, 0xbe,
	0x84, 0x31, 0x12, 0x31, 0x0a, 0x14, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x52,
	0x41, 0x47, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x55, 0x53, 0x32, 0x10, 0x4a, 0x1a, 0x17, 0xaa, 0xb6,
	0x18, 0x13, 0xe6, 0x8b, 0x96, 0xe5, 0x8a, 0xa8, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe5, 0x8d,
	0x8a, 0xe5, 0xbe, 0x84, 0x32, 0x12, 0x49, 0x0a, 0x1e, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x52, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x52, 0x41, 0x4e,
	0x44, 0x4f, 0x4d, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x4b, 0x1a, 0x25, 0xaa, 0xb6, 0x18, 0x21, 0xe7,
	0xbb, 0x9f, 0xe6, 0xb2, 0xbb, 0xe8, 0x80, 0x85, 0xe6, 0x8e, 0xa8, 0xe8, 0x8d, 0x90, 0xe8, 0xa3,
	0x85, 0xe5, 0xa4, 0x87, 0xe6, 0x88, 0xaa, 0xe6, 0xad, 0xa2, 0xe5, 0xba, 0x8f, 0xe5, 0x8f, 0xb7,
	0x12, 0x48, 0x0a, 0x29, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x45, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x4c, 0x1a,
	0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe5, 0xbc, 0x83, 0xe7, 0x89, 0x8c, 0xe6, 0xb8, 0x85, 0xe9, 0x99,
	0xa4, 0xe5, 0x80, 0x92, 0xe8, 0xae, 0xa1, 0xe6, 0x97, 0xb6, 0x12, 0x3b, 0x0a, 0x1d, 0x4b, 0x65,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x41,
	0x49, 0x53, 0x45, 0x5f, 0x43, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x4d, 0x1a, 0x18, 0xaa,
	0xb6, 0x18, 0x14, 0xe6, 0x8b, 0x8d, 0xe5, 0x8d, 0x96, 0xe7, 0xab, 0x9e, 0xe4, 0xbb, 0xb7, 0x43,
	0x44, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x12, 0x51, 0x0a, 0x29, 0x4b, 0x65, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x48, 0x55, 0x41, 0x4e, 0x48, 0x55, 0x41,
	0x4c, 0x49, 0x4e, 0x47, 0x50, 0x41, 0x49, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x10, 0x4e, 0x1a, 0x22, 0xaa, 0xb6, 0x18, 0x1e, 0xe5, 0xb9, 0xbb, 0xe5,
	0x8c, 0x96, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe5, 0xb9,
	0xbb, 0xe5, 0x8c, 0x96, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12, 0x57, 0x0a, 0x2f, 0x4b, 0x65,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x48, 0x55, 0x41, 0x4e,
	0x48, 0x55, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x50, 0x41, 0x49, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x4f, 0x1a,
	0x22, 0xaa, 0xb6, 0x18, 0x1e, 0xe5, 0xb9, 0xbb, 0xe5, 0x8c, 0x96, 0xe4, 0xbb, 0xa4, 0xe7, 0x89,
	0x8c, 0xe8, 0xb5, 0xb7, 0xe5, 0xa7, 0x8b, 0xe5, 0xa4, 0x87, 0xe9, 0x80, 0x89, 0xe6, 0x95, 0xb0,
	0xe9, 0x87, 0x8f, 0x12, 0x4a, 0x0a, 0x25, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53,
	0x48, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x50, 0x1a, 0x1f,
	0xaa, 0xb6, 0x18, 0x1b, 0xe5, 0x85, 0xb1, 0xe4, 0xba, 0xab, 0xe5, 0xa4, 0x87, 0xe6, 0x88, 0x98,
	0xe5, 0x8c, 0xba, 0xe6, 0xa7, 0xbd, 0xe4, 0xbd, 0x8d, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x12,
	0x3d, 0x0a, 0x1e, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52,
	0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x10, 0x51, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe5, 0xa4, 0x87, 0xe6, 0x88, 0x98, 0xe5,
	0x8c, 0xba, 0xe6, 0xa7, 0xbd, 0xe4, 0xbd, 0x8d, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x12, 0x45,
	0x0a, 0x20, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41,
	0x4c, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x4f, 0x46, 0x46, 0x53,
	0x45, 0x54, 0x10, 0x52, 0x1a, 0x1f, 0xaa, 0xb6, 0x18, 0x1b, 0xe4, 0xb8, 0xaa, 0xe6, 0x80, 0xa7,
	0xe5, 0x8c, 0x96, 0xe5, 0x95, 0x86, 0xe5, 0xba, 0x97, 0xe5, 0x8d, 0xa1, 0xe6, 0xa7, 0xbd, 0xe5,
	0x81, 0x8f, 0xe7, 0xa7, 0xbb, 0x12, 0x25, 0x0a, 0x0f, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x48, 0x50, 0x10, 0x53, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c,
	0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe7, 0x94, 0x9f, 0xe5, 0x91, 0xbd, 0x12, 0x36, 0x0a, 0x14,
	0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x41, 0x4e, 0x46, 0x45, 0x4e, 0x5f, 0x31,
	0x41, 0x52, 0x45, 0x41, 0x10, 0x54, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe4, 0xb8, 0x89, 0xe5,
	0x88, 0x86, 0xe4, 0xb9, 0x8b, 0xe5, 0x9c, 0xb0, 0xe4, 0xb8, 0x80, 0xe5, 0x8f, 0xb7, 0xe5, 0x9c,
	0xb0, 0xe5, 0x9d, 0x97, 0x12, 0x36, 0x0a, 0x14, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x53, 0x41, 0x4e, 0x46, 0x45, 0x4e, 0x5f, 0x32, 0x41, 0x52, 0x45, 0x41, 0x10, 0x55, 0x1a, 0x1c,
	0xaa, 0xb6, 0x18, 0x18, 0xe4, 0xb8, 0x89, 0xe5, 0x88, 0x86, 0xe4, 0xb9, 0x8b, 0xe5, 0x9c, 0xb0,
	0xe4, 0xba, 0x8c, 0xe5, 0x8f, 0xb7, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x97, 0x12, 0x36, 0x0a, 0x14,
	0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x41, 0x4e, 0x46, 0x45, 0x4e, 0x5f, 0x33,
	0x41, 0x52, 0x45, 0x41, 0x10, 0x56, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe4, 0xb8, 0x89, 0xe5,
	0x88, 0x86, 0xe4, 0xb9, 0x8b, 0xe5, 0x9c, 0xb0, 0xe4, 0xb8, 0x89, 0xe5, 0x8f, 0xb7, 0xe5, 0x9c,
	0xb0, 0xe5, 0x9d, 0x97, 0x12, 0x48, 0x0a, 0x25, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x41, 0x4e, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x41, 0x4e, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x10, 0x57, 0x1a,
	0x1d, 0xaa, 0xb6, 0x18, 0x19, 0xe8, 0x8e, 0xb7, 0xe5, 0xbe, 0x97, 0xe9, 0x95, 0xbf, 0xe5, 0xae,
	0x89, 0xe4, 0xbb, 0xa3, 0xe5, 0xb8, 0x81, 0xe5, 0x8a, 0xa0, 0x62, 0x75, 0x66, 0x66, 0x1a, 0x08,
	0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x3a, 0x10, 0x8a, 0x97, 0x22, 0x04, 0x54, 0x79,
	0x70, 0x65, 0xf8, 0x97, 0x22, 0x01, 0xf0, 0x97, 0x22, 0x01, 0x22, 0xfa, 0x01, 0x0a, 0x1a, 0x52,
	0x65, 0x73, 0x44, 0x54, 0x5f, 0x44, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x05, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe9, 0x9b,
	0x86, 0xe5, 0x90, 0x88, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x22, 0x0a, 0x06, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xb5, 0x18,
	0x06, 0xe6, 0x9d, 0x83, 0xe9, 0x87, 0x8d, 0x52, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x20, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xea, 0xb5, 0x18, 0x06, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x20, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xea, 0xb5, 0x18, 0x06, 0xe6, 0xa0, 0x87, 0xe9, 0xa2, 0x98, 0x52, 0x05, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x52, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x32, 0xea, 0xb5, 0x18, 0x06, 0xe5, 0x8f, 0x82,
	0xe6, 0x95, 0xb0, 0xda, 0xb5, 0x18, 0x01, 0x32, 0xf2, 0xb5, 0x18, 0x1f, 0x52, 0x45, 0x53, 0x5f,
	0x4d, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x5f, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0a, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xec, 0x04, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x4d,
	0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x10, 0xea, 0xb5, 0x18, 0x08, 0xe5, 0xae, 0x9d, 0xe7, 0xae, 0xb1, 0x49, 0x44, 0xc8,
	0xc1, 0x18, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x41, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2d, 0xea, 0xb5, 0x18, 0x0c, 0xe5, 0xae, 0x9d, 0xe7, 0xae,
	0xb1, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x19, 0x52, 0x45, 0x53, 0x5f, 0x4d,
	0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x54, 0x0a, 0x09, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x36, 0xea,
	0xb5, 0x18, 0x0f, 0xe5, 0xae, 0x9d, 0xe7, 0xae, 0xb1, 0xe5, 0xad, 0x90, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0xf2, 0xb5, 0x18, 0x1f, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x61, 0x73, 0x73, 0x69, 0x76,
	0x65, 0x5f, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x43, 0x68, 0x69, 0x6c, 0x64,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x09, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x43, 0x0a, 0x0f, 0x43, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xb5, 0x18, 0x15, 0xe5,
	0xae, 0x9d, 0xe7, 0xae, 0xb1, 0xe5, 0x8f, 0xaf, 0xe9, 0xa2, 0x86, 0xe5, 0x8f, 0x96, 0xe6, 0xac,
	0xa1, 0xe6, 0x95, 0xb0, 0x52, 0x0f, 0x43, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x77, 0x61,
	0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea,
	0xb5, 0x18, 0x15, 0xe5, 0xae, 0x9d, 0xe7, 0xae, 0xb1, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0xe5,
	0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe6, 0x95, 0xb0, 0x52, 0x0e, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x77,
	0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x62, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x54,
	0x5f, 0x44, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x15, 0xea, 0xb5, 0x18, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba,
	0x90, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0xda, 0xb5, 0x18, 0x01, 0x36, 0x52, 0x0e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x4f, 0x0a, 0x0b,
	0x49, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x2d, 0xea, 0xb5, 0x18, 0x18, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xbc, 0x80,
	0xe5, 0x90, 0xaf, 0xe9, 0xa2, 0x86, 0xe5, 0x8f, 0x96, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xf2,
	0xb5, 0x18, 0x0d, 0x52, 0x45, 0x53, 0x5f, 0x41, 0x4e, 0x4f, 0x4e, 0x59, 0x4d, 0x4f, 0x55, 0x53,
	0x52, 0x0b, 0x49, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a,
	0x15, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x15, 0xea, 0xb5,
	0x18, 0x0c, 0xe9, 0xa2, 0x86, 0xe5, 0x8f, 0x96, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xda, 0xb5,
	0x18, 0x01, 0x36, 0x52, 0x15, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x3a, 0x0a, 0xf8, 0x97, 0x22, 0x01,
	0x8a, 0x97, 0x22, 0x02, 0x49, 0x44, 0x2a, 0xbb, 0x04, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x5f, 0x50,
	0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x2a, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52,
	0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x1a, 0x04, 0xaa, 0xb6,
	0x18, 0x00, 0x12, 0x3d, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43,
	0x54, 0x38, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x10, 0x01, 0x1a, 0x17, 0xaa, 0xb6, 0x18, 0x13, 0xe5, 0xb1,
	0x80, 0xe5, 0x86, 0x85, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0x2d, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b,
	0x84, 0x12, 0x3e, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54,
	0x38, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x10, 0x02, 0x1a, 0x17, 0xaa, 0xb6, 0x18, 0x13, 0xe5, 0xb1,
	0x80, 0xe5, 0x86, 0x85, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0x2d, 0xe8, 0xa3, 0x85, 0xe5, 0xa4,
	0x87, 0x12, 0x3d, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54,
	0x38, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x03, 0x1a, 0x17, 0xaa, 0xb6, 0x18, 0x13, 0xe5, 0xb1, 0x80,
	0xe5, 0x86, 0x85, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0x2d, 0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81,
	0x12, 0x50, 0x0a, 0x2a, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38,
	0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x48, 0x45, 0x52, 0x4f, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x10, 0x04,
	0x1a, 0x20, 0xaa, 0xb6, 0x18, 0x1c, 0xe5, 0xb1, 0x80, 0xe5, 0x86, 0x85, 0xe6, 0x8e, 0x89, 0xe8,
	0x90, 0xbd, 0x2d, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0xe5,
	0x8c, 0x85, 0x12, 0x3f, 0x0a, 0x22, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43,
	0x54, 0x38, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x1a, 0x17, 0xaa, 0xb6, 0x18, 0x13,
	0xe5, 0xb1, 0x80, 0xe5, 0x86, 0x85, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0x2d, 0xe5, 0xa4, 0xa9,
	0xe8, 0xb5, 0x8b, 0x12, 0x44, 0x0a, 0x24, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45,
	0x43, 0x54, 0x38, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x5f, 0x47, 0x4c, 0x10, 0x06, 0x1a, 0x1a, 0xaa,
	0xb6, 0x18, 0x16, 0xe5, 0xb1, 0x80, 0xe5, 0x86, 0x85, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0x2d,
	0xe9, 0x80, 0xbb, 0xe8, 0xbe, 0x91, 0xe5, 0x9b, 0xbe, 0x12, 0x4b, 0x0a, 0x25, 0x52, 0x45, 0x53,
	0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f,
	0x48, 0x50, 0x10, 0x07, 0x1a, 0x20, 0xaa, 0xb6, 0x18, 0x1c, 0xe5, 0xb1, 0x80, 0xe5, 0x86, 0x85,
	0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0x2d, 0xe6, 0xa3, 0x8b, 0xe6, 0x89, 0x8b, 0xe7, 0x94, 0x9f,
	0xe5, 0x91, 0xbd, 0xe5, 0x80, 0xbc, 0x1a, 0x0c, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01,
	0xa8, 0xf9, 0x2b, 0x01, 0x2a, 0xa1, 0x02, 0x0a, 0x11, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x4f,
	0x55, 0x4e, 0x44, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x4e, 0x5f, 0x4e, 0x55, 0x4c,
	0x4c, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x0b, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x10, 0x01, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0xbc, 0x80, 0xe7, 0xab, 0xaf,
	0x12, 0x1c, 0x0a, 0x0c, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54,
	0x10, 0x02, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0xa4, 0xa9, 0xe8, 0xb5, 0x8b, 0x12, 0x23,
	0x0a, 0x0d, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x10,
	0x03, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x85, 0xa8, 0xe5, 0xb1, 0x80, 0xe6, 0x8a, 0x95,
	0xe6, 0x94, 0xbe, 0x12, 0x1d, 0x0a, 0x0d, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x41, 0x55, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe6, 0x8b, 0x8d, 0xe5,
	0x8d, 0x96, 0x12, 0x1d, 0x0a, 0x0d, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x4e, 0x53,
	0x54, 0x45, 0x52, 0x10, 0x05, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe6, 0x89, 0x93, 0xe9, 0x87,
	0x8e, 0x12, 0x1b, 0x0a, 0x0b, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x46, 0x49, 0x47, 0x48, 0x54,
	0x10, 0x06, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0xaf, 0xb9, 0xe6, 0x88, 0x98, 0x12, 0x20,
	0x0a, 0x10, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x50, 0x4f, 0x50, 0x55, 0x4c, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x07, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe4, 0xba, 0xba, 0xe5, 0x8f, 0xa3,
	0x12, 0x16, 0x0a, 0x12, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x4e, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x08, 0x2a, 0xd9, 0x02, 0x0a, 0x19, 0x52, 0x45, 0x53,
	0x5f, 0x4d, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x23, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x61,
	0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x4e,
	0x55, 0x4c, 0x4c, 0x10, 0x00, 0x1a, 0x04, 0xaa, 0xb6, 0x18, 0x00, 0x12, 0x33, 0x0a, 0x1d, 0x52,
	0x45, 0x53, 0x5f, 0x4d, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x72, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x5f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x10, 0x01, 0x1a, 0x10,
	0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0x87, 0xaa, 0xe9, 0x80, 0x89, 0xe5, 0xae, 0x9d, 0xe7, 0xae, 0xb1,
	0x12, 0x30, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f,
	0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x41, 0x66, 0x74, 0x65, 0x72, 0x10, 0x02,
	0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0xbf, 0xbd, 0xe8, 0xb5, 0xb6, 0xe5, 0xae, 0x9d, 0xe7,
	0xae, 0xb1, 0x12, 0x2e, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x61, 0x73, 0x73, 0x69, 0x76,
	0x65, 0x5f, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x50, 0x61, 0x79, 0x10, 0x03,
	0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe4, 0xbb, 0x98, 0xe8, 0xb4, 0xb9, 0xe5, 0xae, 0x9d, 0xe7,
	0xae, 0xb1, 0x12, 0x33, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x61, 0x73, 0x73, 0x69, 0x76,
	0x65, 0x5f, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x48, 0x65, 0x72, 0x69, 0x74,
	0x61, 0x67, 0x65, 0x10, 0x04, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe9, 0x81, 0x97, 0xe4, 0xba,
	0xa7, 0xe5, 0xae, 0x9d, 0xe7, 0xae, 0xb1, 0x12, 0x3d, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x5f, 0x4d,
	0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x05, 0x1a, 0x19, 0xaa, 0xb6, 0x18,
	0x15, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe9, 0x80, 0x92, 0xe8, 0xbf, 0x9b, 0xe5, 0xbc, 0x8f,
	0xe5, 0xae, 0x9d, 0xe7, 0xae, 0xb1, 0x1a, 0x0c, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01,
	0xa8, 0xf9, 0x2b, 0x01, 0x2a, 0x9f, 0x02, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x61, 0x73,
	0x73, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x29, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x5f,
	0x4d, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x5f, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x1a, 0x04, 0xaa,
	0xb6, 0x18, 0x00, 0x12, 0x47, 0x0a, 0x2b, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x61, 0x73, 0x73, 0x69,
	0x76, 0x65, 0x5f, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x5f, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x10, 0x01, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6,
	0xe5, 0x8f, 0x98, 0xe5, 0x8c, 0x96, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x12, 0x3f, 0x0a, 0x26,
	0x52, 0x45, 0x53, 0x5f, 0x4d, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x72, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x5f, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x10, 0x02, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe9, 0x80,
	0x92, 0xe8, 0xbf, 0x9b, 0xe5, 0xbc, 0x8f, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x12, 0x39, 0x0a,
	0x23, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x48, 0x65, 0x72, 0x69,
	0x74, 0x61, 0x67, 0x65, 0x10, 0x03, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe9, 0x81, 0x97, 0xe4,
	0xba, 0xa7, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x1a, 0x0c, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9,
	0x2b, 0x01, 0xa8, 0xf9, 0x2b, 0x01, 0x42, 0x18, 0x5a, 0x16, 0x6f, 0x73, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x65, 0x73, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_os_res_data_legacy_proto_rawDescOnce sync.Once
	file_os_res_data_legacy_proto_rawDescData = file_os_res_data_legacy_proto_rawDesc
)

func file_os_res_data_legacy_proto_rawDescGZIP() []byte {
	file_os_res_data_legacy_proto_rawDescOnce.Do(func() {
		file_os_res_data_legacy_proto_rawDescData = protoimpl.X.CompressGZIP(file_os_res_data_legacy_proto_rawDescData)
	})
	return file_os_res_data_legacy_proto_rawDescData
}

var file_os_res_data_legacy_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_os_res_data_legacy_proto_msgTypes = make([]protoimpl.MessageInfo, 141)
var file_os_res_data_legacy_proto_goTypes = []interface{}{
	(RES_PROJECT8_DROP_ITEM_TYPE)(0),                  // 0: ResData.RES_PROJECT8_DROP_ITEM_TYPE
	(RES_RoundFunction)(0),                            // 1: ResData.RES_RoundFunction
	(RES_Massive_Treasure_TYPE)(0),                    // 2: ResData.RES_Massive_Treasure_TYPE
	(RES_Massive_Treasure_Child_TYPE)(0),              // 3: ResData.RES_Massive_Treasure_Child_TYPE
	(ResProject8AwardInfo_AwardLevelType)(0),          // 4: ResData.ResProject8AwardInfo.AwardLevelType
	(ResRoundStateFlow_RoundStageType)(0),             // 5: ResData.ResRoundStateFlow.RoundStageType
	(ResDT_LevelCommonInfo_SettleRuleType)(0),         // 6: ResData.ResDT_LevelCommonInfo.SettleRuleType
	(ResPlayConstParam_KeyType)(0),                    // 7: ResData.ResPlayConstParam.KeyType
	(*ResDT_Common_KeyValue)(nil),                     // 8: ResData.ResDT_Common_KeyValue
	(*ResDT_RewardItem)(nil),                          // 9: ResData.ResDT_RewardItem
	(*ResGuideTipInfo)(nil),                           // 10: ResData.ResGuideTipInfo
	(*ResDT_IntParamArrayNode)(nil),                   // 11: ResData.ResDT_IntParamArrayNode
	(*ResDT_JumpForm)(nil),                            // 12: ResData.ResDT_JumpForm
	(*ResDT_PveRewardShowInfo)(nil),                   // 13: ResData.ResDT_PveRewardShowInfo
	(*ResDT_MapBuff)(nil),                             // 14: ResData.ResDT_MapBuff
	(*ResDT_CostInfo)(nil),                            // 15: ResData.ResDT_CostInfo
	(*ResDT_PveReviveInfo)(nil),                       // 16: ResData.ResDT_PveReviveInfo
	(*ResLevelCfgInfo)(nil),                           // 17: ResData.ResLevelCfgInfo
	(*ResDT_UnUseSkill)(nil),                          // 18: ResData.ResDT_UnUseSkill
	(*DynamicAttributeInfo)(nil),                      // 19: ResData.DynamicAttributeInfo
	(*ResDT_SkillDescription)(nil),                    // 20: ResData.ResDT_SkillDescription
	(*ResSkillCfgInfo)(nil),                           // 21: ResData.ResSkillCfgInfo
	(*ResDT_SkillDynamicIndicatorActorStateInfo)(nil), // 22: ResData.ResDT_SkillDynamicIndicatorActorStateInfo
	(*ResDT_SkillFunc)(nil),                           // 23: ResData.ResDT_SkillFunc
	(*ResDT_SkillPassiveCondition)(nil),               // 24: ResData.ResDT_SkillPassiveCondition
	(*ResDT_ShowBuffType)(nil),                        // 25: ResData.ResDT_ShowBuffType
	(*ResDT_SkillMarkLayerEffectName)(nil),            // 26: ResData.ResDT_SkillMarkLayerEffectName
	(*ResSkillMarkCfgInfo)(nil),                       // 27: ResData.ResSkillMarkCfgInfo
	(*ResSkillPassiveCfgInfo)(nil),                    // 28: ResData.ResSkillPassiveCfgInfo
	(*ResRandomSkillPassiveRule)(nil),                 // 29: ResData.ResRandomSkillPassiveRule
	(*ResSkillCombineCfgInfo)(nil),                    // 30: ResData.ResSkillCombineCfgInfo
	(*ResBuffRmvInfo)(nil),                            // 31: ResData.ResBuffRmvInfo
	(*ResGlobalInfo)(nil),                             // 32: ResData.ResGlobalInfo
	(*ResBattleGlobalTxtInfo)(nil),                    // 33: ResData.ResBattleGlobalTxtInfo
	(*ResDT_ItemSrc_Info)(nil),                        // 34: ResData.ResDT_ItemSrc_Info
	(*ResDT_FuncEft_Obj)(nil),                         // 35: ResData.ResDT_FuncEft_Obj
	(*ResSymbolInfo)(nil),                             // 36: ResData.ResSymbolInfo
	(*ResDT_ConditionInfo)(nil),                       // 37: ResData.ResDT_ConditionInfo
	(*ResEvaluateStarInfo)(nil),                       // 38: ResData.ResEvaluateStarInfo
	(*ResDT_CompensateInfo)(nil),                      // 39: ResData.ResDT_CompensateInfo
	(*ResDT_PickRuleInfo)(nil),                        // 40: ResData.ResDT_PickRuleInfo
	(*ResRenderCullingExclude)(nil),                   // 41: ResData.ResRenderCullingExclude
	(*ResDT_TeamRangeRule)(nil),                       // 42: ResData.ResDT_TeamRangeRule
	(*ResTextData)(nil),                               // 43: ResData.ResTextData
	(*ResRankGradeConf)(nil),                          // 44: ResData.ResRankGradeConf
	(*ResDT_AllocRuleParam)(nil),                      // 45: ResData.ResDT_AllocRuleParam
	(*ResDT_IncomeAttackRule)(nil),                    // 46: ResData.ResDT_IncomeAttackRule
	(*ResSoulAddition)(nil),                           // 47: ResData.ResSoulAddition
	(*HeroJobFeature)(nil),                            // 48: ResData.HeroJobFeature
	(*ResHeroCampBuff)(nil),                           // 49: ResData.ResHeroCampBuff
	(*ResDT_EnergyState)(nil),                         // 50: ResData.ResDT_EnergyState
	(*ResHeroJobBuff)(nil),                            // 51: ResData.ResHeroJobBuff
	(*ResHeroBuff)(nil),                               // 52: ResData.ResHeroBuff
	(*ResDT_RegisterSale_Info)(nil),                   // 53: ResData.ResDT_RegisterSale_Info
	(*ResDT_SkinFeature)(nil),                         // 54: ResData.ResDT_SkinFeature
	(*ResDT_SkinVoice)(nil),                           // 55: ResData.ResDT_SkinVoice
	(*ResClashAddition)(nil),                          // 56: ResData.ResClashAddition
	(*ResPropertyValueInfo)(nil),                      // 57: ResData.ResPropertyValueInfo
	(*ResBattleFloatText)(nil),                        // 58: ResData.ResBattleFloatText
	(*ResDT_DigitFloatInterval)(nil),                  // 59: ResData.ResDT_DigitFloatInterval
	(*ResDigitFloatTextCfgInfo)(nil),                  // 60: ResData.ResDigitFloatTextCfgInfo
	(*ResAiParamConf)(nil),                            // 61: ResData.ResAiParamConf
	(*ResSpeedAdjustRangeConfig)(nil),                 // 62: ResData.ResSpeedAdjustRangeConfig
	(*ResSpeedAdjustConfig)(nil),                      // 63: ResData.ResSpeedAdjustConfig
	(*ResBattleRoyaleParamByMMR)(nil),                 // 64: ResData.ResBattleRoyaleParamByMMR
	(*ResAIReuseParams)(nil),                          // 65: ResData.ResAIReuseParams
	(*ResDT_SceneSkin_Property)(nil),                  // 66: ResData.ResDT_SceneSkin_Property
	(*ResSceneSkinInfo)(nil),                          // 67: ResData.ResSceneSkinInfo
	(*ResActionInfo)(nil),                             // 68: ResData.ResActionInfo
	(*ResAnimActionConfig)(nil),                       // 69: ResData.ResAnimActionConfig
	(*ResTeamInfo)(nil),                               // 70: ResData.ResTeamInfo
	(*ResDT_ChessEffectNum)(nil),                      // 71: ResData.ResDT_ChessEffectNum
	(*ResDT_ChessIconPath)(nil),                       // 72: ResData.ResDT_ChessIconPath
	(*ResDT_ChessRelativeQuality)(nil),                // 73: ResData.ResDT_ChessRelativeQuality
	(*ResDT_AuctionDropInfo)(nil),                     // 74: ResData.ResDT_AuctionDropInfo
	(*ResChessAuctionRound)(nil),                      // 75: ResData.ResChessAuctionRound
	(*RessChessAIUpgradeConfig)(nil),                  // 76: ResData.RessChessAIUpgradeConfig
	(*ResChessAuctionItemCount)(nil),                  // 77: ResData.ResChessAuctionItemCount
	(*ResChessAuctionTime)(nil),                       // 78: ResData.ResChessAuctionTime
	(*ResChessAuctionUnlockCfg)(nil),                  // 79: ResData.ResChessAuctionUnlockCfg
	(*ResChessAuctionDividendCfg)(nil),                // 80: ResData.ResChessAuctionDividendCfg
	(*ResDT_ChessPresetInfo)(nil),                     // 81: ResData.ResDT_ChessPresetInfo
	(*ResProj8EffectDegree)(nil),                      // 82: ResData.ResProj8EffectDegree
	(*ResChessPreset)(nil),                            // 83: ResData.ResChessPreset
	(*ResChessPickCardAutoTest)(nil),                  // 84: ResData.ResChessPickCardAutoTest
	(*ResChessSkinInfo)(nil),                          // 85: ResData.ResChessSkinInfo
	(*ResChessSimulate)(nil),                          // 86: ResData.ResChessSimulate
	(*ResChessQualityStarInfo)(nil),                   // 87: ResData.ResChessQualityStarInfo
	(*ResChessCardQualityChance)(nil),                 // 88: ResData.ResChessCardQualityChance
	(*ResChessPhaseInfo)(nil),                         // 89: ResData.ResChessPhaseInfo
	(*ResExtraFightHeroInfo)(nil),                     // 90: ResData.ResExtraFightHeroInfo
	(*StreakReward)(nil),                              // 91: ResData.StreakReward
	(*StreakFinishReward)(nil),                        // 92: ResData.StreakFinishReward
	(*ResDT_SettlePhrase)(nil),                        // 93: ResData.ResDT_SettlePhrase
	(*ResChessSettlePhrase)(nil),                      // 94: ResData.ResChessSettlePhrase
	(*ResChessRecommendArrangeCfgInfo)(nil),           // 95: ResData.ResChessRecommendArrangeCfgInfo
	(*ChessArrangeProbabilityRegion)(nil),             // 96: ResData.ChessArrangeProbabilityRegion
	(*ResProj8HelpDescMain)(nil),                      // 97: ResData.ResProj8HelpDescMain
	(*ResProj8HelpDescPics)(nil),                      // 98: ResData.ResProj8HelpDescPics
	(*ResProj8HelpDescItems)(nil),                     // 99: ResData.ResProj8HelpDescItems
	(*ResProj8HelpOperate)(nil),                       // 100: ResData.ResProj8HelpOperate
	(*ResChessSubProcInfo)(nil),                       // 101: ResData.ResChessSubProcInfo
	(*ResChessCardInfo)(nil),                          // 102: ResData.ResChessCardInfo
	(*ExchangeCardRoundInfo)(nil),                     // 103: ResData.ExchangeCardRoundInfo
	(*ExchangeCardRandRewardInfo)(nil),                // 104: ResData.ExchangeCardRandRewardInfo
	(*ResChessRewardBoxInfo)(nil),                     // 105: ResData.ResChessRewardBoxInfo
	(*ResChessCardPoolInfo)(nil),                      // 106: ResData.ResChessCardPoolInfo
	(*ResChessMonsterDropInfo)(nil),                   // 107: ResData.ResChessMonsterDropInfo
	(*ChessSingleDropProbability)(nil),                // 108: ResData.ChessSingleDropProbability
	(*ResChessDropInfo)(nil),                          // 109: ResData.ResChessDropInfo
	(*ResChessDropEquipGroupInfo)(nil),                // 110: ResData.ResChessDropEquipGroupInfo
	(*ResChessEquipPickInfo)(nil),                     // 111: ResData.ResChessEquipPickInfo
	(*ResChessEquipRefreshCost)(nil),                  // 112: ResData.ResChessEquipRefreshCost
	(*ResDT_ChessPresetFormationInfo)(nil),            // 113: ResData.ResDT_ChessPresetFormationInfo
	(*ResChessPresetFormation)(nil),                   // 114: ResData.ResChessPresetFormation
	(*ResDT_IgnoreCard)(nil),                          // 115: ResData.ResDT_IgnoreCard
	(*ResChessAILevel)(nil),                           // 116: ResData.ResChessAILevel
	(*ResProject8ShopInfo)(nil),                       // 117: ResData.ResProject8ShopInfo
	(*ResProject8AwardInfo)(nil),                      // 118: ResData.ResProject8AwardInfo
	(*ResProject8LordActionInfo)(nil),                 // 119: ResData.ResProject8LordActionInfo
	(*ResProject8BossRoundConfig)(nil),                // 120: ResData.ResProject8BossRoundConfig
	(*ResProject8BossAwardCountCfg)(nil),              // 121: ResData.ResProject8BossAwardCountCfg
	(*ResProject8PlanCfg)(nil),                        // 122: ResData.ResProject8PlanCfg
	(*ResProject8BossChooseAwardCfg)(nil),             // 123: ResData.ResProject8BossChooseAwardCfg
	(*ResProject8BossHpAwardCfg)(nil),                 // 124: ResData.ResProject8BossHpAwardCfg
	(*ResProject8GrabAwardCountCfg)(nil),              // 125: ResData.ResProject8GrabAwardCountCfg
	(*ResProject8GrabAwardDropCfg)(nil),               // 126: ResData.ResProject8GrabAwardDropCfg
	(*ResProject8GrabAwardGlobalCfg)(nil),             // 127: ResData.ResProject8GrabAwardGlobalCfg
	(*ResDT_DropGroup)(nil),                           // 128: ResData.ResDT_DropGroup
	(*ResProject8DropPlanInfo)(nil),                   // 129: ResData.ResProject8DropPlanInfo
	(*ResDT_DropGroupCondition)(nil),                  // 130: ResData.ResDT_DropGroupCondition
	(*ResDT_DropCardPoolParam)(nil),                   // 131: ResData.ResDT_DropCardPoolParam
	(*ResProject8DropInfo)(nil),                       // 132: ResData.ResProject8DropInfo
	(*RoundPopulationDamageFix)(nil),                  // 133: ResData.RoundPopulationDamageFix
	(*ResBloodEffectConfig)(nil),                      // 134: ResData.ResBloodEffectConfig
	(*ResDT_AwakeInfo)(nil),                           // 135: ResData.ResDT_AwakeInfo
	(*ResSpecialGearAwakeInfo)(nil),                   // 136: ResData.ResSpecialGearAwakeInfo
	(*ResGroup)(nil),                                  // 137: ResData.ResGroup
	(*RES_RoundFunctionData)(nil),                     // 138: ResData.RES_RoundFunctionData
	(*ResRoundStateFlow)(nil),                         // 139: ResData.ResRoundStateFlow
	(*ResBattleRoundState)(nil),                       // 140: ResData.ResBattleRoundState
	(*ResGameWatchLimit)(nil),                         // 141: ResData.ResGameWatchLimit
	(*ResDT_ChessMoveTestInfo)(nil),                   // 142: ResData.ResDT_ChessMoveTestInfo
	(*ResChessMoveTest)(nil),                          // 143: ResData.ResChessMoveTest
	(*ResDT_LevelCommonInfo)(nil),                     // 144: ResData.ResDT_LevelCommonInfo
	(*ResEntertainmentLevelInfo)(nil),                 // 145: ResData.ResEntertainmentLevelInfo
	(*ResPlayConstParam)(nil),                         // 146: ResData.ResPlayConstParam
	(*ResDT_DropMassiveCondition)(nil),                // 147: ResData.ResDT_DropMassiveCondition
	(*ResMassiveTreasureDataBin)(nil),                 // 148: ResData.ResMassiveTreasureDataBin
}
var file_os_res_data_legacy_proto_depIdxs = []int32{
	15,  // 0: ResData.ResDT_PveReviveInfo.ReviveCost:type_name -> ResData.ResDT_CostInfo
	11,  // 1: ResData.ResLevelCfgInfo.StarDetail:type_name -> ResData.ResDT_IntParamArrayNode
	13,  // 2: ResData.ResLevelCfgInfo.RewardShowDetail:type_name -> ResData.ResDT_PveRewardShowInfo
	14,  // 3: ResData.ResLevelCfgInfo.MapBuffs:type_name -> ResData.ResDT_MapBuff
	16,  // 4: ResData.ResLevelCfgInfo.ReviveInfo:type_name -> ResData.ResDT_PveReviveInfo
	11,  // 5: ResData.ResDT_SkillDynamicIndicatorActorStateInfo.StateParam:type_name -> ResData.ResDT_IntParamArrayNode
	11,  // 6: ResData.ResDT_SkillFunc.SkillFuncParam:type_name -> ResData.ResDT_IntParamArrayNode
	11,  // 7: ResData.ResDT_SkillPassiveCondition.ConditionParam:type_name -> ResData.ResDT_IntParamArrayNode
	26,  // 8: ResData.ResSkillMarkCfgInfo.LayerEffectName:type_name -> ResData.ResDT_SkillMarkLayerEffectName
	24,  // 9: ResData.ResSkillPassiveCfgInfo.PassiveConditon:type_name -> ResData.ResDT_SkillPassiveCondition
	11,  // 10: ResData.ResRandomSkillPassiveRule.RandomSkillPassiveID1:type_name -> ResData.ResDT_IntParamArrayNode
	11,  // 11: ResData.ResRandomSkillPassiveRule.RandomSkillPassiveID2:type_name -> ResData.ResDT_IntParamArrayNode
	23,  // 12: ResData.ResSkillCombineCfgInfo.SkillFuncInfo:type_name -> ResData.ResDT_SkillFunc
	25,  // 13: ResData.ResSkillCombineCfgInfo.ShowBuffType:type_name -> ResData.ResDT_ShowBuffType
	35,  // 14: ResData.ResSymbolInfo.FuncEftList:type_name -> ResData.ResDT_FuncEft_Obj
	35,  // 15: ResData.ResSymbolInfo.PveEftList:type_name -> ResData.ResDT_FuncEft_Obj
	34,  // 16: ResData.ResSymbolInfo.SrcInfo:type_name -> ResData.ResDT_ItemSrc_Info
	37,  // 17: ResData.ResEvaluateStarInfo.Conditions:type_name -> ResData.ResDT_ConditionInfo
	45,  // 18: ResData.ResDT_IncomeAttackRule.IncomeMemberArr:type_name -> ResData.ResDT_AllocRuleParam
	35,  // 19: ResData.ResHeroJobBuff.Attr:type_name -> ResData.ResDT_FuncEft_Obj
	35,  // 20: ResData.ResHeroBuff.Attr:type_name -> ResData.ResDT_FuncEft_Obj
	59,  // 21: ResData.ResDigitFloatTextCfgInfo.Intervals:type_name -> ResData.ResDT_DigitFloatInterval
	62,  // 22: ResData.ResSpeedAdjustConfig.RangeConfigs:type_name -> ResData.ResSpeedAdjustRangeConfig
	66,  // 23: ResData.ResSceneSkinInfo.SceneSkinProps:type_name -> ResData.ResDT_SceneSkin_Property
	12,  // 24: ResData.ResActionInfo.JumpForm:type_name -> ResData.ResDT_JumpForm
	74,  // 25: ResData.ResChessAuctionRound.DropInfo:type_name -> ResData.ResDT_AuctionDropInfo
	81,  // 26: ResData.ResChessPreset.PresetDetail:type_name -> ResData.ResDT_ChessPresetInfo
	93,  // 27: ResData.ResChessSettlePhrase.PhraseList:type_name -> ResData.ResDT_SettlePhrase
	98,  // 28: ResData.ResProj8HelpDescItems.Pics:type_name -> ResData.ResProj8HelpDescPics
	102, // 29: ResData.ResChessCardPoolInfo.ChessCardInfos:type_name -> ResData.ResChessCardInfo
	108, // 30: ResData.ResChessDropInfo.DropProbability:type_name -> ResData.ChessSingleDropProbability
	113, // 31: ResData.ResChessPresetFormation.Front:type_name -> ResData.ResDT_ChessPresetFormationInfo
	113, // 32: ResData.ResChessPresetFormation.Back:type_name -> ResData.ResDT_ChessPresetFormationInfo
	113, // 33: ResData.ResChessPresetFormation.Assassin:type_name -> ResData.ResDT_ChessPresetFormationInfo
	115, // 34: ResData.ResChessAILevel.ExceedBattleScoreInfo:type_name -> ResData.ResDT_IgnoreCard
	9,   // 35: ResData.ResProject8ShopInfo.BaseAward:type_name -> ResData.ResDT_RewardItem
	4,   // 36: ResData.ResProject8AwardInfo.AwardLevel:type_name -> ResData.ResProject8AwardInfo.AwardLevelType
	128, // 37: ResData.ResProject8DropPlanInfo.DropGroup:type_name -> ResData.ResDT_DropGroup
	0,   // 38: ResData.ResProject8DropInfo.ItemType:type_name -> ResData.RES_PROJECT8_DROP_ITEM_TYPE
	130, // 39: ResData.ResProject8DropInfo.ConditionGroup:type_name -> ResData.ResDT_DropGroupCondition
	131, // 40: ResData.ResProject8DropInfo.CardPoolParam:type_name -> ResData.ResDT_DropCardPoolParam
	11,  // 41: ResData.ResDT_AwakeInfo.AwakeParam:type_name -> ResData.ResDT_IntParamArrayNode
	135, // 42: ResData.ResSpecialGearAwakeInfo.AwakeInfo:type_name -> ResData.ResDT_AwakeInfo
	8,   // 43: ResData.ResGroup.Cfg:type_name -> ResData.ResDT_Common_KeyValue
	1,   // 44: ResData.RES_RoundFunctionData.RoundFunction:type_name -> ResData.RES_RoundFunction
	5,   // 45: ResData.ResRoundStateFlow.RoundStage:type_name -> ResData.ResRoundStateFlow.RoundStageType
	138, // 46: ResData.ResRoundStateFlow.RoundFunctionDatas:type_name -> ResData.RES_RoundFunctionData
	142, // 47: ResData.ResChessMoveTest.PresetDetail:type_name -> ResData.ResDT_ChessMoveTestInfo
	39,  // 48: ResData.ResDT_LevelCommonInfo.ExpCompensateDetail:type_name -> ResData.ResDT_CompensateInfo
	39,  // 49: ResData.ResDT_LevelCommonInfo.CoinCompensateDetail:type_name -> ResData.ResDT_CompensateInfo
	40,  // 50: ResData.ResDT_LevelCommonInfo.PickRuleInfo:type_name -> ResData.ResDT_PickRuleInfo
	18,  // 51: ResData.ResDT_LevelCommonInfo.UnUseSkillInfo:type_name -> ResData.ResDT_UnUseSkill
	42,  // 52: ResData.ResDT_LevelCommonInfo.TeamRangeRule:type_name -> ResData.ResDT_TeamRangeRule
	6,   // 53: ResData.ResDT_LevelCommonInfo.SettleRule:type_name -> ResData.ResDT_LevelCommonInfo.SettleRuleType
	144, // 54: ResData.ResEntertainmentLevelInfo.LevelCommonInfo:type_name -> ResData.ResDT_LevelCommonInfo
	7,   // 55: ResData.ResPlayConstParam.Type:type_name -> ResData.ResPlayConstParam.KeyType
	147, // 56: ResData.ResMassiveTreasureDataBin.ConditionGroup:type_name -> ResData.ResDT_DropMassiveCondition
	57,  // [57:57] is the sub-list for method output_type
	57,  // [57:57] is the sub-list for method input_type
	57,  // [57:57] is the sub-list for extension type_name
	57,  // [57:57] is the sub-list for extension extendee
	0,   // [0:57] is the sub-list for field type_name
}

func init() { file_os_res_data_legacy_proto_init() }
func file_os_res_data_legacy_proto_init() {
	if File_os_res_data_legacy_proto != nil {
		return
	}
	file_os_res_enum_legacy_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_os_res_data_legacy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_Common_KeyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_RewardItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGuideTipInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_IntParamArrayNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_JumpForm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_PveRewardShowInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_MapBuff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_CostInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_PveReviveInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResLevelCfgInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_UnUseSkill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicAttributeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_SkillDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResSkillCfgInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_SkillDynamicIndicatorActorStateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_SkillFunc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_SkillPassiveCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_ShowBuffType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_SkillMarkLayerEffectName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResSkillMarkCfgInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResSkillPassiveCfgInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResRandomSkillPassiveRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResSkillCombineCfgInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResBuffRmvInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGlobalInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResBattleGlobalTxtInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_ItemSrc_Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_FuncEft_Obj); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResSymbolInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_ConditionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResEvaluateStarInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_CompensateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_PickRuleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResRenderCullingExclude); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_TeamRangeRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResTextData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResRankGradeConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_AllocRuleParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_IncomeAttackRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResSoulAddition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeroJobFeature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResHeroCampBuff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_EnergyState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResHeroJobBuff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResHeroBuff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_RegisterSale_Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_SkinFeature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_SkinVoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResClashAddition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResPropertyValueInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResBattleFloatText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_DigitFloatInterval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDigitFloatTextCfgInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResAiParamConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResSpeedAdjustRangeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResSpeedAdjustConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResBattleRoyaleParamByMMR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResAIReuseParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_SceneSkin_Property); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResSceneSkinInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResActionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResAnimActionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResTeamInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_ChessEffectNum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_ChessIconPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_ChessRelativeQuality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_AuctionDropInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResChessAuctionRound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RessChessAIUpgradeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResChessAuctionItemCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResChessAuctionTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResChessAuctionUnlockCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResChessAuctionDividendCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_ChessPresetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResProj8EffectDegree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResChessPreset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResChessPickCardAutoTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResChessSkinInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResChessSimulate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResChessQualityStarInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResChessCardQualityChance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResChessPhaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResExtraFightHeroInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreakReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreakFinishReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_SettlePhrase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResChessSettlePhrase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResChessRecommendArrangeCfgInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChessArrangeProbabilityRegion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResProj8HelpDescMain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResProj8HelpDescPics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResProj8HelpDescItems); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResProj8HelpOperate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResChessSubProcInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResChessCardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeCardRoundInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeCardRandRewardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResChessRewardBoxInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResChessCardPoolInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResChessMonsterDropInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChessSingleDropProbability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResChessDropInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResChessDropEquipGroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResChessEquipPickInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResChessEquipRefreshCost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_ChessPresetFormationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResChessPresetFormation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_IgnoreCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResChessAILevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResProject8ShopInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResProject8AwardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResProject8LordActionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResProject8BossRoundConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResProject8BossAwardCountCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResProject8PlanCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResProject8BossChooseAwardCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResProject8BossHpAwardCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResProject8GrabAwardCountCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResProject8GrabAwardDropCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResProject8GrabAwardGlobalCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_DropGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResProject8DropPlanInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_DropGroupCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_DropCardPoolParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResProject8DropInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundPopulationDamageFix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResBloodEffectConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_AwakeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResSpecialGearAwakeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RES_RoundFunctionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResRoundStateFlow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResBattleRoundState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGameWatchLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_ChessMoveTestInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResChessMoveTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_LevelCommonInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResEntertainmentLevelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResPlayConstParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDT_DropMassiveCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_os_res_data_legacy_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResMassiveTreasureDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_os_res_data_legacy_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   141,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_os_res_data_legacy_proto_goTypes,
		DependencyIndexes: file_os_res_data_legacy_proto_depIdxs,
		EnumInfos:         file_os_res_data_legacy_proto_enumTypes,
		MessageInfos:      file_os_res_data_legacy_proto_msgTypes,
	}.Build()
	File_os_res_data_legacy_proto = out.File
	file_os_res_data_legacy_proto_rawDesc = nil
	file_os_res_data_legacy_proto_goTypes = nil
	file_os_res_data_legacy_proto_depIdxs = nil
}
