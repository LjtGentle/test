// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.9
// source: os_res_enum_legacy.proto

package resdata

import (
	_ "git.woa.com/bingo/bingo/codegenerator/option"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "osgame/model/osserver/proto/osproto"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RES_ANONYMOUS int32

const (
	RES_ANONYMOUS_RES_FALSE      RES_ANONYMOUS = 0
	RES_ANONYMOUS_RES_TRUE       RES_ANONYMOUS = 1
	RES_ANONYMOUS_RES_NULL       RES_ANONYMOUS = 0
	RES_ANONYMOUS_RES_HAVE       RES_ANONYMOUS = 1
	RES_ANONYMOUS_RES_CHOOSE_NO  RES_ANONYMOUS = 0
	RES_ANONYMOUS_RES_CHOOSE_YES RES_ANONYMOUS = 1
)

// Enum value maps for RES_ANONYMOUS.
var (
	RES_ANONYMOUS_name = map[int32]string{
		0: "RES_FALSE",
		1: "RES_TRUE",
		// Duplicate value: 0: "RES_NULL",
		// Duplicate value: 1: "RES_HAVE",
		// Duplicate value: 0: "RES_CHOOSE_NO",
		// Duplicate value: 1: "RES_CHOOSE_YES",
	}
	RES_ANONYMOUS_value = map[string]int32{
		"RES_FALSE":      0,
		"RES_TRUE":       1,
		"RES_NULL":       0,
		"RES_HAVE":       1,
		"RES_CHOOSE_NO":  0,
		"RES_CHOOSE_YES": 1,
	}
)

func (x RES_ANONYMOUS) Enum() *RES_ANONYMOUS {
	p := new(RES_ANONYMOUS)
	*p = x
	return p
}

func (x RES_ANONYMOUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_ANONYMOUS) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[0].Descriptor()
}

func (RES_ANONYMOUS) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[0]
}

func (x RES_ANONYMOUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_ANONYMOUS.Descriptor instead.
func (RES_ANONYMOUS) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{0}
}

type RES_SETTING_LEVEL int32

const (
	RES_SETTING_LEVEL_RES_SETTING_LEVEL_LOW    RES_SETTING_LEVEL = 0
	RES_SETTING_LEVEL_RES_SETTING_LEVEL_MEDIUM RES_SETTING_LEVEL = 1
	RES_SETTING_LEVEL_RES_SETTING_LEVEL_HIGH   RES_SETTING_LEVEL = 2
	RES_SETTING_LEVEL_RES_SETTING_LEVEL_HD     RES_SETTING_LEVEL = 3
	RES_SETTING_LEVEL_RES_SETTING_LEVEL_HDD    RES_SETTING_LEVEL = 4
)

// Enum value maps for RES_SETTING_LEVEL.
var (
	RES_SETTING_LEVEL_name = map[int32]string{
		0: "RES_SETTING_LEVEL_LOW",
		1: "RES_SETTING_LEVEL_MEDIUM",
		2: "RES_SETTING_LEVEL_HIGH",
		3: "RES_SETTING_LEVEL_HD",
		4: "RES_SETTING_LEVEL_HDD",
	}
	RES_SETTING_LEVEL_value = map[string]int32{
		"RES_SETTING_LEVEL_LOW":    0,
		"RES_SETTING_LEVEL_MEDIUM": 1,
		"RES_SETTING_LEVEL_HIGH":   2,
		"RES_SETTING_LEVEL_HD":     3,
		"RES_SETTING_LEVEL_HDD":    4,
	}
)

func (x RES_SETTING_LEVEL) Enum() *RES_SETTING_LEVEL {
	p := new(RES_SETTING_LEVEL)
	*p = x
	return p
}

func (x RES_SETTING_LEVEL) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_SETTING_LEVEL) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[1].Descriptor()
}

func (RES_SETTING_LEVEL) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[1]
}

func (x RES_SETTING_LEVEL) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_SETTING_LEVEL.Descriptor instead.
func (RES_SETTING_LEVEL) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{1}
}

type RES_SETTING_LEVEL_NEW int32

const (
	RES_SETTING_LEVEL_NEW_RES_SETTING_LEVEL_1 RES_SETTING_LEVEL_NEW = 0
	RES_SETTING_LEVEL_NEW_RES_SETTING_LEVEL_2 RES_SETTING_LEVEL_NEW = 1
	RES_SETTING_LEVEL_NEW_RES_SETTING_LEVEL_3 RES_SETTING_LEVEL_NEW = 2
	RES_SETTING_LEVEL_NEW_RES_SETTING_LEVEL_4 RES_SETTING_LEVEL_NEW = 3
	RES_SETTING_LEVEL_NEW_RES_SETTING_LEVEL_5 RES_SETTING_LEVEL_NEW = 4
)

// Enum value maps for RES_SETTING_LEVEL_NEW.
var (
	RES_SETTING_LEVEL_NEW_name = map[int32]string{
		0: "RES_SETTING_LEVEL_1",
		1: "RES_SETTING_LEVEL_2",
		2: "RES_SETTING_LEVEL_3",
		3: "RES_SETTING_LEVEL_4",
		4: "RES_SETTING_LEVEL_5",
	}
	RES_SETTING_LEVEL_NEW_value = map[string]int32{
		"RES_SETTING_LEVEL_1": 0,
		"RES_SETTING_LEVEL_2": 1,
		"RES_SETTING_LEVEL_3": 2,
		"RES_SETTING_LEVEL_4": 3,
		"RES_SETTING_LEVEL_5": 4,
	}
)

func (x RES_SETTING_LEVEL_NEW) Enum() *RES_SETTING_LEVEL_NEW {
	p := new(RES_SETTING_LEVEL_NEW)
	*p = x
	return p
}

func (x RES_SETTING_LEVEL_NEW) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_SETTING_LEVEL_NEW) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[2].Descriptor()
}

func (RES_SETTING_LEVEL_NEW) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[2]
}

func (x RES_SETTING_LEVEL_NEW) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_SETTING_LEVEL_NEW.Descriptor instead.
func (RES_SETTING_LEVEL_NEW) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{2}
}

type RES_DEVICE_LEVEL int32

const (
	RES_DEVICE_LEVEL_RES_DEVICE_LEVEL_LOW    RES_DEVICE_LEVEL = 0
	RES_DEVICE_LEVEL_RES_DEVICE_LEVEL_MEDIUM RES_DEVICE_LEVEL = 1
	RES_DEVICE_LEVEL_RES_DEVICE_LEVEL_HIGH   RES_DEVICE_LEVEL = 2
	RES_DEVICE_LEVEL_RES_DEVICE_LEVEL_HD     RES_DEVICE_LEVEL = 3
	RES_DEVICE_LEVEL_RES_DEVICE_LEVEL_HDD    RES_DEVICE_LEVEL = 4
)

// Enum value maps for RES_DEVICE_LEVEL.
var (
	RES_DEVICE_LEVEL_name = map[int32]string{
		0: "RES_DEVICE_LEVEL_LOW",
		1: "RES_DEVICE_LEVEL_MEDIUM",
		2: "RES_DEVICE_LEVEL_HIGH",
		3: "RES_DEVICE_LEVEL_HD",
		4: "RES_DEVICE_LEVEL_HDD",
	}
	RES_DEVICE_LEVEL_value = map[string]int32{
		"RES_DEVICE_LEVEL_LOW":    0,
		"RES_DEVICE_LEVEL_MEDIUM": 1,
		"RES_DEVICE_LEVEL_HIGH":   2,
		"RES_DEVICE_LEVEL_HD":     3,
		"RES_DEVICE_LEVEL_HDD":    4,
	}
)

func (x RES_DEVICE_LEVEL) Enum() *RES_DEVICE_LEVEL {
	p := new(RES_DEVICE_LEVEL)
	*p = x
	return p
}

func (x RES_DEVICE_LEVEL) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_DEVICE_LEVEL) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[3].Descriptor()
}

func (RES_DEVICE_LEVEL) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[3]
}

func (x RES_DEVICE_LEVEL) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_DEVICE_LEVEL.Descriptor instead.
func (RES_DEVICE_LEVEL) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{3}
}

type RES_SKIN_QUALITY int32

const (
	RES_SKIN_QUALITY_RES_SKIN_QUALITY_LEGEND RES_SKIN_QUALITY = 0
	RES_SKIN_QUALITY_RES_SKIN_QUALITY_EPIC   RES_SKIN_QUALITY = 1
)

// Enum value maps for RES_SKIN_QUALITY.
var (
	RES_SKIN_QUALITY_name = map[int32]string{
		0: "RES_SKIN_QUALITY_LEGEND",
		1: "RES_SKIN_QUALITY_EPIC",
	}
	RES_SKIN_QUALITY_value = map[string]int32{
		"RES_SKIN_QUALITY_LEGEND": 0,
		"RES_SKIN_QUALITY_EPIC":   1,
	}
)

func (x RES_SKIN_QUALITY) Enum() *RES_SKIN_QUALITY {
	p := new(RES_SKIN_QUALITY)
	*p = x
	return p
}

func (x RES_SKIN_QUALITY) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_SKIN_QUALITY) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[4].Descriptor()
}

func (RES_SKIN_QUALITY) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[4]
}

func (x RES_SKIN_QUALITY) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_SKIN_QUALITY.Descriptor instead.
func (RES_SKIN_QUALITY) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{4}
}

type RES_SPECIAL_TIP_POS int32

const (
	RES_SPECIAL_TIP_POS_RES_SPECIAL_TIP_POS_UP        RES_SPECIAL_TIP_POS = 0
	RES_SPECIAL_TIP_POS_RES_SPECIAL_TIP_POS_DOWN      RES_SPECIAL_TIP_POS = 1
	RES_SPECIAL_TIP_POS_RES_SPECIAL_TIP_POS_LEFT      RES_SPECIAL_TIP_POS = 2
	RES_SPECIAL_TIP_POS_RES_SPECIAL_TIP_POS_RIGHT     RES_SPECIAL_TIP_POS = 3
	RES_SPECIAL_TIP_POS_RES_SPECIAL_TIP_POS_UPLEFT    RES_SPECIAL_TIP_POS = 4
	RES_SPECIAL_TIP_POS_RES_SPECIAL_TIP_POS_UPRIGHT   RES_SPECIAL_TIP_POS = 5
	RES_SPECIAL_TIP_POS_RES_SPECIAL_TIP_POS_DOWNLEFT  RES_SPECIAL_TIP_POS = 6
	RES_SPECIAL_TIP_POS_RES_SPECIAL_TIP_POS_DOWNRIGHT RES_SPECIAL_TIP_POS = 7
	RES_SPECIAL_TIP_POS_RES_SPECIAL_TIP_POS_LAST      RES_SPECIAL_TIP_POS = 8
)

// Enum value maps for RES_SPECIAL_TIP_POS.
var (
	RES_SPECIAL_TIP_POS_name = map[int32]string{
		0: "RES_SPECIAL_TIP_POS_UP",
		1: "RES_SPECIAL_TIP_POS_DOWN",
		2: "RES_SPECIAL_TIP_POS_LEFT",
		3: "RES_SPECIAL_TIP_POS_RIGHT",
		4: "RES_SPECIAL_TIP_POS_UPLEFT",
		5: "RES_SPECIAL_TIP_POS_UPRIGHT",
		6: "RES_SPECIAL_TIP_POS_DOWNLEFT",
		7: "RES_SPECIAL_TIP_POS_DOWNRIGHT",
		8: "RES_SPECIAL_TIP_POS_LAST",
	}
	RES_SPECIAL_TIP_POS_value = map[string]int32{
		"RES_SPECIAL_TIP_POS_UP":        0,
		"RES_SPECIAL_TIP_POS_DOWN":      1,
		"RES_SPECIAL_TIP_POS_LEFT":      2,
		"RES_SPECIAL_TIP_POS_RIGHT":     3,
		"RES_SPECIAL_TIP_POS_UPLEFT":    4,
		"RES_SPECIAL_TIP_POS_UPRIGHT":   5,
		"RES_SPECIAL_TIP_POS_DOWNLEFT":  6,
		"RES_SPECIAL_TIP_POS_DOWNRIGHT": 7,
		"RES_SPECIAL_TIP_POS_LAST":      8,
	}
)

func (x RES_SPECIAL_TIP_POS) Enum() *RES_SPECIAL_TIP_POS {
	p := new(RES_SPECIAL_TIP_POS)
	*p = x
	return p
}

func (x RES_SPECIAL_TIP_POS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_SPECIAL_TIP_POS) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[5].Descriptor()
}

func (RES_SPECIAL_TIP_POS) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[5]
}

func (x RES_SPECIAL_TIP_POS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_SPECIAL_TIP_POS.Descriptor instead.
func (RES_SPECIAL_TIP_POS) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{5}
}

type RES_OPERATOR_TYPE int32

const (
	RES_OPERATOR_TYPE_RES_OPERATOR_NULL     RES_OPERATOR_TYPE = 0
	RES_OPERATOR_TYPE_RES_OPERATOR_PLUS     RES_OPERATOR_TYPE = 1
	RES_OPERATOR_TYPE_RES_OPERATOR_MINUS    RES_OPERATOR_TYPE = 2
	RES_OPERATOR_TYPE_RES_OPERATOR_MULTIPLY RES_OPERATOR_TYPE = 3
	RES_OPERATOR_TYPE_RES_OPERATOR_DIVIDE   RES_OPERATOR_TYPE = 4
	RES_OPERATOR_TYPE_RES_OPERATOR_LAST     RES_OPERATOR_TYPE = 5
)

// Enum value maps for RES_OPERATOR_TYPE.
var (
	RES_OPERATOR_TYPE_name = map[int32]string{
		0: "RES_OPERATOR_NULL",
		1: "RES_OPERATOR_PLUS",
		2: "RES_OPERATOR_MINUS",
		3: "RES_OPERATOR_MULTIPLY",
		4: "RES_OPERATOR_DIVIDE",
		5: "RES_OPERATOR_LAST",
	}
	RES_OPERATOR_TYPE_value = map[string]int32{
		"RES_OPERATOR_NULL":     0,
		"RES_OPERATOR_PLUS":     1,
		"RES_OPERATOR_MINUS":    2,
		"RES_OPERATOR_MULTIPLY": 3,
		"RES_OPERATOR_DIVIDE":   4,
		"RES_OPERATOR_LAST":     5,
	}
)

func (x RES_OPERATOR_TYPE) Enum() *RES_OPERATOR_TYPE {
	p := new(RES_OPERATOR_TYPE)
	*p = x
	return p
}

func (x RES_OPERATOR_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_OPERATOR_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[6].Descriptor()
}

func (RES_OPERATOR_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[6]
}

func (x RES_OPERATOR_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_OPERATOR_TYPE.Descriptor instead.
func (RES_OPERATOR_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{6}
}

type PROJ8_EFFECT_DEGREE_TYPE int32

const (
	PROJ8_EFFECT_DEGREE_TYPE_PROJ8_EFFECT_DEGREE_TYPE_NEW    PROJ8_EFFECT_DEGREE_TYPE = 0
	PROJ8_EFFECT_DEGREE_TYPE_PROJ8_EFFECT_DEGREE_TYPE_GOOD   PROJ8_EFFECT_DEGREE_TYPE = 1
	PROJ8_EFFECT_DEGREE_TYPE_PROJ8_EFFECT_DEGREE_TYPE_BETTER PROJ8_EFFECT_DEGREE_TYPE = 2
	PROJ8_EFFECT_DEGREE_TYPE_PROJ8_EFFECT_DEGREE_TYPE_EXPERT PROJ8_EFFECT_DEGREE_TYPE = 3
	PROJ8_EFFECT_DEGREE_TYPE_PROJ8_EFFECT_DEGREE_TYPE_GOD    PROJ8_EFFECT_DEGREE_TYPE = 4
	PROJ8_EFFECT_DEGREE_TYPE_PROJ8_EFFECT_DEGREE_TYPE_LAST   PROJ8_EFFECT_DEGREE_TYPE = 5
)

// Enum value maps for PROJ8_EFFECT_DEGREE_TYPE.
var (
	PROJ8_EFFECT_DEGREE_TYPE_name = map[int32]string{
		0: "PROJ8_EFFECT_DEGREE_TYPE_NEW",
		1: "PROJ8_EFFECT_DEGREE_TYPE_GOOD",
		2: "PROJ8_EFFECT_DEGREE_TYPE_BETTER",
		3: "PROJ8_EFFECT_DEGREE_TYPE_EXPERT",
		4: "PROJ8_EFFECT_DEGREE_TYPE_GOD",
		5: "PROJ8_EFFECT_DEGREE_TYPE_LAST",
	}
	PROJ8_EFFECT_DEGREE_TYPE_value = map[string]int32{
		"PROJ8_EFFECT_DEGREE_TYPE_NEW":    0,
		"PROJ8_EFFECT_DEGREE_TYPE_GOOD":   1,
		"PROJ8_EFFECT_DEGREE_TYPE_BETTER": 2,
		"PROJ8_EFFECT_DEGREE_TYPE_EXPERT": 3,
		"PROJ8_EFFECT_DEGREE_TYPE_GOD":    4,
		"PROJ8_EFFECT_DEGREE_TYPE_LAST":   5,
	}
)

func (x PROJ8_EFFECT_DEGREE_TYPE) Enum() *PROJ8_EFFECT_DEGREE_TYPE {
	p := new(PROJ8_EFFECT_DEGREE_TYPE)
	*p = x
	return p
}

func (x PROJ8_EFFECT_DEGREE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PROJ8_EFFECT_DEGREE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[7].Descriptor()
}

func (PROJ8_EFFECT_DEGREE_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[7]
}

func (x PROJ8_EFFECT_DEGREE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PROJ8_EFFECT_DEGREE_TYPE.Descriptor instead.
func (PROJ8_EFFECT_DEGREE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{7}
}

type SkillTargetRule int32

const (
	SkillTargetRule_SkillTargetRuleNull                            SkillTargetRule = 0
	SkillTargetRule_SkillTargetRuleNearestEnermy                   SkillTargetRule = 1
	SkillTargetRule_SkillTargetRuleLowerHpEnermy                   SkillTargetRule = 2
	SkillTargetRule_SkillTargetRuleMyself                          SkillTargetRule = 3
	SkillTargetRule_SkillTargetRuleMyDirection                     SkillTargetRule = 4
	SkillTargetRule_SkillTargetRuleLowerHpFriendly                 SkillTargetRule = 5
	SkillTargetRule_SkillTargetRuleLowerHpFriendlyWithoutSelf      SkillTargetRule = 6
	SkillTargetRule_SkillTargetRuleLowerHpValueEnermy              SkillTargetRule = 7
	SkillTargetRule_SkillTargetRuleLowerHpValueFriendly            SkillTargetRule = 8
	SkillTargetRule_SkillTargetRuleLowerHpValueFriendlyWithoutSelf SkillTargetRule = 9
	SkillTargetRule_SkillTargetRuleRandomEnemy                     SkillTargetRule = 10
	SkillTargetRule_SkillTargetRuleCrowdedEnemy                    SkillTargetRule = 11
	SkillTargetRule_SkillTargetRuleCrowdedFriendly                 SkillTargetRule = 12
	SkillTargetRule_SkillTargetRuleFarthestEnemy                   SkillTargetRule = 13
	SkillTargetRule_SkillTargetRuleCurrentEnemy                    SkillTargetRule = 14
	SkillTargetRule_SkillTargetRuleMaxDamageEnemy                  SkillTargetRule = 15
	SkillTargetRule_SkillTargetRuleNearestFriendly                 SkillTargetRule = 16
	SkillTargetRule_SkillTargetRuleHighestHpRateEnemy              SkillTargetRule = 17
	SkillTargetRule_SkillTargetRuleHighestHpValueEnemy             SkillTargetRule = 18
)

// Enum value maps for SkillTargetRule.
var (
	SkillTargetRule_name = map[int32]string{
		0:  "SkillTargetRuleNull",
		1:  "SkillTargetRuleNearestEnermy",
		2:  "SkillTargetRuleLowerHpEnermy",
		3:  "SkillTargetRuleMyself",
		4:  "SkillTargetRuleMyDirection",
		5:  "SkillTargetRuleLowerHpFriendly",
		6:  "SkillTargetRuleLowerHpFriendlyWithoutSelf",
		7:  "SkillTargetRuleLowerHpValueEnermy",
		8:  "SkillTargetRuleLowerHpValueFriendly",
		9:  "SkillTargetRuleLowerHpValueFriendlyWithoutSelf",
		10: "SkillTargetRuleRandomEnemy",
		11: "SkillTargetRuleCrowdedEnemy",
		12: "SkillTargetRuleCrowdedFriendly",
		13: "SkillTargetRuleFarthestEnemy",
		14: "SkillTargetRuleCurrentEnemy",
		15: "SkillTargetRuleMaxDamageEnemy",
		16: "SkillTargetRuleNearestFriendly",
		17: "SkillTargetRuleHighestHpRateEnemy",
		18: "SkillTargetRuleHighestHpValueEnemy",
	}
	SkillTargetRule_value = map[string]int32{
		"SkillTargetRuleNull":                            0,
		"SkillTargetRuleNearestEnermy":                   1,
		"SkillTargetRuleLowerHpEnermy":                   2,
		"SkillTargetRuleMyself":                          3,
		"SkillTargetRuleMyDirection":                     4,
		"SkillTargetRuleLowerHpFriendly":                 5,
		"SkillTargetRuleLowerHpFriendlyWithoutSelf":      6,
		"SkillTargetRuleLowerHpValueEnermy":              7,
		"SkillTargetRuleLowerHpValueFriendly":            8,
		"SkillTargetRuleLowerHpValueFriendlyWithoutSelf": 9,
		"SkillTargetRuleRandomEnemy":                     10,
		"SkillTargetRuleCrowdedEnemy":                    11,
		"SkillTargetRuleCrowdedFriendly":                 12,
		"SkillTargetRuleFarthestEnemy":                   13,
		"SkillTargetRuleCurrentEnemy":                    14,
		"SkillTargetRuleMaxDamageEnemy":                  15,
		"SkillTargetRuleNearestFriendly":                 16,
		"SkillTargetRuleHighestHpRateEnemy":              17,
		"SkillTargetRuleHighestHpValueEnemy":             18,
	}
)

func (x SkillTargetRule) Enum() *SkillTargetRule {
	p := new(SkillTargetRule)
	*p = x
	return p
}

func (x SkillTargetRule) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SkillTargetRule) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[8].Descriptor()
}

func (SkillTargetRule) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[8]
}

func (x SkillTargetRule) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SkillTargetRule.Descriptor instead.
func (SkillTargetRule) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{8}
}

type SkillEffectType int32

const (
	SkillEffectType_SkillEffectType_Default SkillEffectType = 0
	SkillEffectType_Physical                SkillEffectType = 1
	SkillEffectType_Magic                   SkillEffectType = 2
	SkillEffectType_Realy                   SkillEffectType = 3
	SkillEffectType_Control                 SkillEffectType = 4
)

// Enum value maps for SkillEffectType.
var (
	SkillEffectType_name = map[int32]string{
		0: "SkillEffectType_Default",
		1: "Physical",
		2: "Magic",
		3: "Realy",
		4: "Control",
	}
	SkillEffectType_value = map[string]int32{
		"SkillEffectType_Default": 0,
		"Physical":                1,
		"Magic":                   2,
		"Realy":                   3,
		"Control":                 4,
	}
)

func (x SkillEffectType) Enum() *SkillEffectType {
	p := new(SkillEffectType)
	*p = x
	return p
}

func (x SkillEffectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SkillEffectType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[9].Descriptor()
}

func (SkillEffectType) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[9]
}

func (x SkillEffectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SkillEffectType.Descriptor instead.
func (SkillEffectType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{9}
}

type RES_VALUE_TYPE int32

const (
	RES_VALUE_TYPE_TYPE_VALUE    RES_VALUE_TYPE = 0
	RES_VALUE_TYPE_TYPE_PERCENT  RES_VALUE_TYPE = 1
	RES_VALUE_TYPE_TYPE_ABSOLUTE RES_VALUE_TYPE = 2
)

// Enum value maps for RES_VALUE_TYPE.
var (
	RES_VALUE_TYPE_name = map[int32]string{
		0: "TYPE_VALUE",
		1: "TYPE_PERCENT",
		2: "TYPE_ABSOLUTE",
	}
	RES_VALUE_TYPE_value = map[string]int32{
		"TYPE_VALUE":    0,
		"TYPE_PERCENT":  1,
		"TYPE_ABSOLUTE": 2,
	}
)

func (x RES_VALUE_TYPE) Enum() *RES_VALUE_TYPE {
	p := new(RES_VALUE_TYPE)
	*p = x
	return p
}

func (x RES_VALUE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_VALUE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[10].Descriptor()
}

func (RES_VALUE_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[10]
}

func (x RES_VALUE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_VALUE_TYPE.Descriptor instead.
func (RES_VALUE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{10}
}

type CaptainSwitchValueReplaceType int32

const (
	CaptainSwitchValueReplaceType_ValueReplaceType_Null        CaptainSwitchValueReplaceType = 0
	CaptainSwitchValueReplaceType_ValueReplaceType_Hp          CaptainSwitchValueReplaceType = 1
	CaptainSwitchValueReplaceType_ValueReplaceType_Gold        CaptainSwitchValueReplaceType = 2
	CaptainSwitchValueReplaceType_ValueReplaceType_InheritBuff CaptainSwitchValueReplaceType = 3
)

// Enum value maps for CaptainSwitchValueReplaceType.
var (
	CaptainSwitchValueReplaceType_name = map[int32]string{
		0: "ValueReplaceType_Null",
		1: "ValueReplaceType_Hp",
		2: "ValueReplaceType_Gold",
		3: "ValueReplaceType_InheritBuff",
	}
	CaptainSwitchValueReplaceType_value = map[string]int32{
		"ValueReplaceType_Null":        0,
		"ValueReplaceType_Hp":          1,
		"ValueReplaceType_Gold":        2,
		"ValueReplaceType_InheritBuff": 3,
	}
)

func (x CaptainSwitchValueReplaceType) Enum() *CaptainSwitchValueReplaceType {
	p := new(CaptainSwitchValueReplaceType)
	*p = x
	return p
}

func (x CaptainSwitchValueReplaceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CaptainSwitchValueReplaceType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[11].Descriptor()
}

func (CaptainSwitchValueReplaceType) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[11]
}

func (x CaptainSwitchValueReplaceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CaptainSwitchValueReplaceType.Descriptor instead.
func (CaptainSwitchValueReplaceType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{11}
}

type PassiveEventType int32

const (
	PassiveEventType_PassiveEventType_Default                   PassiveEventType = 0
	PassiveEventType_TimePassiveEvent                           PassiveEventType = 1
	PassiveEventType_RandomPassiveEvent                         PassiveEventType = 2
	PassiveEventType_EffectPassiveEvent                         PassiveEventType = 3
	PassiveEventType_LifeTimePassiveEvent                       PassiveEventType = 4
	PassiveEventType_LifeRandomPassiveEvent                     PassiveEventType = 5
	PassiveEventType_DeadHurtPassiveEvent                       PassiveEventType = 6
	PassiveEventType_PermanentEffectPassiveEvent                PassiveEventType = 7
	PassiveEventType_DistancePassiveEvent                       PassiveEventType = 8
	PassiveEventType_AtkSpeedChangePassiveEvent                 PassiveEventType = 9
	PassiveEventType_DisFromActorTOMonsterPassiveEvent          PassiveEventType = 10
	PassiveEventType_SelectTargetInRequiredDistancePassiveEvent PassiveEventType = 11
	PassiveEventType_BeAttackHitPassiveEvent                    PassiveEventType = 12
	PassiveEventType_OutOfEnermySightPassiveEvent               PassiveEventType = 13
	PassiveEventType_NoMovementPassiveEvent                     PassiveEventType = 14
	PassiveEventType_EnergyRatioPassiveEvent                    PassiveEventType = 15
	PassiveEventType_ContinuousDamagePassiveEvent               PassiveEventType = 16
	PassiveEventType_ConditionSwitchPassiveEvent                PassiveEventType = 17
	PassiveEventType_RecordTargetPassiveEvent                   PassiveEventType = 18
	PassiveEventType_HpRatioPassiveEvent                        PassiveEventType = 19
	PassiveEventType_AddBuffToOtherPassiveEvent                 PassiveEventType = 20
	PassiveEventType_ChargeValueRatioPassiveEvent               PassiveEventType = 21
	PassiveEventType_CompensateGoldCoinInBattlePassiveEvent     PassiveEventType = 22
	PassiveEventType_InRiverPassiveEvent                        PassiveEventType = 23
	PassiveEventType_BeTrainedPassiveEvent                      PassiveEventType = 24
	PassiveEventType_MountHpChangeEvent                         PassiveEventType = 25
	PassiveEventType_TakeDamagePassiveEvent                     PassiveEventType = 26
	PassiveEventType_BeforeUseSkillPassiveEvent                 PassiveEventType = 27
	PassiveEventType_BeforeRealTakeDamageEvent                  PassiveEventType = 28
	PassiveEventType_SkillCDEvent                               PassiveEventType = 29
	PassiveEventType_ValPropertyChangePassiveEvent              PassiveEventType = 30
	PassiveEventType_ActorDeadPassiveEvent                      PassiveEventType = 31
	PassiveEventType_HpChangePassiveEvent                       PassiveEventType = 32
	PassiveEventType_NormalAttackRecoverMpEvent                 PassiveEventType = 33
	PassiveEventType_DamageOrbPassiveEvent                      PassiveEventType = 34
	PassiveEventType_HurtOrbPassiveEvent                        PassiveEventType = 35
	PassiveEventType_DodgeBasicAttackEvent                      PassiveEventType = 36
	PassiveEventType_HurtOrbHPPassiveEvent                      PassiveEventType = 37
	PassiveEventType_HurtOrbRandomPassiveEvent                  PassiveEventType = 38
	PassiveEventType_HeroPostionEmbattleChangePassiveEvent      PassiveEventType = 39
	PassiveEventType_ActorGridChangePassiveEvent                PassiveEventType = 40
)

// Enum value maps for PassiveEventType.
var (
	PassiveEventType_name = map[int32]string{
		0:  "PassiveEventType_Default",
		1:  "TimePassiveEvent",
		2:  "RandomPassiveEvent",
		3:  "EffectPassiveEvent",
		4:  "LifeTimePassiveEvent",
		5:  "LifeRandomPassiveEvent",
		6:  "DeadHurtPassiveEvent",
		7:  "PermanentEffectPassiveEvent",
		8:  "DistancePassiveEvent",
		9:  "AtkSpeedChangePassiveEvent",
		10: "DisFromActorTOMonsterPassiveEvent",
		11: "SelectTargetInRequiredDistancePassiveEvent",
		12: "BeAttackHitPassiveEvent",
		13: "OutOfEnermySightPassiveEvent",
		14: "NoMovementPassiveEvent",
		15: "EnergyRatioPassiveEvent",
		16: "ContinuousDamagePassiveEvent",
		17: "ConditionSwitchPassiveEvent",
		18: "RecordTargetPassiveEvent",
		19: "HpRatioPassiveEvent",
		20: "AddBuffToOtherPassiveEvent",
		21: "ChargeValueRatioPassiveEvent",
		22: "CompensateGoldCoinInBattlePassiveEvent",
		23: "InRiverPassiveEvent",
		24: "BeTrainedPassiveEvent",
		25: "MountHpChangeEvent",
		26: "TakeDamagePassiveEvent",
		27: "BeforeUseSkillPassiveEvent",
		28: "BeforeRealTakeDamageEvent",
		29: "SkillCDEvent",
		30: "ValPropertyChangePassiveEvent",
		31: "ActorDeadPassiveEvent",
		32: "HpChangePassiveEvent",
		33: "NormalAttackRecoverMpEvent",
		34: "DamageOrbPassiveEvent",
		35: "HurtOrbPassiveEvent",
		36: "DodgeBasicAttackEvent",
		37: "HurtOrbHPPassiveEvent",
		38: "HurtOrbRandomPassiveEvent",
		39: "HeroPostionEmbattleChangePassiveEvent",
		40: "ActorGridChangePassiveEvent",
	}
	PassiveEventType_value = map[string]int32{
		"PassiveEventType_Default":                   0,
		"TimePassiveEvent":                           1,
		"RandomPassiveEvent":                         2,
		"EffectPassiveEvent":                         3,
		"LifeTimePassiveEvent":                       4,
		"LifeRandomPassiveEvent":                     5,
		"DeadHurtPassiveEvent":                       6,
		"PermanentEffectPassiveEvent":                7,
		"DistancePassiveEvent":                       8,
		"AtkSpeedChangePassiveEvent":                 9,
		"DisFromActorTOMonsterPassiveEvent":          10,
		"SelectTargetInRequiredDistancePassiveEvent": 11,
		"BeAttackHitPassiveEvent":                    12,
		"OutOfEnermySightPassiveEvent":               13,
		"NoMovementPassiveEvent":                     14,
		"EnergyRatioPassiveEvent":                    15,
		"ContinuousDamagePassiveEvent":               16,
		"ConditionSwitchPassiveEvent":                17,
		"RecordTargetPassiveEvent":                   18,
		"HpRatioPassiveEvent":                        19,
		"AddBuffToOtherPassiveEvent":                 20,
		"ChargeValueRatioPassiveEvent":               21,
		"CompensateGoldCoinInBattlePassiveEvent":     22,
		"InRiverPassiveEvent":                        23,
		"BeTrainedPassiveEvent":                      24,
		"MountHpChangeEvent":                         25,
		"TakeDamagePassiveEvent":                     26,
		"BeforeUseSkillPassiveEvent":                 27,
		"BeforeRealTakeDamageEvent":                  28,
		"SkillCDEvent":                               29,
		"ValPropertyChangePassiveEvent":              30,
		"ActorDeadPassiveEvent":                      31,
		"HpChangePassiveEvent":                       32,
		"NormalAttackRecoverMpEvent":                 33,
		"DamageOrbPassiveEvent":                      34,
		"HurtOrbPassiveEvent":                        35,
		"DodgeBasicAttackEvent":                      36,
		"HurtOrbHPPassiveEvent":                      37,
		"HurtOrbRandomPassiveEvent":                  38,
		"HeroPostionEmbattleChangePassiveEvent":      39,
		"ActorGridChangePassiveEvent":                40,
	}
)

func (x PassiveEventType) Enum() *PassiveEventType {
	p := new(PassiveEventType)
	*p = x
	return p
}

func (x PassiveEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PassiveEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[12].Descriptor()
}

func (PassiveEventType) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[12]
}

func (x PassiveEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PassiveEventType.Descriptor instead.
func (PassiveEventType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{12}
}

type PassiveConditionType int32

const (
	PassiveConditionType_PassiveConditionType_Default             PassiveConditionType = 0
	PassiveConditionType_NoDamagePassiveCondition                 PassiveConditionType = 1
	PassiveConditionType_DamagePassiveCondition                   PassiveConditionType = 2
	PassiveConditionType_BeKilledPassiveCondition                 PassiveConditionType = 3
	PassiveConditionType_KilledPassiveCondition                   PassiveConditionType = 4
	PassiveConditionType_HpPassiveCondition                       PassiveConditionType = 5
	PassiveConditionType_ExitBattlePassiveCondition               PassiveConditionType = 6
	PassiveConditionType_AssistPassiveCondition                   PassiveConditionType = 7
	PassiveConditionType_FightStartCondition                      PassiveConditionType = 8
	PassiveConditionType_ActorReviveCondition                     PassiveConditionType = 9
	PassiveConditionType_ActorCritCondition                       PassiveConditionType = 10
	PassiveConditionType_ActorUpgradeCondition                    PassiveConditionType = 11
	PassiveConditionType_UseSkillCondition                        PassiveConditionType = 12
	PassiveConditionType_ImmuneDeadHurtCondition                  PassiveConditionType = 13
	PassiveConditionType_LimitMoveCondition                       PassiveConditionType = 14
	PassiveConditionType_EnterBattlePassiveCondition              PassiveConditionType = 15
	PassiveConditionType_RemoveBuffPassiveCondition               PassiveConditionType = 16
	PassiveConditionType_ActorInGrassCondition                    PassiveConditionType = 17
	PassiveConditionType_ExposeCondition                          PassiveConditionType = 18
	PassiveConditionType_EpPassiveCondition                       PassiveConditionType = 19
	PassiveConditionType_HurtRangePassiveCondition                PassiveConditionType = 20
	PassiveConditionType_NearObstaclePassiveCondition             PassiveConditionType = 21
	PassiveConditionType_RenewalPassiveCondition                  PassiveConditionType = 22
	PassiveConditionType_ActorAlivePassiveCondition               PassiveConditionType = 23
	PassiveConditionType_HoldBuffPassiveCondition                 PassiveConditionType = 24
	PassiveConditionType_BehaviModeSwitchCondition                PassiveConditionType = 25
	PassiveConditionType_MonsterLifeTimeOverCondition             PassiveConditionType = 26
	PassiveConditionType_ActorDeadCondition                       PassiveConditionType = 27
	PassiveConditionType_SkillLevelUpCondition                    PassiveConditionType = 28
	PassiveConditionType_AddBuffPassiveCondition                  PassiveConditionType = 29
	PassiveConditionType_CaptainSwitchPassiveCondition            PassiveConditionType = 30
	PassiveConditionType_AbnormalMoveCondition                    PassiveConditionType = 31
	PassiveConditionType_ProtectChangeCondition                   PassiveConditionType = 32
	PassiveConditionType_ActorInRiverCondition                    PassiveConditionType = 33
	PassiveConditionType_HpCrossScopePassiveCondition             PassiveConditionType = 34
	PassiveConditionType_Project8LevelStateChangeCondition        PassiveConditionType = 35
	PassiveConditionType_SkillHitTriggerCondition                 PassiveConditionType = 36
	PassiveConditionType_Project8FightingCondition                PassiveConditionType = 37
	PassiveConditionType_TakeDamagePassiveCondition               PassiveConditionType = 38
	PassiveConditionType_AccumulateDamageCondition                PassiveConditionType = 40
	PassiveConditionType_BeAttackedPassiveCondition               PassiveConditionType = 41
	PassiveConditionType_NewDamagePassiveCondition                PassiveConditionType = 42
	PassiveConditionType_PositonChangePassiveCondition            PassiveConditionType = 43
	PassiveConditionType_AttackTargetChangePassiveCondition       PassiveConditionType = 44
	PassiveConditionType_BattleStatePhaseTypeRacePassiveCondition PassiveConditionType = 45
)

// Enum value maps for PassiveConditionType.
var (
	PassiveConditionType_name = map[int32]string{
		0:  "PassiveConditionType_Default",
		1:  "NoDamagePassiveCondition",
		2:  "DamagePassiveCondition",
		3:  "BeKilledPassiveCondition",
		4:  "KilledPassiveCondition",
		5:  "HpPassiveCondition",
		6:  "ExitBattlePassiveCondition",
		7:  "AssistPassiveCondition",
		8:  "FightStartCondition",
		9:  "ActorReviveCondition",
		10: "ActorCritCondition",
		11: "ActorUpgradeCondition",
		12: "UseSkillCondition",
		13: "ImmuneDeadHurtCondition",
		14: "LimitMoveCondition",
		15: "EnterBattlePassiveCondition",
		16: "RemoveBuffPassiveCondition",
		17: "ActorInGrassCondition",
		18: "ExposeCondition",
		19: "EpPassiveCondition",
		20: "HurtRangePassiveCondition",
		21: "NearObstaclePassiveCondition",
		22: "RenewalPassiveCondition",
		23: "ActorAlivePassiveCondition",
		24: "HoldBuffPassiveCondition",
		25: "BehaviModeSwitchCondition",
		26: "MonsterLifeTimeOverCondition",
		27: "ActorDeadCondition",
		28: "SkillLevelUpCondition",
		29: "AddBuffPassiveCondition",
		30: "CaptainSwitchPassiveCondition",
		31: "AbnormalMoveCondition",
		32: "ProtectChangeCondition",
		33: "ActorInRiverCondition",
		34: "HpCrossScopePassiveCondition",
		35: "Project8LevelStateChangeCondition",
		36: "SkillHitTriggerCondition",
		37: "Project8FightingCondition",
		38: "TakeDamagePassiveCondition",
		40: "AccumulateDamageCondition",
		41: "BeAttackedPassiveCondition",
		42: "NewDamagePassiveCondition",
		43: "PositonChangePassiveCondition",
		44: "AttackTargetChangePassiveCondition",
		45: "BattleStatePhaseTypeRacePassiveCondition",
	}
	PassiveConditionType_value = map[string]int32{
		"PassiveConditionType_Default":             0,
		"NoDamagePassiveCondition":                 1,
		"DamagePassiveCondition":                   2,
		"BeKilledPassiveCondition":                 3,
		"KilledPassiveCondition":                   4,
		"HpPassiveCondition":                       5,
		"ExitBattlePassiveCondition":               6,
		"AssistPassiveCondition":                   7,
		"FightStartCondition":                      8,
		"ActorReviveCondition":                     9,
		"ActorCritCondition":                       10,
		"ActorUpgradeCondition":                    11,
		"UseSkillCondition":                        12,
		"ImmuneDeadHurtCondition":                  13,
		"LimitMoveCondition":                       14,
		"EnterBattlePassiveCondition":              15,
		"RemoveBuffPassiveCondition":               16,
		"ActorInGrassCondition":                    17,
		"ExposeCondition":                          18,
		"EpPassiveCondition":                       19,
		"HurtRangePassiveCondition":                20,
		"NearObstaclePassiveCondition":             21,
		"RenewalPassiveCondition":                  22,
		"ActorAlivePassiveCondition":               23,
		"HoldBuffPassiveCondition":                 24,
		"BehaviModeSwitchCondition":                25,
		"MonsterLifeTimeOverCondition":             26,
		"ActorDeadCondition":                       27,
		"SkillLevelUpCondition":                    28,
		"AddBuffPassiveCondition":                  29,
		"CaptainSwitchPassiveCondition":            30,
		"AbnormalMoveCondition":                    31,
		"ProtectChangeCondition":                   32,
		"ActorInRiverCondition":                    33,
		"HpCrossScopePassiveCondition":             34,
		"Project8LevelStateChangeCondition":        35,
		"SkillHitTriggerCondition":                 36,
		"Project8FightingCondition":                37,
		"TakeDamagePassiveCondition":               38,
		"AccumulateDamageCondition":                40,
		"BeAttackedPassiveCondition":               41,
		"NewDamagePassiveCondition":                42,
		"PositonChangePassiveCondition":            43,
		"AttackTargetChangePassiveCondition":       44,
		"BattleStatePhaseTypeRacePassiveCondition": 45,
	}
)

func (x PassiveConditionType) Enum() *PassiveConditionType {
	p := new(PassiveConditionType)
	*p = x
	return p
}

func (x PassiveConditionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PassiveConditionType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[13].Descriptor()
}

func (PassiveConditionType) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[13]
}

func (x PassiveConditionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PassiveConditionType.Descriptor instead.
func (PassiveConditionType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{13}
}

type ResSkillFuncTypeAddHPCombineEffectType int32

const (
	ResSkillFuncTypeAddHPCombineEffectType_ResSkillFuncTypeAddHPCombineEffectType_Default  ResSkillFuncTypeAddHPCombineEffectType = 0
	ResSkillFuncTypeAddHPCombineEffectType_SKILL_FUNCTYPEADDHP_EFFECT_MAXHP_PERCENTAGE     ResSkillFuncTypeAddHPCombineEffectType = 1
	ResSkillFuncTypeAddHPCombineEffectType_SKILL_FUNCTYPEADDHP_EFFECT_LOSTHP_PERCENTAGE    ResSkillFuncTypeAddHPCombineEffectType = 2
	ResSkillFuncTypeAddHPCombineEffectType_SKILL_FUNCTYPEADDHP_EFFECT_CURRENTHP_PERCENTAGE ResSkillFuncTypeAddHPCombineEffectType = 3
	ResSkillFuncTypeAddHPCombineEffectType_SKILL_FUNCTYPEADDHP_EFFECT_MAXHP_MILLION        ResSkillFuncTypeAddHPCombineEffectType = 6
)

// Enum value maps for ResSkillFuncTypeAddHPCombineEffectType.
var (
	ResSkillFuncTypeAddHPCombineEffectType_name = map[int32]string{
		0: "ResSkillFuncTypeAddHPCombineEffectType_Default",
		1: "SKILL_FUNCTYPEADDHP_EFFECT_MAXHP_PERCENTAGE",
		2: "SKILL_FUNCTYPEADDHP_EFFECT_LOSTHP_PERCENTAGE",
		3: "SKILL_FUNCTYPEADDHP_EFFECT_CURRENTHP_PERCENTAGE",
		6: "SKILL_FUNCTYPEADDHP_EFFECT_MAXHP_MILLION",
	}
	ResSkillFuncTypeAddHPCombineEffectType_value = map[string]int32{
		"ResSkillFuncTypeAddHPCombineEffectType_Default":  0,
		"SKILL_FUNCTYPEADDHP_EFFECT_MAXHP_PERCENTAGE":     1,
		"SKILL_FUNCTYPEADDHP_EFFECT_LOSTHP_PERCENTAGE":    2,
		"SKILL_FUNCTYPEADDHP_EFFECT_CURRENTHP_PERCENTAGE": 3,
		"SKILL_FUNCTYPEADDHP_EFFECT_MAXHP_MILLION":        6,
	}
)

func (x ResSkillFuncTypeAddHPCombineEffectType) Enum() *ResSkillFuncTypeAddHPCombineEffectType {
	p := new(ResSkillFuncTypeAddHPCombineEffectType)
	*p = x
	return p
}

func (x ResSkillFuncTypeAddHPCombineEffectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResSkillFuncTypeAddHPCombineEffectType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[14].Descriptor()
}

func (ResSkillFuncTypeAddHPCombineEffectType) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[14]
}

func (x ResSkillFuncTypeAddHPCombineEffectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResSkillFuncTypeAddHPCombineEffectType.Descriptor instead.
func (ResSkillFuncTypeAddHPCombineEffectType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{14}
}

type ResSkillCombineControlEffectType int32

const (
	ResSkillCombineControlEffectType_SKILL_COMBINE_CONTROLTYPE_NONE ResSkillCombineControlEffectType = 0
	ResSkillCombineControlEffectType_SKILL_COMBINE_CONTROLTYPE_HARD ResSkillCombineControlEffectType = 1
	ResSkillCombineControlEffectType_SKILL_COMBINE_CONTROLTYPE_SOFT ResSkillCombineControlEffectType = 2
)

// Enum value maps for ResSkillCombineControlEffectType.
var (
	ResSkillCombineControlEffectType_name = map[int32]string{
		0: "SKILL_COMBINE_CONTROLTYPE_NONE",
		1: "SKILL_COMBINE_CONTROLTYPE_HARD",
		2: "SKILL_COMBINE_CONTROLTYPE_SOFT",
	}
	ResSkillCombineControlEffectType_value = map[string]int32{
		"SKILL_COMBINE_CONTROLTYPE_NONE": 0,
		"SKILL_COMBINE_CONTROLTYPE_HARD": 1,
		"SKILL_COMBINE_CONTROLTYPE_SOFT": 2,
	}
)

func (x ResSkillCombineControlEffectType) Enum() *ResSkillCombineControlEffectType {
	p := new(ResSkillCombineControlEffectType)
	*p = x
	return p
}

func (x ResSkillCombineControlEffectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResSkillCombineControlEffectType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[15].Descriptor()
}

func (ResSkillCombineControlEffectType) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[15]
}

func (x ResSkillCombineControlEffectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResSkillCombineControlEffectType.Descriptor instead.
func (ResSkillCombineControlEffectType) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{15}
}

type RES_SKILLFUNC_OVERLAY_TYPE int32

const (
	RES_SKILLFUNC_OVERLAY_TYPE_RES_SKILLFUNC_OVERLAY_TYPE_Default RES_SKILLFUNC_OVERLAY_TYPE = 0
	RES_SKILLFUNC_OVERLAY_TYPE_RES_SKILLFUNC_OVERLAY_CAMP         RES_SKILLFUNC_OVERLAY_TYPE = 1
	RES_SKILLFUNC_OVERLAY_TYPE_RES_SKILLFUNC_OVERLAY_PERSON       RES_SKILLFUNC_OVERLAY_TYPE = 2
)

// Enum value maps for RES_SKILLFUNC_OVERLAY_TYPE.
var (
	RES_SKILLFUNC_OVERLAY_TYPE_name = map[int32]string{
		0: "RES_SKILLFUNC_OVERLAY_TYPE_Default",
		1: "RES_SKILLFUNC_OVERLAY_CAMP",
		2: "RES_SKILLFUNC_OVERLAY_PERSON",
	}
	RES_SKILLFUNC_OVERLAY_TYPE_value = map[string]int32{
		"RES_SKILLFUNC_OVERLAY_TYPE_Default": 0,
		"RES_SKILLFUNC_OVERLAY_CAMP":         1,
		"RES_SKILLFUNC_OVERLAY_PERSON":       2,
	}
)

func (x RES_SKILLFUNC_OVERLAY_TYPE) Enum() *RES_SKILLFUNC_OVERLAY_TYPE {
	p := new(RES_SKILLFUNC_OVERLAY_TYPE)
	*p = x
	return p
}

func (x RES_SKILLFUNC_OVERLAY_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_SKILLFUNC_OVERLAY_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[16].Descriptor()
}

func (RES_SKILLFUNC_OVERLAY_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[16]
}

func (x RES_SKILLFUNC_OVERLAY_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_SKILLFUNC_OVERLAY_TYPE.Descriptor instead.
func (RES_SKILLFUNC_OVERLAY_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{16}
}

type RES_SKILLFUNC_OVERLAY_RULE int32

const (
	RES_SKILLFUNC_OVERLAY_RULE_RES_SKILLFUNC_OVERLAY_RULE_Default   RES_SKILLFUNC_OVERLAY_RULE = 0
	RES_SKILLFUNC_OVERLAY_RULE_RES_SKILLFUNC_OVERLAY_FORBID         RES_SKILLFUNC_OVERLAY_RULE = 1
	RES_SKILLFUNC_OVERLAY_RULE_RES_SKILLFUNC_OVERLAY_CLEAR          RES_SKILLFUNC_OVERLAY_RULE = 2
	RES_SKILLFUNC_OVERLAY_RULE_RES_SKILLFUNC_OVERLAY_REPLACE        RES_SKILLFUNC_OVERLAY_RULE = 3
	RES_SKILLFUNC_OVERLAY_RULE_RES_SKILLFUNC_OVERLAY_UPDATE         RES_SKILLFUNC_OVERLAY_RULE = 4
	RES_SKILLFUNC_OVERLAY_RULE_RES_SKILLFUNC_OVERLAY_FADE           RES_SKILLFUNC_OVERLAY_RULE = 5
	RES_SKILLFUNC_OVERLAY_RULE_RES_SKILLFUNC_OVERLAY_EXTEND         RES_SKILLFUNC_OVERLAY_RULE = 6
	RES_SKILLFUNC_OVERLAY_RULE_RES_SKILLFUNC_OVERLAY_DEVAL          RES_SKILLFUNC_OVERLAY_RULE = 7
	RES_SKILLFUNC_OVERLAY_RULE_RES_SKILLFUNC_OVERLAY_FORBID_NEWBUFF RES_SKILLFUNC_OVERLAY_RULE = 8
	RES_SKILLFUNC_OVERLAY_RULE_RES_SKILLFUNC_OVERLAY_INDEPENDENT    RES_SKILLFUNC_OVERLAY_RULE = 9
)

// Enum value maps for RES_SKILLFUNC_OVERLAY_RULE.
var (
	RES_SKILLFUNC_OVERLAY_RULE_name = map[int32]string{
		0: "RES_SKILLFUNC_OVERLAY_RULE_Default",
		1: "RES_SKILLFUNC_OVERLAY_FORBID",
		2: "RES_SKILLFUNC_OVERLAY_CLEAR",
		3: "RES_SKILLFUNC_OVERLAY_REPLACE",
		4: "RES_SKILLFUNC_OVERLAY_UPDATE",
		5: "RES_SKILLFUNC_OVERLAY_FADE",
		6: "RES_SKILLFUNC_OVERLAY_EXTEND",
		7: "RES_SKILLFUNC_OVERLAY_DEVAL",
		8: "RES_SKILLFUNC_OVERLAY_FORBID_NEWBUFF",
		9: "RES_SKILLFUNC_OVERLAY_INDEPENDENT",
	}
	RES_SKILLFUNC_OVERLAY_RULE_value = map[string]int32{
		"RES_SKILLFUNC_OVERLAY_RULE_Default":   0,
		"RES_SKILLFUNC_OVERLAY_FORBID":         1,
		"RES_SKILLFUNC_OVERLAY_CLEAR":          2,
		"RES_SKILLFUNC_OVERLAY_REPLACE":        3,
		"RES_SKILLFUNC_OVERLAY_UPDATE":         4,
		"RES_SKILLFUNC_OVERLAY_FADE":           5,
		"RES_SKILLFUNC_OVERLAY_EXTEND":         6,
		"RES_SKILLFUNC_OVERLAY_DEVAL":          7,
		"RES_SKILLFUNC_OVERLAY_FORBID_NEWBUFF": 8,
		"RES_SKILLFUNC_OVERLAY_INDEPENDENT":    9,
	}
)

func (x RES_SKILLFUNC_OVERLAY_RULE) Enum() *RES_SKILLFUNC_OVERLAY_RULE {
	p := new(RES_SKILLFUNC_OVERLAY_RULE)
	*p = x
	return p
}

func (x RES_SKILLFUNC_OVERLAY_RULE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_SKILLFUNC_OVERLAY_RULE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[17].Descriptor()
}

func (RES_SKILLFUNC_OVERLAY_RULE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[17]
}

func (x RES_SKILLFUNC_OVERLAY_RULE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_SKILLFUNC_OVERLAY_RULE.Descriptor instead.
func (RES_SKILLFUNC_OVERLAY_RULE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{17}
}

type RES_SKILLFUNC_CLEAR_RULE int32

const (
	RES_SKILLFUNC_CLEAR_RULE_RES_SKILLFUNC_CLEAR_DEFAULT            RES_SKILLFUNC_CLEAR_RULE = 0
	RES_SKILLFUNC_CLEAR_RULE_RES_SKILLFUNC_CLEAR_DAMAGE             RES_SKILLFUNC_CLEAR_RULE = 1
	RES_SKILLFUNC_CLEAR_RULE_RES_SKILLFUNC_CLEAR_DEAD               RES_SKILLFUNC_CLEAR_RULE = 2
	RES_SKILLFUNC_CLEAR_RULE_RES_SKILLFUNC_CLEAR_SPECIAL            RES_SKILLFUNC_CLEAR_RULE = 3
	RES_SKILLFUNC_CLEAR_RULE_RES_SKILLFUNC_CLEAR_EFFECT             RES_SKILLFUNC_CLEAR_RULE = 4
	RES_SKILLFUNC_CLEAR_RULE_RES_SKILLFUNC_CLEAR_NOTIMMEDIATEREVIVE RES_SKILLFUNC_CLEAR_RULE = 5
)

// Enum value maps for RES_SKILLFUNC_CLEAR_RULE.
var (
	RES_SKILLFUNC_CLEAR_RULE_name = map[int32]string{
		0: "RES_SKILLFUNC_CLEAR_DEFAULT",
		1: "RES_SKILLFUNC_CLEAR_DAMAGE",
		2: "RES_SKILLFUNC_CLEAR_DEAD",
		3: "RES_SKILLFUNC_CLEAR_SPECIAL",
		4: "RES_SKILLFUNC_CLEAR_EFFECT",
		5: "RES_SKILLFUNC_CLEAR_NOTIMMEDIATEREVIVE",
	}
	RES_SKILLFUNC_CLEAR_RULE_value = map[string]int32{
		"RES_SKILLFUNC_CLEAR_DEFAULT":            0,
		"RES_SKILLFUNC_CLEAR_DAMAGE":             1,
		"RES_SKILLFUNC_CLEAR_DEAD":               2,
		"RES_SKILLFUNC_CLEAR_SPECIAL":            3,
		"RES_SKILLFUNC_CLEAR_EFFECT":             4,
		"RES_SKILLFUNC_CLEAR_NOTIMMEDIATEREVIVE": 5,
	}
)

func (x RES_SKILLFUNC_CLEAR_RULE) Enum() *RES_SKILLFUNC_CLEAR_RULE {
	p := new(RES_SKILLFUNC_CLEAR_RULE)
	*p = x
	return p
}

func (x RES_SKILLFUNC_CLEAR_RULE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_SKILLFUNC_CLEAR_RULE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[18].Descriptor()
}

func (RES_SKILLFUNC_CLEAR_RULE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[18]
}

func (x RES_SKILLFUNC_CLEAR_RULE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_SKILLFUNC_CLEAR_RULE.Descriptor instead.
func (RES_SKILLFUNC_CLEAR_RULE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{18}
}

type RES_SKILLFUNC_PROTECT_TYPE int32

const (
	RES_SKILLFUNC_PROTECT_TYPE_RES_SKILLFUNC_PROTECT_TYPE_Default                 RES_SKILLFUNC_PROTECT_TYPE = 0
	RES_SKILLFUNC_PROTECT_TYPE_RES_SKILLFUNC_PROTECT_PHYSHURT                     RES_SKILLFUNC_PROTECT_TYPE = 1
	RES_SKILLFUNC_PROTECT_TYPE_RES_SKILLFUNC_PROTECT_MAGICHURT                    RES_SKILLFUNC_PROTECT_TYPE = 2
	RES_SKILLFUNC_PROTECT_TYPE_RES_SKILLFUNC_PROTECT_ALL                          RES_SKILLFUNC_PROTECT_TYPE = 3
	RES_SKILLFUNC_PROTECT_TYPE_RES_SKILLFUNC_PROTECT_ALL_INCLUDE_REALHURT         RES_SKILLFUNC_PROTECT_TYPE = 4
	RES_SKILLFUNC_PROTECT_TYPE_RES_SKILLFUNC_PROTECT_CONVERT                      RES_SKILLFUNC_PROTECT_TYPE = 5
	RES_SKILLFUNC_PROTECT_TYPE_RES_SKILLFUNC_PROTECT_EFFECT                       RES_SKILLFUNC_PROTECT_TYPE = 6
	RES_SKILLFUNC_PROTECT_TYPE_RES_SKILLFUNC_PROTECT_PROPERTY                     RES_SKILLFUNC_PROTECT_TYPE = 7
	RES_SKILLFUNC_PROTECT_TYPE_RES_SKILLFUNC_PROTECT_ENERGY                       RES_SKILLFUNC_PROTECT_TYPE = 8
	RES_SKILLFUNC_PROTECT_TYPE_RES_SKILLFUNC_PROTECT_CHARGE                       RES_SKILLFUNC_PROTECT_TYPE = 9
	RES_SKILLFUNC_PROTECT_TYPE_RES_SKILLFUNC_PROTECT_OVER_FLOW_HEMOPHAGIA_CONVERT RES_SKILLFUNC_PROTECT_TYPE = 10
)

// Enum value maps for RES_SKILLFUNC_PROTECT_TYPE.
var (
	RES_SKILLFUNC_PROTECT_TYPE_name = map[int32]string{
		0:  "RES_SKILLFUNC_PROTECT_TYPE_Default",
		1:  "RES_SKILLFUNC_PROTECT_PHYSHURT",
		2:  "RES_SKILLFUNC_PROTECT_MAGICHURT",
		3:  "RES_SKILLFUNC_PROTECT_ALL",
		4:  "RES_SKILLFUNC_PROTECT_ALL_INCLUDE_REALHURT",
		5:  "RES_SKILLFUNC_PROTECT_CONVERT",
		6:  "RES_SKILLFUNC_PROTECT_EFFECT",
		7:  "RES_SKILLFUNC_PROTECT_PROPERTY",
		8:  "RES_SKILLFUNC_PROTECT_ENERGY",
		9:  "RES_SKILLFUNC_PROTECT_CHARGE",
		10: "RES_SKILLFUNC_PROTECT_OVER_FLOW_HEMOPHAGIA_CONVERT",
	}
	RES_SKILLFUNC_PROTECT_TYPE_value = map[string]int32{
		"RES_SKILLFUNC_PROTECT_TYPE_Default":                 0,
		"RES_SKILLFUNC_PROTECT_PHYSHURT":                     1,
		"RES_SKILLFUNC_PROTECT_MAGICHURT":                    2,
		"RES_SKILLFUNC_PROTECT_ALL":                          3,
		"RES_SKILLFUNC_PROTECT_ALL_INCLUDE_REALHURT":         4,
		"RES_SKILLFUNC_PROTECT_CONVERT":                      5,
		"RES_SKILLFUNC_PROTECT_EFFECT":                       6,
		"RES_SKILLFUNC_PROTECT_PROPERTY":                     7,
		"RES_SKILLFUNC_PROTECT_ENERGY":                       8,
		"RES_SKILLFUNC_PROTECT_CHARGE":                       9,
		"RES_SKILLFUNC_PROTECT_OVER_FLOW_HEMOPHAGIA_CONVERT": 10,
	}
)

func (x RES_SKILLFUNC_PROTECT_TYPE) Enum() *RES_SKILLFUNC_PROTECT_TYPE {
	p := new(RES_SKILLFUNC_PROTECT_TYPE)
	*p = x
	return p
}

func (x RES_SKILLFUNC_PROTECT_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_SKILLFUNC_PROTECT_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[19].Descriptor()
}

func (RES_SKILLFUNC_PROTECT_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[19]
}

func (x RES_SKILLFUNC_PROTECT_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_SKILLFUNC_PROTECT_TYPE.Descriptor instead.
func (RES_SKILLFUNC_PROTECT_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{19}
}

type RES_SKILLFUNC_TYPE int32

const (
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_NULL                                    RES_SKILLFUNC_TYPE = 0
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_PHYSHURT                                RES_SKILLFUNC_TYPE = 1
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_MAGICHURT                               RES_SKILLFUNC_TYPE = 2
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_REALHURT                                RES_SKILLFUNC_TYPE = 3
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_ADDHP                                   RES_SKILLFUNC_TYPE = 4
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_ADDATKSPD                               RES_SKILLFUNC_TYPE = 5
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_DELATKSPD                               RES_SKILLFUNC_TYPE = 6
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_ADDMOVESPD                              RES_SKILLFUNC_TYPE = 7
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_DELMOVESPD                              RES_SKILLFUNC_TYPE = 8
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_INCATK                                  RES_SKILLFUNC_TYPE = 9
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_DECATK                                  RES_SKILLFUNC_TYPE = 10
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_SUCKBLOOD                               RES_SKILLFUNC_TYPE = 11
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_INCDEFEND                               RES_SKILLFUNC_TYPE = 12
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_DECDEFEND                               RES_SKILLFUNC_TYPE = 13
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_INCRESIST                               RES_SKILLFUNC_TYPE = 14
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_DECRESIST                               RES_SKILLFUNC_TYPE = 15
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_DECSKILLCD                              RES_SKILLFUNC_TYPE = 17
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_INCAP                                   RES_SKILLFUNC_TYPE = 18
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_DECAP                                   RES_SKILLFUNC_TYPE = 19
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_INCCSRATE                               RES_SKILLFUNC_TYPE = 20
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_DECCSRATE                               RES_SKILLFUNC_TYPE = 21
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_INCMAXHP                                RES_SKILLFUNC_TYPE = 22
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_DECMAXHP                                RES_SKILLFUNC_TYPE = 23
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_INCDEFSTRIKE                            RES_SKILLFUNC_TYPE = 24
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_DECDEFSTRIKE                            RES_SKILLFUNC_TYPE = 25
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_INCRESSTRIKE                            RES_SKILLFUNC_TYPE = 26
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_DECRESSTRIKE                            RES_SKILLFUNC_TYPE = 27
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_PROTECT                                 RES_SKILLFUNC_TYPE = 28
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_ADDMARK                                 RES_SKILLFUNC_TYPE = 29
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_TRIGGERMARK                             RES_SKILLFUNC_TYPE = 30
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_REVIVESOON                              RES_SKILLFUNC_TYPE = 33
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_CLEARFFECT                              RES_SKILLFUNC_TYPE = 35
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_PHYSHEMO                                RES_SKILLFUNC_TYPE = 36
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_MAGICHEMO                               RES_SKILLFUNC_TYPE = 37
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_HURTREDUCERATE                          RES_SKILLFUNC_TYPE = 38
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_HURTOUTPUTRATE                          RES_SKILLFUNC_TYPE = 41
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_CTRLREDUCE                              RES_SKILLFUNC_TYPE = 42
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_CDREDUCE                                RES_SKILLFUNC_TYPE = 43
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_ANTICRIT                                RES_SKILLFUNC_TYPE = 44
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_CONDITIONHURTOUT                        RES_SKILLFUNC_TYPE = 45
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_HPCONDITION                             RES_SKILLFUNC_TYPE = 47
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_HUDSTYLE                                RES_SKILLFUNC_TYPE = 48
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_TARGETEXTRAHURT                         RES_SKILLFUNC_TYPE = 49
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_CONTROLEXTRAEFFECT                      RES_SKILLFUNC_TYPE = 52
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_IMMUNEDEADHURT                          RES_SKILLFUNC_TYPE = 55
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_CHANGESKILL                             RES_SKILLFUNC_TYPE = 56
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_CRITEFT                                 RES_SKILLFUNC_TYPE = 58
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_CPHYARMORHURT_RATE                      RES_SKILLFUNC_TYPE = 60
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_CMGCARMORHURT_RATE                      RES_SKILLFUNC_TYPE = 61
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_RECOVERYGAINEFFECT                      RES_SKILLFUNC_TYPE = 64
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_SPEEDUPOUTOFBATTLE                      RES_SKILLFUNC_TYPE = 65
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_DECHURT_RATE                            RES_SKILLFUNC_TYPE = 67
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_REMOVESKILLBUFF                         RES_SKILLFUNC_TYPE = 70
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_CHANGESKILLPARAM                        RES_SKILLFUNC_TYPE = 73
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_CHANGEENERGY                            RES_SKILLFUNC_TYPE = 76
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_BOUNCEHURT                              RES_SKILLFUNC_TYPE = 83
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_BOUNCESKILLEFFECT                       RES_SKILLFUNC_TYPE = 84
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_DECREASEREVIVETIME                      RES_SKILLFUNC_TYPE = 85
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_ADDGOLD                                 RES_SKILLFUNC_TYPE = 86
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_CLEAREP                                 RES_SKILLFUNC_TYPE = 93
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_SHAREHURT                               RES_SKILLFUNC_TYPE = 95
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_AWAYFROMATTACKERMOVEBUFF                RES_SKILLFUNC_TYPE = 96
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_BACKATTACKCSRATE                        RES_SKILLFUNC_TYPE = 97
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_CONVERTSRATE                            RES_SKILLFUNC_TYPE = 98
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_CHANGEATKRANGE                          RES_SKILLFUNC_TYPE = 99
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_HPGOBACK                                RES_SKILLFUNC_TYPE = 100
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_SHIPPASSIVESKILL                        RES_SKILLFUNC_TYPE = 102
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_AREAHITBACKHURT                         RES_SKILLFUNC_TYPE = 103
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_INCMAXEP                                RES_SKILLFUNC_TYPE = 104
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_DECMAXEP                                RES_SKILLFUNC_TYPE = 105
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_CHANGEBESEARCHEDPRIORITY                RES_SKILLFUNC_TYPE = 106
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_ADDNEWSKILL                             RES_SKILLFUNC_TYPE = 109
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_ACTORRENEWAL                            RES_SKILLFUNC_TYPE = 111
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_ADDMAXLIMITVALUE                        RES_SKILLFUNC_TYPE = 112
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_STRENGTHENBULLET                        RES_SKILLFUNC_TYPE = 113
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_HPTRANSFER                              RES_SKILLFUNC_TYPE = 120
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_ACCUMULATEHURT                          RES_SKILLFUNC_TYPE = 123
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_DIRECTHURT                              RES_SKILLFUNC_TYPE = 124
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_IGNORE_ALL_BLOCK                        RES_SKILLFUNC_TYPE = 126
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_SETMINLIMITVALUE                             RES_SKILLFUNC_TYPE = 128
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_SETDYINGREVIVECONTEXT                   RES_SKILLFUNC_TYPE = 129
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_IMMUNESKILLEFECT                        RES_SKILLFUNC_TYPE = 133
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_REMOVESKILLBUFFWITHTAG                  RES_SKILLFUNC_TYPE = 134
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_CHANGEATTACKDISTANCE                    RES_SKILLFUNC_TYPE = 136
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_CHANGEPROPERTY                          RES_SKILLFUNC_TYPE = 137
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_FAKEBLOODPROPERTY                       RES_SKILLFUNC_TYPE = 138
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_DAMAGETRANSFER                          RES_SKILLFUNC_TYPE = 139
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_EXTENDBUFFTIME                          RES_SKILLFUNC_TYPE = 143
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_DIVIDEDAMAGE                            RES_SKILLFUNC_TYPE = 146
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_RECOVERYOTHEREFFECT                     RES_SKILLFUNC_TYPE = 147
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_SKILLSPEEDUP                            RES_SKILLFUNC_TYPE = 150
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_CHARGEVALUE                             RES_SKILLFUNC_TYPE = 151
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_CHECK_MOVE_DISTANCE                     RES_SKILLFUNC_TYPE = 153
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_AVERAGEHURT                             RES_SKILLFUNC_TYPE = 154
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_DELAYDAMAGE                             RES_SKILLFUNC_TYPE = 156
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_SELFHURT                                RES_SKILLFUNC_TYPE = 157
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_ADDROUNDGOLD                            RES_SKILLFUNC_TYPE = 158
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_PJ8EPRATE                               RES_SKILLFUNC_TYPE = 159
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_CHANGEATTACKTYPE                        RES_SKILLFUNC_TYPE = 160
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_PJ8CHANGEFINALEP                        RES_SKILLFUNC_TYPE = 161
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_ATTAKERDEADREMOVEBUFF                   RES_SKILLFUNC_TYPE = 166
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_PROJECT8_CHANGE_SPLIT_COUNT             RES_SKILLFUNC_TYPE = 173
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_PROJECT8_CHANGE_DAMAGE_MP_GET_RATE      RES_SKILLFUNC_TYPE = 174
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_PROJECT8_CHANGE_HURT_MP_GET_RATE        RES_SKILLFUNC_TYPE = 175
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_NORMALADDROUNDGOLD                      RES_SKILLFUNC_TYPE = 176
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_BACKATTACKEDHURTREDUCE                  RES_SKILLFUNC_TYPE = 179
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_ACCUMULATEDURATIONHURT                  RES_SKILLFUNC_TYPE = 180
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_FILTERBUFFID                            RES_SKILLFUNC_TYPE = 181
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_REALHEMO                                RES_SKILLFUNC_TYPE = 183
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_CHANGEPASSIVE                           RES_SKILLFUNC_TYPE = 190
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_REPLACESKILL                            RES_SKILLFUNC_TYPE = 192
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_CHECK_TURNDIRECTION                     RES_SKILLFUNC_TYPE = 195
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_REMOVE_DESPEED                          RES_SKILLFUNC_TYPE = 196
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_STRIKE_BACK                             RES_SKILLFUNC_TYPE = 198
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_MODIFY_DAMAGE                           RES_SKILLFUNC_TYPE = 199
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_CONVERT_PROPERTY                        RES_SKILLFUNC_TYPE = 200
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_SHIELD_DEC_RATE                         RES_SKILLFUNC_TYPE = 201
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_KILLMONSTER_DEC_SPAWNCD                 RES_SKILLFUNC_TYPE = 202
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_ADDSKILLBUFF                            RES_SKILLFUNC_TYPE = 205
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_PROJECT8_ADDSPDINMOVING                 RES_SKILLFUNC_TYPE = 208
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_MAGICHURT_CRITICAL_ENABLE               RES_SKILLFUNC_TYPE = 210
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_PROJECT8_CHANGE_INIT_ENERGY             RES_SKILLFUNC_TYPE = 211
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_PROJECT8_TAUNT                          RES_SKILLFUNC_TYPE = 212
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_SELF_RECOVER_SELF                       RES_SKILLFUNC_TYPE = 213
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_PROJECT8_RECOVER_ENERGY                 RES_SKILLFUNC_TYPE = 214
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_REALHURT_CRITICAL_ENABLE                RES_SKILLFUNC_TYPE = 215
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_EXTRA_DURATION_SKILL                    RES_SKILLFUNC_TYPE = 216
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_ADD_SOURCE_HEAL_RATE                    RES_SKILLFUNC_TYPE = 217
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_DEC_SOURCE_HEAL_RATE                    RES_SKILLFUNC_TYPE = 218
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_ADD_TARGET_HEAL_RATE                    RES_SKILLFUNC_TYPE = 219
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_DEC_TARGET_HEAL_RATE                    RES_SKILLFUNC_TYPE = 220
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_ADD_TRUE_DAMAGE_LIFE_STEAL_RATE         RES_SKILLFUNC_TYPE = 221
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_DEC_TRUE_DAMAGE_LIFE_STEAL_RATE         RES_SKILLFUNC_TYPE = 222
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_DAMAGE_TRANSFER_SHIELD                  RES_SKILLFUNC_TYPE = 223
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_HURT_TRANSFER_SHIELD                    RES_SKILLFUNC_TYPE = 224
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_OVERFLOW_HEAL_TRANSFER_SHIELD           RES_SKILLFUNC_TYPE = 225
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_CONST_TARGET_OUTPUT_RATE                RES_SKILLFUNC_TYPE = 226
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_CONST_SOURCE_REDUCE_RATE                RES_SKILLFUNC_TYPE = 227
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_SLOT_TYPE_OUTPUT_RATE                   RES_SKILLFUNC_TYPE = 228
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_SLOT_TYPE_REDUCE_RATE                   RES_SKILLFUNC_TYPE = 229
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_DAMAGE_ORB_EFFECT                       RES_SKILLFUNC_TYPE = 230
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_HURT_ORB_EFFECT                         RES_SKILLFUNC_TYPE = 231
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_SKILL_ATTACK_RANGE                      RES_SKILLFUNC_TYPE = 232
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_ADD_HIT_AVOID_RATE                      RES_SKILLFUNC_TYPE = 233
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_DEC_HIT_AVOID_RATE                      RES_SKILLFUNC_TYPE = 234
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_ADD_HIT_RATE                            RES_SKILLFUNC_TYPE = 235
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_DEC_HIT_RATE                            RES_SKILLFUNC_TYPE = 236
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_DAMAGE_BLOCK                            RES_SKILLFUNC_TYPE = 237
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_LOW_PRIORITY_TARGET                     RES_SKILLFUNC_TYPE = 238
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_TARGET_OUTPUT_RATE                      RES_SKILLFUNC_TYPE = 239
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_CHANGE_INCMAXEP                         RES_SKILLFUNC_TYPE = 240
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_CHANGE_DECMAXEP                         RES_SKILLFUNC_TYPE = 241
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_ADD_HEAL_DEBUFF_RATE                    RES_SKILLFUNC_TYPE = 242
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_DEC_HEAL_DEBUFF_RATE                    RES_SKILLFUNC_TYPE = 243
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_CHANGE_REATHURT_RATE                    RES_SKILLFUNC_TYPE = 244
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_DAMAGE_ORB_EFFECT_ONLY_ONCE             RES_SKILLFUNC_TYPE = 245
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_DAMAGE_ORB_EFFECT_SELECTED_BUFF_ID      RES_SKILLFUNC_TYPE = 246
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_DAMAGE_ORB_EFFECT_HAS_HURT              RES_SKILLFUNC_TYPE = 247
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_NEW_CHANGE_PROPERTY                     RES_SKILLFUNC_TYPE = 248
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_SLOT_TYPE_PROBABILITY_OUTPUT_RATE       RES_SKILLFUNC_TYPE = 249
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_STEAL_HP_ACCORDING_HURT                 RES_SKILLFUNC_TYPE = 250
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_CERTAIN_CRIT                            RES_SKILLFUNC_TYPE = 251
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_HEAL_ORB                                RES_SKILLFUNC_TYPE = 252
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_SHIELD_ORB                              RES_SKILLFUNC_TYPE = 253
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_TARGET_STAR_DAMAGE                      RES_SKILLFUNC_TYPE = 254
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_DEADLY_DAMAGE                           RES_SKILLFUNC_TYPE = 255
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_SHIELD_ADD_RATE                         RES_SKILLFUNC_TYPE = 256
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_PROPERTY_TRANSFORM_EXTRA_DAMAGE         RES_SKILLFUNC_TYPE = 257
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_SKILL_DAMAGE_ATTENUATION_TO_SAME_TARGET RES_SKILLFUNC_TYPE = 258
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_HURT_ORB_EFFECT_ONLY_ONCE_EACH_TARGET   RES_SKILLFUNC_TYPE = 259
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_RELATIVE_DIVIDE_DAMAGE                  RES_SKILLFUNC_TYPE = 260
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_EXTRA_DAMAGE                            RES_SKILLFUNC_TYPE = 261
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_CHANGE_PROPERTY_UPPER_LIMIT             RES_SKILLFUNC_TYPE = 262
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_DELAYDAMAGE_MODIFYCONVERTRATE           RES_SKILLFUNC_TYPE = 263
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_CHANGE_BUFF_OVERLAYMAX                  RES_SKILLFUNC_TYPE = 264
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_CHANGE_PROPERTY_BASE_VALUE              RES_SKILLFUNC_TYPE = 265
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_SHIELD_RELATIVE_ORB                     RES_SKILLFUNC_TYPE = 266
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_HEAL_RELATIVE_ORB                       RES_SKILLFUNC_TYPE = 267
	RES_SKILLFUNC_TYPE_RES_SKILLFUNC_TYPE_LAST                                    RES_SKILLFUNC_TYPE = 268
)

// Enum value maps for RES_SKILLFUNC_TYPE.
var (
	RES_SKILLFUNC_TYPE_name = map[int32]string{
		0:   "RES_SKILLFUNC_TYPE_NULL",
		1:   "RES_SKILLFUNC_TYPE_PHYSHURT",
		2:   "RES_SKILLFUNC_TYPE_MAGICHURT",
		3:   "RES_SKILLFUNC_TYPE_REALHURT",
		4:   "RES_SKILLFUNC_TYPE_ADDHP",
		5:   "RES_SKILLFUNC_TYPE_ADDATKSPD",
		6:   "RES_SKILLFUNC_TYPE_DELATKSPD",
		7:   "RES_SKILLFUNC_TYPE_ADDMOVESPD",
		8:   "RES_SKILLFUNC_TYPE_DELMOVESPD",
		9:   "RES_SKILLFUNC_TYPE_INCATK",
		10:  "RES_SKILLFUNC_TYPE_DECATK",
		11:  "RES_SKILLFUNC_TYPE_SUCKBLOOD",
		12:  "RES_SKILLFUNC_TYPE_INCDEFEND",
		13:  "RES_SKILLFUNC_TYPE_DECDEFEND",
		14:  "RES_SKILLFUNC_TYPE_INCRESIST",
		15:  "RES_SKILLFUNC_TYPE_DECRESIST",
		17:  "RES_SKILLFUNC_TYPE_DECSKILLCD",
		18:  "RES_SKILLFUNC_TYPE_INCAP",
		19:  "RES_SKILLFUNC_TYPE_DECAP",
		20:  "RES_SKILLFUNC_TYPE_INCCSRATE",
		21:  "RES_SKILLFUNC_TYPE_DECCSRATE",
		22:  "RES_SKILLFUNC_TYPE_INCMAXHP",
		23:  "RES_SKILLFUNC_TYPE_DECMAXHP",
		24:  "RES_SKILLFUNC_TYPE_INCDEFSTRIKE",
		25:  "RES_SKILLFUNC_TYPE_DECDEFSTRIKE",
		26:  "RES_SKILLFUNC_TYPE_INCRESSTRIKE",
		27:  "RES_SKILLFUNC_TYPE_DECRESSTRIKE",
		28:  "RES_SKILLFUNC_TYPE_PROTECT",
		29:  "RES_SKILLFUNC_TYPE_ADDMARK",
		30:  "RES_SKILLFUNC_TYPE_TRIGGERMARK",
		33:  "RES_SKILLFUNC_TYPE_REVIVESOON",
		35:  "RES_SKILLFUNC_TYPE_CLEARFFECT",
		36:  "RES_SKILLFUNC_TYPE_PHYSHEMO",
		37:  "RES_SKILLFUNC_TYPE_MAGICHEMO",
		38:  "RES_SKILLFUNC_TYPE_HURTREDUCERATE",
		41:  "RES_SKILLFUNC_TYPE_HURTOUTPUTRATE",
		42:  "RES_SKILLFUNC_TYPE_CTRLREDUCE",
		43:  "RES_SKILLFUNC_TYPE_CDREDUCE",
		44:  "RES_SKILLFUNC_TYPE_ANTICRIT",
		45:  "RES_SKILLFUNC_TYPE_CONDITIONHURTOUT",
		47:  "RES_SKILLFUNC_TYPE_HPCONDITION",
		48:  "RES_SKILLFUNC_TYPE_HUDSTYLE",
		49:  "RES_SKILLFUNC_TYPE_TARGETEXTRAHURT",
		52:  "RES_SKILLFUNC_TYPE_CONTROLEXTRAEFFECT",
		55:  "RES_SKILLFUNC_TYPE_IMMUNEDEADHURT",
		56:  "RES_SKILLFUNC_TYPE_CHANGESKILL",
		58:  "RES_SKILLFUNC_TYPE_CRITEFT",
		60:  "RES_SKILLFUNC_TYPE_CPHYARMORHURT_RATE",
		61:  "RES_SKILLFUNC_TYPE_CMGCARMORHURT_RATE",
		64:  "RES_SKILLFUNC_TYPE_RECOVERYGAINEFFECT",
		65:  "RES_SKILLFUNC_TYPE_SPEEDUPOUTOFBATTLE",
		67:  "RES_SKILLFUNC_TYPE_DECHURT_RATE",
		70:  "RES_SKILLFUNC_TYPE_REMOVESKILLBUFF",
		73:  "RES_SKILLFUNC_TYPE_CHANGESKILLPARAM",
		76:  "RES_SKILLFUNC_TYPE_CHANGEENERGY",
		83:  "RES_SKILLFUNC_TYPE_BOUNCEHURT",
		84:  "RES_SKILLFUNC_TYPE_BOUNCESKILLEFFECT",
		85:  "RES_SKILLFUNC_TYPE_DECREASEREVIVETIME",
		86:  "RES_SKILLFUNC_TYPE_ADDGOLD",
		93:  "RES_SKILLFUNC_TYPE_CLEAREP",
		95:  "RES_SKILLFUNC_TYPE_SHAREHURT",
		96:  "RES_SKILLFUNC_TYPE_AWAYFROMATTACKERMOVEBUFF",
		97:  "RES_SKILLFUNC_TYPE_BACKATTACKCSRATE",
		98:  "RES_SKILLFUNC_TYPE_CONVERTSRATE",
		99:  "RES_SKILLFUNC_TYPE_CHANGEATKRANGE",
		100: "RES_SKILLFUNC_TYPE_HPGOBACK",
		102: "RES_SKILLFUNC_TYPE_SHIPPASSIVESKILL",
		103: "RES_SKILLFUNC_TYPE_AREAHITBACKHURT",
		104: "RES_SKILLFUNC_TYPE_INCMAXEP",
		105: "RES_SKILLFUNC_TYPE_DECMAXEP",
		106: "RES_SKILLFUNC_TYPE_CHANGEBESEARCHEDPRIORITY",
		109: "RES_SKILLFUNC_TYPE_ADDNEWSKILL",
		111: "RES_SKILLFUNC_TYPE_ACTORRENEWAL",
		112: "RES_SKILLFUNC_TYPE_ADDMAXLIMITVALUE",
		113: "RES_SKILLFUNC_TYPE_STRENGTHENBULLET",
		120: "RES_SKILLFUNC_TYPE_HPTRANSFER",
		123: "RES_SKILLFUNC_TYPE_ACCUMULATEHURT",
		124: "RES_SKILLFUNC_TYPE_DIRECTHURT",
		126: "RES_SKILLFUNC_TYPE_IGNORE_ALL_BLOCK",
		128: "RES_SKILLFUNC_SETMINLIMITVALUE",
		129: "RES_SKILLFUNC_TYPE_SETDYINGREVIVECONTEXT",
		133: "RES_SKILLFUNC_TYPE_IMMUNESKILLEFECT",
		134: "RES_SKILLFUNC_TYPE_REMOVESKILLBUFFWITHTAG",
		136: "RES_SKILLFUNC_TYPE_CHANGEATTACKDISTANCE",
		137: "RES_SKILLFUNC_TYPE_CHANGEPROPERTY",
		138: "RES_SKILLFUNC_TYPE_FAKEBLOODPROPERTY",
		139: "RES_SKILLFUNC_TYPE_DAMAGETRANSFER",
		143: "RES_SKILLFUNC_TYPE_EXTENDBUFFTIME",
		146: "RES_SKILLFUNC_TYPE_DIVIDEDAMAGE",
		147: "RES_SKILLFUNC_TYPE_RECOVERYOTHEREFFECT",
		150: "RES_SKILLFUNC_TYPE_SKILLSPEEDUP",
		151: "RES_SKILLFUNC_TYPE_CHARGEVALUE",
		153: "RES_SKILLFUNC_TYPE_CHECK_MOVE_DISTANCE",
		154: "RES_SKILLFUNC_TYPE_AVERAGEHURT",
		156: "RES_SKILLFUNC_TYPE_DELAYDAMAGE",
		157: "RES_SKILLFUNC_TYPE_SELFHURT",
		158: "RES_SKILLFUNC_TYPE_ADDROUNDGOLD",
		159: "RES_SKILLFUNC_TYPE_PJ8EPRATE",
		160: "RES_SKILLFUNC_TYPE_CHANGEATTACKTYPE",
		161: "RES_SKILLFUNC_TYPE_PJ8CHANGEFINALEP",
		166: "RES_SKILLFUNC_TYPE_ATTAKERDEADREMOVEBUFF",
		173: "RES_SKILLFUNC_TYPE_PROJECT8_CHANGE_SPLIT_COUNT",
		174: "RES_SKILLFUNC_TYPE_PROJECT8_CHANGE_DAMAGE_MP_GET_RATE",
		175: "RES_SKILLFUNC_TYPE_PROJECT8_CHANGE_HURT_MP_GET_RATE",
		176: "RES_SKILLFUNC_TYPE_NORMALADDROUNDGOLD",
		179: "RES_SKILLFUNC_TYPE_BACKATTACKEDHURTREDUCE",
		180: "RES_SKILLFUNC_TYPE_ACCUMULATEDURATIONHURT",
		181: "RES_SKILLFUNC_TYPE_FILTERBUFFID",
		183: "RES_SKILLFUNC_TYPE_REALHEMO",
		190: "RES_SKILLFUNC_TYPE_CHANGEPASSIVE",
		192: "RES_SKILLFUNC_TYPE_REPLACESKILL",
		195: "RES_SKILLFUNC_TYPE_CHECK_TURNDIRECTION",
		196: "RES_SKILLFUNC_TYPE_REMOVE_DESPEED",
		198: "RES_SKILLFUNC_TYPE_STRIKE_BACK",
		199: "RES_SKILLFUNC_TYPE_MODIFY_DAMAGE",
		200: "RES_SKILLFUNC_TYPE_CONVERT_PROPERTY",
		201: "RES_SKILLFUNC_TYPE_SHIELD_DEC_RATE",
		202: "RES_SKILLFUNC_TYPE_KILLMONSTER_DEC_SPAWNCD",
		205: "RES_SKILLFUNC_TYPE_ADDSKILLBUFF",
		208: "RES_SKILLFUNC_TYPE_PROJECT8_ADDSPDINMOVING",
		210: "RES_SKILLFUNC_TYPE_MAGICHURT_CRITICAL_ENABLE",
		211: "RES_SKILLFUNC_TYPE_PROJECT8_CHANGE_INIT_ENERGY",
		212: "RES_SKILLFUNC_TYPE_PROJECT8_TAUNT",
		213: "RES_SKILLFUNC_TYPE_SELF_RECOVER_SELF",
		214: "RES_SKILLFUNC_TYPE_PROJECT8_RECOVER_ENERGY",
		215: "RES_SKILLFUNC_TYPE_REALHURT_CRITICAL_ENABLE",
		216: "RES_SKILLFUNC_TYPE_EXTRA_DURATION_SKILL",
		217: "RES_SKILLFUNC_TYPE_ADD_SOURCE_HEAL_RATE",
		218: "RES_SKILLFUNC_TYPE_DEC_SOURCE_HEAL_RATE",
		219: "RES_SKILLFUNC_TYPE_ADD_TARGET_HEAL_RATE",
		220: "RES_SKILLFUNC_TYPE_DEC_TARGET_HEAL_RATE",
		221: "RES_SKILLFUNC_TYPE_ADD_TRUE_DAMAGE_LIFE_STEAL_RATE",
		222: "RES_SKILLFUNC_TYPE_DEC_TRUE_DAMAGE_LIFE_STEAL_RATE",
		223: "RES_SKILLFUNC_TYPE_DAMAGE_TRANSFER_SHIELD",
		224: "RES_SKILLFUNC_TYPE_HURT_TRANSFER_SHIELD",
		225: "RES_SKILLFUNC_TYPE_OVERFLOW_HEAL_TRANSFER_SHIELD",
		226: "RES_SKILLFUNC_TYPE_CONST_TARGET_OUTPUT_RATE",
		227: "RES_SKILLFUNC_TYPE_CONST_SOURCE_REDUCE_RATE",
		228: "RES_SKILLFUNC_TYPE_SLOT_TYPE_OUTPUT_RATE",
		229: "RES_SKILLFUNC_TYPE_SLOT_TYPE_REDUCE_RATE",
		230: "RES_SKILLFUNC_TYPE_DAMAGE_ORB_EFFECT",
		231: "RES_SKILLFUNC_TYPE_HURT_ORB_EFFECT",
		232: "RES_SKILLFUNC_TYPE_SKILL_ATTACK_RANGE",
		233: "RES_SKILLFUNC_TYPE_ADD_HIT_AVOID_RATE",
		234: "RES_SKILLFUNC_TYPE_DEC_HIT_AVOID_RATE",
		235: "RES_SKILLFUNC_TYPE_ADD_HIT_RATE",
		236: "RES_SKILLFUNC_TYPE_DEC_HIT_RATE",
		237: "RES_SKILLFUNC_TYPE_DAMAGE_BLOCK",
		238: "RES_SKILLFUNC_TYPE_LOW_PRIORITY_TARGET",
		239: "RES_SKILLFUNC_TYPE_TARGET_OUTPUT_RATE",
		240: "RES_SKILLFUNC_TYPE_CHANGE_INCMAXEP",
		241: "RES_SKILLFUNC_TYPE_CHANGE_DECMAXEP",
		242: "RES_SKILLFUNC_TYPE_ADD_HEAL_DEBUFF_RATE",
		243: "RES_SKILLFUNC_TYPE_DEC_HEAL_DEBUFF_RATE",
		244: "RES_SKILLFUNC_TYPE_CHANGE_REATHURT_RATE",
		245: "RES_SKILLFUNC_TYPE_DAMAGE_ORB_EFFECT_ONLY_ONCE",
		246: "RES_SKILLFUNC_TYPE_DAMAGE_ORB_EFFECT_SELECTED_BUFF_ID",
		247: "RES_SKILLFUNC_TYPE_DAMAGE_ORB_EFFECT_HAS_HURT",
		248: "RES_SKILLFUNC_TYPE_NEW_CHANGE_PROPERTY",
		249: "RES_SKILLFUNC_TYPE_SLOT_TYPE_PROBABILITY_OUTPUT_RATE",
		250: "RES_SKILLFUNC_TYPE_STEAL_HP_ACCORDING_HURT",
		251: "RES_SKILLFUNC_TYPE_CERTAIN_CRIT",
		252: "RES_SKILLFUNC_TYPE_HEAL_ORB",
		253: "RES_SKILLFUNC_TYPE_SHIELD_ORB",
		254: "RES_SKILLFUNC_TYPE_TARGET_STAR_DAMAGE",
		255: "RES_SKILLFUNC_TYPE_DEADLY_DAMAGE",
		256: "RES_SKILLFUNC_TYPE_SHIELD_ADD_RATE",
		257: "RES_SKILLFUNC_TYPE_PROPERTY_TRANSFORM_EXTRA_DAMAGE",
		258: "RES_SKILLFUNC_TYPE_SKILL_DAMAGE_ATTENUATION_TO_SAME_TARGET",
		259: "RES_SKILLFUNC_TYPE_HURT_ORB_EFFECT_ONLY_ONCE_EACH_TARGET",
		260: "RES_SKILLFUNC_TYPE_RELATIVE_DIVIDE_DAMAGE",
		261: "RES_SKILLFUNC_TYPE_EXTRA_DAMAGE",
		262: "RES_SKILLFUNC_TYPE_CHANGE_PROPERTY_UPPER_LIMIT",
		263: "RES_SKILLFUNC_TYPE_DELAYDAMAGE_MODIFYCONVERTRATE",
		264: "RES_SKILLFUNC_TYPE_CHANGE_BUFF_OVERLAYMAX",
		265: "RES_SKILLFUNC_TYPE_CHANGE_PROPERTY_BASE_VALUE",
		266: "RES_SKILLFUNC_TYPE_SHIELD_RELATIVE_ORB",
		267: "RES_SKILLFUNC_TYPE_HEAL_RELATIVE_ORB",
		268: "RES_SKILLFUNC_TYPE_LAST",
	}
	RES_SKILLFUNC_TYPE_value = map[string]int32{
		"RES_SKILLFUNC_TYPE_NULL":                                    0,
		"RES_SKILLFUNC_TYPE_PHYSHURT":                                1,
		"RES_SKILLFUNC_TYPE_MAGICHURT":                               2,
		"RES_SKILLFUNC_TYPE_REALHURT":                                3,
		"RES_SKILLFUNC_TYPE_ADDHP":                                   4,
		"RES_SKILLFUNC_TYPE_ADDATKSPD":                               5,
		"RES_SKILLFUNC_TYPE_DELATKSPD":                               6,
		"RES_SKILLFUNC_TYPE_ADDMOVESPD":                              7,
		"RES_SKILLFUNC_TYPE_DELMOVESPD":                              8,
		"RES_SKILLFUNC_TYPE_INCATK":                                  9,
		"RES_SKILLFUNC_TYPE_DECATK":                                  10,
		"RES_SKILLFUNC_TYPE_SUCKBLOOD":                               11,
		"RES_SKILLFUNC_TYPE_INCDEFEND":                               12,
		"RES_SKILLFUNC_TYPE_DECDEFEND":                               13,
		"RES_SKILLFUNC_TYPE_INCRESIST":                               14,
		"RES_SKILLFUNC_TYPE_DECRESIST":                               15,
		"RES_SKILLFUNC_TYPE_DECSKILLCD":                              17,
		"RES_SKILLFUNC_TYPE_INCAP":                                   18,
		"RES_SKILLFUNC_TYPE_DECAP":                                   19,
		"RES_SKILLFUNC_TYPE_INCCSRATE":                               20,
		"RES_SKILLFUNC_TYPE_DECCSRATE":                               21,
		"RES_SKILLFUNC_TYPE_INCMAXHP":                                22,
		"RES_SKILLFUNC_TYPE_DECMAXHP":                                23,
		"RES_SKILLFUNC_TYPE_INCDEFSTRIKE":                            24,
		"RES_SKILLFUNC_TYPE_DECDEFSTRIKE":                            25,
		"RES_SKILLFUNC_TYPE_INCRESSTRIKE":                            26,
		"RES_SKILLFUNC_TYPE_DECRESSTRIKE":                            27,
		"RES_SKILLFUNC_TYPE_PROTECT":                                 28,
		"RES_SKILLFUNC_TYPE_ADDMARK":                                 29,
		"RES_SKILLFUNC_TYPE_TRIGGERMARK":                             30,
		"RES_SKILLFUNC_TYPE_REVIVESOON":                              33,
		"RES_SKILLFUNC_TYPE_CLEARFFECT":                              35,
		"RES_SKILLFUNC_TYPE_PHYSHEMO":                                36,
		"RES_SKILLFUNC_TYPE_MAGICHEMO":                               37,
		"RES_SKILLFUNC_TYPE_HURTREDUCERATE":                          38,
		"RES_SKILLFUNC_TYPE_HURTOUTPUTRATE":                          41,
		"RES_SKILLFUNC_TYPE_CTRLREDUCE":                              42,
		"RES_SKILLFUNC_TYPE_CDREDUCE":                                43,
		"RES_SKILLFUNC_TYPE_ANTICRIT":                                44,
		"RES_SKILLFUNC_TYPE_CONDITIONHURTOUT":                        45,
		"RES_SKILLFUNC_TYPE_HPCONDITION":                             47,
		"RES_SKILLFUNC_TYPE_HUDSTYLE":                                48,
		"RES_SKILLFUNC_TYPE_TARGETEXTRAHURT":                         49,
		"RES_SKILLFUNC_TYPE_CONTROLEXTRAEFFECT":                      52,
		"RES_SKILLFUNC_TYPE_IMMUNEDEADHURT":                          55,
		"RES_SKILLFUNC_TYPE_CHANGESKILL":                             56,
		"RES_SKILLFUNC_TYPE_CRITEFT":                                 58,
		"RES_SKILLFUNC_TYPE_CPHYARMORHURT_RATE":                      60,
		"RES_SKILLFUNC_TYPE_CMGCARMORHURT_RATE":                      61,
		"RES_SKILLFUNC_TYPE_RECOVERYGAINEFFECT":                      64,
		"RES_SKILLFUNC_TYPE_SPEEDUPOUTOFBATTLE":                      65,
		"RES_SKILLFUNC_TYPE_DECHURT_RATE":                            67,
		"RES_SKILLFUNC_TYPE_REMOVESKILLBUFF":                         70,
		"RES_SKILLFUNC_TYPE_CHANGESKILLPARAM":                        73,
		"RES_SKILLFUNC_TYPE_CHANGEENERGY":                            76,
		"RES_SKILLFUNC_TYPE_BOUNCEHURT":                              83,
		"RES_SKILLFUNC_TYPE_BOUNCESKILLEFFECT":                       84,
		"RES_SKILLFUNC_TYPE_DECREASEREVIVETIME":                      85,
		"RES_SKILLFUNC_TYPE_ADDGOLD":                                 86,
		"RES_SKILLFUNC_TYPE_CLEAREP":                                 93,
		"RES_SKILLFUNC_TYPE_SHAREHURT":                               95,
		"RES_SKILLFUNC_TYPE_AWAYFROMATTACKERMOVEBUFF":                96,
		"RES_SKILLFUNC_TYPE_BACKATTACKCSRATE":                        97,
		"RES_SKILLFUNC_TYPE_CONVERTSRATE":                            98,
		"RES_SKILLFUNC_TYPE_CHANGEATKRANGE":                          99,
		"RES_SKILLFUNC_TYPE_HPGOBACK":                                100,
		"RES_SKILLFUNC_TYPE_SHIPPASSIVESKILL":                        102,
		"RES_SKILLFUNC_TYPE_AREAHITBACKHURT":                         103,
		"RES_SKILLFUNC_TYPE_INCMAXEP":                                104,
		"RES_SKILLFUNC_TYPE_DECMAXEP":                                105,
		"RES_SKILLFUNC_TYPE_CHANGEBESEARCHEDPRIORITY":                106,
		"RES_SKILLFUNC_TYPE_ADDNEWSKILL":                             109,
		"RES_SKILLFUNC_TYPE_ACTORRENEWAL":                            111,
		"RES_SKILLFUNC_TYPE_ADDMAXLIMITVALUE":                        112,
		"RES_SKILLFUNC_TYPE_STRENGTHENBULLET":                        113,
		"RES_SKILLFUNC_TYPE_HPTRANSFER":                              120,
		"RES_SKILLFUNC_TYPE_ACCUMULATEHURT":                          123,
		"RES_SKILLFUNC_TYPE_DIRECTHURT":                              124,
		"RES_SKILLFUNC_TYPE_IGNORE_ALL_BLOCK":                        126,
		"RES_SKILLFUNC_SETMINLIMITVALUE":                             128,
		"RES_SKILLFUNC_TYPE_SETDYINGREVIVECONTEXT":                   129,
		"RES_SKILLFUNC_TYPE_IMMUNESKILLEFECT":                        133,
		"RES_SKILLFUNC_TYPE_REMOVESKILLBUFFWITHTAG":                  134,
		"RES_SKILLFUNC_TYPE_CHANGEATTACKDISTANCE":                    136,
		"RES_SKILLFUNC_TYPE_CHANGEPROPERTY":                          137,
		"RES_SKILLFUNC_TYPE_FAKEBLOODPROPERTY":                       138,
		"RES_SKILLFUNC_TYPE_DAMAGETRANSFER":                          139,
		"RES_SKILLFUNC_TYPE_EXTENDBUFFTIME":                          143,
		"RES_SKILLFUNC_TYPE_DIVIDEDAMAGE":                            146,
		"RES_SKILLFUNC_TYPE_RECOVERYOTHEREFFECT":                     147,
		"RES_SKILLFUNC_TYPE_SKILLSPEEDUP":                            150,
		"RES_SKILLFUNC_TYPE_CHARGEVALUE":                             151,
		"RES_SKILLFUNC_TYPE_CHECK_MOVE_DISTANCE":                     153,
		"RES_SKILLFUNC_TYPE_AVERAGEHURT":                             154,
		"RES_SKILLFUNC_TYPE_DELAYDAMAGE":                             156,
		"RES_SKILLFUNC_TYPE_SELFHURT":                                157,
		"RES_SKILLFUNC_TYPE_ADDROUNDGOLD":                            158,
		"RES_SKILLFUNC_TYPE_PJ8EPRATE":                               159,
		"RES_SKILLFUNC_TYPE_CHANGEATTACKTYPE":                        160,
		"RES_SKILLFUNC_TYPE_PJ8CHANGEFINALEP":                        161,
		"RES_SKILLFUNC_TYPE_ATTAKERDEADREMOVEBUFF":                   166,
		"RES_SKILLFUNC_TYPE_PROJECT8_CHANGE_SPLIT_COUNT":             173,
		"RES_SKILLFUNC_TYPE_PROJECT8_CHANGE_DAMAGE_MP_GET_RATE":      174,
		"RES_SKILLFUNC_TYPE_PROJECT8_CHANGE_HURT_MP_GET_RATE":        175,
		"RES_SKILLFUNC_TYPE_NORMALADDROUNDGOLD":                      176,
		"RES_SKILLFUNC_TYPE_BACKATTACKEDHURTREDUCE":                  179,
		"RES_SKILLFUNC_TYPE_ACCUMULATEDURATIONHURT":                  180,
		"RES_SKILLFUNC_TYPE_FILTERBUFFID":                            181,
		"RES_SKILLFUNC_TYPE_REALHEMO":                                183,
		"RES_SKILLFUNC_TYPE_CHANGEPASSIVE":                           190,
		"RES_SKILLFUNC_TYPE_REPLACESKILL":                            192,
		"RES_SKILLFUNC_TYPE_CHECK_TURNDIRECTION":                     195,
		"RES_SKILLFUNC_TYPE_REMOVE_DESPEED":                          196,
		"RES_SKILLFUNC_TYPE_STRIKE_BACK":                             198,
		"RES_SKILLFUNC_TYPE_MODIFY_DAMAGE":                           199,
		"RES_SKILLFUNC_TYPE_CONVERT_PROPERTY":                        200,
		"RES_SKILLFUNC_TYPE_SHIELD_DEC_RATE":                         201,
		"RES_SKILLFUNC_TYPE_KILLMONSTER_DEC_SPAWNCD":                 202,
		"RES_SKILLFUNC_TYPE_ADDSKILLBUFF":                            205,
		"RES_SKILLFUNC_TYPE_PROJECT8_ADDSPDINMOVING":                 208,
		"RES_SKILLFUNC_TYPE_MAGICHURT_CRITICAL_ENABLE":               210,
		"RES_SKILLFUNC_TYPE_PROJECT8_CHANGE_INIT_ENERGY":             211,
		"RES_SKILLFUNC_TYPE_PROJECT8_TAUNT":                          212,
		"RES_SKILLFUNC_TYPE_SELF_RECOVER_SELF":                       213,
		"RES_SKILLFUNC_TYPE_PROJECT8_RECOVER_ENERGY":                 214,
		"RES_SKILLFUNC_TYPE_REALHURT_CRITICAL_ENABLE":                215,
		"RES_SKILLFUNC_TYPE_EXTRA_DURATION_SKILL":                    216,
		"RES_SKILLFUNC_TYPE_ADD_SOURCE_HEAL_RATE":                    217,
		"RES_SKILLFUNC_TYPE_DEC_SOURCE_HEAL_RATE":                    218,
		"RES_SKILLFUNC_TYPE_ADD_TARGET_HEAL_RATE":                    219,
		"RES_SKILLFUNC_TYPE_DEC_TARGET_HEAL_RATE":                    220,
		"RES_SKILLFUNC_TYPE_ADD_TRUE_DAMAGE_LIFE_STEAL_RATE":         221,
		"RES_SKILLFUNC_TYPE_DEC_TRUE_DAMAGE_LIFE_STEAL_RATE":         222,
		"RES_SKILLFUNC_TYPE_DAMAGE_TRANSFER_SHIELD":                  223,
		"RES_SKILLFUNC_TYPE_HURT_TRANSFER_SHIELD":                    224,
		"RES_SKILLFUNC_TYPE_OVERFLOW_HEAL_TRANSFER_SHIELD":           225,
		"RES_SKILLFUNC_TYPE_CONST_TARGET_OUTPUT_RATE":                226,
		"RES_SKILLFUNC_TYPE_CONST_SOURCE_REDUCE_RATE":                227,
		"RES_SKILLFUNC_TYPE_SLOT_TYPE_OUTPUT_RATE":                   228,
		"RES_SKILLFUNC_TYPE_SLOT_TYPE_REDUCE_RATE":                   229,
		"RES_SKILLFUNC_TYPE_DAMAGE_ORB_EFFECT":                       230,
		"RES_SKILLFUNC_TYPE_HURT_ORB_EFFECT":                         231,
		"RES_SKILLFUNC_TYPE_SKILL_ATTACK_RANGE":                      232,
		"RES_SKILLFUNC_TYPE_ADD_HIT_AVOID_RATE":                      233,
		"RES_SKILLFUNC_TYPE_DEC_HIT_AVOID_RATE":                      234,
		"RES_SKILLFUNC_TYPE_ADD_HIT_RATE":                            235,
		"RES_SKILLFUNC_TYPE_DEC_HIT_RATE":                            236,
		"RES_SKILLFUNC_TYPE_DAMAGE_BLOCK":                            237,
		"RES_SKILLFUNC_TYPE_LOW_PRIORITY_TARGET":                     238,
		"RES_SKILLFUNC_TYPE_TARGET_OUTPUT_RATE":                      239,
		"RES_SKILLFUNC_TYPE_CHANGE_INCMAXEP":                         240,
		"RES_SKILLFUNC_TYPE_CHANGE_DECMAXEP":                         241,
		"RES_SKILLFUNC_TYPE_ADD_HEAL_DEBUFF_RATE":                    242,
		"RES_SKILLFUNC_TYPE_DEC_HEAL_DEBUFF_RATE":                    243,
		"RES_SKILLFUNC_TYPE_CHANGE_REATHURT_RATE":                    244,
		"RES_SKILLFUNC_TYPE_DAMAGE_ORB_EFFECT_ONLY_ONCE":             245,
		"RES_SKILLFUNC_TYPE_DAMAGE_ORB_EFFECT_SELECTED_BUFF_ID":      246,
		"RES_SKILLFUNC_TYPE_DAMAGE_ORB_EFFECT_HAS_HURT":              247,
		"RES_SKILLFUNC_TYPE_NEW_CHANGE_PROPERTY":                     248,
		"RES_SKILLFUNC_TYPE_SLOT_TYPE_PROBABILITY_OUTPUT_RATE":       249,
		"RES_SKILLFUNC_TYPE_STEAL_HP_ACCORDING_HURT":                 250,
		"RES_SKILLFUNC_TYPE_CERTAIN_CRIT":                            251,
		"RES_SKILLFUNC_TYPE_HEAL_ORB":                                252,
		"RES_SKILLFUNC_TYPE_SHIELD_ORB":                              253,
		"RES_SKILLFUNC_TYPE_TARGET_STAR_DAMAGE":                      254,
		"RES_SKILLFUNC_TYPE_DEADLY_DAMAGE":                           255,
		"RES_SKILLFUNC_TYPE_SHIELD_ADD_RATE":                         256,
		"RES_SKILLFUNC_TYPE_PROPERTY_TRANSFORM_EXTRA_DAMAGE":         257,
		"RES_SKILLFUNC_TYPE_SKILL_DAMAGE_ATTENUATION_TO_SAME_TARGET": 258,
		"RES_SKILLFUNC_TYPE_HURT_ORB_EFFECT_ONLY_ONCE_EACH_TARGET":   259,
		"RES_SKILLFUNC_TYPE_RELATIVE_DIVIDE_DAMAGE":                  260,
		"RES_SKILLFUNC_TYPE_EXTRA_DAMAGE":                            261,
		"RES_SKILLFUNC_TYPE_CHANGE_PROPERTY_UPPER_LIMIT":             262,
		"RES_SKILLFUNC_TYPE_DELAYDAMAGE_MODIFYCONVERTRATE":           263,
		"RES_SKILLFUNC_TYPE_CHANGE_BUFF_OVERLAYMAX":                  264,
		"RES_SKILLFUNC_TYPE_CHANGE_PROPERTY_BASE_VALUE":              265,
		"RES_SKILLFUNC_TYPE_SHIELD_RELATIVE_ORB":                     266,
		"RES_SKILLFUNC_TYPE_HEAL_RELATIVE_ORB":                       267,
		"RES_SKILLFUNC_TYPE_LAST":                                    268,
	}
)

func (x RES_SKILLFUNC_TYPE) Enum() *RES_SKILLFUNC_TYPE {
	p := new(RES_SKILLFUNC_TYPE)
	*p = x
	return p
}

func (x RES_SKILLFUNC_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_SKILLFUNC_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[20].Descriptor()
}

func (RES_SKILLFUNC_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[20]
}

func (x RES_SKILLFUNC_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_SKILLFUNC_TYPE.Descriptor instead.
func (RES_SKILLFUNC_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{20}
}

type RES_SCENE_TYPE int32

const (
	RES_SCENE_TYPE_RES_SCENE_TYPE_Default      RES_SCENE_TYPE = 0
	RES_SCENE_TYPE_RES_SCENE_TYPE_WANGZHEXIAGU RES_SCENE_TYPE = 1
)

// Enum value maps for RES_SCENE_TYPE.
var (
	RES_SCENE_TYPE_name = map[int32]string{
		0: "RES_SCENE_TYPE_Default",
		1: "RES_SCENE_TYPE_WANGZHEXIAGU",
	}
	RES_SCENE_TYPE_value = map[string]int32{
		"RES_SCENE_TYPE_Default":      0,
		"RES_SCENE_TYPE_WANGZHEXIAGU": 1,
	}
)

func (x RES_SCENE_TYPE) Enum() *RES_SCENE_TYPE {
	p := new(RES_SCENE_TYPE)
	*p = x
	return p
}

func (x RES_SCENE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_SCENE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[21].Descriptor()
}

func (RES_SCENE_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[21]
}

func (x RES_SCENE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_SCENE_TYPE.Descriptor instead.
func (RES_SCENE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{21}
}

type RES_FUNCEFT_TYPE int32

const (
	RES_FUNCEFT_TYPE_RES_FUNCEFT_NONE                     RES_FUNCEFT_TYPE = 0
	RES_FUNCEFT_TYPE_RES_FUNCEFT_PHYATKPT                 RES_FUNCEFT_TYPE = 1
	RES_FUNCEFT_TYPE_RES_FUNCEFT_MGCATKPT                 RES_FUNCEFT_TYPE = 2
	RES_FUNCEFT_TYPE_RES_FUNCEFT_PHYDEFPT                 RES_FUNCEFT_TYPE = 3
	RES_FUNCEFT_TYPE_RES_FUNCEFT_MGCDEFPT                 RES_FUNCEFT_TYPE = 4
	RES_FUNCEFT_TYPE_RES_FUNCEFT_MAXHP                    RES_FUNCEFT_TYPE = 5
	RES_FUNCEFT_TYPE_RES_FUNCEFT_CRITRATE                 RES_FUNCEFT_TYPE = 6
	RES_FUNCEFT_TYPE_RES_FUNCEFT_PHYARMORHURT             RES_FUNCEFT_TYPE = 7
	RES_FUNCEFT_TYPE_RES_FUNCEFT_MGCARMORHURT             RES_FUNCEFT_TYPE = 8
	RES_FUNCEFT_TYPE_RES_FUNCEFT_PHYVAMP                  RES_FUNCEFT_TYPE = 9
	RES_FUNCEFT_TYPE_RES_FUNCEFT_MGCVAMP                  RES_FUNCEFT_TYPE = 10
	RES_FUNCEFT_TYPE_RES_FUNCEFT_ANTICRIT                 RES_FUNCEFT_TYPE = 11
	RES_FUNCEFT_TYPE_RES_FUNCEFT_CRITEFT                  RES_FUNCEFT_TYPE = 12
	RES_FUNCEFT_TYPE_RES_FUNCEFT_MOVESPD                  RES_FUNCEFT_TYPE = 13
	RES_FUNCEFT_TYPE_RES_FUNCEFT_CTRLREDUCE               RES_FUNCEFT_TYPE = 14
	RES_FUNCEFT_TYPE_RES_FUNCEFT_ATKSPD                   RES_FUNCEFT_TYPE = 15
	RES_FUNCEFT_TYPE_RES_FUNCEFT_CDREDUCE                 RES_FUNCEFT_TYPE = 16
	RES_FUNCEFT_TYPE_RES_FUNCEFT_HitRate                  RES_FUNCEFT_TYPE = 17
	RES_FUNCEFT_TYPE_RES_FUNCEFT_HitRateAvoid             RES_FUNCEFT_TYPE = 18
	RES_FUNCEFT_TYPE_RES_PROPERTY_HURTREDUCERATE          RES_FUNCEFT_TYPE = 19
	RES_FUNCEFT_TYPE_RES_PROPERTY_HURTOUTPUTRATE          RES_FUNCEFT_TYPE = 20
	RES_FUNCEFT_TYPE_RES_PROPERTY_MAXEP                   RES_FUNCEFT_TYPE = 21
	RES_FUNCEFT_TYPE_RES_PROPERTY_PHYARMORHURT_RATE       RES_FUNCEFT_TYPE = 22
	RES_FUNCEFT_TYPE_RES_PROPERTY_MGCARMORHURT_RATE       RES_FUNCEFT_TYPE = 23
	RES_FUNCEFT_TYPE_RES_PROPERTY_RECOVERYGAINEFFECT      RES_FUNCEFT_TYPE = 24
	RES_FUNCEFT_TYPE_RES_PROPERTY_RECOVERYOTHEREFFECT     RES_FUNCEFT_TYPE = 25
	RES_FUNCEFT_TYPE_RES_PROPERTY_REALVAMP                RES_FUNCEFT_TYPE = 26
	RES_FUNCEFT_TYPE_RES_PROPERTY_HEAL_DEBUFF_RATE        RES_FUNCEFT_TYPE = 27
	RES_FUNCEFT_TYPE_RES_PROPERTY_INIT_MAGIC              RES_FUNCEFT_TYPE = 28
	RES_FUNCEFT_TYPE_RES_PROPERTY_HURT_CRITEFFECT_ENHANCE RES_FUNCEFT_TYPE = 29
	RES_FUNCEFT_TYPE_RES_PROPERTY_HURT_CRITEFFECT_WEAKEN  RES_FUNCEFT_TYPE = 30
	RES_FUNCEFT_TYPE_RES_FUNCEFT_VALUE_LAST               RES_FUNCEFT_TYPE = 31
)

// Enum value maps for RES_FUNCEFT_TYPE.
var (
	RES_FUNCEFT_TYPE_name = map[int32]string{
		0:  "RES_FUNCEFT_NONE",
		1:  "RES_FUNCEFT_PHYATKPT",
		2:  "RES_FUNCEFT_MGCATKPT",
		3:  "RES_FUNCEFT_PHYDEFPT",
		4:  "RES_FUNCEFT_MGCDEFPT",
		5:  "RES_FUNCEFT_MAXHP",
		6:  "RES_FUNCEFT_CRITRATE",
		7:  "RES_FUNCEFT_PHYARMORHURT",
		8:  "RES_FUNCEFT_MGCARMORHURT",
		9:  "RES_FUNCEFT_PHYVAMP",
		10: "RES_FUNCEFT_MGCVAMP",
		11: "RES_FUNCEFT_ANTICRIT",
		12: "RES_FUNCEFT_CRITEFT",
		13: "RES_FUNCEFT_MOVESPD",
		14: "RES_FUNCEFT_CTRLREDUCE",
		15: "RES_FUNCEFT_ATKSPD",
		16: "RES_FUNCEFT_CDREDUCE",
		17: "RES_FUNCEFT_HitRate",
		18: "RES_FUNCEFT_HitRateAvoid",
		19: "RES_PROPERTY_HURTREDUCERATE",
		20: "RES_PROPERTY_HURTOUTPUTRATE",
		21: "RES_PROPERTY_MAXEP",
		22: "RES_PROPERTY_PHYARMORHURT_RATE",
		23: "RES_PROPERTY_MGCARMORHURT_RATE",
		24: "RES_PROPERTY_RECOVERYGAINEFFECT",
		25: "RES_PROPERTY_RECOVERYOTHEREFFECT",
		26: "RES_PROPERTY_REALVAMP",
		27: "RES_PROPERTY_HEAL_DEBUFF_RATE",
		28: "RES_PROPERTY_INIT_MAGIC",
		29: "RES_PROPERTY_HURT_CRITEFFECT_ENHANCE",
		30: "RES_PROPERTY_HURT_CRITEFFECT_WEAKEN",
		31: "RES_FUNCEFT_VALUE_LAST",
	}
	RES_FUNCEFT_TYPE_value = map[string]int32{
		"RES_FUNCEFT_NONE":                     0,
		"RES_FUNCEFT_PHYATKPT":                 1,
		"RES_FUNCEFT_MGCATKPT":                 2,
		"RES_FUNCEFT_PHYDEFPT":                 3,
		"RES_FUNCEFT_MGCDEFPT":                 4,
		"RES_FUNCEFT_MAXHP":                    5,
		"RES_FUNCEFT_CRITRATE":                 6,
		"RES_FUNCEFT_PHYARMORHURT":             7,
		"RES_FUNCEFT_MGCARMORHURT":             8,
		"RES_FUNCEFT_PHYVAMP":                  9,
		"RES_FUNCEFT_MGCVAMP":                  10,
		"RES_FUNCEFT_ANTICRIT":                 11,
		"RES_FUNCEFT_CRITEFT":                  12,
		"RES_FUNCEFT_MOVESPD":                  13,
		"RES_FUNCEFT_CTRLREDUCE":               14,
		"RES_FUNCEFT_ATKSPD":                   15,
		"RES_FUNCEFT_CDREDUCE":                 16,
		"RES_FUNCEFT_HitRate":                  17,
		"RES_FUNCEFT_HitRateAvoid":             18,
		"RES_PROPERTY_HURTREDUCERATE":          19,
		"RES_PROPERTY_HURTOUTPUTRATE":          20,
		"RES_PROPERTY_MAXEP":                   21,
		"RES_PROPERTY_PHYARMORHURT_RATE":       22,
		"RES_PROPERTY_MGCARMORHURT_RATE":       23,
		"RES_PROPERTY_RECOVERYGAINEFFECT":      24,
		"RES_PROPERTY_RECOVERYOTHEREFFECT":     25,
		"RES_PROPERTY_REALVAMP":                26,
		"RES_PROPERTY_HEAL_DEBUFF_RATE":        27,
		"RES_PROPERTY_INIT_MAGIC":              28,
		"RES_PROPERTY_HURT_CRITEFFECT_ENHANCE": 29,
		"RES_PROPERTY_HURT_CRITEFFECT_WEAKEN":  30,
		"RES_FUNCEFT_VALUE_LAST":               31,
	}
)

func (x RES_FUNCEFT_TYPE) Enum() *RES_FUNCEFT_TYPE {
	p := new(RES_FUNCEFT_TYPE)
	*p = x
	return p
}

func (x RES_FUNCEFT_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_FUNCEFT_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[22].Descriptor()
}

func (RES_FUNCEFT_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[22]
}

func (x RES_FUNCEFT_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_FUNCEFT_TYPE.Descriptor instead.
func (RES_FUNCEFT_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{22}
}

type RES_FUNCEFT_EXTEND_TYPE int32

const (
	RES_FUNCEFT_EXTEND_TYPE_RES_FUNCEFT_EXTEND_TYPE_NONE RES_FUNCEFT_EXTEND_TYPE = 0
	RES_FUNCEFT_EXTEND_TYPE_RES_FUNCEFT_START            RES_FUNCEFT_EXTEND_TYPE = 100
	RES_FUNCEFT_EXTEND_TYPE_RES_FUNCEFT_ATKRANGE         RES_FUNCEFT_EXTEND_TYPE = 101
)

// Enum value maps for RES_FUNCEFT_EXTEND_TYPE.
var (
	RES_FUNCEFT_EXTEND_TYPE_name = map[int32]string{
		0:   "RES_FUNCEFT_EXTEND_TYPE_NONE",
		100: "RES_FUNCEFT_START",
		101: "RES_FUNCEFT_ATKRANGE",
	}
	RES_FUNCEFT_EXTEND_TYPE_value = map[string]int32{
		"RES_FUNCEFT_EXTEND_TYPE_NONE": 0,
		"RES_FUNCEFT_START":            100,
		"RES_FUNCEFT_ATKRANGE":         101,
	}
)

func (x RES_FUNCEFT_EXTEND_TYPE) Enum() *RES_FUNCEFT_EXTEND_TYPE {
	p := new(RES_FUNCEFT_EXTEND_TYPE)
	*p = x
	return p
}

func (x RES_FUNCEFT_EXTEND_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_FUNCEFT_EXTEND_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[23].Descriptor()
}

func (RES_FUNCEFT_EXTEND_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[23]
}

func (x RES_FUNCEFT_EXTEND_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_FUNCEFT_EXTEND_TYPE.Descriptor instead.
func (RES_FUNCEFT_EXTEND_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{23}
}

type RES_FUNCEFT_VALUE_TYPE int32

const (
	RES_FUNCEFT_VALUE_TYPE_RES_FUNCEFT_VALUE_TYPE_NONE                RES_FUNCEFT_VALUE_TYPE = 0
	RES_FUNCEFT_VALUE_TYPE_RES_FUNCEFT_VALUE_TYPE_NUMBER              RES_FUNCEFT_VALUE_TYPE = 1
	RES_FUNCEFT_VALUE_TYPE_RES_FUNCEFT_VALUE_TYPE_PERCENTAGE          RES_FUNCEFT_VALUE_TYPE = 2
	RES_FUNCEFT_VALUE_TYPE_RES_FUNCEFT_VALUE_TYPE_BASIS_POINT         RES_FUNCEFT_VALUE_TYPE = 3
	RES_FUNCEFT_VALUE_TYPE_RES_FUNCEFT_VALUE_TYPE_ONE_PLUS_PERCENTAGE RES_FUNCEFT_VALUE_TYPE = 4
)

// Enum value maps for RES_FUNCEFT_VALUE_TYPE.
var (
	RES_FUNCEFT_VALUE_TYPE_name = map[int32]string{
		0: "RES_FUNCEFT_VALUE_TYPE_NONE",
		1: "RES_FUNCEFT_VALUE_TYPE_NUMBER",
		2: "RES_FUNCEFT_VALUE_TYPE_PERCENTAGE",
		3: "RES_FUNCEFT_VALUE_TYPE_BASIS_POINT",
		4: "RES_FUNCEFT_VALUE_TYPE_ONE_PLUS_PERCENTAGE",
	}
	RES_FUNCEFT_VALUE_TYPE_value = map[string]int32{
		"RES_FUNCEFT_VALUE_TYPE_NONE":                0,
		"RES_FUNCEFT_VALUE_TYPE_NUMBER":              1,
		"RES_FUNCEFT_VALUE_TYPE_PERCENTAGE":          2,
		"RES_FUNCEFT_VALUE_TYPE_BASIS_POINT":         3,
		"RES_FUNCEFT_VALUE_TYPE_ONE_PLUS_PERCENTAGE": 4,
	}
)

func (x RES_FUNCEFT_VALUE_TYPE) Enum() *RES_FUNCEFT_VALUE_TYPE {
	p := new(RES_FUNCEFT_VALUE_TYPE)
	*p = x
	return p
}

func (x RES_FUNCEFT_VALUE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_FUNCEFT_VALUE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[24].Descriptor()
}

func (RES_FUNCEFT_VALUE_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[24]
}

func (x RES_FUNCEFT_VALUE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_FUNCEFT_VALUE_TYPE.Descriptor instead.
func (RES_FUNCEFT_VALUE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{24}
}

type RES_GLOBAL_CONF_TYPE int32

const (
	RES_GLOBAL_CONF_TYPE_RES_GLOBAL_CONF_TYPE_NULL                                       RES_GLOBAL_CONF_TYPE = 0
	RES_GLOBAL_CONF_TYPE_RES_GLOBAL_CONF_TYPE_TD_HERO_POSSESS_EQUIP_COUNT                RES_GLOBAL_CONF_TYPE = 1
	RES_GLOBAL_CONF_TYPE_RES_GLOBAL_CONF_TYPE_PLAYER_QUIT_HP                             RES_GLOBAL_CONF_TYPE = 8
	RES_GLOBAL_CONF_TYPE_RES_GLOBAL_CONF_TYPE_TD_DEAD_EFFECT_BUFF_ID                     RES_GLOBAL_CONF_TYPE = 9
	RES_GLOBAL_CONF_TYPE_RES_GLOBAL_CONF_TYPE_RACE_INIT                                  RES_GLOBAL_CONF_TYPE = 12
	RES_GLOBAL_CONF_TYPE_RES_GLOBAL_CONF_TYPE_RACE_LORD                                  RES_GLOBAL_CONF_TYPE = 13
	RES_GLOBAL_CONF_TYPE_RES_GLOBAL_CONF_TYPE_RACE_EQUIP                                 RES_GLOBAL_CONF_TYPE = 14
	RES_GLOBAL_CONF_TYPE_RES_GLOBAL_CONF_TYPE_RACE_RELATIVE                              RES_GLOBAL_CONF_TYPE = 15
	RES_GLOBAL_CONF_TYPE_RES_GLOBAL_CONF_TYPE_RACE_ASSASSIN                              RES_GLOBAL_CONF_TYPE = 16
	RES_GLOBAL_CONF_TYPE_RES_GLOBAL_CONF_TYPE_RACE_CHESS                                 RES_GLOBAL_CONF_TYPE = 17
	RES_GLOBAL_CONF_TYPE_RES_GLOBAL_CONF_TYPE_PROJ8_FORMATION_DROP_EFFECT1               RES_GLOBAL_CONF_TYPE = 20
	RES_GLOBAL_CONF_TYPE_RES_GLOBAL_CONF_TYPE_PROJ8_FORMATION_DROP_EFFECT2               RES_GLOBAL_CONF_TYPE = 21
	RES_GLOBAL_CONF_TYPE_RES_GLOBAL_CONF_TYPE_BATTLE_ROUND_STATE_PREPARE_TELEPORTATION   RES_GLOBAL_CONF_TYPE = 43
	RES_GLOBAL_CONF_TYPE_RES_GLOBAL_CONF_TYPE_BATTLE_ROUND_STATE_SETTLE_DURATION         RES_GLOBAL_CONF_TYPE = 44
	RES_GLOBAL_CONF_TYPE_RES_GLOBAL_CONF_TYPE_BATTLE_ROUND_STATE_LOCK_DURATION           RES_GLOBAL_CONF_TYPE = 45
	RES_GLOBAL_CONF_TYPE_RES_GLOBAL_CONF_TYPE_TD_FORBID_COLLISION_BUFF_ID                RES_GLOBAL_CONF_TYPE = 46
	RES_GLOBAL_CONF_TYPE_RES_GLOBAL_CONF_TYPE_PROJ8_BASE_EQUIP_SCORE                     RES_GLOBAL_CONF_TYPE = 47
	RES_GLOBAL_CONF_TYPE_RES_GLOBAL_CONF_TYPE_PROJ8_ADVANCE_EQUIP_SCORE                  RES_GLOBAL_CONF_TYPE = 48
	RES_GLOBAL_CONF_TYPE_RES_GLOBAL_CONF_TYPE_WATCH_PLAYER_OPPONENT_SLOT_HERO_MESH_SCALE RES_GLOBAL_CONF_TYPE = 49
	RES_GLOBAL_CONF_TYPE_RES_GLOBAL_CONF_TYPE_TD_DRAG_HERO_HEIGHT                        RES_GLOBAL_CONF_TYPE = 51
	RES_GLOBAL_CONF_TYPE_RES_GLOBAL_CONF_TYPE_TD_EQUIPMENT_ICON_STATE_SHOW_TIME          RES_GLOBAL_CONF_TYPE = 52
	RES_GLOBAL_CONF_TYPE_RES_GLOBAL_CONF_TYPE_TD_EQUIPMENT_ICON_TRIGGER_SHOW_TIME        RES_GLOBAL_CONF_TYPE = 53
	RES_GLOBAL_CONF_TYPE_RES_GLOBAL_CONF_TYPE_CONTROL_SHOW_THRESHOLD                     RES_GLOBAL_CONF_TYPE = 58
	RES_GLOBAL_CONF_TYPE_RES_GLOBAL_CONF_TYPE_HOST_BLOOD_TRIGGER_THRESHOLD               RES_GLOBAL_CONF_TYPE = 59
	RES_GLOBAL_CONF_TYPE_RES_GLOBAL_CONF_TYPE_TEAMMATE_BLOOD_TRIGGER_THRESHOLD           RES_GLOBAL_CONF_TYPE = 60
	RES_GLOBAL_CONF_TYPE_RES_GLOBAL_CONF_TYPE_ARMY_BLOOD_TRIGGER_THRESHOLD               RES_GLOBAL_CONF_TYPE = 61
	RES_GLOBAL_CONF_TYPE_RES_GLOBAL_CONF_TYPE_OPEN_CHECK_FPS_SHAKE                       RES_GLOBAL_CONF_TYPE = 62
	RES_GLOBAL_CONF_TYPE_RES_GLOBAL_CONF_TYPE_OPEN_CHECK_FPS_SHAKE_REVERTPARAM           RES_GLOBAL_CONF_TYPE = 63
	RES_GLOBAL_CONF_TYPE_RES_GLOBAL_CONF_TYPE_OPEN_CHECK_FPS_SHAKE_FREQUENCY             RES_GLOBAL_CONF_TYPE = 64
	RES_GLOBAL_CONF_TYPE_RES_GLOBAL_CONF_TYPE_LOW_MEMORY_DEVICE_PARTICLE_USE_LOW         RES_GLOBAL_CONF_TYPE = 65
	RES_GLOBAL_CONF_TYPE_RES_GLOBAL_CONF_TYPE_LOW_MEMORY_STRATEGY                        RES_GLOBAL_CONF_TYPE = 66
	RES_GLOBAL_CONF_TYPE_RES_GLOBAL_CONF_TYPE_HD_RENDER_PARTICLE_DOWN_TRIGGER_NUM        RES_GLOBAL_CONF_TYPE = 67
	RES_GLOBAL_CONF_TYPE_RES_GLOBAL_CONF_TYPE_NONE_HD_RENDER_PARTICLE_DOWN_TRIGGER_NUM   RES_GLOBAL_CONF_TYPE = 68
	RES_GLOBAL_CONF_TYPE_RES_GLOBAL_CONF_TYPE_PARTICLE_TRIGGER_LEVEL_OFFSET_VALUE        RES_GLOBAL_CONF_TYPE = 69
	RES_GLOBAL_CONF_TYPE_RES_GLOBAL_CONF_TYPE_HDRPARTICLE_RATIO                          RES_GLOBAL_CONF_TYPE = 70
	RES_GLOBAL_CONF_TYPE_RES_GLOBAL_CONF_TYPE_MIN_CONTINUOUS_WIN_COUNT_BROCAST           RES_GLOBAL_CONF_TYPE = 77
	RES_GLOBAL_CONF_TYPE_RES_GLOBAL_CONF_TYPE_PREBEGIN_SHOWTIME                          RES_GLOBAL_CONF_TYPE = 78
	RES_GLOBAL_CONF_TYPE_RES_GLOBAL_CONF_TYPE_OVER_TIME_SPEED                            RES_GLOBAL_CONF_TYPE = 79
	RES_GLOBAL_CONF_TYPE_RES_GLOBAL_CONF_TYPE_SETTLE_BUFF                                RES_GLOBAL_CONF_TYPE = 80
	RES_GLOBAL_CONF_TYPE_RES_GLOBAL_CONF_TYPE_SETTLE_DAMAGE_CHARGE                       RES_GLOBAL_CONF_TYPE = 81
	RES_GLOBAL_CONF_TYPE_RES_GLOBAL_CONF_TYPE_SETTLE_AHEAD_TELEPORT                      RES_GLOBAL_CONF_TYPE = 82
	RES_GLOBAL_CONF_TYPE_RES_GLOBAL_CONF_TYPE_SETTLE_NOT_ADD_EQUIPEFFECT_WHENFIGHTING    RES_GLOBAL_CONF_TYPE = 83
	RES_GLOBAL_CONF_TYPE_RES_GLOBAL_CONF_TYPE_PREBEGIN_LORD_SHOWTIME                     RES_GLOBAL_CONF_TYPE = 84
	RES_GLOBAL_CONF_TYPE_RES_GLOBAL_CONF_TYPE_LORD_GROUND_Y                              RES_GLOBAL_CONF_TYPE = 85
)

// Enum value maps for RES_GLOBAL_CONF_TYPE.
var (
	RES_GLOBAL_CONF_TYPE_name = map[int32]string{
		0:  "RES_GLOBAL_CONF_TYPE_NULL",
		1:  "RES_GLOBAL_CONF_TYPE_TD_HERO_POSSESS_EQUIP_COUNT",
		8:  "RES_GLOBAL_CONF_TYPE_PLAYER_QUIT_HP",
		9:  "RES_GLOBAL_CONF_TYPE_TD_DEAD_EFFECT_BUFF_ID",
		12: "RES_GLOBAL_CONF_TYPE_RACE_INIT",
		13: "RES_GLOBAL_CONF_TYPE_RACE_LORD",
		14: "RES_GLOBAL_CONF_TYPE_RACE_EQUIP",
		15: "RES_GLOBAL_CONF_TYPE_RACE_RELATIVE",
		16: "RES_GLOBAL_CONF_TYPE_RACE_ASSASSIN",
		17: "RES_GLOBAL_CONF_TYPE_RACE_CHESS",
		20: "RES_GLOBAL_CONF_TYPE_PROJ8_FORMATION_DROP_EFFECT1",
		21: "RES_GLOBAL_CONF_TYPE_PROJ8_FORMATION_DROP_EFFECT2",
		43: "RES_GLOBAL_CONF_TYPE_BATTLE_ROUND_STATE_PREPARE_TELEPORTATION",
		44: "RES_GLOBAL_CONF_TYPE_BATTLE_ROUND_STATE_SETTLE_DURATION",
		45: "RES_GLOBAL_CONF_TYPE_BATTLE_ROUND_STATE_LOCK_DURATION",
		46: "RES_GLOBAL_CONF_TYPE_TD_FORBID_COLLISION_BUFF_ID",
		47: "RES_GLOBAL_CONF_TYPE_PROJ8_BASE_EQUIP_SCORE",
		48: "RES_GLOBAL_CONF_TYPE_PROJ8_ADVANCE_EQUIP_SCORE",
		49: "RES_GLOBAL_CONF_TYPE_WATCH_PLAYER_OPPONENT_SLOT_HERO_MESH_SCALE",
		51: "RES_GLOBAL_CONF_TYPE_TD_DRAG_HERO_HEIGHT",
		52: "RES_GLOBAL_CONF_TYPE_TD_EQUIPMENT_ICON_STATE_SHOW_TIME",
		53: "RES_GLOBAL_CONF_TYPE_TD_EQUIPMENT_ICON_TRIGGER_SHOW_TIME",
		58: "RES_GLOBAL_CONF_TYPE_CONTROL_SHOW_THRESHOLD",
		59: "RES_GLOBAL_CONF_TYPE_HOST_BLOOD_TRIGGER_THRESHOLD",
		60: "RES_GLOBAL_CONF_TYPE_TEAMMATE_BLOOD_TRIGGER_THRESHOLD",
		61: "RES_GLOBAL_CONF_TYPE_ARMY_BLOOD_TRIGGER_THRESHOLD",
		62: "RES_GLOBAL_CONF_TYPE_OPEN_CHECK_FPS_SHAKE",
		63: "RES_GLOBAL_CONF_TYPE_OPEN_CHECK_FPS_SHAKE_REVERTPARAM",
		64: "RES_GLOBAL_CONF_TYPE_OPEN_CHECK_FPS_SHAKE_FREQUENCY",
		65: "RES_GLOBAL_CONF_TYPE_LOW_MEMORY_DEVICE_PARTICLE_USE_LOW",
		66: "RES_GLOBAL_CONF_TYPE_LOW_MEMORY_STRATEGY",
		67: "RES_GLOBAL_CONF_TYPE_HD_RENDER_PARTICLE_DOWN_TRIGGER_NUM",
		68: "RES_GLOBAL_CONF_TYPE_NONE_HD_RENDER_PARTICLE_DOWN_TRIGGER_NUM",
		69: "RES_GLOBAL_CONF_TYPE_PARTICLE_TRIGGER_LEVEL_OFFSET_VALUE",
		70: "RES_GLOBAL_CONF_TYPE_HDRPARTICLE_RATIO",
		77: "RES_GLOBAL_CONF_TYPE_MIN_CONTINUOUS_WIN_COUNT_BROCAST",
		78: "RES_GLOBAL_CONF_TYPE_PREBEGIN_SHOWTIME",
		79: "RES_GLOBAL_CONF_TYPE_OVER_TIME_SPEED",
		80: "RES_GLOBAL_CONF_TYPE_SETTLE_BUFF",
		81: "RES_GLOBAL_CONF_TYPE_SETTLE_DAMAGE_CHARGE",
		82: "RES_GLOBAL_CONF_TYPE_SETTLE_AHEAD_TELEPORT",
		83: "RES_GLOBAL_CONF_TYPE_SETTLE_NOT_ADD_EQUIPEFFECT_WHENFIGHTING",
		84: "RES_GLOBAL_CONF_TYPE_PREBEGIN_LORD_SHOWTIME",
		85: "RES_GLOBAL_CONF_TYPE_LORD_GROUND_Y",
	}
	RES_GLOBAL_CONF_TYPE_value = map[string]int32{
		"RES_GLOBAL_CONF_TYPE_NULL":                                       0,
		"RES_GLOBAL_CONF_TYPE_TD_HERO_POSSESS_EQUIP_COUNT":                1,
		"RES_GLOBAL_CONF_TYPE_PLAYER_QUIT_HP":                             8,
		"RES_GLOBAL_CONF_TYPE_TD_DEAD_EFFECT_BUFF_ID":                     9,
		"RES_GLOBAL_CONF_TYPE_RACE_INIT":                                  12,
		"RES_GLOBAL_CONF_TYPE_RACE_LORD":                                  13,
		"RES_GLOBAL_CONF_TYPE_RACE_EQUIP":                                 14,
		"RES_GLOBAL_CONF_TYPE_RACE_RELATIVE":                              15,
		"RES_GLOBAL_CONF_TYPE_RACE_ASSASSIN":                              16,
		"RES_GLOBAL_CONF_TYPE_RACE_CHESS":                                 17,
		"RES_GLOBAL_CONF_TYPE_PROJ8_FORMATION_DROP_EFFECT1":               20,
		"RES_GLOBAL_CONF_TYPE_PROJ8_FORMATION_DROP_EFFECT2":               21,
		"RES_GLOBAL_CONF_TYPE_BATTLE_ROUND_STATE_PREPARE_TELEPORTATION":   43,
		"RES_GLOBAL_CONF_TYPE_BATTLE_ROUND_STATE_SETTLE_DURATION":         44,
		"RES_GLOBAL_CONF_TYPE_BATTLE_ROUND_STATE_LOCK_DURATION":           45,
		"RES_GLOBAL_CONF_TYPE_TD_FORBID_COLLISION_BUFF_ID":                46,
		"RES_GLOBAL_CONF_TYPE_PROJ8_BASE_EQUIP_SCORE":                     47,
		"RES_GLOBAL_CONF_TYPE_PROJ8_ADVANCE_EQUIP_SCORE":                  48,
		"RES_GLOBAL_CONF_TYPE_WATCH_PLAYER_OPPONENT_SLOT_HERO_MESH_SCALE": 49,
		"RES_GLOBAL_CONF_TYPE_TD_DRAG_HERO_HEIGHT":                        51,
		"RES_GLOBAL_CONF_TYPE_TD_EQUIPMENT_ICON_STATE_SHOW_TIME":          52,
		"RES_GLOBAL_CONF_TYPE_TD_EQUIPMENT_ICON_TRIGGER_SHOW_TIME":        53,
		"RES_GLOBAL_CONF_TYPE_CONTROL_SHOW_THRESHOLD":                     58,
		"RES_GLOBAL_CONF_TYPE_HOST_BLOOD_TRIGGER_THRESHOLD":               59,
		"RES_GLOBAL_CONF_TYPE_TEAMMATE_BLOOD_TRIGGER_THRESHOLD":           60,
		"RES_GLOBAL_CONF_TYPE_ARMY_BLOOD_TRIGGER_THRESHOLD":               61,
		"RES_GLOBAL_CONF_TYPE_OPEN_CHECK_FPS_SHAKE":                       62,
		"RES_GLOBAL_CONF_TYPE_OPEN_CHECK_FPS_SHAKE_REVERTPARAM":           63,
		"RES_GLOBAL_CONF_TYPE_OPEN_CHECK_FPS_SHAKE_FREQUENCY":             64,
		"RES_GLOBAL_CONF_TYPE_LOW_MEMORY_DEVICE_PARTICLE_USE_LOW":         65,
		"RES_GLOBAL_CONF_TYPE_LOW_MEMORY_STRATEGY":                        66,
		"RES_GLOBAL_CONF_TYPE_HD_RENDER_PARTICLE_DOWN_TRIGGER_NUM":        67,
		"RES_GLOBAL_CONF_TYPE_NONE_HD_RENDER_PARTICLE_DOWN_TRIGGER_NUM":   68,
		"RES_GLOBAL_CONF_TYPE_PARTICLE_TRIGGER_LEVEL_OFFSET_VALUE":        69,
		"RES_GLOBAL_CONF_TYPE_HDRPARTICLE_RATIO":                          70,
		"RES_GLOBAL_CONF_TYPE_MIN_CONTINUOUS_WIN_COUNT_BROCAST":           77,
		"RES_GLOBAL_CONF_TYPE_PREBEGIN_SHOWTIME":                          78,
		"RES_GLOBAL_CONF_TYPE_OVER_TIME_SPEED":                            79,
		"RES_GLOBAL_CONF_TYPE_SETTLE_BUFF":                                80,
		"RES_GLOBAL_CONF_TYPE_SETTLE_DAMAGE_CHARGE":                       81,
		"RES_GLOBAL_CONF_TYPE_SETTLE_AHEAD_TELEPORT":                      82,
		"RES_GLOBAL_CONF_TYPE_SETTLE_NOT_ADD_EQUIPEFFECT_WHENFIGHTING":    83,
		"RES_GLOBAL_CONF_TYPE_PREBEGIN_LORD_SHOWTIME":                     84,
		"RES_GLOBAL_CONF_TYPE_LORD_GROUND_Y":                              85,
	}
)

func (x RES_GLOBAL_CONF_TYPE) Enum() *RES_GLOBAL_CONF_TYPE {
	p := new(RES_GLOBAL_CONF_TYPE)
	*p = x
	return p
}

func (x RES_GLOBAL_CONF_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_GLOBAL_CONF_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[25].Descriptor()
}

func (RES_GLOBAL_CONF_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[25]
}

func (x RES_GLOBAL_CONF_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_GLOBAL_CONF_TYPE.Descriptor instead.
func (RES_GLOBAL_CONF_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{25}
}

type RES_COMPARE_OPERATOR_TYPE int32

const (
	RES_COMPARE_OPERATOR_TYPE_RES_COMPARE_OPERATOR_TYPE_NULL         RES_COMPARE_OPERATOR_TYPE = 0
	RES_COMPARE_OPERATOR_TYPE_RES_COMPARE_OPERATOR_TYPE_LESS         RES_COMPARE_OPERATOR_TYPE = 1
	RES_COMPARE_OPERATOR_TYPE_RES_COMPARE_OPERATOR_TYPE_LESS_EQUAL   RES_COMPARE_OPERATOR_TYPE = 2
	RES_COMPARE_OPERATOR_TYPE_RES_COMPARE_OPERATOR_TYPE_EQUAL        RES_COMPARE_OPERATOR_TYPE = 3
	RES_COMPARE_OPERATOR_TYPE_RES_COMPARE_OPERATOR_TYPE_BIGGER       RES_COMPARE_OPERATOR_TYPE = 4
	RES_COMPARE_OPERATOR_TYPE_RES_COMPARE_OPERATOR_TYPE_BIGGER_EQUAL RES_COMPARE_OPERATOR_TYPE = 5
	RES_COMPARE_OPERATOR_TYPE_RES_COMPARE_OPERATOR_TYPE_OverFlow     RES_COMPARE_OPERATOR_TYPE = 6
	RES_COMPARE_OPERATOR_TYPE_RES_COMPARE_OPERATOR_TYPE_LAST         RES_COMPARE_OPERATOR_TYPE = 7
)

// Enum value maps for RES_COMPARE_OPERATOR_TYPE.
var (
	RES_COMPARE_OPERATOR_TYPE_name = map[int32]string{
		0: "RES_COMPARE_OPERATOR_TYPE_NULL",
		1: "RES_COMPARE_OPERATOR_TYPE_LESS",
		2: "RES_COMPARE_OPERATOR_TYPE_LESS_EQUAL",
		3: "RES_COMPARE_OPERATOR_TYPE_EQUAL",
		4: "RES_COMPARE_OPERATOR_TYPE_BIGGER",
		5: "RES_COMPARE_OPERATOR_TYPE_BIGGER_EQUAL",
		6: "RES_COMPARE_OPERATOR_TYPE_OverFlow",
		7: "RES_COMPARE_OPERATOR_TYPE_LAST",
	}
	RES_COMPARE_OPERATOR_TYPE_value = map[string]int32{
		"RES_COMPARE_OPERATOR_TYPE_NULL":         0,
		"RES_COMPARE_OPERATOR_TYPE_LESS":         1,
		"RES_COMPARE_OPERATOR_TYPE_LESS_EQUAL":   2,
		"RES_COMPARE_OPERATOR_TYPE_EQUAL":        3,
		"RES_COMPARE_OPERATOR_TYPE_BIGGER":       4,
		"RES_COMPARE_OPERATOR_TYPE_BIGGER_EQUAL": 5,
		"RES_COMPARE_OPERATOR_TYPE_OverFlow":     6,
		"RES_COMPARE_OPERATOR_TYPE_LAST":         7,
	}
)

func (x RES_COMPARE_OPERATOR_TYPE) Enum() *RES_COMPARE_OPERATOR_TYPE {
	p := new(RES_COMPARE_OPERATOR_TYPE)
	*p = x
	return p
}

func (x RES_COMPARE_OPERATOR_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_COMPARE_OPERATOR_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[26].Descriptor()
}

func (RES_COMPARE_OPERATOR_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[26]
}

func (x RES_COMPARE_OPERATOR_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_COMPARE_OPERATOR_TYPE.Descriptor instead.
func (RES_COMPARE_OPERATOR_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{26}
}

type RES_HERO_TYPE int32

const (
	RES_HERO_TYPE_RES_HERO_TYPE_Default  RES_HERO_TYPE = 0
	RES_HERO_TYPE_RES_HEROTYPE_ATTACK    RES_HERO_TYPE = 1
	RES_HERO_TYPE_RES_HEROTYPE_ALLAROUND RES_HERO_TYPE = 2
	RES_HERO_TYPE_RES_HEROTYPE_DEFENSE   RES_HERO_TYPE = 3
	RES_HERO_TYPE_RES_HEROTYPE_AID       RES_HERO_TYPE = 4
)

// Enum value maps for RES_HERO_TYPE.
var (
	RES_HERO_TYPE_name = map[int32]string{
		0: "RES_HERO_TYPE_Default",
		1: "RES_HEROTYPE_ATTACK",
		2: "RES_HEROTYPE_ALLAROUND",
		3: "RES_HEROTYPE_DEFENSE",
		4: "RES_HEROTYPE_AID",
	}
	RES_HERO_TYPE_value = map[string]int32{
		"RES_HERO_TYPE_Default":  0,
		"RES_HEROTYPE_ATTACK":    1,
		"RES_HEROTYPE_ALLAROUND": 2,
		"RES_HEROTYPE_DEFENSE":   3,
		"RES_HEROTYPE_AID":       4,
	}
)

func (x RES_HERO_TYPE) Enum() *RES_HERO_TYPE {
	p := new(RES_HERO_TYPE)
	*p = x
	return p
}

func (x RES_HERO_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_HERO_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[27].Descriptor()
}

func (RES_HERO_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[27]
}

func (x RES_HERO_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_HERO_TYPE.Descriptor instead.
func (RES_HERO_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{27}
}

type RES_HERO_JOB int32

const (
	RES_HERO_JOB_RES_HEROJOB_NULL     RES_HERO_JOB = 0
	RES_HERO_JOB_RES_HEROJOB_TANK     RES_HERO_JOB = 1
	RES_HERO_JOB_RES_HEROJOB_SOLDIER  RES_HERO_JOB = 2
	RES_HERO_JOB_RES_HEROJOB_ASSASSIN RES_HERO_JOB = 3
	RES_HERO_JOB_RES_HEROJOB_MASTER   RES_HERO_JOB = 4
	RES_HERO_JOB_RES_HEROJOB_ARCHER   RES_HERO_JOB = 5
	RES_HERO_JOB_RES_HEROJOB_AID      RES_HERO_JOB = 6
	RES_HERO_JOB_RES_HEROJOB_LAST     RES_HERO_JOB = 7
)

// Enum value maps for RES_HERO_JOB.
var (
	RES_HERO_JOB_name = map[int32]string{
		0: "RES_HEROJOB_NULL",
		1: "RES_HEROJOB_TANK",
		2: "RES_HEROJOB_SOLDIER",
		3: "RES_HEROJOB_ASSASSIN",
		4: "RES_HEROJOB_MASTER",
		5: "RES_HEROJOB_ARCHER",
		6: "RES_HEROJOB_AID",
		7: "RES_HEROJOB_LAST",
	}
	RES_HERO_JOB_value = map[string]int32{
		"RES_HEROJOB_NULL":     0,
		"RES_HEROJOB_TANK":     1,
		"RES_HEROJOB_SOLDIER":  2,
		"RES_HEROJOB_ASSASSIN": 3,
		"RES_HEROJOB_MASTER":   4,
		"RES_HEROJOB_ARCHER":   5,
		"RES_HEROJOB_AID":      6,
		"RES_HEROJOB_LAST":     7,
	}
)

func (x RES_HERO_JOB) Enum() *RES_HERO_JOB {
	p := new(RES_HERO_JOB)
	*p = x
	return p
}

func (x RES_HERO_JOB) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_HERO_JOB) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[28].Descriptor()
}

func (RES_HERO_JOB) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[28]
}

func (x RES_HERO_JOB) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_HERO_JOB.Descriptor instead.
func (RES_HERO_JOB) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{28}
}

type RES_ATTACKDISTANCE_TYPE int32

const (
	RES_ATTACKDISTANCE_TYPE_RES_ATTACKDISTANCE_TYPE_Default RES_ATTACKDISTANCE_TYPE = 0
	RES_ATTACKDISTANCE_TYPE_RES_ATTACKDISTANCE_TYPE_MELEE   RES_ATTACKDISTANCE_TYPE = 1
	RES_ATTACKDISTANCE_TYPE_RES_ATTACKDISTANCE_TYPE_REMOTE  RES_ATTACKDISTANCE_TYPE = 2
)

// Enum value maps for RES_ATTACKDISTANCE_TYPE.
var (
	RES_ATTACKDISTANCE_TYPE_name = map[int32]string{
		0: "RES_ATTACKDISTANCE_TYPE_Default",
		1: "RES_ATTACKDISTANCE_TYPE_MELEE",
		2: "RES_ATTACKDISTANCE_TYPE_REMOTE",
	}
	RES_ATTACKDISTANCE_TYPE_value = map[string]int32{
		"RES_ATTACKDISTANCE_TYPE_Default": 0,
		"RES_ATTACKDISTANCE_TYPE_MELEE":   1,
		"RES_ATTACKDISTANCE_TYPE_REMOTE":  2,
	}
)

func (x RES_ATTACKDISTANCE_TYPE) Enum() *RES_ATTACKDISTANCE_TYPE {
	p := new(RES_ATTACKDISTANCE_TYPE)
	*p = x
	return p
}

func (x RES_ATTACKDISTANCE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_ATTACKDISTANCE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[29].Descriptor()
}

func (RES_ATTACKDISTANCE_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[29]
}

func (x RES_ATTACKDISTANCE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_ATTACKDISTANCE_TYPE.Descriptor instead.
func (RES_ATTACKDISTANCE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{29}
}

type RES_MONSTER_GRADE int32

const (
	RES_MONSTER_GRADE_RES_MONSTER_GRADE_Default  RES_MONSTER_GRADE = 0
	RES_MONSTER_GRADE_RES_MONSTER_GRADE_NORMAL   RES_MONSTER_GRADE = 1
	RES_MONSTER_GRADE_RES_MONSTER_GRADE_CHEST    RES_MONSTER_GRADE = 2
	RES_MONSTER_GRADE_RES_MONSTER_GRADE_ADVANCED RES_MONSTER_GRADE = 3
)

// Enum value maps for RES_MONSTER_GRADE.
var (
	RES_MONSTER_GRADE_name = map[int32]string{
		0: "RES_MONSTER_GRADE_Default",
		1: "RES_MONSTER_GRADE_NORMAL",
		2: "RES_MONSTER_GRADE_CHEST",
		3: "RES_MONSTER_GRADE_ADVANCED",
	}
	RES_MONSTER_GRADE_value = map[string]int32{
		"RES_MONSTER_GRADE_Default":  0,
		"RES_MONSTER_GRADE_NORMAL":   1,
		"RES_MONSTER_GRADE_CHEST":    2,
		"RES_MONSTER_GRADE_ADVANCED": 3,
	}
)

func (x RES_MONSTER_GRADE) Enum() *RES_MONSTER_GRADE {
	p := new(RES_MONSTER_GRADE)
	*p = x
	return p
}

func (x RES_MONSTER_GRADE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_MONSTER_GRADE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[30].Descriptor()
}

func (RES_MONSTER_GRADE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[30]
}

func (x RES_MONSTER_GRADE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_MONSTER_GRADE.Descriptor instead.
func (RES_MONSTER_GRADE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{30}
}

type RES_RANDOM_TYPE int32

const (
	RES_RANDOM_TYPE_RES_RANDOM_TYPE_NONE      RES_RANDOM_TYPE = 0
	RES_RANDOM_TYPE_RES_RANDOM_TYPE_NORMAL    RES_RANDOM_TYPE = 1
	RES_RANDOM_TYPE_RES_RANDOM_TYPE_UNIQUE    RES_RANDOM_TYPE = 2
	RES_RANDOM_TYPE_RES_RANDOM_TYPE_REPUNIQUE RES_RANDOM_TYPE = 3
)

// Enum value maps for RES_RANDOM_TYPE.
var (
	RES_RANDOM_TYPE_name = map[int32]string{
		0: "RES_RANDOM_TYPE_NONE",
		1: "RES_RANDOM_TYPE_NORMAL",
		2: "RES_RANDOM_TYPE_UNIQUE",
		3: "RES_RANDOM_TYPE_REPUNIQUE",
	}
	RES_RANDOM_TYPE_value = map[string]int32{
		"RES_RANDOM_TYPE_NONE":      0,
		"RES_RANDOM_TYPE_NORMAL":    1,
		"RES_RANDOM_TYPE_UNIQUE":    2,
		"RES_RANDOM_TYPE_REPUNIQUE": 3,
	}
)

func (x RES_RANDOM_TYPE) Enum() *RES_RANDOM_TYPE {
	p := new(RES_RANDOM_TYPE)
	*p = x
	return p
}

func (x RES_RANDOM_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_RANDOM_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[31].Descriptor()
}

func (RES_RANDOM_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[31]
}

func (x RES_RANDOM_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_RANDOM_TYPE.Descriptor instead.
func (RES_RANDOM_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{31}
}

type RES_ATKSPEED_TYPE int32

const (
	RES_ATKSPEED_TYPE_RES_ATKSPEED_TYPE_Default RES_ATKSPEED_TYPE = 0
	RES_ATKSPEED_TYPE_RES_ATKSPEED_TYPE_HIGH    RES_ATKSPEED_TYPE = 1
)

// Enum value maps for RES_ATKSPEED_TYPE.
var (
	RES_ATKSPEED_TYPE_name = map[int32]string{
		0: "RES_ATKSPEED_TYPE_Default",
		1: "RES_ATKSPEED_TYPE_HIGH",
	}
	RES_ATKSPEED_TYPE_value = map[string]int32{
		"RES_ATKSPEED_TYPE_Default": 0,
		"RES_ATKSPEED_TYPE_HIGH":    1,
	}
)

func (x RES_ATKSPEED_TYPE) Enum() *RES_ATKSPEED_TYPE {
	p := new(RES_ATKSPEED_TYPE)
	*p = x
	return p
}

func (x RES_ATKSPEED_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_ATKSPEED_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[32].Descriptor()
}

func (RES_ATKSPEED_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[32]
}

func (x RES_ATKSPEED_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_ATKSPEED_TYPE.Descriptor instead.
func (RES_ATKSPEED_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{32}
}

type RES_DROP_PROBABILITY_TYPE int32

const (
	RES_DROP_PROBABILITY_TYPE_RES_DROP_PROBABILITY_TYPE_Default RES_DROP_PROBABILITY_TYPE = 0
	RES_DROP_PROBABILITY_TYPE_RES_PROBABILITY_THREE             RES_DROP_PROBABILITY_TYPE = 3
	RES_DROP_PROBABILITY_TYPE_RES_PROBABILITY_TEN               RES_DROP_PROBABILITY_TYPE = 10
	RES_DROP_PROBABILITY_TYPE_RES_PROBABILITY_FIFTY             RES_DROP_PROBABILITY_TYPE = 50
	RES_DROP_PROBABILITY_TYPE_RES_PROBABILITY_HUNDRED           RES_DROP_PROBABILITY_TYPE = 100
	RES_DROP_PROBABILITY_TYPE_RES_PROBABILITY_SETTLE            RES_DROP_PROBABILITY_TYPE = 101
)

// Enum value maps for RES_DROP_PROBABILITY_TYPE.
var (
	RES_DROP_PROBABILITY_TYPE_name = map[int32]string{
		0:   "RES_DROP_PROBABILITY_TYPE_Default",
		3:   "RES_PROBABILITY_THREE",
		10:  "RES_PROBABILITY_TEN",
		50:  "RES_PROBABILITY_FIFTY",
		100: "RES_PROBABILITY_HUNDRED",
		101: "RES_PROBABILITY_SETTLE",
	}
	RES_DROP_PROBABILITY_TYPE_value = map[string]int32{
		"RES_DROP_PROBABILITY_TYPE_Default": 0,
		"RES_PROBABILITY_THREE":             3,
		"RES_PROBABILITY_TEN":               10,
		"RES_PROBABILITY_FIFTY":             50,
		"RES_PROBABILITY_HUNDRED":           100,
		"RES_PROBABILITY_SETTLE":            101,
	}
)

func (x RES_DROP_PROBABILITY_TYPE) Enum() *RES_DROP_PROBABILITY_TYPE {
	p := new(RES_DROP_PROBABILITY_TYPE)
	*p = x
	return p
}

func (x RES_DROP_PROBABILITY_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_DROP_PROBABILITY_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[33].Descriptor()
}

func (RES_DROP_PROBABILITY_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[33]
}

func (x RES_DROP_PROBABILITY_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_DROP_PROBABILITY_TYPE.Descriptor instead.
func (RES_DROP_PROBABILITY_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{33}
}

type RES_LOGIC_OPERATION_TYPE int32

const (
	RES_LOGIC_OPERATION_TYPE_RES_LOGIC_OPERATION_AND RES_LOGIC_OPERATION_TYPE = 0
	RES_LOGIC_OPERATION_TYPE_RES_LOGIC_OPERATION_OR  RES_LOGIC_OPERATION_TYPE = 1
)

// Enum value maps for RES_LOGIC_OPERATION_TYPE.
var (
	RES_LOGIC_OPERATION_TYPE_name = map[int32]string{
		0: "RES_LOGIC_OPERATION_AND",
		1: "RES_LOGIC_OPERATION_OR",
	}
	RES_LOGIC_OPERATION_TYPE_value = map[string]int32{
		"RES_LOGIC_OPERATION_AND": 0,
		"RES_LOGIC_OPERATION_OR":  1,
	}
)

func (x RES_LOGIC_OPERATION_TYPE) Enum() *RES_LOGIC_OPERATION_TYPE {
	p := new(RES_LOGIC_OPERATION_TYPE)
	*p = x
	return p
}

func (x RES_LOGIC_OPERATION_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_LOGIC_OPERATION_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[34].Descriptor()
}

func (RES_LOGIC_OPERATION_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[34]
}

func (x RES_LOGIC_OPERATION_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_LOGIC_OPERATION_TYPE.Descriptor instead.
func (RES_LOGIC_OPERATION_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{34}
}

type RES_GAME_TASK_ACHIEVE_TYPE int32

const (
	RES_GAME_TASK_ACHIEVE_TYPE_ACHIEVE  RES_GAME_TASK_ACHIEVE_TYPE = 0
	RES_GAME_TASK_ACHIEVE_TYPE_OBSTRUCT RES_GAME_TASK_ACHIEVE_TYPE = 1
)

// Enum value maps for RES_GAME_TASK_ACHIEVE_TYPE.
var (
	RES_GAME_TASK_ACHIEVE_TYPE_name = map[int32]string{
		0: "ACHIEVE",
		1: "OBSTRUCT",
	}
	RES_GAME_TASK_ACHIEVE_TYPE_value = map[string]int32{
		"ACHIEVE":  0,
		"OBSTRUCT": 1,
	}
)

func (x RES_GAME_TASK_ACHIEVE_TYPE) Enum() *RES_GAME_TASK_ACHIEVE_TYPE {
	p := new(RES_GAME_TASK_ACHIEVE_TYPE)
	*p = x
	return p
}

func (x RES_GAME_TASK_ACHIEVE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_GAME_TASK_ACHIEVE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[35].Descriptor()
}

func (RES_GAME_TASK_ACHIEVE_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[35]
}

func (x RES_GAME_TASK_ACHIEVE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_GAME_TASK_ACHIEVE_TYPE.Descriptor instead.
func (RES_GAME_TASK_ACHIEVE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{35}
}

type RES_HERO_RECOMMEND_POSITION int32

const (
	RES_HERO_RECOMMEND_POSITION_RES_HERO_RECOMMEND_POSITION_T_FRONT  RES_HERO_RECOMMEND_POSITION = 0
	RES_HERO_RECOMMEND_POSITION_RES_HERO_RECOMMEND_POSITION_T_CENTER RES_HERO_RECOMMEND_POSITION = 1
	RES_HERO_RECOMMEND_POSITION_RES_HERO_RECOMMEND_POSITION_T_TAIL   RES_HERO_RECOMMEND_POSITION = 2
)

// Enum value maps for RES_HERO_RECOMMEND_POSITION.
var (
	RES_HERO_RECOMMEND_POSITION_name = map[int32]string{
		0: "RES_HERO_RECOMMEND_POSITION_T_FRONT",
		1: "RES_HERO_RECOMMEND_POSITION_T_CENTER",
		2: "RES_HERO_RECOMMEND_POSITION_T_TAIL",
	}
	RES_HERO_RECOMMEND_POSITION_value = map[string]int32{
		"RES_HERO_RECOMMEND_POSITION_T_FRONT":  0,
		"RES_HERO_RECOMMEND_POSITION_T_CENTER": 1,
		"RES_HERO_RECOMMEND_POSITION_T_TAIL":   2,
	}
)

func (x RES_HERO_RECOMMEND_POSITION) Enum() *RES_HERO_RECOMMEND_POSITION {
	p := new(RES_HERO_RECOMMEND_POSITION)
	*p = x
	return p
}

func (x RES_HERO_RECOMMEND_POSITION) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_HERO_RECOMMEND_POSITION) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[36].Descriptor()
}

func (RES_HERO_RECOMMEND_POSITION) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[36]
}

func (x RES_HERO_RECOMMEND_POSITION) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_HERO_RECOMMEND_POSITION.Descriptor instead.
func (RES_HERO_RECOMMEND_POSITION) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{36}
}

type RESTRICT_TYPE int32

const (
	RESTRICT_TYPE_None             RESTRICT_TYPE = 0
	RESTRICT_TYPE_Dizzy            RESTRICT_TYPE = 1
	RESTRICT_TYPE_SlowDown         RESTRICT_TYPE = 2
	RESTRICT_TYPE_Taunt            RESTRICT_TYPE = 3
	RESTRICT_TYPE_Fear             RESTRICT_TYPE = 4
	RESTRICT_TYPE_Frozen           RESTRICT_TYPE = 5
	RESTRICT_TYPE_Floating         RESTRICT_TYPE = 6
	RESTRICT_TYPE_Slient           RESTRICT_TYPE = 7
	RESTRICT_TYPE_Stone            RESTRICT_TYPE = 8
	RESTRICT_TYPE_CustomType1      RESTRICT_TYPE = 9
	RESTRICT_TYPE_CustomType2      RESTRICT_TYPE = 10
	RESTRICT_TYPE_CustomType3      RESTRICT_TYPE = 11
	RESTRICT_TYPE_CustomType4      RESTRICT_TYPE = 12
	RESTRICT_TYPE_CustomType5      RESTRICT_TYPE = 13
	RESTRICT_TYPE_CustomType6      RESTRICT_TYPE = 14
	RESTRICT_TYPE_CustomType7      RESTRICT_TYPE = 15
	RESTRICT_TYPE_CustomType8      RESTRICT_TYPE = 16
	RESTRICT_TYPE_CustomType9      RESTRICT_TYPE = 17
	RESTRICT_TYPE_CustomType10     RESTRICT_TYPE = 18
	RESTRICT_TYPE_CustomType11     RESTRICT_TYPE = 19
	RESTRICT_TYPE_CustomType12     RESTRICT_TYPE = 20
	RESTRICT_TYPE_CustomType13     RESTRICT_TYPE = 21
	RESTRICT_TYPE_CustomType14     RESTRICT_TYPE = 22
	RESTRICT_TYPE_CustomType15     RESTRICT_TYPE = 23
	RESTRICT_TYPE_CustomType16     RESTRICT_TYPE = 24
	RESTRICT_TYPE_CustomType17     RESTRICT_TYPE = 25
	RESTRICT_TYPE_CustomType18     RESTRICT_TYPE = 26
	RESTRICT_TYPE_CustomType19     RESTRICT_TYPE = 27
	RESTRICT_TYPE_CustomType20     RESTRICT_TYPE = 28
	RESTRICT_TYPE_CustomType21     RESTRICT_TYPE = 29
	RESTRICT_TYPE_CustomType22     RESTRICT_TYPE = 30
	RESTRICT_TYPE_CustomType23     RESTRICT_TYPE = 31
	RESTRICT_TYPE_CustomType24     RESTRICT_TYPE = 32
	RESTRICT_TYPE_CustomType25     RESTRICT_TYPE = 33
	RESTRICT_TYPE_CustomType26     RESTRICT_TYPE = 34
	RESTRICT_TYPE_CustomType27     RESTRICT_TYPE = 35
	RESTRICT_TYPE_CustomType28     RESTRICT_TYPE = 36
	RESTRICT_TYPE_CustomType29     RESTRICT_TYPE = 37
	RESTRICT_TYPE_CustomType30     RESTRICT_TYPE = 38
	RESTRICT_TYPE_CustomType31     RESTRICT_TYPE = 39
	RESTRICT_TYPE_CustomType32     RESTRICT_TYPE = 40
	RESTRICT_TYPE_CustomType33     RESTRICT_TYPE = 41
	RESTRICT_TYPE_CustomType34     RESTRICT_TYPE = 42
	RESTRICT_TYPE_CustomType35     RESTRICT_TYPE = 43
	RESTRICT_TYPE_CustomType36     RESTRICT_TYPE = 44
	RESTRICT_TYPE_CustomType37     RESTRICT_TYPE = 45
	RESTRICT_TYPE_CustomType38     RESTRICT_TYPE = 46
	RESTRICT_TYPE_CustomType39     RESTRICT_TYPE = 47
	RESTRICT_TYPE_CustomType40     RESTRICT_TYPE = 48
	RESTRICT_TYPE_CustomType41     RESTRICT_TYPE = 49
	RESTRICT_TYPE_CustomType42     RESTRICT_TYPE = 50
	RESTRICT_TYPE_CustomType43     RESTRICT_TYPE = 51
	RESTRICT_TYPE_CustomType44     RESTRICT_TYPE = 52
	RESTRICT_TYPE_CustomType45     RESTRICT_TYPE = 53
	RESTRICT_TYPE_Immobilize       RESTRICT_TYPE = 54
	RESTRICT_TYPE_Oppression       RESTRICT_TYPE = 55
	RESTRICT_TYPE_Towing           RESTRICT_TYPE = 56
	RESTRICT_TYPE_Disarm           RESTRICT_TYPE = 57
	RESTRICT_TYPE_CanNotSelect     RESTRICT_TYPE = 58
	RESTRICT_TYPE_CanNotControl    RESTRICT_TYPE = 59
	RESTRICT_TYPE_Reviving         RESTRICT_TYPE = 60
	RESTRICT_TYPE_GoldenBody       RESTRICT_TYPE = 61
	RESTRICT_TYPE_PhysicalImmunity RESTRICT_TYPE = 62
	RESTRICT_TYPE_HurtImmunity     RESTRICT_TYPE = 63
	RESTRICT_TYPE_AddAtkSpd        RESTRICT_TYPE = 64
)

// Enum value maps for RESTRICT_TYPE.
var (
	RESTRICT_TYPE_name = map[int32]string{
		0:  "None",
		1:  "Dizzy",
		2:  "SlowDown",
		3:  "Taunt",
		4:  "Fear",
		5:  "Frozen",
		6:  "Floating",
		7:  "Slient",
		8:  "Stone",
		9:  "CustomType1",
		10: "CustomType2",
		11: "CustomType3",
		12: "CustomType4",
		13: "CustomType5",
		14: "CustomType6",
		15: "CustomType7",
		16: "CustomType8",
		17: "CustomType9",
		18: "CustomType10",
		19: "CustomType11",
		20: "CustomType12",
		21: "CustomType13",
		22: "CustomType14",
		23: "CustomType15",
		24: "CustomType16",
		25: "CustomType17",
		26: "CustomType18",
		27: "CustomType19",
		28: "CustomType20",
		29: "CustomType21",
		30: "CustomType22",
		31: "CustomType23",
		32: "CustomType24",
		33: "CustomType25",
		34: "CustomType26",
		35: "CustomType27",
		36: "CustomType28",
		37: "CustomType29",
		38: "CustomType30",
		39: "CustomType31",
		40: "CustomType32",
		41: "CustomType33",
		42: "CustomType34",
		43: "CustomType35",
		44: "CustomType36",
		45: "CustomType37",
		46: "CustomType38",
		47: "CustomType39",
		48: "CustomType40",
		49: "CustomType41",
		50: "CustomType42",
		51: "CustomType43",
		52: "CustomType44",
		53: "CustomType45",
		54: "Immobilize",
		55: "Oppression",
		56: "Towing",
		57: "Disarm",
		58: "CanNotSelect",
		59: "CanNotControl",
		60: "Reviving",
		61: "GoldenBody",
		62: "PhysicalImmunity",
		63: "HurtImmunity",
		64: "AddAtkSpd",
	}
	RESTRICT_TYPE_value = map[string]int32{
		"None":             0,
		"Dizzy":            1,
		"SlowDown":         2,
		"Taunt":            3,
		"Fear":             4,
		"Frozen":           5,
		"Floating":         6,
		"Slient":           7,
		"Stone":            8,
		"CustomType1":      9,
		"CustomType2":      10,
		"CustomType3":      11,
		"CustomType4":      12,
		"CustomType5":      13,
		"CustomType6":      14,
		"CustomType7":      15,
		"CustomType8":      16,
		"CustomType9":      17,
		"CustomType10":     18,
		"CustomType11":     19,
		"CustomType12":     20,
		"CustomType13":     21,
		"CustomType14":     22,
		"CustomType15":     23,
		"CustomType16":     24,
		"CustomType17":     25,
		"CustomType18":     26,
		"CustomType19":     27,
		"CustomType20":     28,
		"CustomType21":     29,
		"CustomType22":     30,
		"CustomType23":     31,
		"CustomType24":     32,
		"CustomType25":     33,
		"CustomType26":     34,
		"CustomType27":     35,
		"CustomType28":     36,
		"CustomType29":     37,
		"CustomType30":     38,
		"CustomType31":     39,
		"CustomType32":     40,
		"CustomType33":     41,
		"CustomType34":     42,
		"CustomType35":     43,
		"CustomType36":     44,
		"CustomType37":     45,
		"CustomType38":     46,
		"CustomType39":     47,
		"CustomType40":     48,
		"CustomType41":     49,
		"CustomType42":     50,
		"CustomType43":     51,
		"CustomType44":     52,
		"CustomType45":     53,
		"Immobilize":       54,
		"Oppression":       55,
		"Towing":           56,
		"Disarm":           57,
		"CanNotSelect":     58,
		"CanNotControl":    59,
		"Reviving":         60,
		"GoldenBody":       61,
		"PhysicalImmunity": 62,
		"HurtImmunity":     63,
		"AddAtkSpd":        64,
	}
)

func (x RESTRICT_TYPE) Enum() *RESTRICT_TYPE {
	p := new(RESTRICT_TYPE)
	*p = x
	return p
}

func (x RESTRICT_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RESTRICT_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[37].Descriptor()
}

func (RESTRICT_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[37]
}

func (x RESTRICT_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RESTRICT_TYPE.Descriptor instead.
func (RESTRICT_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{37}
}

type HORIZON_METHOD int32

const (
	HORIZON_METHOD_HORIZON_DISABLE            HORIZON_METHOD = 0
	HORIZON_METHOD_HORIZON_FUNC_FOW_REAL      HORIZON_METHOD = 1
	HORIZON_METHOD_HORIZON_FUNC_FOW_DISTANCE  HORIZON_METHOD = 2
	HORIZON_METHOD_HORIZON_FUNC_FOW_RENDER    HORIZON_METHOD = 4
	HORIZON_METHOD_HORIZON_DISABLE_WITH_MARK  HORIZON_METHOD = 8
	HORIZON_METHOD_HORIZON_FOW_WITHOUT_RENDER HORIZON_METHOD = 9
	HORIZON_METHOD_HORIZON_FOW_DISTANCE       HORIZON_METHOD = 10
	HORIZON_METHOD_HORIZON_FOW                HORIZON_METHOD = 13
)

// Enum value maps for HORIZON_METHOD.
var (
	HORIZON_METHOD_name = map[int32]string{
		0:  "HORIZON_DISABLE",
		1:  "HORIZON_FUNC_FOW_REAL",
		2:  "HORIZON_FUNC_FOW_DISTANCE",
		4:  "HORIZON_FUNC_FOW_RENDER",
		8:  "HORIZON_DISABLE_WITH_MARK",
		9:  "HORIZON_FOW_WITHOUT_RENDER",
		10: "HORIZON_FOW_DISTANCE",
		13: "HORIZON_FOW",
	}
	HORIZON_METHOD_value = map[string]int32{
		"HORIZON_DISABLE":            0,
		"HORIZON_FUNC_FOW_REAL":      1,
		"HORIZON_FUNC_FOW_DISTANCE":  2,
		"HORIZON_FUNC_FOW_RENDER":    4,
		"HORIZON_DISABLE_WITH_MARK":  8,
		"HORIZON_FOW_WITHOUT_RENDER": 9,
		"HORIZON_FOW_DISTANCE":       10,
		"HORIZON_FOW":                13,
	}
)

func (x HORIZON_METHOD) Enum() *HORIZON_METHOD {
	p := new(HORIZON_METHOD)
	*p = x
	return p
}

func (x HORIZON_METHOD) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HORIZON_METHOD) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[38].Descriptor()
}

func (HORIZON_METHOD) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[38]
}

func (x HORIZON_METHOD) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HORIZON_METHOD.Descriptor instead.
func (HORIZON_METHOD) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{38}
}

type HERO_DAMAGE_TYPE int32

const (
	HERO_DAMAGE_TYPE_HERO_DAMAGE_TYPE_Default HERO_DAMAGE_TYPE = 0
	HERO_DAMAGE_TYPE_HERO_DAMAGE_TYPE_AD      HERO_DAMAGE_TYPE = 1
	HERO_DAMAGE_TYPE_HERO_DAMAGE_TYPE_AP      HERO_DAMAGE_TYPE = 2
	HERO_DAMAGE_TYPE_HERO_DAMAGE_TYPE_ADAP    HERO_DAMAGE_TYPE = 3
)

// Enum value maps for HERO_DAMAGE_TYPE.
var (
	HERO_DAMAGE_TYPE_name = map[int32]string{
		0: "HERO_DAMAGE_TYPE_Default",
		1: "HERO_DAMAGE_TYPE_AD",
		2: "HERO_DAMAGE_TYPE_AP",
		3: "HERO_DAMAGE_TYPE_ADAP",
	}
	HERO_DAMAGE_TYPE_value = map[string]int32{
		"HERO_DAMAGE_TYPE_Default": 0,
		"HERO_DAMAGE_TYPE_AD":      1,
		"HERO_DAMAGE_TYPE_AP":      2,
		"HERO_DAMAGE_TYPE_ADAP":    3,
	}
)

func (x HERO_DAMAGE_TYPE) Enum() *HERO_DAMAGE_TYPE {
	p := new(HERO_DAMAGE_TYPE)
	*p = x
	return p
}

func (x HERO_DAMAGE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HERO_DAMAGE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[39].Descriptor()
}

func (HERO_DAMAGE_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[39]
}

func (x HERO_DAMAGE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HERO_DAMAGE_TYPE.Descriptor instead.
func (HERO_DAMAGE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{39}
}

type RES_CALL_MONSTER_ADD_TYPE int32

const (
	RES_CALL_MONSTER_ADD_TYPE_RES_CALL_MONSTER_ADD_TYPE_Default     RES_CALL_MONSTER_ADD_TYPE = 0
	RES_CALL_MONSTER_ADD_TYPE_RES_CALL_MONSTER_ADD_ATTACK           RES_CALL_MONSTER_ADD_TYPE = 1
	RES_CALL_MONSTER_ADD_TYPE_RES_CALL_MONSTER_ADD_MAGIC            RES_CALL_MONSTER_ADD_TYPE = 2
	RES_CALL_MONSTER_ADD_TYPE_RES_CALL_MONSTER_ADD_ATTACK_AND_MAGIC RES_CALL_MONSTER_ADD_TYPE = 3
	RES_CALL_MONSTER_ADD_TYPE_RES_CALL_MONSTER_ADD_DEFENCE          RES_CALL_MONSTER_ADD_TYPE = 4
	RES_CALL_MONSTER_ADD_TYPE_RES_CALL_MONSTER_ADD_SEPERATELY       RES_CALL_MONSTER_ADD_TYPE = 8
	RES_CALL_MONSTER_ADD_TYPE_RES_CALL_MONSTER_ADD_FULLSEPERATELY   RES_CALL_MONSTER_ADD_TYPE = 16
)

// Enum value maps for RES_CALL_MONSTER_ADD_TYPE.
var (
	RES_CALL_MONSTER_ADD_TYPE_name = map[int32]string{
		0:  "RES_CALL_MONSTER_ADD_TYPE_Default",
		1:  "RES_CALL_MONSTER_ADD_ATTACK",
		2:  "RES_CALL_MONSTER_ADD_MAGIC",
		3:  "RES_CALL_MONSTER_ADD_ATTACK_AND_MAGIC",
		4:  "RES_CALL_MONSTER_ADD_DEFENCE",
		8:  "RES_CALL_MONSTER_ADD_SEPERATELY",
		16: "RES_CALL_MONSTER_ADD_FULLSEPERATELY",
	}
	RES_CALL_MONSTER_ADD_TYPE_value = map[string]int32{
		"RES_CALL_MONSTER_ADD_TYPE_Default":     0,
		"RES_CALL_MONSTER_ADD_ATTACK":           1,
		"RES_CALL_MONSTER_ADD_MAGIC":            2,
		"RES_CALL_MONSTER_ADD_ATTACK_AND_MAGIC": 3,
		"RES_CALL_MONSTER_ADD_DEFENCE":          4,
		"RES_CALL_MONSTER_ADD_SEPERATELY":       8,
		"RES_CALL_MONSTER_ADD_FULLSEPERATELY":   16,
	}
)

func (x RES_CALL_MONSTER_ADD_TYPE) Enum() *RES_CALL_MONSTER_ADD_TYPE {
	p := new(RES_CALL_MONSTER_ADD_TYPE)
	*p = x
	return p
}

func (x RES_CALL_MONSTER_ADD_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_CALL_MONSTER_ADD_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[40].Descriptor()
}

func (RES_CALL_MONSTER_ADD_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[40]
}

func (x RES_CALL_MONSTER_ADD_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_CALL_MONSTER_ADD_TYPE.Descriptor instead.
func (RES_CALL_MONSTER_ADD_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{40}
}

type RES_ENTERTAINMENT_MAP_SUB_TYPE int32

const (
	RES_ENTERTAINMENT_MAP_SUB_TYPE_RES_ENTERTAINMENT_MAP_SUB_TYPE_NULL                 RES_ENTERTAINMENT_MAP_SUB_TYPE = 0
	RES_ENTERTAINMENT_MAP_SUB_TYPE_RES_ENTERTAINMENT_MAP_SUB_TYPE_CHAOS_BATTLE         RES_ENTERTAINMENT_MAP_SUB_TYPE = 1
	RES_ENTERTAINMENT_MAP_SUB_TYPE_RES_ENTERTAINMENT_MAP_SUB_TYPE_FIRE_HOLE            RES_ENTERTAINMENT_MAP_SUB_TYPE = 2
	RES_ENTERTAINMENT_MAP_SUB_TYPE_RES_ENTERTAINMENT_MAP_SUB_TYPE_DOUBLESTARS          RES_ENTERTAINMENT_MAP_SUB_TYPE = 3
	RES_ENTERTAINMENT_MAP_SUB_TYPE_RES_ENTERTAINMENT_MAP_SUB_TYPE_RUNNING              RES_ENTERTAINMENT_MAP_SUB_TYPE = 4
	RES_ENTERTAINMENT_MAP_SUB_TYPE_RES_ENTERTAINMENT_MAP_SUB_TYPE_FOG                  RES_ENTERTAINMENT_MAP_SUB_TYPE = 5
	RES_ENTERTAINMENT_MAP_SUB_TYPE_RES_ENTERTAINMENT_MAP_SUB_TYPE_CLONE                RES_ENTERTAINMENT_MAP_SUB_TYPE = 6
	RES_ENTERTAINMENT_MAP_SUB_TYPE_RES_ENTERTAINMENT_MAP_SUB_TYPE_UNLIMIT              RES_ENTERTAINMENT_MAP_SUB_TYPE = 7
	RES_ENTERTAINMENT_MAP_SUB_TYPE_RES_ENTERTAINMENT_MAP_SUB_TYPE_ANONYMOUS            RES_ENTERTAINMENT_MAP_SUB_TYPE = 8
	RES_ENTERTAINMENT_MAP_SUB_TYPE_RES_ENTERTAINMENT_MAP_SUB_TYPE_FIVECAMP             RES_ENTERTAINMENT_MAP_SUB_TYPE = 9
	RES_ENTERTAINMENT_MAP_SUB_TYPE_RES_ENTERTAINMENT_MAP_SUB_TYPE_COOPERATION          RES_ENTERTAINMENT_MAP_SUB_TYPE = 10
	RES_ENTERTAINMENT_MAP_SUB_TYPE_RES_ENTERTAINMENT_MAP_SUB_TYPE_BATTLEROYALE         RES_ENTERTAINMENT_MAP_SUB_TYPE = 11
	RES_ENTERTAINMENT_MAP_SUB_TYPE_RES_ENTERTAINMENT_MAP_SUB_TYPE_BATTLEROYALE_REVIVE  RES_ENTERTAINMENT_MAP_SUB_TYPE = 12
	RES_ENTERTAINMENT_MAP_SUB_TYPE_RES_ENTERTAINMENT_MAP_SUB_TYPE_BATTLEROYALE_CLONE   RES_ENTERTAINMENT_MAP_SUB_TYPE = 13
	RES_ENTERTAINMENT_MAP_SUB_TYPE_RES_ENTERTAINMENT_MAP_SUB_TYPE_PROJECT8             RES_ENTERTAINMENT_MAP_SUB_TYPE = 14
	RES_ENTERTAINMENT_MAP_SUB_TYPE_RES_ENTERTAINMENT_MAP_SUB_TYPE_SHORTBREAK           RES_ENTERTAINMENT_MAP_SUB_TYPE = 15
	RES_ENTERTAINMENT_MAP_SUB_TYPE_RES_ENTERTAINMENT_MAP_SUB_TYPE_PROJECT8_2           RES_ENTERTAINMENT_MAP_SUB_TYPE = 16
	RES_ENTERTAINMENT_MAP_SUB_TYPE_RES_ENTERTAINMENT_MAP_SUB_TYPE_PROJECT8_3           RES_ENTERTAINMENT_MAP_SUB_TYPE = 17
	RES_ENTERTAINMENT_MAP_SUB_TYPE_RES_ENTERTAINMENT_MAP_SUB_TYPE_PROJECT8_4           RES_ENTERTAINMENT_MAP_SUB_TYPE = 18
	RES_ENTERTAINMENT_MAP_SUB_TYPE_RES_ENTERTAINMENT_MAP_SUB_TYPE_MONSTER              RES_ENTERTAINMENT_MAP_SUB_TYPE = 19
	RES_ENTERTAINMENT_MAP_SUB_TYPE_RES_ENTERTAINMENT_MAP_SUB_TYPE_SOLDIER              RES_ENTERTAINMENT_MAP_SUB_TYPE = 20
	RES_ENTERTAINMENT_MAP_SUB_TYPE_RES_ENTERTAINMENT_MAP_SUB_TYPE_PROJECT9             RES_ENTERTAINMENT_MAP_SUB_TYPE = 21
	RES_ENTERTAINMENT_MAP_SUB_TYPE_RES_ENTERTAINMENT_MAP_SUB_TYPE_PROJECT8_5           RES_ENTERTAINMENT_MAP_SUB_TYPE = 22
	RES_ENTERTAINMENT_MAP_SUB_TYPE_RES_ENTERTAINMENT_MAP_SUB_TYPE_PROJECT8_BOUNTYMATCH RES_ENTERTAINMENT_MAP_SUB_TYPE = 23
	RES_ENTERTAINMENT_MAP_SUB_TYPE_RES_ENTERTAINMENT_MAP_SUB_TYPE_CHAOS_BATTLE_AI      RES_ENTERTAINMENT_MAP_SUB_TYPE = 24
	RES_ENTERTAINMENT_MAP_SUB_TYPE_RES_ENTERTAINMENT_MAP_SUB_TYPE_TEST_HERO            RES_ENTERTAINMENT_MAP_SUB_TYPE = 25
	RES_ENTERTAINMENT_MAP_SUB_TYPE_RES_ENTERTAINMENT_MAP_SUB_TYPE_ZHONGYUAN_POLANG     RES_ENTERTAINMENT_MAP_SUB_TYPE = 26
	RES_ENTERTAINMENT_MAP_SUB_TYPE_RES_ENTERTAINMENT_MAP_SUB_TYPE_COMBINEGAME          RES_ENTERTAINMENT_MAP_SUB_TYPE = 27
	RES_ENTERTAINMENT_MAP_SUB_TYPE_RES_ENTERTAINMENT_MAP_SUB_TYPE_EARLYTEST            RES_ENTERTAINMENT_MAP_SUB_TYPE = 28
	RES_ENTERTAINMENT_MAP_SUB_TYPE_RES_ENTERTAINMENT_MAP_SUB_TYPE_MACHINE              RES_ENTERTAINMENT_MAP_SUB_TYPE = 29
	RES_ENTERTAINMENT_MAP_SUB_TYPE_RES_ENTERTAINMENT_MAP_SUB_TYPE_ALLSPORT             RES_ENTERTAINMENT_MAP_SUB_TYPE = 30
	RES_ENTERTAINMENT_MAP_SUB_TYPE_RES_ENTERTAINMENT_MAP_SUB_TYPE_LAST                 RES_ENTERTAINMENT_MAP_SUB_TYPE = 31
)

// Enum value maps for RES_ENTERTAINMENT_MAP_SUB_TYPE.
var (
	RES_ENTERTAINMENT_MAP_SUB_TYPE_name = map[int32]string{
		0:  "RES_ENTERTAINMENT_MAP_SUB_TYPE_NULL",
		1:  "RES_ENTERTAINMENT_MAP_SUB_TYPE_CHAOS_BATTLE",
		2:  "RES_ENTERTAINMENT_MAP_SUB_TYPE_FIRE_HOLE",
		3:  "RES_ENTERTAINMENT_MAP_SUB_TYPE_DOUBLESTARS",
		4:  "RES_ENTERTAINMENT_MAP_SUB_TYPE_RUNNING",
		5:  "RES_ENTERTAINMENT_MAP_SUB_TYPE_FOG",
		6:  "RES_ENTERTAINMENT_MAP_SUB_TYPE_CLONE",
		7:  "RES_ENTERTAINMENT_MAP_SUB_TYPE_UNLIMIT",
		8:  "RES_ENTERTAINMENT_MAP_SUB_TYPE_ANONYMOUS",
		9:  "RES_ENTERTAINMENT_MAP_SUB_TYPE_FIVECAMP",
		10: "RES_ENTERTAINMENT_MAP_SUB_TYPE_COOPERATION",
		11: "RES_ENTERTAINMENT_MAP_SUB_TYPE_BATTLEROYALE",
		12: "RES_ENTERTAINMENT_MAP_SUB_TYPE_BATTLEROYALE_REVIVE",
		13: "RES_ENTERTAINMENT_MAP_SUB_TYPE_BATTLEROYALE_CLONE",
		14: "RES_ENTERTAINMENT_MAP_SUB_TYPE_PROJECT8",
		15: "RES_ENTERTAINMENT_MAP_SUB_TYPE_SHORTBREAK",
		16: "RES_ENTERTAINMENT_MAP_SUB_TYPE_PROJECT8_2",
		17: "RES_ENTERTAINMENT_MAP_SUB_TYPE_PROJECT8_3",
		18: "RES_ENTERTAINMENT_MAP_SUB_TYPE_PROJECT8_4",
		19: "RES_ENTERTAINMENT_MAP_SUB_TYPE_MONSTER",
		20: "RES_ENTERTAINMENT_MAP_SUB_TYPE_SOLDIER",
		21: "RES_ENTERTAINMENT_MAP_SUB_TYPE_PROJECT9",
		22: "RES_ENTERTAINMENT_MAP_SUB_TYPE_PROJECT8_5",
		23: "RES_ENTERTAINMENT_MAP_SUB_TYPE_PROJECT8_BOUNTYMATCH",
		24: "RES_ENTERTAINMENT_MAP_SUB_TYPE_CHAOS_BATTLE_AI",
		25: "RES_ENTERTAINMENT_MAP_SUB_TYPE_TEST_HERO",
		26: "RES_ENTERTAINMENT_MAP_SUB_TYPE_ZHONGYUAN_POLANG",
		27: "RES_ENTERTAINMENT_MAP_SUB_TYPE_COMBINEGAME",
		28: "RES_ENTERTAINMENT_MAP_SUB_TYPE_EARLYTEST",
		29: "RES_ENTERTAINMENT_MAP_SUB_TYPE_MACHINE",
		30: "RES_ENTERTAINMENT_MAP_SUB_TYPE_ALLSPORT",
		31: "RES_ENTERTAINMENT_MAP_SUB_TYPE_LAST",
	}
	RES_ENTERTAINMENT_MAP_SUB_TYPE_value = map[string]int32{
		"RES_ENTERTAINMENT_MAP_SUB_TYPE_NULL":                 0,
		"RES_ENTERTAINMENT_MAP_SUB_TYPE_CHAOS_BATTLE":         1,
		"RES_ENTERTAINMENT_MAP_SUB_TYPE_FIRE_HOLE":            2,
		"RES_ENTERTAINMENT_MAP_SUB_TYPE_DOUBLESTARS":          3,
		"RES_ENTERTAINMENT_MAP_SUB_TYPE_RUNNING":              4,
		"RES_ENTERTAINMENT_MAP_SUB_TYPE_FOG":                  5,
		"RES_ENTERTAINMENT_MAP_SUB_TYPE_CLONE":                6,
		"RES_ENTERTAINMENT_MAP_SUB_TYPE_UNLIMIT":              7,
		"RES_ENTERTAINMENT_MAP_SUB_TYPE_ANONYMOUS":            8,
		"RES_ENTERTAINMENT_MAP_SUB_TYPE_FIVECAMP":             9,
		"RES_ENTERTAINMENT_MAP_SUB_TYPE_COOPERATION":          10,
		"RES_ENTERTAINMENT_MAP_SUB_TYPE_BATTLEROYALE":         11,
		"RES_ENTERTAINMENT_MAP_SUB_TYPE_BATTLEROYALE_REVIVE":  12,
		"RES_ENTERTAINMENT_MAP_SUB_TYPE_BATTLEROYALE_CLONE":   13,
		"RES_ENTERTAINMENT_MAP_SUB_TYPE_PROJECT8":             14,
		"RES_ENTERTAINMENT_MAP_SUB_TYPE_SHORTBREAK":           15,
		"RES_ENTERTAINMENT_MAP_SUB_TYPE_PROJECT8_2":           16,
		"RES_ENTERTAINMENT_MAP_SUB_TYPE_PROJECT8_3":           17,
		"RES_ENTERTAINMENT_MAP_SUB_TYPE_PROJECT8_4":           18,
		"RES_ENTERTAINMENT_MAP_SUB_TYPE_MONSTER":              19,
		"RES_ENTERTAINMENT_MAP_SUB_TYPE_SOLDIER":              20,
		"RES_ENTERTAINMENT_MAP_SUB_TYPE_PROJECT9":             21,
		"RES_ENTERTAINMENT_MAP_SUB_TYPE_PROJECT8_5":           22,
		"RES_ENTERTAINMENT_MAP_SUB_TYPE_PROJECT8_BOUNTYMATCH": 23,
		"RES_ENTERTAINMENT_MAP_SUB_TYPE_CHAOS_BATTLE_AI":      24,
		"RES_ENTERTAINMENT_MAP_SUB_TYPE_TEST_HERO":            25,
		"RES_ENTERTAINMENT_MAP_SUB_TYPE_ZHONGYUAN_POLANG":     26,
		"RES_ENTERTAINMENT_MAP_SUB_TYPE_COMBINEGAME":          27,
		"RES_ENTERTAINMENT_MAP_SUB_TYPE_EARLYTEST":            28,
		"RES_ENTERTAINMENT_MAP_SUB_TYPE_MACHINE":              29,
		"RES_ENTERTAINMENT_MAP_SUB_TYPE_ALLSPORT":             30,
		"RES_ENTERTAINMENT_MAP_SUB_TYPE_LAST":                 31,
	}
)

func (x RES_ENTERTAINMENT_MAP_SUB_TYPE) Enum() *RES_ENTERTAINMENT_MAP_SUB_TYPE {
	p := new(RES_ENTERTAINMENT_MAP_SUB_TYPE)
	*p = x
	return p
}

func (x RES_ENTERTAINMENT_MAP_SUB_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_ENTERTAINMENT_MAP_SUB_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[41].Descriptor()
}

func (RES_ENTERTAINMENT_MAP_SUB_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[41]
}

func (x RES_ENTERTAINMENT_MAP_SUB_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_ENTERTAINMENT_MAP_SUB_TYPE.Descriptor instead.
func (RES_ENTERTAINMENT_MAP_SUB_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{41}
}

type RES_MULTI_GAME_PICK_RULE int32

const (
	RES_MULTI_GAME_PICK_RULE_RES_MULTI_GAME_PICK_RULE_NORMAL         RES_MULTI_GAME_PICK_RULE = 0
	RES_MULTI_GAME_PICK_RULE_RES_MULTI_GAME_PICK_RULE_RANDOM         RES_MULTI_GAME_PICK_RULE = 1
	RES_MULTI_GAME_PICK_RULE_RES_MULTI_GAME_PICK_RULE_CLONE          RES_MULTI_GAME_PICK_RULE = 2
	RES_MULTI_GAME_PICK_RULE_RES_MULTI_GAME_PICK_RULE_BANPICK        RES_MULTI_GAME_PICK_RULE = 3
	RES_MULTI_GAME_PICK_RULE_RES_MULTI_GAME_PICK_RULE_MULTI          RES_MULTI_GAME_PICK_RULE = 4
	RES_MULTI_GAME_PICK_RULE_RES_MULTI_GAME_PICK_RULE_MULTI_SELFPICK RES_MULTI_GAME_PICK_RULE = 5
	RES_MULTI_GAME_PICK_RULE_RES_MULTI_GAME_PICK_RULE_TRAINING       RES_MULTI_GAME_PICK_RULE = 6
	RES_MULTI_GAME_PICK_RULE_RES_MULTI_GAME_NOPICK                   RES_MULTI_GAME_PICK_RULE = 7
	RES_MULTI_GAME_PICK_RULE_RES_MULTI_GAME_PICK_RULE_AI_TRAINING    RES_MULTI_GAME_PICK_RULE = 8
	RES_MULTI_GAME_PICK_RULE_RES_MULTI_GAME_PICK_RULE_LAST           RES_MULTI_GAME_PICK_RULE = 9
)

// Enum value maps for RES_MULTI_GAME_PICK_RULE.
var (
	RES_MULTI_GAME_PICK_RULE_name = map[int32]string{
		0: "RES_MULTI_GAME_PICK_RULE_NORMAL",
		1: "RES_MULTI_GAME_PICK_RULE_RANDOM",
		2: "RES_MULTI_GAME_PICK_RULE_CLONE",
		3: "RES_MULTI_GAME_PICK_RULE_BANPICK",
		4: "RES_MULTI_GAME_PICK_RULE_MULTI",
		5: "RES_MULTI_GAME_PICK_RULE_MULTI_SELFPICK",
		6: "RES_MULTI_GAME_PICK_RULE_TRAINING",
		7: "RES_MULTI_GAME_NOPICK",
		8: "RES_MULTI_GAME_PICK_RULE_AI_TRAINING",
		9: "RES_MULTI_GAME_PICK_RULE_LAST",
	}
	RES_MULTI_GAME_PICK_RULE_value = map[string]int32{
		"RES_MULTI_GAME_PICK_RULE_NORMAL":         0,
		"RES_MULTI_GAME_PICK_RULE_RANDOM":         1,
		"RES_MULTI_GAME_PICK_RULE_CLONE":          2,
		"RES_MULTI_GAME_PICK_RULE_BANPICK":        3,
		"RES_MULTI_GAME_PICK_RULE_MULTI":          4,
		"RES_MULTI_GAME_PICK_RULE_MULTI_SELFPICK": 5,
		"RES_MULTI_GAME_PICK_RULE_TRAINING":       6,
		"RES_MULTI_GAME_NOPICK":                   7,
		"RES_MULTI_GAME_PICK_RULE_AI_TRAINING":    8,
		"RES_MULTI_GAME_PICK_RULE_LAST":           9,
	}
)

func (x RES_MULTI_GAME_PICK_RULE) Enum() *RES_MULTI_GAME_PICK_RULE {
	p := new(RES_MULTI_GAME_PICK_RULE)
	*p = x
	return p
}

func (x RES_MULTI_GAME_PICK_RULE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_MULTI_GAME_PICK_RULE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[42].Descriptor()
}

func (RES_MULTI_GAME_PICK_RULE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[42]
}

func (x RES_MULTI_GAME_PICK_RULE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_MULTI_GAME_PICK_RULE.Descriptor instead.
func (RES_MULTI_GAME_PICK_RULE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{42}
}

type RES_SPEEDADJUST_TYPE int32

const (
	RES_SPEEDADJUST_TYPE_RES_SPEEDADJUST_SPEEDUP   RES_SPEEDADJUST_TYPE = 0
	RES_SPEEDADJUST_TYPE_RES_SPEEDADJUST_SPEEDDOWN RES_SPEEDADJUST_TYPE = 1
)

// Enum value maps for RES_SPEEDADJUST_TYPE.
var (
	RES_SPEEDADJUST_TYPE_name = map[int32]string{
		0: "RES_SPEEDADJUST_SPEEDUP",
		1: "RES_SPEEDADJUST_SPEEDDOWN",
	}
	RES_SPEEDADJUST_TYPE_value = map[string]int32{
		"RES_SPEEDADJUST_SPEEDUP":   0,
		"RES_SPEEDADJUST_SPEEDDOWN": 1,
	}
)

func (x RES_SPEEDADJUST_TYPE) Enum() *RES_SPEEDADJUST_TYPE {
	p := new(RES_SPEEDADJUST_TYPE)
	*p = x
	return p
}

func (x RES_SPEEDADJUST_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_SPEEDADJUST_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[43].Descriptor()
}

func (RES_SPEEDADJUST_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[43]
}

func (x RES_SPEEDADJUST_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_SPEEDADJUST_TYPE.Descriptor instead.
func (RES_SPEEDADJUST_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{43}
}

type RES_DEV_FUNC_TYPE int32

const (
	RES_DEV_FUNC_TYPE_RES_DEV_FUNC_TYPE_Default RES_DEV_FUNC_TYPE = 0
	RES_DEV_FUNC_TYPE_RES_DEV_FUNC_ON           RES_DEV_FUNC_TYPE = 1
	RES_DEV_FUNC_TYPE_RES_DEV_FUNC_OFF          RES_DEV_FUNC_TYPE = 0
	RES_DEV_FUNC_TYPE_RES_DEV_FUNC_IGNORE       RES_DEV_FUNC_TYPE = 10
)

// Enum value maps for RES_DEV_FUNC_TYPE.
var (
	RES_DEV_FUNC_TYPE_name = map[int32]string{
		0: "RES_DEV_FUNC_TYPE_Default",
		1: "RES_DEV_FUNC_ON",
		// Duplicate value: 0: "RES_DEV_FUNC_OFF",
		10: "RES_DEV_FUNC_IGNORE",
	}
	RES_DEV_FUNC_TYPE_value = map[string]int32{
		"RES_DEV_FUNC_TYPE_Default": 0,
		"RES_DEV_FUNC_ON":           1,
		"RES_DEV_FUNC_OFF":          0,
		"RES_DEV_FUNC_IGNORE":       10,
	}
)

func (x RES_DEV_FUNC_TYPE) Enum() *RES_DEV_FUNC_TYPE {
	p := new(RES_DEV_FUNC_TYPE)
	*p = x
	return p
}

func (x RES_DEV_FUNC_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_DEV_FUNC_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[44].Descriptor()
}

func (RES_DEV_FUNC_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[44]
}

func (x RES_DEV_FUNC_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_DEV_FUNC_TYPE.Descriptor instead.
func (RES_DEV_FUNC_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{44}
}

type RES_QUESTION_CHOOSE_RULE int32

const (
	RES_QUESTION_CHOOSE_RULE_RES_QUESTION_CHOOSE_RULE_INVALID    RES_QUESTION_CHOOSE_RULE = 0
	RES_QUESTION_CHOOSE_RULE_RES_QUESTION_CHOOSE_RULE_SEQ        RES_QUESTION_CHOOSE_RULE = 1
	RES_QUESTION_CHOOSE_RULE_RES_QUESTION_CHOOSE_RULE_RANDOM     RES_QUESTION_CHOOSE_RULE = 2
	RES_QUESTION_CHOOSE_RULE_RES_QUESTION_CHOOSE_RULE_WEIGHT     RES_QUESTION_CHOOSE_RULE = 3
	RES_QUESTION_CHOOSE_RULE_RES_QUESTION_CHOOSE_RULE_RANDOMSOME RES_QUESTION_CHOOSE_RULE = 4
	RES_QUESTION_CHOOSE_RULE_RES_QUESTION_CHOOSE_RULE_LAST       RES_QUESTION_CHOOSE_RULE = 5
)

// Enum value maps for RES_QUESTION_CHOOSE_RULE.
var (
	RES_QUESTION_CHOOSE_RULE_name = map[int32]string{
		0: "RES_QUESTION_CHOOSE_RULE_INVALID",
		1: "RES_QUESTION_CHOOSE_RULE_SEQ",
		2: "RES_QUESTION_CHOOSE_RULE_RANDOM",
		3: "RES_QUESTION_CHOOSE_RULE_WEIGHT",
		4: "RES_QUESTION_CHOOSE_RULE_RANDOMSOME",
		5: "RES_QUESTION_CHOOSE_RULE_LAST",
	}
	RES_QUESTION_CHOOSE_RULE_value = map[string]int32{
		"RES_QUESTION_CHOOSE_RULE_INVALID":    0,
		"RES_QUESTION_CHOOSE_RULE_SEQ":        1,
		"RES_QUESTION_CHOOSE_RULE_RANDOM":     2,
		"RES_QUESTION_CHOOSE_RULE_WEIGHT":     3,
		"RES_QUESTION_CHOOSE_RULE_RANDOMSOME": 4,
		"RES_QUESTION_CHOOSE_RULE_LAST":       5,
	}
)

func (x RES_QUESTION_CHOOSE_RULE) Enum() *RES_QUESTION_CHOOSE_RULE {
	p := new(RES_QUESTION_CHOOSE_RULE)
	*p = x
	return p
}

func (x RES_QUESTION_CHOOSE_RULE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_QUESTION_CHOOSE_RULE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[45].Descriptor()
}

func (RES_QUESTION_CHOOSE_RULE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[45]
}

func (x RES_QUESTION_CHOOSE_RULE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_QUESTION_CHOOSE_RULE.Descriptor instead.
func (RES_QUESTION_CHOOSE_RULE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{45}
}

type RES_PERFEFT_USE_TYPE int32

const (
	RES_PERFEFT_USE_TYPE_RES_PERFEFT_USE_ALLUSE    RES_PERFEFT_USE_TYPE = 0
	RES_PERFEFT_USE_TYPE_RES_PERFEFT_USE_NOUSE     RES_PERFEFT_USE_TYPE = 1
	RES_PERFEFT_USE_TYPE_RES_PERFEFT_USE_LISTUSE   RES_PERFEFT_USE_TYPE = 2
	RES_PERFEFT_USE_TYPE_RES_PERFEFT_USE_LISTNOUSE RES_PERFEFT_USE_TYPE = 3
	RES_PERFEFT_USE_TYPE_RES_PERFEFT_USE_LAST      RES_PERFEFT_USE_TYPE = 4
)

// Enum value maps for RES_PERFEFT_USE_TYPE.
var (
	RES_PERFEFT_USE_TYPE_name = map[int32]string{
		0: "RES_PERFEFT_USE_ALLUSE",
		1: "RES_PERFEFT_USE_NOUSE",
		2: "RES_PERFEFT_USE_LISTUSE",
		3: "RES_PERFEFT_USE_LISTNOUSE",
		4: "RES_PERFEFT_USE_LAST",
	}
	RES_PERFEFT_USE_TYPE_value = map[string]int32{
		"RES_PERFEFT_USE_ALLUSE":    0,
		"RES_PERFEFT_USE_NOUSE":     1,
		"RES_PERFEFT_USE_LISTUSE":   2,
		"RES_PERFEFT_USE_LISTNOUSE": 3,
		"RES_PERFEFT_USE_LAST":      4,
	}
)

func (x RES_PERFEFT_USE_TYPE) Enum() *RES_PERFEFT_USE_TYPE {
	p := new(RES_PERFEFT_USE_TYPE)
	*p = x
	return p
}

func (x RES_PERFEFT_USE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_PERFEFT_USE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[46].Descriptor()
}

func (RES_PERFEFT_USE_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[46]
}

func (x RES_PERFEFT_USE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_PERFEFT_USE_TYPE.Descriptor instead.
func (RES_PERFEFT_USE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{46}
}

type RES_HUD3D_COLOR_TYPE int32

const (
	RES_HUD3D_COLOR_TYPE_RES_HUD3D_COLOR_NORMAL RES_HUD3D_COLOR_TYPE = 0
	RES_HUD3D_COLOR_TYPE_RES_HUD3D_COLOR_HP     RES_HUD3D_COLOR_TYPE = 1
	RES_HUD3D_COLOR_TYPE_RES_HUD3D_COLOR_NAME   RES_HUD3D_COLOR_TYPE = 2
)

// Enum value maps for RES_HUD3D_COLOR_TYPE.
var (
	RES_HUD3D_COLOR_TYPE_name = map[int32]string{
		0: "RES_HUD3D_COLOR_NORMAL",
		1: "RES_HUD3D_COLOR_HP",
		2: "RES_HUD3D_COLOR_NAME",
	}
	RES_HUD3D_COLOR_TYPE_value = map[string]int32{
		"RES_HUD3D_COLOR_NORMAL": 0,
		"RES_HUD3D_COLOR_HP":     1,
		"RES_HUD3D_COLOR_NAME":   2,
	}
)

func (x RES_HUD3D_COLOR_TYPE) Enum() *RES_HUD3D_COLOR_TYPE {
	p := new(RES_HUD3D_COLOR_TYPE)
	*p = x
	return p
}

func (x RES_HUD3D_COLOR_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_HUD3D_COLOR_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[47].Descriptor()
}

func (RES_HUD3D_COLOR_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[47]
}

func (x RES_HUD3D_COLOR_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_HUD3D_COLOR_TYPE.Descriptor instead.
func (RES_HUD3D_COLOR_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{47}
}

type RES_ENTERAINMENT_SUBTYPE int32

const (
	RES_ENTERAINMENT_SUBTYPE_RES_ENTERAINMENT_BATTLETYPE_NULL  RES_ENTERAINMENT_SUBTYPE = 0
	RES_ENTERAINMENT_SUBTYPE_RES_PROJECT8_BATTLETYPE_1V1       RES_ENTERAINMENT_SUBTYPE = 1
	RES_ENTERAINMENT_SUBTYPE_RES_PROJECT8_BATTLETYPE_2V2       RES_ENTERAINMENT_SUBTYPE = 2
	RES_ENTERAINMENT_SUBTYPE_RES_PROJECT8_BATTLETYPE_FASTMODE  RES_ENTERAINMENT_SUBTYPE = 3
	RES_ENTERAINMENT_SUBTYPE_RES_PROJECT8_BATTLETYPE_1V1_MATCH RES_ENTERAINMENT_SUBTYPE = 4
	RES_ENTERAINMENT_SUBTYPE_RES_PROJECT8_BATTLETYPE_2V2_MATCH RES_ENTERAINMENT_SUBTYPE = 5
	RES_ENTERAINMENT_SUBTYPE_RES_PROJECT8_BATTLETYPE_BOUNTY    RES_ENTERAINMENT_SUBTYPE = 6
)

// Enum value maps for RES_ENTERAINMENT_SUBTYPE.
var (
	RES_ENTERAINMENT_SUBTYPE_name = map[int32]string{
		0: "RES_ENTERAINMENT_BATTLETYPE_NULL",
		1: "RES_PROJECT8_BATTLETYPE_1V1",
		2: "RES_PROJECT8_BATTLETYPE_2V2",
		3: "RES_PROJECT8_BATTLETYPE_FASTMODE",
		4: "RES_PROJECT8_BATTLETYPE_1V1_MATCH",
		5: "RES_PROJECT8_BATTLETYPE_2V2_MATCH",
		6: "RES_PROJECT8_BATTLETYPE_BOUNTY",
	}
	RES_ENTERAINMENT_SUBTYPE_value = map[string]int32{
		"RES_ENTERAINMENT_BATTLETYPE_NULL":  0,
		"RES_PROJECT8_BATTLETYPE_1V1":       1,
		"RES_PROJECT8_BATTLETYPE_2V2":       2,
		"RES_PROJECT8_BATTLETYPE_FASTMODE":  3,
		"RES_PROJECT8_BATTLETYPE_1V1_MATCH": 4,
		"RES_PROJECT8_BATTLETYPE_2V2_MATCH": 5,
		"RES_PROJECT8_BATTLETYPE_BOUNTY":    6,
	}
)

func (x RES_ENTERAINMENT_SUBTYPE) Enum() *RES_ENTERAINMENT_SUBTYPE {
	p := new(RES_ENTERAINMENT_SUBTYPE)
	*p = x
	return p
}

func (x RES_ENTERAINMENT_SUBTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_ENTERAINMENT_SUBTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[48].Descriptor()
}

func (RES_ENTERAINMENT_SUBTYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[48]
}

func (x RES_ENTERAINMENT_SUBTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_ENTERAINMENT_SUBTYPE.Descriptor instead.
func (RES_ENTERAINMENT_SUBTYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{48}
}

type RES_USABLE_HERO_CREATE_METHOD int32

const (
	RES_USABLE_HERO_CREATE_METHOD_RES_USABLE_HERO_CREATE_METHOD_BY_ACNT           RES_USABLE_HERO_CREATE_METHOD = 0
	RES_USABLE_HERO_CREATE_METHOD_RES_USABLE_HERO_CREATE_METHOD_BY_DESK_RANDOM    RES_USABLE_HERO_CREATE_METHOD = 1
	RES_USABLE_HERO_CREATE_METHOD_RES_USABLE_HERO_CREATE_METHOD_BY_PREBPHERO_POOL RES_USABLE_HERO_CREATE_METHOD = 2
)

// Enum value maps for RES_USABLE_HERO_CREATE_METHOD.
var (
	RES_USABLE_HERO_CREATE_METHOD_name = map[int32]string{
		0: "RES_USABLE_HERO_CREATE_METHOD_BY_ACNT",
		1: "RES_USABLE_HERO_CREATE_METHOD_BY_DESK_RANDOM",
		2: "RES_USABLE_HERO_CREATE_METHOD_BY_PREBPHERO_POOL",
	}
	RES_USABLE_HERO_CREATE_METHOD_value = map[string]int32{
		"RES_USABLE_HERO_CREATE_METHOD_BY_ACNT":           0,
		"RES_USABLE_HERO_CREATE_METHOD_BY_DESK_RANDOM":    1,
		"RES_USABLE_HERO_CREATE_METHOD_BY_PREBPHERO_POOL": 2,
	}
)

func (x RES_USABLE_HERO_CREATE_METHOD) Enum() *RES_USABLE_HERO_CREATE_METHOD {
	p := new(RES_USABLE_HERO_CREATE_METHOD)
	*p = x
	return p
}

func (x RES_USABLE_HERO_CREATE_METHOD) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_USABLE_HERO_CREATE_METHOD) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[49].Descriptor()
}

func (RES_USABLE_HERO_CREATE_METHOD) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[49]
}

func (x RES_USABLE_HERO_CREATE_METHOD) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_USABLE_HERO_CREATE_METHOD.Descriptor instead.
func (RES_USABLE_HERO_CREATE_METHOD) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{49}
}

type RES_PROJ8_RECOMMEND_DIFFICULTY_TYPE int32

const (
	RES_PROJ8_RECOMMEND_DIFFICULTY_TYPE_RES_PROJ8_RECOMMEND_DIFFICULTY_TYPE_LOW    RES_PROJ8_RECOMMEND_DIFFICULTY_TYPE = 0
	RES_PROJ8_RECOMMEND_DIFFICULTY_TYPE_RES_PROJ8_RECOMMEND_DIFFICULTY_TYPE_MIDDLE RES_PROJ8_RECOMMEND_DIFFICULTY_TYPE = 1
	RES_PROJ8_RECOMMEND_DIFFICULTY_TYPE_RES_PROJ8_RECOMMEND_DIFFICULTY_TYPE_HIGH   RES_PROJ8_RECOMMEND_DIFFICULTY_TYPE = 2
)

// Enum value maps for RES_PROJ8_RECOMMEND_DIFFICULTY_TYPE.
var (
	RES_PROJ8_RECOMMEND_DIFFICULTY_TYPE_name = map[int32]string{
		0: "RES_PROJ8_RECOMMEND_DIFFICULTY_TYPE_LOW",
		1: "RES_PROJ8_RECOMMEND_DIFFICULTY_TYPE_MIDDLE",
		2: "RES_PROJ8_RECOMMEND_DIFFICULTY_TYPE_HIGH",
	}
	RES_PROJ8_RECOMMEND_DIFFICULTY_TYPE_value = map[string]int32{
		"RES_PROJ8_RECOMMEND_DIFFICULTY_TYPE_LOW":    0,
		"RES_PROJ8_RECOMMEND_DIFFICULTY_TYPE_MIDDLE": 1,
		"RES_PROJ8_RECOMMEND_DIFFICULTY_TYPE_HIGH":   2,
	}
)

func (x RES_PROJ8_RECOMMEND_DIFFICULTY_TYPE) Enum() *RES_PROJ8_RECOMMEND_DIFFICULTY_TYPE {
	p := new(RES_PROJ8_RECOMMEND_DIFFICULTY_TYPE)
	*p = x
	return p
}

func (x RES_PROJ8_RECOMMEND_DIFFICULTY_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_PROJ8_RECOMMEND_DIFFICULTY_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[50].Descriptor()
}

func (RES_PROJ8_RECOMMEND_DIFFICULTY_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[50]
}

func (x RES_PROJ8_RECOMMEND_DIFFICULTY_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_PROJ8_RECOMMEND_DIFFICULTY_TYPE.Descriptor instead.
func (RES_PROJ8_RECOMMEND_DIFFICULTY_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{50}
}

type RES_PROJ8_RECOMMEND_ARRANGE_TYPE int32

const (
	RES_PROJ8_RECOMMEND_ARRANGE_TYPE_RES_PROJ8_RECOMMEND_ARRANGE_TYPE_GUIDE    RES_PROJ8_RECOMMEND_ARRANGE_TYPE = 0
	RES_PROJ8_RECOMMEND_ARRANGE_TYPE_RES_PROJ8_RECOMMEND_ARRANGE_TYPE_OFFICIAL RES_PROJ8_RECOMMEND_ARRANGE_TYPE = 1
	RES_PROJ8_RECOMMEND_ARRANGE_TYPE_RES_PROJ8_RECOMMEND_ARRANGE_TYPE_HOT      RES_PROJ8_RECOMMEND_ARRANGE_TYPE = 2
)

// Enum value maps for RES_PROJ8_RECOMMEND_ARRANGE_TYPE.
var (
	RES_PROJ8_RECOMMEND_ARRANGE_TYPE_name = map[int32]string{
		0: "RES_PROJ8_RECOMMEND_ARRANGE_TYPE_GUIDE",
		1: "RES_PROJ8_RECOMMEND_ARRANGE_TYPE_OFFICIAL",
		2: "RES_PROJ8_RECOMMEND_ARRANGE_TYPE_HOT",
	}
	RES_PROJ8_RECOMMEND_ARRANGE_TYPE_value = map[string]int32{
		"RES_PROJ8_RECOMMEND_ARRANGE_TYPE_GUIDE":    0,
		"RES_PROJ8_RECOMMEND_ARRANGE_TYPE_OFFICIAL": 1,
		"RES_PROJ8_RECOMMEND_ARRANGE_TYPE_HOT":      2,
	}
)

func (x RES_PROJ8_RECOMMEND_ARRANGE_TYPE) Enum() *RES_PROJ8_RECOMMEND_ARRANGE_TYPE {
	p := new(RES_PROJ8_RECOMMEND_ARRANGE_TYPE)
	*p = x
	return p
}

func (x RES_PROJ8_RECOMMEND_ARRANGE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_PROJ8_RECOMMEND_ARRANGE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[51].Descriptor()
}

func (RES_PROJ8_RECOMMEND_ARRANGE_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[51]
}

func (x RES_PROJ8_RECOMMEND_ARRANGE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_PROJ8_RECOMMEND_ARRANGE_TYPE.Descriptor instead.
func (RES_PROJ8_RECOMMEND_ARRANGE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{51}
}

type RES_BATTLE_ENERGY_TYPE int32

const (
	RES_BATTLE_ENERGY_TYPE_RES_BATTLE_ENERGY_TYPE_NO_ENERGY RES_BATTLE_ENERGY_TYPE = 0
	RES_BATTLE_ENERGY_TYPE_RES_BATTLE_ENERGY_TYPE_ENERGY    RES_BATTLE_ENERGY_TYPE = 1
	RES_BATTLE_ENERGY_TYPE_RES_BATTLE_ENERGY_TYPE_NONE      RES_BATTLE_ENERGY_TYPE = 2
)

// Enum value maps for RES_BATTLE_ENERGY_TYPE.
var (
	RES_BATTLE_ENERGY_TYPE_name = map[int32]string{
		0: "RES_BATTLE_ENERGY_TYPE_NO_ENERGY",
		1: "RES_BATTLE_ENERGY_TYPE_ENERGY",
		2: "RES_BATTLE_ENERGY_TYPE_NONE",
	}
	RES_BATTLE_ENERGY_TYPE_value = map[string]int32{
		"RES_BATTLE_ENERGY_TYPE_NO_ENERGY": 0,
		"RES_BATTLE_ENERGY_TYPE_ENERGY":    1,
		"RES_BATTLE_ENERGY_TYPE_NONE":      2,
	}
)

func (x RES_BATTLE_ENERGY_TYPE) Enum() *RES_BATTLE_ENERGY_TYPE {
	p := new(RES_BATTLE_ENERGY_TYPE)
	*p = x
	return p
}

func (x RES_BATTLE_ENERGY_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_BATTLE_ENERGY_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[52].Descriptor()
}

func (RES_BATTLE_ENERGY_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[52]
}

func (x RES_BATTLE_ENERGY_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_BATTLE_ENERGY_TYPE.Descriptor instead.
func (RES_BATTLE_ENERGY_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{52}
}

type RES_ALTERNATIVE_SKIN_RES_TYPE int32

const (
	RES_ALTERNATIVE_SKIN_RES_TYPE_RES_ALTERNATIVE_SKIN_RES_TYPE_PARTICLE_AND_SOUND RES_ALTERNATIVE_SKIN_RES_TYPE = 0
	RES_ALTERNATIVE_SKIN_RES_TYPE_RES_ALTERNATIVE_SKIN_RES_TYPE_ONLY_PARTICLE      RES_ALTERNATIVE_SKIN_RES_TYPE = 1
	RES_ALTERNATIVE_SKIN_RES_TYPE_RES_ALTERNATIVE_SKIN_RES_TYPE_ONLY_SOUND         RES_ALTERNATIVE_SKIN_RES_TYPE = 2
)

// Enum value maps for RES_ALTERNATIVE_SKIN_RES_TYPE.
var (
	RES_ALTERNATIVE_SKIN_RES_TYPE_name = map[int32]string{
		0: "RES_ALTERNATIVE_SKIN_RES_TYPE_PARTICLE_AND_SOUND",
		1: "RES_ALTERNATIVE_SKIN_RES_TYPE_ONLY_PARTICLE",
		2: "RES_ALTERNATIVE_SKIN_RES_TYPE_ONLY_SOUND",
	}
	RES_ALTERNATIVE_SKIN_RES_TYPE_value = map[string]int32{
		"RES_ALTERNATIVE_SKIN_RES_TYPE_PARTICLE_AND_SOUND": 0,
		"RES_ALTERNATIVE_SKIN_RES_TYPE_ONLY_PARTICLE":      1,
		"RES_ALTERNATIVE_SKIN_RES_TYPE_ONLY_SOUND":         2,
	}
)

func (x RES_ALTERNATIVE_SKIN_RES_TYPE) Enum() *RES_ALTERNATIVE_SKIN_RES_TYPE {
	p := new(RES_ALTERNATIVE_SKIN_RES_TYPE)
	*p = x
	return p
}

func (x RES_ALTERNATIVE_SKIN_RES_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_ALTERNATIVE_SKIN_RES_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[53].Descriptor()
}

func (RES_ALTERNATIVE_SKIN_RES_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[53]
}

func (x RES_ALTERNATIVE_SKIN_RES_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_ALTERNATIVE_SKIN_RES_TYPE.Descriptor instead.
func (RES_ALTERNATIVE_SKIN_RES_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{53}
}

type RES_PROJECT8_EQUIP_ONLY_TYPE int32

const (
	RES_PROJECT8_EQUIP_ONLY_TYPE_RES_PROJECT8_EQUIP_ONLY_TYPE_DEFAULT    RES_PROJECT8_EQUIP_ONLY_TYPE = 0
	RES_PROJECT8_EQUIP_ONLY_TYPE_RES_PROJECT8_EQUIP_ONLY_TYPE_EQUIP_ONLY RES_PROJECT8_EQUIP_ONLY_TYPE = 1
	RES_PROJECT8_EQUIP_ONLY_TYPE_RES_PROJECT8_EQUIP_ONLY_TYPE_GOD_ONLY   RES_PROJECT8_EQUIP_ONLY_TYPE = 2
	RES_PROJECT8_EQUIP_ONLY_TYPE_RES_PROJECT8_EQUIP_ONLY_TYPE_HAIDU_ONLY RES_PROJECT8_EQUIP_ONLY_TYPE = 3
)

// Enum value maps for RES_PROJECT8_EQUIP_ONLY_TYPE.
var (
	RES_PROJECT8_EQUIP_ONLY_TYPE_name = map[int32]string{
		0: "RES_PROJECT8_EQUIP_ONLY_TYPE_DEFAULT",
		1: "RES_PROJECT8_EQUIP_ONLY_TYPE_EQUIP_ONLY",
		2: "RES_PROJECT8_EQUIP_ONLY_TYPE_GOD_ONLY",
		3: "RES_PROJECT8_EQUIP_ONLY_TYPE_HAIDU_ONLY",
	}
	RES_PROJECT8_EQUIP_ONLY_TYPE_value = map[string]int32{
		"RES_PROJECT8_EQUIP_ONLY_TYPE_DEFAULT":    0,
		"RES_PROJECT8_EQUIP_ONLY_TYPE_EQUIP_ONLY": 1,
		"RES_PROJECT8_EQUIP_ONLY_TYPE_GOD_ONLY":   2,
		"RES_PROJECT8_EQUIP_ONLY_TYPE_HAIDU_ONLY": 3,
	}
)

func (x RES_PROJECT8_EQUIP_ONLY_TYPE) Enum() *RES_PROJECT8_EQUIP_ONLY_TYPE {
	p := new(RES_PROJECT8_EQUIP_ONLY_TYPE)
	*p = x
	return p
}

func (x RES_PROJECT8_EQUIP_ONLY_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_PROJECT8_EQUIP_ONLY_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[54].Descriptor()
}

func (RES_PROJECT8_EQUIP_ONLY_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[54]
}

func (x RES_PROJECT8_EQUIP_ONLY_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_PROJECT8_EQUIP_ONLY_TYPE.Descriptor instead.
func (RES_PROJECT8_EQUIP_ONLY_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{54}
}

type RES_PROJECT8_N_SELECT_ONE_OP_TYPE int32

const (
	RES_PROJECT8_N_SELECT_ONE_OP_TYPE_RES_PROJECT8_N_SELECT_ONE_OP_TYPE_DEFAULT           RES_PROJECT8_N_SELECT_ONE_OP_TYPE = 0
	RES_PROJECT8_N_SELECT_ONE_OP_TYPE_RES_PROJECT8_N_SELECT_ONE_OP_TYPE_TREASURE          RES_PROJECT8_N_SELECT_ONE_OP_TYPE = 1
	RES_PROJECT8_N_SELECT_ONE_OP_TYPE_RES_PROJECT8_N_SELECT_ONE_OP_TYPE_TALENT            RES_PROJECT8_N_SELECT_ONE_OP_TYPE = 2
	RES_PROJECT8_N_SELECT_ONE_OP_TYPE_RES_PROJECT8_N_SELECT_ONE_OP_TYPE_LORD_SKILL_CHOOSE RES_PROJECT8_N_SELECT_ONE_OP_TYPE = 3
)

// Enum value maps for RES_PROJECT8_N_SELECT_ONE_OP_TYPE.
var (
	RES_PROJECT8_N_SELECT_ONE_OP_TYPE_name = map[int32]string{
		0: "RES_PROJECT8_N_SELECT_ONE_OP_TYPE_DEFAULT",
		1: "RES_PROJECT8_N_SELECT_ONE_OP_TYPE_TREASURE",
		2: "RES_PROJECT8_N_SELECT_ONE_OP_TYPE_TALENT",
		3: "RES_PROJECT8_N_SELECT_ONE_OP_TYPE_LORD_SKILL_CHOOSE",
	}
	RES_PROJECT8_N_SELECT_ONE_OP_TYPE_value = map[string]int32{
		"RES_PROJECT8_N_SELECT_ONE_OP_TYPE_DEFAULT":           0,
		"RES_PROJECT8_N_SELECT_ONE_OP_TYPE_TREASURE":          1,
		"RES_PROJECT8_N_SELECT_ONE_OP_TYPE_TALENT":            2,
		"RES_PROJECT8_N_SELECT_ONE_OP_TYPE_LORD_SKILL_CHOOSE": 3,
	}
)

func (x RES_PROJECT8_N_SELECT_ONE_OP_TYPE) Enum() *RES_PROJECT8_N_SELECT_ONE_OP_TYPE {
	p := new(RES_PROJECT8_N_SELECT_ONE_OP_TYPE)
	*p = x
	return p
}

func (x RES_PROJECT8_N_SELECT_ONE_OP_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_PROJECT8_N_SELECT_ONE_OP_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[55].Descriptor()
}

func (RES_PROJECT8_N_SELECT_ONE_OP_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[55]
}

func (x RES_PROJECT8_N_SELECT_ONE_OP_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_PROJECT8_N_SELECT_ONE_OP_TYPE.Descriptor instead.
func (RES_PROJECT8_N_SELECT_ONE_OP_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{55}
}

type RES_PROJECT8_JIXIABOX_STATE_TYPE int32

const (
	RES_PROJECT8_JIXIABOX_STATE_TYPE_RES_PROJECT8_JIXIABOX_STATE_DEFAULT       RES_PROJECT8_JIXIABOX_STATE_TYPE = 0
	RES_PROJECT8_JIXIABOX_STATE_TYPE_RES_PROJECT8_JIXIABOX_STATE_CREATE        RES_PROJECT8_JIXIABOX_STATE_TYPE = 1
	RES_PROJECT8_JIXIABOX_STATE_TYPE_RES_PROJECT8_JIXIABOX_STATE_REMOVE        RES_PROJECT8_JIXIABOX_STATE_TYPE = 2
	RES_PROJECT8_JIXIABOX_STATE_TYPE_RES_PROJECT8_JIXIABOX_STATE_UPDATE        RES_PROJECT8_JIXIABOX_STATE_TYPE = 3
	RES_PROJECT8_JIXIABOX_STATE_TYPE_RES_PROJECT8_JIXIABOX_STATE_SELFOPENATMAX RES_PROJECT8_JIXIABOX_STATE_TYPE = 4
	RES_PROJECT8_JIXIABOX_STATE_TYPE_RES_PROJECT8_JIXIABOX_STATE_OPENBYCLICKED RES_PROJECT8_JIXIABOX_STATE_TYPE = 5
)

// Enum value maps for RES_PROJECT8_JIXIABOX_STATE_TYPE.
var (
	RES_PROJECT8_JIXIABOX_STATE_TYPE_name = map[int32]string{
		0: "RES_PROJECT8_JIXIABOX_STATE_DEFAULT",
		1: "RES_PROJECT8_JIXIABOX_STATE_CREATE",
		2: "RES_PROJECT8_JIXIABOX_STATE_REMOVE",
		3: "RES_PROJECT8_JIXIABOX_STATE_UPDATE",
		4: "RES_PROJECT8_JIXIABOX_STATE_SELFOPENATMAX",
		5: "RES_PROJECT8_JIXIABOX_STATE_OPENBYCLICKED",
	}
	RES_PROJECT8_JIXIABOX_STATE_TYPE_value = map[string]int32{
		"RES_PROJECT8_JIXIABOX_STATE_DEFAULT":       0,
		"RES_PROJECT8_JIXIABOX_STATE_CREATE":        1,
		"RES_PROJECT8_JIXIABOX_STATE_REMOVE":        2,
		"RES_PROJECT8_JIXIABOX_STATE_UPDATE":        3,
		"RES_PROJECT8_JIXIABOX_STATE_SELFOPENATMAX": 4,
		"RES_PROJECT8_JIXIABOX_STATE_OPENBYCLICKED": 5,
	}
)

func (x RES_PROJECT8_JIXIABOX_STATE_TYPE) Enum() *RES_PROJECT8_JIXIABOX_STATE_TYPE {
	p := new(RES_PROJECT8_JIXIABOX_STATE_TYPE)
	*p = x
	return p
}

func (x RES_PROJECT8_JIXIABOX_STATE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_PROJECT8_JIXIABOX_STATE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[56].Descriptor()
}

func (RES_PROJECT8_JIXIABOX_STATE_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[56]
}

func (x RES_PROJECT8_JIXIABOX_STATE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_PROJECT8_JIXIABOX_STATE_TYPE.Descriptor instead.
func (RES_PROJECT8_JIXIABOX_STATE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{56}
}

type RES_PROJECT8_EQUIP_TYPE int32

const (
	RES_PROJECT8_EQUIP_TYPE_RES_PROJECT8_EQUIP_TYPE_NONE    RES_PROJECT8_EQUIP_TYPE = 0
	RES_PROJECT8_EQUIP_TYPE_RES_PROJECT8_EQUIP_TYPE_DAMAGE  RES_PROJECT8_EQUIP_TYPE = 1
	RES_PROJECT8_EQUIP_TYPE_RES_PROJECT8_EQUIP_TYPE_ABILITY RES_PROJECT8_EQUIP_TYPE = 2
	RES_PROJECT8_EQUIP_TYPE_RES_PROJECT8_EQUIP_TYPE_DEFENSE RES_PROJECT8_EQUIP_TYPE = 3
	RES_PROJECT8_EQUIP_TYPE_RES_PROJECT8_EQUIP_TYPE_OTHER   RES_PROJECT8_EQUIP_TYPE = 4
	RES_PROJECT8_EQUIP_TYPE_RES_PROJECT8_EQUIP_TYPE_LAST    RES_PROJECT8_EQUIP_TYPE = 5
)

// Enum value maps for RES_PROJECT8_EQUIP_TYPE.
var (
	RES_PROJECT8_EQUIP_TYPE_name = map[int32]string{
		0: "RES_PROJECT8_EQUIP_TYPE_NONE",
		1: "RES_PROJECT8_EQUIP_TYPE_DAMAGE",
		2: "RES_PROJECT8_EQUIP_TYPE_ABILITY",
		3: "RES_PROJECT8_EQUIP_TYPE_DEFENSE",
		4: "RES_PROJECT8_EQUIP_TYPE_OTHER",
		5: "RES_PROJECT8_EQUIP_TYPE_LAST",
	}
	RES_PROJECT8_EQUIP_TYPE_value = map[string]int32{
		"RES_PROJECT8_EQUIP_TYPE_NONE":    0,
		"RES_PROJECT8_EQUIP_TYPE_DAMAGE":  1,
		"RES_PROJECT8_EQUIP_TYPE_ABILITY": 2,
		"RES_PROJECT8_EQUIP_TYPE_DEFENSE": 3,
		"RES_PROJECT8_EQUIP_TYPE_OTHER":   4,
		"RES_PROJECT8_EQUIP_TYPE_LAST":    5,
	}
)

func (x RES_PROJECT8_EQUIP_TYPE) Enum() *RES_PROJECT8_EQUIP_TYPE {
	p := new(RES_PROJECT8_EQUIP_TYPE)
	*p = x
	return p
}

func (x RES_PROJECT8_EQUIP_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_PROJECT8_EQUIP_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[57].Descriptor()
}

func (RES_PROJECT8_EQUIP_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[57]
}

func (x RES_PROJECT8_EQUIP_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_PROJECT8_EQUIP_TYPE.Descriptor instead.
func (RES_PROJECT8_EQUIP_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{57}
}

type RES_PROJECT8_TALENT_CONDITION int32

const (
	RES_PROJECT8_TALENT_CONDITION_RES_PROJECT8_TALENT_CONDITION_NONE  RES_PROJECT8_TALENT_CONDITION = 0
	RES_PROJECT8_TALENT_CONDITION_RES_PROJECT8_TALENT_CONDITION_HEROS RES_PROJECT8_TALENT_CONDITION = 1
)

// Enum value maps for RES_PROJECT8_TALENT_CONDITION.
var (
	RES_PROJECT8_TALENT_CONDITION_name = map[int32]string{
		0: "RES_PROJECT8_TALENT_CONDITION_NONE",
		1: "RES_PROJECT8_TALENT_CONDITION_HEROS",
	}
	RES_PROJECT8_TALENT_CONDITION_value = map[string]int32{
		"RES_PROJECT8_TALENT_CONDITION_NONE":  0,
		"RES_PROJECT8_TALENT_CONDITION_HEROS": 1,
	}
)

func (x RES_PROJECT8_TALENT_CONDITION) Enum() *RES_PROJECT8_TALENT_CONDITION {
	p := new(RES_PROJECT8_TALENT_CONDITION)
	*p = x
	return p
}

func (x RES_PROJECT8_TALENT_CONDITION) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_PROJECT8_TALENT_CONDITION) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[58].Descriptor()
}

func (RES_PROJECT8_TALENT_CONDITION) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[58]
}

func (x RES_PROJECT8_TALENT_CONDITION) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_PROJECT8_TALENT_CONDITION.Descriptor instead.
func (RES_PROJECT8_TALENT_CONDITION) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{58}
}

type RES_PROJECT8_TALENT_PROMOTE_TYPE int32

const (
	RES_PROJECT8_TALENT_PROMOTE_TYPE_RES_PROJECT8_TALENT_PROMOTE_TYPE_NONE     RES_PROJECT8_TALENT_PROMOTE_TYPE = 0
	RES_PROJECT8_TALENT_PROMOTE_TYPE_RES_PROJECT8_TALENT_PROMOTE_TYPE_STATIC   RES_PROJECT8_TALENT_PROMOTE_TYPE = 1
	RES_PROJECT8_TALENT_PROMOTE_TYPE_RES_PROJECT8_TALENT_PROMOTE_TYPE_HEROS    RES_PROJECT8_TALENT_PROMOTE_TYPE = 2
	RES_PROJECT8_TALENT_PROMOTE_TYPE_RES_PROJECT8_TALENT_PROMOTE_TYPE_RELATIVE RES_PROJECT8_TALENT_PROMOTE_TYPE = 3
	RES_PROJECT8_TALENT_PROMOTE_TYPE_RES_PROJECT8_TALENT_PROMOTE_TYPE_ALL      RES_PROJECT8_TALENT_PROMOTE_TYPE = 4
)

// Enum value maps for RES_PROJECT8_TALENT_PROMOTE_TYPE.
var (
	RES_PROJECT8_TALENT_PROMOTE_TYPE_name = map[int32]string{
		0: "RES_PROJECT8_TALENT_PROMOTE_TYPE_NONE",
		1: "RES_PROJECT8_TALENT_PROMOTE_TYPE_STATIC",
		2: "RES_PROJECT8_TALENT_PROMOTE_TYPE_HEROS",
		3: "RES_PROJECT8_TALENT_PROMOTE_TYPE_RELATIVE",
		4: "RES_PROJECT8_TALENT_PROMOTE_TYPE_ALL",
	}
	RES_PROJECT8_TALENT_PROMOTE_TYPE_value = map[string]int32{
		"RES_PROJECT8_TALENT_PROMOTE_TYPE_NONE":     0,
		"RES_PROJECT8_TALENT_PROMOTE_TYPE_STATIC":   1,
		"RES_PROJECT8_TALENT_PROMOTE_TYPE_HEROS":    2,
		"RES_PROJECT8_TALENT_PROMOTE_TYPE_RELATIVE": 3,
		"RES_PROJECT8_TALENT_PROMOTE_TYPE_ALL":      4,
	}
)

func (x RES_PROJECT8_TALENT_PROMOTE_TYPE) Enum() *RES_PROJECT8_TALENT_PROMOTE_TYPE {
	p := new(RES_PROJECT8_TALENT_PROMOTE_TYPE)
	*p = x
	return p
}

func (x RES_PROJECT8_TALENT_PROMOTE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_PROJECT8_TALENT_PROMOTE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[59].Descriptor()
}

func (RES_PROJECT8_TALENT_PROMOTE_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[59]
}

func (x RES_PROJECT8_TALENT_PROMOTE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_PROJECT8_TALENT_PROMOTE_TYPE.Descriptor instead.
func (RES_PROJECT8_TALENT_PROMOTE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{59}
}

type RES_PROJECT8_BUFF_SELECT_TYPE int32

const (
	RES_PROJECT8_BUFF_SELECT_TYPE_RES_PROJECT8_BUFF_SELECT_TYPE_Default               RES_PROJECT8_BUFF_SELECT_TYPE = 0
	RES_PROJECT8_BUFF_SELECT_TYPE_RES_PROJECT8_BUFF_SELECT_TYPE_SELF_GROUP            RES_PROJECT8_BUFF_SELECT_TYPE = 1
	RES_PROJECT8_BUFF_SELECT_TYPE_RES_PROJECT8_BUFF_SELECT_TYPE_SELF_ALL              RES_PROJECT8_BUFF_SELECT_TYPE = 2
	RES_PROJECT8_BUFF_SELECT_TYPE_RES_PROJECT8_BUFF_SELECT_TYPE_ENEMY_ALL             RES_PROJECT8_BUFF_SELECT_TYPE = 3
	RES_PROJECT8_BUFF_SELECT_TYPE_RES_PROJECT8_BUFF_SELECT_TYPE_SELF_GROUP_MOST_EQUIP RES_PROJECT8_BUFF_SELECT_TYPE = 4
	RES_PROJECT8_BUFF_SELECT_TYPE_RES_PROJECT8_BUFF_SELECT_TYPE_SELF_LORD             RES_PROJECT8_BUFF_SELECT_TYPE = 5
	RES_PROJECT8_BUFF_SELECT_TYPE_RES_PROJECT8_BUFF_SELECT_TYPE_SELF_ALL_HERO         RES_PROJECT8_BUFF_SELECT_TYPE = 6
	RES_PROJECT8_BUFF_SELECT_TYPE_RES_PROJECT8_BUFF_SELECT_TYPE_ENEMY_ALL_HERO        RES_PROJECT8_BUFF_SELECT_TYPE = 7
)

// Enum value maps for RES_PROJECT8_BUFF_SELECT_TYPE.
var (
	RES_PROJECT8_BUFF_SELECT_TYPE_name = map[int32]string{
		0: "RES_PROJECT8_BUFF_SELECT_TYPE_Default",
		1: "RES_PROJECT8_BUFF_SELECT_TYPE_SELF_GROUP",
		2: "RES_PROJECT8_BUFF_SELECT_TYPE_SELF_ALL",
		3: "RES_PROJECT8_BUFF_SELECT_TYPE_ENEMY_ALL",
		4: "RES_PROJECT8_BUFF_SELECT_TYPE_SELF_GROUP_MOST_EQUIP",
		5: "RES_PROJECT8_BUFF_SELECT_TYPE_SELF_LORD",
		6: "RES_PROJECT8_BUFF_SELECT_TYPE_SELF_ALL_HERO",
		7: "RES_PROJECT8_BUFF_SELECT_TYPE_ENEMY_ALL_HERO",
	}
	RES_PROJECT8_BUFF_SELECT_TYPE_value = map[string]int32{
		"RES_PROJECT8_BUFF_SELECT_TYPE_Default":               0,
		"RES_PROJECT8_BUFF_SELECT_TYPE_SELF_GROUP":            1,
		"RES_PROJECT8_BUFF_SELECT_TYPE_SELF_ALL":              2,
		"RES_PROJECT8_BUFF_SELECT_TYPE_ENEMY_ALL":             3,
		"RES_PROJECT8_BUFF_SELECT_TYPE_SELF_GROUP_MOST_EQUIP": 4,
		"RES_PROJECT8_BUFF_SELECT_TYPE_SELF_LORD":             5,
		"RES_PROJECT8_BUFF_SELECT_TYPE_SELF_ALL_HERO":         6,
		"RES_PROJECT8_BUFF_SELECT_TYPE_ENEMY_ALL_HERO":        7,
	}
)

func (x RES_PROJECT8_BUFF_SELECT_TYPE) Enum() *RES_PROJECT8_BUFF_SELECT_TYPE {
	p := new(RES_PROJECT8_BUFF_SELECT_TYPE)
	*p = x
	return p
}

func (x RES_PROJECT8_BUFF_SELECT_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_PROJECT8_BUFF_SELECT_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[60].Descriptor()
}

func (RES_PROJECT8_BUFF_SELECT_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[60]
}

func (x RES_PROJECT8_BUFF_SELECT_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_PROJECT8_BUFF_SELECT_TYPE.Descriptor instead.
func (RES_PROJECT8_BUFF_SELECT_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{60}
}

type RES_GAMESVR_PLAT_TYPE int32

const (
	RES_GAMESVR_PLAT_TYPE_RES_GAMESVR_PLAT_NULL        RES_GAMESVR_PLAT_TYPE = 0
	RES_GAMESVR_PLAT_TYPE_RES_GAMESVR_PLAT_MQQ         RES_GAMESVR_PLAT_TYPE = 1
	RES_GAMESVR_PLAT_TYPE_RES_GAMESVR_PLAT_WEIXIN      RES_GAMESVR_PLAT_TYPE = 2
	RES_GAMESVR_PLAT_TYPE_RES_GAMESVR_PLAT_GUEST       RES_GAMESVR_PLAT_TYPE = 3
	RES_GAMESVR_PLAT_TYPE_RES_GAMESVR_PLAT_FACEBOOK    RES_GAMESVR_PLAT_TYPE = 4
	RES_GAMESVR_PLAT_TYPE_RES_GAMESVR_PLAT_GAME_CENTER RES_GAMESVR_PLAT_TYPE = 5
	RES_GAMESVR_PLAT_TYPE_RES_GAMESVR_PLAT_GOOGLE      RES_GAMESVR_PLAT_TYPE = 6
)

// Enum value maps for RES_GAMESVR_PLAT_TYPE.
var (
	RES_GAMESVR_PLAT_TYPE_name = map[int32]string{
		0: "RES_GAMESVR_PLAT_NULL",
		1: "RES_GAMESVR_PLAT_MQQ",
		2: "RES_GAMESVR_PLAT_WEIXIN",
		3: "RES_GAMESVR_PLAT_GUEST",
		4: "RES_GAMESVR_PLAT_FACEBOOK",
		5: "RES_GAMESVR_PLAT_GAME_CENTER",
		6: "RES_GAMESVR_PLAT_GOOGLE",
	}
	RES_GAMESVR_PLAT_TYPE_value = map[string]int32{
		"RES_GAMESVR_PLAT_NULL":        0,
		"RES_GAMESVR_PLAT_MQQ":         1,
		"RES_GAMESVR_PLAT_WEIXIN":      2,
		"RES_GAMESVR_PLAT_GUEST":       3,
		"RES_GAMESVR_PLAT_FACEBOOK":    4,
		"RES_GAMESVR_PLAT_GAME_CENTER": 5,
		"RES_GAMESVR_PLAT_GOOGLE":      6,
	}
)

func (x RES_GAMESVR_PLAT_TYPE) Enum() *RES_GAMESVR_PLAT_TYPE {
	p := new(RES_GAMESVR_PLAT_TYPE)
	*p = x
	return p
}

func (x RES_GAMESVR_PLAT_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_GAMESVR_PLAT_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[61].Descriptor()
}

func (RES_GAMESVR_PLAT_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[61]
}

func (x RES_GAMESVR_PLAT_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_GAMESVR_PLAT_TYPE.Descriptor instead.
func (RES_GAMESVR_PLAT_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{61}
}

type RES_TRIAL_TYPE int32

const (
	RES_TRIAL_TYPE_RES_TRIAL_TYPE_INVALID  RES_TRIAL_TYPE = 0
	RES_TRIAL_TYPE_RES_TRIAL_TYPE_HERO     RES_TRIAL_TYPE = 1
	RES_TRIAL_TYPE_RES_TRIAL_TYPE_NORMAL   RES_TRIAL_TYPE = 2
	RES_TRIAL_TYPE_RES_TRIAL_TYPE_ADVANCED RES_TRIAL_TYPE = 3
	RES_TRIAL_TYPE_RES_TRIAL_TYPE_LAST     RES_TRIAL_TYPE = 4
)

// Enum value maps for RES_TRIAL_TYPE.
var (
	RES_TRIAL_TYPE_name = map[int32]string{
		0: "RES_TRIAL_TYPE_INVALID",
		1: "RES_TRIAL_TYPE_HERO",
		2: "RES_TRIAL_TYPE_NORMAL",
		3: "RES_TRIAL_TYPE_ADVANCED",
		4: "RES_TRIAL_TYPE_LAST",
	}
	RES_TRIAL_TYPE_value = map[string]int32{
		"RES_TRIAL_TYPE_INVALID":  0,
		"RES_TRIAL_TYPE_HERO":     1,
		"RES_TRIAL_TYPE_NORMAL":   2,
		"RES_TRIAL_TYPE_ADVANCED": 3,
		"RES_TRIAL_TYPE_LAST":     4,
	}
)

func (x RES_TRIAL_TYPE) Enum() *RES_TRIAL_TYPE {
	p := new(RES_TRIAL_TYPE)
	*p = x
	return p
}

func (x RES_TRIAL_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_TRIAL_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[62].Descriptor()
}

func (RES_TRIAL_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[62]
}

func (x RES_TRIAL_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_TRIAL_TYPE.Descriptor instead.
func (RES_TRIAL_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{62}
}

type RES_PROJECT8_TALENT_BUFF_SELECT_TYPE int32

const (
	RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_Default              RES_PROJECT8_TALENT_BUFF_SELECT_TYPE = 0
	RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_SELF_PLAYER          RES_PROJECT8_TALENT_BUFF_SELECT_TYPE = 1
	RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_SELF_CAREER_TANK     RES_PROJECT8_TALENT_BUFF_SELECT_TYPE = 2
	RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_SELF_CAREER_AD       RES_PROJECT8_TALENT_BUFF_SELECT_TYPE = 3
	RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_SELF_CAREER_AID      RES_PROJECT8_TALENT_BUFF_SELECT_TYPE = 4
	RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_SELF_CAREER_AP       RES_PROJECT8_TALENT_BUFF_SELECT_TYPE = 5
	RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_SELF_CAREER_SOLDER   RES_PROJECT8_TALENT_BUFF_SELECT_TYPE = 6
	RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_SELF_CAREER_ASSASSIN RES_PROJECT8_TALENT_BUFF_SELECT_TYPE = 7
	RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_SELF_CAMP_MAX        RES_PROJECT8_TALENT_BUFF_SELECT_TYPE = 8
	RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_SELF_ALL             RES_PROJECT8_TALENT_BUFF_SELECT_TYPE = 9
	RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_ENEMY_ALL            RES_PROJECT8_TALENT_BUFF_SELECT_TYPE = 10
	RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_SELF_PLAYER_ROUND    RES_PROJECT8_TALENT_BUFF_SELECT_TYPE = 11
)

// Enum value maps for RES_PROJECT8_TALENT_BUFF_SELECT_TYPE.
var (
	RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_name = map[int32]string{
		0:  "RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_Default",
		1:  "RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_SELF_PLAYER",
		2:  "RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_SELF_CAREER_TANK",
		3:  "RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_SELF_CAREER_AD",
		4:  "RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_SELF_CAREER_AID",
		5:  "RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_SELF_CAREER_AP",
		6:  "RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_SELF_CAREER_SOLDER",
		7:  "RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_SELF_CAREER_ASSASSIN",
		8:  "RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_SELF_CAMP_MAX",
		9:  "RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_SELF_ALL",
		10: "RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_ENEMY_ALL",
		11: "RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_SELF_PLAYER_ROUND",
	}
	RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_value = map[string]int32{
		"RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_Default":              0,
		"RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_SELF_PLAYER":          1,
		"RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_SELF_CAREER_TANK":     2,
		"RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_SELF_CAREER_AD":       3,
		"RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_SELF_CAREER_AID":      4,
		"RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_SELF_CAREER_AP":       5,
		"RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_SELF_CAREER_SOLDER":   6,
		"RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_SELF_CAREER_ASSASSIN": 7,
		"RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_SELF_CAMP_MAX":        8,
		"RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_SELF_ALL":             9,
		"RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_ENEMY_ALL":            10,
		"RES_PROJECT8_TALENT_BUFF_SELECT_TYPE_SELF_PLAYER_ROUND":    11,
	}
)

func (x RES_PROJECT8_TALENT_BUFF_SELECT_TYPE) Enum() *RES_PROJECT8_TALENT_BUFF_SELECT_TYPE {
	p := new(RES_PROJECT8_TALENT_BUFF_SELECT_TYPE)
	*p = x
	return p
}

func (x RES_PROJECT8_TALENT_BUFF_SELECT_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_PROJECT8_TALENT_BUFF_SELECT_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[63].Descriptor()
}

func (RES_PROJECT8_TALENT_BUFF_SELECT_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[63]
}

func (x RES_PROJECT8_TALENT_BUFF_SELECT_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_PROJECT8_TALENT_BUFF_SELECT_TYPE.Descriptor instead.
func (RES_PROJECT8_TALENT_BUFF_SELECT_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{63}
}

type RES_PROJECT8_MATCH_GRADE_TYPE int32

const (
	RES_PROJECT8_MATCH_GRADE_TYPE_RES_PROJECT8_MATCH_GRADE_TYPE_Default RES_PROJECT8_MATCH_GRADE_TYPE = 0
	RES_PROJECT8_MATCH_GRADE_TYPE_RES_PROJECT8_MATCH_GRADE_TYPE_LOW     RES_PROJECT8_MATCH_GRADE_TYPE = 1
	RES_PROJECT8_MATCH_GRADE_TYPE_RES_PROJECT8_MATCH_GRADE_TYPE_MIDDLE  RES_PROJECT8_MATCH_GRADE_TYPE = 2
	RES_PROJECT8_MATCH_GRADE_TYPE_RES_PROJECT8_MATCH_GRADE_TYPE_HIGH    RES_PROJECT8_MATCH_GRADE_TYPE = 3
	RES_PROJECT8_MATCH_GRADE_TYPE_RES_PROJECT8_MATCH_GRADE_TYPE_TOP     RES_PROJECT8_MATCH_GRADE_TYPE = 4
	RES_PROJECT8_MATCH_GRADE_TYPE_RES_PROJECT8_MATCH_GRADE_TYPE_ALL     RES_PROJECT8_MATCH_GRADE_TYPE = 5
)

// Enum value maps for RES_PROJECT8_MATCH_GRADE_TYPE.
var (
	RES_PROJECT8_MATCH_GRADE_TYPE_name = map[int32]string{
		0: "RES_PROJECT8_MATCH_GRADE_TYPE_Default",
		1: "RES_PROJECT8_MATCH_GRADE_TYPE_LOW",
		2: "RES_PROJECT8_MATCH_GRADE_TYPE_MIDDLE",
		3: "RES_PROJECT8_MATCH_GRADE_TYPE_HIGH",
		4: "RES_PROJECT8_MATCH_GRADE_TYPE_TOP",
		5: "RES_PROJECT8_MATCH_GRADE_TYPE_ALL",
	}
	RES_PROJECT8_MATCH_GRADE_TYPE_value = map[string]int32{
		"RES_PROJECT8_MATCH_GRADE_TYPE_Default": 0,
		"RES_PROJECT8_MATCH_GRADE_TYPE_LOW":     1,
		"RES_PROJECT8_MATCH_GRADE_TYPE_MIDDLE":  2,
		"RES_PROJECT8_MATCH_GRADE_TYPE_HIGH":    3,
		"RES_PROJECT8_MATCH_GRADE_TYPE_TOP":     4,
		"RES_PROJECT8_MATCH_GRADE_TYPE_ALL":     5,
	}
)

func (x RES_PROJECT8_MATCH_GRADE_TYPE) Enum() *RES_PROJECT8_MATCH_GRADE_TYPE {
	p := new(RES_PROJECT8_MATCH_GRADE_TYPE)
	*p = x
	return p
}

func (x RES_PROJECT8_MATCH_GRADE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_PROJECT8_MATCH_GRADE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[64].Descriptor()
}

func (RES_PROJECT8_MATCH_GRADE_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[64]
}

func (x RES_PROJECT8_MATCH_GRADE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_PROJECT8_MATCH_GRADE_TYPE.Descriptor instead.
func (RES_PROJECT8_MATCH_GRADE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{64}
}

type RES_GAMEOVER_COND_TYPE int32

const (
	RES_GAMEOVER_COND_TYPE_RES_GAMEOVER_COND_TYPE_Default                        RES_GAMEOVER_COND_TYPE = 0
	RES_GAMEOVER_COND_TYPE_RES_GAMEOVER_COND_TYPE_LEFT_HPRATIO                   RES_GAMEOVER_COND_TYPE = 1
	RES_GAMEOVER_COND_TYPE_RES_GAMEOVER_COND_TYPE_MAX_LEFT_HPRATIO               RES_GAMEOVER_COND_TYPE = 2
	RES_GAMEOVER_COND_TYPE_RES_GAMEOVER_COND_TYPE_REVEASERANK_ROUNDNUM           RES_GAMEOVER_COND_TYPE = 3
	RES_GAMEOVER_COND_TYPE_RES_GAMEOVER_COND_TYPE_FILTER_HERO_STAR_NUM           RES_GAMEOVER_COND_TYPE = 4
	RES_GAMEOVER_COND_TYPE_RES_GAMEOVER_COND_TYPE_ONE_ROUND_KILLHEROMAXNUM       RES_GAMEOVER_COND_TYPE = 5
	RES_GAMEOVER_COND_TYPE_RES_GAMEOVER_COND_TYPE_ONE_HERO_KILLHEROMAXNUM        RES_GAMEOVER_COND_TYPE = 6
	RES_GAMEOVER_COND_TYPE_RES_GAMEOVER_COND_TYPE_ONE_ROUND_OBTAIN_EQUIP_MAX_NUM RES_GAMEOVER_COND_TYPE = 7
	RES_GAMEOVER_COND_TYPE_RES_GAMEOVER_COND_TYPE_TOTAL_EQUIP_NUM                RES_GAMEOVER_COND_TYPE = 8
	RES_GAMEOVER_COND_TYPE_RES_GAMEOVER_COND_TYPE_GOLD_NUM                       RES_GAMEOVER_COND_TYPE = 9
	RES_GAMEOVER_COND_TYPE_RES_GAMEOVER_COND_TYPE_ONE_ROUND_MAX_HURT             RES_GAMEOVER_COND_TYPE = 10
	RES_GAMEOVER_COND_TYPE_RES_GAMEOVER_COND_TYPE_MAX_ACCU_WINROUND_NUM          RES_GAMEOVER_COND_TYPE = 11
	RES_GAMEOVER_COND_TYPE_RES_GAMEOVER_COND_TYPE_WIN_ROUND_NUM                  RES_GAMEOVER_COND_TYPE = 12
	RES_GAMEOVER_COND_TYPE_RES_GAMEOVER_COND_TYPE_RANK                           RES_GAMEOVER_COND_TYPE = 13
	RES_GAMEOVER_COND_TYPE_RES_GAMEOVER_COND_TYPE_WIN_ATLEAST_ROUND_NUM          RES_GAMEOVER_COND_TYPE = 14
	RES_GAMEOVER_COND_TYPE_RES_GAMEOVER_COND_TYPE_TOTAL_REFRESH_NUM              RES_GAMEOVER_COND_TYPE = 15
	RES_GAMEOVER_COND_TYPE_RES_GAMEOVER_COND_TYPE_TOTAL_MAX_HURTED               RES_GAMEOVER_COND_TYPE = 16
	RES_GAMEOVER_COND_TYPE_RES_GAMEOVER_COND_TYPE_TOTAL_MAX_HEAL                 RES_GAMEOVER_COND_TYPE = 17
	RES_GAMEOVER_COND_TYPE_RES_GAMEOVER_COND_TYPE_LAST                           RES_GAMEOVER_COND_TYPE = 18
)

// Enum value maps for RES_GAMEOVER_COND_TYPE.
var (
	RES_GAMEOVER_COND_TYPE_name = map[int32]string{
		0:  "RES_GAMEOVER_COND_TYPE_Default",
		1:  "RES_GAMEOVER_COND_TYPE_LEFT_HPRATIO",
		2:  "RES_GAMEOVER_COND_TYPE_MAX_LEFT_HPRATIO",
		3:  "RES_GAMEOVER_COND_TYPE_REVEASERANK_ROUNDNUM",
		4:  "RES_GAMEOVER_COND_TYPE_FILTER_HERO_STAR_NUM",
		5:  "RES_GAMEOVER_COND_TYPE_ONE_ROUND_KILLHEROMAXNUM",
		6:  "RES_GAMEOVER_COND_TYPE_ONE_HERO_KILLHEROMAXNUM",
		7:  "RES_GAMEOVER_COND_TYPE_ONE_ROUND_OBTAIN_EQUIP_MAX_NUM",
		8:  "RES_GAMEOVER_COND_TYPE_TOTAL_EQUIP_NUM",
		9:  "RES_GAMEOVER_COND_TYPE_GOLD_NUM",
		10: "RES_GAMEOVER_COND_TYPE_ONE_ROUND_MAX_HURT",
		11: "RES_GAMEOVER_COND_TYPE_MAX_ACCU_WINROUND_NUM",
		12: "RES_GAMEOVER_COND_TYPE_WIN_ROUND_NUM",
		13: "RES_GAMEOVER_COND_TYPE_RANK",
		14: "RES_GAMEOVER_COND_TYPE_WIN_ATLEAST_ROUND_NUM",
		15: "RES_GAMEOVER_COND_TYPE_TOTAL_REFRESH_NUM",
		16: "RES_GAMEOVER_COND_TYPE_TOTAL_MAX_HURTED",
		17: "RES_GAMEOVER_COND_TYPE_TOTAL_MAX_HEAL",
		18: "RES_GAMEOVER_COND_TYPE_LAST",
	}
	RES_GAMEOVER_COND_TYPE_value = map[string]int32{
		"RES_GAMEOVER_COND_TYPE_Default":                        0,
		"RES_GAMEOVER_COND_TYPE_LEFT_HPRATIO":                   1,
		"RES_GAMEOVER_COND_TYPE_MAX_LEFT_HPRATIO":               2,
		"RES_GAMEOVER_COND_TYPE_REVEASERANK_ROUNDNUM":           3,
		"RES_GAMEOVER_COND_TYPE_FILTER_HERO_STAR_NUM":           4,
		"RES_GAMEOVER_COND_TYPE_ONE_ROUND_KILLHEROMAXNUM":       5,
		"RES_GAMEOVER_COND_TYPE_ONE_HERO_KILLHEROMAXNUM":        6,
		"RES_GAMEOVER_COND_TYPE_ONE_ROUND_OBTAIN_EQUIP_MAX_NUM": 7,
		"RES_GAMEOVER_COND_TYPE_TOTAL_EQUIP_NUM":                8,
		"RES_GAMEOVER_COND_TYPE_GOLD_NUM":                       9,
		"RES_GAMEOVER_COND_TYPE_ONE_ROUND_MAX_HURT":             10,
		"RES_GAMEOVER_COND_TYPE_MAX_ACCU_WINROUND_NUM":          11,
		"RES_GAMEOVER_COND_TYPE_WIN_ROUND_NUM":                  12,
		"RES_GAMEOVER_COND_TYPE_RANK":                           13,
		"RES_GAMEOVER_COND_TYPE_WIN_ATLEAST_ROUND_NUM":          14,
		"RES_GAMEOVER_COND_TYPE_TOTAL_REFRESH_NUM":              15,
		"RES_GAMEOVER_COND_TYPE_TOTAL_MAX_HURTED":               16,
		"RES_GAMEOVER_COND_TYPE_TOTAL_MAX_HEAL":                 17,
		"RES_GAMEOVER_COND_TYPE_LAST":                           18,
	}
)

func (x RES_GAMEOVER_COND_TYPE) Enum() *RES_GAMEOVER_COND_TYPE {
	p := new(RES_GAMEOVER_COND_TYPE)
	*p = x
	return p
}

func (x RES_GAMEOVER_COND_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_GAMEOVER_COND_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[65].Descriptor()
}

func (RES_GAMEOVER_COND_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[65]
}

func (x RES_GAMEOVER_COND_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_GAMEOVER_COND_TYPE.Descriptor instead.
func (RES_GAMEOVER_COND_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{65}
}

type RES_HERO_ABILITY_TYPE int32

const (
	RES_HERO_ABILITY_TYPE_RES_HERO_ABILITY_NULL                    RES_HERO_ABILITY_TYPE = 0
	RES_HERO_ABILITY_TYPE_RES_HERO_ABILITY_HURT_TO_HERO            RES_HERO_ABILITY_TYPE = 1
	RES_HERO_ABILITY_TYPE_RES_HERO_ABILITY_MONEY_TRANSFORM         RES_HERO_ABILITY_TYPE = 2
	RES_HERO_ABILITY_TYPE_RES_HERO_ABILITY_HURT_TOKEN              RES_HERO_ABILITY_TYPE = 3
	RES_HERO_ABILITY_TYPE_RES_HERO_ABILITY_HURT_TOKEN_NO_DEATH     RES_HERO_ABILITY_TYPE = 4
	RES_HERO_ABILITY_TYPE_RES_HERO_ABILITY_MONEY_TOTAL             RES_HERO_ABILITY_TYPE = 5
	RES_HERO_ABILITY_TYPE_RES_HERO_ABILITY_MONEY_TOTAL_FROM_JUNGLE RES_HERO_ABILITY_TYPE = 6
	RES_HERO_ABILITY_TYPE_RES_HERO_ABILITY_LAST_HIT                RES_HERO_ABILITY_TYPE = 7
	RES_HERO_ABILITY_TYPE_RES_HERO_ABILITY_KILL                    RES_HERO_ABILITY_TYPE = 8
	RES_HERO_ABILITY_TYPE_RES_HERO_ABILITY_DEATH                   RES_HERO_ABILITY_TYPE = 9
	RES_HERO_ABILITY_TYPE_RES_HERO_ABILITY_ASSIST                  RES_HERO_ABILITY_TYPE = 10
	RES_HERO_ABILITY_TYPE_RES_HERO_ABILITY_BATTLE                  RES_HERO_ABILITY_TYPE = 11
	RES_HERO_ABILITY_TYPE_RES_HERO_ABILITY_CONTROL                 RES_HERO_ABILITY_TYPE = 12
	RES_HERO_ABILITY_TYPE_RES_HERO_ABILITY_HEAL                    RES_HERO_ABILITY_TYPE = 13
	RES_HERO_ABILITY_TYPE_RES_HERO_ABILITY_HURT_TO_ORGAN           RES_HERO_ABILITY_TYPE = 14
)

// Enum value maps for RES_HERO_ABILITY_TYPE.
var (
	RES_HERO_ABILITY_TYPE_name = map[int32]string{
		0:  "RES_HERO_ABILITY_NULL",
		1:  "RES_HERO_ABILITY_HURT_TO_HERO",
		2:  "RES_HERO_ABILITY_MONEY_TRANSFORM",
		3:  "RES_HERO_ABILITY_HURT_TOKEN",
		4:  "RES_HERO_ABILITY_HURT_TOKEN_NO_DEATH",
		5:  "RES_HERO_ABILITY_MONEY_TOTAL",
		6:  "RES_HERO_ABILITY_MONEY_TOTAL_FROM_JUNGLE",
		7:  "RES_HERO_ABILITY_LAST_HIT",
		8:  "RES_HERO_ABILITY_KILL",
		9:  "RES_HERO_ABILITY_DEATH",
		10: "RES_HERO_ABILITY_ASSIST",
		11: "RES_HERO_ABILITY_BATTLE",
		12: "RES_HERO_ABILITY_CONTROL",
		13: "RES_HERO_ABILITY_HEAL",
		14: "RES_HERO_ABILITY_HURT_TO_ORGAN",
	}
	RES_HERO_ABILITY_TYPE_value = map[string]int32{
		"RES_HERO_ABILITY_NULL":                    0,
		"RES_HERO_ABILITY_HURT_TO_HERO":            1,
		"RES_HERO_ABILITY_MONEY_TRANSFORM":         2,
		"RES_HERO_ABILITY_HURT_TOKEN":              3,
		"RES_HERO_ABILITY_HURT_TOKEN_NO_DEATH":     4,
		"RES_HERO_ABILITY_MONEY_TOTAL":             5,
		"RES_HERO_ABILITY_MONEY_TOTAL_FROM_JUNGLE": 6,
		"RES_HERO_ABILITY_LAST_HIT":                7,
		"RES_HERO_ABILITY_KILL":                    8,
		"RES_HERO_ABILITY_DEATH":                   9,
		"RES_HERO_ABILITY_ASSIST":                  10,
		"RES_HERO_ABILITY_BATTLE":                  11,
		"RES_HERO_ABILITY_CONTROL":                 12,
		"RES_HERO_ABILITY_HEAL":                    13,
		"RES_HERO_ABILITY_HURT_TO_ORGAN":           14,
	}
)

func (x RES_HERO_ABILITY_TYPE) Enum() *RES_HERO_ABILITY_TYPE {
	p := new(RES_HERO_ABILITY_TYPE)
	*p = x
	return p
}

func (x RES_HERO_ABILITY_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_HERO_ABILITY_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[66].Descriptor()
}

func (RES_HERO_ABILITY_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[66]
}

func (x RES_HERO_ABILITY_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_HERO_ABILITY_TYPE.Descriptor instead.
func (RES_HERO_ABILITY_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{66}
}

type RES_PERFEFT_SPECTIME_TYPE int32

const (
	RES_PERFEFT_SPECTIME_TYPE_RES_PERFEFT_SPECTIME_NULL    RES_PERFEFT_SPECTIME_TYPE = 0
	RES_PERFEFT_SPECTIME_TYPE_RES_PERFEFT_SPECTIME_CURWEEK RES_PERFEFT_SPECTIME_TYPE = 1
	RES_PERFEFT_SPECTIME_TYPE_RES_PERFEFT_SPECTIME_LAST    RES_PERFEFT_SPECTIME_TYPE = 2
)

// Enum value maps for RES_PERFEFT_SPECTIME_TYPE.
var (
	RES_PERFEFT_SPECTIME_TYPE_name = map[int32]string{
		0: "RES_PERFEFT_SPECTIME_NULL",
		1: "RES_PERFEFT_SPECTIME_CURWEEK",
		2: "RES_PERFEFT_SPECTIME_LAST",
	}
	RES_PERFEFT_SPECTIME_TYPE_value = map[string]int32{
		"RES_PERFEFT_SPECTIME_NULL":    0,
		"RES_PERFEFT_SPECTIME_CURWEEK": 1,
		"RES_PERFEFT_SPECTIME_LAST":    2,
	}
)

func (x RES_PERFEFT_SPECTIME_TYPE) Enum() *RES_PERFEFT_SPECTIME_TYPE {
	p := new(RES_PERFEFT_SPECTIME_TYPE)
	*p = x
	return p
}

func (x RES_PERFEFT_SPECTIME_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_PERFEFT_SPECTIME_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[67].Descriptor()
}

func (RES_PERFEFT_SPECTIME_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[67]
}

func (x RES_PERFEFT_SPECTIME_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_PERFEFT_SPECTIME_TYPE.Descriptor instead.
func (RES_PERFEFT_SPECTIME_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{67}
}

type RES_EP_STATE int32

const (
	RES_EP_STATE_RES_EP_STATE_DEFAULT    RES_EP_STATE = 0
	RES_EP_STATE_RES_EP_STATE_ENTER_MAX  RES_EP_STATE = 1
	RES_EP_STATE_RES_EP_STATE_ENTER_ZERO RES_EP_STATE = 2
	RES_EP_STATE_RES_EP_STATE_LEAVE_LAST RES_EP_STATE = 3
)

// Enum value maps for RES_EP_STATE.
var (
	RES_EP_STATE_name = map[int32]string{
		0: "RES_EP_STATE_DEFAULT",
		1: "RES_EP_STATE_ENTER_MAX",
		2: "RES_EP_STATE_ENTER_ZERO",
		3: "RES_EP_STATE_LEAVE_LAST",
	}
	RES_EP_STATE_value = map[string]int32{
		"RES_EP_STATE_DEFAULT":    0,
		"RES_EP_STATE_ENTER_MAX":  1,
		"RES_EP_STATE_ENTER_ZERO": 2,
		"RES_EP_STATE_LEAVE_LAST": 3,
	}
)

func (x RES_EP_STATE) Enum() *RES_EP_STATE {
	p := new(RES_EP_STATE)
	*p = x
	return p
}

func (x RES_EP_STATE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_EP_STATE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[68].Descriptor()
}

func (RES_EP_STATE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[68]
}

func (x RES_EP_STATE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_EP_STATE.Descriptor instead.
func (RES_EP_STATE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{68}
}

type RES_HONOR_CHALLENGE_TYPE int32

const (
	RES_HONOR_CHALLENGE_TYPE_RES_HONOR_CHALLENGE_NULL   RES_HONOR_CHALLENGE_TYPE = 0
	RES_HONOR_CHALLENGE_TYPE_RES_HONOR_CHALLENGE_RANK   RES_HONOR_CHALLENGE_TYPE = 1
	RES_HONOR_CHALLENGE_TYPE_RES_HONOR_CHALLENGE_MASTER RES_HONOR_CHALLENGE_TYPE = 2
	RES_HONOR_CHALLENGE_TYPE_RES_HONOR_CHALLENGE_LAST   RES_HONOR_CHALLENGE_TYPE = 3
)

// Enum value maps for RES_HONOR_CHALLENGE_TYPE.
var (
	RES_HONOR_CHALLENGE_TYPE_name = map[int32]string{
		0: "RES_HONOR_CHALLENGE_NULL",
		1: "RES_HONOR_CHALLENGE_RANK",
		2: "RES_HONOR_CHALLENGE_MASTER",
		3: "RES_HONOR_CHALLENGE_LAST",
	}
	RES_HONOR_CHALLENGE_TYPE_value = map[string]int32{
		"RES_HONOR_CHALLENGE_NULL":   0,
		"RES_HONOR_CHALLENGE_RANK":   1,
		"RES_HONOR_CHALLENGE_MASTER": 2,
		"RES_HONOR_CHALLENGE_LAST":   3,
	}
)

func (x RES_HONOR_CHALLENGE_TYPE) Enum() *RES_HONOR_CHALLENGE_TYPE {
	p := new(RES_HONOR_CHALLENGE_TYPE)
	*p = x
	return p
}

func (x RES_HONOR_CHALLENGE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_HONOR_CHALLENGE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[69].Descriptor()
}

func (RES_HONOR_CHALLENGE_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[69]
}

func (x RES_HONOR_CHALLENGE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_HONOR_CHALLENGE_TYPE.Descriptor instead.
func (RES_HONOR_CHALLENGE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{69}
}

type RES_GUIDE_INTRO_TYPE int32

const (
	RES_GUIDE_INTRO_TYPE_RES_GUIDE_INTRO_TYPE_NULL  RES_GUIDE_INTRO_TYPE = 0
	RES_GUIDE_INTRO_TYPE_RES_GUIDE_INTRO_TYPE_IMAGE RES_GUIDE_INTRO_TYPE = 1
	RES_GUIDE_INTRO_TYPE_RES_GUIDE_INTRO_TYPE_VIDEO RES_GUIDE_INTRO_TYPE = 2
	RES_GUIDE_INTRO_TYPE_RES_GUIDE_INTRO_TYPE_TEXT  RES_GUIDE_INTRO_TYPE = 3
)

// Enum value maps for RES_GUIDE_INTRO_TYPE.
var (
	RES_GUIDE_INTRO_TYPE_name = map[int32]string{
		0: "RES_GUIDE_INTRO_TYPE_NULL",
		1: "RES_GUIDE_INTRO_TYPE_IMAGE",
		2: "RES_GUIDE_INTRO_TYPE_VIDEO",
		3: "RES_GUIDE_INTRO_TYPE_TEXT",
	}
	RES_GUIDE_INTRO_TYPE_value = map[string]int32{
		"RES_GUIDE_INTRO_TYPE_NULL":  0,
		"RES_GUIDE_INTRO_TYPE_IMAGE": 1,
		"RES_GUIDE_INTRO_TYPE_VIDEO": 2,
		"RES_GUIDE_INTRO_TYPE_TEXT":  3,
	}
)

func (x RES_GUIDE_INTRO_TYPE) Enum() *RES_GUIDE_INTRO_TYPE {
	p := new(RES_GUIDE_INTRO_TYPE)
	*p = x
	return p
}

func (x RES_GUIDE_INTRO_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_GUIDE_INTRO_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[70].Descriptor()
}

func (RES_GUIDE_INTRO_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[70]
}

func (x RES_GUIDE_INTRO_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_GUIDE_INTRO_TYPE.Descriptor instead.
func (RES_GUIDE_INTRO_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{70}
}

type RES_SKILL_TAG int32

const (
	RES_SKILL_TAG_RES_SKILL_TAG_NULL                         RES_SKILL_TAG = 0
	RES_SKILL_TAG_RES_SKILL_TAG_LIBAI_ULTIMATE_SKILL_HIT     RES_SKILL_TAG = 1
	RES_SKILL_TAG_RES_SKILL_TAG_YINGZHENG_ULTIMATE_SKILL_HIT RES_SKILL_TAG = 2
	RES_SKILL_TAG_RES_SKILL_TAG_YINGZHENG_DISARM_SKILL_HIT   RES_SKILL_TAG = 3
)

// Enum value maps for RES_SKILL_TAG.
var (
	RES_SKILL_TAG_name = map[int32]string{
		0: "RES_SKILL_TAG_NULL",
		1: "RES_SKILL_TAG_LIBAI_ULTIMATE_SKILL_HIT",
		2: "RES_SKILL_TAG_YINGZHENG_ULTIMATE_SKILL_HIT",
		3: "RES_SKILL_TAG_YINGZHENG_DISARM_SKILL_HIT",
	}
	RES_SKILL_TAG_value = map[string]int32{
		"RES_SKILL_TAG_NULL":                         0,
		"RES_SKILL_TAG_LIBAI_ULTIMATE_SKILL_HIT":     1,
		"RES_SKILL_TAG_YINGZHENG_ULTIMATE_SKILL_HIT": 2,
		"RES_SKILL_TAG_YINGZHENG_DISARM_SKILL_HIT":   3,
	}
)

func (x RES_SKILL_TAG) Enum() *RES_SKILL_TAG {
	p := new(RES_SKILL_TAG)
	*p = x
	return p
}

func (x RES_SKILL_TAG) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_SKILL_TAG) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[71].Descriptor()
}

func (RES_SKILL_TAG) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[71]
}

func (x RES_SKILL_TAG) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_SKILL_TAG.Descriptor instead.
func (RES_SKILL_TAG) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{71}
}

type RES_TEAM_RANGE_RULE int32

const (
	RES_TEAM_RANGE_RULE_RES_TEAM_RANGE_RULE_NULL                      RES_TEAM_RANGE_RULE = 0
	RES_TEAM_RANGE_RULE_RES_TEAM_RANGE_RULE_RANK_SMALLGRADE           RES_TEAM_RANGE_RULE = 1
	RES_TEAM_RANGE_RULE_RES_TEAM_RANGE_RULE_AUTOCHESS_SINGLE_BIGGRADE RES_TEAM_RANGE_RULE = 2
	RES_TEAM_RANGE_RULE_RES_TEAM_RANGE_RULE_SIMPLE_GRADE              RES_TEAM_RANGE_RULE = 3
	RES_TEAM_RANGE_RULE_RES_TEAM_RANGE_RULE_DIFFICULTY                RES_TEAM_RANGE_RULE = 4
	RES_TEAM_RANGE_RULE_RES_TEAM_RANGE_RULE_LAST                      RES_TEAM_RANGE_RULE = 5
)

// Enum value maps for RES_TEAM_RANGE_RULE.
var (
	RES_TEAM_RANGE_RULE_name = map[int32]string{
		0: "RES_TEAM_RANGE_RULE_NULL",
		1: "RES_TEAM_RANGE_RULE_RANK_SMALLGRADE",
		2: "RES_TEAM_RANGE_RULE_AUTOCHESS_SINGLE_BIGGRADE",
		3: "RES_TEAM_RANGE_RULE_SIMPLE_GRADE",
		4: "RES_TEAM_RANGE_RULE_DIFFICULTY",
		5: "RES_TEAM_RANGE_RULE_LAST",
	}
	RES_TEAM_RANGE_RULE_value = map[string]int32{
		"RES_TEAM_RANGE_RULE_NULL":                      0,
		"RES_TEAM_RANGE_RULE_RANK_SMALLGRADE":           1,
		"RES_TEAM_RANGE_RULE_AUTOCHESS_SINGLE_BIGGRADE": 2,
		"RES_TEAM_RANGE_RULE_SIMPLE_GRADE":              3,
		"RES_TEAM_RANGE_RULE_DIFFICULTY":                4,
		"RES_TEAM_RANGE_RULE_LAST":                      5,
	}
)

func (x RES_TEAM_RANGE_RULE) Enum() *RES_TEAM_RANGE_RULE {
	p := new(RES_TEAM_RANGE_RULE)
	*p = x
	return p
}

func (x RES_TEAM_RANGE_RULE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_TEAM_RANGE_RULE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[72].Descriptor()
}

func (RES_TEAM_RANGE_RULE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[72]
}

func (x RES_TEAM_RANGE_RULE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_TEAM_RANGE_RULE.Descriptor instead.
func (RES_TEAM_RANGE_RULE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{72}
}

type RES_CHESS_BOUNTYMATCH_LEVEL int32

const (
	RES_CHESS_BOUNTYMATCH_LEVEL_RES_CHESS_BOUNTYMATCH_LEVEL_Default RES_CHESS_BOUNTYMATCH_LEVEL = 0
	RES_CHESS_BOUNTYMATCH_LEVEL_RES_CHESS_BOUNTYMATCH_LEVEL_1       RES_CHESS_BOUNTYMATCH_LEVEL = 1
	RES_CHESS_BOUNTYMATCH_LEVEL_RES_CHESS_BOUNTYMATCH_LEVEL_2       RES_CHESS_BOUNTYMATCH_LEVEL = 2
	RES_CHESS_BOUNTYMATCH_LEVEL_RES_CHESS_BOUNTYMATCH_LEVEL_3       RES_CHESS_BOUNTYMATCH_LEVEL = 3
	RES_CHESS_BOUNTYMATCH_LEVEL_RES_CHESS_BOUNTYMATCH_LEVEL_4       RES_CHESS_BOUNTYMATCH_LEVEL = 4
)

// Enum value maps for RES_CHESS_BOUNTYMATCH_LEVEL.
var (
	RES_CHESS_BOUNTYMATCH_LEVEL_name = map[int32]string{
		0: "RES_CHESS_BOUNTYMATCH_LEVEL_Default",
		1: "RES_CHESS_BOUNTYMATCH_LEVEL_1",
		2: "RES_CHESS_BOUNTYMATCH_LEVEL_2",
		3: "RES_CHESS_BOUNTYMATCH_LEVEL_3",
		4: "RES_CHESS_BOUNTYMATCH_LEVEL_4",
	}
	RES_CHESS_BOUNTYMATCH_LEVEL_value = map[string]int32{
		"RES_CHESS_BOUNTYMATCH_LEVEL_Default": 0,
		"RES_CHESS_BOUNTYMATCH_LEVEL_1":       1,
		"RES_CHESS_BOUNTYMATCH_LEVEL_2":       2,
		"RES_CHESS_BOUNTYMATCH_LEVEL_3":       3,
		"RES_CHESS_BOUNTYMATCH_LEVEL_4":       4,
	}
)

func (x RES_CHESS_BOUNTYMATCH_LEVEL) Enum() *RES_CHESS_BOUNTYMATCH_LEVEL {
	p := new(RES_CHESS_BOUNTYMATCH_LEVEL)
	*p = x
	return p
}

func (x RES_CHESS_BOUNTYMATCH_LEVEL) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_CHESS_BOUNTYMATCH_LEVEL) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[73].Descriptor()
}

func (RES_CHESS_BOUNTYMATCH_LEVEL) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[73]
}

func (x RES_CHESS_BOUNTYMATCH_LEVEL) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_CHESS_BOUNTYMATCH_LEVEL.Descriptor instead.
func (RES_CHESS_BOUNTYMATCH_LEVEL) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{73}
}

type RES_PROJECT8_DRAW_ITEM_TYPE int32

const (
	RES_PROJECT8_DRAW_ITEM_TYPE_RES_PROJECT8_DRAW_ITEM_TYPE_NULL   RES_PROJECT8_DRAW_ITEM_TYPE = 0
	RES_PROJECT8_DRAW_ITEM_TYPE_RES_PROJECT8_DRAW_ITEM_TYPE_HERO   RES_PROJECT8_DRAW_ITEM_TYPE = 1
	RES_PROJECT8_DRAW_ITEM_TYPE_RES_PROJECT8_DRAW_ITEM_TYPE_EQUIP  RES_PROJECT8_DRAW_ITEM_TYPE = 2
	RES_PROJECT8_DRAW_ITEM_TYPE_RES_PROJECT8_DRAW_ITEM_TYPE_TALENT RES_PROJECT8_DRAW_ITEM_TYPE = 3
	RES_PROJECT8_DRAW_ITEM_TYPE_RES_PROJECT8_DRAW_ITEM_TYPE_COIN   RES_PROJECT8_DRAW_ITEM_TYPE = 4
	RES_PROJECT8_DRAW_ITEM_TYPE_RES_PROJECT8_DRAW_ITEM_TYPE_CHEST  RES_PROJECT8_DRAW_ITEM_TYPE = 5
)

// Enum value maps for RES_PROJECT8_DRAW_ITEM_TYPE.
var (
	RES_PROJECT8_DRAW_ITEM_TYPE_name = map[int32]string{
		0: "RES_PROJECT8_DRAW_ITEM_TYPE_NULL",
		1: "RES_PROJECT8_DRAW_ITEM_TYPE_HERO",
		2: "RES_PROJECT8_DRAW_ITEM_TYPE_EQUIP",
		3: "RES_PROJECT8_DRAW_ITEM_TYPE_TALENT",
		4: "RES_PROJECT8_DRAW_ITEM_TYPE_COIN",
		5: "RES_PROJECT8_DRAW_ITEM_TYPE_CHEST",
	}
	RES_PROJECT8_DRAW_ITEM_TYPE_value = map[string]int32{
		"RES_PROJECT8_DRAW_ITEM_TYPE_NULL":   0,
		"RES_PROJECT8_DRAW_ITEM_TYPE_HERO":   1,
		"RES_PROJECT8_DRAW_ITEM_TYPE_EQUIP":  2,
		"RES_PROJECT8_DRAW_ITEM_TYPE_TALENT": 3,
		"RES_PROJECT8_DRAW_ITEM_TYPE_COIN":   4,
		"RES_PROJECT8_DRAW_ITEM_TYPE_CHEST":  5,
	}
)

func (x RES_PROJECT8_DRAW_ITEM_TYPE) Enum() *RES_PROJECT8_DRAW_ITEM_TYPE {
	p := new(RES_PROJECT8_DRAW_ITEM_TYPE)
	*p = x
	return p
}

func (x RES_PROJECT8_DRAW_ITEM_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_PROJECT8_DRAW_ITEM_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[74].Descriptor()
}

func (RES_PROJECT8_DRAW_ITEM_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[74]
}

func (x RES_PROJECT8_DRAW_ITEM_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_PROJECT8_DRAW_ITEM_TYPE.Descriptor instead.
func (RES_PROJECT8_DRAW_ITEM_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{74}
}

type RES_GENERAL_SHOP_TYPE int32

const (
	RES_GENERAL_SHOP_TYPE_RES_GENERAL_SHOP_TYPE_Default   RES_GENERAL_SHOP_TYPE = 0
	RES_GENERAL_SHOP_TYPE_RES_GENERAL_SHOP_TYPE_AUTOCHESS RES_GENERAL_SHOP_TYPE = 1
)

// Enum value maps for RES_GENERAL_SHOP_TYPE.
var (
	RES_GENERAL_SHOP_TYPE_name = map[int32]string{
		0: "RES_GENERAL_SHOP_TYPE_Default",
		1: "RES_GENERAL_SHOP_TYPE_AUTOCHESS",
	}
	RES_GENERAL_SHOP_TYPE_value = map[string]int32{
		"RES_GENERAL_SHOP_TYPE_Default":   0,
		"RES_GENERAL_SHOP_TYPE_AUTOCHESS": 1,
	}
)

func (x RES_GENERAL_SHOP_TYPE) Enum() *RES_GENERAL_SHOP_TYPE {
	p := new(RES_GENERAL_SHOP_TYPE)
	*p = x
	return p
}

func (x RES_GENERAL_SHOP_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_GENERAL_SHOP_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[75].Descriptor()
}

func (RES_GENERAL_SHOP_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[75]
}

func (x RES_GENERAL_SHOP_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_GENERAL_SHOP_TYPE.Descriptor instead.
func (RES_GENERAL_SHOP_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{75}
}

type RES_IN_BATTLE_OPEN_FUNC_PARAM_TYPE int32

const (
	RES_IN_BATTLE_OPEN_FUNC_PARAM_TYPE_RES_IN_BATTLE_OPEN_FUNC_PARAM_TYPE_PROBABILITY RES_IN_BATTLE_OPEN_FUNC_PARAM_TYPE = 0
	RES_IN_BATTLE_OPEN_FUNC_PARAM_TYPE_RES_IN_BATTLE_OPEN_FUNC_PARAM_TYPE_TIME        RES_IN_BATTLE_OPEN_FUNC_PARAM_TYPE = 1
	RES_IN_BATTLE_OPEN_FUNC_PARAM_TYPE_RES_IN_BATTLE_OPEN_FUNC_PARAM_TYPE_LAST        RES_IN_BATTLE_OPEN_FUNC_PARAM_TYPE = 2
)

// Enum value maps for RES_IN_BATTLE_OPEN_FUNC_PARAM_TYPE.
var (
	RES_IN_BATTLE_OPEN_FUNC_PARAM_TYPE_name = map[int32]string{
		0: "RES_IN_BATTLE_OPEN_FUNC_PARAM_TYPE_PROBABILITY",
		1: "RES_IN_BATTLE_OPEN_FUNC_PARAM_TYPE_TIME",
		2: "RES_IN_BATTLE_OPEN_FUNC_PARAM_TYPE_LAST",
	}
	RES_IN_BATTLE_OPEN_FUNC_PARAM_TYPE_value = map[string]int32{
		"RES_IN_BATTLE_OPEN_FUNC_PARAM_TYPE_PROBABILITY": 0,
		"RES_IN_BATTLE_OPEN_FUNC_PARAM_TYPE_TIME":        1,
		"RES_IN_BATTLE_OPEN_FUNC_PARAM_TYPE_LAST":        2,
	}
)

func (x RES_IN_BATTLE_OPEN_FUNC_PARAM_TYPE) Enum() *RES_IN_BATTLE_OPEN_FUNC_PARAM_TYPE {
	p := new(RES_IN_BATTLE_OPEN_FUNC_PARAM_TYPE)
	*p = x
	return p
}

func (x RES_IN_BATTLE_OPEN_FUNC_PARAM_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_IN_BATTLE_OPEN_FUNC_PARAM_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[76].Descriptor()
}

func (RES_IN_BATTLE_OPEN_FUNC_PARAM_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[76]
}

func (x RES_IN_BATTLE_OPEN_FUNC_PARAM_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_IN_BATTLE_OPEN_FUNC_PARAM_TYPE.Descriptor instead.
func (RES_IN_BATTLE_OPEN_FUNC_PARAM_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{76}
}

type RES_IN_BATTLE_OPEN_FUNC_BIT int32

const (
	RES_IN_BATTLE_OPEN_FUNC_BIT_RES_IN_BATTLE_OPEN_FUNC_BIT_TEAM_EFFECT      RES_IN_BATTLE_OPEN_FUNC_BIT = 0
	RES_IN_BATTLE_OPEN_FUNC_BIT_RES_IN_BATTLE_OPEN_FUNC_BIT_PLACE_FLAG       RES_IN_BATTLE_OPEN_FUNC_BIT = 1
	RES_IN_BATTLE_OPEN_FUNC_BIT_RES_IN_BATTLE_OPEN_FUNC_BIT_YEAR_MONSTER_RUN RES_IN_BATTLE_OPEN_FUNC_BIT = 2
	RES_IN_BATTLE_OPEN_FUNC_BIT_RES_IN_BATTLE_OPEN_FUNC_BIT_FIRE_CRACKER     RES_IN_BATTLE_OPEN_FUNC_BIT = 3
	RES_IN_BATTLE_OPEN_FUNC_BIT_RES_IN_BATTLE_OPEN_FUNC_BIT_BET_ON           RES_IN_BATTLE_OPEN_FUNC_BIT = 4
	RES_IN_BATTLE_OPEN_FUNC_BIT_RES_IN_BATTLE_OPEN_FUNC_BIT_FILLING          RES_IN_BATTLE_OPEN_FUNC_BIT = 5
	RES_IN_BATTLE_OPEN_FUNC_BIT_RES_IN_BATTLE_OPEN_FUNC_BIT_YEAR_MONSTER_KUN RES_IN_BATTLE_OPEN_FUNC_BIT = 6
	RES_IN_BATTLE_OPEN_FUNC_BIT_RES_IN_BATTLE_OPEN_FUNC_BIT_FRAME_EXTEND     RES_IN_BATTLE_OPEN_FUNC_BIT = 7
	RES_IN_BATTLE_OPEN_FUNC_BIT_RES_IN_BATTLE_OPEN_FUNC_BIT_55_EFFECT        RES_IN_BATTLE_OPEN_FUNC_BIT = 8
	RES_IN_BATTLE_OPEN_FUNC_BIT_RES_IN_BATTLE_OPEN_FUNC_BIT_PAINT            RES_IN_BATTLE_OPEN_FUNC_BIT = 9
	RES_IN_BATTLE_OPEN_FUNC_BIT_RES_IN_BATTLE_OPEN_FUNC_BIT_LAST             RES_IN_BATTLE_OPEN_FUNC_BIT = 10
)

// Enum value maps for RES_IN_BATTLE_OPEN_FUNC_BIT.
var (
	RES_IN_BATTLE_OPEN_FUNC_BIT_name = map[int32]string{
		0:  "RES_IN_BATTLE_OPEN_FUNC_BIT_TEAM_EFFECT",
		1:  "RES_IN_BATTLE_OPEN_FUNC_BIT_PLACE_FLAG",
		2:  "RES_IN_BATTLE_OPEN_FUNC_BIT_YEAR_MONSTER_RUN",
		3:  "RES_IN_BATTLE_OPEN_FUNC_BIT_FIRE_CRACKER",
		4:  "RES_IN_BATTLE_OPEN_FUNC_BIT_BET_ON",
		5:  "RES_IN_BATTLE_OPEN_FUNC_BIT_FILLING",
		6:  "RES_IN_BATTLE_OPEN_FUNC_BIT_YEAR_MONSTER_KUN",
		7:  "RES_IN_BATTLE_OPEN_FUNC_BIT_FRAME_EXTEND",
		8:  "RES_IN_BATTLE_OPEN_FUNC_BIT_55_EFFECT",
		9:  "RES_IN_BATTLE_OPEN_FUNC_BIT_PAINT",
		10: "RES_IN_BATTLE_OPEN_FUNC_BIT_LAST",
	}
	RES_IN_BATTLE_OPEN_FUNC_BIT_value = map[string]int32{
		"RES_IN_BATTLE_OPEN_FUNC_BIT_TEAM_EFFECT":      0,
		"RES_IN_BATTLE_OPEN_FUNC_BIT_PLACE_FLAG":       1,
		"RES_IN_BATTLE_OPEN_FUNC_BIT_YEAR_MONSTER_RUN": 2,
		"RES_IN_BATTLE_OPEN_FUNC_BIT_FIRE_CRACKER":     3,
		"RES_IN_BATTLE_OPEN_FUNC_BIT_BET_ON":           4,
		"RES_IN_BATTLE_OPEN_FUNC_BIT_FILLING":          5,
		"RES_IN_BATTLE_OPEN_FUNC_BIT_YEAR_MONSTER_KUN": 6,
		"RES_IN_BATTLE_OPEN_FUNC_BIT_FRAME_EXTEND":     7,
		"RES_IN_BATTLE_OPEN_FUNC_BIT_55_EFFECT":        8,
		"RES_IN_BATTLE_OPEN_FUNC_BIT_PAINT":            9,
		"RES_IN_BATTLE_OPEN_FUNC_BIT_LAST":             10,
	}
)

func (x RES_IN_BATTLE_OPEN_FUNC_BIT) Enum() *RES_IN_BATTLE_OPEN_FUNC_BIT {
	p := new(RES_IN_BATTLE_OPEN_FUNC_BIT)
	*p = x
	return p
}

func (x RES_IN_BATTLE_OPEN_FUNC_BIT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_IN_BATTLE_OPEN_FUNC_BIT) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[77].Descriptor()
}

func (RES_IN_BATTLE_OPEN_FUNC_BIT) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[77]
}

func (x RES_IN_BATTLE_OPEN_FUNC_BIT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_IN_BATTLE_OPEN_FUNC_BIT.Descriptor instead.
func (RES_IN_BATTLE_OPEN_FUNC_BIT) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{77}
}

type RES_IN_BATTLE_ACNT_FUNC_BIT int32

const (
	RES_IN_BATTLE_ACNT_FUNC_BIT_RES_IN_BATTLE_ACNT_FUNC_BIT_FRIENDCARD_SKILL        RES_IN_BATTLE_ACNT_FUNC_BIT = 0
	RES_IN_BATTLE_ACNT_FUNC_BIT_RES_IN_BATTLE_ACNT_FUNC_BIT_OPEN_FRAME_EXTEND       RES_IN_BATTLE_ACNT_FUNC_BIT = 1
	RES_IN_BATTLE_ACNT_FUNC_BIT_RES_IN_BATTLE_ACNT_FUNC_BIT_BEFOR_QUITTIME_QUIT     RES_IN_BATTLE_ACNT_FUNC_BIT = 2
	RES_IN_BATTLE_ACNT_FUNC_BIT_RES_IN_BATTLE_ACNT_FUNC_BIT_HEROPRACTICE_SKILLJUDGE RES_IN_BATTLE_ACNT_FUNC_BIT = 3
	RES_IN_BATTLE_ACNT_FUNC_BIT_RES_IN_BATTLE_ACNT_FUNC_BIT_HEROPRACTICE_SHOW       RES_IN_BATTLE_ACNT_FUNC_BIT = 4
	RES_IN_BATTLE_ACNT_FUNC_BIT_RES_IN_BATTLE_ACNT_FUNC_BIT_HEROPRACTICE_TEACHING   RES_IN_BATTLE_ACNT_FUNC_BIT = 5
	RES_IN_BATTLE_ACNT_FUNC_BIT_RES_IN_BATTLE_ACNT_FUNC_BIT_LAST                    RES_IN_BATTLE_ACNT_FUNC_BIT = 6
)

// Enum value maps for RES_IN_BATTLE_ACNT_FUNC_BIT.
var (
	RES_IN_BATTLE_ACNT_FUNC_BIT_name = map[int32]string{
		0: "RES_IN_BATTLE_ACNT_FUNC_BIT_FRIENDCARD_SKILL",
		1: "RES_IN_BATTLE_ACNT_FUNC_BIT_OPEN_FRAME_EXTEND",
		2: "RES_IN_BATTLE_ACNT_FUNC_BIT_BEFOR_QUITTIME_QUIT",
		3: "RES_IN_BATTLE_ACNT_FUNC_BIT_HEROPRACTICE_SKILLJUDGE",
		4: "RES_IN_BATTLE_ACNT_FUNC_BIT_HEROPRACTICE_SHOW",
		5: "RES_IN_BATTLE_ACNT_FUNC_BIT_HEROPRACTICE_TEACHING",
		6: "RES_IN_BATTLE_ACNT_FUNC_BIT_LAST",
	}
	RES_IN_BATTLE_ACNT_FUNC_BIT_value = map[string]int32{
		"RES_IN_BATTLE_ACNT_FUNC_BIT_FRIENDCARD_SKILL":        0,
		"RES_IN_BATTLE_ACNT_FUNC_BIT_OPEN_FRAME_EXTEND":       1,
		"RES_IN_BATTLE_ACNT_FUNC_BIT_BEFOR_QUITTIME_QUIT":     2,
		"RES_IN_BATTLE_ACNT_FUNC_BIT_HEROPRACTICE_SKILLJUDGE": 3,
		"RES_IN_BATTLE_ACNT_FUNC_BIT_HEROPRACTICE_SHOW":       4,
		"RES_IN_BATTLE_ACNT_FUNC_BIT_HEROPRACTICE_TEACHING":   5,
		"RES_IN_BATTLE_ACNT_FUNC_BIT_LAST":                    6,
	}
)

func (x RES_IN_BATTLE_ACNT_FUNC_BIT) Enum() *RES_IN_BATTLE_ACNT_FUNC_BIT {
	p := new(RES_IN_BATTLE_ACNT_FUNC_BIT)
	*p = x
	return p
}

func (x RES_IN_BATTLE_ACNT_FUNC_BIT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_IN_BATTLE_ACNT_FUNC_BIT) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[78].Descriptor()
}

func (RES_IN_BATTLE_ACNT_FUNC_BIT) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[78]
}

func (x RES_IN_BATTLE_ACNT_FUNC_BIT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_IN_BATTLE_ACNT_FUNC_BIT.Descriptor instead.
func (RES_IN_BATTLE_ACNT_FUNC_BIT) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{78}
}

type RES_GRAY_FUNC_BIT int32

const (
	RES_GRAY_FUNC_BIT_RES_GRAY_FUNC_BIT_HEROPRACTICE_SKILLJUDGE RES_GRAY_FUNC_BIT = 0
	RES_GRAY_FUNC_BIT_RES_GRAY_FUNC_BIT_HEROPRACTICE_SHOW       RES_GRAY_FUNC_BIT = 1
	RES_GRAY_FUNC_BIT_RES_GRAY_FUNC_BIT_HEROPRACTICE_TEACHING   RES_GRAY_FUNC_BIT = 2
	RES_GRAY_FUNC_BIT_RES_GRAY_FUNC_BIT_LAST                    RES_GRAY_FUNC_BIT = 3
)

// Enum value maps for RES_GRAY_FUNC_BIT.
var (
	RES_GRAY_FUNC_BIT_name = map[int32]string{
		0: "RES_GRAY_FUNC_BIT_HEROPRACTICE_SKILLJUDGE",
		1: "RES_GRAY_FUNC_BIT_HEROPRACTICE_SHOW",
		2: "RES_GRAY_FUNC_BIT_HEROPRACTICE_TEACHING",
		3: "RES_GRAY_FUNC_BIT_LAST",
	}
	RES_GRAY_FUNC_BIT_value = map[string]int32{
		"RES_GRAY_FUNC_BIT_HEROPRACTICE_SKILLJUDGE": 0,
		"RES_GRAY_FUNC_BIT_HEROPRACTICE_SHOW":       1,
		"RES_GRAY_FUNC_BIT_HEROPRACTICE_TEACHING":   2,
		"RES_GRAY_FUNC_BIT_LAST":                    3,
	}
)

func (x RES_GRAY_FUNC_BIT) Enum() *RES_GRAY_FUNC_BIT {
	p := new(RES_GRAY_FUNC_BIT)
	*p = x
	return p
}

func (x RES_GRAY_FUNC_BIT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_GRAY_FUNC_BIT) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[79].Descriptor()
}

func (RES_GRAY_FUNC_BIT) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[79]
}

func (x RES_GRAY_FUNC_BIT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_GRAY_FUNC_BIT.Descriptor instead.
func (RES_GRAY_FUNC_BIT) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{79}
}

type RES_IN_BATTLE_ACNT_FUNC_PARAM_TYPE int32

const (
	RES_IN_BATTLE_ACNT_FUNC_PARAM_TYPE_RES_IN_BATTLE_ACNT_FUNC_PARAM_TYPE_TIME RES_IN_BATTLE_ACNT_FUNC_PARAM_TYPE = 0
	RES_IN_BATTLE_ACNT_FUNC_PARAM_TYPE_RES_IN_BATTLE_ACNT_FUNC_PARAM_TYPE_LAST RES_IN_BATTLE_ACNT_FUNC_PARAM_TYPE = 1
)

// Enum value maps for RES_IN_BATTLE_ACNT_FUNC_PARAM_TYPE.
var (
	RES_IN_BATTLE_ACNT_FUNC_PARAM_TYPE_name = map[int32]string{
		0: "RES_IN_BATTLE_ACNT_FUNC_PARAM_TYPE_TIME",
		1: "RES_IN_BATTLE_ACNT_FUNC_PARAM_TYPE_LAST",
	}
	RES_IN_BATTLE_ACNT_FUNC_PARAM_TYPE_value = map[string]int32{
		"RES_IN_BATTLE_ACNT_FUNC_PARAM_TYPE_TIME": 0,
		"RES_IN_BATTLE_ACNT_FUNC_PARAM_TYPE_LAST": 1,
	}
)

func (x RES_IN_BATTLE_ACNT_FUNC_PARAM_TYPE) Enum() *RES_IN_BATTLE_ACNT_FUNC_PARAM_TYPE {
	p := new(RES_IN_BATTLE_ACNT_FUNC_PARAM_TYPE)
	*p = x
	return p
}

func (x RES_IN_BATTLE_ACNT_FUNC_PARAM_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_IN_BATTLE_ACNT_FUNC_PARAM_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[80].Descriptor()
}

func (RES_IN_BATTLE_ACNT_FUNC_PARAM_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[80]
}

func (x RES_IN_BATTLE_ACNT_FUNC_PARAM_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_IN_BATTLE_ACNT_FUNC_PARAM_TYPE.Descriptor instead.
func (RES_IN_BATTLE_ACNT_FUNC_PARAM_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{80}
}

type RES_WEALMULTIOPT_OPTTYPE int32

const (
	RES_WEALMULTIOPT_OPTTYPE_RES_WEALMULTIOPT_OPTTYPE_Default RES_WEALMULTIOPT_OPTTYPE = 0
	RES_WEALMULTIOPT_OPTTYPE_RES_WEALMULTIOPT_OPT_COUPONSFILL RES_WEALMULTIOPT_OPTTYPE = 1
	RES_WEALMULTIOPT_OPTTYPE_RES_WEALMULTIOPT_OPT_LAST        RES_WEALMULTIOPT_OPTTYPE = 2
)

// Enum value maps for RES_WEALMULTIOPT_OPTTYPE.
var (
	RES_WEALMULTIOPT_OPTTYPE_name = map[int32]string{
		0: "RES_WEALMULTIOPT_OPTTYPE_Default",
		1: "RES_WEALMULTIOPT_OPT_COUPONSFILL",
		2: "RES_WEALMULTIOPT_OPT_LAST",
	}
	RES_WEALMULTIOPT_OPTTYPE_value = map[string]int32{
		"RES_WEALMULTIOPT_OPTTYPE_Default": 0,
		"RES_WEALMULTIOPT_OPT_COUPONSFILL": 1,
		"RES_WEALMULTIOPT_OPT_LAST":        2,
	}
)

func (x RES_WEALMULTIOPT_OPTTYPE) Enum() *RES_WEALMULTIOPT_OPTTYPE {
	p := new(RES_WEALMULTIOPT_OPTTYPE)
	*p = x
	return p
}

func (x RES_WEALMULTIOPT_OPTTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_WEALMULTIOPT_OPTTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[81].Descriptor()
}

func (RES_WEALMULTIOPT_OPTTYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[81]
}

func (x RES_WEALMULTIOPT_OPTTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_WEALMULTIOPT_OPTTYPE.Descriptor instead.
func (RES_WEALMULTIOPT_OPTTYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{81}
}

type RES_WEALMULTIOPT_TIMETYPE int32

const (
	RES_WEALMULTIOPT_TIMETYPE_RES_WEALMULTIOPT_TIMETYPE_Default RES_WEALMULTIOPT_TIMETYPE = 0
	RES_WEALMULTIOPT_TIMETYPE_RES_WEALMULTIOPT_TIME_DAY         RES_WEALMULTIOPT_TIMETYPE = 1
	RES_WEALMULTIOPT_TIMETYPE_RES_WEALMULTIOPT_TIME_WEEK        RES_WEALMULTIOPT_TIMETYPE = 2
	RES_WEALMULTIOPT_TIMETYPE_RES_WEALMULTIOPT_TIME_MONTH       RES_WEALMULTIOPT_TIMETYPE = 3
	RES_WEALMULTIOPT_TIMETYPE_RES_WEALMULTIOPT_TIME_LAST        RES_WEALMULTIOPT_TIMETYPE = 4
)

// Enum value maps for RES_WEALMULTIOPT_TIMETYPE.
var (
	RES_WEALMULTIOPT_TIMETYPE_name = map[int32]string{
		0: "RES_WEALMULTIOPT_TIMETYPE_Default",
		1: "RES_WEALMULTIOPT_TIME_DAY",
		2: "RES_WEALMULTIOPT_TIME_WEEK",
		3: "RES_WEALMULTIOPT_TIME_MONTH",
		4: "RES_WEALMULTIOPT_TIME_LAST",
	}
	RES_WEALMULTIOPT_TIMETYPE_value = map[string]int32{
		"RES_WEALMULTIOPT_TIMETYPE_Default": 0,
		"RES_WEALMULTIOPT_TIME_DAY":         1,
		"RES_WEALMULTIOPT_TIME_WEEK":        2,
		"RES_WEALMULTIOPT_TIME_MONTH":       3,
		"RES_WEALMULTIOPT_TIME_LAST":        4,
	}
)

func (x RES_WEALMULTIOPT_TIMETYPE) Enum() *RES_WEALMULTIOPT_TIMETYPE {
	p := new(RES_WEALMULTIOPT_TIMETYPE)
	*p = x
	return p
}

func (x RES_WEALMULTIOPT_TIMETYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_WEALMULTIOPT_TIMETYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[82].Descriptor()
}

func (RES_WEALMULTIOPT_TIMETYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[82]
}

func (x RES_WEALMULTIOPT_TIMETYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_WEALMULTIOPT_TIMETYPE.Descriptor instead.
func (RES_WEALMULTIOPT_TIMETYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{82}
}

type RES_LOADING_CHAT_CONTENT_TYPE int32

const (
	RES_LOADING_CHAT_CONTENT_TYPE_RES_LOADING_CHAT_CONTENT_TYPE_LOADING_RANDOM     RES_LOADING_CHAT_CONTENT_TYPE = 0
	RES_LOADING_CHAT_CONTENT_TYPE_RES_LOADING_CHAT_CONTENT_TYPE_LOADING_CONDITION  RES_LOADING_CHAT_CONTENT_TYPE = 1
	RES_LOADING_CHAT_CONTENT_TYPE_RES_LOADING_CHAT_CONTENT_TYPE_THUMBSUP_RANDOM    RES_LOADING_CHAT_CONTENT_TYPE = 2
	RES_LOADING_CHAT_CONTENT_TYPE_RES_LOADING_CHAT_CONTENT_TYPE_THUMBSUP_CONDITION RES_LOADING_CHAT_CONTENT_TYPE = 3
	RES_LOADING_CHAT_CONTENT_TYPE_RES_LOADING_CHAT_CONTENT_TYPE_SHOWOFF_RANDOM     RES_LOADING_CHAT_CONTENT_TYPE = 4
	RES_LOADING_CHAT_CONTENT_TYPE_RES_LOADING_CHAT_CONTENT_TYPE_SHOWOFF_CONDITION  RES_LOADING_CHAT_CONTENT_TYPE = 5
)

// Enum value maps for RES_LOADING_CHAT_CONTENT_TYPE.
var (
	RES_LOADING_CHAT_CONTENT_TYPE_name = map[int32]string{
		0: "RES_LOADING_CHAT_CONTENT_TYPE_LOADING_RANDOM",
		1: "RES_LOADING_CHAT_CONTENT_TYPE_LOADING_CONDITION",
		2: "RES_LOADING_CHAT_CONTENT_TYPE_THUMBSUP_RANDOM",
		3: "RES_LOADING_CHAT_CONTENT_TYPE_THUMBSUP_CONDITION",
		4: "RES_LOADING_CHAT_CONTENT_TYPE_SHOWOFF_RANDOM",
		5: "RES_LOADING_CHAT_CONTENT_TYPE_SHOWOFF_CONDITION",
	}
	RES_LOADING_CHAT_CONTENT_TYPE_value = map[string]int32{
		"RES_LOADING_CHAT_CONTENT_TYPE_LOADING_RANDOM":     0,
		"RES_LOADING_CHAT_CONTENT_TYPE_LOADING_CONDITION":  1,
		"RES_LOADING_CHAT_CONTENT_TYPE_THUMBSUP_RANDOM":    2,
		"RES_LOADING_CHAT_CONTENT_TYPE_THUMBSUP_CONDITION": 3,
		"RES_LOADING_CHAT_CONTENT_TYPE_SHOWOFF_RANDOM":     4,
		"RES_LOADING_CHAT_CONTENT_TYPE_SHOWOFF_CONDITION":  5,
	}
)

func (x RES_LOADING_CHAT_CONTENT_TYPE) Enum() *RES_LOADING_CHAT_CONTENT_TYPE {
	p := new(RES_LOADING_CHAT_CONTENT_TYPE)
	*p = x
	return p
}

func (x RES_LOADING_CHAT_CONTENT_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_LOADING_CHAT_CONTENT_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[83].Descriptor()
}

func (RES_LOADING_CHAT_CONTENT_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[83]
}

func (x RES_LOADING_CHAT_CONTENT_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_LOADING_CHAT_CONTENT_TYPE.Descriptor instead.
func (RES_LOADING_CHAT_CONTENT_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{83}
}

type RES_ALBUM_TYPE int32

const (
	RES_ALBUM_TYPE_RES_ALBUM_TYPE_INVALID RES_ALBUM_TYPE = 0
	RES_ALBUM_TYPE_RES_ALBUM_TYPE_HERO    RES_ALBUM_TYPE = 1
	RES_ALBUM_TYPE_RES_ALBUM_TYPE_CAMP    RES_ALBUM_TYPE = 2
	RES_ALBUM_TYPE_RES_ALBUM_TYPE_LAST    RES_ALBUM_TYPE = 3
)

// Enum value maps for RES_ALBUM_TYPE.
var (
	RES_ALBUM_TYPE_name = map[int32]string{
		0: "RES_ALBUM_TYPE_INVALID",
		1: "RES_ALBUM_TYPE_HERO",
		2: "RES_ALBUM_TYPE_CAMP",
		3: "RES_ALBUM_TYPE_LAST",
	}
	RES_ALBUM_TYPE_value = map[string]int32{
		"RES_ALBUM_TYPE_INVALID": 0,
		"RES_ALBUM_TYPE_HERO":    1,
		"RES_ALBUM_TYPE_CAMP":    2,
		"RES_ALBUM_TYPE_LAST":    3,
	}
)

func (x RES_ALBUM_TYPE) Enum() *RES_ALBUM_TYPE {
	p := new(RES_ALBUM_TYPE)
	*p = x
	return p
}

func (x RES_ALBUM_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_ALBUM_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[84].Descriptor()
}

func (RES_ALBUM_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[84]
}

func (x RES_ALBUM_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_ALBUM_TYPE.Descriptor instead.
func (RES_ALBUM_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{84}
}

type RES_HERO_FAVOR_GIFT_TYPE int32

const (
	RES_HERO_FAVOR_GIFT_TYPE_RES_HERO_FAVOR_GIFT_INVALID RES_HERO_FAVOR_GIFT_TYPE = 0
	RES_HERO_FAVOR_GIFT_TYPE_RES_HERO_FAVOR_GIFT_NORMAL  RES_HERO_FAVOR_GIFT_TYPE = 1
	RES_HERO_FAVOR_GIFT_TYPE_RES_HERO_FAVOR_GIFT_SPECIAL RES_HERO_FAVOR_GIFT_TYPE = 2
	RES_HERO_FAVOR_GIFT_TYPE_RES_HERO_FAVOR_GIFT_LAST    RES_HERO_FAVOR_GIFT_TYPE = 3
)

// Enum value maps for RES_HERO_FAVOR_GIFT_TYPE.
var (
	RES_HERO_FAVOR_GIFT_TYPE_name = map[int32]string{
		0: "RES_HERO_FAVOR_GIFT_INVALID",
		1: "RES_HERO_FAVOR_GIFT_NORMAL",
		2: "RES_HERO_FAVOR_GIFT_SPECIAL",
		3: "RES_HERO_FAVOR_GIFT_LAST",
	}
	RES_HERO_FAVOR_GIFT_TYPE_value = map[string]int32{
		"RES_HERO_FAVOR_GIFT_INVALID": 0,
		"RES_HERO_FAVOR_GIFT_NORMAL":  1,
		"RES_HERO_FAVOR_GIFT_SPECIAL": 2,
		"RES_HERO_FAVOR_GIFT_LAST":    3,
	}
)

func (x RES_HERO_FAVOR_GIFT_TYPE) Enum() *RES_HERO_FAVOR_GIFT_TYPE {
	p := new(RES_HERO_FAVOR_GIFT_TYPE)
	*p = x
	return p
}

func (x RES_HERO_FAVOR_GIFT_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_HERO_FAVOR_GIFT_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[85].Descriptor()
}

func (RES_HERO_FAVOR_GIFT_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[85]
}

func (x RES_HERO_FAVOR_GIFT_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_HERO_FAVOR_GIFT_TYPE.Descriptor instead.
func (RES_HERO_FAVOR_GIFT_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{85}
}

type RES_DROP_RELATION_TYPE int32

const (
	RES_DROP_RELATION_TYPE_RES_DROP_RELATION_TYPE_INVALID    RES_DROP_RELATION_TYPE = 0
	RES_DROP_RELATION_TYPE_RES_DROP_RELATION_TYPE_USE_HERO   RES_DROP_RELATION_TYPE = 1
	RES_DROP_RELATION_TYPE_RES_DROP_RELATION_TYPE_SAME_CAMP  RES_DROP_RELATION_TYPE = 2
	RES_DROP_RELATION_TYPE_RES_DROP_RELATION_TYPE_ENEMY_CAMP RES_DROP_RELATION_TYPE = 3
	RES_DROP_RELATION_TYPE_RES_DROP_RELATION_TYPE_APPEAR     RES_DROP_RELATION_TYPE = 4
	RES_DROP_RELATION_TYPE_RES_DROP_RELATION_TYPE_LAST       RES_DROP_RELATION_TYPE = 5
)

// Enum value maps for RES_DROP_RELATION_TYPE.
var (
	RES_DROP_RELATION_TYPE_name = map[int32]string{
		0: "RES_DROP_RELATION_TYPE_INVALID",
		1: "RES_DROP_RELATION_TYPE_USE_HERO",
		2: "RES_DROP_RELATION_TYPE_SAME_CAMP",
		3: "RES_DROP_RELATION_TYPE_ENEMY_CAMP",
		4: "RES_DROP_RELATION_TYPE_APPEAR",
		5: "RES_DROP_RELATION_TYPE_LAST",
	}
	RES_DROP_RELATION_TYPE_value = map[string]int32{
		"RES_DROP_RELATION_TYPE_INVALID":    0,
		"RES_DROP_RELATION_TYPE_USE_HERO":   1,
		"RES_DROP_RELATION_TYPE_SAME_CAMP":  2,
		"RES_DROP_RELATION_TYPE_ENEMY_CAMP": 3,
		"RES_DROP_RELATION_TYPE_APPEAR":     4,
		"RES_DROP_RELATION_TYPE_LAST":       5,
	}
)

func (x RES_DROP_RELATION_TYPE) Enum() *RES_DROP_RELATION_TYPE {
	p := new(RES_DROP_RELATION_TYPE)
	*p = x
	return p
}

func (x RES_DROP_RELATION_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_DROP_RELATION_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[86].Descriptor()
}

func (RES_DROP_RELATION_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[86]
}

func (x RES_DROP_RELATION_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_DROP_RELATION_TYPE.Descriptor instead.
func (RES_DROP_RELATION_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{86}
}

type RES_HERO_RELATION_TYPE int32

const (
	RES_HERO_RELATION_TYPE_RES_HERO_RELATION_TYPE_NORMAL   RES_HERO_RELATION_TYPE = 0
	RES_HERO_RELATION_TYPE_RES_HERO_RELATION_TYPE_INTIMACY RES_HERO_RELATION_TYPE = 1
	RES_HERO_RELATION_TYPE_RES_HERO_RELATION_TYPE_HOSTILE  RES_HERO_RELATION_TYPE = 2
)

// Enum value maps for RES_HERO_RELATION_TYPE.
var (
	RES_HERO_RELATION_TYPE_name = map[int32]string{
		0: "RES_HERO_RELATION_TYPE_NORMAL",
		1: "RES_HERO_RELATION_TYPE_INTIMACY",
		2: "RES_HERO_RELATION_TYPE_HOSTILE",
	}
	RES_HERO_RELATION_TYPE_value = map[string]int32{
		"RES_HERO_RELATION_TYPE_NORMAL":   0,
		"RES_HERO_RELATION_TYPE_INTIMACY": 1,
		"RES_HERO_RELATION_TYPE_HOSTILE":  2,
	}
)

func (x RES_HERO_RELATION_TYPE) Enum() *RES_HERO_RELATION_TYPE {
	p := new(RES_HERO_RELATION_TYPE)
	*p = x
	return p
}

func (x RES_HERO_RELATION_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_HERO_RELATION_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[87].Descriptor()
}

func (RES_HERO_RELATION_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[87]
}

func (x RES_HERO_RELATION_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_HERO_RELATION_TYPE.Descriptor instead.
func (RES_HERO_RELATION_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{87}
}

type RES_HERO_GENDER int32

const (
	RES_HERO_GENDER_RES_HERO_GENDER_MALE   RES_HERO_GENDER = 0
	RES_HERO_GENDER_RES_HERO_GENDER_FEMALE RES_HERO_GENDER = 1
)

// Enum value maps for RES_HERO_GENDER.
var (
	RES_HERO_GENDER_name = map[int32]string{
		0: "RES_HERO_GENDER_MALE",
		1: "RES_HERO_GENDER_FEMALE",
	}
	RES_HERO_GENDER_value = map[string]int32{
		"RES_HERO_GENDER_MALE":   0,
		"RES_HERO_GENDER_FEMALE": 1,
	}
)

func (x RES_HERO_GENDER) Enum() *RES_HERO_GENDER {
	p := new(RES_HERO_GENDER)
	*p = x
	return p
}

func (x RES_HERO_GENDER) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_HERO_GENDER) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[88].Descriptor()
}

func (RES_HERO_GENDER) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[88]
}

func (x RES_HERO_GENDER) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_HERO_GENDER.Descriptor instead.
func (RES_HERO_GENDER) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{88}
}

type RES_HEROFAVORITEM_SUB_TYPE int32

const (
	RES_HEROFAVORITEM_SUB_TYPE_RES_HEROFAVORITEM_SUB_TYPE_NULL           RES_HEROFAVORITEM_SUB_TYPE = 0
	RES_HEROFAVORITEM_SUB_TYPE_RES_HEROFAVORITEM_SUB_TYPE_SPEC_HERO_ITEM RES_HEROFAVORITEM_SUB_TYPE = 1
)

// Enum value maps for RES_HEROFAVORITEM_SUB_TYPE.
var (
	RES_HEROFAVORITEM_SUB_TYPE_name = map[int32]string{
		0: "RES_HEROFAVORITEM_SUB_TYPE_NULL",
		1: "RES_HEROFAVORITEM_SUB_TYPE_SPEC_HERO_ITEM",
	}
	RES_HEROFAVORITEM_SUB_TYPE_value = map[string]int32{
		"RES_HEROFAVORITEM_SUB_TYPE_NULL":           0,
		"RES_HEROFAVORITEM_SUB_TYPE_SPEC_HERO_ITEM": 1,
	}
)

func (x RES_HEROFAVORITEM_SUB_TYPE) Enum() *RES_HEROFAVORITEM_SUB_TYPE {
	p := new(RES_HEROFAVORITEM_SUB_TYPE)
	*p = x
	return p
}

func (x RES_HEROFAVORITEM_SUB_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_HEROFAVORITEM_SUB_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[89].Descriptor()
}

func (RES_HEROFAVORITEM_SUB_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[89]
}

func (x RES_HEROFAVORITEM_SUB_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_HEROFAVORITEM_SUB_TYPE.Descriptor instead.
func (RES_HEROFAVORITEM_SUB_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{89}
}

type RES_HERO_STORY_TYPE int32

const (
	RES_HERO_STORY_TYPE_RES_HERO_STORY_TYPE_NULL       RES_HERO_STORY_TYPE = 0
	RES_HERO_STORY_TYPE_RES_HERO_STORY_TYPE_FRIENDSHIP RES_HERO_STORY_TYPE = 1
	RES_HERO_STORY_TYPE_RES_HERO_STORY_TYPE_STORY      RES_HERO_STORY_TYPE = 2
)

// Enum value maps for RES_HERO_STORY_TYPE.
var (
	RES_HERO_STORY_TYPE_name = map[int32]string{
		0: "RES_HERO_STORY_TYPE_NULL",
		1: "RES_HERO_STORY_TYPE_FRIENDSHIP",
		2: "RES_HERO_STORY_TYPE_STORY",
	}
	RES_HERO_STORY_TYPE_value = map[string]int32{
		"RES_HERO_STORY_TYPE_NULL":       0,
		"RES_HERO_STORY_TYPE_FRIENDSHIP": 1,
		"RES_HERO_STORY_TYPE_STORY":      2,
	}
)

func (x RES_HERO_STORY_TYPE) Enum() *RES_HERO_STORY_TYPE {
	p := new(RES_HERO_STORY_TYPE)
	*p = x
	return p
}

func (x RES_HERO_STORY_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_HERO_STORY_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[90].Descriptor()
}

func (RES_HERO_STORY_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[90]
}

func (x RES_HERO_STORY_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_HERO_STORY_TYPE.Descriptor instead.
func (RES_HERO_STORY_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{90}
}

type RES_HERO_STORY_CARD_TYPE int32

const (
	RES_HERO_STORY_CARD_TYPE_RES_HERO_STORY_CARD_NULL  RES_HERO_STORY_CARD_TYPE = 0
	RES_HERO_STORY_CARD_TYPE_RES_HERO_STORY_CARD_BIG   RES_HERO_STORY_CARD_TYPE = 1
	RES_HERO_STORY_CARD_TYPE_RES_HERO_STORY_CARD_SMALL RES_HERO_STORY_CARD_TYPE = 2
)

// Enum value maps for RES_HERO_STORY_CARD_TYPE.
var (
	RES_HERO_STORY_CARD_TYPE_name = map[int32]string{
		0: "RES_HERO_STORY_CARD_NULL",
		1: "RES_HERO_STORY_CARD_BIG",
		2: "RES_HERO_STORY_CARD_SMALL",
	}
	RES_HERO_STORY_CARD_TYPE_value = map[string]int32{
		"RES_HERO_STORY_CARD_NULL":  0,
		"RES_HERO_STORY_CARD_BIG":   1,
		"RES_HERO_STORY_CARD_SMALL": 2,
	}
)

func (x RES_HERO_STORY_CARD_TYPE) Enum() *RES_HERO_STORY_CARD_TYPE {
	p := new(RES_HERO_STORY_CARD_TYPE)
	*p = x
	return p
}

func (x RES_HERO_STORY_CARD_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_HERO_STORY_CARD_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[91].Descriptor()
}

func (RES_HERO_STORY_CARD_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[91]
}

func (x RES_HERO_STORY_CARD_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_HERO_STORY_CARD_TYPE.Descriptor instead.
func (RES_HERO_STORY_CARD_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{91}
}

type RES_PROJECT8_ABILITY_TYPE int32

const (
	RES_PROJECT8_ABILITY_TYPE_RES_PROJECT8_ABILITY_TYPE_FIXED_CELL                       RES_PROJECT8_ABILITY_TYPE = 0
	RES_PROJECT8_ABILITY_TYPE_RES_PROJECT8_ABILITY_TYPE_TERMINATOR_LOCK                  RES_PROJECT8_ABILITY_TYPE = 1
	RES_PROJECT8_ABILITY_TYPE_RES_PROJECT8_ABILITY_TYPE_FREE_USE_SKILL                   RES_PROJECT8_ABILITY_TYPE = 2
	RES_PROJECT8_ABILITY_TYPE_RES_PROJECT8_ABILITY_TYPE_JUMP_BACK_AFTER_BATTLE           RES_PROJECT8_ABILITY_TYPE = 3
	RES_PROJECT8_ABILITY_TYPE_RES_PROJECT8_ABILITY_TYPE_CLONE_HERO                       RES_PROJECT8_ABILITY_TYPE = 4
	RES_PROJECT8_ABILITY_TYPE_RES_PROJECT8_ABILITY_TYPE_IGNOR_HURT_RECOVER_FORBID_FLAG   RES_PROJECT8_ABILITY_TYPE = 5
	RES_PROJECT8_ABILITY_TYPE_RES_PROJECT8_ABILITY_TYPE_IGNOR_COLLISION_WHEN_MOVE        RES_PROJECT8_ABILITY_TYPE = 6
	RES_PROJECT8_ABILITY_TYPE_RES_PROJECT8_ABILITY_TYPE_IGNOR_ATTACk_RECOVER_FORBID_FLAG RES_PROJECT8_ABILITY_TYPE = 7
	RES_PROJECT8_ABILITY_TYPE_RES_PROJECT8_ABILITY_TYPE_FORBID_WEAREQUIP                 RES_PROJECT8_ABILITY_TYPE = 8
	RES_PROJECT8_ABILITY_TYPE_RES_PROJECT8_ABILITY_TYPE_LAST                             RES_PROJECT8_ABILITY_TYPE = 9
)

// Enum value maps for RES_PROJECT8_ABILITY_TYPE.
var (
	RES_PROJECT8_ABILITY_TYPE_name = map[int32]string{
		0: "RES_PROJECT8_ABILITY_TYPE_FIXED_CELL",
		1: "RES_PROJECT8_ABILITY_TYPE_TERMINATOR_LOCK",
		2: "RES_PROJECT8_ABILITY_TYPE_FREE_USE_SKILL",
		3: "RES_PROJECT8_ABILITY_TYPE_JUMP_BACK_AFTER_BATTLE",
		4: "RES_PROJECT8_ABILITY_TYPE_CLONE_HERO",
		5: "RES_PROJECT8_ABILITY_TYPE_IGNOR_HURT_RECOVER_FORBID_FLAG",
		6: "RES_PROJECT8_ABILITY_TYPE_IGNOR_COLLISION_WHEN_MOVE",
		7: "RES_PROJECT8_ABILITY_TYPE_IGNOR_ATTACk_RECOVER_FORBID_FLAG",
		8: "RES_PROJECT8_ABILITY_TYPE_FORBID_WEAREQUIP",
		9: "RES_PROJECT8_ABILITY_TYPE_LAST",
	}
	RES_PROJECT8_ABILITY_TYPE_value = map[string]int32{
		"RES_PROJECT8_ABILITY_TYPE_FIXED_CELL":                       0,
		"RES_PROJECT8_ABILITY_TYPE_TERMINATOR_LOCK":                  1,
		"RES_PROJECT8_ABILITY_TYPE_FREE_USE_SKILL":                   2,
		"RES_PROJECT8_ABILITY_TYPE_JUMP_BACK_AFTER_BATTLE":           3,
		"RES_PROJECT8_ABILITY_TYPE_CLONE_HERO":                       4,
		"RES_PROJECT8_ABILITY_TYPE_IGNOR_HURT_RECOVER_FORBID_FLAG":   5,
		"RES_PROJECT8_ABILITY_TYPE_IGNOR_COLLISION_WHEN_MOVE":        6,
		"RES_PROJECT8_ABILITY_TYPE_IGNOR_ATTACk_RECOVER_FORBID_FLAG": 7,
		"RES_PROJECT8_ABILITY_TYPE_FORBID_WEAREQUIP":                 8,
		"RES_PROJECT8_ABILITY_TYPE_LAST":                             9,
	}
)

func (x RES_PROJECT8_ABILITY_TYPE) Enum() *RES_PROJECT8_ABILITY_TYPE {
	p := new(RES_PROJECT8_ABILITY_TYPE)
	*p = x
	return p
}

func (x RES_PROJECT8_ABILITY_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_PROJECT8_ABILITY_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[92].Descriptor()
}

func (RES_PROJECT8_ABILITY_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[92]
}

func (x RES_PROJECT8_ABILITY_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_PROJECT8_ABILITY_TYPE.Descriptor instead.
func (RES_PROJECT8_ABILITY_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{92}
}

type RES_PROJECT8_AUCTION_UNLOCK_TYPE int32

const (
	RES_PROJECT8_AUCTION_UNLOCK_TYPE_RES_PROJECT8_AUCTION_UNLOCK_TYPE_Default      RES_PROJECT8_AUCTION_UNLOCK_TYPE = 0
	RES_PROJECT8_AUCTION_UNLOCK_TYPE_RES_PROJECT8_AUCTION_UNLOCK_TYPE_AUCTION_ITEM RES_PROJECT8_AUCTION_UNLOCK_TYPE = 1
	RES_PROJECT8_AUCTION_UNLOCK_TYPE_RES_PROJECT8_AUCTION_UNLOCK_TYPE_PLAYER       RES_PROJECT8_AUCTION_UNLOCK_TYPE = 2
)

// Enum value maps for RES_PROJECT8_AUCTION_UNLOCK_TYPE.
var (
	RES_PROJECT8_AUCTION_UNLOCK_TYPE_name = map[int32]string{
		0: "RES_PROJECT8_AUCTION_UNLOCK_TYPE_Default",
		1: "RES_PROJECT8_AUCTION_UNLOCK_TYPE_AUCTION_ITEM",
		2: "RES_PROJECT8_AUCTION_UNLOCK_TYPE_PLAYER",
	}
	RES_PROJECT8_AUCTION_UNLOCK_TYPE_value = map[string]int32{
		"RES_PROJECT8_AUCTION_UNLOCK_TYPE_Default":      0,
		"RES_PROJECT8_AUCTION_UNLOCK_TYPE_AUCTION_ITEM": 1,
		"RES_PROJECT8_AUCTION_UNLOCK_TYPE_PLAYER":       2,
	}
)

func (x RES_PROJECT8_AUCTION_UNLOCK_TYPE) Enum() *RES_PROJECT8_AUCTION_UNLOCK_TYPE {
	p := new(RES_PROJECT8_AUCTION_UNLOCK_TYPE)
	*p = x
	return p
}

func (x RES_PROJECT8_AUCTION_UNLOCK_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_PROJECT8_AUCTION_UNLOCK_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[93].Descriptor()
}

func (RES_PROJECT8_AUCTION_UNLOCK_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[93]
}

func (x RES_PROJECT8_AUCTION_UNLOCK_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_PROJECT8_AUCTION_UNLOCK_TYPE.Descriptor instead.
func (RES_PROJECT8_AUCTION_UNLOCK_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{93}
}

type RES_PROJECT8_DROP_PROBILITY_TYPE int32

const (
	RES_PROJECT8_DROP_PROBILITY_TYPE_RES_PROJECT8_DROP_PROBILITY_TYPE_RANDOM_LOCAL  RES_PROJECT8_DROP_PROBILITY_TYPE = 0
	RES_PROJECT8_DROP_PROBILITY_TYPE_RES_PROJECT8_DROP_PROBILITY_TYPE_RANDOM_GLOBAL RES_PROJECT8_DROP_PROBILITY_TYPE = 1
)

// Enum value maps for RES_PROJECT8_DROP_PROBILITY_TYPE.
var (
	RES_PROJECT8_DROP_PROBILITY_TYPE_name = map[int32]string{
		0: "RES_PROJECT8_DROP_PROBILITY_TYPE_RANDOM_LOCAL",
		1: "RES_PROJECT8_DROP_PROBILITY_TYPE_RANDOM_GLOBAL",
	}
	RES_PROJECT8_DROP_PROBILITY_TYPE_value = map[string]int32{
		"RES_PROJECT8_DROP_PROBILITY_TYPE_RANDOM_LOCAL":  0,
		"RES_PROJECT8_DROP_PROBILITY_TYPE_RANDOM_GLOBAL": 1,
	}
)

func (x RES_PROJECT8_DROP_PROBILITY_TYPE) Enum() *RES_PROJECT8_DROP_PROBILITY_TYPE {
	p := new(RES_PROJECT8_DROP_PROBILITY_TYPE)
	*p = x
	return p
}

func (x RES_PROJECT8_DROP_PROBILITY_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_PROJECT8_DROP_PROBILITY_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[94].Descriptor()
}

func (RES_PROJECT8_DROP_PROBILITY_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[94]
}

func (x RES_PROJECT8_DROP_PROBILITY_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_PROJECT8_DROP_PROBILITY_TYPE.Descriptor instead.
func (RES_PROJECT8_DROP_PROBILITY_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{94}
}

type RES_PROJECT8_CUSTOM_ROOM_SET_INDEX int32

const (
	RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_BAN_PICK RES_PROJECT8_CUSTOM_ROOM_SET_INDEX = 0
	// RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_GM_FOREVER_BATTLE_MODE = 32 [(resdata.keyword_alias) = "GM无限战斗模式"];
	// RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_GM_FAST_CHOOSE_LORD = 33 [(resdata.keyword_alias) = "GM快速选领主"];
	// RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_GM_UNLIMITED_CHOOSE_LORD = 34 [(resdata.keyword_alias) = "GM选领主无限时长"];
	RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_GM_FAST_EXCHANGE_CARD    RES_PROJECT8_CUSTOM_ROOM_SET_INDEX = 35
	RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_GM_ALLOW_TEST_LORD       RES_PROJECT8_CUSTOM_ROOM_SET_INDEX = 36
	RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_GM_SKIP_EXTRA_FIGHT_TIME RES_PROJECT8_CUSTOM_ROOM_SET_INDEX = 37
	RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_GM_SKIP_EXCHANGE_CARD    RES_PROJECT8_CUSTOM_ROOM_SET_INDEX = 38
	RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_GM_SKIP_AUCTION          RES_PROJECT8_CUSTOM_ROOM_SET_INDEX = 39
	RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_GM_FAST_AUCTION          RES_PROJECT8_CUSTOM_ROOM_SET_INDEX = 40
	RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_GM_FAST_PREPARETIME      RES_PROJECT8_CUSTOM_ROOM_SET_INDEX = 41
	RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_START_ROUND_BIT_1        RES_PROJECT8_CUSTOM_ROOM_SET_INDEX = 42
	RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_START_ROUND_BIT_2        RES_PROJECT8_CUSTOM_ROOM_SET_INDEX = 43
	RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_START_ROUND_BIT_3        RES_PROJECT8_CUSTOM_ROOM_SET_INDEX = 44
	RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_START_ROUND_BIT_4        RES_PROJECT8_CUSTOM_ROOM_SET_INDEX = 45
	RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_LAST                     RES_PROJECT8_CUSTOM_ROOM_SET_INDEX = 64
)

// Enum value maps for RES_PROJECT8_CUSTOM_ROOM_SET_INDEX.
var (
	RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_name = map[int32]string{
		0:  "RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_BAN_PICK",
		35: "RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_GM_FAST_EXCHANGE_CARD",
		36: "RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_GM_ALLOW_TEST_LORD",
		37: "RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_GM_SKIP_EXTRA_FIGHT_TIME",
		38: "RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_GM_SKIP_EXCHANGE_CARD",
		39: "RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_GM_SKIP_AUCTION",
		40: "RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_GM_FAST_AUCTION",
		41: "RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_GM_FAST_PREPARETIME",
		42: "RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_START_ROUND_BIT_1",
		43: "RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_START_ROUND_BIT_2",
		44: "RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_START_ROUND_BIT_3",
		45: "RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_START_ROUND_BIT_4",
		64: "RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_LAST",
	}
	RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_value = map[string]int32{
		"RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_BAN_PICK":                 0,
		"RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_GM_FAST_EXCHANGE_CARD":    35,
		"RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_GM_ALLOW_TEST_LORD":       36,
		"RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_GM_SKIP_EXTRA_FIGHT_TIME": 37,
		"RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_GM_SKIP_EXCHANGE_CARD":    38,
		"RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_GM_SKIP_AUCTION":          39,
		"RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_GM_FAST_AUCTION":          40,
		"RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_GM_FAST_PREPARETIME":      41,
		"RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_START_ROUND_BIT_1":        42,
		"RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_START_ROUND_BIT_2":        43,
		"RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_START_ROUND_BIT_3":        44,
		"RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_START_ROUND_BIT_4":        45,
		"RES_PROJECT8_CUSTOM_ROOM_SET_INDEX_LAST":                     64,
	}
)

func (x RES_PROJECT8_CUSTOM_ROOM_SET_INDEX) Enum() *RES_PROJECT8_CUSTOM_ROOM_SET_INDEX {
	p := new(RES_PROJECT8_CUSTOM_ROOM_SET_INDEX)
	*p = x
	return p
}

func (x RES_PROJECT8_CUSTOM_ROOM_SET_INDEX) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_PROJECT8_CUSTOM_ROOM_SET_INDEX) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[95].Descriptor()
}

func (RES_PROJECT8_CUSTOM_ROOM_SET_INDEX) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[95]
}

func (x RES_PROJECT8_CUSTOM_ROOM_SET_INDEX) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_PROJECT8_CUSTOM_ROOM_SET_INDEX.Descriptor instead.
func (RES_PROJECT8_CUSTOM_ROOM_SET_INDEX) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{95}
}

type RES_PROJECT8_ROUND_STATE_TYPE int32

const (
	RES_PROJECT8_ROUND_STATE_TYPE_RES_PROJECT8_ROUND_STATE_TYPE_NULL          RES_PROJECT8_ROUND_STATE_TYPE = 0
	RES_PROJECT8_ROUND_STATE_TYPE_RES_PROJECT8_ROUND_STATE_TYPE_BEGIN         RES_PROJECT8_ROUND_STATE_TYPE = 1
	RES_PROJECT8_ROUND_STATE_TYPE_RES_PROJECT8_ROUND_STATE_TYPE_BATTLE        RES_PROJECT8_ROUND_STATE_TYPE = 2
	RES_PROJECT8_ROUND_STATE_TYPE_RES_PROJECT8_ROUND_STATE_TYPE_EXCHANGE_CARD RES_PROJECT8_ROUND_STATE_TYPE = 3
	RES_PROJECT8_ROUND_STATE_TYPE_RES_PROJECT8_ROUND_STATE_TYPE_AUCTION       RES_PROJECT8_ROUND_STATE_TYPE = 4
	RES_PROJECT8_ROUND_STATE_TYPE_RES_PROJECT8_ROUND_STATE_TYPE_LORD_REWARD   RES_PROJECT8_ROUND_STATE_TYPE = 5
	RES_PROJECT8_ROUND_STATE_TYPE_RES_PROJECT8_ROUND_STATE_TYPE_CHOOSE_LORD   RES_PROJECT8_ROUND_STATE_TYPE = 6
	RES_PROJECT8_ROUND_STATE_TYPE_RES_PROJECT8_ROUND_STATE_TYPE_BOSS_BATTLE   RES_PROJECT8_ROUND_STATE_TYPE = 7
	RES_PROJECT8_ROUND_STATE_TYPE_RES_PROJECT8_ROUND_STATE_TYPE_GRAB_AWARD    RES_PROJECT8_ROUND_STATE_TYPE = 8
	RES_PROJECT8_ROUND_STATE_TYPE_RES_PROJECT8_ROUND_STATE_TYPE_PRE_BEGIN     RES_PROJECT8_ROUND_STATE_TYPE = 9
	RES_PROJECT8_ROUND_STATE_TYPE_RES_PROJECT8_ROUND_STATE_TYPE_CHOOSE_REWARD RES_PROJECT8_ROUND_STATE_TYPE = 10
	RES_PROJECT8_ROUND_STATE_TYPE_RES_PROJECT8_ROUND_STATE_TYPE_AIRDROP_AWARD RES_PROJECT8_ROUND_STATE_TYPE = 11
)

// Enum value maps for RES_PROJECT8_ROUND_STATE_TYPE.
var (
	RES_PROJECT8_ROUND_STATE_TYPE_name = map[int32]string{
		0:  "RES_PROJECT8_ROUND_STATE_TYPE_NULL",
		1:  "RES_PROJECT8_ROUND_STATE_TYPE_BEGIN",
		2:  "RES_PROJECT8_ROUND_STATE_TYPE_BATTLE",
		3:  "RES_PROJECT8_ROUND_STATE_TYPE_EXCHANGE_CARD",
		4:  "RES_PROJECT8_ROUND_STATE_TYPE_AUCTION",
		5:  "RES_PROJECT8_ROUND_STATE_TYPE_LORD_REWARD",
		6:  "RES_PROJECT8_ROUND_STATE_TYPE_CHOOSE_LORD",
		7:  "RES_PROJECT8_ROUND_STATE_TYPE_BOSS_BATTLE",
		8:  "RES_PROJECT8_ROUND_STATE_TYPE_GRAB_AWARD",
		9:  "RES_PROJECT8_ROUND_STATE_TYPE_PRE_BEGIN",
		10: "RES_PROJECT8_ROUND_STATE_TYPE_CHOOSE_REWARD",
		11: "RES_PROJECT8_ROUND_STATE_TYPE_AIRDROP_AWARD",
	}
	RES_PROJECT8_ROUND_STATE_TYPE_value = map[string]int32{
		"RES_PROJECT8_ROUND_STATE_TYPE_NULL":          0,
		"RES_PROJECT8_ROUND_STATE_TYPE_BEGIN":         1,
		"RES_PROJECT8_ROUND_STATE_TYPE_BATTLE":        2,
		"RES_PROJECT8_ROUND_STATE_TYPE_EXCHANGE_CARD": 3,
		"RES_PROJECT8_ROUND_STATE_TYPE_AUCTION":       4,
		"RES_PROJECT8_ROUND_STATE_TYPE_LORD_REWARD":   5,
		"RES_PROJECT8_ROUND_STATE_TYPE_CHOOSE_LORD":   6,
		"RES_PROJECT8_ROUND_STATE_TYPE_BOSS_BATTLE":   7,
		"RES_PROJECT8_ROUND_STATE_TYPE_GRAB_AWARD":    8,
		"RES_PROJECT8_ROUND_STATE_TYPE_PRE_BEGIN":     9,
		"RES_PROJECT8_ROUND_STATE_TYPE_CHOOSE_REWARD": 10,
		"RES_PROJECT8_ROUND_STATE_TYPE_AIRDROP_AWARD": 11,
	}
)

func (x RES_PROJECT8_ROUND_STATE_TYPE) Enum() *RES_PROJECT8_ROUND_STATE_TYPE {
	p := new(RES_PROJECT8_ROUND_STATE_TYPE)
	*p = x
	return p
}

func (x RES_PROJECT8_ROUND_STATE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_PROJECT8_ROUND_STATE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[96].Descriptor()
}

func (RES_PROJECT8_ROUND_STATE_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[96]
}

func (x RES_PROJECT8_ROUND_STATE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_PROJECT8_ROUND_STATE_TYPE.Descriptor instead.
func (RES_PROJECT8_ROUND_STATE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{96}
}

type RES_FORMULA_CALCULATE_EXTRA_TYPE int32

const (
	RES_FORMULA_CALCULATE_EXTRA_TYPE_RES_FORMULA_CALCULATE_EXTRA_TYPE_NULL                   RES_FORMULA_CALCULATE_EXTRA_TYPE = 0
	RES_FORMULA_CALCULATE_EXTRA_TYPE_RES_FORMULA_CALCULATE_EXTRA_TYPE_SOURCE_MAX_HP          RES_FORMULA_CALCULATE_EXTRA_TYPE = 1
	RES_FORMULA_CALCULATE_EXTRA_TYPE_RES_FORMULA_CALCULATE_EXTRA_TYPE_SOURCE_LOSE_HP         RES_FORMULA_CALCULATE_EXTRA_TYPE = 2
	RES_FORMULA_CALCULATE_EXTRA_TYPE_RES_FORMULA_CALCULATE_EXTRA_TYPE_SOURCE_CURRENT_HP      RES_FORMULA_CALCULATE_EXTRA_TYPE = 3
	RES_FORMULA_CALCULATE_EXTRA_TYPE_RES_FORMULA_CALCULATE_EXTRA_TYPE_SOURCE_MAX_ENERGY      RES_FORMULA_CALCULATE_EXTRA_TYPE = 4
	RES_FORMULA_CALCULATE_EXTRA_TYPE_RES_FORMULA_CALCULATE_EXTRA_TYPE_SOURCE_ARMOR           RES_FORMULA_CALCULATE_EXTRA_TYPE = 5
	RES_FORMULA_CALCULATE_EXTRA_TYPE_RES_FORMULA_CALCULATE_EXTRA_TYPE_SOURCE_MAGIC_RESIST    RES_FORMULA_CALCULATE_EXTRA_TYPE = 6
	RES_FORMULA_CALCULATE_EXTRA_TYPE_RES_FORMULA_CALCULATE_EXTRA_TYPE_SOURCE_ABILITY_POWER   RES_FORMULA_CALCULATE_EXTRA_TYPE = 7
	RES_FORMULA_CALCULATE_EXTRA_TYPE_RES_FORMULA_CALCULATE_EXTRA_TYPE_SOURCE_CURRENT_SHIELD  RES_FORMULA_CALCULATE_EXTRA_TYPE = 8
	RES_FORMULA_CALCULATE_EXTRA_TYPE_RES_FORMULA_CALCULATE_EXTRA_TYPE_SOURCE_ATTACK_DAMAGE   RES_FORMULA_CALCULATE_EXTRA_TYPE = 9
	RES_FORMULA_CALCULATE_EXTRA_TYPE_RES_FORMULA_CALCULATE_EXTRA_TYPE_TARGET_MAX_HP          RES_FORMULA_CALCULATE_EXTRA_TYPE = 11
	RES_FORMULA_CALCULATE_EXTRA_TYPE_RES_FORMULA_CALCULATE_EXTRA_TYPE_TARGET_LOSE_HP         RES_FORMULA_CALCULATE_EXTRA_TYPE = 12
	RES_FORMULA_CALCULATE_EXTRA_TYPE_RES_FORMULA_CALCULATE_EXTRA_TYPE_TARGET_CURRENT_HP      RES_FORMULA_CALCULATE_EXTRA_TYPE = 13
	RES_FORMULA_CALCULATE_EXTRA_TYPE_RES_FORMULA_CALCULATE_EXTRA_TYPE_TARGET_MAX_ENERGY      RES_FORMULA_CALCULATE_EXTRA_TYPE = 14
	RES_FORMULA_CALCULATE_EXTRA_TYPE_RES_FORMULA_CALCULATE_EXTRA_TYPE_TARGET_ARMOR           RES_FORMULA_CALCULATE_EXTRA_TYPE = 15
	RES_FORMULA_CALCULATE_EXTRA_TYPE_RES_FORMULA_CALCULATE_EXTRA_TYPE_TARGET_MAGIC_RESIST    RES_FORMULA_CALCULATE_EXTRA_TYPE = 16
	RES_FORMULA_CALCULATE_EXTRA_TYPE_RES_FORMULA_CALCULATE_EXTRA_TYPE_TARGET_ABILITY_POWER   RES_FORMULA_CALCULATE_EXTRA_TYPE = 17
	RES_FORMULA_CALCULATE_EXTRA_TYPE_RES_FORMULA_CALCULATE_EXTRA_TYPE_TARGET_CURRENT_SHIELD  RES_FORMULA_CALCULATE_EXTRA_TYPE = 18
	RES_FORMULA_CALCULATE_EXTRA_TYPE_RES_FORMULA_CALCULATE_EXTRA_TYPE_TARGET_ATTACK_DAMAGE   RES_FORMULA_CALCULATE_EXTRA_TYPE = 19
	RES_FORMULA_CALCULATE_EXTRA_TYPE_RES_FORMULA_CALCULATE_EXTRA_TYPE_TARGET_LOSE_HP_PERCENT RES_FORMULA_CALCULATE_EXTRA_TYPE = 20
	RES_FORMULA_CALCULATE_EXTRA_TYPE_RES_FORMULA_CALCULATE_EXTRA_TYPE_LAST                   RES_FORMULA_CALCULATE_EXTRA_TYPE = 21
)

// Enum value maps for RES_FORMULA_CALCULATE_EXTRA_TYPE.
var (
	RES_FORMULA_CALCULATE_EXTRA_TYPE_name = map[int32]string{
		0:  "RES_FORMULA_CALCULATE_EXTRA_TYPE_NULL",
		1:  "RES_FORMULA_CALCULATE_EXTRA_TYPE_SOURCE_MAX_HP",
		2:  "RES_FORMULA_CALCULATE_EXTRA_TYPE_SOURCE_LOSE_HP",
		3:  "RES_FORMULA_CALCULATE_EXTRA_TYPE_SOURCE_CURRENT_HP",
		4:  "RES_FORMULA_CALCULATE_EXTRA_TYPE_SOURCE_MAX_ENERGY",
		5:  "RES_FORMULA_CALCULATE_EXTRA_TYPE_SOURCE_ARMOR",
		6:  "RES_FORMULA_CALCULATE_EXTRA_TYPE_SOURCE_MAGIC_RESIST",
		7:  "RES_FORMULA_CALCULATE_EXTRA_TYPE_SOURCE_ABILITY_POWER",
		8:  "RES_FORMULA_CALCULATE_EXTRA_TYPE_SOURCE_CURRENT_SHIELD",
		9:  "RES_FORMULA_CALCULATE_EXTRA_TYPE_SOURCE_ATTACK_DAMAGE",
		11: "RES_FORMULA_CALCULATE_EXTRA_TYPE_TARGET_MAX_HP",
		12: "RES_FORMULA_CALCULATE_EXTRA_TYPE_TARGET_LOSE_HP",
		13: "RES_FORMULA_CALCULATE_EXTRA_TYPE_TARGET_CURRENT_HP",
		14: "RES_FORMULA_CALCULATE_EXTRA_TYPE_TARGET_MAX_ENERGY",
		15: "RES_FORMULA_CALCULATE_EXTRA_TYPE_TARGET_ARMOR",
		16: "RES_FORMULA_CALCULATE_EXTRA_TYPE_TARGET_MAGIC_RESIST",
		17: "RES_FORMULA_CALCULATE_EXTRA_TYPE_TARGET_ABILITY_POWER",
		18: "RES_FORMULA_CALCULATE_EXTRA_TYPE_TARGET_CURRENT_SHIELD",
		19: "RES_FORMULA_CALCULATE_EXTRA_TYPE_TARGET_ATTACK_DAMAGE",
		20: "RES_FORMULA_CALCULATE_EXTRA_TYPE_TARGET_LOSE_HP_PERCENT",
		21: "RES_FORMULA_CALCULATE_EXTRA_TYPE_LAST",
	}
	RES_FORMULA_CALCULATE_EXTRA_TYPE_value = map[string]int32{
		"RES_FORMULA_CALCULATE_EXTRA_TYPE_NULL":                   0,
		"RES_FORMULA_CALCULATE_EXTRA_TYPE_SOURCE_MAX_HP":          1,
		"RES_FORMULA_CALCULATE_EXTRA_TYPE_SOURCE_LOSE_HP":         2,
		"RES_FORMULA_CALCULATE_EXTRA_TYPE_SOURCE_CURRENT_HP":      3,
		"RES_FORMULA_CALCULATE_EXTRA_TYPE_SOURCE_MAX_ENERGY":      4,
		"RES_FORMULA_CALCULATE_EXTRA_TYPE_SOURCE_ARMOR":           5,
		"RES_FORMULA_CALCULATE_EXTRA_TYPE_SOURCE_MAGIC_RESIST":    6,
		"RES_FORMULA_CALCULATE_EXTRA_TYPE_SOURCE_ABILITY_POWER":   7,
		"RES_FORMULA_CALCULATE_EXTRA_TYPE_SOURCE_CURRENT_SHIELD":  8,
		"RES_FORMULA_CALCULATE_EXTRA_TYPE_SOURCE_ATTACK_DAMAGE":   9,
		"RES_FORMULA_CALCULATE_EXTRA_TYPE_TARGET_MAX_HP":          11,
		"RES_FORMULA_CALCULATE_EXTRA_TYPE_TARGET_LOSE_HP":         12,
		"RES_FORMULA_CALCULATE_EXTRA_TYPE_TARGET_CURRENT_HP":      13,
		"RES_FORMULA_CALCULATE_EXTRA_TYPE_TARGET_MAX_ENERGY":      14,
		"RES_FORMULA_CALCULATE_EXTRA_TYPE_TARGET_ARMOR":           15,
		"RES_FORMULA_CALCULATE_EXTRA_TYPE_TARGET_MAGIC_RESIST":    16,
		"RES_FORMULA_CALCULATE_EXTRA_TYPE_TARGET_ABILITY_POWER":   17,
		"RES_FORMULA_CALCULATE_EXTRA_TYPE_TARGET_CURRENT_SHIELD":  18,
		"RES_FORMULA_CALCULATE_EXTRA_TYPE_TARGET_ATTACK_DAMAGE":   19,
		"RES_FORMULA_CALCULATE_EXTRA_TYPE_TARGET_LOSE_HP_PERCENT": 20,
		"RES_FORMULA_CALCULATE_EXTRA_TYPE_LAST":                   21,
	}
)

func (x RES_FORMULA_CALCULATE_EXTRA_TYPE) Enum() *RES_FORMULA_CALCULATE_EXTRA_TYPE {
	p := new(RES_FORMULA_CALCULATE_EXTRA_TYPE)
	*p = x
	return p
}

func (x RES_FORMULA_CALCULATE_EXTRA_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_FORMULA_CALCULATE_EXTRA_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[97].Descriptor()
}

func (RES_FORMULA_CALCULATE_EXTRA_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[97]
}

func (x RES_FORMULA_CALCULATE_EXTRA_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_FORMULA_CALCULATE_EXTRA_TYPE.Descriptor instead.
func (RES_FORMULA_CALCULATE_EXTRA_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{97}
}

type RES_GRAB_AWARD_GLOBAL_TYPE int32

const (
	RES_GRAB_AWARD_GLOBAL_TYPE_RES_GRAB_AWARD_GLOBAL_TYPE_NULL          RES_GRAB_AWARD_GLOBAL_TYPE = 0
	RES_GRAB_AWARD_GLOBAL_TYPE_RES_GRAB_AWARD_GLOBAL_TYPE_SCENE_ID      RES_GRAB_AWARD_GLOBAL_TYPE = 1
	RES_GRAB_AWARD_GLOBAL_TYPE_RES_GRAB_AWARD_GLOBAL_TYPE_INTERVAL_TIME RES_GRAB_AWARD_GLOBAL_TYPE = 2
	RES_GRAB_AWARD_GLOBAL_TYPE_RES_GRAB_AWARD_GLOBAL_TYPE_DROP_TIME     RES_GRAB_AWARD_GLOBAL_TYPE = 3
	RES_GRAB_AWARD_GLOBAL_TYPE_RES_GRAB_AWARD_GLOBAL_TYPE_DROP_PARAM    RES_GRAB_AWARD_GLOBAL_TYPE = 4
)

// Enum value maps for RES_GRAB_AWARD_GLOBAL_TYPE.
var (
	RES_GRAB_AWARD_GLOBAL_TYPE_name = map[int32]string{
		0: "RES_GRAB_AWARD_GLOBAL_TYPE_NULL",
		1: "RES_GRAB_AWARD_GLOBAL_TYPE_SCENE_ID",
		2: "RES_GRAB_AWARD_GLOBAL_TYPE_INTERVAL_TIME",
		3: "RES_GRAB_AWARD_GLOBAL_TYPE_DROP_TIME",
		4: "RES_GRAB_AWARD_GLOBAL_TYPE_DROP_PARAM",
	}
	RES_GRAB_AWARD_GLOBAL_TYPE_value = map[string]int32{
		"RES_GRAB_AWARD_GLOBAL_TYPE_NULL":          0,
		"RES_GRAB_AWARD_GLOBAL_TYPE_SCENE_ID":      1,
		"RES_GRAB_AWARD_GLOBAL_TYPE_INTERVAL_TIME": 2,
		"RES_GRAB_AWARD_GLOBAL_TYPE_DROP_TIME":     3,
		"RES_GRAB_AWARD_GLOBAL_TYPE_DROP_PARAM":    4,
	}
)

func (x RES_GRAB_AWARD_GLOBAL_TYPE) Enum() *RES_GRAB_AWARD_GLOBAL_TYPE {
	p := new(RES_GRAB_AWARD_GLOBAL_TYPE)
	*p = x
	return p
}

func (x RES_GRAB_AWARD_GLOBAL_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_GRAB_AWARD_GLOBAL_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[98].Descriptor()
}

func (RES_GRAB_AWARD_GLOBAL_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[98]
}

func (x RES_GRAB_AWARD_GLOBAL_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_GRAB_AWARD_GLOBAL_TYPE.Descriptor instead.
func (RES_GRAB_AWARD_GLOBAL_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{98}
}

type BUFF_EFFECT_TYPE int32

const (
	BUFF_EFFECT_TYPE_BUFF_EFFECT_TYPE_NEUTRAL   BUFF_EFFECT_TYPE = 0
	BUFF_EFFECT_TYPE_BUFF_EFFECT_TYPE_POSITIVE  BUFF_EFFECT_TYPE = 1
	BUFF_EFFECT_TYPE_BUFF_EFFECT_TYPE_NEGATIVE  BUFF_EFFECT_TYPE = 2
	BUFF_EFFECT_TYPE_BUFF_EFFECT_TYPE_DAMAGE    BUFF_EFFECT_TYPE = 3
	BUFF_EFFECT_TYPE_BUFF_EFFECT_TYPE_CONTROL_1 BUFF_EFFECT_TYPE = 4
	BUFF_EFFECT_TYPE_BUFF_EFFECT_TYPE_CONTROL_2 BUFF_EFFECT_TYPE = 5
	BUFF_EFFECT_TYPE_BUFF_EFFECT_TYPE_CONTROL_3 BUFF_EFFECT_TYPE = 6
	BUFF_EFFECT_TYPE_BUFF_EFFECT_TYPE_CONTROL_4 BUFF_EFFECT_TYPE = 7
	BUFF_EFFECT_TYPE_BUFF_EFFECT_TYPE_LAST      BUFF_EFFECT_TYPE = 8
	BUFF_EFFECT_TYPE_BUFF_EFFECT_TYPE_ERROR_1   BUFF_EFFECT_TYPE = 9
	BUFF_EFFECT_TYPE_BUFF_EFFECT_TYPE_ERROR_2   BUFF_EFFECT_TYPE = 10
)

// Enum value maps for BUFF_EFFECT_TYPE.
var (
	BUFF_EFFECT_TYPE_name = map[int32]string{
		0:  "BUFF_EFFECT_TYPE_NEUTRAL",
		1:  "BUFF_EFFECT_TYPE_POSITIVE",
		2:  "BUFF_EFFECT_TYPE_NEGATIVE",
		3:  "BUFF_EFFECT_TYPE_DAMAGE",
		4:  "BUFF_EFFECT_TYPE_CONTROL_1",
		5:  "BUFF_EFFECT_TYPE_CONTROL_2",
		6:  "BUFF_EFFECT_TYPE_CONTROL_3",
		7:  "BUFF_EFFECT_TYPE_CONTROL_4",
		8:  "BUFF_EFFECT_TYPE_LAST",
		9:  "BUFF_EFFECT_TYPE_ERROR_1",
		10: "BUFF_EFFECT_TYPE_ERROR_2",
	}
	BUFF_EFFECT_TYPE_value = map[string]int32{
		"BUFF_EFFECT_TYPE_NEUTRAL":   0,
		"BUFF_EFFECT_TYPE_POSITIVE":  1,
		"BUFF_EFFECT_TYPE_NEGATIVE":  2,
		"BUFF_EFFECT_TYPE_DAMAGE":    3,
		"BUFF_EFFECT_TYPE_CONTROL_1": 4,
		"BUFF_EFFECT_TYPE_CONTROL_2": 5,
		"BUFF_EFFECT_TYPE_CONTROL_3": 6,
		"BUFF_EFFECT_TYPE_CONTROL_4": 7,
		"BUFF_EFFECT_TYPE_LAST":      8,
		"BUFF_EFFECT_TYPE_ERROR_1":   9,
		"BUFF_EFFECT_TYPE_ERROR_2":   10,
	}
)

func (x BUFF_EFFECT_TYPE) Enum() *BUFF_EFFECT_TYPE {
	p := new(BUFF_EFFECT_TYPE)
	*p = x
	return p
}

func (x BUFF_EFFECT_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BUFF_EFFECT_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[99].Descriptor()
}

func (BUFF_EFFECT_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[99]
}

func (x BUFF_EFFECT_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BUFF_EFFECT_TYPE.Descriptor instead.
func (BUFF_EFFECT_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{99}
}

type BUFF_SHOW_TYPE int32

const (
	BUFF_SHOW_TYPE_BUFF_SHOW_TYPE_NULL       BUFF_SHOW_TYPE = 0
	BUFF_SHOW_TYPE_BUFF_SHOW_TYPE_SKILL_BAR  BUFF_SHOW_TYPE = 1
	BUFF_SHOW_TYPE_BUFF_SHOW_TYPE_SKILL_ICON BUFF_SHOW_TYPE = 2
)

// Enum value maps for BUFF_SHOW_TYPE.
var (
	BUFF_SHOW_TYPE_name = map[int32]string{
		0: "BUFF_SHOW_TYPE_NULL",
		1: "BUFF_SHOW_TYPE_SKILL_BAR",
		2: "BUFF_SHOW_TYPE_SKILL_ICON",
	}
	BUFF_SHOW_TYPE_value = map[string]int32{
		"BUFF_SHOW_TYPE_NULL":       0,
		"BUFF_SHOW_TYPE_SKILL_BAR":  1,
		"BUFF_SHOW_TYPE_SKILL_ICON": 2,
	}
)

func (x BUFF_SHOW_TYPE) Enum() *BUFF_SHOW_TYPE {
	p := new(BUFF_SHOW_TYPE)
	*p = x
	return p
}

func (x BUFF_SHOW_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BUFF_SHOW_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[100].Descriptor()
}

func (BUFF_SHOW_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[100]
}

func (x BUFF_SHOW_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BUFF_SHOW_TYPE.Descriptor instead.
func (BUFF_SHOW_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{100}
}

type CUSTOM_COIN_TYPE int32

const (
	CUSTOM_COIN_TYPE_CUSTOM_COIN_TYPE_CHANGAN CUSTOM_COIN_TYPE = 0
)

// Enum value maps for CUSTOM_COIN_TYPE.
var (
	CUSTOM_COIN_TYPE_name = map[int32]string{
		0: "CUSTOM_COIN_TYPE_CHANGAN",
	}
	CUSTOM_COIN_TYPE_value = map[string]int32{
		"CUSTOM_COIN_TYPE_CHANGAN": 0,
	}
)

func (x CUSTOM_COIN_TYPE) Enum() *CUSTOM_COIN_TYPE {
	p := new(CUSTOM_COIN_TYPE)
	*p = x
	return p
}

func (x CUSTOM_COIN_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CUSTOM_COIN_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[101].Descriptor()
}

func (CUSTOM_COIN_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[101]
}

func (x CUSTOM_COIN_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CUSTOM_COIN_TYPE.Descriptor instead.
func (CUSTOM_COIN_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{101}
}

type RELATIVE_MOD_TYPE int32

const (
	RELATIVE_MOD_TYPE_RELATIVE_MOD_TYPE_NONE                  RELATIVE_MOD_TYPE = 0
	RELATIVE_MOD_TYPE_RELATIVE_MOD_TYPE_CHANGAN_MOD1          RELATIVE_MOD_TYPE = 1
	RELATIVE_MOD_TYPE_RELATIVE_MOD_TYPE_RULE_MOD1             RELATIVE_MOD_TYPE = 2
	RELATIVE_MOD_TYPE_RELATIVE_MOD_TYPE_SANFEN_MOD1           RELATIVE_MOD_TYPE = 3
	RELATIVE_MOD_TYPE_RELATIVE_MOD_TYPE_SANFEN_MOD2           RELATIVE_MOD_TYPE = 4
	RELATIVE_MOD_TYPE_RELATIVE_MOD_TYPE_RULE_MOD2             RELATIVE_MOD_TYPE = 5
	RELATIVE_MOD_TYPE_RELATIVE_MOD_TYPE_EXTRA_STAR_LEADER_MOD RELATIVE_MOD_TYPE = 6
	RELATIVE_MOD_TYPE_RELATIVE_MOD_TYPE_CHANGAN_MOD2          RELATIVE_MOD_TYPE = 7
)

// Enum value maps for RELATIVE_MOD_TYPE.
var (
	RELATIVE_MOD_TYPE_name = map[int32]string{
		0: "RELATIVE_MOD_TYPE_NONE",
		1: "RELATIVE_MOD_TYPE_CHANGAN_MOD1",
		2: "RELATIVE_MOD_TYPE_RULE_MOD1",
		3: "RELATIVE_MOD_TYPE_SANFEN_MOD1",
		4: "RELATIVE_MOD_TYPE_SANFEN_MOD2",
		5: "RELATIVE_MOD_TYPE_RULE_MOD2",
		6: "RELATIVE_MOD_TYPE_EXTRA_STAR_LEADER_MOD",
		7: "RELATIVE_MOD_TYPE_CHANGAN_MOD2",
	}
	RELATIVE_MOD_TYPE_value = map[string]int32{
		"RELATIVE_MOD_TYPE_NONE":                  0,
		"RELATIVE_MOD_TYPE_CHANGAN_MOD1":          1,
		"RELATIVE_MOD_TYPE_RULE_MOD1":             2,
		"RELATIVE_MOD_TYPE_SANFEN_MOD1":           3,
		"RELATIVE_MOD_TYPE_SANFEN_MOD2":           4,
		"RELATIVE_MOD_TYPE_RULE_MOD2":             5,
		"RELATIVE_MOD_TYPE_EXTRA_STAR_LEADER_MOD": 6,
		"RELATIVE_MOD_TYPE_CHANGAN_MOD2":          7,
	}
)

func (x RELATIVE_MOD_TYPE) Enum() *RELATIVE_MOD_TYPE {
	p := new(RELATIVE_MOD_TYPE)
	*p = x
	return p
}

func (x RELATIVE_MOD_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RELATIVE_MOD_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[102].Descriptor()
}

func (RELATIVE_MOD_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[102]
}

func (x RELATIVE_MOD_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RELATIVE_MOD_TYPE.Descriptor instead.
func (RELATIVE_MOD_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{102}
}

type GAME_CORE_ERROR_CODE int32

const (
	GAME_CORE_ERROR_CODE_GAME_CORE_ERROR_CODE_NONE               GAME_CORE_ERROR_CODE = 0
	GAME_CORE_ERROR_CODE_GAME_CORE_ERROR_CODE_QUIT_BATTLE_FAILED GAME_CORE_ERROR_CODE = 1
)

// Enum value maps for GAME_CORE_ERROR_CODE.
var (
	GAME_CORE_ERROR_CODE_name = map[int32]string{
		0: "GAME_CORE_ERROR_CODE_NONE",
		1: "GAME_CORE_ERROR_CODE_QUIT_BATTLE_FAILED",
	}
	GAME_CORE_ERROR_CODE_value = map[string]int32{
		"GAME_CORE_ERROR_CODE_NONE":               0,
		"GAME_CORE_ERROR_CODE_QUIT_BATTLE_FAILED": 1,
	}
)

func (x GAME_CORE_ERROR_CODE) Enum() *GAME_CORE_ERROR_CODE {
	p := new(GAME_CORE_ERROR_CODE)
	*p = x
	return p
}

func (x GAME_CORE_ERROR_CODE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GAME_CORE_ERROR_CODE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[103].Descriptor()
}

func (GAME_CORE_ERROR_CODE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[103]
}

func (x GAME_CORE_ERROR_CODE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GAME_CORE_ERROR_CODE.Descriptor instead.
func (GAME_CORE_ERROR_CODE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{103}
}

type BUFF_SUB_EFFECT_TYPE_MASK int32

const (
	BUFF_SUB_EFFECT_TYPE_MASK_BUFF_SUB_EFFECT_TYPE_MASK_NULL BUFF_SUB_EFFECT_TYPE_MASK = 0
	BUFF_SUB_EFFECT_TYPE_MASK_BUFF_SUB_EFFECT_TYPE_MASK_1    BUFF_SUB_EFFECT_TYPE_MASK = 16
	BUFF_SUB_EFFECT_TYPE_MASK_BUFF_SUB_EFFECT_TYPE_MASK_2    BUFF_SUB_EFFECT_TYPE_MASK = 1
	BUFF_SUB_EFFECT_TYPE_MASK_BUFF_SUB_EFFECT_TYPE_MASK_3    BUFF_SUB_EFFECT_TYPE_MASK = 2
	BUFF_SUB_EFFECT_TYPE_MASK_BUFF_SUB_EFFECT_TYPE_MASK_4    BUFF_SUB_EFFECT_TYPE_MASK = 8
	BUFF_SUB_EFFECT_TYPE_MASK_BUFF_SUB_EFFECT_TYPE_MASK_5    BUFF_SUB_EFFECT_TYPE_MASK = 10
	BUFF_SUB_EFFECT_TYPE_MASK_BUFF_SUB_EFFECT_TYPE_MASK_6    BUFF_SUB_EFFECT_TYPE_MASK = 15
	BUFF_SUB_EFFECT_TYPE_MASK_BUFF_SUB_EFFECT_TYPE_MASK_7    BUFF_SUB_EFFECT_TYPE_MASK = 31
	BUFF_SUB_EFFECT_TYPE_MASK_BUFF_SUB_EFFECT_TYPE_MASK_8    BUFF_SUB_EFFECT_TYPE_MASK = 2079
	BUFF_SUB_EFFECT_TYPE_MASK_BUFF_SUB_EFFECT_TYPE_MASK_9    BUFF_SUB_EFFECT_TYPE_MASK = 1952
	BUFF_SUB_EFFECT_TYPE_MASK_BUFF_SUB_EFFECT_TYPE_MASK_10   BUFF_SUB_EFFECT_TYPE_MASK = 1968
	BUFF_SUB_EFFECT_TYPE_MASK_BUFF_SUB_EFFECT_TYPE_MASK_11   BUFF_SUB_EFFECT_TYPE_MASK = 64
	BUFF_SUB_EFFECT_TYPE_MASK_BUFF_SUB_EFFECT_TYPE_MASK_12   BUFF_SUB_EFFECT_TYPE_MASK = 80
	BUFF_SUB_EFFECT_TYPE_MASK_BUFF_SUB_EFFECT_TYPE_MASK_13   BUFF_SUB_EFFECT_TYPE_MASK = 2016
	BUFF_SUB_EFFECT_TYPE_MASK_BUFF_SUB_EFFECT_TYPE_MASK_14   BUFF_SUB_EFFECT_TYPE_MASK = 10224
	BUFF_SUB_EFFECT_TYPE_MASK_BUFF_SUB_EFFECT_TYPE_MASK_15   BUFF_SUB_EFFECT_TYPE_MASK = 4112
)

// Enum value maps for BUFF_SUB_EFFECT_TYPE_MASK.
var (
	BUFF_SUB_EFFECT_TYPE_MASK_name = map[int32]string{
		0:     "BUFF_SUB_EFFECT_TYPE_MASK_NULL",
		16:    "BUFF_SUB_EFFECT_TYPE_MASK_1",
		1:     "BUFF_SUB_EFFECT_TYPE_MASK_2",
		2:     "BUFF_SUB_EFFECT_TYPE_MASK_3",
		8:     "BUFF_SUB_EFFECT_TYPE_MASK_4",
		10:    "BUFF_SUB_EFFECT_TYPE_MASK_5",
		15:    "BUFF_SUB_EFFECT_TYPE_MASK_6",
		31:    "BUFF_SUB_EFFECT_TYPE_MASK_7",
		2079:  "BUFF_SUB_EFFECT_TYPE_MASK_8",
		1952:  "BUFF_SUB_EFFECT_TYPE_MASK_9",
		1968:  "BUFF_SUB_EFFECT_TYPE_MASK_10",
		64:    "BUFF_SUB_EFFECT_TYPE_MASK_11",
		80:    "BUFF_SUB_EFFECT_TYPE_MASK_12",
		2016:  "BUFF_SUB_EFFECT_TYPE_MASK_13",
		10224: "BUFF_SUB_EFFECT_TYPE_MASK_14",
		4112:  "BUFF_SUB_EFFECT_TYPE_MASK_15",
	}
	BUFF_SUB_EFFECT_TYPE_MASK_value = map[string]int32{
		"BUFF_SUB_EFFECT_TYPE_MASK_NULL": 0,
		"BUFF_SUB_EFFECT_TYPE_MASK_1":    16,
		"BUFF_SUB_EFFECT_TYPE_MASK_2":    1,
		"BUFF_SUB_EFFECT_TYPE_MASK_3":    2,
		"BUFF_SUB_EFFECT_TYPE_MASK_4":    8,
		"BUFF_SUB_EFFECT_TYPE_MASK_5":    10,
		"BUFF_SUB_EFFECT_TYPE_MASK_6":    15,
		"BUFF_SUB_EFFECT_TYPE_MASK_7":    31,
		"BUFF_SUB_EFFECT_TYPE_MASK_8":    2079,
		"BUFF_SUB_EFFECT_TYPE_MASK_9":    1952,
		"BUFF_SUB_EFFECT_TYPE_MASK_10":   1968,
		"BUFF_SUB_EFFECT_TYPE_MASK_11":   64,
		"BUFF_SUB_EFFECT_TYPE_MASK_12":   80,
		"BUFF_SUB_EFFECT_TYPE_MASK_13":   2016,
		"BUFF_SUB_EFFECT_TYPE_MASK_14":   10224,
		"BUFF_SUB_EFFECT_TYPE_MASK_15":   4112,
	}
)

func (x BUFF_SUB_EFFECT_TYPE_MASK) Enum() *BUFF_SUB_EFFECT_TYPE_MASK {
	p := new(BUFF_SUB_EFFECT_TYPE_MASK)
	*p = x
	return p
}

func (x BUFF_SUB_EFFECT_TYPE_MASK) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BUFF_SUB_EFFECT_TYPE_MASK) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[104].Descriptor()
}

func (BUFF_SUB_EFFECT_TYPE_MASK) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[104]
}

func (x BUFF_SUB_EFFECT_TYPE_MASK) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BUFF_SUB_EFFECT_TYPE_MASK.Descriptor instead.
func (BUFF_SUB_EFFECT_TYPE_MASK) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{104}
}

type RES_PROJECT8_DROP_PROBABILITY_TYPE int32

const (
	RES_PROJECT8_DROP_PROBABILITY_TYPE_RES_PROJECT8_DROP_PROBABILITY_TYPE_NULL RES_PROJECT8_DROP_PROBABILITY_TYPE = 0
	RES_PROJECT8_DROP_PROBABILITY_TYPE_RES_PROJECT8_DROP_PROBABILITY_MINCNT    RES_PROJECT8_DROP_PROBABILITY_TYPE = 1
)

// Enum value maps for RES_PROJECT8_DROP_PROBABILITY_TYPE.
var (
	RES_PROJECT8_DROP_PROBABILITY_TYPE_name = map[int32]string{
		0: "RES_PROJECT8_DROP_PROBABILITY_TYPE_NULL",
		1: "RES_PROJECT8_DROP_PROBABILITY_MINCNT",
	}
	RES_PROJECT8_DROP_PROBABILITY_TYPE_value = map[string]int32{
		"RES_PROJECT8_DROP_PROBABILITY_TYPE_NULL": 0,
		"RES_PROJECT8_DROP_PROBABILITY_MINCNT":    1,
	}
)

func (x RES_PROJECT8_DROP_PROBABILITY_TYPE) Enum() *RES_PROJECT8_DROP_PROBABILITY_TYPE {
	p := new(RES_PROJECT8_DROP_PROBABILITY_TYPE)
	*p = x
	return p
}

func (x RES_PROJECT8_DROP_PROBABILITY_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_PROJECT8_DROP_PROBABILITY_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[105].Descriptor()
}

func (RES_PROJECT8_DROP_PROBABILITY_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[105]
}

func (x RES_PROJECT8_DROP_PROBABILITY_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_PROJECT8_DROP_PROBABILITY_TYPE.Descriptor instead.
func (RES_PROJECT8_DROP_PROBABILITY_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{105}
}

type RES_PROJECT8_DROP_CONDITION_TYPE int32

const (
	RES_PROJECT8_DROP_CONDITION_TYPE_RES_PROJECT8_DROP_CONDITION_TYPE_NULL          RES_PROJECT8_DROP_CONDITION_TYPE = 0
	RES_PROJECT8_DROP_CONDITION_TYPE_RES_PROJECT8_DROP_CONDITION_TYPE_SHOP_LEVEL    RES_PROJECT8_DROP_CONDITION_TYPE = 1
	RES_PROJECT8_DROP_CONDITION_TYPE_RES_PROJECT8_DROP_CONDITION_TYPE_CHESS_STAR    RES_PROJECT8_DROP_CONDITION_TYPE = 2
	RES_PROJECT8_DROP_CONDITION_TYPE_RES_PROJECT8_DROP_CONDITION_TYPE_NOT_DUPLICATE RES_PROJECT8_DROP_CONDITION_TYPE = 3
	RES_PROJECT8_DROP_CONDITION_TYPE_RES_PROJECT8_DROP_CONDITION_TYPE_MAXCNT        RES_PROJECT8_DROP_CONDITION_TYPE = 4
	RES_PROJECT8_DROP_CONDITION_TYPE_RES_PROJECT8_DROP_CONDITION_TYPE_RELATIVE      RES_PROJECT8_DROP_CONDITION_TYPE = 5
)

// Enum value maps for RES_PROJECT8_DROP_CONDITION_TYPE.
var (
	RES_PROJECT8_DROP_CONDITION_TYPE_name = map[int32]string{
		0: "RES_PROJECT8_DROP_CONDITION_TYPE_NULL",
		1: "RES_PROJECT8_DROP_CONDITION_TYPE_SHOP_LEVEL",
		2: "RES_PROJECT8_DROP_CONDITION_TYPE_CHESS_STAR",
		3: "RES_PROJECT8_DROP_CONDITION_TYPE_NOT_DUPLICATE",
		4: "RES_PROJECT8_DROP_CONDITION_TYPE_MAXCNT",
		5: "RES_PROJECT8_DROP_CONDITION_TYPE_RELATIVE",
	}
	RES_PROJECT8_DROP_CONDITION_TYPE_value = map[string]int32{
		"RES_PROJECT8_DROP_CONDITION_TYPE_NULL":          0,
		"RES_PROJECT8_DROP_CONDITION_TYPE_SHOP_LEVEL":    1,
		"RES_PROJECT8_DROP_CONDITION_TYPE_CHESS_STAR":    2,
		"RES_PROJECT8_DROP_CONDITION_TYPE_NOT_DUPLICATE": 3,
		"RES_PROJECT8_DROP_CONDITION_TYPE_MAXCNT":        4,
		"RES_PROJECT8_DROP_CONDITION_TYPE_RELATIVE":      5,
	}
)

func (x RES_PROJECT8_DROP_CONDITION_TYPE) Enum() *RES_PROJECT8_DROP_CONDITION_TYPE {
	p := new(RES_PROJECT8_DROP_CONDITION_TYPE)
	*p = x
	return p
}

func (x RES_PROJECT8_DROP_CONDITION_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_PROJECT8_DROP_CONDITION_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[106].Descriptor()
}

func (RES_PROJECT8_DROP_CONDITION_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[106]
}

func (x RES_PROJECT8_DROP_CONDITION_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_PROJECT8_DROP_CONDITION_TYPE.Descriptor instead.
func (RES_PROJECT8_DROP_CONDITION_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{106}
}

type RES_BATTLE_FLOAT_TEXT_ID int32

const (
	RES_BATTLE_FLOAT_TEXT_ID_RES_BATTLE_FLOAT_TEXT_ID_Default         RES_BATTLE_FLOAT_TEXT_ID = 0
	RES_BATTLE_FLOAT_TEXT_ID_RES_BATTLE_FLOAT_TEXT_ID_ImmunityControl RES_BATTLE_FLOAT_TEXT_ID = 1
	RES_BATTLE_FLOAT_TEXT_ID_RES_BATTLE_FLOAT_TEXT_ID_MISS            RES_BATTLE_FLOAT_TEXT_ID = 2
)

// Enum value maps for RES_BATTLE_FLOAT_TEXT_ID.
var (
	RES_BATTLE_FLOAT_TEXT_ID_name = map[int32]string{
		0: "RES_BATTLE_FLOAT_TEXT_ID_Default",
		1: "RES_BATTLE_FLOAT_TEXT_ID_ImmunityControl",
		2: "RES_BATTLE_FLOAT_TEXT_ID_MISS",
	}
	RES_BATTLE_FLOAT_TEXT_ID_value = map[string]int32{
		"RES_BATTLE_FLOAT_TEXT_ID_Default":         0,
		"RES_BATTLE_FLOAT_TEXT_ID_ImmunityControl": 1,
		"RES_BATTLE_FLOAT_TEXT_ID_MISS":            2,
	}
)

func (x RES_BATTLE_FLOAT_TEXT_ID) Enum() *RES_BATTLE_FLOAT_TEXT_ID {
	p := new(RES_BATTLE_FLOAT_TEXT_ID)
	*p = x
	return p
}

func (x RES_BATTLE_FLOAT_TEXT_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_BATTLE_FLOAT_TEXT_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[107].Descriptor()
}

func (RES_BATTLE_FLOAT_TEXT_ID) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[107]
}

func (x RES_BATTLE_FLOAT_TEXT_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_BATTLE_FLOAT_TEXT_ID.Descriptor instead.
func (RES_BATTLE_FLOAT_TEXT_ID) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{107}
}

type RES_PROJECT8_SKILL_TYPE int32

const (
	RES_PROJECT8_SKILL_TYPE_RES_PROJECT8_SKILL_TYPE_Default    RES_PROJECT8_SKILL_TYPE = 0
	RES_PROJECT8_SKILL_TYPE_RES_PROJECT8_SKILL_TYPE_BREAK_CELL RES_PROJECT8_SKILL_TYPE = 1
	RES_PROJECT8_SKILL_TYPE_RES_PROJECT8_SKILL_TYPE_TERMINATOR RES_PROJECT8_SKILL_TYPE = 2
)

// Enum value maps for RES_PROJECT8_SKILL_TYPE.
var (
	RES_PROJECT8_SKILL_TYPE_name = map[int32]string{
		0: "RES_PROJECT8_SKILL_TYPE_Default",
		1: "RES_PROJECT8_SKILL_TYPE_BREAK_CELL",
		2: "RES_PROJECT8_SKILL_TYPE_TERMINATOR",
	}
	RES_PROJECT8_SKILL_TYPE_value = map[string]int32{
		"RES_PROJECT8_SKILL_TYPE_Default":    0,
		"RES_PROJECT8_SKILL_TYPE_BREAK_CELL": 1,
		"RES_PROJECT8_SKILL_TYPE_TERMINATOR": 2,
	}
)

func (x RES_PROJECT8_SKILL_TYPE) Enum() *RES_PROJECT8_SKILL_TYPE {
	p := new(RES_PROJECT8_SKILL_TYPE)
	*p = x
	return p
}

func (x RES_PROJECT8_SKILL_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_PROJECT8_SKILL_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[108].Descriptor()
}

func (RES_PROJECT8_SKILL_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[108]
}

func (x RES_PROJECT8_SKILL_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_PROJECT8_SKILL_TYPE.Descriptor instead.
func (RES_PROJECT8_SKILL_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{108}
}

type RES_PROJECT8_LORDSKILL_PHASE_TYPE int32

const (
	RES_PROJECT8_LORDSKILL_PHASE_TYPE_RES_PROJECT8_LORDSKILL_PHASE_TYPE_Default RES_PROJECT8_LORDSKILL_PHASE_TYPE = 0
	RES_PROJECT8_LORDSKILL_PHASE_TYPE_BATTLE_PREPARE                            RES_PROJECT8_LORDSKILL_PHASE_TYPE = 1
	RES_PROJECT8_LORDSKILL_PHASE_TYPE_BATTLE_LOCK                               RES_PROJECT8_LORDSKILL_PHASE_TYPE = 2
	RES_PROJECT8_LORDSKILL_PHASE_TYPE_BATTLE_TELEPORTATION                      RES_PROJECT8_LORDSKILL_PHASE_TYPE = 4
	RES_PROJECT8_LORDSKILL_PHASE_TYPE_BATTLE_RACE                               RES_PROJECT8_LORDSKILL_PHASE_TYPE = 8
	RES_PROJECT8_LORDSKILL_PHASE_TYPE_BATTLE_OVERTIME                           RES_PROJECT8_LORDSKILL_PHASE_TYPE = 16
	RES_PROJECT8_LORDSKILL_PHASE_TYPE_BATTLE_SETTLE                             RES_PROJECT8_LORDSKILL_PHASE_TYPE = 32
	RES_PROJECT8_LORDSKILL_PHASE_TYPE_BATTLE_RESET                              RES_PROJECT8_LORDSKILL_PHASE_TYPE = 64
	RES_PROJECT8_LORDSKILL_PHASE_TYPE_BATTLE_POSTPREPARE                        RES_PROJECT8_LORDSKILL_PHASE_TYPE = 128
	RES_PROJECT8_LORDSKILL_PHASE_TYPE_BATTLE_END                                RES_PROJECT8_LORDSKILL_PHASE_TYPE = 256
	RES_PROJECT8_LORDSKILL_PHASE_TYPE_BATTLE_BOSSAWARD                          RES_PROJECT8_LORDSKILL_PHASE_TYPE = 512
	RES_PROJECT8_LORDSKILL_PHASE_TYPE_BATTLE_ONLY                               RES_PROJECT8_LORDSKILL_PHASE_TYPE = 24
	RES_PROJECT8_LORDSKILL_PHASE_TYPE_BATTLE_ALL_PREPARE                        RES_PROJECT8_LORDSKILL_PHASE_TYPE = 129
	RES_PROJECT8_LORDSKILL_PHASE_TYPE_BATTLE_ANY                                RES_PROJECT8_LORDSKILL_PHASE_TYPE = 255
	RES_PROJECT8_LORDSKILL_PHASE_TYPE_MAX                                       RES_PROJECT8_LORDSKILL_PHASE_TYPE = 513
)

// Enum value maps for RES_PROJECT8_LORDSKILL_PHASE_TYPE.
var (
	RES_PROJECT8_LORDSKILL_PHASE_TYPE_name = map[int32]string{
		0:   "RES_PROJECT8_LORDSKILL_PHASE_TYPE_Default",
		1:   "BATTLE_PREPARE",
		2:   "BATTLE_LOCK",
		4:   "BATTLE_TELEPORTATION",
		8:   "BATTLE_RACE",
		16:  "BATTLE_OVERTIME",
		32:  "BATTLE_SETTLE",
		64:  "BATTLE_RESET",
		128: "BATTLE_POSTPREPARE",
		256: "BATTLE_END",
		512: "BATTLE_BOSSAWARD",
		24:  "BATTLE_ONLY",
		129: "BATTLE_ALL_PREPARE",
		255: "BATTLE_ANY",
		513: "MAX",
	}
	RES_PROJECT8_LORDSKILL_PHASE_TYPE_value = map[string]int32{
		"RES_PROJECT8_LORDSKILL_PHASE_TYPE_Default": 0,
		"BATTLE_PREPARE":       1,
		"BATTLE_LOCK":          2,
		"BATTLE_TELEPORTATION": 4,
		"BATTLE_RACE":          8,
		"BATTLE_OVERTIME":      16,
		"BATTLE_SETTLE":        32,
		"BATTLE_RESET":         64,
		"BATTLE_POSTPREPARE":   128,
		"BATTLE_END":           256,
		"BATTLE_BOSSAWARD":     512,
		"BATTLE_ONLY":          24,
		"BATTLE_ALL_PREPARE":   129,
		"BATTLE_ANY":           255,
		"MAX":                  513,
	}
)

func (x RES_PROJECT8_LORDSKILL_PHASE_TYPE) Enum() *RES_PROJECT8_LORDSKILL_PHASE_TYPE {
	p := new(RES_PROJECT8_LORDSKILL_PHASE_TYPE)
	*p = x
	return p
}

func (x RES_PROJECT8_LORDSKILL_PHASE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_PROJECT8_LORDSKILL_PHASE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_os_res_enum_legacy_proto_enumTypes[109].Descriptor()
}

func (RES_PROJECT8_LORDSKILL_PHASE_TYPE) Type() protoreflect.EnumType {
	return &file_os_res_enum_legacy_proto_enumTypes[109]
}

func (x RES_PROJECT8_LORDSKILL_PHASE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_PROJECT8_LORDSKILL_PHASE_TYPE.Descriptor instead.
func (RES_PROJECT8_LORDSKILL_PHASE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_os_res_enum_legacy_proto_rawDescGZIP(), []int{109}
}

var File_os_res_enum_legacy_proto protoreflect.FileDescriptor

var file_os_res_enum_legacy_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6f, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x52, 0x65, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x1a, 0x15, 0x62, 0x69, 0x6e, 0x67, 0x6f, 0x67, 0x65, 0x6e, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x72, 0x65, 0x73, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x13, 0x63, 0x6c, 0x74, 0x67, 0x65, 0x6e, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2a, 0xad, 0x01, 0x0a, 0x0d, 0x52, 0x45, 0x53, 0x5f, 0x41, 0x4e,
	0x4f, 0x4e, 0x59, 0x4d, 0x4f, 0x55, 0x53, 0x12, 0x16, 0x0a, 0x09, 0x52, 0x45, 0x53, 0x5f, 0x46,
	0x41, 0x4c, 0x53, 0x45, 0x10, 0x00, 0x1a, 0x07, 0xaa, 0xb6, 0x18, 0x03, 0xe5, 0x90, 0xa6, 0x12,
	0x15, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x01, 0x1a, 0x07, 0xaa,
	0xb6, 0x18, 0x03, 0xe6, 0x98, 0xaf, 0x12, 0x15, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x5f, 0x4e, 0x55,
	0x4c, 0x4c, 0x10, 0x00, 0x1a, 0x07, 0xaa, 0xb6, 0x18, 0x03, 0xe6, 0x97, 0xa0, 0x12, 0x15, 0x0a,
	0x08, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x41, 0x56, 0x45, 0x10, 0x01, 0x1a, 0x07, 0xaa, 0xb6, 0x18,
	0x03, 0xe6, 0x9c, 0x89, 0x12, 0x18, 0x0a, 0x0d, 0x52, 0x45, 0x53, 0x5f, 0x43, 0x48, 0x4f, 0x4f,
	0x53, 0x45, 0x5f, 0x4e, 0x4f, 0x10, 0x00, 0x1a, 0x05, 0xaa, 0xb6, 0x18, 0x01, 0x4e, 0x12, 0x19,
	0x0a, 0x0e, 0x52, 0x45, 0x53, 0x5f, 0x43, 0x48, 0x4f, 0x4f, 0x53, 0x45, 0x5f, 0x59, 0x45, 0x53,
	0x10, 0x01, 0x1a, 0x05, 0xaa, 0xb6, 0x18, 0x01, 0x59, 0x1a, 0x0a, 0x10, 0x01, 0x88, 0xf9, 0x2b,
	0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xd3, 0x01, 0x0a, 0x11, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45,
	0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x12, 0x22, 0x0a, 0x15, 0x52,
	0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x00, 0x1a, 0x07, 0xaa, 0xb6, 0x18, 0x03, 0xe4, 0xbd, 0x8e, 0x12,
	0x25, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x01, 0x1a, 0x07, 0xaa,
	0xb6, 0x18, 0x03, 0xe4, 0xb8, 0xad, 0x12, 0x23, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45,
	0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x48, 0x49, 0x47, 0x48,
	0x10, 0x02, 0x1a, 0x07, 0xaa, 0xb6, 0x18, 0x03, 0xe9, 0xab, 0x98, 0x12, 0x20, 0x0a, 0x14, 0x52,
	0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x48, 0x44, 0x10, 0x03, 0x1a, 0x06, 0xaa, 0xb6, 0x18, 0x02, 0x48, 0x44, 0x12, 0x22, 0x0a,
	0x15, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x5f, 0x48, 0x44, 0x44, 0x10, 0x04, 0x1a, 0x07, 0xaa, 0xb6, 0x18, 0x03, 0x48, 0x44,
	0x44, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xfd, 0x01, 0x0a, 0x15,
	0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x5f, 0x4e, 0x45, 0x57, 0x12, 0x2a, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x31, 0x10, 0x00, 0x1a, 0x11,
	0xaa, 0xb6, 0x18, 0x0d, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe6, 0xa1, 0xa3, 0xe4, 0xbd, 0x8d,
	0x31, 0x12, 0x2a, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x32, 0x10, 0x01, 0x1a, 0x11, 0xaa, 0xb6, 0x18, 0x0d,
	0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe6, 0xa1, 0xa3, 0xe4, 0xbd, 0x8d, 0x32, 0x12, 0x2a, 0x0a,
	0x13, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x5f, 0x33, 0x10, 0x02, 0x1a, 0x11, 0xaa, 0xb6, 0x18, 0x0d, 0xe8, 0xae, 0xbe, 0xe7,
	0xbd, 0xae, 0xe6, 0xa1, 0xa3, 0xe4, 0xbd, 0x8d, 0x33, 0x12, 0x2a, 0x0a, 0x13, 0x52, 0x45, 0x53,
	0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x34,
	0x10, 0x03, 0x1a, 0x11, 0xaa, 0xb6, 0x18, 0x0d, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe6, 0xa1,
	0xa3, 0xe4, 0xbd, 0x8d, 0x34, 0x12, 0x2a, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x54,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x35, 0x10, 0x04, 0x1a, 0x11,
	0xaa, 0xb6, 0x18, 0x0d, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe6, 0xa1, 0xa3, 0xe4, 0xbd, 0x8d,
	0x35, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0x89, 0x02, 0x0a, 0x10,
	0x52, 0x45, 0x53, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x12, 0x2d, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x00, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f,
	0xe4, 0xbd, 0x8e, 0xe6, 0x80, 0xa7, 0xe8, 0x83, 0xbd, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x12,
	0x30, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x01, 0x1a, 0x13, 0xaa, 0xb6,
	0x18, 0x0f, 0xe4, 0xb8, 0xad, 0xe6, 0x80, 0xa7, 0xe8, 0x83, 0xbd, 0xe8, 0xae, 0xbe, 0xe5, 0xa4,
	0x87, 0x12, 0x2e, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x02, 0x1a, 0x13, 0xaa, 0xb6,
	0x18, 0x0f, 0xe9, 0xab, 0x98, 0xe6, 0x80, 0xa7, 0xe8, 0x83, 0xbd, 0xe8, 0xae, 0xbe, 0xe5, 0xa4,
	0x87, 0x12, 0x2b, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x48, 0x44, 0x10, 0x03, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e,
	0x48, 0x44, 0xe6, 0x80, 0xa7, 0xe8, 0x83, 0xbd, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x12, 0x2d,
	0x0a, 0x14, 0x52, 0x45, 0x53, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x5f, 0x48, 0x44, 0x44, 0x10, 0x04, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0x48, 0x44,
	0x44, 0xe6, 0x80, 0xa7, 0xe8, 0x83, 0xbd, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x1a, 0x08, 0x88,
	0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0x78, 0x0a, 0x10, 0x52, 0x45, 0x53, 0x5f, 0x53,
	0x4b, 0x49, 0x4e, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x12, 0x2d, 0x0a, 0x17, 0x52,
	0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4e, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x4c, 0x45, 0x47, 0x45, 0x4e, 0x44, 0x10, 0x00, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe4, 0xbc,
	0xa0, 0xe8, 0xaf, 0xb4, 0xe7, 0x9a, 0xae, 0xe8, 0x82, 0xa4, 0x12, 0x2b, 0x0a, 0x15, 0x52, 0x45,
	0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4e, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x45,
	0x50, 0x49, 0x43, 0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x8f, 0xb2, 0xe8, 0xaf,
	0x97, 0xe7, 0x9a, 0xae, 0xe8, 0x82, 0xa4, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b,
	0x01, 0x2a, 0x8e, 0x03, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41,
	0x4c, 0x5f, 0x54, 0x49, 0x50, 0x5f, 0x50, 0x4f, 0x53, 0x12, 0x23, 0x0a, 0x16, 0x52, 0x45, 0x53,
	0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x50, 0x5f, 0x50, 0x4f, 0x53,
	0x5f, 0x55, 0x50, 0x10, 0x00, 0x1a, 0x07, 0xaa, 0xb6, 0x18, 0x03, 0xe4, 0xb8, 0x8a, 0x12, 0x25,
	0x0a, 0x18, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x54, 0x49,
	0x50, 0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x1a, 0x07, 0xaa, 0xb6,
	0x18, 0x03, 0xe4, 0xb8, 0x8b, 0x12, 0x25, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x50, 0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x4c, 0x45, 0x46,
	0x54, 0x10, 0x02, 0x1a, 0x07, 0xaa, 0xb6, 0x18, 0x03, 0xe5, 0xb7, 0xa6, 0x12, 0x26, 0x0a, 0x19,
	0x52, 0x45, 0x53, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x50, 0x5f,
	0x50, 0x4f, 0x53, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x03, 0x1a, 0x07, 0xaa, 0xb6, 0x18,
	0x03, 0xe5, 0x8f, 0xb3, 0x12, 0x2a, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x50, 0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x55, 0x50, 0x4c, 0x45,
	0x46, 0x54, 0x10, 0x04, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe4, 0xb8, 0x8a, 0xe5, 0xb7, 0xa6,
	0x12, 0x2b, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x5f,
	0x54, 0x49, 0x50, 0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x55, 0x50, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10,
	0x05, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe4, 0xb8, 0x8a, 0xe5, 0x8f, 0xb3, 0x12, 0x2c, 0x0a,
	0x1c, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x50,
	0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x06, 0x1a,
	0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe4, 0xb8, 0x8b, 0xe5, 0xb7, 0xa6, 0x12, 0x2d, 0x0a, 0x1d, 0x52,
	0x45, 0x53, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x50, 0x5f, 0x50,
	0x4f, 0x53, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x07, 0x1a, 0x0a,
	0xaa, 0xb6, 0x18, 0x06, 0xe4, 0xb8, 0x8b, 0xe5, 0x8f, 0xb3, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45,
	0x53, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x50, 0x5f, 0x50, 0x4f,
	0x53, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x08, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9,
	0x2b, 0x01, 0x2a, 0xd2, 0x01, 0x0a, 0x11, 0x52, 0x45, 0x53, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x53, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12,
	0x1e, 0x0a, 0x11, 0x52, 0x45, 0x53, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f,
	0x50, 0x4c, 0x55, 0x53, 0x10, 0x01, 0x1a, 0x07, 0xaa, 0xb6, 0x18, 0x03, 0xe5, 0x8a, 0xa0, 0x12,
	0x1f, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f,
	0x4d, 0x49, 0x4e, 0x55, 0x53, 0x10, 0x02, 0x1a, 0x07, 0xaa, 0xb6, 0x18, 0x03, 0xe5, 0x87, 0x8f,
	0x12, 0x22, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52,
	0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x59, 0x10, 0x03, 0x1a, 0x07, 0xaa, 0xb6, 0x18,
	0x03, 0xe4, 0xb9, 0x98, 0x12, 0x20, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x5f, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x4f, 0x52, 0x5f, 0x44, 0x49, 0x56, 0x49, 0x44, 0x45, 0x10, 0x04, 0x1a, 0x07, 0xaa,
	0xb6, 0x18, 0x03, 0xe9, 0x99, 0xa4, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x53, 0x5f, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x05, 0x1a, 0x08, 0x88,
	0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0x8d, 0x03, 0x0a, 0x18, 0x50, 0x52, 0x4f, 0x4a,
	0x38, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x44, 0x45, 0x47, 0x52, 0x45, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x12, 0x39, 0x0a, 0x1c, 0x50, 0x52, 0x4f, 0x4a, 0x38, 0x5f, 0x45, 0x46,
	0x46, 0x45, 0x43, 0x54, 0x5f, 0x44, 0x45, 0x47, 0x52, 0x45, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x45, 0x57, 0x10, 0x00, 0x1a, 0x17, 0xaa, 0xb6, 0x18, 0x13, 0xe7, 0xbe, 0x81, 0xe7,
	0xbb, 0x8a, 0x5f, 0xe5, 0x88, 0x9d, 0xe7, 0xaa, 0xa5, 0xe9, 0x97, 0xa8, 0xe5, 0xbe, 0x84, 0x12,
	0x3a, 0x0a, 0x1d, 0x50, 0x52, 0x4f, 0x4a, 0x38, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f,
	0x44, 0x45, 0x47, 0x52, 0x45, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x4f, 0x4f, 0x44,
	0x10, 0x01, 0x1a, 0x17, 0xaa, 0xb6, 0x18, 0x13, 0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a, 0x5f, 0xe9,
	0xa9, 0xbe, 0xe8, 0xbd, 0xbb, 0xe5, 0xb0, 0xb1, 0xe7, 0x86, 0x9f, 0x12, 0x3c, 0x0a, 0x1f, 0x50,
	0x52, 0x4f, 0x4a, 0x38, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x44, 0x45, 0x47, 0x52,
	0x45, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x45, 0x54, 0x54, 0x45, 0x52, 0x10, 0x02,
	0x1a, 0x17, 0xaa, 0xb6, 0x18, 0x13, 0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a, 0x5f, 0xe8, 0x9e, 0x8d,
	0xe4, 0xbc, 0x9a, 0xe8, 0xb4, 0xaf, 0xe9, 0x80, 0x9a, 0x12, 0x3c, 0x0a, 0x1f, 0x50, 0x52, 0x4f,
	0x4a, 0x38, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x44, 0x45, 0x47, 0x52, 0x45, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x45, 0x52, 0x54, 0x10, 0x03, 0x1a, 0x17,
	0xaa, 0xb6, 0x18, 0x13, 0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a, 0x5f, 0xe5, 0xbf, 0x83, 0xe9, 0xa2,
	0x86, 0xe7, 0xa5, 0x9e, 0xe4, 0xbc, 0x9a, 0x12, 0x39, 0x0a, 0x1c, 0x50, 0x52, 0x4f, 0x4a, 0x38,
	0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x44, 0x45, 0x47, 0x52, 0x45, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x47, 0x4f, 0x44, 0x10, 0x04, 0x1a, 0x17, 0xaa, 0xb6, 0x18, 0x13, 0xe7,
	0xbe, 0x81, 0xe7, 0xbb, 0x8a, 0x5f, 0xe7, 0x82, 0x89, 0xe7, 0x81, 0xab, 0xe7, 0xba, 0xaf, 0xe9,
	0x9d, 0x92, 0x12, 0x39, 0x0a, 0x1d, 0x50, 0x52, 0x4f, 0x4a, 0x38, 0x5f, 0x45, 0x46, 0x46, 0x45,
	0x43, 0x54, 0x5f, 0x44, 0x45, 0x47, 0x52, 0x45, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c,
	0x41, 0x53, 0x54, 0x10, 0x05, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0x9c, 0x80, 0xe5, 0xa4,
	0xa7, 0xe7, 0x86, 0x9f, 0xe7, 0xbb, 0x83, 0xe5, 0xba, 0xa6, 0xe6, 0x95, 0xb0, 0x1a, 0x08, 0x88,
	0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0x84, 0x09, 0x0a, 0x0f, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x75,
	0x6c, 0x6c, 0x10, 0x00, 0x12, 0x38, 0x0a, 0x1c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x65, 0x61, 0x72, 0x65, 0x73, 0x74, 0x45, 0x6e,
	0x65, 0x72, 0x6d, 0x79, 0x10, 0x01, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe9, 0x80, 0x89, 0xe6,
	0x8b, 0xa9, 0xe6, 0x9c, 0x80, 0xe8, 0xbf, 0x91, 0xe6, 0x95, 0x8c, 0xe4, 0xba, 0xba, 0x12, 0x38,
	0x0a, 0x1c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x48, 0x70, 0x45, 0x6e, 0x65, 0x72, 0x6d, 0x79, 0x10, 0x02,
	0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe8, 0xa1, 0x80, 0xe9, 0x87, 0x8f, 0xe6, 0x9c, 0x80, 0xe4,
	0xbd, 0x8e, 0xe6, 0x95, 0x8c, 0xe4, 0xba, 0xba, 0x12, 0x2b, 0x0a, 0x15, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x4d, 0x79, 0x73, 0x65, 0x6c,
	0x66, 0x10, 0x03, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0x87, 0xaa, 0xe8, 0xba, 0xab, 0xe9,
	0x87, 0x8a, 0xe6, 0x94, 0xbe, 0x12, 0x30, 0x0a, 0x1a, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x4d, 0x79, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x04, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0x87, 0xaa, 0xe8, 0xba,
	0xab, 0xe6, 0x9c, 0x9d, 0xe5, 0x90, 0x91, 0x12, 0x3a, 0x0a, 0x1e, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x48,
	0x70, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x10, 0x05, 0x1a, 0x16, 0xaa, 0xb6, 0x18,
	0x12, 0xe8, 0xa1, 0x80, 0xe9, 0x87, 0x8f, 0xe6, 0x9c, 0x80, 0xe4, 0xbd, 0x8e, 0xe5, 0x8f, 0x8b,
	0xe5, 0x86, 0x9b, 0x12, 0x54, 0x0a, 0x29, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x48, 0x70, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x6c, 0x79, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x6c, 0x66,
	0x10, 0x06, 0x1a, 0x25, 0xaa, 0xb6, 0x18, 0x21, 0xe8, 0xa1, 0x80, 0xe9, 0x87, 0x8f, 0xe6, 0x9c,
	0x80, 0xe4, 0xbd, 0x8e, 0xe5, 0x8f, 0x8b, 0xe5, 0x86, 0x9b, 0xe9, 0x99, 0xa4, 0xe8, 0x87, 0xaa,
	0xe5, 0xb7, 0xb1, 0xe4, 0xbb, 0xa5, 0xe5, 0xa4, 0x96, 0x12, 0x40, 0x0a, 0x21, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x4c, 0x6f, 0x77, 0x65,
	0x72, 0x48, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x65, 0x72, 0x6d, 0x79, 0x10, 0x07,
	0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe8, 0xa1, 0x80, 0xe9, 0x87, 0x8f, 0xe5, 0x80, 0xbc, 0xe6,
	0x9c, 0x80, 0xe4, 0xbd, 0x8e, 0xe6, 0x95, 0x8c, 0xe4, 0xba, 0xba, 0x12, 0x42, 0x0a, 0x23, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x4c, 0x6f,
	0x77, 0x65, 0x72, 0x48, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x6c, 0x79, 0x10, 0x08, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe8, 0xa1, 0x80, 0xe9, 0x87, 0x8f,
	0xe5, 0x80, 0xbc, 0xe6, 0x9c, 0x80, 0xe4, 0xbd, 0x8e, 0xe5, 0x8f, 0x8b, 0xe5, 0x86, 0x9b, 0x12,
	0x5c, 0x0a, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x48, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x6c,
	0x66, 0x10, 0x09, 0x1a, 0x28, 0xaa, 0xb6, 0x18, 0x24, 0xe8, 0xa1, 0x80, 0xe9, 0x87, 0x8f, 0xe5,
	0x80, 0xbc, 0xe6, 0x9c, 0x80, 0xe4, 0xbd, 0x8e, 0xe5, 0x8f, 0x8b, 0xe5, 0x86, 0x9b, 0xe9, 0x99,
	0xa4, 0xe8, 0x87, 0xaa, 0xe5, 0xb7, 0xb1, 0xe4, 0xbb, 0xa5, 0xe5, 0xa4, 0x96, 0x12, 0x30, 0x0a,
	0x1a, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x10, 0x0a, 0x1a, 0x10, 0xaa,
	0xb6, 0x18, 0x0c, 0xe9, 0x9a, 0x8f, 0xe6, 0x9c, 0xba, 0xe6, 0x95, 0x8c, 0xe4, 0xba, 0xba, 0x12,
	0x31, 0x0a, 0x1b, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x43, 0x72, 0x6f, 0x77, 0x64, 0x65, 0x64, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x10, 0x0b,
	0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0xaf, 0x86, 0xe9, 0x9b, 0x86, 0xe6, 0x95, 0x8c, 0xe4,
	0xba, 0xba, 0x12, 0x34, 0x0a, 0x1e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x72, 0x6f, 0x77, 0x64, 0x65, 0x64, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x6c, 0x79, 0x10, 0x0c, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0xaf, 0x86, 0xe9,
	0x9b, 0x86, 0xe5, 0x8f, 0x8b, 0xe5, 0x86, 0x9b, 0x12, 0x32, 0x0a, 0x1c, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x46, 0x61, 0x72, 0x74, 0x68,
	0x65, 0x73, 0x74, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x10, 0x0d, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c,
	0xe6, 0x9c, 0x80, 0xe8, 0xbf, 0x9c, 0xe6, 0x95, 0x8c, 0xe4, 0xba, 0xba, 0x12, 0x31, 0x0a, 0x1b,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x10, 0x0e, 0x1a, 0x10, 0xaa,
	0xb6, 0x18, 0x0c, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe6, 0x95, 0x8c, 0xe4, 0xba, 0xba, 0x12,
	0x3f, 0x0a, 0x1d, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x4d, 0x61, 0x78, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x65, 0x6d, 0x79,
	0x10, 0x0f, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe6, 0x80, 0xbb, 0xe6, 0x94, 0xbb, 0xe5, 0x87,
	0xbb, 0xe5, 0x8a, 0x9b, 0xe6, 0x9c, 0x80, 0xe9, 0xab, 0x98, 0xe6, 0x95, 0x8c, 0xe4, 0xba, 0xba,
	0x12, 0x34, 0x0a, 0x1e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x4e, 0x65, 0x61, 0x72, 0x65, 0x73, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x6c, 0x79, 0x10, 0x10, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x9c, 0x80, 0xe8, 0xbf, 0x91,
	0xe5, 0x8f, 0x8b, 0xe5, 0x86, 0x9b, 0x12, 0x43, 0x0a, 0x21, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74,
	0x48, 0x70, 0x52, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x10, 0x11, 0x1a, 0x1c, 0xaa,
	0xb6, 0x18, 0x18, 0xe8, 0xa1, 0x80, 0xe9, 0x87, 0x8f, 0xe6, 0xaf, 0x94, 0xe4, 0xbe, 0x8b, 0xe6,
	0x9c, 0x80, 0xe9, 0xab, 0x98, 0xe6, 0x95, 0x8c, 0xe4, 0xba, 0xba, 0x12, 0x47, 0x0a, 0x22, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x48, 0x69,
	0x67, 0x68, 0x65, 0x73, 0x74, 0x48, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x65, 0x6d,
	0x79, 0x10, 0x12, 0x1a, 0x1f, 0xaa, 0xb6, 0x18, 0x1b, 0xe8, 0xa1, 0x80, 0xe9, 0x87, 0x8f, 0xe7,
	0xbb, 0x9d, 0xe5, 0xaf, 0xb9, 0xe5, 0x80, 0xbc, 0xe6, 0x9c, 0x80, 0xe9, 0xab, 0x98, 0xe6, 0x95,
	0x8c, 0xe4, 0xba, 0xba, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xc9,
	0x01, 0x0a, 0x0f, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12,
	0x24, 0x0a, 0x08, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x10, 0x01, 0x1a, 0x16, 0xaa,
	0xb6, 0x18, 0x12, 0xe7, 0x89, 0xa9, 0xe7, 0x90, 0x86, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0xe6,
	0x95, 0x88, 0xe6, 0x9e, 0x9c, 0x12, 0x21, 0x0a, 0x05, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x10, 0x02,
	0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe9, 0xad, 0x94, 0xe6, 0xb3, 0x95, 0xe4, 0xbc, 0xa4, 0xe5,
	0xae, 0xb3, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0x12, 0x21, 0x0a, 0x05, 0x52, 0x65, 0x61, 0x6c,
	0x79, 0x10, 0x03, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe7, 0x9c, 0x9f, 0xe5, 0xae, 0x9e, 0xe4,
	0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0x12, 0x23, 0x0a, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x10, 0x04, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0x8e,
	0xa7, 0xe5, 0x88, 0xb6, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c,
	0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0x76, 0x0a, 0x0e, 0x52, 0x45,
	0x53, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x1a, 0x0a, 0x0a,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x00, 0x1a, 0x0a, 0xaa, 0xb6,
	0x18, 0x06, 0xe6, 0x95, 0xb0, 0xe5, 0x80, 0xbc, 0x12, 0x1c, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06,
	0xe6, 0xaf, 0x94, 0xe5, 0x80, 0xbc, 0x12, 0x20, 0x0a, 0x0d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x42, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x45, 0x10, 0x02, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe5,
	0x9b, 0xba, 0xe5, 0xae, 0x9a, 0xe5, 0x80, 0xbc, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9,
	0x2b, 0x01, 0x2a, 0x9a, 0x01, 0x0a, 0x1d, 0x43, 0x61, 0x70, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12,
	0x17, 0x0a, 0x13, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x48, 0x70, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x6f, 0x6c,
	0x64, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x42,
	0x75, 0x66, 0x66, 0x10, 0x03, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a,
	0xe7, 0x11, 0x0a, 0x10, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x10, 0x00, 0x12, 0x26, 0x0a, 0x10, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x97,
	0xb6, 0xe9, 0x97, 0xb4, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0x12, 0x28, 0x0a, 0x12, 0x52, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x10, 0x02, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe9, 0x9a, 0x8f, 0xe6, 0x9c, 0xba, 0xe8, 0xa7,
	0xa6, 0xe5, 0x8f, 0x91, 0x12, 0x28, 0x0a, 0x12, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x50, 0x61,
	0x73, 0x73, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x03, 0x1a, 0x10, 0xaa, 0xb6,
	0x18, 0x0c, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0x12, 0x33,
	0x0a, 0x14, 0x4c, 0x69, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe7, 0x94,
	0x9f, 0xe5, 0xad, 0x98, 0xe6, 0x9c, 0x9f, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe8, 0xa7, 0xa6,
	0xe5, 0x8f, 0x91, 0x12, 0x35, 0x0a, 0x16, 0x4c, 0x69, 0x66, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x1a,
	0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe7, 0x94, 0x9f, 0xe5, 0xad, 0x98, 0xe6, 0x9c, 0x9f, 0xe9, 0x9a,
	0x8f, 0xe6, 0x9c, 0xba, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0x12, 0x2a, 0x0a, 0x14, 0x44, 0x65,
	0x61, 0x64, 0x48, 0x75, 0x72, 0x74, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x10, 0x06, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x86, 0xb7, 0xe5, 0x8d, 0xb4,
	0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0x12, 0x37, 0x0a, 0x1b, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x65, 0x6e, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x07, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0xb0, 0xb8,
	0xe4, 0xb9, 0x85, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0x12,
	0x2a, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x73, 0x73, 0x69,
	0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x08, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8,
	0xb7, 0x9d, 0xe7, 0xa6, 0xbb, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0x12, 0x36, 0x0a, 0x1a, 0x41,
	0x74, 0x6b, 0x53, 0x70, 0x65, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73,
	0x73, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x09, 0x1a, 0x16, 0xaa, 0xb6, 0x18,
	0x12, 0xe6, 0x94, 0xbb, 0xe9, 0x80, 0x9f, 0xe6, 0x94, 0xb9, 0xe5, 0x8f, 0x98, 0xe8, 0xa7, 0xa6,
	0xe5, 0x8f, 0x91, 0x12, 0x4c, 0x0a, 0x21, 0x44, 0x69, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x54, 0x4f, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73,
	0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x0a, 0x1a, 0x25, 0xaa, 0xb6, 0x18, 0x21,
	0xe4, 0xb8, 0x8e, 0xe5, 0x8f, 0xac, 0xe5, 0x94, 0xa4, 0xe5, 0x85, 0xbd, 0xe4, 0xb9, 0x8b, 0xe9,
	0x97, 0xb4, 0xe7, 0x9a, 0x84, 0xe8, 0xb7, 0x9d, 0xe7, 0xa6, 0xbb, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f,
	0x91, 0x12, 0x52, 0x0a, 0x2a, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x44, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10,
	0x0b, 0x1a, 0x22, 0xaa, 0xb6, 0x18, 0x1e, 0xe4, 0xb8, 0x8e, 0xe5, 0x8f, 0x8b, 0xe5, 0x86, 0x9b,
	0xe4, 0xb9, 0x8b, 0xe9, 0x97, 0xb4, 0xe7, 0x9a, 0x84, 0xe8, 0xb7, 0x9d, 0xe7, 0xa6, 0xbb, 0xe8,
	0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0x12, 0x39, 0x0a, 0x17, 0x42, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x48, 0x69, 0x74, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x10, 0x0c, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe4, 0xbc,
	0xa4, 0xe5, 0xae, 0xb3, 0xe5, 0x91, 0xbd, 0xe4, 0xb8, 0xad, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91,
	0x12, 0x3e, 0x0a, 0x1c, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x45, 0x6e, 0x65, 0x72, 0x6d, 0x79, 0x53,
	0x69, 0x67, 0x68, 0x74, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x10, 0x0d, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe8, 0x84, 0xb1, 0xe7, 0xa6, 0xbb, 0xe6, 0x95,
	0x8c, 0xe6, 0x96, 0xb9, 0xe8, 0xa7, 0x86, 0xe9, 0x87, 0x8e, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91,
	0x12, 0x32, 0x0a, 0x16, 0x4e, 0x6f, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x73, 0x73, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x0e, 0x1a, 0x16, 0xaa, 0xb6,
	0x18, 0x12, 0xe5, 0x81, 0x9c, 0xe6, 0xad, 0xa2, 0xe7, 0xa7, 0xbb, 0xe5, 0x8a, 0xa8, 0xe8, 0xa7,
	0xa6, 0xe5, 0x8f, 0x91, 0x12, 0x36, 0x0a, 0x17, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10,
	0x0f, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe8, 0x83, 0xbd, 0xe9, 0x87, 0x8f, 0xe5, 0x80, 0xbc,
	0xe5, 0x8c, 0xba, 0xe9, 0x97, 0xb4, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0x12, 0x38, 0x0a, 0x1c,
	0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x10, 0x1a, 0x16,
	0xaa, 0xb6, 0x18, 0x12, 0xe8, 0xbf, 0x9e, 0xe7, 0xbb, 0xad, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3,
	0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0x12, 0x37, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x11, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe8, 0xbd, 0xac,
	0xe6, 0x8d, 0xa2, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0x12,
	0x2e, 0x0a, 0x18, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50,
	0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x12, 0x1a, 0x10, 0xaa,
	0xb6, 0x18, 0x0c, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0x12,
	0x32, 0x0a, 0x13, 0x48, 0x70, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x13, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe8, 0xa1,
	0x80, 0xe9, 0x87, 0x8f, 0xe5, 0x80, 0xbc, 0xe5, 0x8c, 0xba, 0xe9, 0x97, 0xb4, 0xe8, 0xa7, 0xa6,
	0xe5, 0x8f, 0x91, 0x12, 0x3d, 0x0a, 0x1a, 0x41, 0x64, 0x64, 0x42, 0x75, 0x66, 0x66, 0x54, 0x6f,
	0x4f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x10, 0x14, 0x1a, 0x1d, 0xaa, 0xb6, 0x18, 0x19, 0xe5, 0xaf, 0xb9, 0xe6, 0x95, 0x8c, 0xe4,
	0xba, 0xba, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a, 0xa0, 0x42, 0x55, 0x46, 0x46, 0xe8, 0xa7, 0xa6, 0xe5,
	0x8f, 0x91, 0x12, 0x38, 0x0a, 0x1c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x10, 0x15, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0x85, 0x85, 0xe8, 0x83, 0xbd,
	0xe5, 0x8c, 0xba, 0xe9, 0x97, 0xb4, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0x12, 0x4b, 0x0a, 0x26,
	0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6c, 0x64, 0x43, 0x6f,
	0x69, 0x6e, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x16, 0x1a, 0x1f, 0xaa, 0xb6, 0x18, 0x1b, 0xe9, 0x87,
	0x91, 0xe5, 0xb8, 0x81, 0xe6, 0x9c, 0x80, 0xe4, 0xbd, 0x8e, 0xe8, 0xa1, 0xa5, 0xe5, 0x81, 0xbf,
	0xe6, 0x97, 0xb6, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0x12, 0x32, 0x0a, 0x13, 0x49, 0x6e, 0x52,
	0x69, 0x76, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x10, 0x17, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe5, 0xa4, 0x84, 0xe4, 0xba, 0x8e, 0xe6, 0xb2,
	0xb3, 0xe9, 0x81, 0x93, 0xe4, 0xb8, 0xad, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0x12, 0x2e, 0x0a,
	0x15, 0x42, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x18, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe8, 0xa2,
	0xab, 0xe9, 0xa9, 0xaf, 0xe5, 0x8c, 0x96, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0x12, 0x34, 0x0a,
	0x12, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x10, 0x19, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe5, 0x9d, 0x90, 0xe9, 0xaa,
	0x91, 0xe8, 0xa1, 0x80, 0xe9, 0x87, 0x8f, 0xe5, 0x8f, 0x98, 0xe5, 0x8c, 0x96, 0xe8, 0xa7, 0xa6,
	0xe5, 0x8f, 0x91, 0x12, 0x32, 0x0a, 0x16, 0x54, 0x61, 0x6b, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x1a, 0x1a,
	0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe9, 0x80, 0xa0, 0xe6, 0x88, 0x90, 0xe4, 0xbc, 0xa4, 0xe5, 0xae,
	0xb3, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0x12, 0x39, 0x0a, 0x1a, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x55, 0x73, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x1b, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe9, 0x87, 0x8a,
	0xe6, 0x94, 0xbe, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe6, 0x97, 0xb6, 0xe8, 0xa7, 0xa6, 0xe5,
	0x8f, 0x91, 0x12, 0x38, 0x0a, 0x19, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x61, 0x6c,
	0x54, 0x61, 0x6b, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10,
	0x1c, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe9, 0x80, 0xa0, 0xe6, 0x88, 0x90, 0xe4, 0xbc, 0xa4,
	0xe5, 0xae, 0xb3, 0xe5, 0x89, 0x8d, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0x12, 0x24, 0x0a, 0x0c,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x44, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x1d, 0x1a, 0x12,
	0xaa, 0xb6, 0x18, 0x0e, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0x43, 0x44, 0xe8, 0xa7, 0xa6, 0xe5,
	0x8f, 0x91, 0x12, 0x39, 0x0a, 0x1d, 0x56, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x10, 0x1e, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0xb1, 0x9e, 0xe6, 0x80,
	0xa7, 0xe6, 0x94, 0xb9, 0xe5, 0x8f, 0x98, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0x12, 0x31, 0x0a,
	0x15, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x61, 0x64, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x1f, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe8, 0xa7,
	0x92, 0xe8, 0x89, 0xb2, 0xe6, 0xad, 0xbb, 0xe4, 0xba, 0xa1, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91,
	0x12, 0x2a, 0x0a, 0x14, 0x48, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73,
	0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x20, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c,
	0xe8, 0xa1, 0x80, 0xe9, 0x87, 0x8f, 0xe5, 0x8f, 0x98, 0xe5, 0x8c, 0x96, 0x12, 0x36, 0x0a, 0x1a,
	0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x4d, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x21, 0x1a, 0x16, 0xaa, 0xb6,
	0x18, 0x12, 0xe6, 0x99, 0xae, 0xe6, 0x94, 0xbb, 0xe5, 0x9b, 0x9e, 0xe8, 0x93, 0x9d, 0xe8, 0xa7,
	0xa6, 0xe5, 0x8f, 0x91, 0x12, 0x31, 0x0a, 0x15, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x72,
	0x62, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x22, 0x1a,
	0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0xe6, 0xb3, 0x95, 0xe7, 0x90,
	0x83, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0x12, 0x2f, 0x0a, 0x13, 0x48, 0x75, 0x72, 0x74, 0x4f,
	0x72, 0x62, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x23,
	0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0x8f, 0x97, 0xe5, 0x87, 0xbb, 0xe6, 0xb3, 0x95, 0xe7,
	0x90, 0x83, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0x12, 0x31, 0x0a, 0x15, 0x44, 0x6f, 0x64, 0x67,
	0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x10, 0x24, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe9, 0x97, 0xaa, 0xe9, 0x81, 0xbf, 0xe6,
	0x99, 0xae, 0xe6, 0x94, 0xbb, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0x12, 0x37, 0x0a, 0x15, 0x48,
	0x75, 0x72, 0x74, 0x4f, 0x72, 0x62, 0x48, 0x50, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x10, 0x25, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe5, 0x8f, 0x97, 0xe5,
	0x87, 0xbb, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0xe8, 0xa1, 0x80, 0xe9, 0x87, 0x8f, 0xe8, 0xa7,
	0xa6, 0xe5, 0x8f, 0x91, 0x12, 0x3b, 0x0a, 0x19, 0x48, 0x75, 0x72, 0x74, 0x4f, 0x72, 0x62, 0x52,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x10, 0x26, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe5, 0x8f, 0x97, 0xe5, 0x88, 0xb0, 0xe4,
	0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0xe9, 0x9a, 0x8f, 0xe6, 0x9c, 0xba, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f,
	0x91, 0x12, 0x47, 0x0a, 0x25, 0x48, 0x65, 0x72, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6d, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x27, 0x1a, 0x1c, 0xaa, 0xb6,
	0x18, 0x18, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe5, 0xb8, 0x83, 0xe9, 0x98, 0xb5, 0xe4, 0xbd,
	0x8d, 0xe7, 0xbd, 0xae, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0x12, 0x43, 0x0a, 0x1b, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x47, 0x72, 0x69, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73,
	0x73, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x28, 0x1a, 0x22, 0xaa, 0xb6, 0x18,
	0x1e, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0xe6, 0x89, 0x80, 0xe5, 0x9c, 0xa8, 0xe6, 0xa0, 0xbc,
	0xe4, 0xbd, 0x8d, 0xe6, 0x94, 0xb9, 0xe5, 0x8f, 0x98, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0x1a,
	0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xea, 0x12, 0x0a, 0x14, 0x50, 0x61,
	0x73, 0x73, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x10, 0x00, 0x12, 0x31, 0x0a, 0x18, 0x4e, 0x6f, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x01, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe6, 0x9c, 0xaa, 0xe5, 0x8f, 0x97, 0xe5, 0x88,
	0xb0, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0x12, 0x2c, 0x0a, 0x16, 0x44, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x02, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x8f, 0x97, 0xe5, 0x88, 0xb0, 0xe4,
	0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0x12, 0x2b, 0x0a, 0x18, 0x42, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x65,
	0x64, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x03, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe8, 0xa2, 0xab, 0xe6, 0x9d, 0x80, 0xe6,
	0xad, 0xbb, 0x12, 0x2c, 0x0a, 0x16, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x50, 0x61, 0x73, 0x73,
	0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x04, 0x1a, 0x10,
	0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x87, 0xbb, 0xe6, 0x9d, 0x80, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6,
	0x12, 0x28, 0x0a, 0x12, 0x48, 0x70, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x05, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0xa1,
	0x80, 0xe9, 0x87, 0x8f, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x12, 0x36, 0x0a, 0x1a, 0x45, 0x78,
	0x69, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x06, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12,
	0xe8, 0x84, 0xb1, 0xe7, 0xa6, 0xbb, 0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97, 0xe6, 0x9d, 0xa1, 0xe4,
	0xbb, 0xb6, 0x12, 0x2c, 0x0a, 0x16, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x07, 0x1a, 0x10,
	0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x8a, 0xa9, 0xe6, 0x94, 0xbb, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6,
	0x12, 0x29, 0x0a, 0x13, 0x46, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x08, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5,
	0xbc, 0x80, 0xe6, 0x88, 0x98, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x12, 0x2a, 0x0a, 0x14, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x09, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0xa4, 0x8d, 0xe6, 0xb4,
	0xbb, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x12, 0x28, 0x0a, 0x12, 0x41, 0x63, 0x74, 0x6f, 0x72,
	0x43, 0x72, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0a, 0x1a,
	0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x9a, 0xb4, 0xe5, 0x87, 0xbb, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb,
	0xb6, 0x12, 0x2b, 0x0a, 0x15, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0b, 0x1a, 0x10, 0xaa, 0xb6,
	0x18, 0x0c, 0xe5, 0x8d, 0x87, 0xe7, 0xba, 0xa7, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x12, 0x2d,
	0x0a, 0x11, 0x55, 0x73, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x0c, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe4, 0xbd, 0xbf, 0xe7, 0x94,
	0xa8, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x12, 0x39, 0x0a,
	0x17, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x65, 0x44, 0x65, 0x61, 0x64, 0x48, 0x75, 0x72, 0x74, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0d, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18,
	0xe5, 0x85, 0x8d, 0xe7, 0x96, 0xab, 0xe8, 0x87, 0xb4, 0xe5, 0x91, 0xbd, 0xe4, 0xbc, 0xa4, 0xe5,
	0xae, 0xb3, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x12, 0x2e, 0x0a, 0x12, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x4d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0e,
	0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe7, 0xa7, 0xbb, 0xe5,
	0x8a, 0xa8, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x12, 0x37, 0x0a, 0x1b, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0f, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe8,
	0xbf, 0x9b, 0xe5, 0x85, 0xa5, 0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb,
	0xb6, 0x12, 0x36, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x75, 0x66, 0x66, 0x50,
	0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x10, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe7, 0xa7, 0xbb, 0xe9, 0x99, 0xa4, 0xe6, 0x95, 0x88,
	0xe6, 0x9e, 0x9c, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x12, 0x34, 0x0a, 0x15, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x49, 0x6e, 0x47, 0x72, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0x11, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe5, 0xa4, 0x84, 0xe4, 0xba, 0x8e,
	0xe8, 0x8d, 0x89, 0xe4, 0xb8, 0x9b, 0xe4, 0xb8, 0xad, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x12,
	0x25, 0x0a, 0x0f, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0x12, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x9a, 0xb4, 0xe9, 0x9c, 0xb2,
	0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x12, 0x28, 0x0a, 0x12, 0x45, 0x70, 0x50, 0x61, 0x73, 0x73,
	0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x13, 0x1a, 0x10,
	0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0x83, 0xbd, 0xe9, 0x87, 0x8f, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6,
	0x12, 0x3b, 0x0a, 0x19, 0x48, 0x75, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73,
	0x73, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x14, 0x1a,
	0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe5, 0x8f, 0x97, 0xe5, 0x88, 0xb0, 0xe4, 0xbc, 0xa4, 0xe5, 0xae,
	0xb3, 0xe5, 0x8c, 0xba, 0xe9, 0x97, 0xb4, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x12, 0x38, 0x0a,
	0x1c, 0x4e, 0x65, 0x61, 0x72, 0x4f, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x50, 0x61, 0x73,
	0x73, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x15, 0x1a,
	0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe9, 0x9d, 0xa0, 0xe8, 0xbf, 0x91, 0xe9, 0x98, 0xbb, 0xe6, 0x8c,
	0xa1, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x12, 0x2d, 0x0a, 0x17, 0x52, 0x65, 0x6e, 0x65, 0x77,
	0x61, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0x16, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe9, 0x87, 0x8d, 0xe7, 0x94, 0x9f,
	0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x12, 0x30, 0x0a, 0x1a, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x41,
	0x6c, 0x69, 0x76, 0x65, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x17, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0xad, 0x98, 0xe6,
	0xb4, 0xbb, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x12, 0x2c, 0x0a, 0x18, 0x48, 0x6f, 0x6c, 0x64,
	0x42, 0x75, 0x66, 0x66, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x18, 0x1a, 0x0e, 0xaa, 0xb6, 0x18, 0x0a, 0x42, 0x75, 0x66, 0x66,
	0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x12, 0x3b, 0x0a, 0x19, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x4d, 0x6f, 0x64, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x19, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe8, 0xa1, 0x8c, 0xe4, 0xb8,
	0xba, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe5, 0x88, 0x87, 0xe6, 0x8d, 0xa2, 0xe6, 0x9d, 0xa1,
	0xe4, 0xbb, 0xb6, 0x12, 0x4a, 0x0a, 0x1c, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69,
	0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x1a, 0x1a, 0x28, 0xaa, 0xb6, 0x18, 0x24, 0xe6, 0x80, 0xaa, 0xe7, 0x89,
	0xa9, 0xe7, 0x94, 0x9f, 0xe5, 0xad, 0x98, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0xad, 0xa3,
	0xe5, 0xb8, 0xb8, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x12,
	0x28, 0x0a, 0x12, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x1b, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0xad, 0xbb,
	0xe4, 0xba, 0xa1, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x12, 0x31, 0x0a, 0x15, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0x1c, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd,
	0xe5, 0x8d, 0x87, 0xe7, 0xba, 0xa7, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x12, 0x37, 0x0a, 0x17,
	0x41, 0x64, 0x64, 0x42, 0x75, 0x66, 0x66, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x1d, 0x1a, 0x1a, 0xaa, 0xb6, 0x18, 0x16, 0xe6,
	0xb7, 0xbb, 0xe5, 0x8a, 0xa0, 0x62, 0x75, 0x66, 0x66, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0xe6,
	0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x12, 0x39, 0x0a, 0x1d, 0x43, 0x61, 0x70, 0x74, 0x61, 0x69, 0x6e,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x1e, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe4, 0xb8,
	0xbb, 0xe6, 0x8e, 0xa7, 0xe8, 0xbd, 0xac, 0xe6, 0x8d, 0xa2, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6,
	0x12, 0x34, 0x0a, 0x15, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4d, 0x6f, 0x76, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x1f, 0x1a, 0x19, 0xaa, 0xb6, 0x18,
	0x15, 0xe9, 0x9d, 0x9e, 0xe6, 0xad, 0xa3, 0xe5, 0xb8, 0xb8, 0xe7, 0xa7, 0xbb, 0xe5, 0x8a, 0xa8,
	0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x12, 0x32, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x20, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0x8a, 0xa4, 0xe7, 0x9b, 0xbe, 0xe4, 0xbc,
	0xa4, 0xe5, 0xae, 0xb3, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x12, 0x34, 0x0a, 0x15, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x49, 0x6e, 0x52, 0x69, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x21, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe5, 0xa4, 0x84, 0xe4, 0xba,
	0x8e, 0xe6, 0xb2, 0xb3, 0xe9, 0x81, 0x93, 0xe4, 0xb8, 0xad, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6,
	0x12, 0x3e, 0x0a, 0x1c, 0x48, 0x70, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x22, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe8, 0xa1, 0x80, 0xe9, 0x87, 0x8f, 0xe5, 0x8c,
	0xba, 0xe9, 0x97, 0xb4, 0xe6, 0x94, 0xb9, 0xe5, 0x8f, 0x98, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6,
	0x12, 0x4b, 0x0a, 0x21, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x38, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x23, 0x1a, 0x24, 0xaa, 0xb6, 0x18, 0x20, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x38, 0xe5, 0x85, 0xb3, 0xe5, 0x8d, 0xa1, 0xe7, 0x8a, 0xb6, 0xe6, 0x80,
	0x81, 0xe6, 0x94, 0xb9, 0xe5, 0x8f, 0x98, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x12, 0x34, 0x0a,
	0x18, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x48, 0x69, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x24, 0x1a, 0x16, 0xaa, 0xb6, 0x18,
	0x12, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe5, 0x91, 0xbd, 0xe4, 0xb8, 0xad, 0xe6, 0x9d, 0xa1,
	0xe4, 0xbb, 0xb6, 0x12, 0x3b, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x38, 0x46,
	0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x25, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3,
	0x8b, 0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97, 0xe4, 0xb8, 0xad, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6,
	0x12, 0x36, 0x0a, 0x1a, 0x54, 0x61, 0x6b, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x26,
	0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe9, 0x80, 0xa0, 0xe6, 0x88, 0x90, 0xe4, 0xbc, 0xa4, 0xe5,
	0xae, 0xb3, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x12, 0x35, 0x0a, 0x19, 0x41, 0x63, 0x63, 0x75,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x28, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe7, 0xb4, 0xaf,
	0xe7, 0xa7, 0xaf, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x12,
	0x30, 0x0a, 0x1a, 0x42, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x50, 0x61, 0x73,
	0x73, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x29, 0x1a,
	0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x8f, 0x97, 0xe5, 0x88, 0xb0, 0xe6, 0x94, 0xbb, 0xe5, 0x87,
	0xbb, 0x12, 0x32, 0x0a, 0x19, 0x4e, 0x65, 0x77, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x2a,
	0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe6, 0x96, 0xb0, 0xe5, 0x8f, 0x97, 0xe5, 0x88, 0xb0, 0xe4,
	0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0x12, 0x33, 0x0a, 0x1d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x2b, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe4, 0xbd,
	0x8d, 0xe7, 0xbd, 0xae, 0xe5, 0x8f, 0x98, 0xe5, 0x8c, 0x96, 0x12, 0x3e, 0x0a, 0x22, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x2c, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0x94, 0xbb, 0xe5, 0x87, 0xbb, 0xe7, 0x9b,
	0xae, 0xe6, 0xa0, 0x87, 0xe5, 0x8f, 0x98, 0xe5, 0x8c, 0x96, 0x12, 0x50, 0x0a, 0x28, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x61, 0x63, 0x65, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x2d, 0x1a, 0x22, 0xaa, 0xb6, 0x18, 0x1e, 0xe6, 0x88,
	0x98, 0xe6, 0x96, 0x97, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0xe6, 0xad, 0xa3, 0xe8, 0xb5, 0x9b, 0xe9, 0x98, 0xb6, 0xe6, 0xae, 0xb5, 0x1a, 0x08, 0x88, 0xf9,
	0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xa7, 0x03, 0x0a, 0x26, 0x52, 0x65, 0x73, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x54, 0x79, 0x70, 0x65, 0x41, 0x64, 0x64, 0x48, 0x50,
	0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x32, 0x0a, 0x2e, 0x52, 0x65, 0x73, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x46, 0x75, 0x6e,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x41, 0x64, 0x64, 0x48, 0x50, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e,
	0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x4d, 0x0a, 0x2b, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x46,
	0x55, 0x4e, 0x43, 0x54, 0x59, 0x50, 0x45, 0x41, 0x44, 0x44, 0x48, 0x50, 0x5f, 0x45, 0x46, 0x46,
	0x45, 0x43, 0x54, 0x5f, 0x4d, 0x41, 0x58, 0x48, 0x50, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e,
	0x54, 0x41, 0x47, 0x45, 0x10, 0x01, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe6, 0x9c, 0x80, 0xe5,
	0xa4, 0xa7, 0xe7, 0x94, 0x9f, 0xe5, 0x91, 0xbd, 0xe5, 0x80, 0xbc, 0xe7, 0x99, 0xbe, 0xe5, 0x88,
	0x86, 0xe6, 0xaf, 0x94, 0x12, 0x51, 0x0a, 0x2c, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x46, 0x55,
	0x4e, 0x43, 0x54, 0x59, 0x50, 0x45, 0x41, 0x44, 0x44, 0x48, 0x50, 0x5f, 0x45, 0x46, 0x46, 0x45,
	0x43, 0x54, 0x5f, 0x4c, 0x4f, 0x53, 0x54, 0x48, 0x50, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e,
	0x54, 0x41, 0x47, 0x45, 0x10, 0x02, 0x1a, 0x1f, 0xaa, 0xb6, 0x18, 0x1b, 0xe5, 0xb7, 0xb2, 0xe6,
	0x8d, 0x9f, 0xe5, 0xa4, 0xb1, 0xe7, 0x94, 0x9f, 0xe5, 0x91, 0xbd, 0xe5, 0x80, 0xbc, 0xe7, 0x99,
	0xbe, 0xe5, 0x88, 0x86, 0xe6, 0xaf, 0x94, 0x12, 0x51, 0x0a, 0x2f, 0x53, 0x4b, 0x49, 0x4c, 0x4c,
	0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x59, 0x50, 0x45, 0x41, 0x44, 0x44, 0x48, 0x50, 0x5f, 0x45,
	0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x48, 0x50, 0x5f,
	0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x41, 0x47, 0x45, 0x10, 0x03, 0x1a, 0x1c, 0xaa, 0xb6,
	0x18, 0x18, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe7, 0x94, 0x9f, 0xe5, 0x91, 0xbd, 0xe5, 0x80,
	0xbc, 0xe7, 0x99, 0xbe, 0xe5, 0x88, 0x86, 0xe6, 0xaf, 0x94, 0x12, 0x4a, 0x0a, 0x28, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x59, 0x50, 0x45, 0x41, 0x44, 0x44, 0x48,
	0x50, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x41, 0x58, 0x48, 0x50, 0x5f, 0x4d,
	0x49, 0x4c, 0x4c, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe6, 0x9c,
	0x80, 0xe5, 0xa4, 0xa7, 0xe7, 0x94, 0x9f, 0xe5, 0x91, 0xbd, 0xe5, 0x80, 0xbc, 0xe4, 0xb8, 0x87,
	0xe5, 0x88, 0x86, 0xe6, 0xaf, 0x94, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01,
	0x2a, 0xb6, 0x01, 0x0a, 0x20, 0x52, 0x65, 0x73, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x6d,
	0x62, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x43,
	0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x31, 0x0a, 0x1e, 0x53, 0x4b, 0x49,
	0x4c, 0x4c, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x41, 0x52, 0x44, 0x10, 0x01, 0x1a, 0x0d, 0xaa,
	0xb6, 0x18, 0x09, 0xe7, 0xa1, 0xac, 0xe6, 0x8e, 0xa7, 0xe5, 0x88, 0xb6, 0x12, 0x31, 0x0a, 0x1e,
	0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x46, 0x54, 0x10, 0x02,
	0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe8, 0xbd, 0xaf, 0xe6, 0x8e, 0xa7, 0xe5, 0x88, 0xb6, 0x1a,
	0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xd8, 0x01, 0x0a, 0x1a, 0x52, 0x45,
	0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x4f, 0x56, 0x45, 0x52,
	0x4c, 0x41, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x45, 0x53, 0x5f,
	0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x41,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00,
	0x12, 0x42, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e,
	0x43, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x41, 0x59, 0x5f, 0x43, 0x41, 0x4d, 0x50, 0x10, 0x01,
	0x1a, 0x22, 0xaa, 0xb6, 0x18, 0x1e, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe6, 0x95, 0x88, 0xe6,
	0x9e, 0x9c, 0xe5, 0x8f, 0xa0, 0xe5, 0x8a, 0xa0, 0xe5, 0x8c, 0xba, 0xe5, 0x88, 0x86, 0xe9, 0x98,
	0xb5, 0xe8, 0x90, 0xa5, 0x12, 0x44, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c,
	0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x41, 0x59, 0x5f, 0x50, 0x45,
	0x52, 0x53, 0x4f, 0x4e, 0x10, 0x02, 0x1a, 0x22, 0xaa, 0xb6, 0x18, 0x1e, 0xe6, 0x8a, 0x80, 0xe8,
	0x83, 0xbd, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0xe5, 0x8f, 0xa0, 0xe5, 0x8a, 0xa0, 0xe5, 0x8c,
	0xba, 0xe5, 0x88, 0x86, 0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0xba, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01,
	0x90, 0xf9, 0x2b, 0x01, 0x2a, 0x9f, 0x05, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49,
	0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x41, 0x59, 0x5f, 0x52,
	0x55, 0x4c, 0x45, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c,
	0x46, 0x55, 0x4e, 0x43, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x41, 0x59, 0x5f, 0x52, 0x55, 0x4c,
	0x45, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x3e, 0x0a, 0x1c, 0x52,
	0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x4f, 0x56, 0x45,
	0x52, 0x4c, 0x41, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x10, 0x01, 0x1a, 0x1c, 0xaa,
	0xb6, 0x18, 0x18, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0xe5,
	0x8f, 0xa0, 0xe5, 0x8a, 0xa0, 0xe7, 0xa6, 0x81, 0xe6, 0xad, 0xa2, 0x12, 0x3d, 0x0a, 0x1b, 0x52,
	0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x4f, 0x56, 0x45,
	0x52, 0x4c, 0x41, 0x59, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x10, 0x02, 0x1a, 0x1c, 0xaa, 0xb6,
	0x18, 0x18, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0xe5, 0x8f,
	0xa0, 0xe5, 0x8a, 0xa0, 0xe6, 0xb8, 0x85, 0xe9, 0x99, 0xa4, 0x12, 0x3f, 0x0a, 0x1d, 0x52, 0x45,
	0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x4f, 0x56, 0x45, 0x52,
	0x4c, 0x41, 0x59, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x03, 0x1a, 0x1c, 0xaa,
	0xb6, 0x18, 0x18, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0xe5,
	0x8f, 0xa0, 0xe5, 0x8a, 0xa0, 0xe6, 0x9b, 0xbf, 0xe6, 0x8d, 0xa2, 0x12, 0x3e, 0x0a, 0x1c, 0x52,
	0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x4f, 0x56, 0x45,
	0x52, 0x4c, 0x41, 0x59, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x04, 0x1a, 0x1c, 0xaa,
	0xb6, 0x18, 0x18, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0xe5,
	0x8f, 0xa0, 0xe5, 0x8a, 0xa0, 0xe5, 0x88, 0xb7, 0xe6, 0x96, 0xb0, 0x12, 0x3c, 0x0a, 0x1a, 0x52,
	0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x4f, 0x56, 0x45,
	0x52, 0x4c, 0x41, 0x59, 0x5f, 0x46, 0x41, 0x44, 0x45, 0x10, 0x05, 0x1a, 0x1c, 0xaa, 0xb6, 0x18,
	0x18, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0xe5, 0x8f, 0xa0,
	0xe5, 0x8a, 0xa0, 0xe8, 0xa1, 0xb0, 0xe5, 0x87, 0x8f, 0x12, 0x3e, 0x0a, 0x1c, 0x52, 0x45, 0x53,
	0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x4c,
	0x41, 0x59, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x10, 0x06, 0x1a, 0x1c, 0xaa, 0xb6, 0x18,
	0x18, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0xe5, 0x8f, 0xa0,
	0xe5, 0x8a, 0xa0, 0xe5, 0xbb, 0xb6, 0xe9, 0x95, 0xbf, 0x12, 0x3d, 0x0a, 0x1b, 0x52, 0x45, 0x53,
	0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x4c,
	0x41, 0x59, 0x5f, 0x44, 0x45, 0x56, 0x41, 0x4c, 0x10, 0x07, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18,
	0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0xe5, 0x8f, 0xa0, 0xe5,
	0x8a, 0xa0, 0xe5, 0x87, 0x8f, 0xe7, 0x9b, 0x8a, 0x12, 0x4d, 0x0a, 0x24, 0x52, 0x45, 0x53, 0x5f,
	0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x41,
	0x59, 0x5f, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x57, 0x42, 0x55, 0x46, 0x46,
	0x10, 0x08, 0x1a, 0x23, 0xaa, 0xb6, 0x18, 0x1f, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe6, 0x95,
	0x88, 0xe6, 0x9e, 0x9c, 0xe5, 0x8f, 0xa0, 0xe5, 0x8a, 0xa0, 0xe7, 0xa6, 0x81, 0xe6, 0xad, 0xa2,
	0xe6, 0x96, 0xb0, 0x42, 0x55, 0x46, 0x46, 0x12, 0x43, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x5f, 0x53,
	0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x41, 0x59,
	0x5f, 0x49, 0x4e, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x54, 0x10, 0x09, 0x1a, 0x1c,
	0xaa, 0xb6, 0x18, 0x18, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c,
	0xe5, 0x8f, 0xa0, 0xe5, 0x8a, 0xa0, 0xe7, 0x8b, 0xac, 0xe7, 0xab, 0x8b, 0x1a, 0x08, 0x88, 0xf9,
	0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xad, 0x03, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x5f, 0x53,
	0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x52,
	0x55, 0x4c, 0x45, 0x12, 0x3d, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c,
	0x46, 0x55, 0x4e, 0x43, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55,
	0x4c, 0x54, 0x10, 0x00, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd,
	0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0xb8, 0x85, 0xe9,
	0x99, 0xa4, 0x12, 0x3c, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46,
	0x55, 0x4e, 0x43, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45,
	0x10, 0x01, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe6, 0x95,
	0x88, 0xe6, 0x9e, 0x9c, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0xe6, 0xb8, 0x85, 0xe9, 0x99, 0xa4,
	0x12, 0x3a, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e,
	0x43, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x44, 0x45, 0x41, 0x44, 0x10, 0x02, 0x1a, 0x1c,
	0xaa, 0xb6, 0x18, 0x18, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c,
	0xe6, 0xad, 0xbb, 0xe4, 0xba, 0xa1, 0xe7, 0xbc, 0x93, 0xe5, 0xad, 0x98, 0x12, 0x3d, 0x0a, 0x1b,
	0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x43, 0x4c,
	0x45, 0x41, 0x52, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x10, 0x03, 0x1a, 0x1c, 0xaa,
	0xb6, 0x18, 0x18, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0xe7,
	0x89, 0xb9, 0xe6, 0xae, 0x8a, 0xe6, 0xb8, 0x85, 0xe9, 0x99, 0xa4, 0x12, 0x3c, 0x0a, 0x1a, 0x52,
	0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x43, 0x4c, 0x45,
	0x41, 0x52, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x10, 0x04, 0x1a, 0x1c, 0xaa, 0xb6, 0x18,
	0x18, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0xe4, 0xbd, 0x9c,
	0xe7, 0x94, 0xa8, 0xe6, 0xb8, 0x85, 0xe9, 0x99, 0xa4, 0x12, 0x51, 0x0a, 0x26, 0x52, 0x45, 0x53,
	0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52,
	0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x52, 0x45, 0x56,
	0x49, 0x56, 0x45, 0x10, 0x05, 0x1a, 0x25, 0xaa, 0xb6, 0x18, 0x21, 0xe6, 0x8a, 0x80, 0xe8, 0x83,
	0xbd, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0xe9, 0x9d, 0x9e, 0xe7, 0xab, 0x8b, 0xe5, 0x8d, 0xb3,
	0xe5, 0xa4, 0x8d, 0xe6, 0xb4, 0xbb, 0xe6, 0xb8, 0x85, 0xe9, 0x99, 0xa4, 0x1a, 0x08, 0x88, 0xf9,
	0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0x97, 0x05, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x5f, 0x53,
	0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49,
	0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x3a, 0x0a,
	0x1e, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x5f, 0x50, 0x48, 0x59, 0x53, 0x48, 0x55, 0x52, 0x54, 0x10,
	0x01, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0x90, 0xb8, 0xe6, 0x94, 0xb6, 0xe7, 0x89, 0xa9,
	0xe7, 0x90, 0x86, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0x12, 0x3b, 0x0a, 0x1f, 0x52, 0x45, 0x53,
	0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45,
	0x43, 0x54, 0x5f, 0x4d, 0x41, 0x47, 0x49, 0x43, 0x48, 0x55, 0x52, 0x54, 0x10, 0x02, 0x1a, 0x16,
	0xaa, 0xb6, 0x18, 0x12, 0xe5, 0x90, 0xb8, 0xe6, 0x94, 0xb6, 0xe9, 0xad, 0x94, 0xe6, 0xb3, 0x95,
	0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0x12, 0x2f, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x5f,
	0x41, 0x4c, 0x4c, 0x10, 0x03, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x90, 0xb8, 0xe6, 0x94,
	0xb6, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0x12, 0x46, 0x0a, 0x2a, 0x52, 0x45, 0x53, 0x5f, 0x53,
	0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54,
	0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x41,
	0x4c, 0x48, 0x55, 0x52, 0x54, 0x10, 0x04, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0x90, 0xb8,
	0xe6, 0x94, 0xb6, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0x12,
	0x36, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x54,
	0x10, 0x05, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0xe8, 0xbd,
	0xac, 0xe6, 0x8d, 0xa2, 0xe7, 0x9b, 0xbe, 0x12, 0x35, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x5f, 0x53,
	0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54,
	0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x10, 0x06, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe6,
	0x95, 0x88, 0xe6, 0x9e, 0x9c, 0xe6, 0x8a, 0xb5, 0xe6, 0x8c, 0xa1, 0xe7, 0x9b, 0xbe, 0x12, 0x31,
	0x0a, 0x1e, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59,
	0x10, 0x07, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe5, 0xb1, 0x9e, 0xe6, 0x80, 0xa7, 0xe7, 0x9b,
	0xbe, 0x12, 0x2f, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55,
	0x4e, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x5f, 0x45, 0x4e, 0x45, 0x52, 0x47,
	0x59, 0x10, 0x08, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe8, 0x83, 0xbd, 0xe9, 0x87, 0x8f, 0xe7,
	0x9b, 0xbe, 0x12, 0x2f, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46,
	0x55, 0x4e, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x52,
	0x47, 0x45, 0x10, 0x09, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe8, 0x93, 0x84, 0xe5, 0x8a, 0x9b,
	0xe7, 0x9b, 0xbe, 0x12, 0x51, 0x0a, 0x32, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c,
	0x46, 0x55, 0x4e, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x5f, 0x4f, 0x56, 0x45,
	0x52, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x48, 0x45, 0x4d, 0x4f, 0x50, 0x48, 0x41, 0x47, 0x49,
	0x41, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x54, 0x10, 0x0a, 0x1a, 0x19, 0xaa, 0xb6, 0x18,
	0x15, 0xe5, 0x90, 0xb8, 0xe8, 0xa1, 0x80, 0xe6, 0xba, 0xa2, 0xe5, 0x87, 0xba, 0xe8, 0xbd, 0xac,
	0xe6, 0x8d, 0xa2, 0xe7, 0x9b, 0xbe, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01,
	0x2a, 0xed, 0x5c, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55,
	0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x24, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x5f, 0x53,
	0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x55,
	0x4c, 0x4c, 0x10, 0x00, 0x1a, 0x07, 0xaa, 0xb6, 0x18, 0x03, 0xe6, 0x97, 0xa0, 0x12, 0x31, 0x0a,
	0x1b, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x48, 0x59, 0x53, 0x48, 0x55, 0x52, 0x54, 0x10, 0x01, 0x1a, 0x10,
	0xaa, 0xb6, 0x18, 0x0c, 0xe7, 0x89, 0xa9, 0xe7, 0x90, 0x86, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3,
	0x12, 0x32, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e,
	0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x47, 0x49, 0x43, 0x48, 0x55, 0x52, 0x54,
	0x10, 0x02, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0xb3, 0x95, 0xe6, 0x9c, 0xaf, 0xe4, 0xbc,
	0xa4, 0xe5, 0xae, 0xb3, 0x12, 0x31, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c,
	0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x48,
	0x55, 0x52, 0x54, 0x10, 0x03, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe7, 0x9c, 0x9f, 0xe5, 0xae,
	0x9e, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0x12, 0x31, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x5f, 0x53,
	0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44,
	0x44, 0x48, 0x50, 0x10, 0x04, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe5, 0x9b, 0x9e, 0xe5, 0xa4,
	0x8d, 0xe7, 0x94, 0x9f, 0xe5, 0x91, 0xbd, 0xe5, 0x80, 0xbc, 0x12, 0x38, 0x0a, 0x1c, 0x52, 0x45,
	0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x44, 0x44, 0x41, 0x54, 0x4b, 0x53, 0x50, 0x44, 0x10, 0x05, 0x1a, 0x16, 0xaa, 0xb6,
	0x18, 0x12, 0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0, 0xe6, 0x94, 0xbb, 0xe5, 0x87, 0xbb, 0xe9, 0x80,
	0x9f, 0xe5, 0xba, 0xa6, 0x12, 0x38, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c,
	0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x54,
	0x4b, 0x53, 0x50, 0x44, 0x10, 0x06, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0x87, 0x8f, 0xe5,
	0xb0, 0x91, 0xe6, 0x94, 0xbb, 0xe5, 0x87, 0xbb, 0xe9, 0x80, 0x9f, 0xe5, 0xba, 0xa6, 0x12, 0x39,
	0x0a, 0x1d, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x4d, 0x4f, 0x56, 0x45, 0x53, 0x50, 0x44, 0x10,
	0x07, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0, 0xe7, 0xa7, 0xbb,
	0xe5, 0x8a, 0xa8, 0xe9, 0x80, 0x9f, 0xe5, 0xba, 0xa6, 0x12, 0x39, 0x0a, 0x1d, 0x52, 0x45, 0x53,
	0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x45, 0x4c, 0x4d, 0x4f, 0x56, 0x45, 0x53, 0x50, 0x44, 0x10, 0x08, 0x1a, 0x16, 0xaa, 0xb6,
	0x18, 0x12, 0xe5, 0x87, 0x8f, 0xe5, 0xb0, 0x91, 0xe7, 0xa7, 0xbb, 0xe5, 0x8a, 0xa8, 0xe9, 0x80,
	0x9f, 0xe5, 0xba, 0xa6, 0x12, 0x32, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c,
	0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x41, 0x54,
	0x4b, 0x10, 0x09, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe6, 0x8f, 0x90, 0xe9, 0xab, 0x98, 0xe6,
	0x94, 0xbb, 0xe5, 0x87, 0xbb, 0xe5, 0x8a, 0x9b, 0x12, 0x32, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x5f,
	0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44,
	0x45, 0x43, 0x41, 0x54, 0x4b, 0x10, 0x0a, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe9, 0x99, 0x8d,
	0xe4, 0xbd, 0x8e, 0xe6, 0x94, 0xbb, 0xe5, 0x87, 0xbb, 0xe5, 0x8a, 0x9b, 0x12, 0x2c, 0x0a, 0x1c,
	0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x4b, 0x42, 0x4c, 0x4f, 0x4f, 0x44, 0x10, 0x0b, 0x1a, 0x0a,
	0xaa, 0xb6, 0x18, 0x06, 0xe5, 0x90, 0xb8, 0xe8, 0xa1, 0x80, 0x12, 0x32, 0x0a, 0x1c, 0x52, 0x45,
	0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x4e, 0x43, 0x44, 0x45, 0x46, 0x45, 0x4e, 0x44, 0x10, 0x0c, 0x1a, 0x10, 0xaa, 0xb6,
	0x18, 0x0c, 0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0, 0xe6, 0x8a, 0xa4, 0xe7, 0x94, 0xb2, 0x12, 0x32,
	0x0a, 0x1c, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x44, 0x45, 0x46, 0x45, 0x4e, 0x44, 0x10, 0x0d,
	0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x87, 0x8f, 0xe5, 0xb0, 0x91, 0xe6, 0x8a, 0xa4, 0xe7,
	0x94, 0xb2, 0x12, 0x32, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46,
	0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x53, 0x49,
	0x53, 0x54, 0x10, 0x0e, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0,
	0xe6, 0x8a, 0x97, 0xe6, 0x80, 0xa7, 0x12, 0x32, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x43,
	0x52, 0x45, 0x53, 0x49, 0x53, 0x54, 0x10, 0x0f, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x87,
	0x8f, 0xe5, 0xb0, 0x91, 0xe6, 0x8a, 0x97, 0xe6, 0x80, 0xa7, 0x12, 0x35, 0x0a, 0x1d, 0x52, 0x45,
	0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x45, 0x43, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x43, 0x44, 0x10, 0x11, 0x1a, 0x12, 0xaa,
	0xb6, 0x18, 0x0e, 0xe5, 0x87, 0x8f, 0xe5, 0xb0, 0x91, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0x43,
	0x44, 0x12, 0x34, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55,
	0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x41, 0x50, 0x10, 0x12, 0x1a,
	0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0, 0xe6, 0xb3, 0x95, 0xe6, 0x9c,
	0xaf, 0xe5, 0xbc, 0xba, 0xe5, 0xba, 0xa6, 0x12, 0x34, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x5f, 0x53,
	0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45,
	0x43, 0x41, 0x50, 0x10, 0x13, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0x87, 0x8f, 0xe5, 0xb0,
	0x91, 0xe6, 0xb3, 0x95, 0xe6, 0x9c, 0xaf, 0xe5, 0xbc, 0xba, 0xe5, 0xba, 0xa6, 0x12, 0x35, 0x0a,
	0x1c, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x43, 0x53, 0x52, 0x41, 0x54, 0x45, 0x10, 0x14, 0x1a,
	0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0, 0xe6, 0x9a, 0xb4, 0xe5, 0x87,
	0xbb, 0xe7, 0x8e, 0x87, 0x12, 0x35, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c,
	0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x43, 0x53,
	0x52, 0x41, 0x54, 0x45, 0x10, 0x15, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe5, 0x87, 0x8f, 0xe5,
	0xb0, 0x91, 0xe6, 0x9a, 0xb4, 0xe5, 0x87, 0xbb, 0xe7, 0x8e, 0x87, 0x12, 0x37, 0x0a, 0x1b, 0x52,
	0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x4e, 0x43, 0x4d, 0x41, 0x58, 0x48, 0x50, 0x10, 0x16, 0x1a, 0x16, 0xaa, 0xb6,
	0x18, 0x12, 0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe7, 0x94,
	0x9f, 0xe5, 0x91, 0xbd, 0x12, 0x37, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c,
	0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x4d, 0x41,
	0x58, 0x48, 0x50, 0x10, 0x17, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0x87, 0x8f, 0xe5, 0xb0,
	0x91, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe7, 0x94, 0x9f, 0xe5, 0x91, 0xbd, 0x12, 0x3b, 0x0a,
	0x1f, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x44, 0x45, 0x46, 0x53, 0x54, 0x52, 0x49, 0x4b, 0x45,
	0x10, 0x18, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0, 0xe7, 0x89,
	0xa9, 0xe7, 0x90, 0x86, 0xe7, 0xa9, 0xbf, 0xe9, 0x80, 0x8f, 0x12, 0x3b, 0x0a, 0x1f, 0x52, 0x45,
	0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x45, 0x43, 0x44, 0x45, 0x46, 0x53, 0x54, 0x52, 0x49, 0x4b, 0x45, 0x10, 0x19, 0x1a,
	0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0x87, 0x8f, 0xe5, 0xb0, 0x91, 0xe7, 0x89, 0xa9, 0xe7, 0x90,
	0x86, 0xe7, 0xa9, 0xbf, 0xe9, 0x80, 0x8f, 0x12, 0x3b, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x5f, 0x53,
	0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e,
	0x43, 0x52, 0x45, 0x53, 0x53, 0x54, 0x52, 0x49, 0x4b, 0x45, 0x10, 0x1a, 0x1a, 0x16, 0xaa, 0xb6,
	0x18, 0x12, 0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0, 0xe6, 0xb3, 0x95, 0xe6, 0x9c, 0xaf, 0xe7, 0xa9,
	0xbf, 0xe9, 0x80, 0x8f, 0x12, 0x3b, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c,
	0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45,
	0x53, 0x53, 0x54, 0x52, 0x49, 0x4b, 0x45, 0x10, 0x1b, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5,
	0x87, 0x8f, 0xe5, 0xb0, 0x91, 0xe6, 0xb3, 0x95, 0xe6, 0x9c, 0xaf, 0xe7, 0xa9, 0xbf, 0xe9, 0x80,
	0x8f, 0x12, 0x2a, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55,
	0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x10,
	0x1c, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe6, 0x8a, 0xa4, 0xe7, 0x9b, 0xbe, 0x12, 0x36, 0x0a,
	0x1a, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x4d, 0x41, 0x52, 0x4b, 0x10, 0x1d, 0x1a, 0x16, 0xaa,
	0xb6, 0x18, 0x12, 0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe5,
	0x8d, 0xb0, 0xe8, 0xae, 0xb0, 0x12, 0x3a, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49,
	0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x49, 0x47,
	0x47, 0x45, 0x52, 0x4d, 0x41, 0x52, 0x4b, 0x10, 0x1e, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe8,
	0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe5, 0x8d, 0xb0, 0xe8, 0xae,
	0xb0, 0x12, 0x33, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55,
	0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x56, 0x45, 0x53, 0x4f,
	0x4f, 0x4e, 0x10, 0x21, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0xbf, 0x85, 0xe9, 0x80, 0x9f,
	0xe5, 0xa4, 0x8d, 0xe6, 0xb4, 0xbb, 0x12, 0x39, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c, 0x45,
	0x41, 0x52, 0x46, 0x46, 0x45, 0x43, 0x54, 0x10, 0x23, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe9,
	0xa9, 0xb1, 0xe6, 0x95, 0xa3, 0xe5, 0x87, 0x80, 0xe5, 0x8c, 0x96, 0xe6, 0x95, 0x88, 0xe6, 0x9e,
	0x9c, 0x12, 0x34, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55,
	0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x48, 0x59, 0x53, 0x48, 0x45, 0x4d, 0x4f,
	0x10, 0x24, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe7, 0x89, 0xa9, 0xe7, 0x90, 0x86, 0xe5, 0x90,
	0xb8, 0xe8, 0xa1, 0x80, 0xe7, 0x8e, 0x87, 0x12, 0x35, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x5f, 0x53,
	0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41,
	0x47, 0x49, 0x43, 0x48, 0x45, 0x4d, 0x4f, 0x10, 0x25, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe6,
	0xb3, 0x95, 0xe6, 0x9c, 0xaf, 0xe5, 0x90, 0xb8, 0xe8, 0xa1, 0x80, 0xe7, 0x8e, 0x87, 0x12, 0x40,
	0x0a, 0x21, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x55, 0x52, 0x54, 0x52, 0x45, 0x44, 0x55, 0x43, 0x45, 0x52,
	0x41, 0x54, 0x45, 0x10, 0x26, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe4, 0xbc, 0xa4, 0xe5, 0xae,
	0xb3, 0xe5, 0x85, 0x8d, 0xe7, 0x96, 0xab, 0xe7, 0x8e, 0x87, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c,
	0x12, 0x40, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e,
	0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x55, 0x52, 0x54, 0x4f, 0x55, 0x54, 0x50, 0x55,
	0x54, 0x52, 0x41, 0x54, 0x45, 0x10, 0x29, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe4, 0xbc, 0xa4,
	0xe5, 0xae, 0xb3, 0xe8, 0xbe, 0x93, 0xe5, 0x87, 0xba, 0xe7, 0x8e, 0x87, 0xe6, 0x95, 0x88, 0xe6,
	0x9e, 0x9c, 0x12, 0x36, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46,
	0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x54, 0x52, 0x4c, 0x52, 0x45, 0x44,
	0x55, 0x43, 0x45, 0x10, 0x2a, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe9, 0x9f, 0xa7, 0xe6, 0x80,
	0xa7, 0xe7, 0x8e, 0x87, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0x12, 0x37, 0x0a, 0x1b, 0x52, 0x45,
	0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x44, 0x52, 0x45, 0x44, 0x55, 0x43, 0x45, 0x10, 0x2b, 0x1a, 0x16, 0xaa, 0xb6, 0x18,
	0x12, 0xe5, 0x86, 0xb7, 0xe5, 0x8d, 0xb4, 0xe7, 0xbc, 0xa9, 0xe5, 0x87, 0x8f, 0xe6, 0x95, 0x88,
	0xe6, 0x9e, 0x9c, 0x12, 0x34, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c,
	0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x54, 0x49, 0x43, 0x52,
	0x49, 0x54, 0x10, 0x2c, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe6, 0x8a, 0x97, 0xe6, 0x9a, 0xb4,
	0xe7, 0x8e, 0x87, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0x12, 0x48, 0x0a, 0x23, 0x52, 0x45, 0x53,
	0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x48, 0x55, 0x52, 0x54, 0x4f, 0x55, 0x54,
	0x10, 0x2d, 0x1a, 0x1f, 0xaa, 0xb6, 0x18, 0x1b, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe4, 0xbc,
	0xa4, 0xe5, 0xae, 0xb3, 0xe8, 0xbe, 0x93, 0xe5, 0x87, 0xba, 0xe7, 0x8e, 0x87, 0xe6, 0x95, 0x88,
	0xe6, 0x9e, 0x9c, 0x12, 0x3a, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c,
	0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x50, 0x43, 0x4f, 0x4e, 0x44,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x2f, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe7, 0x94, 0x9f,
	0xe5, 0x91, 0xbd, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0x12,
	0x37, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x55, 0x44, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x10, 0x30,
	0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0x9b, 0xb4, 0xe6, 0x8d, 0xa2, 0xe8, 0xa1, 0x80, 0xe6,
	0x9d, 0xa1, 0xe9, 0xa3, 0x8e, 0xe6, 0xa0, 0xbc, 0x12, 0x44, 0x0a, 0x22, 0x52, 0x45, 0x53, 0x5f,
	0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x41, 0x52, 0x47, 0x45, 0x54, 0x45, 0x58, 0x54, 0x52, 0x41, 0x48, 0x55, 0x52, 0x54, 0x10, 0x31,
	0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0xe4, 0xbc, 0xa4, 0xe5,
	0xae, 0xb3, 0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0x12, 0x4a,
	0x0a, 0x25, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x45, 0x58, 0x54, 0x52,
	0x41, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x10, 0x34, 0x1a, 0x1f, 0xaa, 0xb6, 0x18, 0x1b, 0xe5,
	0x8f, 0x97, 0xe6, 0x8e, 0xa7, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe4, 0xbc, 0xa4, 0xe5, 0xae,
	0xb3, 0xe7, 0x8e, 0x87, 0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90, 0x12, 0x43, 0x0a, 0x21, 0x52, 0x45,
	0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x4d, 0x4d, 0x55, 0x4e, 0x45, 0x44, 0x45, 0x41, 0x44, 0x48, 0x55, 0x52, 0x54, 0x10,
	0x37, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe5, 0x85, 0x8d, 0xe7, 0x96, 0xab, 0xe8, 0x87, 0xb4,
	0xe5, 0x91, 0xbd, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0x12,
	0x3a, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x53, 0x4b, 0x49, 0x4c,
	0x4c, 0x10, 0x38, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0x94, 0xb9, 0xe5, 0x8f, 0x98, 0xe6,
	0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0x12, 0x3c, 0x0a, 0x1a, 0x52,
	0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x45, 0x46, 0x54, 0x10, 0x3a, 0x1a, 0x1c, 0xaa, 0xb6, 0x18,
	0x18, 0xe6, 0x94, 0xb9, 0xe5, 0x8f, 0x98, 0xe6, 0x9a, 0xb4, 0xe5, 0x87, 0xbb, 0xe4, 0xbc, 0xa4,
	0xe5, 0xae, 0xb3, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0x12, 0x44, 0x0a, 0x25, 0x52, 0x45, 0x53,
	0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x50, 0x48, 0x59, 0x41, 0x52, 0x4d, 0x4f, 0x52, 0x48, 0x55, 0x52, 0x54, 0x5f, 0x52, 0x41,
	0x54, 0x45, 0x10, 0x3c, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe6, 0x94, 0xb9, 0xe5, 0x8f, 0x98,
	0xe6, 0x8a, 0xa4, 0xe7, 0x94, 0xb2, 0xe7, 0xa9, 0xbf, 0xe9, 0x80, 0x8f, 0xe7, 0x8e, 0x87, 0x12,
	0x44, 0x0a, 0x25, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4d, 0x47, 0x43, 0x41, 0x52, 0x4d, 0x4f, 0x52, 0x48,
	0x55, 0x52, 0x54, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x3d, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15,
	0xe6, 0x94, 0xb9, 0xe5, 0x8f, 0x98, 0xe6, 0xb3, 0x95, 0xe6, 0x9c, 0xaf, 0xe7, 0xa9, 0xbf, 0xe9,
	0x80, 0x8f, 0xe7, 0x8e, 0x87, 0x12, 0x41, 0x0a, 0x25, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49,
	0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f,
	0x56, 0x45, 0x52, 0x59, 0x47, 0x41, 0x49, 0x4e, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x10, 0x40,
	0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0x9b, 0x9e, 0xe5, 0xa4, 0x8d, 0xe5, 0xa2, 0x9e, 0xe7,
	0x9b, 0x8a, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0x12, 0x47, 0x0a, 0x25, 0x52, 0x45, 0x53, 0x5f,
	0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x50, 0x45, 0x45, 0x44, 0x55, 0x50, 0x4f, 0x55, 0x54, 0x4f, 0x46, 0x42, 0x41, 0x54, 0x54, 0x4c,
	0x45, 0x10, 0x41, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe8, 0x84, 0xb1, 0xe7, 0xa6, 0xbb, 0xe6,
	0x88, 0x98, 0xe6, 0x96, 0x97, 0xe6, 0x8f, 0x90, 0xe9, 0x80, 0x9f, 0xe6, 0x95, 0x88, 0xe6, 0x9e,
	0x9c, 0x12, 0x38, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55,
	0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x48, 0x55, 0x52, 0x54, 0x5f,
	0x52, 0x41, 0x54, 0x45, 0x10, 0x43, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe6, 0x8a, 0xa4, 0xe7,
	0x94, 0xb2, 0xe5, 0x87, 0x8f, 0xe4, 0xbc, 0xa4, 0xe7, 0x8e, 0x87, 0x12, 0x3e, 0x0a, 0x22, 0x52,
	0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x42, 0x55, 0x46,
	0x46, 0x10, 0x46, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe7, 0xa7, 0xbb, 0xe9, 0x99, 0xa4, 0xe6,
	0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0x12, 0x45, 0x0a, 0x23, 0x52,
	0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x10, 0x49, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe6, 0x94, 0xb9, 0xe5, 0x8f, 0x98,
	0xe8, 0xa2, 0xab, 0xe5, 0x8a, 0xa8, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe5, 0x8f, 0x82, 0xe6,
	0x95, 0xb0, 0x12, 0x38, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46,
	0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x45,
	0x4e, 0x45, 0x52, 0x47, 0x59, 0x10, 0x4c, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe5, 0xa2, 0x9e,
	0xe5, 0x8a, 0xa0, 0xe8, 0x83, 0xbd, 0xe9, 0x87, 0x8f, 0xe5, 0x80, 0xbc, 0x12, 0x33, 0x0a, 0x1d,
	0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x43, 0x45, 0x48, 0x55, 0x52, 0x54, 0x10, 0x53, 0x1a,
	0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x8f, 0x8d, 0xe5, 0xbc, 0xb9, 0xe4, 0xbc, 0xa4, 0xe5, 0xae,
	0xb3, 0x12, 0x46, 0x0a, 0x24, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55,
	0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x43, 0x45, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x10, 0x54, 0x1a, 0x1c, 0xaa, 0xb6, 0x18,
	0x18, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe6, 0x8a, 0x80,
	0xe8, 0x83, 0xbd, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0x12, 0x41, 0x0a, 0x25, 0x52, 0x45, 0x53,
	0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x45, 0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x52, 0x45, 0x56, 0x49, 0x56, 0x45, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0x55, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0x87, 0x8f, 0xe5, 0xb0, 0x91,
	0xe5, 0xa4, 0x8d, 0xe6, 0xb4, 0xbb, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x12, 0x36, 0x0a, 0x1a,
	0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x47, 0x4f, 0x4c, 0x44, 0x10, 0x56, 0x1a, 0x16, 0xaa, 0xb6,
	0x18, 0x12, 0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0, 0xe9, 0x87, 0x91, 0xe9, 0x92, 0xb1, 0xe6, 0x95,
	0x88, 0xe6, 0x9e, 0x9c, 0x12, 0x33, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c,
	0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52,
	0x45, 0x50, 0x10, 0x5d, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe6, 0xb8, 0x85, 0xe7, 0xa9, 0xba,
	0xe8, 0x83, 0xbd, 0xe9, 0x87, 0x8f, 0xe5, 0x80, 0xbc, 0x12, 0x32, 0x0a, 0x1c, 0x52, 0x45, 0x53,
	0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x48, 0x41, 0x52, 0x45, 0x48, 0x55, 0x52, 0x54, 0x10, 0x5f, 0x1a, 0x10, 0xaa, 0xb6, 0x18,
	0x0c, 0xe5, 0x85, 0xb1, 0xe4, 0xba, 0xab, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0x12, 0x5d, 0x0a,
	0x2b, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x57, 0x41, 0x59, 0x46, 0x52, 0x4f, 0x4d, 0x41, 0x54, 0x54, 0x41,
	0x43, 0x4b, 0x45, 0x52, 0x4d, 0x4f, 0x56, 0x45, 0x42, 0x55, 0x46, 0x46, 0x10, 0x60, 0x1a, 0x2c,
	0xaa, 0xb6, 0x18, 0x28, 0xe7, 0xa6, 0xbb, 0xe5, 0xbc, 0x80, 0xe6, 0x94, 0xbb, 0xe5, 0x87, 0xbb,
	0xe8, 0x80, 0x85, 0xe4, 0xb8, 0x80, 0xe5, 0xae, 0x9a, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0xe5,
	0x90, 0x8e, 0xe6, 0xb8, 0x85, 0xe9, 0x99, 0xa4, 0x42, 0x55, 0x46, 0x46, 0x12, 0x3f, 0x0a, 0x23,
	0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x43, 0x53, 0x52,
	0x41, 0x54, 0x45, 0x10, 0x61, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe8, 0x83, 0x8c, 0xe5, 0x90,
	0x8e, 0xe6, 0x94, 0xbb, 0xe5, 0x87, 0xbb, 0xe6, 0x9a, 0xb4, 0xe5, 0x87, 0xbb, 0x12, 0x44, 0x0a,
	0x1f, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x54, 0x53, 0x52, 0x41, 0x54, 0x45,
	0x10, 0x62, 0x1a, 0x1f, 0xaa, 0xb6, 0x18, 0x1b, 0xe6, 0x9a, 0xb4, 0xe5, 0x87, 0xbb, 0xe7, 0x8e,
	0x87, 0xe8, 0xbd, 0xac, 0xe5, 0x8c, 0x96, 0xe6, 0x9a, 0xb4, 0xe5, 0x87, 0xbb, 0xe4, 0xbc, 0xa4,
	0xe5, 0xae, 0xb3, 0x12, 0x37, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c,
	0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x41, 0x54, 0x4b, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x63, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c,
	0xe6, 0x94, 0xb9, 0xe5, 0x8f, 0x98, 0xe5, 0xb0, 0x84, 0xe7, 0xa8, 0x8b, 0x12, 0x34, 0x0a, 0x1b,
	0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x48, 0x50, 0x47, 0x4f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x64, 0x1a, 0x13, 0xaa,
	0xb6, 0x18, 0x0f, 0xe8, 0xbf, 0x94, 0xe8, 0xbf, 0x98, 0xe7, 0x94, 0x9f, 0xe5, 0x91, 0xbd, 0xe5,
	0x80, 0xbc, 0x12, 0x39, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46,
	0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x49, 0x50, 0x50, 0x41, 0x53,
	0x53, 0x49, 0x56, 0x45, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x66, 0x1a, 0x10, 0xaa, 0xb6, 0x18,
	0x0c, 0xe6, 0x8c, 0x82, 0xe4, 0xb8, 0x8a, 0xe8, 0xa2, 0xab, 0xe5, 0x8a, 0xa8, 0x12, 0x3e, 0x0a,
	0x22, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x48, 0x49, 0x54, 0x42, 0x41, 0x43, 0x4b, 0x48,
	0x55, 0x52, 0x54, 0x10, 0x67, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe8, 0x8c, 0x83, 0xe5, 0x9b,
	0xb4, 0xe5, 0x8f, 0x8d, 0xe5, 0x87, 0xbb, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0x12, 0x37, 0x0a,
	0x1b, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x4d, 0x41, 0x58, 0x45, 0x50, 0x10, 0x68, 0x1a, 0x16,
	0xaa, 0xb6, 0x18, 0x12, 0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7,
	0xe8, 0x83, 0xbd, 0xe9, 0x87, 0x8f, 0x12, 0x37, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x43,
	0x4d, 0x41, 0x58, 0x45, 0x50, 0x10, 0x69, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0x87, 0x8f,
	0xe5, 0xb0, 0x91, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe8, 0x83, 0xbd, 0xe9, 0x87, 0x8f, 0x12,
	0x4d, 0x0a, 0x2b, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x42, 0x45, 0x53, 0x45,
	0x41, 0x52, 0x43, 0x48, 0x45, 0x44, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x10, 0x6a,
	0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe6, 0x94, 0xb9, 0xe5, 0x8f, 0x98, 0xe8, 0xa2, 0xab, 0xe5,
	0xaf, 0xbb, 0xe6, 0x95, 0x8c, 0xe4, 0xbc, 0x98, 0xe5, 0x85, 0x88, 0xe7, 0xba, 0xa7, 0x12, 0x3a,
	0x0a, 0x1e, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x4e, 0x45, 0x57, 0x53, 0x4b, 0x49, 0x4c, 0x4c,
	0x10, 0x6d, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0, 0xe6, 0x96,
	0xb0, 0xe7, 0x9a, 0x84, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0x12, 0x35, 0x0a, 0x1f, 0x52, 0x45,
	0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x52, 0x45, 0x4e, 0x45, 0x57, 0x41, 0x4c, 0x10, 0x6f, 0x1a,
	0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0xe9, 0x87, 0x8d, 0xe7, 0x94,
	0x9f, 0x12, 0x3f, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55,
	0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x4d, 0x41, 0x58, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x70, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12,
	0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0, 0xe5, 0xb1, 0x9e, 0xe6, 0x80, 0xa7, 0xe4, 0xb8, 0x8a, 0xe9,
	0x99, 0x90, 0x12, 0x39, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46,
	0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x4e, 0x47, 0x54,
	0x48, 0x45, 0x4e, 0x42, 0x55, 0x4c, 0x4c, 0x45, 0x54, 0x10, 0x71, 0x1a, 0x10, 0xaa, 0xb6, 0x18,
	0x0c, 0xe5, 0xbc, 0xba, 0xe5, 0x8c, 0x96, 0xe5, 0xad, 0x90, 0xe5, 0xbc, 0xb9, 0x12, 0x36, 0x0a,
	0x1d, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x48, 0x50, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x78,
	0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe7, 0x94, 0x9f, 0xe5, 0x91, 0xbd, 0xe5, 0x80, 0xbc, 0xe8,
	0xbd, 0xac, 0xe7, 0xa7, 0xbb, 0x12, 0x37, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49,
	0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x55,
	0x4d, 0x55, 0x4c, 0x41, 0x54, 0x45, 0x48, 0x55, 0x52, 0x54, 0x10, 0x7b, 0x1a, 0x10, 0xaa, 0xb6,
	0x18, 0x0c, 0xe7, 0xb4, 0xaf, 0xe7, 0xa7, 0xaf, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0x12, 0x33,
	0x0a, 0x1d, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x48, 0x55, 0x52, 0x54, 0x10,
	0x7c, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe7, 0x9b, 0xb4, 0xe6, 0x8e, 0xa5, 0xe4, 0xbc, 0xa4,
	0xe5, 0xae, 0xb3, 0x12, 0x39, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c,
	0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45,
	0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x7e, 0x1a, 0x10, 0xaa, 0xb6,
	0x18, 0x0c, 0xe5, 0xbf, 0xbd, 0xe7, 0x95, 0xa5, 0xe9, 0x98, 0xbb, 0xe6, 0x8c, 0xa1, 0x12, 0x3b,
	0x0a, 0x1e, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f,
	0x53, 0x45, 0x54, 0x4d, 0x49, 0x4e, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x10, 0x80, 0x01, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe5,
	0xb1, 0x9e, 0xe6, 0x80, 0xa7, 0xe4, 0xb8, 0x8b, 0xe9, 0x99, 0x90, 0x12, 0x4b, 0x0a, 0x28, 0x52,
	0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x45, 0x54, 0x44, 0x59, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x56, 0x49, 0x56, 0x45,
	0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x10, 0x81, 0x01, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18,
	0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe6, 0xbf, 0x92, 0xe6, 0xad, 0xbb, 0xe5, 0xa4, 0x8d, 0xe6,
	0xb4, 0xbb, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x12, 0x40, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x5f,
	0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x4d, 0x4d, 0x55, 0x4e, 0x45, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x45, 0x46, 0x45, 0x43, 0x54, 0x10,
	0x85, 0x01, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0x85, 0x8d, 0xe7, 0x96, 0xab, 0xe6, 0x8a,
	0x80, 0xe8, 0x83, 0xbd, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0x12, 0x49, 0x0a, 0x29, 0x52, 0x45,
	0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x42, 0x55, 0x46, 0x46,
	0x57, 0x49, 0x54, 0x48, 0x54, 0x41, 0x47, 0x10, 0x86, 0x01, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15,
	0xe7, 0xa7, 0xbb, 0xe9, 0x99, 0xa4, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe6, 0x95, 0x88, 0xe6,
	0x9e, 0x9c, 0x54, 0x61, 0x67, 0x12, 0x47, 0x0a, 0x27, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49,
	0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x44, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x10, 0x88, 0x01, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0xe8,
	0xbf, 0x91, 0xe8, 0xbf, 0x9c, 0xe7, 0xa8, 0x8b, 0xe5, 0x88, 0x87, 0xe6, 0x8d, 0xa2, 0x12, 0x38,
	0x0a, 0x21, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x50, 0x52, 0x4f, 0x50, 0x45,
	0x52, 0x54, 0x59, 0x10, 0x89, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x9b, 0xb4, 0xe6,
	0x94, 0xb9, 0xe5, 0xb1, 0x9e, 0xe6, 0x80, 0xa7, 0x12, 0x3b, 0x0a, 0x24, 0x52, 0x45, 0x53, 0x5f,
	0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46,
	0x41, 0x4b, 0x45, 0x42, 0x4c, 0x4f, 0x4f, 0x44, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59,
	0x10, 0x8a, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe7, 0x81, 0xb0, 0xe8, 0xa1, 0x80, 0xe5,
	0xb1, 0x9e, 0xe6, 0x80, 0xa7, 0x12, 0x38, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49,
	0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x4d, 0x41,
	0x47, 0x45, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x8b, 0x01, 0x1a, 0x10, 0xaa,
	0xb6, 0x18, 0x0c, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0xe8, 0xbd, 0xac, 0xe7, 0xa7, 0xbb, 0x12,
	0x42, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x42, 0x55, 0x46, 0x46,
	0x54, 0x49, 0x4d, 0x45, 0x10, 0x8f, 0x01, 0x1a, 0x1a, 0xaa, 0xb6, 0x18, 0x16, 0xe5, 0xbb, 0xb6,
	0xe9, 0x95, 0xbf, 0x62, 0x75, 0x66, 0x66, 0xe6, 0x8c, 0x81, 0xe7, 0xbb, 0xad, 0xe6, 0x97, 0xb6,
	0xe9, 0x97, 0xb4, 0x12, 0x36, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c,
	0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x56, 0x49, 0x44, 0x45,
	0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x92, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5,
	0x88, 0x86, 0xe6, 0x91, 0x8a, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0x12, 0x46, 0x0a, 0x26, 0x52,
	0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x45,
	0x46, 0x46, 0x45, 0x43, 0x54, 0x10, 0x93, 0x01, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe5, 0xaf,
	0xb9, 0xe4, 0xbb, 0x96, 0xe4, 0xba, 0xba, 0xe6, 0x81, 0xa2, 0xe5, 0xa4, 0x8d, 0xe5, 0xa2, 0x9e,
	0xe7, 0x9b, 0x8a, 0x12, 0x3c, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c,
	0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x53,
	0x50, 0x45, 0x45, 0x44, 0x55, 0x50, 0x10, 0x96, 0x01, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6,
	0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe9, 0x87, 0x8a, 0xe6, 0x94, 0xbe, 0xe5, 0x8a, 0xa0, 0xe9, 0x80,
	0x9f, 0x12, 0x35, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55,
	0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x10, 0x97, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x85, 0x85, 0xe8,
	0x83, 0xbd, 0xe8, 0x83, 0xbd, 0xe9, 0x87, 0x8f, 0x12, 0x3d, 0x0a, 0x26, 0x52, 0x45, 0x53, 0x5f,
	0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x48, 0x45, 0x43, 0x4b, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x10, 0x99, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0xa3, 0x80, 0xe6, 0xb5,
	0x8b, 0xe4, 0xbd, 0x8d, 0xe7, 0xa7, 0xbb, 0x12, 0x35, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x5f, 0x53,
	0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x56,
	0x45, 0x52, 0x41, 0x47, 0x45, 0x48, 0x55, 0x52, 0x54, 0x10, 0x9a, 0x01, 0x1a, 0x10, 0xaa, 0xb6,
	0x18, 0x0c, 0xe5, 0xb9, 0xb3, 0xe5, 0x88, 0x86, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0x12, 0x35,
	0x0a, 0x1e, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45,
	0x10, 0x9c, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0xbb, 0xb6, 0xe8, 0xbf, 0x9f, 0xe4,
	0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0x12, 0x32, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49,
	0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x46,
	0x48, 0x55, 0x52, 0x54, 0x10, 0x9d, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0x87, 0xaa,
	0xe6, 0xae, 0x8b, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0x12, 0x3c, 0x0a, 0x1f, 0x52, 0x45, 0x53,
	0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x44, 0x44, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x47, 0x4f, 0x4c, 0x44, 0x10, 0x9e, 0x01, 0x1a,
	0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0, 0xe5, 0x9b, 0x9e, 0xe5, 0x90,
	0x88, 0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81, 0x12, 0x47, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x5f, 0x53,
	0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4a,
	0x38, 0x45, 0x50, 0x52, 0x41, 0x54, 0x45, 0x10, 0x9f, 0x01, 0x1a, 0x24, 0xaa, 0xb6, 0x18, 0x20,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x38, 0xe6, 0x9b, 0xb4, 0xe6, 0x94, 0xb9, 0xe8, 0x83,
	0xbd, 0xe9, 0x87, 0x8f, 0xe6, 0x81, 0xa2, 0xe5, 0xa4, 0x8d, 0xe9, 0x80, 0x9f, 0xe5, 0xba, 0xa6,
	0x12, 0x40, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e,
	0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x41, 0x54, 0x54,
	0x41, 0x43, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x10, 0xa0, 0x01, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12,
	0xe6, 0x94, 0xb9, 0xe5, 0x8f, 0x98, 0xe6, 0x94, 0xbb, 0xe5, 0x87, 0xbb, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0x12, 0x48, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46,
	0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4a, 0x38, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x45, 0x50, 0x10, 0xa1, 0x01, 0x1a, 0x1e, 0xaa, 0xb6,
	0x18, 0x1a, 0x70, 0x72, 0x6f, 0x6a, 0x38, 0xe6, 0x8c, 0x81, 0xe7, 0xbb, 0xad, 0xe6, 0x94, 0xb9,
	0xe6, 0x9c, 0x80, 0xe7, 0xbb, 0x88, 0xe8, 0x93, 0x9d, 0xe9, 0x87, 0x8f, 0x12, 0x4c, 0x0a, 0x28,
	0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x4b, 0x45, 0x52, 0x44, 0x45, 0x41, 0x44, 0x52, 0x45,
	0x4d, 0x4f, 0x56, 0x45, 0x42, 0x55, 0x46, 0x46, 0x10, 0xa6, 0x01, 0x1a, 0x1d, 0xaa, 0xb6, 0x18,
	0x19, 0xe6, 0x94, 0xbb, 0xe5, 0x87, 0xbb, 0xe8, 0x80, 0x85, 0xe6, 0xad, 0xbb, 0xe4, 0xba, 0xa1,
	0xe7, 0xa7, 0xbb, 0xe9, 0x99, 0xa4, 0x42, 0x55, 0x46, 0x46, 0x12, 0x5a, 0x0a, 0x2e, 0x52, 0x45,
	0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0xad, 0x01, 0x1a,
	0x25, 0xaa, 0xb6, 0x18, 0x21, 0xe6, 0x94, 0xb9, 0xe5, 0x8f, 0x98, 0xe8, 0x87, 0xaa, 0xe8, 0xb5,
	0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0x99, 0xae, 0xe6, 0x94, 0xbb, 0xe5, 0x88, 0x86, 0xe8, 0xa3, 0x82,
	0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12, 0x61, 0x0a, 0x35, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x44, 0x41, 0x4d,
	0x41, 0x47, 0x45, 0x5f, 0x4d, 0x50, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10,
	0xae, 0x01, 0x1a, 0x25, 0xaa, 0xb6, 0x18, 0x21, 0xe6, 0x94, 0xb9, 0xe5, 0x8f, 0x98, 0xe8, 0x87,
	0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0x94, 0xbb, 0xe5, 0x87, 0xbb, 0xe5, 0x9b, 0x9e,
	0xe8, 0x93, 0x9d, 0xe6, 0xaf, 0x94, 0xe4, 0xbe, 0x8b, 0x12, 0x5f, 0x0a, 0x33, 0x52, 0x45, 0x53,
	0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x48, 0x55, 0x52, 0x54, 0x5f, 0x4d, 0x50, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x41, 0x54, 0x45,
	0x10, 0xaf, 0x01, 0x1a, 0x25, 0xaa, 0xb6, 0x18, 0x21, 0xe6, 0x94, 0xb9, 0xe5, 0x8f, 0x98, 0xe8,
	0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe5, 0x8f, 0x97, 0xe5, 0x87, 0xbb, 0xe5, 0x9b,
	0x9e, 0xe8, 0x93, 0x9d, 0xe6, 0xaf, 0x94, 0xe4, 0xbe, 0x8b, 0x12, 0x48, 0x0a, 0x25, 0x52, 0x45,
	0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x41, 0x44, 0x44, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x47,
	0x4f, 0x4c, 0x44, 0x10, 0xb0, 0x01, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe6, 0x99, 0xae, 0xe9,
	0x80, 0x9a, 0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe9, 0x87,
	0x91, 0xe5, 0xb8, 0x81, 0x12, 0x4c, 0x0a, 0x29, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c,
	0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x41,
	0x54, 0x54, 0x41, 0x43, 0x4b, 0x45, 0x44, 0x48, 0x55, 0x52, 0x54, 0x52, 0x45, 0x44, 0x55, 0x43,
	0x45, 0x10, 0xb3, 0x01, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae,
	0xe5, 0x8f, 0x97, 0xe5, 0x87, 0xbb, 0xe6, 0x96, 0xb9, 0xe5, 0x90, 0x91, 0xe5, 0x85, 0x8d, 0xe4,
	0xbc, 0xa4, 0x12, 0x4c, 0x0a, 0x29, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46,
	0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x55, 0x4d, 0x55, 0x4c,
	0x41, 0x54, 0x45, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x48, 0x55, 0x52, 0x54, 0x10,
	0xb4, 0x01, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe6, 0x8c, 0x81, 0xe7, 0xbb, 0xad, 0xe6, 0x9c,
	0x9f, 0xe9, 0x97, 0xb4, 0xe7, 0xb4, 0xaf, 0xe7, 0xa7, 0xaf, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3,
	0x12, 0x36, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e,
	0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x42, 0x55, 0x46,
	0x46, 0x49, 0x44, 0x10, 0xb5, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0xbf, 0x87, 0xe6,
	0xbb, 0xa4, 0x42, 0x75, 0x66, 0x66, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x5f,
	0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52,
	0x45, 0x41, 0x4c, 0x48, 0x45, 0x4d, 0x4f, 0x10, 0xb7, 0x01, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f,
	0xe7, 0x9c, 0x9f, 0xe4, 0xbc, 0xa4, 0xe5, 0x90, 0xb8, 0xe8, 0xa1, 0x80, 0xe7, 0x8e, 0x87, 0x12,
	0x37, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x50, 0x41, 0x53, 0x53,
	0x49, 0x56, 0x45, 0x10, 0xbe, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x9b, 0xbf, 0xe6,
	0x8d, 0xa2, 0xe8, 0xa2, 0xab, 0xe5, 0x8a, 0xa8, 0x12, 0x36, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x5f,
	0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52,
	0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0xc0, 0x01, 0x1a, 0x10,
	0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x9b, 0xbf, 0xe6, 0x8d, 0xa2, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd,
	0x12, 0x3d, 0x0a, 0x26, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e,
	0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x54, 0x55, 0x52,
	0x4e, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xc3, 0x01, 0x1a, 0x10, 0xaa,
	0xb6, 0x18, 0x0c, 0xe6, 0xa3, 0x80, 0xe6, 0xb5, 0x8b, 0xe8, 0xbd, 0xac, 0xe5, 0x90, 0x91, 0x12,
	0x38, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x44, 0x45, 0x53,
	0x50, 0x45, 0x45, 0x44, 0x10, 0xc4, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe7, 0xa7, 0xbb,
	0xe9, 0x99, 0xa4, 0xe5, 0x87, 0x8f, 0xe9, 0x80, 0x9f, 0x12, 0x35, 0x0a, 0x1e, 0x52, 0x45, 0x53,
	0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x54, 0x52, 0x49, 0x4b, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0xc6, 0x01, 0x1a, 0x10,
	0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x8f, 0x8d, 0xe5, 0x87, 0xbb, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c,
	0x12, 0x37, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e,
	0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x5f, 0x44, 0x41,
	0x4d, 0x41, 0x47, 0x45, 0x10, 0xc7, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe4, 0xbc, 0xa4,
	0xe5, 0xae, 0xb3, 0xe8, 0xb0, 0x83, 0xe6, 0x95, 0xb4, 0x12, 0x3a, 0x0a, 0x23, 0x52, 0x45, 0x53,
	0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59,
	0x10, 0xc8, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0xb1, 0x9e, 0xe6, 0x80, 0xa7, 0xe8,
	0xbd, 0xac, 0xe6, 0x8d, 0xa2, 0x12, 0x3f, 0x0a, 0x22, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49,
	0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x44, 0x45, 0x43, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0xc9, 0x01, 0x1a, 0x16,
	0xaa, 0xb6, 0x18, 0x12, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe5, 0x87, 0x8f, 0xe7, 0x9b, 0x8a,
	0xe6, 0x8a, 0xa4, 0xe7, 0x9b, 0xbe, 0x12, 0x4d, 0x0a, 0x2a, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b, 0x49, 0x4c,
	0x4c, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x43, 0x5f, 0x53, 0x50, 0x41,
	0x57, 0x4e, 0x43, 0x44, 0x10, 0xca, 0x01, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe5, 0x87, 0xbb,
	0xe6, 0x9d, 0x80, 0xe5, 0x8a, 0xa0, 0xe9, 0x80, 0x9f, 0xe9, 0x87, 0x8e, 0xe6, 0x80, 0xaa, 0xe5,
	0x88, 0xb7, 0xe6, 0x96, 0xb0, 0x12, 0x3c, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49,
	0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x53,
	0x4b, 0x49, 0x4c, 0x4c, 0x42, 0x55, 0x46, 0x46, 0x10, 0xcd, 0x01, 0x1a, 0x16, 0xaa, 0xb6, 0x18,
	0x12, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a, 0xa0, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe6, 0x95, 0x88,
	0xe6, 0x9e, 0x9c, 0x12, 0x53, 0x0a, 0x2a, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c,
	0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43,
	0x54, 0x38, 0x5f, 0x41, 0x44, 0x44, 0x53, 0x50, 0x44, 0x49, 0x4e, 0x4d, 0x4f, 0x56, 0x49, 0x4e,
	0x47, 0x10, 0xd0, 0x01, 0x1a, 0x22, 0xaa, 0xb6, 0x18, 0x1e, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0,
	0xe6, 0xa3, 0x8b, 0xe7, 0xa7, 0xbb, 0xe5, 0x8a, 0xa8, 0xe4, 0xb8, 0xad, 0xe5, 0xa2, 0x9e, 0xe5,
	0x8a, 0xa0, 0xe9, 0x80, 0x9f, 0xe5, 0xba, 0xa6, 0x12, 0x4f, 0x0a, 0x2c, 0x52, 0x45, 0x53, 0x5f,
	0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x41, 0x47, 0x49, 0x43, 0x48, 0x55, 0x52, 0x54, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41,
	0x4c, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xd2, 0x01, 0x1a, 0x1c, 0xaa, 0xb6, 0x18,
	0x18, 0xe6, 0xb3, 0x95, 0xe6, 0x9c, 0xaf, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0xe5, 0x8f, 0xaf,
	0xe4, 0xbb, 0xa5, 0xe6, 0x9a, 0xb4, 0xe5, 0x87, 0xbb, 0x12, 0x54, 0x0a, 0x2e, 0x52, 0x45, 0x53,
	0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x49, 0x4e, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x59, 0x10, 0xd3, 0x01, 0x1a, 0x1f,
	0xaa, 0xb6, 0x18, 0x1b, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0x94, 0xb9,
	0xe5, 0x8f, 0x98, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe8, 0x83, 0xbd, 0xe9, 0x87, 0x8f, 0x12,
	0x3b, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x54,
	0x41, 0x55, 0x4e, 0x54, 0x10, 0xd4, 0x01, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe8, 0x87, 0xaa,
	0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe5, 0x98, 0xb2, 0xe8, 0xae, 0xbd, 0x12, 0x50, 0x0a, 0x24,
	0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f,
	0x53, 0x45, 0x4c, 0x46, 0x10, 0xd5, 0x01, 0x1a, 0x25, 0xaa, 0xb6, 0x18, 0x21, 0xe8, 0x87, 0xaa,
	0xe8, 0xba, 0xab, 0xe5, 0xaf, 0xb9, 0xe8, 0x87, 0xaa, 0xe8, 0xba, 0xab, 0xe6, 0x81, 0xa2, 0xe5,
	0xa4, 0x8d, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0xe5, 0x87, 0x8f, 0xe7, 0x9b, 0x8a, 0x12, 0x4a,
	0x0a, 0x2a, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x52, 0x45,
	0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x59, 0x10, 0xd6, 0x01, 0x1a,
	0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe5, 0x9b,
	0x9e, 0xe5, 0xa4, 0x8d, 0xe8, 0x83, 0xbd, 0xe9, 0x87, 0x8f, 0x12, 0x4e, 0x0a, 0x2b, 0x52, 0x45,
	0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x52, 0x45, 0x41, 0x4c, 0x48, 0x55, 0x52, 0x54, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43,
	0x41, 0x4c, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xd7, 0x01, 0x1a, 0x1c, 0xaa, 0xb6,
	0x18, 0x18, 0xe7, 0x9c, 0x9f, 0xe5, 0xae, 0x9e, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0xe5, 0x8f,
	0xaf, 0xe4, 0xbb, 0xa5, 0xe6, 0x9a, 0xb4, 0xe5, 0x87, 0xbb, 0x12, 0x4a, 0x0a, 0x27, 0x52, 0x45,
	0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0xd8, 0x01, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe5, 0xbb,
	0xb6, 0xe9, 0x95, 0xbf, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe6, 0x8c, 0x81, 0xe7, 0xbb, 0xad,
	0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x12, 0x4a, 0x0a, 0x27, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x44,
	0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x5f, 0x52, 0x41, 0x54,
	0x45, 0x10, 0xd9, 0x01, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0,
	0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe5, 0xa2, 0x9e, 0xe7, 0x9b, 0x8a, 0xe6, 0x81, 0xa2, 0xe5,
	0xa4, 0x8d, 0x12, 0x4a, 0x0a, 0x27, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46,
	0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x5f, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0xda, 0x01,
	0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe5, 0x87, 0x8f, 0xe5, 0xb0, 0x91, 0xe9, 0xa2, 0x9d, 0xe5,
	0xa4, 0x96, 0xe5, 0xa2, 0x9e, 0xe7, 0x9b, 0x8a, 0xe6, 0x81, 0xa2, 0xe5, 0xa4, 0x8d, 0x12, 0x50,
	0x0a, 0x27, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f,
	0x48, 0x45, 0x41, 0x4c, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0xdb, 0x01, 0x1a, 0x22, 0xaa, 0xb6,
	0x18, 0x1e, 0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0, 0xe5, 0xaf, 0xb9, 0xe4, 0xbb, 0x96, 0xe4, 0xba,
	0xba, 0xe6, 0x81, 0xa2, 0xe5, 0xa4, 0x8d, 0xe5, 0xa2, 0x9e, 0xe7, 0x9b, 0x8a, 0xe7, 0x8e, 0x87,
	0x12, 0x50, 0x0a, 0x27, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e,
	0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45,
	0x54, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0xdc, 0x01, 0x1a, 0x22,
	0xaa, 0xb6, 0x18, 0x1e, 0xe5, 0x87, 0x8f, 0xe5, 0xb0, 0x91, 0xe5, 0xaf, 0xb9, 0xe4, 0xbb, 0x96,
	0xe4, 0xba, 0xba, 0xe6, 0x81, 0xa2, 0xe5, 0xa4, 0x8d, 0xe5, 0xa2, 0x9e, 0xe7, 0x9b, 0x8a, 0xe7,
	0x8e, 0x87, 0x12, 0x4f, 0x0a, 0x32, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46,
	0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x54, 0x52, 0x55,
	0x45, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x5f, 0x53, 0x54,
	0x45, 0x41, 0x4c, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0xdd, 0x01, 0x1a, 0x16, 0xaa, 0xb6, 0x18,
	0x12, 0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0, 0xe7, 0x9c, 0x9f, 0xe4, 0xbc, 0xa4, 0xe5, 0x90, 0xb8,
	0xe8, 0xa1, 0x80, 0x12, 0x4f, 0x0a, 0x32, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c,
	0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x5f, 0x54, 0x52,
	0x55, 0x45, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x5f, 0x53,
	0x54, 0x45, 0x41, 0x4c, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0xde, 0x01, 0x1a, 0x16, 0xaa, 0xb6,
	0x18, 0x12, 0xe5, 0x87, 0x8f, 0xe5, 0xb0, 0x91, 0xe7, 0x9c, 0x9f, 0xe4, 0xbc, 0xa4, 0xe5, 0x90,
	0xb8, 0xe8, 0xa1, 0x80, 0x12, 0x43, 0x0a, 0x29, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c,
	0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47,
	0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x48, 0x49, 0x45, 0x4c,
	0x44, 0x10, 0xdf, 0x01, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3,
	0xe8, 0xbd, 0xac, 0xe6, 0x8a, 0xa4, 0xe7, 0x9b, 0xbe, 0x12, 0x41, 0x0a, 0x27, 0x52, 0x45, 0x53,
	0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x48, 0x55, 0x52, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x48,
	0x49, 0x45, 0x4c, 0x44, 0x10, 0xe0, 0x01, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe5, 0x8f, 0x97,
	0xe5, 0x87, 0xbb, 0xe8, 0xbd, 0xac, 0xe6, 0x8a, 0xa4, 0xe7, 0x9b, 0xbe, 0x12, 0x50, 0x0a, 0x30,
	0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x48, 0x45, 0x41, 0x4c,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x48, 0x49, 0x45, 0x4c, 0x44,
	0x10, 0xe1, 0x01, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe6, 0xba, 0xa2, 0xe5, 0x87, 0xba, 0xe6,
	0xb2, 0xbb, 0xe7, 0x96, 0x97, 0xe8, 0xbd, 0xac, 0xe6, 0x8a, 0xa4, 0xe7, 0x9b, 0xbe, 0x12, 0x5a,
	0x0a, 0x2b, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45,
	0x54, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0xe2, 0x01,
	0x1a, 0x28, 0xaa, 0xb6, 0x18, 0x24, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe5, 0x8f, 0x97, 0xe5,
	0x87, 0xbb, 0xe8, 0x80, 0x85, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0xe8, 0xbe, 0x93, 0xe5, 0x87,
	0xba, 0xe7, 0x8e, 0x87, 0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90, 0x12, 0x5a, 0x0a, 0x2b, 0x52, 0x45,
	0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x45,
	0x44, 0x55, 0x43, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0xe3, 0x01, 0x1a, 0x28, 0xaa, 0xb6,
	0x18, 0x24, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe6, 0x94, 0xbb, 0xe5, 0x87, 0xbb, 0xe8, 0x80,
	0x85, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0xe5, 0x87, 0x8f, 0xe5, 0x85, 0x8d, 0xe7, 0x8e, 0x87,
	0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90, 0x12, 0x4e, 0x0a, 0x28, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4c, 0x4f,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x52, 0x41,
	0x54, 0x45, 0x10, 0xe4, 0x01, 0x1a, 0x1f, 0xaa, 0xb6, 0x18, 0x1b, 0xe4, 0xbc, 0xa4, 0xe5, 0xae,
	0xb3, 0xe6, 0x9d, 0xa5, 0xe6, 0xba, 0x90, 0xe8, 0xbe, 0x93, 0xe5, 0x87, 0xba, 0xe7, 0x8e, 0x87,
	0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90, 0x12, 0x4e, 0x0a, 0x28, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4c, 0x4f,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x55, 0x43, 0x45, 0x5f, 0x52, 0x41,
	0x54, 0x45, 0x10, 0xe5, 0x01, 0x1a, 0x1f, 0xaa, 0xb6, 0x18, 0x1b, 0xe4, 0xbc, 0xa4, 0xe5, 0xae,
	0xb3, 0xe6, 0x9d, 0xa5, 0xe6, 0xba, 0x90, 0xe5, 0x87, 0x8f, 0xe5, 0x85, 0x8d, 0xe7, 0x8e, 0x87,
	0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90, 0x12, 0x3b, 0x0a, 0x24, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x4d,
	0x41, 0x47, 0x45, 0x5f, 0x4f, 0x52, 0x42, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x10, 0xe6,
	0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0xe6, 0xb3, 0x95,
	0xe7, 0x90, 0x83, 0x12, 0x39, 0x0a, 0x22, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c,
	0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x55, 0x52, 0x54, 0x5f, 0x4f,
	0x52, 0x42, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x10, 0xe7, 0x01, 0x1a, 0x10, 0xaa, 0xb6,
	0x18, 0x0c, 0xe5, 0x8f, 0x97, 0xe5, 0x87, 0xbb, 0xe6, 0xb3, 0x95, 0xe7, 0x90, 0x83, 0x12, 0x42,
	0x0a, 0x25, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43,
	0x4b, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0xe8, 0x01, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12,
	0xe6, 0x94, 0xb9, 0xe5, 0x8f, 0x98, 0xe6, 0x94, 0xbb, 0xe5, 0x87, 0xbb, 0xe8, 0xb7, 0x9d, 0xe7,
	0xa6, 0xbb, 0x12, 0x3f, 0x0a, 0x25, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46,
	0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x48, 0x49, 0x54,
	0x5f, 0x41, 0x56, 0x4f, 0x49, 0x44, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0xe9, 0x01, 0x1a, 0x13,
	0xaa, 0xb6, 0x18, 0x0f, 0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0, 0xe9, 0x97, 0xaa, 0xe9, 0x81, 0xbf,
	0xe7, 0x8e, 0x87, 0x12, 0x3f, 0x0a, 0x25, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c,
	0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x5f, 0x48, 0x49,
	0x54, 0x5f, 0x41, 0x56, 0x4f, 0x49, 0x44, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0xea, 0x01, 0x1a,
	0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe5, 0x87, 0x8f, 0xe5, 0xb0, 0x91, 0xe9, 0x97, 0xaa, 0xe9, 0x81,
	0xbf, 0xe7, 0x8e, 0x87, 0x12, 0x39, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c,
	0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x48,
	0x49, 0x54, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0xeb, 0x01, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f,
	0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0, 0xe5, 0x91, 0xbd, 0xe4, 0xb8, 0xad, 0xe7, 0x8e, 0x87, 0x12,
	0x39, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x5f, 0x48, 0x49, 0x54, 0x5f, 0x52, 0x41,
	0x54, 0x45, 0x10, 0xec, 0x01, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe5, 0x87, 0x8f, 0xe5, 0xb0,
	0x91, 0xe5, 0x91, 0xbd, 0xe4, 0xb8, 0xad, 0xe7, 0x8e, 0x87, 0x12, 0x36, 0x0a, 0x1f, 0x52, 0x45,
	0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0xed, 0x01,
	0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0xe6, 0xa0, 0xbc, 0xe6,
	0x8c, 0xa1, 0x12, 0x43, 0x0a, 0x26, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46,
	0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x57, 0x5f, 0x50, 0x52, 0x49,
	0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x10, 0xee, 0x01, 0x1a,
	0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe4, 0xbd, 0x8e, 0xe4, 0xbc, 0x98, 0xe5, 0x85, 0x88, 0xe7, 0xba,
	0xa7, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0x12, 0x51, 0x0a, 0x25, 0x52, 0x45, 0x53, 0x5f, 0x53,
	0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41,
	0x52, 0x47, 0x45, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x52, 0x41, 0x54, 0x45,
	0x10, 0xef, 0x01, 0x1a, 0x25, 0xaa, 0xb6, 0x18, 0x21, 0xe5, 0x8f, 0x97, 0xe5, 0x87, 0xbb, 0xe8,
	0x80, 0x85, 0xe7, 0x9a, 0x84, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0xe8, 0xbe, 0x93, 0xe5, 0x87,
	0xba, 0xe7, 0x8e, 0x87, 0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90, 0x12, 0x4a, 0x0a, 0x22, 0x52, 0x45,
	0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x4d, 0x41, 0x58, 0x45, 0x50,
	0x10, 0xf0, 0x01, 0x1a, 0x21, 0xaa, 0xb6, 0x18, 0x1d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x38, 0xe4, 0xbb, 0x85, 0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7,
	0xe8, 0x83, 0xbd, 0xe9, 0x87, 0x8f, 0x12, 0x4a, 0x0a, 0x22, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x4d, 0x41, 0x58, 0x45, 0x50, 0x10, 0xf1, 0x01, 0x1a,
	0x21, 0xaa, 0xb6, 0x18, 0x1d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x38, 0xe4, 0xbb, 0x85,
	0xe5, 0x87, 0x8f, 0xe5, 0xb0, 0x91, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe8, 0x83, 0xbd, 0xe9,
	0x87, 0x8f, 0x12, 0x4a, 0x0a, 0x27, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46,
	0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x48, 0x45, 0x41,
	0x4c, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0xf2, 0x01,
	0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0, 0xe9, 0xa2, 0x9d, 0xe5,
	0xa4, 0x96, 0xe5, 0x87, 0x8f, 0xe7, 0x9b, 0x8a, 0xe6, 0x81, 0xa2, 0xe5, 0xa4, 0x8d, 0x12, 0x4a,
	0x0a, 0x27, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x5f, 0x44, 0x45,
	0x42, 0x55, 0x46, 0x46, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0xf3, 0x01, 0x1a, 0x1c, 0xaa, 0xb6,
	0x18, 0x18, 0xe5, 0x87, 0x8f, 0xe5, 0xb0, 0x91, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe5, 0x87,
	0x8f, 0xe7, 0x9b, 0x8a, 0xe6, 0x81, 0xa2, 0xe5, 0xa4, 0x8d, 0x12, 0x5c, 0x0a, 0x27, 0x52, 0x45,
	0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x54, 0x48, 0x55, 0x52, 0x54,
	0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0xf4, 0x01, 0x1a, 0x2e, 0xaa, 0xb6, 0x18, 0x2a, 0xe5, 0x85,
	0xb6, 0xe4, 0xbb, 0x96, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0xe8, 0xbd, 0xac, 0xe6, 0x8d, 0xa2,
	0xe4, 0xb8, 0xba, 0xe7, 0x9c, 0x9f, 0xe5, 0xae, 0x9e, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0xe7,
	0x9a, 0x84, 0xe6, 0xaf, 0x94, 0xe7, 0x8e, 0x87, 0x12, 0x51, 0x0a, 0x2e, 0x52, 0x45, 0x53, 0x5f,
	0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44,
	0x41, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x4f, 0x52, 0x42, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54,
	0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x4f, 0x4e, 0x43, 0x45, 0x10, 0xf5, 0x01, 0x1a, 0x1c, 0xaa,
	0xb6, 0x18, 0x18, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0xe6, 0xb3, 0x95, 0xe7, 0x90, 0x83, 0xe6,
	0xac, 0xa1, 0xe6, 0x95, 0xb0, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x12, 0x62, 0x0a, 0x35, 0x52,
	0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x4f, 0x52, 0x42, 0x5f, 0x45, 0x46, 0x46,
	0x45, 0x43, 0x54, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x42, 0x55, 0x46,
	0x46, 0x5f, 0x49, 0x44, 0x10, 0xf6, 0x01, 0x1a, 0x26, 0xaa, 0xb6, 0x18, 0x22, 0xe4, 0xbc, 0xa4,
	0xe5, 0xae, 0xb3, 0xe6, 0xb3, 0x95, 0xe7, 0x90, 0x83, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0x62,
	0x75, 0x66, 0x66, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x12,
	0x56, 0x0a, 0x2d, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x4f, 0x52, 0x42,
	0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x48, 0x55, 0x52, 0x54,
	0x10, 0xf7, 0x01, 0x1a, 0x22, 0xaa, 0xb6, 0x18, 0x1e, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0xe6,
	0xb3, 0x95, 0xe7, 0x90, 0x83, 0xe6, 0xa3, 0x80, 0xe6, 0xb5, 0x8b, 0xe4, 0xbc, 0xa4, 0xe5, 0xae,
	0xb3, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0x12, 0x40, 0x0a, 0x26, 0x52, 0x45, 0x53, 0x5f, 0x53,
	0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45,
	0x57, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54,
	0x59, 0x10, 0xf8, 0x01, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe6, 0x96, 0xb0, 0xe6, 0x94, 0xb9,
	0xe5, 0x8f, 0x98, 0xe5, 0xb1, 0x9e, 0xe6, 0x80, 0xa7, 0x12, 0x63, 0x0a, 0x34, 0x52, 0x45, 0x53,
	0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x4c, 0x4f, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x41, 0x42,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x52, 0x41, 0x54,
	0x45, 0x10, 0xf9, 0x01, 0x1a, 0x28, 0xaa, 0xb6, 0x18, 0x24, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3,
	0xe6, 0x9d, 0xa5, 0xe6, 0xba, 0x90, 0xe8, 0xbe, 0x93, 0xe5, 0x87, 0xba, 0xe7, 0x8e, 0x87, 0xe6,
	0x8c, 0x89, 0xe6, 0xa6, 0x82, 0xe7, 0x8e, 0x87, 0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90, 0x12, 0x56,
	0x0a, 0x2a, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x45, 0x41, 0x4c, 0x5f, 0x48, 0x50, 0x5f, 0x41, 0x43,
	0x43, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x48, 0x55, 0x52, 0x54, 0x10, 0xfa, 0x01, 0x1a,
	0x25, 0xaa, 0xb6, 0x18, 0x21, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0xe5, 0xb7, 0xb2, 0xe5, 0x8f,
	0x97, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0xe5, 0x81, 0xb7, 0xe5, 0x8f, 0x96, 0xe7, 0x94, 0x9f,
	0xe5, 0x91, 0xbd, 0xe5, 0x80, 0xbc, 0x12, 0x36, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x45, 0x52,
	0x54, 0x41, 0x49, 0x4e, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x10, 0xfb, 0x01, 0x1a, 0x10, 0xaa, 0xb6,
	0x18, 0x0c, 0xe5, 0xbf, 0x85, 0xe5, 0xae, 0x9a, 0xe6, 0x9a, 0xb4, 0xe5, 0x87, 0xbb, 0x12, 0x32,
	0x0a, 0x1b, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x5f, 0x4f, 0x52, 0x42, 0x10, 0xfc, 0x01,
	0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0xb2, 0xbb, 0xe7, 0x96, 0x97, 0xe6, 0xb3, 0x95, 0xe7,
	0x90, 0x83, 0x12, 0x34, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46,
	0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x4f, 0x52, 0x42, 0x10, 0xfd, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x8a, 0xa4, 0xe7,
	0x9b, 0xbe, 0xe6, 0xb3, 0x95, 0xe7, 0x90, 0x83, 0x12, 0x48, 0x0a, 0x25, 0x52, 0x45, 0x53, 0x5f,
	0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47,
	0x45, 0x10, 0xfe, 0x01, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe5, 0x9f, 0xba, 0xe4, 0xba, 0x8e,
	0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0xe6, 0x98, 0x9f, 0xe7, 0xba, 0xa7, 0xe5, 0xa2, 0x9e, 0xe4,
	0xbc, 0xa4, 0x12, 0x37, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46,
	0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x41, 0x44, 0x4c, 0x59, 0x5f,
	0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x10, 0xff, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8,
	0x87, 0xb4, 0xe6, 0xad, 0xbb, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0x12, 0x3f, 0x0a, 0x22, 0x52,
	0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x48, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x52, 0x41, 0x54,
	0x45, 0x10, 0x80, 0x02, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96,
	0xe5, 0xa2, 0x9e, 0xe7, 0x9b, 0x8a, 0xe6, 0x8a, 0xa4, 0xe7, 0x9b, 0xbe, 0x12, 0x58, 0x0a, 0x32,
	0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x44, 0x41, 0x4d, 0x41,
	0x47, 0x45, 0x10, 0x81, 0x02, 0x1a, 0x1f, 0xaa, 0xb6, 0x18, 0x1b, 0xe5, 0xb1, 0x9e, 0xe6, 0x80,
	0xa7, 0xe8, 0xbd, 0xac, 0xe6, 0x8d, 0xa2, 0xe6, 0x88, 0x90, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96,
	0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0x12, 0x63, 0x0a, 0x3a, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4b, 0x49,
	0x4c, 0x4c, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x4e, 0x55,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x41,
	0x52, 0x47, 0x45, 0x54, 0x10, 0x82, 0x02, 0x1a, 0x22, 0xaa, 0xb6, 0x18, 0x1e, 0xe6, 0x8a, 0x80,
	0xe8, 0x83, 0xbd, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0xe5, 0x90, 0x8c, 0xe4, 0xb8, 0x80, 0xe7,
	0x9b, 0xae, 0xe6, 0xa0, 0x87, 0xe8, 0xa1, 0xb0, 0xe5, 0x87, 0x8f, 0x12, 0x64, 0x0a, 0x38, 0x52,
	0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x48, 0x55, 0x52, 0x54, 0x5f, 0x4f, 0x52, 0x42, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43,
	0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x4f, 0x4e, 0x43, 0x45, 0x5f, 0x45, 0x41, 0x43, 0x48,
	0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x10, 0x83, 0x02, 0x1a, 0x25, 0xaa, 0xb6, 0x18, 0x21,
	0xe5, 0x8f, 0x97, 0xe5, 0x87, 0xbb, 0xe6, 0xb3, 0x95, 0xe7, 0x90, 0x83, 0xe6, 0x8c, 0x89, 0xe7,
	0x9b, 0xae, 0xe6, 0xa0, 0x87, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0xe9, 0x99, 0x90, 0xe5, 0x88,
	0xb6, 0x12, 0x46, 0x0a, 0x29, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55,
	0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x44, 0x49, 0x56, 0x49, 0x44, 0x45, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x84,
	0x02, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a, 0xe5, 0x88, 0x86,
	0xe6, 0x91, 0x8a, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0x12, 0x36, 0x0a, 0x1f, 0x52, 0x45, 0x53,
	0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x85, 0x02, 0x1a,
	0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe4, 0xbc, 0xa4, 0xe5, 0xae,
	0xb3, 0x12, 0x4b, 0x0a, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55,
	0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50,
	0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x55, 0x50, 0x50, 0x45, 0x52, 0x5f, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x10, 0x86, 0x02, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe4, 0xbf, 0xae, 0xe6,
	0x94, 0xb9, 0xe5, 0xb1, 0x9e, 0xe6, 0x80, 0xa7, 0xe4, 0xb8, 0x8a, 0xe9, 0x99, 0x90, 0x12, 0x59,
	0x0a, 0x30, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45,
	0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x54, 0x52, 0x41,
	0x54, 0x45, 0x10, 0x87, 0x02, 0x1a, 0x22, 0xaa, 0xb6, 0x18, 0x1e, 0xe6, 0x94, 0xb9, 0xe5, 0x8f,
	0x98, 0xe8, 0xbd, 0xac, 0xe5, 0x8c, 0x96, 0xe7, 0x8e, 0x87, 0xe7, 0x9a, 0x84, 0xe5, 0xbb, 0xb6,
	0xe8, 0xbf, 0x9f, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0x12, 0x4a, 0x0a, 0x29, 0x52, 0x45, 0x53,
	0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x4f, 0x56, 0x45, 0x52,
	0x4c, 0x41, 0x59, 0x4d, 0x41, 0x58, 0x10, 0x88, 0x02, 0x1a, 0x1a, 0xaa, 0xb6, 0x18, 0x16, 0xe6,
	0x94, 0xb9, 0xe5, 0x8f, 0x98, 0x42, 0x75, 0x66, 0x66, 0xe5, 0xb1, 0x82, 0xe6, 0x95, 0xb0, 0xe4,
	0xb8, 0x8a, 0xe9, 0x99, 0x90, 0x12, 0x4d, 0x0a, 0x2d, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49,
	0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x42, 0x41, 0x53, 0x45,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x89, 0x02, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe4,
	0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe5, 0xb1, 0x9e, 0xe6, 0x80, 0xa7, 0xe5, 0x9f, 0xba, 0xe7, 0xa1,
	0x80, 0xe5, 0x80, 0xbc, 0x12, 0x49, 0x0a, 0x26, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c,
	0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4f, 0x52, 0x42, 0x10, 0x8a,
	0x02, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe6, 0x8a, 0xa4, 0xe7, 0x9b, 0xbe, 0xe6, 0xb3, 0x95,
	0xe7, 0x90, 0x83, 0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a, 0xe6, 0x9d, 0xa5, 0xe6, 0xba, 0x90, 0x12,
	0x47, 0x0a, 0x24, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x4f, 0x52, 0x42, 0x10, 0x8b, 0x02, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18,
	0xe6, 0xb2, 0xbb, 0xe7, 0x96, 0x97, 0xe6, 0xb3, 0x95, 0xe7, 0x90, 0x83, 0xe7, 0xbe, 0x81, 0xe7,
	0xbb, 0x8a, 0xe6, 0x9d, 0xa5, 0xe6, 0xba, 0x90, 0x12, 0x1c, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x5f,
	0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c,
	0x41, 0x53, 0x54, 0x10, 0x8c, 0x02, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01,
	0x2a, 0x75, 0x0a, 0x0e, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x3d,
	0x0a, 0x1b, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x57, 0x41, 0x4e, 0x47, 0x5a, 0x48, 0x45, 0x58, 0x49, 0x41, 0x47, 0x55, 0x10, 0x01, 0x1a,
	0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe5, 0x9c, 0xba, 0xe6, 0x99, 0xaf, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0xe7, 0x8e, 0x8b, 0xe8, 0x80, 0x85, 0xe5, 0xb3, 0xa1, 0xe8, 0xb0, 0xb7, 0x1a, 0x08, 0x88,
	0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0x9c, 0x0c, 0x0a, 0x10, 0x52, 0x45, 0x53, 0x5f,
	0x46, 0x55, 0x4e, 0x43, 0x45, 0x46, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x14, 0x0a, 0x10,
	0x52, 0x45, 0x53, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x45, 0x46, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x2d, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x45, 0x46,
	0x54, 0x5f, 0x50, 0x48, 0x59, 0x41, 0x54, 0x4b, 0x50, 0x54, 0x10, 0x01, 0x1a, 0x13, 0xaa, 0xb6,
	0x18, 0x0f, 0xe7, 0x89, 0xa9, 0xe7, 0x90, 0x86, 0xe6, 0x94, 0xbb, 0xe5, 0x87, 0xbb, 0xe5, 0x8a,
	0x9b, 0x12, 0x2d, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x45, 0x46, 0x54,
	0x5f, 0x4d, 0x47, 0x43, 0x41, 0x54, 0x4b, 0x50, 0x54, 0x10, 0x02, 0x1a, 0x13, 0xaa, 0xb6, 0x18,
	0x0f, 0xe6, 0xb3, 0x95, 0xe6, 0x9c, 0xaf, 0xe6, 0x94, 0xbb, 0xe5, 0x87, 0xbb, 0xe5, 0x8a, 0x9b,
	0x12, 0x2d, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x45, 0x46, 0x54, 0x5f,
	0x50, 0x48, 0x59, 0x44, 0x45, 0x46, 0x50, 0x54, 0x10, 0x03, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f,
	0xe7, 0x89, 0xa9, 0xe7, 0x90, 0x86, 0xe9, 0x98, 0xb2, 0xe5, 0xbe, 0xa1, 0xe5, 0x8a, 0x9b, 0x12,
	0x2d, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x45, 0x46, 0x54, 0x5f, 0x4d,
	0x47, 0x43, 0x44, 0x45, 0x46, 0x50, 0x54, 0x10, 0x04, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe6,
	0xb3, 0x95, 0xe6, 0x9c, 0xaf, 0xe9, 0x98, 0xb2, 0xe5, 0xbe, 0xa1, 0xe5, 0x8a, 0x9b, 0x12, 0x27,
	0x0a, 0x11, 0x52, 0x45, 0x53, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x45, 0x46, 0x54, 0x5f, 0x4d, 0x41,
	0x58, 0x48, 0x50, 0x10, 0x05, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x9c, 0x80, 0xe5, 0xa4,
	0xa7, 0xe7, 0x94, 0x9f, 0xe5, 0x91, 0xbd, 0x12, 0x27, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x5f, 0x46,
	0x55, 0x4e, 0x43, 0x45, 0x46, 0x54, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x52, 0x41, 0x54, 0x45, 0x10,
	0x06, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe6, 0x9a, 0xb4, 0xe5, 0x87, 0xbb, 0xe7, 0x8e, 0x87,
	0x12, 0x34, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x45, 0x46, 0x54, 0x5f,
	0x50, 0x48, 0x59, 0x41, 0x52, 0x4d, 0x4f, 0x52, 0x48, 0x55, 0x52, 0x54, 0x10, 0x07, 0x1a, 0x16,
	0xaa, 0xb6, 0x18, 0x12, 0xe7, 0x89, 0xa9, 0xe7, 0x90, 0x86, 0xe9, 0x98, 0xb2, 0xe5, 0xbe, 0xa1,
	0xe7, 0xa9, 0xbf, 0xe9, 0x80, 0x8f, 0x12, 0x34, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x5f, 0x46, 0x55,
	0x4e, 0x43, 0x45, 0x46, 0x54, 0x5f, 0x4d, 0x47, 0x43, 0x41, 0x52, 0x4d, 0x4f, 0x52, 0x48, 0x55,
	0x52, 0x54, 0x10, 0x08, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0xb3, 0x95, 0xe6, 0x9c, 0xaf,
	0xe9, 0x98, 0xb2, 0xe5, 0xbe, 0xa1, 0xe7, 0xa9, 0xbf, 0xe9, 0x80, 0x8f, 0x12, 0x29, 0x0a, 0x13,
	0x52, 0x45, 0x53, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x45, 0x46, 0x54, 0x5f, 0x50, 0x48, 0x59, 0x56,
	0x41, 0x4d, 0x50, 0x10, 0x09, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe7, 0x89, 0xa9, 0xe7, 0x90,
	0x86, 0xe5, 0x90, 0xb8, 0xe8, 0xa1, 0x80, 0x12, 0x29, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x5f, 0x46,
	0x55, 0x4e, 0x43, 0x45, 0x46, 0x54, 0x5f, 0x4d, 0x47, 0x43, 0x56, 0x41, 0x4d, 0x50, 0x10, 0x0a,
	0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0xb3, 0x95, 0xe6, 0x9c, 0xaf, 0xe5, 0x90, 0xb8, 0xe8,
	0xa1, 0x80, 0x12, 0x27, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x45, 0x46,
	0x54, 0x5f, 0x41, 0x4e, 0x54, 0x49, 0x43, 0x52, 0x49, 0x54, 0x10, 0x0b, 0x1a, 0x0d, 0xaa, 0xb6,
	0x18, 0x09, 0xe6, 0x8a, 0x97, 0xe6, 0x9a, 0xb4, 0xe7, 0x8e, 0x87, 0x12, 0x29, 0x0a, 0x13, 0x52,
	0x45, 0x53, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x45, 0x46, 0x54, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x45,
	0x46, 0x54, 0x10, 0x0c, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x9a, 0xb4, 0xe5, 0x87, 0xbb,
	0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0x12, 0x23, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x5f, 0x46, 0x55,
	0x4e, 0x43, 0x45, 0x46, 0x54, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x53, 0x50, 0x44, 0x10, 0x0d, 0x1a,
	0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe7, 0xa7, 0xbb, 0xe9, 0x80, 0x9f, 0x12, 0x26, 0x0a, 0x16, 0x52,
	0x45, 0x53, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x45, 0x46, 0x54, 0x5f, 0x43, 0x54, 0x52, 0x4c, 0x52,
	0x45, 0x44, 0x55, 0x43, 0x45, 0x10, 0x0e, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe9, 0x9f, 0xa7,
	0xe6, 0x80, 0xa7, 0x12, 0x22, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x45,
	0x46, 0x54, 0x5f, 0x41, 0x54, 0x4b, 0x53, 0x50, 0x44, 0x10, 0x0f, 0x1a, 0x0a, 0xaa, 0xb6, 0x18,
	0x06, 0xe6, 0x94, 0xbb, 0xe9, 0x80, 0x9f, 0x12, 0x2a, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x5f, 0x46,
	0x55, 0x4e, 0x43, 0x45, 0x46, 0x54, 0x5f, 0x43, 0x44, 0x52, 0x45, 0x44, 0x55, 0x43, 0x45, 0x10,
	0x10, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x86, 0xb7, 0xe5, 0x8d, 0xb4, 0xe7, 0xbc, 0xa9,
	0xe5, 0x87, 0x8f, 0x12, 0x26, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x45,
	0x46, 0x54, 0x5f, 0x48, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x10, 0x11, 0x1a, 0x0d, 0xaa, 0xb6,
	0x18, 0x09, 0xe5, 0x91, 0xbd, 0xe4, 0xb8, 0xad, 0xe7, 0x8e, 0x87, 0x12, 0x2b, 0x0a, 0x18, 0x52,
	0x45, 0x53, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x45, 0x46, 0x54, 0x5f, 0x48, 0x69, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x41, 0x76, 0x6f, 0x69, 0x64, 0x10, 0x12, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe9,
	0x97, 0xaa, 0xe9, 0x81, 0xbf, 0xe7, 0x8e, 0x87, 0x12, 0x34, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x5f,
	0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x48, 0x55, 0x52, 0x54, 0x52, 0x45, 0x44,
	0x55, 0x43, 0x45, 0x52, 0x41, 0x54, 0x45, 0x10, 0x13, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe4,
	0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0xe5, 0x85, 0x8d, 0xe7, 0x96, 0xab, 0xe7, 0x8e, 0x87, 0x12, 0x34,
	0x0a, 0x1b, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x48,
	0x55, 0x52, 0x54, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x52, 0x41, 0x54, 0x45, 0x10, 0x14, 0x1a,
	0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0xe8, 0xbe, 0x93, 0xe5, 0x87,
	0xba, 0xe7, 0x8e, 0x87, 0x12, 0x28, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x50,
	0x45, 0x52, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x58, 0x45, 0x50, 0x10, 0x15, 0x1a, 0x10, 0xaa, 0xb6,
	0x18, 0x0c, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe8, 0x83, 0xbd, 0xe9, 0x87, 0x8f, 0x12, 0x3d,
	0x0a, 0x1e, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x50,
	0x48, 0x59, 0x41, 0x52, 0x4d, 0x4f, 0x52, 0x48, 0x55, 0x52, 0x54, 0x5f, 0x52, 0x41, 0x54, 0x45,
	0x10, 0x16, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe7, 0x89, 0xa9, 0xe7, 0x90, 0x86, 0xe9, 0x98,
	0xb2, 0xe5, 0xbe, 0xa1, 0xe7, 0xa9, 0xbf, 0xe9, 0x80, 0x8f, 0xe7, 0x8e, 0x87, 0x12, 0x3d, 0x0a,
	0x1e, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x4d, 0x47,
	0x43, 0x41, 0x52, 0x4d, 0x4f, 0x52, 0x48, 0x55, 0x52, 0x54, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10,
	0x17, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe6, 0xb3, 0x95, 0xe6, 0x9c, 0xaf, 0xe9, 0x98, 0xb2,
	0xe5, 0xbe, 0xa1, 0xe7, 0xa9, 0xbf, 0xe9, 0x80, 0x8f, 0xe7, 0x8e, 0x87, 0x12, 0x3b, 0x0a, 0x1f,
	0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x43,
	0x4f, 0x56, 0x45, 0x52, 0x59, 0x47, 0x41, 0x49, 0x4e, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x10,
	0x18, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe5, 0xa2, 0x9e,
	0xe7, 0x9b, 0x8a, 0xe6, 0x81, 0xa2, 0xe5, 0xa4, 0x8d, 0x12, 0x42, 0x0a, 0x20, 0x52, 0x45, 0x53,
	0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45,
	0x52, 0x59, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x10, 0x19, 0x1a,
	0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe5, 0xaf, 0xb9, 0xe4, 0xbb, 0x96, 0xe4, 0xba, 0xba, 0xe6, 0x81,
	0xa2, 0xe5, 0xa4, 0x8d, 0xe5, 0xa2, 0x9e, 0xe7, 0x9b, 0x8a, 0xe7, 0x8e, 0x87, 0x12, 0x2b, 0x0a,
	0x15, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x52, 0x45,
	0x41, 0x4c, 0x56, 0x41, 0x4d, 0x50, 0x10, 0x1a, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe7, 0x9c,
	0x9f, 0xe4, 0xbc, 0xa4, 0xe5, 0x90, 0xb8, 0xe8, 0xa1, 0x80, 0x12, 0x39, 0x0a, 0x1d, 0x52, 0x45,
	0x53, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x5f,
	0x44, 0x45, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x1b, 0x1a, 0x16, 0xaa,
	0xb6, 0x18, 0x12, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe5, 0x87, 0x8f, 0xe7, 0x9b, 0x8a, 0xe6,
	0x81, 0xa2, 0xe5, 0xa4, 0x8d, 0x12, 0x2d, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f,
	0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x4d, 0x41, 0x47, 0x49, 0x43,
	0x10, 0x1c, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe6, 0xb3,
	0x95, 0xe5, 0x8a, 0x9b, 0x12, 0x40, 0x0a, 0x24, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x50,
	0x45, 0x52, 0x54, 0x59, 0x5f, 0x48, 0x55, 0x52, 0x54, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x45, 0x46,
	0x46, 0x45, 0x43, 0x54, 0x5f, 0x45, 0x4e, 0x48, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x1d, 0x1a, 0x16,
	0xaa, 0xb6, 0x18, 0x12, 0xe6, 0x9a, 0xb4, 0xe5, 0x87, 0xbb, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3,
	0xe6, 0x98, 0x93, 0xe4, 0xbc, 0xa4, 0x12, 0x3f, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52,
	0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x48, 0x55, 0x52, 0x54, 0x5f, 0x43, 0x52, 0x49, 0x54,
	0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x57, 0x45, 0x41, 0x4b, 0x45, 0x4e, 0x10, 0x1e, 0x1a,
	0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0x9a, 0xb4, 0xe5, 0x87, 0xbb, 0xe4, 0xbc, 0xa4, 0xe5, 0xae,
	0xb3, 0xe5, 0x87, 0x8f, 0xe4, 0xbc, 0xa4, 0x12, 0x23, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x5f, 0x46,
	0x55, 0x4e, 0x43, 0x45, 0x46, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4c, 0x41, 0x53,
	0x54, 0x10, 0x1f, 0x1a, 0x07, 0xaa, 0xb6, 0x18, 0x03, 0x4d, 0x61, 0x78, 0x1a, 0x08, 0x88, 0xf9,
	0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0x88, 0x01, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x5f, 0x46,
	0x55, 0x4e, 0x43, 0x45, 0x46, 0x54, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x45, 0x46,
	0x54, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x53, 0x5f, 0x46, 0x55, 0x4e, 0x43,
	0x45, 0x46, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x64, 0x12, 0x2a, 0x0a, 0x14, 0x52,
	0x45, 0x53, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x45, 0x46, 0x54, 0x5f, 0x41, 0x54, 0x4b, 0x52, 0x41,
	0x4e, 0x47, 0x45, 0x10, 0x65, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x94, 0xbb, 0xe5, 0x87,
	0xbb, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b,
	0x01, 0x2a, 0xa4, 0x02, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x45, 0x46,
	0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x1f, 0x0a, 0x1b,
	0x52, 0x45, 0x53, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x45, 0x46, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x2d, 0x0a,
	0x1d, 0x52, 0x45, 0x53, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x45, 0x46, 0x54, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x01,
	0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0x12, 0x34, 0x0a, 0x21,
	0x52, 0x45, 0x53, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x45, 0x46, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x41, 0x47,
	0x45, 0x10, 0x02, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe7, 0x99, 0xbe, 0xe5, 0x88, 0x86, 0xe6,
	0xaf, 0x94, 0x12, 0x35, 0x0a, 0x22, 0x52, 0x45, 0x53, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x45, 0x46,
	0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x53,
	0x49, 0x53, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x03, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09,
	0xe4, 0xb8, 0x87, 0xe5, 0x88, 0x86, 0xe6, 0xaf, 0x94, 0x12, 0x43, 0x0a, 0x2a, 0x52, 0x45, 0x53,
	0x5f, 0x46, 0x55, 0x4e, 0x43, 0x45, 0x46, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x50, 0x4c, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x52,
	0x43, 0x45, 0x4e, 0x54, 0x41, 0x47, 0x45, 0x10, 0x04, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe4,
	0xb8, 0x80, 0xe5, 0x8a, 0xa0, 0xe7, 0x99, 0xbe, 0xe5, 0x88, 0x86, 0xe6, 0xaf, 0x94, 0x1a, 0x08,
	0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xad, 0x1e, 0x0a, 0x14, 0x52, 0x45, 0x53,
	0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00,
	0x12, 0x5a, 0x0a, 0x30, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x44, 0x5f, 0x48, 0x45, 0x52, 0x4f,
	0x5f, 0x50, 0x4f, 0x53, 0x53, 0x45, 0x53, 0x53, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x24, 0xaa, 0xb6, 0x18, 0x20, 0x54, 0x44, 0xe5, 0x8d,
	0x95, 0xe4, 0xb8, 0xaa, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0x9a,
	0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0xe4, 0xb8, 0xaa, 0xe6, 0x95, 0xb0, 0x12, 0x3f, 0x0a, 0x23,
	0x52, 0x45, 0x53, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x49, 0x54,
	0x5f, 0x48, 0x50, 0x10, 0x08, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe7, 0x8e, 0xa9, 0xe5, 0xae,
	0xb6, 0xe9, 0x80, 0x80, 0xe5, 0x87, 0xba, 0xe8, 0xa1, 0x80, 0xe9, 0x87, 0x8f, 0x12, 0x45, 0x0a,
	0x2b, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x44, 0x5f, 0x44, 0x45, 0x41, 0x44, 0x5f, 0x45, 0x46,
	0x46, 0x45, 0x43, 0x54, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x49, 0x44, 0x10, 0x09, 0x1a, 0x14,
	0xaa, 0xb6, 0x18, 0x10, 0x54, 0x44, 0xe6, 0xad, 0xbb, 0xe4, 0xba, 0xa1, 0xe7, 0x89, 0xb9, 0xe6,
	0x95, 0x88, 0x49, 0x44, 0x12, 0x52, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x4c, 0x4f, 0x42,
	0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x43,
	0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x0c, 0x1a, 0x2e, 0xaa, 0xb6, 0x18, 0x2a, 0xe6, 0x88,
	0x98, 0xe6, 0x96, 0x97, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe6, 0xad, 0xa3, 0xe8, 0xb5, 0x9b,
	0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe8, 0xa1, 0x8c, 0xe4, 0xb8, 0xba, 0xe7, 0xad, 0x89, 0xe5,
	0xbe, 0x85, 0xe6, 0x97, 0xb6, 0xe9, 0x95, 0xbf, 0x12, 0x52, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x5f,
	0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x10, 0x0d, 0x1a, 0x2e, 0xaa, 0xb6,
	0x18, 0x2a, 0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe6, 0xad,
	0xa3, 0xe8, 0xb5, 0x9b, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0xe8, 0xa1, 0x8c, 0xe4, 0xb8, 0xba,
	0xe7, 0xad, 0x89, 0xe5, 0xbe, 0x85, 0xe6, 0x97, 0xb6, 0xe9, 0x95, 0xbf, 0x12, 0x53, 0x0a, 0x1f,
	0x52, 0x45, 0x53, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x10,
	0x0e, 0x1a, 0x2e, 0xaa, 0xb6, 0x18, 0x2a, 0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97, 0xe5, 0x9b, 0x9e,
	0xe5, 0x90, 0x88, 0xe6, 0xad, 0xa3, 0xe8, 0xb5, 0x9b, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0xe8,
	0xa1, 0x8c, 0xe4, 0xb8, 0xba, 0xe7, 0xad, 0x89, 0xe5, 0xbe, 0x85, 0xe6, 0x97, 0xb6, 0xe9, 0x95,
	0xbf, 0x12, 0x56, 0x0a, 0x22, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x52,
	0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x0f, 0x1a, 0x2e, 0xaa, 0xb6, 0x18, 0x2a, 0xe6,
	0x88, 0x98, 0xe6, 0x96, 0x97, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe6, 0xad, 0xa3, 0xe8, 0xb5,
	0x9b, 0xe8, 0x81, 0x8c, 0xe4, 0xb8, 0x9a, 0xe8, 0xa1, 0x8c, 0xe4, 0xb8, 0xba, 0xe7, 0xad, 0x89,
	0xe5, 0xbe, 0x85, 0xe6, 0x97, 0xb6, 0xe9, 0x95, 0xbf, 0x12, 0x56, 0x0a, 0x22, 0x52, 0x45, 0x53,
	0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x41, 0x53, 0x53, 0x41, 0x53, 0x53, 0x49, 0x4e, 0x10,
	0x10, 0x1a, 0x2e, 0xaa, 0xb6, 0x18, 0x2a, 0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97, 0xe5, 0x9b, 0x9e,
	0xe5, 0x90, 0x88, 0xe6, 0xad, 0xa3, 0xe8, 0xb5, 0x9b, 0xe5, 0x88, 0xba, 0xe5, 0xae, 0xa2, 0xe8,
	0xa1, 0x8c, 0xe4, 0xb8, 0xba, 0xe7, 0xad, 0x89, 0xe5, 0xbe, 0x85, 0xe6, 0x97, 0xb6, 0xe9, 0x95,
	0xbf, 0x12, 0x53, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x43,
	0x48, 0x45, 0x53, 0x53, 0x10, 0x11, 0x1a, 0x2e, 0xaa, 0xb6, 0x18, 0x2a, 0xe6, 0x88, 0x98, 0xe6,
	0x96, 0x97, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe6, 0xad, 0xa3, 0xe8, 0xb5, 0x9b, 0xe6, 0xa3,
	0x8b, 0xe5, 0xad, 0x90, 0xe8, 0xa1, 0x8c, 0xe4, 0xb8, 0xba, 0xe7, 0xad, 0x89, 0xe5, 0xbe, 0x85,
	0xe6, 0x97, 0xb6, 0xe9, 0x95, 0xbf, 0x12, 0x57, 0x0a, 0x31, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x4c,
	0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x52, 0x4f, 0x4a, 0x38, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44,
	0x52, 0x4f, 0x50, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x31, 0x10, 0x14, 0x1a, 0x20, 0xaa,
	0xb6, 0x18, 0x1c, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe5, 0xb8, 0x83, 0xe9,
	0x98, 0xb5, 0xe6, 0x94, 0xbe, 0xe4, 0xb8, 0x8b, 0xe7, 0x89, 0xb9, 0xe6, 0x95, 0x88, 0x31, 0x12,
	0x57, 0x0a, 0x31, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x38, 0x5f, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x45, 0x46, 0x46,
	0x45, 0x43, 0x54, 0x32, 0x10, 0x15, 0x1a, 0x20, 0xaa, 0xb6, 0x18, 0x1c, 0xe8, 0x87, 0xaa, 0xe8,
	0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe5, 0xb8, 0x83, 0xe9, 0x98, 0xb5, 0xe6, 0x94, 0xbe, 0xe4, 0xb8,
	0x8b, 0xe7, 0x89, 0xb9, 0xe6, 0x95, 0x88, 0x32, 0x12, 0x6b, 0x0a, 0x3d, 0x52, 0x45, 0x53, 0x5f,
	0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x45, 0x4c, 0x45,
	0x50, 0x4f, 0x52, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x2b, 0x1a, 0x28, 0xaa, 0xb6, 0x18,
	0x24, 0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe7, 0x8a, 0xb6,
	0xe6, 0x80, 0x81, 0xe5, 0x87, 0x86, 0xe5, 0xa4, 0x87, 0xe4, 0xbc, 0xa0, 0xe9, 0x80, 0x81, 0xe6,
	0x97, 0xb6, 0xe9, 0x95, 0xbf, 0x12, 0x65, 0x0a, 0x37, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x4c, 0x4f,
	0x42, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41,
	0x54, 0x54, 0x4c, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x2c, 0x1a, 0x28, 0xaa, 0xb6, 0x18, 0x24, 0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97, 0xe5, 0x9b,
	0x9e, 0xe5, 0x90, 0x88, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe7, 0xbb, 0x93, 0xe7, 0xae, 0x97,
	0xe9, 0x98, 0xb6, 0xe6, 0xae, 0xb5, 0xe6, 0x97, 0xb6, 0xe9, 0x95, 0xbf, 0x12, 0x63, 0x0a, 0x35,
	0x52, 0x45, 0x53, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x4e,
	0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x44, 0x55, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x2d, 0x1a, 0x28, 0xaa, 0xb6, 0x18, 0x24, 0xe6, 0x88, 0x98,
	0xe6, 0x96, 0x97, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe9,
	0x94, 0x81, 0xe5, 0xae, 0x9a, 0xe9, 0x98, 0xb6, 0xe6, 0xae, 0xb5, 0xe6, 0x97, 0xb6, 0xe9, 0x95,
	0xbf, 0x12, 0x50, 0x0a, 0x30, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x44, 0x5f, 0x46, 0x4f, 0x52,
	0x42, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55,
	0x46, 0x46, 0x5f, 0x49, 0x44, 0x10, 0x2e, 0x1a, 0x1a, 0xaa, 0xb6, 0x18, 0x16, 0x54, 0x44, 0xe5,
	0xb1, 0x8f, 0xe8, 0x94, 0xbd, 0xe7, 0xa2, 0xb0, 0xe6, 0x92, 0x9e, 0xe6, 0x95, 0x88, 0xe6, 0x9e,
	0x9c, 0x49, 0x44, 0x12, 0x50, 0x0a, 0x2b, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41,
	0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a,
	0x38, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x53, 0x43, 0x4f,
	0x52, 0x45, 0x10, 0x2f, 0x1a, 0x1f, 0xaa, 0xb6, 0x18, 0x1b, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0,
	0xe6, 0xa3, 0x8b, 0xe5, 0x9f, 0xba, 0xe7, 0xa1, 0x80, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0xe5,
	0x88, 0x86, 0xe6, 0x95, 0xb0, 0x12, 0x53, 0x0a, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x4c, 0x4f,
	0x42, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x4a, 0x38, 0x5f, 0x41, 0x44, 0x56, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x45, 0x51, 0x55, 0x49,
	0x50, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x30, 0x1a, 0x1f, 0xaa, 0xb6, 0x18, 0x1b, 0xe8,
	0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe5, 0x90, 0x88, 0xe6, 0x88, 0x90, 0xe8, 0xa3,
	0x85, 0xe5, 0xa4, 0x87, 0xe5, 0x88, 0x86, 0xe6, 0x95, 0xb0, 0x12, 0x70, 0x0a, 0x3f, 0x52, 0x45,
	0x53, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x57, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f,
	0x4f, 0x50, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x5f, 0x48, 0x45,
	0x52, 0x4f, 0x5f, 0x4d, 0x45, 0x53, 0x48, 0x5f, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x10, 0x31, 0x1a,
	0x2b, 0xaa, 0xb6, 0x18, 0x27, 0xe8, 0xa7, 0x82, 0xe7, 0x9c, 0x8b, 0xe7, 0x8e, 0xa9, 0xe5, 0xae,
	0xb6, 0xe5, 0xaf, 0xb9, 0xe6, 0x89, 0x8b, 0xe5, 0xa4, 0x87, 0xe6, 0x88, 0x98, 0xe5, 0x8c, 0xba,
	0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe7, 0xbc, 0xa9, 0xe6, 0x94, 0xbe, 0x12, 0x4c, 0x0a, 0x28,
	0x52, 0x45, 0x53, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x44, 0x5f, 0x44, 0x52, 0x41, 0x47, 0x5f, 0x48, 0x45, 0x52,
	0x4f, 0x5f, 0x48, 0x45, 0x49, 0x47, 0x48, 0x54, 0x10, 0x33, 0x1a, 0x1e, 0xaa, 0xb6, 0x18, 0x1a,
	0x54, 0x44, 0xe6, 0x8b, 0x96, 0xe6, 0x8b, 0xbd, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe6, 0x82,
	0xac, 0xe7, 0xa9, 0xba, 0xe9, 0xab, 0x98, 0xe5, 0xba, 0xa6, 0x12, 0x65, 0x0a, 0x36, 0x52, 0x45,
	0x53, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x44, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x10, 0x34, 0x1a, 0x29, 0xaa, 0xb6, 0x18, 0x25, 0xe8, 0x87, 0xaa, 0xe8,
	0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0x69, 0x63, 0x6f, 0x6e, 0xe7,
	0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97,
	0xb4, 0x12, 0x67, 0x0a, 0x38, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x44, 0x5f, 0x45, 0x51, 0x55,
	0x49, 0x50, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x49, 0x47,
	0x47, 0x45, 0x52, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x35, 0x1a,
	0x29, 0xaa, 0xb6, 0x18, 0x25, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe8, 0xa3,
	0x85, 0xe5, 0xa4, 0x87, 0x69, 0x63, 0x6f, 0x6e, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe6, 0x98,
	0xbe, 0xe7, 0xa4, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x12, 0x50, 0x0a, 0x2b, 0x52, 0x45,
	0x53, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f,
	0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x3a, 0x1a, 0x1f, 0xaa, 0xb6, 0x18,
	0x1b, 0xe6, 0x8e, 0xa7, 0xe5, 0x88, 0xb6, 0xe6, 0x9d, 0xa1, 0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba,
	0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc, 0x12, 0x5f, 0x0a, 0x31,
	0x52, 0x45, 0x53, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x4f, 0x44, 0x5f,
	0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c,
	0x44, 0x10, 0x3b, 0x1a, 0x28, 0xaa, 0xb6, 0x18, 0x24, 0xe8, 0x87, 0xaa, 0xe5, 0xb7, 0xb1, 0xe8,
	0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe5, 0xa4, 0xa7, 0xe9, 0xa2, 0x9d, 0xe6, 0x89, 0xa3, 0xe8, 0xa1,
	0x80, 0xe8, 0xa1, 0xa8, 0xe7, 0x8e, 0xb0, 0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc, 0x12, 0x63, 0x0a,
	0x35, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x4d, 0x41, 0x54, 0x45, 0x5f, 0x42,
	0x4c, 0x4f, 0x4f, 0x44, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x52,
	0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x3c, 0x1a, 0x28, 0xaa, 0xb6, 0x18, 0x24, 0xe9, 0x98,
	0x9f, 0xe5, 0x8f, 0x8b, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe5, 0xa4, 0xa7, 0xe9, 0xa2, 0x9d,
	0xe6, 0x89, 0xa3, 0xe8, 0xa1, 0x80, 0xe8, 0xa1, 0xa8, 0xe7, 0x8e, 0xb0, 0xe9, 0x98, 0x88, 0xe5,
	0x80, 0xbc, 0x12, 0x5f, 0x0a, 0x31, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x4d, 0x59, 0x5f,
	0x42, 0x4c, 0x4f, 0x4f, 0x44, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x48,
	0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x3d, 0x1a, 0x28, 0xaa, 0xb6, 0x18, 0x24, 0xe6,
	0x95, 0x8c, 0xe4, 0xba, 0xba, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe5, 0xa4, 0xa7, 0xe9, 0xa2,
	0x9d, 0xe6, 0x89, 0xa3, 0xe8, 0xa1, 0x80, 0xe8, 0xa1, 0xa8, 0xe7, 0x8e, 0xb0, 0xe9, 0x98, 0x88,
	0xe5, 0x80, 0xbc, 0x12, 0x57, 0x0a, 0x29, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41,
	0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e,
	0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x46, 0x50, 0x53, 0x5f, 0x53, 0x48, 0x41, 0x4b, 0x45,
	0x10, 0x3e, 0x1a, 0x28, 0xaa, 0xb6, 0x18, 0x24, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xbc,
	0x80, 0xe5, 0x90, 0xaf, 0xe6, 0xa3, 0x80, 0xe6, 0xb5, 0x8b, 0xe5, 0xb8, 0xa7, 0xe7, 0x8e, 0x87,
	0xe6, 0x8a, 0x96, 0xe5, 0x8a, 0xa8, 0xe5, 0xbc, 0x80, 0xe5, 0x85, 0xb3, 0x12, 0x5d, 0x0a, 0x35,
	0x52, 0x45, 0x53, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f,
	0x46, 0x50, 0x53, 0x5f, 0x53, 0x48, 0x41, 0x4b, 0x45, 0x5f, 0x52, 0x45, 0x56, 0x45, 0x52, 0x54,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x10, 0x3f, 0x1a, 0x22, 0xaa, 0xb6, 0x18, 0x1e, 0xe6, 0xa3, 0x80,
	0xe6, 0xb5, 0x8b, 0xe5, 0xb8, 0xa7, 0xe7, 0x8e, 0x87, 0xe6, 0x8a, 0x96, 0xe5, 0x8a, 0xa8, 0xe8,
	0xbf, 0x98, 0xe5, 0x8e, 0x9f, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x12, 0x55, 0x0a, 0x33, 0x52,
	0x45, 0x53, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x46,
	0x50, 0x53, 0x5f, 0x53, 0x48, 0x41, 0x4b, 0x45, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e,
	0x43, 0x59, 0x10, 0x40, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe6, 0xa3, 0x80, 0xe6, 0xb5, 0x8b,
	0xe5, 0xb8, 0xa7, 0xe7, 0x8e, 0x87, 0xe6, 0x8a, 0x96, 0xe5, 0x8a, 0xa8, 0xe9, 0xa2, 0x91, 0xe7,
	0x8e, 0x87, 0x12, 0x6e, 0x0a, 0x37, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x57, 0x5f, 0x4d,
	0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x41, 0x52,
	0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x41, 0x1a,
	0x31, 0xaa, 0xb6, 0x18, 0x2d, 0xe4, 0xbd, 0x8e, 0xe5, 0x86, 0x85, 0xe5, 0xad, 0x98, 0xe8, 0xae,
	0xbe, 0xe5, 0xa4, 0x87, 0xe7, 0xb2, 0x92, 0xe5, 0xad, 0x90, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6,
	0xe4, 0xb8, 0x80, 0xe5, 0xbe, 0x8b, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe4, 0xbd, 0x8e, 0xe9,
	0x85, 0x8d, 0x12, 0x53, 0x0a, 0x28, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x57, 0x5f, 0x4d,
	0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x10, 0x42,
	0x1a, 0x25, 0xaa, 0xb6, 0x18, 0x21, 0xe4, 0xbd, 0x8e, 0xe5, 0x86, 0x85, 0xe5, 0xad, 0x98, 0xe8,
	0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe7, 0xad, 0x96, 0xe7, 0x95, 0xa5, 0xe6, 0x98, 0xaf, 0xe5, 0x90,
	0xa6, 0xe5, 0x90, 0xaf, 0xe7, 0x94, 0xa8, 0x12, 0x6f, 0x0a, 0x38, 0x52, 0x45, 0x53, 0x5f, 0x47,
	0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x48, 0x44, 0x5f, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43,
	0x4c, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f,
	0x4e, 0x55, 0x4d, 0x10, 0x43, 0x1a, 0x31, 0xaa, 0xb6, 0x18, 0x2d, 0xe9, 0xab, 0x98, 0xe7, 0x94,
	0xbb, 0xe8, 0xb4, 0xa8, 0xe4, 0xb8, 0x8b, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe7, 0xb2, 0x92,
	0xe5, 0xad, 0x90, 0xe9, 0x99, 0x8d, 0xe9, 0x85, 0x8d, 0xe7, 0x9a, 0x84, 0xe7, 0xb2, 0x92, 0xe5,
	0xad, 0x90, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x12, 0x77, 0x0a, 0x3d, 0x52, 0x45, 0x53, 0x5f,
	0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x48, 0x44, 0x5f, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f,
	0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x52,
	0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x44, 0x1a, 0x34, 0xaa, 0xb6, 0x18,
	0x30, 0xe9, 0x9d, 0x9e, 0xe9, 0xab, 0x98, 0xe7, 0x94, 0xbb, 0xe8, 0xb4, 0xa8, 0xe4, 0xb8, 0x8b,
	0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe7, 0xb2, 0x92, 0xe5, 0xad, 0x90, 0xe9, 0x99, 0x8d, 0xe9,
	0x85, 0x8d, 0xe7, 0x9a, 0x84, 0xe7, 0xb2, 0x92, 0xe5, 0xad, 0x90, 0xe6, 0x95, 0xb0, 0xe9, 0x87,
	0x8f, 0x12, 0x57, 0x0a, 0x38, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43,
	0x4c, 0x45, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x45, 0x1a,
	0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe7, 0x89, 0xb9, 0xe6, 0x95, 0x88, 0xe6, 0xb8, 0xb2, 0xe6, 0x9f,
	0x93, 0xe5, 0xb1, 0x82, 0xe7, 0xba, 0xa7, 0xe5, 0x80, 0xbc, 0x12, 0x4b, 0x0a, 0x26, 0x52, 0x45,
	0x53, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x48, 0x44, 0x52, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x10, 0x46, 0x1a, 0x1f, 0xaa, 0xb6, 0x18, 0x1b, 0x48, 0x44, 0x52, 0xe5,
	0xbd, 0xb1, 0xe5, 0x93, 0x8d, 0xe7, 0x89, 0xb9, 0xe6, 0x95, 0x88, 0xe5, 0xbc, 0xba, 0xe5, 0xba,
	0xa6, 0xe7, 0xb3, 0xbb, 0xe6, 0x95, 0xb0, 0x12, 0x57, 0x0a, 0x35, 0x52, 0x45, 0x53, 0x5f, 0x47,
	0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x4f, 0x55, 0x53, 0x5f, 0x57,
	0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x42, 0x52, 0x4f, 0x43, 0x41, 0x53, 0x54,
	0x10, 0x4d, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x8f, 0xe8, 0xbf,
	0x9e, 0xe8, 0x83, 0x9c, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0xe6, 0x92, 0xad, 0xe6, 0x8a, 0xa5,
	0x12, 0x45, 0x0a, 0x26, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x42, 0x45, 0x47, 0x49,
	0x4e, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x4e, 0x1a, 0x19, 0xaa, 0xb6,
	0x18, 0x15, 0xe6, 0x88, 0x98, 0xe5, 0x89, 0x8d, 0xe8, 0xa1, 0xa8, 0xe6, 0xbc, 0x94, 0xe6, 0x80,
	0xbb, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x12, 0x3d, 0x0a, 0x24, 0x52, 0x45, 0x53, 0x5f, 0x47,
	0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4f, 0x56, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x10,
	0x4f, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe5, 0x8a, 0xa0, 0xe6, 0x97, 0xb6, 0xe8, 0xb5, 0x9b,
	0xe9, 0x80, 0x9f, 0xe5, 0xba, 0xa6, 0x12, 0x3a, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x4c,
	0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x45, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x10, 0x50, 0x1a, 0x14, 0xaa, 0xb6,
	0x18, 0x10, 0xe6, 0x88, 0x98, 0xe6, 0x96, 0x97, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0x42, 0x55,
	0x46, 0x46, 0x12, 0x51, 0x0a, 0x29, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c,
	0x45, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x10,
	0x51, 0x1a, 0x22, 0xaa, 0xb6, 0x18, 0x1e, 0xe7, 0xbb, 0x93, 0xe7, 0xae, 0x97, 0xe6, 0x88, 0x98,
	0xe6, 0x96, 0x97, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0xe5, 0x90, 0xb8, 0xe8, 0x83, 0xbd, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x12, 0x4c, 0x0a, 0x2a, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x4c, 0x4f,
	0x42, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45,
	0x54, 0x54, 0x4c, 0x45, 0x5f, 0x41, 0x48, 0x45, 0x41, 0x44, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x50,
	0x4f, 0x52, 0x54, 0x10, 0x52, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe7, 0xbb, 0x93, 0xe7, 0xae,
	0x97, 0xe6, 0x8f, 0x90, 0xe5, 0x89, 0x8d, 0xe4, 0xbc, 0xa0, 0xe9, 0x80, 0x81, 0xe6, 0x97, 0xb6,
	0xe9, 0x97, 0xb4, 0x12, 0x6a, 0x0a, 0x3c, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41,
	0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54,
	0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50,
	0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x57, 0x48, 0x45, 0x4e, 0x46, 0x49, 0x47, 0x48, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0x53, 0x1a, 0x28, 0xaa, 0xb6, 0x18, 0x24, 0xe6, 0x88, 0x98, 0xe6, 0x96,
	0x97, 0xe4, 0xb8, 0xad, 0xe7, 0xa9, 0xbf, 0xe6, 0x88, 0xb4, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87,
	0xe4, 0xb8, 0x8d, 0xe5, 0x8d, 0xb3, 0xe6, 0x97, 0xb6, 0xe7, 0x94, 0x9f, 0xe6, 0x95, 0x88, 0x12,
	0x4d, 0x0a, 0x2b, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x42, 0x45, 0x47, 0x49, 0x4e,
	0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x54,
	0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe6, 0x88, 0x98, 0xe5, 0x89, 0x8d, 0xe9, 0xa2, 0x86, 0xe4,
	0xb8, 0xbb, 0xe8, 0xa1, 0xa8, 0xe6, 0xbc, 0x94, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x12, 0x3e,
	0x0a, 0x22, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x4e, 0x44, 0x5f, 0x59, 0x10, 0x55, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe9, 0xa2, 0x86, 0xe4,
	0xb8, 0xbb, 0xe5, 0x9c, 0xb0, 0xe8, 0xa1, 0xa8, 0xe9, 0xab, 0x98, 0xe5, 0xba, 0xa6, 0x1a, 0x08,
	0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xae, 0x03, 0x0a, 0x19, 0x52, 0x45, 0x53,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x2e, 0x0a, 0x1e, 0x52, 0x45,
	0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x53, 0x53, 0x10, 0x01, 0x1a, 0x0a,
	0xaa, 0xb6, 0x18, 0x06, 0xe5, 0xb0, 0x8f, 0xe4, 0xba, 0x8e, 0x12, 0x3a, 0x0a, 0x24, 0x52, 0x45,
	0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x45, 0x51, 0x55,
	0x41, 0x4c, 0x10, 0x02, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0xb0, 0x8f, 0xe4, 0xba, 0x8e,
	0xe7, 0xad, 0x89, 0xe4, 0xba, 0x8e, 0x12, 0x2f, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x03, 0x1a, 0x0a, 0xaa, 0xb6, 0x18,
	0x06, 0xe7, 0xad, 0x89, 0xe4, 0xba, 0x8e, 0x12, 0x30, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x47, 0x47, 0x45, 0x52, 0x10, 0x04, 0x1a, 0x0a, 0xaa,
	0xb6, 0x18, 0x06, 0xe5, 0xa4, 0xa7, 0xe4, 0xba, 0x8e, 0x12, 0x3c, 0x0a, 0x26, 0x52, 0x45, 0x53,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x45, 0x51,
	0x55, 0x41, 0x4c, 0x10, 0x05, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0xa4, 0xa7, 0xe4, 0xba,
	0x8e, 0xe7, 0xad, 0x89, 0xe4, 0xba, 0x8e, 0x12, 0x32, 0x0a, 0x22, 0x52, 0x45, 0x53, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x76, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x10, 0x06, 0x1a,
	0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe6, 0xba, 0xa2, 0xe5, 0x87, 0xba, 0x12, 0x22, 0x0a, 0x1e, 0x52,
	0x45, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x07, 0x1a,
	0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xc9, 0x01, 0x0a, 0x0d, 0x52, 0x45,
	0x53, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x19, 0x0a, 0x15, 0x52,
	0x45, 0x53, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x45,
	0x52, 0x4f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x10, 0x01, 0x1a,
	0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe8, 0xbe, 0x93, 0xe5, 0x87, 0xba, 0x12, 0x26, 0x0a, 0x16, 0x52,
	0x45, 0x53, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x41,
	0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0x85, 0xa8,
	0xe8, 0x83, 0xbd, 0x12, 0x24, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x45, 0x4e, 0x53, 0x45, 0x10, 0x03, 0x1a, 0x0a, 0xaa,
	0xb6, 0x18, 0x06, 0xe7, 0x94, 0x9f, 0xe5, 0xad, 0x98, 0x12, 0x20, 0x0a, 0x10, 0x52, 0x45, 0x53,
	0x5f, 0x48, 0x45, 0x52, 0x4f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x49, 0x44, 0x10, 0x04, 0x1a,
	0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe8, 0xbe, 0x85, 0xe5, 0x8a, 0xa9, 0x1a, 0x08, 0x88, 0xf9, 0x2b,
	0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xa0, 0x02, 0x0a, 0x0c, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x45,
	0x52, 0x4f, 0x5f, 0x4a, 0x4f, 0x42, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x45,
	0x52, 0x4f, 0x4a, 0x4f, 0x42, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x10,
	0x52, 0x45, 0x53, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x4a, 0x4f, 0x42, 0x5f, 0x54, 0x41, 0x4e, 0x4b,
	0x10, 0x01, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0x9d, 0xa6, 0xe5, 0x85, 0x8b, 0x12, 0x23,
	0x0a, 0x13, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x4f,
	0x4c, 0x44, 0x49, 0x45, 0x52, 0x10, 0x02, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe6, 0x88, 0x98,
	0xe5, 0xa3, 0xab, 0x12, 0x24, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x4a,
	0x4f, 0x42, 0x5f, 0x41, 0x53, 0x53, 0x41, 0x53, 0x53, 0x49, 0x4e, 0x10, 0x03, 0x1a, 0x0a, 0xaa,
	0xb6, 0x18, 0x06, 0xe5, 0x88, 0xba, 0xe5, 0xae, 0xa2, 0x12, 0x22, 0x0a, 0x12, 0x52, 0x45, 0x53,
	0x5f, 0x48, 0x45, 0x52, 0x4f, 0x4a, 0x4f, 0x42, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10,
	0x04, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe6, 0xb3, 0x95, 0xe5, 0xb8, 0x88, 0x12, 0x22, 0x0a,
	0x12, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x52, 0x43,
	0x48, 0x45, 0x52, 0x10, 0x05, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0xb0, 0x84, 0xe6, 0x89,
	0x8b, 0x12, 0x25, 0x0a, 0x0f, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x4a, 0x4f, 0x42,
	0x5f, 0x41, 0x49, 0x44, 0x10, 0x06, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0x81, 0x8c, 0xe4,
	0xb8, 0x9a, 0xe8, 0xbe, 0x85, 0xe5, 0x8a, 0xa9, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x53, 0x5f,
	0x48, 0x45, 0x52, 0x4f, 0x4a, 0x4f, 0x42, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x07, 0x1a, 0x08,
	0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xbf, 0x01, 0x0a, 0x17, 0x52, 0x45, 0x53,
	0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x44, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x5f, 0x41, 0x54, 0x54, 0x41,
	0x43, 0x4b, 0x44, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x39, 0x0a, 0x1d, 0x52, 0x45, 0x53,
	0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x44, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x45, 0x4c, 0x45, 0x45, 0x10, 0x01, 0x1a, 0x16, 0xaa, 0xb6,
	0x18, 0x12, 0xe6, 0x99, 0xae, 0xe6, 0x94, 0xbb, 0xe8, 0xbf, 0x91, 0xe6, 0x88, 0x98, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0x12, 0x3a, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x5f, 0x41, 0x54, 0x54, 0x41,
	0x43, 0x4b, 0x44, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x10, 0x02, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0x99,
	0xae, 0xe6, 0x94, 0xbb, 0xe8, 0xbf, 0x9c, 0xe7, 0xa8, 0x8b, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xc4, 0x01, 0x0a, 0x11, 0x52,
	0x45, 0x53, 0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x47, 0x52, 0x41, 0x44, 0x45,
	0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f,
	0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12,
	0x2b, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x47,
	0x52, 0x41, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x1a, 0x0d, 0xaa,
	0xb6, 0x18, 0x09, 0xe6, 0x99, 0xae, 0xe9, 0x80, 0x9a, 0xe6, 0x80, 0xaa, 0x12, 0x2a, 0x0a, 0x17,
	0x52, 0x45, 0x53, 0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x47, 0x52, 0x41, 0x44,
	0x45, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x54, 0x10, 0x02, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe5,
	0xae, 0x9d, 0xe7, 0xae, 0xb1, 0xe6, 0x80, 0xaa, 0x12, 0x2d, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x5f,
	0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x41, 0x44,
	0x56, 0x41, 0x4e, 0x43, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe9, 0xab,
	0x98, 0xe7, 0xba, 0xa7, 0xe6, 0x80, 0xaa, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b,
	0x01, 0x2a, 0xd7, 0x01, 0x0a, 0x0f, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x27, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x41, 0x4e,
	0x44, 0x4f, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x1a,
	0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe4, 0xb8, 0x8d, 0xe9, 0x9a, 0x8f, 0xe6, 0x9c, 0xba, 0x12, 0x2c,
	0x0a, 0x16, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c,
	0xe5, 0xae, 0x8c, 0xe5, 0x85, 0xa8, 0xe9, 0x9a, 0x8f, 0xe6, 0x9c, 0xba, 0x12, 0x2c, 0x0a, 0x16,
	0x52, 0x45, 0x53, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x49, 0x51, 0x55, 0x45, 0x10, 0x02, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x8e,
	0xbb, 0xe9, 0x87, 0x8d, 0xe9, 0x9a, 0x8f, 0xe6, 0x9c, 0xba, 0x12, 0x35, 0x0a, 0x19, 0x52, 0x45,
	0x53, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45,
	0x50, 0x55, 0x4e, 0x49, 0x51, 0x55, 0x45, 0x10, 0x03, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5,
	0x8f, 0x8d, 0xe5, 0xa4, 0x8d, 0xe5, 0x8e, 0xbb, 0xe9, 0x87, 0x8d, 0xe9, 0x9a, 0x8f, 0xe6, 0x9c,
	0xba, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0x67, 0x0a, 0x11, 0x52,
	0x45, 0x53, 0x5f, 0x41, 0x54, 0x4b, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x5f, 0x41, 0x54, 0x4b, 0x53, 0x50, 0x45, 0x45, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12,
	0x29, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x5f, 0x41, 0x54, 0x4b, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x01, 0x1a, 0x0d, 0xaa, 0xb6, 0x18,
	0x09, 0xe9, 0xab, 0x98, 0xe6, 0x94, 0xbb, 0xe9, 0x80, 0x9f, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01,
	0x90, 0xf9, 0x2b, 0x01, 0x2a, 0x9e, 0x02, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x5f, 0x44, 0x52, 0x4f,
	0x50, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x50,
	0x52, 0x4f, 0x42, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x15, 0x52, 0x45, 0x53,
	0x5f, 0x50, 0x52, 0x4f, 0x42, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x48, 0x52,
	0x45, 0x45, 0x10, 0x03, 0x1a, 0x0b, 0xaa, 0xb6, 0x18, 0x07, 0x33, 0xe6, 0xa6, 0x82, 0xe7, 0x8e,
	0x87, 0x12, 0x25, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x41, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x45, 0x4e, 0x10, 0x0a, 0x1a, 0x0c, 0xaa, 0xb6, 0x18, 0x08,
	0x31, 0x30, 0xe6, 0xa6, 0x82, 0xe7, 0x8e, 0x87, 0x12, 0x27, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x5f,
	0x50, 0x52, 0x4f, 0x42, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x46, 0x54,
	0x59, 0x10, 0x32, 0x1a, 0x0c, 0xaa, 0xb6, 0x18, 0x08, 0x35, 0x30, 0xe6, 0xa6, 0x82, 0xe7, 0x8e,
	0x87, 0x12, 0x2a, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x41, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x48, 0x55, 0x4e, 0x44, 0x52, 0x45, 0x44, 0x10, 0x64, 0x1a, 0x0d,
	0xaa, 0xb6, 0x18, 0x09, 0x31, 0x30, 0x30, 0xe6, 0xa6, 0x82, 0xe7, 0x8e, 0x87, 0x12, 0x2c, 0x0a,
	0x16, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x65, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe7,
	0xbb, 0x93, 0xe7, 0xae, 0x97, 0xe6, 0xa6, 0x82, 0xe7, 0x8e, 0x87, 0x1a, 0x08, 0x88, 0xf9, 0x2b,
	0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0x6f, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x5f, 0x4c, 0x4f, 0x47,
	0x49, 0x43, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x12, 0x24, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x5f, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x44, 0x10, 0x00, 0x1a, 0x07,
	0xaa, 0xb6, 0x18, 0x03, 0xe4, 0xb8, 0x8e, 0x12, 0x23, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x5f, 0x4c,
	0x4f, 0x47, 0x49, 0x43, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f,
	0x52, 0x10, 0x01, 0x1a, 0x07, 0xaa, 0xb6, 0x18, 0x03, 0xe6, 0x88, 0x96, 0x1a, 0x08, 0x88, 0xf9,
	0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0x5f, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x12, 0x1a, 0x0a, 0x07, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x10,
	0x00, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe6, 0xad, 0xa3, 0xe8, 0xbe, 0xbe, 0xe6, 0x88, 0x90,
	0x12, 0x1b, 0x0a, 0x08, 0x4f, 0x42, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x10, 0x01, 0x1a, 0x0d,
	0xaa, 0xb6, 0x18, 0x09, 0xe5, 0x8f, 0x8d, 0xe8, 0xbe, 0xbe, 0xe6, 0x88, 0x90, 0x1a, 0x08, 0x88,
	0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xd8, 0x01, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x5f,
	0x48, 0x45, 0x52, 0x4f, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x39, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x5f, 0x48,
	0x45, 0x52, 0x4f, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x5f, 0x46, 0x52, 0x4f, 0x4e, 0x54, 0x10, 0x00,
	0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x8e, 0xa8, 0xe8, 0x8d, 0x90, 0xe5, 0x89, 0x8d, 0xe6,
	0x8e, 0x92, 0x12, 0x3a, 0x0a, 0x24, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x52,
	0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6,
	0x18, 0x0c, 0xe6, 0x8e, 0xa8, 0xe8, 0x8d, 0x90, 0xe4, 0xb8, 0xad, 0xe6, 0x8e, 0x92, 0x12, 0x38,
	0x0a, 0x22, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d,
	0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x5f,
	0x54, 0x41, 0x49, 0x4c, 0x10, 0x02, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x8e, 0xa8, 0xe8,
	0x8d, 0x90, 0xe5, 0x90, 0x8e, 0xe6, 0x8e, 0x92, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9,
	0x2b, 0x01, 0x2a, 0x94, 0x13, 0x0a, 0x0d, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x12, 0x11, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x1a, 0x07,
	0xaa, 0xb6, 0x18, 0x03, 0xe6, 0x97, 0xa0, 0x12, 0x15, 0x0a, 0x05, 0x44, 0x69, 0x7a, 0x7a, 0x79,
	0x10, 0x01, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe6, 0x99, 0x95, 0xe7, 0x9c, 0xa9, 0x12, 0x18,
	0x0a, 0x08, 0x53, 0x6c, 0x6f, 0x77, 0x44, 0x6f, 0x77, 0x6e, 0x10, 0x02, 0x1a, 0x0a, 0xaa, 0xb6,
	0x18, 0x06, 0xe5, 0x87, 0x8f, 0xe9, 0x80, 0x9f, 0x12, 0x15, 0x0a, 0x05, 0x54, 0x61, 0x75, 0x6e,
	0x74, 0x10, 0x03, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0x98, 0xb2, 0xe8, 0xae, 0xbd, 0x12,
	0x14, 0x0a, 0x04, 0x46, 0x65, 0x61, 0x72, 0x10, 0x04, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe6,
	0x81, 0x90, 0xe6, 0x83, 0xa7, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x10,
	0x05, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0x86, 0xb0, 0xe5, 0x86, 0xbb, 0x12, 0x18, 0x0a,
	0x08, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x06, 0x1a, 0x0a, 0xaa, 0xb6, 0x18,
	0x06, 0xe5, 0x87, 0xbb, 0xe9, 0xa3, 0x9e, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x10, 0x07, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe6, 0xb2, 0x89, 0xe9, 0xbb, 0x98, 0x12,
	0x15, 0x0a, 0x05, 0x53, 0x74, 0x6f, 0x6e, 0x65, 0x10, 0x08, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06,
	0xe7, 0x9f, 0xb3, 0xe5, 0x8c, 0x96, 0x12, 0x26, 0x0a, 0x0b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x31, 0x10, 0x09, 0x1a, 0x15, 0xaa, 0xb6, 0x18, 0x11, 0xe5, 0x8a, 0xa0,
	0xe9, 0x80, 0x9f, 0xe3, 0x80, 0x81, 0x43, 0x44, 0xe5, 0x87, 0x8f, 0xe7, 0x9f, 0xad, 0x12, 0x1b,
	0x0a, 0x0b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x32, 0x10, 0x0a, 0x1a,
	0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0x8a, 0xa0, 0xe9, 0x80, 0x9f, 0x12, 0x1b, 0x0a, 0x0b, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x33, 0x10, 0x0b, 0x1a, 0x0a, 0xaa, 0xb6,
	0x18, 0x06, 0xe5, 0x9b, 0x9e, 0xe8, 0xa1, 0x80, 0x12, 0x2c, 0x0a, 0x0b, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x34, 0x10, 0x0c, 0x1a, 0x1b, 0xaa, 0xb6, 0x18, 0x17, 0xe7,
	0x94, 0x9f, 0xe5, 0x91, 0xbd, 0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0, 0xe3, 0x80, 0x81, 0x43, 0x44,
	0xe5, 0x87, 0x8f, 0xe7, 0x9f, 0xad, 0x12, 0x30, 0x0a, 0x0b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x35, 0x10, 0x0d, 0x1a, 0x1f, 0xaa, 0xb6, 0x18, 0x1b, 0xe8, 0xbe, 0x93,
	0xe5, 0x87, 0xba, 0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0, 0xe3, 0x80, 0x81, 0xe6, 0x94, 0xbb, 0xe5,
	0x87, 0xbb, 0xe5, 0x87, 0x8f, 0xe9, 0x80, 0x9f, 0x12, 0x30, 0x0a, 0x0b, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x36, 0x10, 0x0e, 0x1a, 0x1f, 0xaa, 0xb6, 0x18, 0x1b, 0xe7,
	0x94, 0x9f, 0xe5, 0x91, 0xbd, 0xe5, 0x9b, 0x9e, 0xe5, 0xa4, 0x8d, 0xe3, 0x80, 0x81, 0xe8, 0xbe,
	0x93, 0xe5, 0x87, 0xba, 0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0, 0x12, 0x36, 0x0a, 0x0b, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x37, 0x10, 0x0f, 0x1a, 0x25, 0xaa, 0xb6, 0x18,
	0x21, 0xe6, 0x9a, 0xb4, 0xe5, 0x90, 0x9b, 0xc3, 0x97, 0x31, 0xef, 0xbc, 0x9a, 0xe6, 0xaf, 0x8f,
	0x32, 0xe7, 0xa7, 0x92, 0xe5, 0x9b, 0x9e, 0xe5, 0xa4, 0x8d, 0x31, 0x25, 0xe7, 0x94, 0x9f, 0xe5,
	0x91, 0xbd, 0x12, 0x33, 0x0a, 0x0b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x38, 0x10, 0x10, 0x1a, 0x22, 0xaa, 0xb6, 0x18, 0x1e, 0xe6, 0x9a, 0xb4, 0xe5, 0x90, 0x9b, 0xc3,
	0x97, 0x32, 0xef, 0xbc, 0x9a, 0xe6, 0x8e, 0xa8, 0xe5, 0xa1, 0x94, 0xe4, 0xbc, 0xa4, 0xe5, 0xae,
	0xb3, 0xe6, 0x8f, 0x90, 0xe5, 0x8d, 0x87, 0x12, 0x30, 0x0a, 0x0b, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x39, 0x10, 0x11, 0x1a, 0x1f, 0xaa, 0xb6, 0x18, 0x1b, 0xe6, 0x9a,
	0xb4, 0xe5, 0x90, 0x9b, 0xc3, 0x97, 0x33, 0xef, 0xbc, 0x9a, 0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0,
	0x33, 0x30, 0x25, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0x12, 0x2b, 0x0a, 0x0c, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x31, 0x30, 0x10, 0x12, 0x1a, 0x19, 0xaa, 0xb6, 0x18,
	0x15, 0xe5, 0x9b, 0x9e, 0xe5, 0xa4, 0x8d, 0xe7, 0x94, 0x9f, 0xe5, 0x91, 0xbd, 0xe4, 0xb8, 0x8e,
	0xe6, 0xb3, 0x95, 0xe5, 0x8a, 0x9b, 0x12, 0x28, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x31, 0x31, 0x10, 0x13, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe8, 0x8e,
	0xb7, 0xe5, 0xbe, 0x97, 0xe4, 0xb8, 0xbb, 0xe5, 0xae, 0xb0, 0xe4, 0xb9, 0x8b, 0xe6, 0x80, 0x92,
	0x12, 0x28, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x31, 0x32,
	0x10, 0x14, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0x85, 0xa8, 0xe9, 0x98, 0x9f, 0xe7, 0xbb,
	0x8f, 0xe9, 0xaa, 0x8c, 0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0, 0x12, 0x2e, 0x0a, 0x0c, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x31, 0x33, 0x10, 0x15, 0x1a, 0x1c, 0xaa, 0xb6,
	0x18, 0x18, 0xe8, 0x8e, 0xb7, 0xe5, 0xbe, 0x97, 0xe8, 0x85, 0xa5, 0xe7, 0xba, 0xa2, 0xe7, 0x9f,
	0xb3, 0xe5, 0x83, 0x8f, 0xe4, 0xb9, 0x8b, 0xe5, 0x8a, 0x9b, 0x12, 0x2e, 0x0a, 0x0c, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x31, 0x34, 0x10, 0x16, 0x1a, 0x1c, 0xaa, 0xb6,
	0x18, 0x18, 0xe8, 0x8e, 0xb7, 0xe5, 0xbe, 0x97, 0xe8, 0x94, 0x9a, 0xe8, 0x93, 0x9d, 0xe7, 0x9f,
	0xb3, 0xe5, 0x83, 0x8f, 0xe4, 0xb9, 0x8b, 0xe5, 0x8a, 0x9b, 0x12, 0x31, 0x0a, 0x0c, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x31, 0x35, 0x10, 0x17, 0x1a, 0x1f, 0xaa, 0xb6,
	0x18, 0x1b, 0xe5, 0x85, 0xa8, 0xe9, 0x98, 0x9f, 0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0, 0xe7, 0xbb,
	0x8f, 0xe9, 0xaa, 0x8c, 0xe5, 0x92, 0x8c, 0xe9, 0x87, 0x91, 0xe5, 0xb8, 0x81, 0x12, 0x1c, 0x0a,
	0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x31, 0x36, 0x10, 0x18, 0x1a,
	0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe9, 0x9a, 0x90, 0xe8, 0xba, 0xab, 0x12, 0x25, 0x0a, 0x0c, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x31, 0x37, 0x10, 0x19, 0x1a, 0x13, 0xaa,
	0xb6, 0x18, 0x0f, 0xe8, 0x8e, 0xb7, 0xe5, 0xbe, 0x97, 0xe5, 0xa4, 0xa7, 0xe7, 0x81, 0xab, 0xe7,
	0x90, 0x83, 0x12, 0x28, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x31, 0x38, 0x10, 0x1a, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe8, 0x8e, 0xb7, 0xe5, 0xbe, 0x97,
	0xe5, 0xa4, 0x9a, 0xe5, 0x8f, 0x91, 0xe7, 0x81, 0xab, 0xe7, 0x90, 0x83, 0x12, 0x1e, 0x0a, 0x0c,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x31, 0x39, 0x10, 0x1b, 0x1a, 0x0c,
	0xaa, 0xb6, 0x18, 0x08, 0x43, 0x44, 0xe5, 0x87, 0x8f, 0xe7, 0x9f, 0xad, 0x12, 0x28, 0x0a, 0x0c,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x32, 0x30, 0x10, 0x1c, 0x1a, 0x16,
	0xaa, 0xb6, 0x18, 0x12, 0xe5, 0x85, 0x8d, 0xe7, 0x96, 0xab, 0xe6, 0x8e, 0xa7, 0xe5, 0x88, 0xb6,
	0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x32, 0x31, 0x10, 0x1d, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe4, 0xbc,
	0xa4, 0xe5, 0xae, 0xb3, 0xe9, 0x99, 0x8d, 0xe4, 0xbd, 0x8e, 0x12, 0x1c, 0x0a, 0x0c, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x32, 0x32, 0x10, 0x1e, 0x1a, 0x0a, 0xaa, 0xb6,
	0x18, 0x06, 0xe6, 0xbf, 0x92, 0xe6, 0xad, 0xbb, 0x12, 0x27, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x32, 0x33, 0x10, 0x1f, 0x1a, 0x15, 0xaa, 0xb6, 0x18, 0x11,
	0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x32,
	0x33, 0x12, 0x27, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x32,
	0x34, 0x10, 0x20, 0x1a, 0x15, 0xaa, 0xb6, 0x18, 0x11, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4,
	0xb9, 0x89, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x32, 0x34, 0x12, 0x27, 0x0a, 0x0c, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x32, 0x35, 0x10, 0x21, 0x1a, 0x15, 0xaa, 0xb6,
	0x18, 0x11, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0x32, 0x35, 0x12, 0x27, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x32, 0x36, 0x10, 0x22, 0x1a, 0x15, 0xaa, 0xb6, 0x18, 0x11, 0xe8, 0x87, 0xaa, 0xe5, 0xae,
	0x9a, 0xe4, 0xb9, 0x89, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x32, 0x36, 0x12, 0x27, 0x0a, 0x0c,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x32, 0x37, 0x10, 0x23, 0x1a, 0x15,
	0xaa, 0xb6, 0x18, 0x11, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0x32, 0x37, 0x12, 0x27, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x32, 0x38, 0x10, 0x24, 0x1a, 0x15, 0xaa, 0xb6, 0x18, 0x11, 0xe8, 0x87, 0xaa,
	0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x32, 0x38, 0x12, 0x27,
	0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x32, 0x39, 0x10, 0x25,
	0x1a, 0x15, 0xaa, 0xb6, 0x18, 0x11, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe7,
	0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x32, 0x39, 0x12, 0x27, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x33, 0x30, 0x10, 0x26, 0x1a, 0x15, 0xaa, 0xb6, 0x18, 0x11, 0xe8,
	0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x33, 0x30,
	0x12, 0x27, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x33, 0x31,
	0x10, 0x27, 0x1a, 0x15, 0xaa, 0xb6, 0x18, 0x11, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9,
	0x89, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x33, 0x31, 0x12, 0x27, 0x0a, 0x0c, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x33, 0x32, 0x10, 0x28, 0x1a, 0x15, 0xaa, 0xb6, 0x18,
	0x11, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0x33, 0x32, 0x12, 0x27, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x33, 0x33, 0x10, 0x29, 0x1a, 0x15, 0xaa, 0xb6, 0x18, 0x11, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a,
	0xe4, 0xb9, 0x89, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x33, 0x33, 0x12, 0x27, 0x0a, 0x0c, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x33, 0x34, 0x10, 0x2a, 0x1a, 0x15, 0xaa,
	0xb6, 0x18, 0x11, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0x33, 0x34, 0x12, 0x27, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x33, 0x35, 0x10, 0x2b, 0x1a, 0x15, 0xaa, 0xb6, 0x18, 0x11, 0xe8, 0x87, 0xaa, 0xe5,
	0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x33, 0x35, 0x12, 0x27, 0x0a,
	0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x33, 0x36, 0x10, 0x2c, 0x1a,
	0x15, 0xaa, 0xb6, 0x18, 0x11, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0x33, 0x36, 0x12, 0x27, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x33, 0x37, 0x10, 0x2d, 0x1a, 0x15, 0xaa, 0xb6, 0x18, 0x11, 0xe8, 0x87,
	0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x33, 0x37, 0x12,
	0x27, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x33, 0x38, 0x10,
	0x2e, 0x1a, 0x15, 0xaa, 0xb6, 0x18, 0x11, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x33, 0x38, 0x12, 0x27, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x33, 0x39, 0x10, 0x2f, 0x1a, 0x15, 0xaa, 0xb6, 0x18, 0x11,
	0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x33,
	0x39, 0x12, 0x27, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x34,
	0x30, 0x10, 0x30, 0x1a, 0x15, 0xaa, 0xb6, 0x18, 0x11, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4,
	0xb9, 0x89, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x34, 0x30, 0x12, 0x28, 0x0a, 0x0c, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x34, 0x31, 0x10, 0x31, 0x1a, 0x16, 0xaa, 0xb6,
	0x18, 0x12, 0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0, 0xe7, 0x89, 0xa9, 0xe7, 0x90, 0x86, 0xe6, 0x94,
	0xbb, 0xe5, 0x87, 0xbb, 0x12, 0x28, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x34, 0x32, 0x10, 0x32, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0xa2, 0x9e, 0xe5,
	0x8a, 0xa0, 0xe6, 0xb3, 0x95, 0xe6, 0x9c, 0xaf, 0xe6, 0x94, 0xbb, 0xe5, 0x87, 0xbb, 0x12, 0x28,
	0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x34, 0x33, 0x10, 0x33,
	0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0, 0xe7, 0x89, 0xa9, 0xe7,
	0x90, 0x86, 0xe9, 0x98, 0xb2, 0xe5, 0xbe, 0xa1, 0x12, 0x28, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x34, 0x34, 0x10, 0x34, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12,
	0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0, 0xe6, 0xb3, 0x95, 0xe6, 0x9c, 0xaf, 0xe9, 0x98, 0xb2, 0xe5,
	0xbe, 0xa1, 0x12, 0x2b, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x34, 0x35, 0x10, 0x35, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0,
	0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe7, 0x94, 0x9f, 0xe5, 0x91, 0xbd, 0xe5, 0x80, 0xbc, 0x12,
	0x1a, 0x0a, 0x0a, 0x49, 0x6d, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x10, 0x36, 0x1a,
	0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0xae, 0x9a, 0xe8, 0xba, 0xab, 0x12, 0x1a, 0x0a, 0x0a, 0x4f,
	0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x37, 0x1a, 0x0a, 0xaa, 0xb6, 0x18,
	0x06, 0xe5, 0x8e, 0x8b, 0xe5, 0x88, 0xb6, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x6f, 0x77, 0x69, 0x6e,
	0x67, 0x10, 0x38, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe7, 0x89, 0xb5, 0xe5, 0xbc, 0x95, 0x12,
	0x16, 0x0a, 0x06, 0x44, 0x69, 0x73, 0x61, 0x72, 0x6d, 0x10, 0x39, 0x1a, 0x0a, 0xaa, 0xb6, 0x18,
	0x06, 0xe7, 0xbc, 0xb4, 0xe6, 0xa2, 0xb0, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x61, 0x6e, 0x4e, 0x6f,
	0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x10, 0x3a, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6,
	0x97, 0xa0, 0xe6, 0xb3, 0x95, 0xe9, 0x80, 0x89, 0xe4, 0xb8, 0xad, 0x12, 0x1d, 0x0a, 0x0d, 0x43,
	0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x10, 0x3b, 0x1a, 0x0a,
	0xaa, 0xb6, 0x18, 0x06, 0xe9, 0x9c, 0xb8, 0xe4, 0xbd, 0x93, 0x12, 0x1e, 0x0a, 0x08, 0x52, 0x65,
	0x76, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x10, 0x3c, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0xad,
	0xa3, 0xe5, 0x9c, 0xa8, 0xe5, 0xa4, 0x8d, 0xe6, 0xb4, 0xbb, 0x12, 0x1a, 0x0a, 0x0a, 0x47, 0x6f,
	0x6c, 0x64, 0x65, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x10, 0x3d, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06,
	0xe9, 0x87, 0x91, 0xe8, 0xba, 0xab, 0x12, 0x26, 0x0a, 0x10, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x10, 0x3e, 0x1a, 0x10, 0xaa, 0xb6,
	0x18, 0x0c, 0xe7, 0x89, 0xa9, 0xe7, 0x90, 0x86, 0xe5, 0x85, 0x8d, 0xe7, 0x96, 0xab, 0x12, 0x22,
	0x0a, 0x0c, 0x48, 0x75, 0x72, 0x74, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x10, 0x3f,
	0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0xe5, 0x85, 0x8d, 0xe7,
	0x96, 0xab, 0x12, 0x1f, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x41, 0x74, 0x6b, 0x53, 0x70, 0x64, 0x10,
	0x40, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0, 0xe6, 0x94, 0xbb,
	0xe9, 0x80, 0x9f, 0x1a, 0x04, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xb6, 0x03, 0x0a, 0x0e, 0x48, 0x4f,
	0x52, 0x49, 0x5a, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x12, 0x25, 0x0a, 0x0f,
	0x48, 0x4f, 0x52, 0x49, 0x5a, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x00, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x85, 0xa8, 0xe9, 0x83, 0xa8, 0xe7, 0xa6, 0x81,
	0xe7, 0x94, 0xa8, 0x12, 0x46, 0x0a, 0x15, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x4f, 0x4e, 0x5f, 0x46,
	0x55, 0x4e, 0x43, 0x5f, 0x46, 0x4f, 0x57, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x10, 0x01, 0x1a, 0x2b,
	0xaa, 0xb6, 0x18, 0x27, 0xe5, 0x9f, 0xba, 0xe4, 0xba, 0x8e, 0xe7, 0xbd, 0x91, 0xe6, 0xa0, 0xbc,
	0xe8, 0xae, 0xa1, 0xe7, 0xae, 0x97, 0xe7, 0x9a, 0x84, 0xe7, 0x9c, 0x9f, 0xe5, 0xae, 0x9e, 0xe8,
	0xbf, 0xb7, 0xe9, 0x9b, 0xbe, 0xe5, 0x8a, 0x9f, 0xe8, 0x83, 0xbd, 0x12, 0x41, 0x0a, 0x19, 0x48,
	0x4f, 0x52, 0x49, 0x5a, 0x4f, 0x4e, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x46, 0x4f, 0x57, 0x5f,
	0x44, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x1a, 0x22, 0xaa, 0xb6, 0x18, 0x1e,
	0xe5, 0x9f, 0xba, 0xe4, 0xba, 0x8e, 0xe8, 0xb7, 0x9d, 0xe7, 0xa6, 0xbb, 0xe8, 0xae, 0xa1, 0xe7,
	0xae, 0x97, 0xe7, 0x9a, 0x84, 0xe5, 0x81, 0x87, 0xe8, 0xbf, 0xb7, 0xe9, 0x9b, 0xbe, 0x12, 0x2d,
	0x0a, 0x17, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x4f, 0x4e, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x46,
	0x4f, 0x57, 0x5f, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x04, 0x1a, 0x10, 0xaa, 0xb6, 0x18,
	0x0c, 0xe8, 0xbf, 0xb7, 0xe9, 0x9b, 0xbe, 0xe6, 0xb8, 0xb2, 0xe6, 0x9f, 0x93, 0x12, 0x3b, 0x0a,
	0x19, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x10, 0x08, 0x1a, 0x1c, 0xaa, 0xb6,
	0x18, 0x18, 0xe5, 0x90, 0xaf, 0xe7, 0x94, 0xa8, 0xe6, 0xa0, 0x87, 0xe8, 0xae, 0xb0, 0xe7, 0xa6,
	0x81, 0xe7, 0x94, 0xa8, 0xe8, 0xbf, 0xb7, 0xe9, 0x9b, 0xbe, 0x12, 0x30, 0x0a, 0x1a, 0x48, 0x4f,
	0x52, 0x49, 0x5a, 0x4f, 0x4e, 0x5f, 0x46, 0x4f, 0x57, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x4f, 0x55,
	0x54, 0x5f, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x09, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c,
	0xe5, 0x85, 0xa8, 0xe9, 0x83, 0xa8, 0xe5, 0x90, 0xaf, 0xe7, 0x94, 0xa8, 0x12, 0x27, 0x0a, 0x14,
	0x48, 0x4f, 0x52, 0x49, 0x5a, 0x4f, 0x4e, 0x5f, 0x46, 0x4f, 0x57, 0x5f, 0x44, 0x49, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x10, 0x0a, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe5, 0x81, 0x87, 0xe8,
	0xbf, 0xb7, 0xe9, 0x9b, 0xbe, 0x12, 0x21, 0x0a, 0x0b, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x4f, 0x4e,
	0x5f, 0x46, 0x4f, 0x57, 0x10, 0x0d, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe7, 0x9c, 0x9f, 0xe5,
	0xae, 0x9e, 0xe8, 0xbf, 0xb7, 0xe9, 0x9b, 0xbe, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9,
	0x2b, 0x01, 0x2a, 0xab, 0x01, 0x0a, 0x10, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x44, 0x41, 0x4d, 0x41,
	0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x1c, 0x0a, 0x18, 0x48, 0x45, 0x52, 0x4f, 0x5f,
	0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x13, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x44, 0x41,
	0x4d, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x10, 0x01, 0x1a, 0x0a,
	0xaa, 0xb6, 0x18, 0x06, 0xe7, 0x89, 0xa9, 0xe7, 0x90, 0x86, 0x12, 0x23, 0x0a, 0x13, 0x48, 0x45,
	0x52, 0x4f, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x50, 0x10, 0x02, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe6, 0xb3, 0x95, 0xe6, 0x9c, 0xaf, 0x12,
	0x25, 0x0a, 0x15, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x41, 0x50, 0x10, 0x03, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06,
	0xe5, 0x8f, 0x8c, 0xe4, 0xbf, 0xae, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01,
	0x2a, 0xcd, 0x03, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x4d, 0x4f,
	0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x25,
	0x0a, 0x21, 0x52, 0x45, 0x53, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54,
	0x45, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x37, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x5f, 0x43, 0x41, 0x4c,
	0x4c, 0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x41, 0x54,
	0x54, 0x41, 0x43, 0x4b, 0x10, 0x01, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe4, 0xbb, 0x85, 0xe6,
	0x94, 0xbb, 0xe5, 0x87, 0xbb, 0xe5, 0x8a, 0x9b, 0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90, 0x12, 0x39,
	0x0a, 0x1a, 0x52, 0x45, 0x53, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54,
	0x45, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x4d, 0x41, 0x47, 0x49, 0x43, 0x10, 0x02, 0x1a, 0x19,
	0xaa, 0xb6, 0x18, 0x15, 0xe4, 0xbb, 0x85, 0xe6, 0xb3, 0x95, 0xe6, 0x9c, 0xaf, 0xe5, 0xbc, 0xba,
	0xe5, 0xba, 0xa6, 0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90, 0x12, 0x44, 0x0a, 0x25, 0x52, 0x45, 0x53,
	0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x44,
	0x44, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x4d, 0x41, 0x47,
	0x49, 0x43, 0x10, 0x03, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe6, 0x94, 0xbb, 0xe5, 0x87, 0xbb,
	0xe5, 0x8a, 0x9b, 0xe6, 0xb3, 0x95, 0xe6, 0x9c, 0xaf, 0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90, 0x12,
	0x38, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x4d, 0x4f, 0x4e, 0x53,
	0x54, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x44, 0x45, 0x46, 0x45, 0x4e, 0x43, 0x45, 0x10,
	0x04, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe4, 0xbb, 0x85, 0xe9, 0x98, 0xb2, 0xe5, 0xbe, 0xa1,
	0xe5, 0x8a, 0x9b, 0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90, 0x12, 0x3e, 0x0a, 0x1f, 0x52, 0x45, 0x53,
	0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x44,
	0x44, 0x5f, 0x53, 0x45, 0x50, 0x45, 0x52, 0x41, 0x54, 0x45, 0x4c, 0x59, 0x10, 0x08, 0x1a, 0x19,
	0xaa, 0xb6, 0x18, 0x15, 0xe5, 0x90, 0x84, 0xe5, 0xb1, 0x9e, 0xe6, 0x80, 0xa7, 0xe5, 0x90, 0x84,
	0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90, 0x12, 0x4b, 0x0a, 0x23, 0x52, 0x45, 0x53,
	0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x44,
	0x44, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x53, 0x45, 0x50, 0x45, 0x52, 0x41, 0x54, 0x45, 0x4c, 0x59,
	0x10, 0x10, 0x1a, 0x22, 0xaa, 0xb6, 0x18, 0x1e, 0xe5, 0x90, 0x84, 0xe5, 0xb1, 0x9e, 0xe6, 0x80,
	0xa7, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe5, 0x80, 0xbc, 0xe5, 0x90, 0x84, 0xe8, 0x87, 0xaa,
	0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01,
	0x2a, 0xde, 0x15, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x54, 0x41,
	0x49, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x54, 0x41, 0x49, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x53, 0x55, 0x42,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x53, 0x0a, 0x2b,
	0x52, 0x45, 0x53, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x54, 0x41, 0x49, 0x4e, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x48, 0x41, 0x4f, 0x53, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x22, 0xaa,
	0xb6, 0x18, 0x1e, 0xe5, 0xa8, 0xb1, 0xe4, 0xb9, 0x90, 0xe5, 0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe5,
	0xad, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe5, 0xa4, 0xa7, 0xe4, 0xb9, 0xb1, 0xe6, 0x96,
	0x97, 0x12, 0x4d, 0x0a, 0x28, 0x52, 0x45, 0x53, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x54, 0x41,
	0x49, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x48, 0x4f, 0x4c, 0x45, 0x10, 0x02, 0x1a,
	0x1f, 0xaa, 0xb6, 0x18, 0x1b, 0xe5, 0xa8, 0xb1, 0xe4, 0xb9, 0x90, 0xe5, 0x9c, 0xb0, 0xe5, 0x9b,
	0xbe, 0xe5, 0xad, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe7, 0x81, 0xab, 0xe5, 0x9d, 0x91,
	0x12, 0x55, 0x0a, 0x2a, 0x52, 0x45, 0x53, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x54, 0x41, 0x49,
	0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x53, 0x54, 0x41, 0x52, 0x53, 0x10, 0x03,
	0x1a, 0x25, 0xaa, 0xb6, 0x18, 0x21, 0xe5, 0xa8, 0xb1, 0xe4, 0xb9, 0x90, 0xe5, 0x9c, 0xb0, 0xe5,
	0x9b, 0xbe, 0xe5, 0xad, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe5, 0x8f, 0x8c, 0xe6, 0x98,
	0x9f, 0xe7, 0x89, 0xa9, 0xe8, 0xaf, 0xad, 0x12, 0x51, 0x0a, 0x26, 0x52, 0x45, 0x53, 0x5f, 0x45,
	0x4e, 0x54, 0x45, 0x52, 0x54, 0x41, 0x49, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x50,
	0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e,
	0x47, 0x10, 0x04, 0x1a, 0x25, 0xaa, 0xb6, 0x18, 0x21, 0xe5, 0xa8, 0xb1, 0xe4, 0xb9, 0x90, 0xe5,
	0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe5, 0xad, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe8, 0xb7,
	0x91, 0xe9, 0x85, 0xb7, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0x12, 0x4d, 0x0a, 0x22, 0x52, 0x45,
	0x53, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x54, 0x41, 0x49, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x4d, 0x41, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x47,
	0x10, 0x05, 0x1a, 0x25, 0xaa, 0xb6, 0x18, 0x21, 0xe5, 0xa8, 0xb1, 0xe4, 0xb9, 0x90, 0xe5, 0x9c,
	0xb0, 0xe5, 0x9b, 0xbe, 0xe5, 0xad, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe8, 0xbf, 0xb7,
	0xe9, 0x9b, 0xbe, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0x12, 0x52, 0x0a, 0x24, 0x52, 0x45, 0x53,
	0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x54, 0x41, 0x49, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d,
	0x41, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x4e,
	0x45, 0x10, 0x06, 0x1a, 0x28, 0xaa, 0xb6, 0x18, 0x24, 0xe5, 0xa8, 0xb1, 0xe4, 0xb9, 0x90, 0xe5,
	0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe5, 0xad, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe5, 0x85,
	0x8b, 0xe9, 0x9a, 0x86, 0xe5, 0xa4, 0xa7, 0xe4, 0xbd, 0x9c, 0xe6, 0x88, 0x98, 0x12, 0x51, 0x0a,
	0x26, 0x52, 0x45, 0x53, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x54, 0x41, 0x49, 0x4e, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x07, 0x1a, 0x25, 0xaa, 0xb6, 0x18, 0x21, 0xe5,
	0xa8, 0xb1, 0xe4, 0xb9, 0x90, 0xe5, 0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe5, 0xad, 0x90, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0xe6, 0x97, 0xa0, 0xe9, 0x99, 0x90, 0xe4, 0xb9, 0xb1, 0xe6, 0x96, 0x97,
	0x12, 0x53, 0x0a, 0x28, 0x52, 0x45, 0x53, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x54, 0x41, 0x49,
	0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x4e, 0x4f, 0x4e, 0x59, 0x4d, 0x4f, 0x55, 0x53, 0x10, 0x08, 0x1a, 0x25,
	0xaa, 0xb6, 0x18, 0x21, 0xe5, 0xa8, 0xb1, 0xe4, 0xb9, 0x90, 0xe5, 0x9c, 0xb0, 0xe5, 0x9b, 0xbe,
	0xe5, 0xad, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe5, 0xae, 0x9e, 0xe6, 0x88, 0x98, 0xe7,
	0xbb, 0x83, 0xe4, 0xb9, 0xa0, 0x12, 0x52, 0x0a, 0x27, 0x52, 0x45, 0x53, 0x5f, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x54, 0x41, 0x49, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x53,
	0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x56, 0x45, 0x43, 0x41, 0x4d, 0x50,
	0x10, 0x09, 0x1a, 0x25, 0xaa, 0xb6, 0x18, 0x21, 0xe5, 0xa8, 0xb1, 0xe4, 0xb9, 0x90, 0xe5, 0x9c,
	0xb0, 0xe5, 0x9b, 0xbe, 0xe5, 0xad, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe4, 0xba, 0x94,
	0xe5, 0x86, 0x9b, 0xe4, 0xb9, 0x8b, 0xe6, 0x88, 0x98, 0x12, 0x55, 0x0a, 0x2a, 0x52, 0x45, 0x53,
	0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x54, 0x41, 0x49, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d,
	0x41, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0a, 0x1a, 0x25, 0xaa, 0xb6, 0x18, 0x21, 0xe5,
	0xa8, 0xb1, 0xe4, 0xb9, 0x90, 0xe5, 0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe5, 0xad, 0x90, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0xe5, 0x90, 0x88, 0xe4, 0xbd, 0x9c, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f,
	0x12, 0x53, 0x0a, 0x2b, 0x52, 0x45, 0x53, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x54, 0x41, 0x49,
	0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x52, 0x4f, 0x59, 0x41, 0x4c, 0x45, 0x10,
	0x0b, 0x1a, 0x22, 0xaa, 0xb6, 0x18, 0x1e, 0xe5, 0xa8, 0xb1, 0xe4, 0xb9, 0x90, 0xe5, 0x9c, 0xb0,
	0xe5, 0x9b, 0xbe, 0xe5, 0xad, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe5, 0xa4, 0xa7, 0xe9,
	0x80, 0x83, 0xe6, 0x9d, 0x80, 0x12, 0x66, 0x0a, 0x32, 0x52, 0x45, 0x53, 0x5f, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x54, 0x41, 0x49, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x53,
	0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x52, 0x4f,
	0x59, 0x41, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x56, 0x45, 0x10, 0x0c, 0x1a, 0x2e, 0xaa,
	0xb6, 0x18, 0x2a, 0xe5, 0xa8, 0xb1, 0xe4, 0xb9, 0x90, 0xe5, 0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe5,
	0xad, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe5, 0xa4, 0xa7, 0xe9, 0x80, 0x83, 0xe6, 0x9d,
	0x80, 0xe6, 0x97, 0xa0, 0xe9, 0x99, 0x90, 0xe5, 0xa4, 0x8d, 0xe6, 0xb4, 0xbb, 0x12, 0x65, 0x0a,
	0x31, 0x52, 0x45, 0x53, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x54, 0x41, 0x49, 0x4e, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x52, 0x4f, 0x59, 0x41, 0x4c, 0x45, 0x5f, 0x43, 0x4c, 0x4f,
	0x4e, 0x45, 0x10, 0x0d, 0x1a, 0x2e, 0xaa, 0xb6, 0x18, 0x2a, 0xe5, 0xa8, 0xb1, 0xe4, 0xb9, 0x90,
	0xe5, 0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe5, 0xad, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe5,
	0xa4, 0xa7, 0xe9, 0x80, 0x83, 0xe6, 0x9d, 0x80, 0xe5, 0x85, 0x8b, 0xe9, 0x9a, 0x86, 0xe6, 0xa8,
	0xa1, 0xe5, 0xbc, 0x8f, 0x12, 0x55, 0x0a, 0x27, 0x52, 0x45, 0x53, 0x5f, 0x45, 0x4e, 0x54, 0x45,
	0x52, 0x54, 0x41, 0x49, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x53, 0x55,
	0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x10,
	0x0e, 0x1a, 0x28, 0xaa, 0xb6, 0x18, 0x24, 0xe5, 0xa8, 0xb1, 0xe4, 0xb9, 0x90, 0xe5, 0x9c, 0xb0,
	0xe5, 0x9b, 0xbe, 0xe5, 0xad, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe8, 0x87, 0xaa, 0xe8,
	0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0x12, 0x57, 0x0a, 0x29, 0x52,
	0x45, 0x53, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x54, 0x41, 0x49, 0x4e, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48,
	0x4f, 0x52, 0x54, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x10, 0x0f, 0x1a, 0x28, 0xaa, 0xb6, 0x18, 0x24,
	0xe5, 0xa8, 0xb1, 0xe4, 0xb9, 0x90, 0xe5, 0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe5, 0xad, 0x90, 0xe7,
	0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe7, 0x9f, 0xad, 0xe5, 0xb0, 0x8f, 0xe5, 0xbf, 0xab, 0xe6, 0xa8,
	0xa1, 0xe5, 0xbc, 0x8f, 0x12, 0x5d, 0x0a, 0x29, 0x52, 0x45, 0x53, 0x5f, 0x45, 0x4e, 0x54, 0x45,
	0x52, 0x54, 0x41, 0x49, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x53, 0x55,
	0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f,
	0x32, 0x10, 0x10, 0x1a, 0x2e, 0xaa, 0xb6, 0x18, 0x2a, 0xe5, 0xa8, 0xb1, 0xe4, 0xb9, 0x90, 0xe5,
	0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe5, 0xad, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe8, 0x87,
	0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe5, 0x8f, 0x8c, 0xe4, 0xba, 0xba, 0xe6, 0xa8, 0xa1,
	0xe5, 0xbc, 0x8f, 0x12, 0x60, 0x0a, 0x29, 0x52, 0x45, 0x53, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x54, 0x41, 0x49, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x53, 0x55, 0x42,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x33,
	0x10, 0x11, 0x1a, 0x31, 0xaa, 0xb6, 0x18, 0x2d, 0xe5, 0xa8, 0xb1, 0xe4, 0xb9, 0x90, 0xe5, 0x9c,
	0xb0, 0xe5, 0x9b, 0xbe, 0xe5, 0xad, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe8, 0x87, 0xaa,
	0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe5, 0xa4, 0xa7, 0xe4, 0xb9, 0xb1, 0xe6, 0x96, 0x97, 0xe6,
	0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0x12, 0x5a, 0x0a, 0x29, 0x52, 0x45, 0x53, 0x5f, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x54, 0x41, 0x49, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x53,
	0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38,
	0x5f, 0x34, 0x10, 0x12, 0x1a, 0x2b, 0xaa, 0xb6, 0x18, 0x27, 0xe5, 0xa8, 0xb1, 0xe4, 0xb9, 0x90,
	0xe5, 0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe5, 0xad, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe8,
	0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe6, 0x96, 0xb0, 0xe6, 0x89, 0x8b, 0xe5, 0x85,
	0xb3, 0x12, 0x54, 0x0a, 0x26, 0x52, 0x45, 0x53, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x54, 0x41,
	0x49, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x10, 0x13, 0x1a, 0x28, 0xaa,
	0xb6, 0x18, 0x24, 0xe5, 0xa8, 0xb1, 0xe4, 0xb9, 0x90, 0xe5, 0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe5,
	0xad, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe5, 0x8f, 0x98, 0xe8, 0xba, 0xab, 0xe5, 0xa4,
	0xa7, 0xe4, 0xbd, 0x9c, 0xe6, 0x88, 0x98, 0x12, 0x57, 0x0a, 0x26, 0x52, 0x45, 0x53, 0x5f, 0x45,
	0x4e, 0x54, 0x45, 0x52, 0x54, 0x41, 0x49, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x50,
	0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x4c, 0x44, 0x49, 0x45,
	0x52, 0x10, 0x14, 0x1a, 0x2b, 0xaa, 0xb6, 0x18, 0x27, 0xe5, 0xa8, 0xb1, 0xe4, 0xb9, 0x90, 0xe5,
	0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe5, 0xad, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe5, 0xb0,
	0x8f, 0xe5, 0xb0, 0x8f, 0xe5, 0x85, 0xb5, 0xe5, 0xa4, 0xa7, 0xe4, 0xbd, 0x9c, 0xe6, 0x88, 0x98,
	0x12, 0x4a, 0x0a, 0x27, 0x52, 0x45, 0x53, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x54, 0x41, 0x49,
	0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x39, 0x10, 0x15, 0x1a, 0x1d, 0xaa,
	0xb6, 0x18, 0x19, 0xe5, 0xa8, 0xb1, 0xe4, 0xb9, 0x90, 0xe5, 0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe5,
	0xad, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x49, 0x4d, 0x42, 0x41, 0x12, 0x5d, 0x0a, 0x29,
	0x52, 0x45, 0x53, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x54, 0x41, 0x49, 0x4e, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x35, 0x10, 0x16, 0x1a, 0x2e, 0xaa, 0xb6, 0x18,
	0x2a, 0xe5, 0xa8, 0xb1, 0xe4, 0xb9, 0x90, 0xe5, 0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe5, 0xad, 0x90,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe5,
	0xbf, 0xab, 0xe6, 0xa3, 0x8b, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0x12, 0x6a, 0x0a, 0x33, 0x52,
	0x45, 0x53, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x54, 0x41, 0x49, 0x4e, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x54, 0x59, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x10, 0x17, 0x1a, 0x31, 0xaa, 0xb6, 0x18, 0x2d, 0xe5, 0xa8, 0xb1, 0xe4, 0xb9, 0x90,
	0xe5, 0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe5, 0xad, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe8,
	0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe8, 0xb5, 0x8f, 0xe9, 0x87, 0x91, 0xe8, 0xb5,
	0x9b, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0x12, 0x62, 0x0a, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x45,
	0x4e, 0x54, 0x45, 0x52, 0x54, 0x41, 0x49, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x50,
	0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4f, 0x53, 0x5f,
	0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x41, 0x49, 0x10, 0x18, 0x1a, 0x2e, 0xaa, 0xb6, 0x18,
	0x2a, 0xe5, 0xa8, 0xb1, 0xe4, 0xb9, 0x90, 0xe5, 0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe5, 0xad, 0x90,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe5, 0xa4, 0xa7, 0xe4, 0xb9, 0xb1, 0xe6, 0x96, 0x97, 0xe4,
	0xba, 0xba, 0xe6, 0x9c, 0xba, 0xe6, 0x8c, 0x91, 0xe6, 0x88, 0x98, 0x12, 0x59, 0x0a, 0x28, 0x52,
	0x45, 0x53, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x54, 0x41, 0x49, 0x4e, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45,
	0x53, 0x54, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x10, 0x19, 0x1a, 0x2b, 0xaa, 0xb6, 0x18, 0x27, 0xe5,
	0xa8, 0xb1, 0xe4, 0xb9, 0x90, 0xe5, 0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe5, 0xad, 0x90, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95,
	0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0x12, 0x5d, 0x0a, 0x2f, 0x52, 0x45, 0x53, 0x5f, 0x45, 0x4e,
	0x54, 0x45, 0x52, 0x54, 0x41, 0x49, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x50, 0x5f,
	0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x5a, 0x48, 0x4f, 0x4e, 0x47, 0x59, 0x55,
	0x41, 0x4e, 0x5f, 0x50, 0x4f, 0x4c, 0x41, 0x4e, 0x47, 0x10, 0x1a, 0x1a, 0x28, 0xaa, 0xb6, 0x18,
	0x24, 0xe5, 0xa8, 0xb1, 0xe4, 0xb9, 0x90, 0xe5, 0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe5, 0xad, 0x90,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe4, 0xb8, 0xad, 0xe5, 0x85, 0x83, 0xe8, 0x8a, 0x82, 0xe7,
	0xa0, 0xb4, 0xe6, 0xb5, 0xaa, 0x12, 0x55, 0x0a, 0x2a, 0x52, 0x45, 0x53, 0x5f, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x54, 0x41, 0x49, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x53,
	0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x45, 0x47,
	0x41, 0x4d, 0x45, 0x10, 0x1b, 0x1a, 0x25, 0xaa, 0xb6, 0x18, 0x21, 0xe5, 0xa8, 0xb1, 0xe4, 0xb9,
	0x90, 0xe5, 0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe5, 0xad, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0xe7, 0xbb, 0x84, 0xe5, 0x90, 0x88, 0xe7, 0x8e, 0xa9, 0xe6, 0xb3, 0x95, 0x12, 0x53, 0x0a, 0x28,
	0x52, 0x45, 0x53, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x54, 0x41, 0x49, 0x4e, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45,
	0x41, 0x52, 0x4c, 0x59, 0x54, 0x45, 0x53, 0x54, 0x10, 0x1c, 0x1a, 0x25, 0xaa, 0xb6, 0x18, 0x21,
	0xe5, 0xa8, 0xb1, 0xe4, 0xb9, 0x90, 0xe5, 0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe5, 0xad, 0x90, 0xe7,
	0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe5, 0x85, 0x88, 0xe8, 0xa1, 0x8c, 0xe4, 0xbd, 0x93, 0xe9, 0xaa,
	0x8c, 0x12, 0x51, 0x0a, 0x26, 0x52, 0x45, 0x53, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x54, 0x41,
	0x49, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x10, 0x1d, 0x1a, 0x25, 0xaa,
	0xb6, 0x18, 0x21, 0xe5, 0xa8, 0xb1, 0xe4, 0xb9, 0x90, 0xe5, 0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe5,
	0xad, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x85, 0xb3, 0xe7, 0xab,
	0x9e, 0xe8, 0xb5, 0x9b, 0x12, 0x52, 0x0a, 0x27, 0x52, 0x45, 0x53, 0x5f, 0x45, 0x4e, 0x54, 0x45,
	0x52, 0x54, 0x41, 0x49, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x53, 0x55,
	0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x10,
	0x1e, 0x1a, 0x25, 0xaa, 0xb6, 0x18, 0x21, 0xe5, 0xa8, 0xb1, 0xe4, 0xb9, 0x90, 0xe5, 0x9c, 0xb0,
	0xe5, 0x9b, 0xbe, 0xe5, 0xad, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe5, 0x85, 0xa8, 0xe6,
	0xb0, 0x91, 0xe7, 0x94, 0xb5, 0xe7, 0xab, 0x9e, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x5f,
	0x45, 0x4e, 0x54, 0x45, 0x52, 0x54, 0x41, 0x49, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41,
	0x50, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10,
	0x1f, 0x2a, 0xf7, 0x04, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f,
	0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x12, 0x3b,
	0x0a, 0x1f, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x5f, 0x50, 0x49, 0x43, 0x4b, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41,
	0x4c, 0x10, 0x00, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe9,
	0x80, 0x89, 0xe5, 0xb0, 0x86, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0x12, 0x3b, 0x0a, 0x1f, 0x52,
	0x45, 0x53, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x49,
	0x43, 0x4b, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x10, 0x01,
	0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe9, 0x9a, 0x8f, 0xe6, 0x9c, 0xba, 0xe9, 0x80, 0x89, 0xe5,
	0xb0, 0x86, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0x12, 0x3a, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x5f,
	0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x5f,
	0x52, 0x55, 0x4c, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x1a, 0x16, 0xaa, 0xb6,
	0x18, 0x12, 0xe5, 0x85, 0x8b, 0xe9, 0x9a, 0x86, 0xe9, 0x80, 0x89, 0xe5, 0xb0, 0x86, 0xe6, 0xa8,
	0xa1, 0xe5, 0xbc, 0x8f, 0x12, 0x38, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x55, 0x4c, 0x54,
	0x49, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x5f, 0x52, 0x55, 0x4c, 0x45,
	0x5f, 0x42, 0x41, 0x4e, 0x50, 0x49, 0x43, 0x4b, 0x10, 0x03, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e,
	0x42, 0x50, 0xe9, 0x80, 0x89, 0xe5, 0xb0, 0x86, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0x12, 0x3a,
	0x0a, 0x1e, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x5f, 0x50, 0x49, 0x43, 0x4b, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49,
	0x10, 0x04, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0xa4, 0x9a, 0xe9, 0x80, 0x89, 0xe9, 0x80,
	0x89, 0xe5, 0xb0, 0x86, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0x12, 0x4f, 0x0a, 0x27, 0x52, 0x45,
	0x53, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x49, 0x43,
	0x4b, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x53, 0x45, 0x4c,
	0x46, 0x50, 0x49, 0x43, 0x4b, 0x10, 0x05, 0x1a, 0x22, 0xaa, 0xb6, 0x18, 0x1e, 0xe6, 0x9c, 0x89,
	0xe9, 0x99, 0x90, 0xe5, 0x8f, 0xac, 0xe5, 0x94, 0xa4, 0xe5, 0xa4, 0x9a, 0xe9, 0x80, 0x89, 0xe9,
	0x80, 0x89, 0xe5, 0xb0, 0x86, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0x12, 0x40, 0x0a, 0x21, 0x52,
	0x45, 0x53, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x49,
	0x43, 0x4b, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0x06, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe8, 0xae, 0xad, 0xe7, 0xbb, 0x83, 0xe5, 0x85,
	0xb3, 0xe9, 0x80, 0x89, 0xe5, 0xb0, 0x86, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0x12, 0x31, 0x0a,
	0x15, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f,
	0x4e, 0x4f, 0x50, 0x49, 0x43, 0x4b, 0x10, 0x07, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe8, 0xb7,
	0xb3, 0xe8, 0xbf, 0x87, 0xe9, 0x80, 0x89, 0xe5, 0xb0, 0x86, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f,
	0x12, 0x46, 0x0a, 0x24, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x49, 0x5f,
	0x54, 0x52, 0x41, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18,
	0xe4, 0xba, 0xba, 0xe6, 0x9c, 0xba, 0xe7, 0xbb, 0x83, 0xe4, 0xb9, 0xa0, 0xe9, 0x80, 0x89, 0xe5,
	0xb0, 0x86, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x5f,
	0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x5f,
	0x52, 0x55, 0x4c, 0x45, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x09, 0x2a, 0x80, 0x01, 0x0a, 0x14,
	0x52, 0x45, 0x53, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x41, 0x44, 0x4a, 0x55, 0x53, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x12, 0x2d, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x50, 0x45, 0x45,
	0x44, 0x41, 0x44, 0x4a, 0x55, 0x53, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x55, 0x50, 0x10,
	0x00, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x8a, 0xa0, 0xe9, 0x80, 0x9f, 0xe9, 0x98, 0xb6,
	0xe6, 0xae, 0xb5, 0x12, 0x2f, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44,
	0x41, 0x44, 0x4a, 0x55, 0x53, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x44, 0x4f, 0x57, 0x4e,
	0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x87, 0x8f, 0xe9, 0x80, 0x9f, 0xe9, 0x98,
	0xb6, 0xe6, 0xae, 0xb5, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xa6,
	0x01, 0x0a, 0x11, 0x52, 0x45, 0x53, 0x5f, 0x44, 0x45, 0x56, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x5f, 0x44, 0x45, 0x56, 0x5f,
	0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x0f, 0x52, 0x45, 0x53, 0x5f, 0x44, 0x45, 0x56, 0x5f, 0x46,
	0x55, 0x4e, 0x43, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0x90,
	0xaf, 0xe7, 0x94, 0xa8, 0x12, 0x20, 0x0a, 0x10, 0x52, 0x45, 0x53, 0x5f, 0x44, 0x45, 0x56, 0x5f,
	0x46, 0x55, 0x4e, 0x43, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x00, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06,
	0xe7, 0xa6, 0x81, 0xe6, 0xad, 0xa2, 0x12, 0x23, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x5f, 0x44, 0x45,
	0x56, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x10, 0x0a, 0x1a,
	0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x1a, 0x0a, 0x10, 0x01, 0x88,
	0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xbb, 0x02, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x5f,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x4f, 0x4f, 0x53, 0x45, 0x5f,
	0x52, 0x55, 0x4c, 0x45, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x4f, 0x4f, 0x53, 0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x1c, 0x52, 0x45,
	0x53, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x4f, 0x4f, 0x53,
	0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x51, 0x10, 0x01, 0x1a, 0x0a, 0xaa, 0xb6,
	0x18, 0x06, 0xe9, 0xa1, 0xba, 0xe5, 0xba, 0x8f, 0x12, 0x2f, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x5f,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x4f, 0x4f, 0x53, 0x45, 0x5f,
	0x52, 0x55, 0x4c, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x10, 0x02, 0x1a, 0x0a, 0xaa,
	0xb6, 0x18, 0x06, 0xe9, 0x9a, 0x8f, 0xe6, 0x9c, 0xba, 0x12, 0x2f, 0x0a, 0x1f, 0x52, 0x45, 0x53,
	0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x4f, 0x4f, 0x53, 0x45,
	0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x10, 0x03, 0x1a, 0x0a,
	0xaa, 0xb6, 0x18, 0x06, 0xe6, 0x9d, 0x83, 0xe9, 0x87, 0x8d, 0x12, 0x3c, 0x0a, 0x23, 0x52, 0x45,
	0x53, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x4f, 0x4f, 0x53,
	0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x53, 0x4f, 0x4d,
	0x45, 0x10, 0x04, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe9, 0x9a, 0x8f, 0xe6, 0x9c, 0xba, 0xe6,
	0x9f, 0x90, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x5f,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x4f, 0x4f, 0x53, 0x45, 0x5f,
	0x52, 0x55, 0x4c, 0x45, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x05, 0x1a, 0x08, 0x88, 0xf9, 0x2b,
	0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0x93, 0x02, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x45,
	0x52, 0x46, 0x45, 0x46, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x32,
	0x0a, 0x16, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x45, 0x52, 0x46, 0x45, 0x46, 0x54, 0x5f, 0x55, 0x53,
	0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x55, 0x53, 0x45, 0x10, 0x00, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12,
	0xe7, 0x89, 0xb9, 0xe6, 0x95, 0x88, 0xe5, 0x85, 0xa8, 0xe9, 0x83, 0xa8, 0xe5, 0x8f, 0xaf, 0xe7,
	0x94, 0xa8, 0x12, 0x34, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x45, 0x52, 0x46, 0x45, 0x46,
	0x54, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x4e, 0x4f, 0x55, 0x53, 0x45, 0x10, 0x01, 0x1a, 0x19, 0xaa,
	0xb6, 0x18, 0x15, 0xe7, 0x89, 0xb9, 0xe6, 0x95, 0x88, 0xe5, 0x85, 0xa8, 0xe9, 0x83, 0xa8, 0xe4,
	0xb8, 0x8d, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0x12, 0x33, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x5f,
	0x50, 0x45, 0x52, 0x46, 0x45, 0x46, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x55, 0x53, 0x45, 0x10, 0x02, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe7, 0x89, 0xb9, 0xe6, 0x95,
	0x88, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0x12, 0x38, 0x0a,
	0x19, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x45, 0x52, 0x46, 0x45, 0x46, 0x54, 0x5f, 0x55, 0x53, 0x45,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x4e, 0x4f, 0x55, 0x53, 0x45, 0x10, 0x03, 0x1a, 0x19, 0xaa, 0xb6,
	0x18, 0x15, 0xe7, 0x89, 0xb9, 0xe6, 0x95, 0x88, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe4, 0xb8,
	0x8d, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x5f, 0x50,
	0x45, 0x52, 0x46, 0x45, 0x46, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10,
	0x04, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xaa, 0x01, 0x0a, 0x14,
	0x52, 0x45, 0x53, 0x5f, 0x48, 0x55, 0x44, 0x33, 0x44, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x12, 0x2c, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x55, 0x44, 0x33,
	0x44, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00,
	0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe9, 0xa2, 0x9c, 0xe8,
	0x89, 0xb2, 0x12, 0x2b, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x55, 0x44, 0x33, 0x44, 0x5f,
	0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x48, 0x50, 0x10, 0x01, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f,
	0xe8, 0xa1, 0x80, 0xe6, 0x9d, 0xa1, 0xe5, 0xbd, 0xa9, 0xe8, 0x89, 0xb2, 0xe5, 0x8c, 0x96, 0x12,
	0x2d, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x55, 0x44, 0x33, 0x44, 0x5f, 0x43, 0x4f, 0x4c,
	0x4f, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe5,
	0x90, 0x8d, 0xe5, 0xad, 0x97, 0xe5, 0xbd, 0xa9, 0xe8, 0x89, 0xb2, 0xe5, 0x8c, 0x96, 0x1a, 0x08,
	0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xed, 0x03, 0x0a, 0x18, 0x52, 0x45, 0x53,
	0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x49, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55,
	0x42, 0x54, 0x59, 0x50, 0x45, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x5f, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x41, 0x49, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x3d, 0x0a, 0x1b, 0x52,
	0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x42, 0x41, 0x54, 0x54,
	0x4c, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x31, 0x56, 0x31, 0x10, 0x01, 0x1a, 0x1c, 0xaa, 0xb6,
	0x18, 0x18, 0xe5, 0xaf, 0xb9, 0xe6, 0x88, 0x98, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x5f, 0x50,
	0x52, 0x4f, 0x4a, 0x38, 0xe5, 0x8d, 0x95, 0xe6, 0x8e, 0x92, 0x12, 0x3d, 0x0a, 0x1b, 0x52, 0x45,
	0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x32, 0x56, 0x32, 0x10, 0x02, 0x1a, 0x1c, 0xaa, 0xb6, 0x18,
	0x18, 0xe5, 0xaf, 0xb9, 0xe6, 0x88, 0x98, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x5f, 0x50, 0x52,
	0x4f, 0x4a, 0x38, 0xe5, 0x8f, 0x8c, 0xe6, 0x8e, 0x92, 0x12, 0x48, 0x0a, 0x20, 0x52, 0x45, 0x53,
	0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x03, 0x1a,
	0x22, 0xaa, 0xb6, 0x18, 0x1e, 0xe5, 0xaf, 0xb9, 0xe6, 0x88, 0x98, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0x5f, 0x52, 0x52, 0x4f, 0x4a, 0x38, 0xe5, 0xbf, 0xab, 0xe6, 0xa3, 0x8b, 0xe6, 0xa8, 0xa1,
	0xe5, 0xbc, 0x8f, 0x12, 0x49, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45,
	0x43, 0x54, 0x38, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x31,
	0x56, 0x31, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x04, 0x1a, 0x22, 0xaa, 0xb6, 0x18, 0x1e,
	0xe5, 0xaf, 0xb9, 0xe6, 0x88, 0x98, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x5f, 0x50, 0x52, 0x4f,
	0x4a, 0x38, 0xe5, 0x8d, 0x95, 0xe6, 0x8e, 0x92, 0xe5, 0x8c, 0xb9, 0xe9, 0x85, 0x8d, 0x12, 0x49,
	0x0a, 0x21, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x42,
	0x41, 0x54, 0x54, 0x4c, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x32, 0x56, 0x32, 0x5f, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x10, 0x05, 0x1a, 0x22, 0xaa, 0xb6, 0x18, 0x1e, 0xe5, 0xaf, 0xb9, 0xe6, 0x88,
	0x98, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x38, 0xe5, 0x8f, 0x8c,
	0xe6, 0x8e, 0x92, 0xe5, 0x8c, 0xb9, 0xe9, 0x85, 0x8d, 0x12, 0x43, 0x0a, 0x1e, 0x52, 0x45, 0x53,
	0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x54, 0x59, 0x10, 0x06, 0x1a, 0x1f, 0xaa,
	0xb6, 0x18, 0x1b, 0xe5, 0xaf, 0xb9, 0xe6, 0x88, 0x98, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x5f,
	0x50, 0x52, 0x4f, 0x4a, 0x38, 0xe5, 0xa4, 0xa9, 0xe5, 0x85, 0x83, 0xe8, 0xb5, 0x9b, 0x1a, 0x08,
	0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0x90, 0x02, 0x0a, 0x1d, 0x52, 0x45, 0x53,
	0x5f, 0x55, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x12, 0x47, 0x0a, 0x25, 0x52, 0x45,
	0x53, 0x5f, 0x55, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x41,
	0x43, 0x4e, 0x54, 0x10, 0x00, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe4, 0xbd, 0xbf, 0xe7, 0x94,
	0xa8, 0xe7, 0x8e, 0xa9, 0xe5, 0xae, 0xb6, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe8, 0x8b, 0xb1,
	0xe9, 0x9b, 0x84, 0x12, 0x4c, 0x0a, 0x2c, 0x52, 0x45, 0x53, 0x5f, 0x55, 0x53, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x45,
	0x54, 0x48, 0x4f, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x44, 0x45, 0x53, 0x4b, 0x5f, 0x52, 0x41, 0x4e,
	0x44, 0x4f, 0x4d, 0x10, 0x01, 0x1a, 0x1a, 0xaa, 0xb6, 0x18, 0x16, 0xe4, 0xbd, 0xbf, 0xe7, 0x94,
	0xa8, 0x44, 0x65, 0x73, 0x6b, 0xe9, 0x9a, 0x8f, 0xe6, 0x9c, 0xba, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b,
	0x84, 0x12, 0x4e, 0x0a, 0x2f, 0x52, 0x45, 0x53, 0x5f, 0x55, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x48, 0x45, 0x52, 0x4f, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x48,
	0x4f, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x50, 0x52, 0x45, 0x42, 0x50, 0x48, 0x45, 0x52, 0x4f, 0x5f,
	0x50, 0x4f, 0x4f, 0x4c, 0x10, 0x02, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe4, 0xbd, 0xbf, 0xe7,
	0x94, 0xa8, 0xe9, 0xa2, 0x84, 0xe9, 0x80, 0x89, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe6, 0xb1,
	0xa0, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0x8e, 0x02, 0x0a, 0x23,
	0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x38, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d,
	0x45, 0x4e, 0x44, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x49, 0x43, 0x55, 0x4c, 0x54, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x12, 0x47, 0x0a, 0x27, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x38,
	0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x49,
	0x43, 0x55, 0x4c, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x00,
	0x1a, 0x1a, 0xaa, 0xb6, 0x18, 0x16, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x38, 0xe9, 0x98, 0xb5,
	0xe5, 0xae, 0xb9, 0xe9, 0x9a, 0xbe, 0xe5, 0xba, 0xa6, 0xe4, 0xbd, 0x8e, 0x12, 0x4a, 0x0a, 0x2a,
	0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x38, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d,
	0x45, 0x4e, 0x44, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x49, 0x43, 0x55, 0x4c, 0x54, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x44, 0x44, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x1a, 0xaa, 0xb6,
	0x18, 0x16, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x38, 0xe9, 0x98, 0xb5, 0xe5, 0xae, 0xb9, 0xe9,
	0x9a, 0xbe, 0xe5, 0xba, 0xa6, 0xe4, 0xb8, 0xad, 0x12, 0x48, 0x0a, 0x28, 0x52, 0x45, 0x53, 0x5f,
	0x50, 0x52, 0x4f, 0x4a, 0x38, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x5f,
	0x44, 0x49, 0x46, 0x46, 0x49, 0x43, 0x55, 0x4c, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x48, 0x49, 0x47, 0x48, 0x10, 0x02, 0x1a, 0x1a, 0xaa, 0xb6, 0x18, 0x16, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x38, 0xe9, 0x98, 0xb5, 0xe5, 0xae, 0xb9, 0xe9, 0x9a, 0xbe, 0xe5, 0xba, 0xa6, 0xe9,
	0xab, 0x98, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xfc, 0x01, 0x0a,
	0x20, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x38, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d,
	0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x12, 0x43, 0x0a, 0x26, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x38, 0x5f, 0x52,
	0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x10, 0x00, 0x1a, 0x17, 0xaa,
	0xb6, 0x18, 0x13, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x38, 0xe6, 0x96, 0xb0, 0xe6, 0x89, 0x8b,
	0xe6, 0x8e, 0xa8, 0xe8, 0x8d, 0x90, 0x12, 0x46, 0x0a, 0x29, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52,
	0x4f, 0x4a, 0x38, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x41, 0x52,
	0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x49, 0x43,
	0x49, 0x41, 0x4c, 0x10, 0x01, 0x1a, 0x17, 0xaa, 0xb6, 0x18, 0x13, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x38, 0xe5, 0xae, 0x98, 0xe6, 0x96, 0xb9, 0xe6, 0x8e, 0xa8, 0xe8, 0x8d, 0x90, 0x12, 0x41,
	0x0a, 0x24, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x38, 0x5f, 0x52, 0x45, 0x43, 0x4f,
	0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x48, 0x4f, 0x54, 0x10, 0x02, 0x1a, 0x17, 0xaa, 0xb6, 0x18, 0x13, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x38, 0xe7, 0x83, 0xad, 0xe9, 0x97, 0xa8, 0xe6, 0x8e, 0xa8, 0xe8, 0x8d,
	0x90, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xa7, 0x01, 0x0a, 0x16,
	0x52, 0x45, 0x53, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x45, 0x52, 0x47,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x33, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x5f, 0x42, 0x41,
	0x54, 0x54, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x4f, 0x5f, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x59, 0x10, 0x00, 0x1a, 0x0d, 0xaa, 0xb6,
	0x18, 0x09, 0xe6, 0x97, 0xa0, 0xe6, 0xb6, 0x88, 0xe8, 0x80, 0x97, 0x12, 0x2d, 0x0a, 0x1d, 0x52,
	0x45, 0x53, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x59, 0x10, 0x01, 0x1a, 0x0a,
	0xaa, 0xb6, 0x18, 0x06, 0xe8, 0x83, 0xbd, 0xe9, 0x87, 0x8f, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45,
	0x53, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x1a, 0x08, 0x88, 0xf9, 0x2b,
	0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xf1, 0x01, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x5f, 0x41, 0x4c,
	0x54, 0x45, 0x52, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x4b, 0x49, 0x4e, 0x5f, 0x52,
	0x45, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x49, 0x0a, 0x30, 0x52, 0x45, 0x53, 0x5f, 0x41,
	0x4c, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x4b, 0x49, 0x4e, 0x5f,
	0x52, 0x45, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c,
	0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x53, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x1a, 0x13, 0xaa,
	0xb6, 0x18, 0x0f, 0xe7, 0x89, 0xb9, 0xe6, 0x95, 0x88, 0xe5, 0x92, 0x8c, 0xe5, 0xa3, 0xb0, 0xe9,
	0x9f, 0xb3, 0x12, 0x3e, 0x0a, 0x2b, 0x52, 0x45, 0x53, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x4e,
	0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x4b, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c,
	0x45, 0x10, 0x01, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe4, 0xbb, 0x85, 0xe7, 0x89, 0xb9, 0xe6,
	0x95, 0x88, 0x12, 0x3b, 0x0a, 0x28, 0x52, 0x45, 0x53, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x4e,
	0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x4b, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x53, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02,
	0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe4, 0xbb, 0x85, 0xe5, 0xa3, 0xb0, 0xe9, 0x9f, 0xb3, 0x1a,
	0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0x8d, 0x02, 0x0a, 0x1c, 0x52, 0x45,
	0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50,
	0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x45,
	0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50,
	0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55,
	0x4c, 0x54, 0x10, 0x00, 0x12, 0x3d, 0x0a, 0x27, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a,
	0x45, 0x43, 0x54, 0x38, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10,
	0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0xe5, 0x94, 0xaf,
	0xe4, 0xb8, 0x80, 0x12, 0x3b, 0x0a, 0x25, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45,
	0x43, 0x54, 0x38, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x47, 0x4f, 0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x1a, 0x10,
	0xaa, 0xb6, 0x18, 0x0c, 0xe7, 0xa5, 0x9e, 0xe5, 0x99, 0xa8, 0xe5, 0x94, 0xaf, 0xe4, 0xb8, 0x80,
	0x12, 0x3d, 0x0a, 0x27, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38,
	0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x48, 0x41, 0x49, 0x44, 0x55, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x03, 0x1a, 0x10, 0xaa,
	0xb6, 0x18, 0x0c, 0xe6, 0xb5, 0xb7, 0xe9, 0x83, 0xbd, 0xe5, 0x94, 0xaf, 0xe4, 0xb8, 0x80, 0x1a,
	0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xf3, 0x01, 0x0a, 0x21, 0x52, 0x45,
	0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x4e, 0x5f, 0x53, 0x45, 0x4c,
	0x45, 0x43, 0x54, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x4f, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12,
	0x2d, 0x0a, 0x29, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f,
	0x4e, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x4f, 0x50, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x2e,
	0x0a, 0x2a, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x4e,
	0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x4f, 0x50, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x2c,
	0x0a, 0x28, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x4e,
	0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x4f, 0x50, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x37, 0x0a, 0x33,
	0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x4e, 0x5f, 0x53,
	0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x4f, 0x50, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x48, 0x4f,
	0x4f, 0x53, 0x45, 0x10, 0x03, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a,
	0xab, 0x02, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38,
	0x5f, 0x4a, 0x49, 0x58, 0x49, 0x41, 0x42, 0x4f, 0x58, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a,
	0x45, 0x43, 0x54, 0x38, 0x5f, 0x4a, 0x49, 0x58, 0x49, 0x41, 0x42, 0x4f, 0x58, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x26, 0x0a,
	0x22, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x4a, 0x49,
	0x58, 0x49, 0x41, 0x42, 0x4f, 0x58, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f,
	0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x4a, 0x49, 0x58, 0x49, 0x41, 0x42, 0x4f, 0x58, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x02, 0x12, 0x26, 0x0a,
	0x22, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x4a, 0x49,
	0x58, 0x49, 0x41, 0x42, 0x4f, 0x58, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f,
	0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x4a, 0x49, 0x58, 0x49, 0x41, 0x42, 0x4f, 0x58, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x4f, 0x50, 0x45, 0x4e, 0x41, 0x54, 0x4d,
	0x41, 0x58, 0x10, 0x04, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a,
	0x45, 0x43, 0x54, 0x38, 0x5f, 0x4a, 0x49, 0x58, 0x49, 0x41, 0x42, 0x4f, 0x58, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x42, 0x59, 0x43, 0x4c, 0x49, 0x43, 0x4b, 0x45,
	0x44, 0x10, 0x05, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0x8b, 0x03,
	0x0a, 0x17, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x45,
	0x51, 0x55, 0x49, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x3b, 0x0a, 0x1c, 0x52, 0x45, 0x53,
	0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x1a, 0x19, 0xaa, 0xb6, 0x18,
	0x15, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0xe6, 0x97, 0xa0,
	0xe7, 0xb1, 0xbb, 0xe5, 0x88, 0xab, 0x12, 0x43, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52,
	0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x01, 0x1a, 0x1f, 0xaa, 0xb6, 0x18, 0x1b,
	0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0xe7, 0x89, 0xa9, 0xe7,
	0x90, 0x86, 0xe6, 0x94, 0xbb, 0xe5, 0x87, 0xbb, 0xe7, 0xb1, 0xbb, 0x12, 0x44, 0x0a, 0x1f, 0x52,
	0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x45, 0x51, 0x55, 0x49,
	0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x02,
	0x1a, 0x1f, 0xaa, 0xb6, 0x18, 0x1b, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe8, 0xa3, 0x85, 0xe5,
	0xa4, 0x87, 0xe6, 0xb3, 0x95, 0xe6, 0x9c, 0xaf, 0xe6, 0x94, 0xbb, 0xe5, 0x87, 0xbb, 0xe7, 0xb1,
	0xbb, 0x12, 0x3e, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54,
	0x38, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x46,
	0x45, 0x4e, 0x53, 0x45, 0x10, 0x03, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe6, 0xa3, 0x8b, 0xe5,
	0xad, 0x90, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0xe9, 0x98, 0xb2, 0xe5, 0xbe, 0xa1, 0xe7, 0xb1,
	0xbb, 0x12, 0x3c, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54,
	0x38, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x04, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90,
	0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0xe5, 0x85, 0xb6, 0xe4, 0xbb, 0x96, 0xe7, 0xb1, 0xbb, 0x12,
	0x20, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f,
	0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10,
	0x05, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xc5, 0x01, 0x0a, 0x1d,
	0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x54, 0x41, 0x4c,
	0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x47, 0x0a,
	0x22, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x54, 0x41,
	0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x1a, 0x1f, 0xaa, 0xb6, 0x18, 0x1b, 0xe6, 0xa3, 0x8b, 0xe5, 0xad,
	0x90, 0xe5, 0xa4, 0xa9, 0xe8, 0xb5, 0x8b, 0xe6, 0x97, 0xa0, 0xe8, 0xbe, 0xbe, 0xe6, 0x88, 0x90,
	0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x12, 0x51, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52,
	0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f,
	0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x53, 0x10, 0x01, 0x1a,
	0x28, 0xaa, 0xb6, 0x18, 0x24, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe5, 0xa4, 0xa9, 0xe8, 0xb5,
	0x8b, 0xe8, 0xbe, 0xbe, 0xe6, 0x88, 0x90, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe6, 0x8c, 0x87,
	0xe5, 0xae, 0x9a, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90,
	0xf9, 0x2b, 0x01, 0x2a, 0xae, 0x03, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a,
	0x45, 0x43, 0x54, 0x38, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x4d,
	0x4f, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x44, 0x0a, 0x25, 0x52, 0x45, 0x53, 0x5f,
	0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f,
	0x50, 0x52, 0x4f, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe5,
	0xa4, 0xa9, 0xe8, 0xb5, 0x8b, 0xe6, 0x97, 0xa0, 0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90, 0x12, 0x49,
	0x0a, 0x27, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x54,
	0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x01, 0x1a, 0x1c, 0xaa, 0xb6, 0x18,
	0x18, 0xe6, 0xa3, 0x8b, 0xe5, 0xad, 0x90, 0xe5, 0xa4, 0xa9, 0xe8, 0xb5, 0x8b, 0xe5, 0x9b, 0xba,
	0xe5, 0xae, 0x9a, 0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90, 0x12, 0x4e, 0x0a, 0x26, 0x52, 0x45, 0x53,
	0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54,
	0x5f, 0x50, 0x52, 0x4f, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45,
	0x52, 0x4f, 0x53, 0x10, 0x02, 0x1a, 0x22, 0xaa, 0xb6, 0x18, 0x1e, 0xe6, 0xa3, 0x8b, 0xe5, 0xad,
	0x90, 0xe5, 0xa4, 0xa9, 0xe8, 0xb5, 0x8b, 0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90, 0xe6, 0x8c, 0x87,
	0xe5, 0xae, 0x9a, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0x12, 0x51, 0x0a, 0x29, 0x52, 0x45, 0x53,
	0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54,
	0x5f, 0x50, 0x52, 0x4f, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45,
	0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x1a, 0x22, 0xaa, 0xb6, 0x18, 0x1e, 0xe6, 0xa3,
	0x8b, 0xe5, 0xad, 0x90, 0xe5, 0xa4, 0xa9, 0xe8, 0xb5, 0x8b, 0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90,
	0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a, 0x12, 0x4c, 0x0a, 0x24,
	0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x54, 0x41, 0x4c,
	0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x04, 0x1a, 0x22, 0xaa, 0xb6, 0x18, 0x1e, 0xe6, 0xa3, 0x8b, 0xe5,
	0xad, 0x90, 0xe5, 0xa4, 0xa9, 0xe8, 0xb5, 0x8b, 0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90, 0xe5, 0x85,
	0xa8, 0xe4, 0xbd, 0x93, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01,
	0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xae, 0x04, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f,
	0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x29, 0x0a, 0x25, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52,
	0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x53, 0x45, 0x4c, 0x45,
	0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10,
	0x00, 0x12, 0x3e, 0x0a, 0x28, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54,
	0x38, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x01, 0x1a,
	0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x9c, 0xac, 0xe6, 0x96, 0xb9, 0xe5, 0x90, 0x8c, 0xe7, 0xbb,
	0x84, 0x12, 0x3c, 0x0a, 0x26, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54,
	0x38, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x1a, 0x10, 0xaa,
	0xb6, 0x18, 0x0c, 0xe6, 0x9c, 0xac, 0xe6, 0x96, 0xb9, 0xe5, 0x85, 0xa8, 0xe5, 0x91, 0x98, 0x12,
	0x3d, 0x0a, 0x27, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f,
	0x42, 0x55, 0x46, 0x46, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x03, 0x1a, 0x10, 0xaa, 0xb6,
	0x18, 0x0c, 0xe6, 0x95, 0x8c, 0xe6, 0x96, 0xb9, 0xe5, 0x85, 0xa8, 0xe5, 0x91, 0x98, 0x12, 0x55,
	0x0a, 0x33, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x42,
	0x55, 0x46, 0x46, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x45, 0x4c, 0x46, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x4f, 0x53, 0x54, 0x5f,
	0x45, 0x51, 0x55, 0x49, 0x50, 0x10, 0x04, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe6, 0x9c, 0xac,
	0xe6, 0x96, 0xb9, 0xe5, 0x90, 0x8c, 0xe7, 0xbb, 0x84, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0xe6,
	0x9c, 0x80, 0xe5, 0xa4, 0x9a, 0x12, 0x3d, 0x0a, 0x27, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f,
	0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x4c, 0x4f, 0x52, 0x44,
	0x10, 0x05, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x9c, 0xac, 0xe6, 0x96, 0xb9, 0xe9, 0xa2,
	0x86, 0xe4, 0xb8, 0xbb, 0x12, 0x41, 0x0a, 0x2b, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a,
	0x45, 0x43, 0x54, 0x38, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x48,
	0x45, 0x52, 0x4f, 0x10, 0x06, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x9c, 0xac, 0xe6, 0x96,
	0xb9, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0x12, 0x42, 0x0a, 0x2c, 0x52, 0x45, 0x53, 0x5f, 0x50,
	0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x53, 0x45, 0x4c,
	0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x41,
	0x4c, 0x4c, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x10, 0x07, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6,
	0x95, 0x8c, 0xe6, 0x96, 0xb9, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0x1a, 0x08, 0x88, 0xf9, 0x2b,
	0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xb9, 0x03, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x53, 0x56, 0x52, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12,
	0x35, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x53, 0x56, 0x52, 0x5f, 0x50,
	0x4c, 0x41, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x1a, 0x1a, 0xaa, 0xb6, 0x18, 0x16,
	0xe5, 0xbe, 0xae, 0xe8, 0xb5, 0x9b, 0xe4, 0xba, 0x8b, 0x5f, 0xe6, 0x97, 0xa0, 0xe6, 0x95, 0x88,
	0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0x12, 0x32, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x53, 0x56, 0x52, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x5f, 0x4d, 0x51, 0x51, 0x10, 0x01,
	0x1a, 0x18, 0xaa, 0xb6, 0x18, 0x14, 0xe5, 0xbe, 0xae, 0xe8, 0xb5, 0x9b, 0xe4, 0xba, 0x8b, 0x5f,
	0xe6, 0x89, 0x8b, 0x51, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0x12, 0x37, 0x0a, 0x17, 0x52, 0x45,
	0x53, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x53, 0x56, 0x52, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x5f, 0x57,
	0x45, 0x49, 0x58, 0x49, 0x4e, 0x10, 0x02, 0x1a, 0x1a, 0xaa, 0xb6, 0x18, 0x16, 0xe5, 0xbe, 0xae,
	0xe8, 0xb5, 0x9b, 0xe4, 0xba, 0x8b, 0x5f, 0xe5, 0xbe, 0xae, 0xe4, 0xbf, 0xa1, 0xe5, 0xb9, 0xb3,
	0xe5, 0x8f, 0xb0, 0x12, 0x36, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x53,
	0x56, 0x52, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x5f, 0x47, 0x55, 0x45, 0x53, 0x54, 0x10, 0x03, 0x1a,
	0x1a, 0xaa, 0xb6, 0x18, 0x16, 0xe5, 0xbe, 0xae, 0xe8, 0xb5, 0x9b, 0xe4, 0xba, 0x8b, 0x5f, 0xe6,
	0xb8, 0xb8, 0xe5, 0xae, 0xa2, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0x12, 0x3b, 0x0a, 0x19, 0x52,
	0x45, 0x53, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x53, 0x56, 0x52, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x5f,
	0x46, 0x41, 0x43, 0x45, 0x42, 0x4f, 0x4f, 0x4b, 0x10, 0x04, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18,
	0xe5, 0xbe, 0xae, 0xe8, 0xb5, 0x9b, 0xe4, 0xba, 0x8b, 0x5f, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f,
	0x6f, 0x6b, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0x12, 0x40, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x5f,
	0x47, 0x41, 0x4d, 0x45, 0x53, 0x56, 0x52, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x05, 0x1a, 0x1e, 0xaa, 0xb6, 0x18, 0x1a,
	0xe5, 0xbe, 0xae, 0xe8, 0xb5, 0x9b, 0xe4, 0xba, 0x8b, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0x12, 0x3b, 0x0a, 0x17, 0x52, 0x45,
	0x53, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x53, 0x56, 0x52, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x5f, 0x47,
	0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x10, 0x06, 0x1a, 0x1e, 0xaa, 0xb6, 0x18, 0x1a, 0xe5, 0xbe, 0xae,
	0xe8, 0xb5, 0x9b, 0xe4, 0xba, 0x8b, 0x5f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b,
	0x01, 0x2a, 0xd6, 0x01, 0x0a, 0x0e, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x52, 0x49, 0x41, 0x4c, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x52, 0x49, 0x41,
	0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x29, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8,
	0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe8, 0xaf, 0x95, 0xe7, 0x82, 0xbc, 0x12, 0x2b, 0x0a, 0x15, 0x52,
	0x45, 0x53, 0x5f, 0x54, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f,
	0x52, 0x4d, 0x41, 0x4c, 0x10, 0x02, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x99, 0xae, 0xe9,
	0x80, 0x9a, 0xe8, 0xaf, 0x95, 0xe7, 0x82, 0xbc, 0x12, 0x2d, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x5f,
	0x54, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x56, 0x41, 0x4e,
	0x43, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe9, 0xab, 0x98, 0xe7, 0xba,
	0xa7, 0xe8, 0xaf, 0x95, 0xe7, 0x82, 0xbc, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x5f, 0x54,
	0x52, 0x49, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x04,
	0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xf0, 0x07, 0x0a, 0x24, 0x52,
	0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x54, 0x41, 0x4c, 0x45,
	0x4e, 0x54, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x12, 0x30, 0x0a, 0x2c, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45,
	0x43, 0x54, 0x38, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x5f,
	0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x46, 0x0a, 0x30, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f,
	0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x55, 0x46,
	0x46, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45,
	0x4c, 0x46, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18,
	0x0c, 0xe5, 0xb7, 0xb1, 0xe6, 0x96, 0xb9, 0xe7, 0x8e, 0xa9, 0xe5, 0xae, 0xb6, 0x12, 0x54, 0x0a,
	0x35, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x54, 0x41,
	0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x43, 0x41, 0x52, 0x45, 0x45,
	0x52, 0x5f, 0x54, 0x41, 0x4e, 0x4b, 0x10, 0x02, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe5, 0xb7,
	0xb1, 0xe6, 0x96, 0xb9, 0xe8, 0x81, 0x8c, 0xe4, 0xb8, 0x9a, 0xe4, 0xb8, 0xba, 0xe5, 0x9d, 0xa6,
	0xe5, 0x85, 0x8b, 0x12, 0x52, 0x0a, 0x33, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45,
	0x43, 0x54, 0x38, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x5f,
	0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x46,
	0x5f, 0x43, 0x41, 0x52, 0x45, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x10, 0x03, 0x1a, 0x19, 0xaa, 0xb6,
	0x18, 0x15, 0xe5, 0xb7, 0xb1, 0xe6, 0x96, 0xb9, 0xe8, 0x81, 0x8c, 0xe4, 0xb8, 0x9a, 0xe4, 0xb8,
	0xba, 0xe5, 0xb0, 0x84, 0xe6, 0x89, 0x8b, 0x12, 0x53, 0x0a, 0x34, 0x52, 0x45, 0x53, 0x5f, 0x50,
	0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x42,
	0x55, 0x46, 0x46, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x45, 0x4c, 0x46, 0x5f, 0x43, 0x41, 0x52, 0x45, 0x45, 0x52, 0x5f, 0x41, 0x49, 0x44, 0x10,
	0x04, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe5, 0xb7, 0xb1, 0xe6, 0x96, 0xb9, 0xe8, 0x81, 0x8c,
	0xe4, 0xb8, 0x9a, 0xe4, 0xb8, 0xba, 0xe8, 0xbe, 0x85, 0xe5, 0x8a, 0xa9, 0x12, 0x52, 0x0a, 0x33,
	0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x54, 0x41, 0x4c,
	0x45, 0x4e, 0x54, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x43, 0x41, 0x52, 0x45, 0x45, 0x52,
	0x5f, 0x41, 0x50, 0x10, 0x05, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe5, 0xb7, 0xb1, 0xe6, 0x96,
	0xb9, 0xe8, 0x81, 0x8c, 0xe4, 0xb8, 0x9a, 0xe4, 0xb8, 0xba, 0xe6, 0xb3, 0x95, 0xe5, 0xb8, 0x88,
	0x12, 0x56, 0x0a, 0x37, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38,
	0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x53, 0x45, 0x4c,
	0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x43, 0x41,
	0x52, 0x45, 0x45, 0x52, 0x5f, 0x53, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x10, 0x06, 0x1a, 0x19, 0xaa,
	0xb6, 0x18, 0x15, 0xe5, 0xb7, 0xb1, 0xe6, 0x96, 0xb9, 0xe8, 0x81, 0x8c, 0xe4, 0xb8, 0x9a, 0xe4,
	0xb8, 0xba, 0xe6, 0x88, 0x98, 0xe5, 0xa3, 0xab, 0x12, 0x58, 0x0a, 0x39, 0x52, 0x45, 0x53, 0x5f,
	0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f,
	0x42, 0x55, 0x46, 0x46, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x43, 0x41, 0x52, 0x45, 0x45, 0x52, 0x5f, 0x41, 0x53, 0x53,
	0x41, 0x53, 0x53, 0x49, 0x4e, 0x10, 0x07, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe5, 0xb7, 0xb1,
	0xe6, 0x96, 0xb9, 0xe8, 0x81, 0x8c, 0xe4, 0xb8, 0x9a, 0xe4, 0xb8, 0xba, 0xe5, 0x88, 0xba, 0xe5,
	0xae, 0xa2, 0x12, 0x4e, 0x0a, 0x32, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43,
	0x54, 0x38, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x53,
	0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f,
	0x43, 0x41, 0x4d, 0x50, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x08, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12,
	0xe4, 0xba, 0xba, 0xe6, 0x95, 0xb0, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0x9a, 0xe9, 0x98, 0xb5, 0xe8,
	0x90, 0xa5, 0x12, 0x43, 0x0a, 0x2d, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43,
	0x54, 0x38, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x53,
	0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f,
	0x41, 0x4c, 0x4c, 0x10, 0x09, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0xb7, 0xb1, 0xe6, 0x96,
	0xb9, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0x12, 0x44, 0x0a, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x50,
	0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x42,
	0x55, 0x46, 0x46, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x0a, 0x1a, 0x10, 0xaa, 0xb6, 0x18,
	0x0c, 0xe6, 0x95, 0x8c, 0xe6, 0x96, 0xb9, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0x12, 0x64, 0x0a,
	0x36, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x54, 0x41,
	0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45,
	0x52, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x0b, 0x1a, 0x28, 0xaa, 0xb6, 0x18, 0x24, 0xe5,
	0xb7, 0xb1, 0xe6, 0x96, 0xb9, 0xe7, 0x8e, 0xa9, 0xe5, 0xae, 0xb6, 0xef, 0xbc, 0x8c, 0xe6, 0xaf,
	0x8f, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe6, 0x8f, 0x92, 0xe6, 0x8b, 0x94, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xa0, 0x03,
	0x0a, 0x1d, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x5f, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12,
	0x29, 0x0a, 0x25, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x3f, 0x0a, 0x21, 0x52, 0x45,
	0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x5f, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x57, 0x10,
	0x01, 0x1a, 0x18, 0xaa, 0xb6, 0x18, 0x14, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0xe5,
	0x8c, 0xb9, 0xe9, 0x85, 0x8d, 0xe4, 0xbd, 0x8e, 0xe6, 0xae, 0xb5, 0x12, 0x42, 0x0a, 0x24, 0x52,
	0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x5f, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x44,
	0x44, 0x4c, 0x45, 0x10, 0x02, 0x1a, 0x18, 0xaa, 0xb6, 0x18, 0x14, 0x50, 0x52, 0x4f, 0x4a, 0x45,
	0x43, 0x54, 0x38, 0xe5, 0x8c, 0xb9, 0xe9, 0x85, 0x8d, 0xe4, 0xb8, 0xad, 0xe6, 0xae, 0xb5, 0x12,
	0x40, 0x0a, 0x22, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x1a, 0x18, 0xaa, 0xb6, 0x18, 0x14, 0x50, 0x52, 0x4f,
	0x4a, 0x45, 0x43, 0x54, 0x38, 0xe5, 0x8c, 0xb9, 0xe9, 0x85, 0x8d, 0xe9, 0xab, 0x98, 0xe6, 0xae,
	0xb5, 0x12, 0x3f, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54,
	0x38, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x4f, 0x50, 0x10, 0x04, 0x1a, 0x18, 0xaa, 0xb6, 0x18, 0x14, 0x50, 0x52,
	0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0xe5, 0x8c, 0xb9, 0xe9, 0x85, 0x8d, 0xe9, 0xa1, 0xb6, 0xe6,
	0xae, 0xb5, 0x12, 0x42, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43,
	0x54, 0x38, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x05, 0x1a, 0x1b, 0xaa, 0xb6, 0x18, 0x17, 0x50,
	0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0xe5, 0x8c, 0xb9, 0xe9, 0x85, 0x8d, 0xe5, 0x85, 0xa8,
	0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01,
	0x2a, 0xcd, 0x0b, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4f, 0x56, 0x45,
	0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x22, 0x0a, 0x1e, 0x52,
	0x45, 0x53, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12,
	0x47, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4f, 0x56, 0x45, 0x52, 0x5f,
	0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x5f, 0x48,
	0x50, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x10, 0x01, 0x1a, 0x1e, 0xaa, 0xb6, 0x18, 0x1a, 0x70, 0x72,
	0x6f, 0x6a, 0x38, 0xe5, 0x89, 0xa9, 0xe4, 0xbd, 0x99, 0xe8, 0xa1, 0x80, 0xe9, 0x87, 0x8f, 0xe7,
	0x99, 0xbe, 0xe5, 0x88, 0x86, 0xe6, 0xaf, 0x94, 0x12, 0x54, 0x0a, 0x27, 0x52, 0x45, 0x53, 0x5f,
	0x47, 0x41, 0x4d, 0x45, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x5f, 0x48, 0x50, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x10, 0x02, 0x1a, 0x27, 0xaa, 0xb6, 0x18, 0x23, 0x70, 0x72, 0x6f, 0x6a, 0x38,
	0xe4, 0xb8, 0x8d, 0xe9, 0xab, 0x98, 0xe4, 0xba, 0x8e, 0xe5, 0x89, 0xa9, 0xe4, 0xbd, 0x99, 0xe8,
	0xa1, 0x80, 0xe9, 0x87, 0x8f, 0xe7, 0x99, 0xbe, 0xe5, 0x88, 0x86, 0xe6, 0xaf, 0x94, 0x12, 0x4f,
	0x0a, 0x2b, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x43,
	0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x56, 0x45, 0x41, 0x53, 0x45,
	0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x4e, 0x55, 0x4d, 0x10, 0x03, 0x1a,
	0x1e, 0xaa, 0xb6, 0x18, 0x1a, 0x70, 0x72, 0x6f, 0x6a, 0x38, 0xe5, 0x80, 0x92, 0xe6, 0x95, 0xb0,
	0xe6, 0x8e, 0x92, 0xe5, 0x90, 0x8d, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe6, 0x95, 0xb0, 0x12,
	0x4c, 0x0a, 0x2b, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4f, 0x56, 0x45, 0x52, 0x5f,
	0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52,
	0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x04,
	0x1a, 0x1b, 0xaa, 0xb6, 0x18, 0x17, 0x70, 0x72, 0x6f, 0x6a, 0x38, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b,
	0x84, 0xe6, 0x98, 0x9f, 0xe7, 0xba, 0xa7, 0xe4, 0xb8, 0xaa, 0xe6, 0x95, 0xb0, 0x12, 0x5f, 0x0a,
	0x2f, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x4f,
	0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x4e,
	0x44, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x48, 0x45, 0x52, 0x4f, 0x4d, 0x41, 0x58, 0x4e, 0x55, 0x4d,
	0x10, 0x05, 0x1a, 0x2a, 0xaa, 0xb6, 0x18, 0x26, 0x70, 0x72, 0x6f, 0x6a, 0x38, 0xe5, 0x8d, 0x95,
	0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe5, 0x87, 0xbb, 0xe6, 0x9d, 0x80, 0xe8, 0x8b, 0xb1, 0xe9,
	0x9b, 0x84, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe4, 0xb8, 0xaa, 0xe6, 0x95, 0xb0, 0x12, 0x64,
	0x0a, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x43,
	0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x48, 0x45, 0x52,
	0x4f, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x48, 0x45, 0x52, 0x4f, 0x4d, 0x41, 0x58, 0x4e, 0x55, 0x4d,
	0x10, 0x06, 0x1a, 0x30, 0xaa, 0xb6, 0x18, 0x2c, 0x70, 0x72, 0x6f, 0x6a, 0x38, 0xe5, 0x8d, 0x95,
	0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe7, 0xb4, 0xaf, 0xe8, 0xae, 0xa1, 0xe5, 0x87, 0xbb, 0xe6,
	0x9d, 0x80, 0xe6, 0x95, 0x8c, 0xe4, 0xba, 0xba, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe4, 0xb8,
	0xaa, 0xe6, 0x95, 0xb0, 0x12, 0x65, 0x0a, 0x35, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x4f, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f,
	0x4e, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4f, 0x42, 0x54, 0x41, 0x49, 0x4e, 0x5f,
	0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x07, 0x1a,
	0x2a, 0xaa, 0xb6, 0x18, 0x26, 0x70, 0x72, 0x6f, 0x6a, 0x38, 0xe5, 0x8d, 0x95, 0xe5, 0x9b, 0x9e,
	0xe5, 0x90, 0x88, 0xe8, 0x8e, 0xb7, 0xe5, 0xbe, 0x97, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0xe6,
	0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe4, 0xb8, 0xaa, 0xe6, 0x95, 0xb0, 0x12, 0x47, 0x0a, 0x26, 0x52,
	0x45, 0x53, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x45, 0x51, 0x55, 0x49,
	0x50, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x08, 0x1a, 0x1b, 0xaa, 0xb6, 0x18, 0x17, 0x70, 0x72, 0x6f,
	0x6a, 0x38, 0xe7, 0xb4, 0xaf, 0xe8, 0xae, 0xa1, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0xe4, 0xb8,
	0xaa, 0xe6, 0x95, 0xb0, 0x12, 0x3a, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x4f, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47,
	0x4f, 0x4c, 0x44, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x09, 0x1a, 0x15, 0xaa, 0xb6, 0x18, 0x11, 0x70,
	0x72, 0x6f, 0x6a, 0x38, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe9, 0x87, 0x91, 0xe9, 0x92, 0xb1,
	0x12, 0x4d, 0x0a, 0x29, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4f, 0x56, 0x45, 0x52,
	0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x52,
	0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x48, 0x55, 0x52, 0x54, 0x10, 0x0a, 0x1a,
	0x1e, 0xaa, 0xb6, 0x18, 0x1a, 0x70, 0x72, 0x6f, 0x6a, 0x38, 0xe5, 0x8d, 0x95, 0xe5, 0x9b, 0x9e,
	0xe5, 0x90, 0x88, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe8, 0xbe, 0x93, 0xe5, 0x87, 0xba, 0x12,
	0x50, 0x0a, 0x2c, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4f, 0x56, 0x45, 0x52, 0x5f,
	0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x41, 0x43,
	0x43, 0x55, 0x5f, 0x57, 0x49, 0x4e, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4e, 0x55, 0x4d, 0x10,
	0x0b, 0x1a, 0x1e, 0xaa, 0xb6, 0x18, 0x1a, 0x70, 0x72, 0x6f, 0x6a, 0x38, 0xe6, 0x9c, 0x80, 0xe9,
	0xab, 0x98, 0xe8, 0xbf, 0x9e, 0xe8, 0x83, 0x9c, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe6, 0x95,
	0xb0, 0x12, 0x42, 0x0a, 0x24, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4f, 0x56, 0x45,
	0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x49, 0x4e, 0x5f,
	0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x0c, 0x1a, 0x18, 0xaa, 0xb6, 0x18,
	0x14, 0x70, 0x72, 0x6f, 0x6a, 0x38, 0xe8, 0x83, 0x9c, 0xe5, 0x88, 0xa9, 0xe5, 0x9b, 0x9e, 0xe5,
	0x90, 0x88, 0xe6, 0x95, 0xb0, 0x12, 0x36, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x41, 0x4e, 0x4b, 0x10, 0x0d, 0x1a, 0x15, 0xaa, 0xb6, 0x18, 0x11, 0x70, 0x72, 0x6f, 0x6a,
	0x38, 0xe7, 0xbb, 0x93, 0xe7, 0xae, 0x97, 0xe6, 0x8e, 0x92, 0xe5, 0x90, 0x8d, 0x12, 0x50, 0x0a,
	0x2c, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x4f,
	0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x49, 0x4e, 0x5f, 0x41, 0x54, 0x4c, 0x45,
	0x41, 0x53, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x0e, 0x1a,
	0x1e, 0xaa, 0xb6, 0x18, 0x1a, 0x70, 0x72, 0x6f, 0x6a, 0x38, 0xe8, 0x83, 0x9c, 0xe5, 0x88, 0xa9,
	0xe8, 0x87, 0xb3, 0xe5, 0xb0, 0x91, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe6, 0x95, 0xb0, 0x12,
	0x46, 0x0a, 0x28, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4f, 0x56, 0x45, 0x52, 0x5f,
	0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f,
	0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x0f, 0x1a, 0x18, 0xaa,
	0xb6, 0x18, 0x14, 0x70, 0x72, 0x6f, 0x6a, 0x38, 0xe6, 0x80, 0xbb, 0xe5, 0x88, 0xb7, 0xe6, 0x96,
	0xb0, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x12, 0x4b, 0x0a, 0x27, 0x52, 0x45, 0x53, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x48, 0x55, 0x52, 0x54,
	0x45, 0x44, 0x10, 0x10, 0x1a, 0x1e, 0xaa, 0xb6, 0x18, 0x1a, 0x70, 0x72, 0x6f, 0x6a, 0x38, 0xe5,
	0x8d, 0x95, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe6, 0x89,
	0xbf, 0xe4, 0xbc, 0xa4, 0x12, 0x4c, 0x0a, 0x25, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x4f, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x10, 0x11, 0x1a,
	0x21, 0xaa, 0xb6, 0x18, 0x1d, 0x70, 0x72, 0x6f, 0x6a, 0x38, 0xe5, 0x8d, 0x95, 0xe5, 0x9b, 0x9e,
	0xe5, 0x90, 0x88, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe6, 0xb2, 0xbb, 0xe7, 0x96, 0x97, 0xe9,
	0x87, 0x8f, 0x12, 0x42, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4f, 0x56,
	0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x53,
	0x54, 0x10, 0x12, 0x1a, 0x21, 0xaa, 0xb6, 0x18, 0x1d, 0x70, 0x72, 0x6f, 0x6a, 0x38, 0xe8, 0xbe,
	0xbe, 0xe6, 0x88, 0x90, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01,
	0x2a, 0xaa, 0x07, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x41, 0x42,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45,
	0x53, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4e,
	0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x46, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x45, 0x52,
	0x4f, 0x5f, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x48, 0x55, 0x52, 0x54, 0x5f, 0x54,
	0x4f, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x10, 0x01, 0x1a, 0x23, 0xaa, 0xb6, 0x18, 0x1f, 0xe8, 0x8b,
	0xb1, 0xe9, 0x9b, 0x84, 0xe8, 0x83, 0xbd, 0xe5, 0x8a, 0x9b, 0x5f, 0xe5, 0xaf, 0xb9, 0xe8, 0x8b,
	0xb1, 0xe9, 0x9b, 0x84, 0xe6, 0x80, 0xbb, 0xe4, 0xbc, 0xa4, 0xe5, 0xae, 0xb3, 0x12, 0x43, 0x0a,
	0x20, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x4f, 0x52,
	0x4d, 0x10, 0x02, 0x1a, 0x1d, 0xaa, 0xb6, 0x18, 0x19, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe8,
	0x83, 0xbd, 0xe5, 0x8a, 0x9b, 0x5f, 0xe7, 0xbb, 0x8f, 0xe6, 0xb5, 0x8e, 0xe8, 0xbd, 0xac, 0xe5,
	0x8c, 0x96, 0x12, 0x3e, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x41,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x48, 0x55, 0x52, 0x54, 0x5f, 0x54, 0x4f, 0x4b, 0x45,
	0x4e, 0x10, 0x03, 0x1a, 0x1d, 0xaa, 0xb6, 0x18, 0x19, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe8,
	0x83, 0xbd, 0xe5, 0x8a, 0x9b, 0x5f, 0xe6, 0x89, 0xbf, 0xe5, 0x8f, 0x97, 0xe4, 0xbc, 0xa4, 0xe5,
	0xae, 0xb3, 0x12, 0x47, 0x0a, 0x24, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x41,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x48, 0x55, 0x52, 0x54, 0x5f, 0x54, 0x4f, 0x4b, 0x45,
	0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x54, 0x48, 0x10, 0x04, 0x1a, 0x1d, 0xaa, 0xb6,
	0x18, 0x19, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe8, 0x83, 0xbd, 0xe5, 0x8a, 0x9b, 0x5f, 0xe6,
	0xb2, 0xa1, 0xe6, 0xad, 0xbb, 0xe6, 0x89, 0xbf, 0xe4, 0xbc, 0xa4, 0x12, 0x3c, 0x0a, 0x1c, 0x52,
	0x45, 0x53, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x10, 0x05, 0x1a, 0x1a, 0xaa,
	0xb6, 0x18, 0x16, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe8, 0x83, 0xbd, 0xe5, 0x8a, 0x9b, 0x5f,
	0xe6, 0x80, 0xbb, 0xe7, 0xbb, 0x8f, 0xe6, 0xb5, 0x8e, 0x12, 0x4b, 0x0a, 0x28, 0x52, 0x45, 0x53,
	0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x4f,
	0x4e, 0x45, 0x59, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x4a,
	0x55, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x06, 0x1a, 0x1d, 0xaa, 0xb6, 0x18, 0x19, 0xe8, 0x8b, 0xb1,
	0xe9, 0x9b, 0x84, 0xe8, 0x83, 0xbd, 0xe5, 0x8a, 0x9b, 0x5f, 0xe9, 0x87, 0x8e, 0xe6, 0x80, 0xaa,
	0xe7, 0xbb, 0x8f, 0xe6, 0xb5, 0x8e, 0x12, 0x36, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x45,
	0x52, 0x4f, 0x5f, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f,
	0x48, 0x49, 0x54, 0x10, 0x07, 0x1a, 0x17, 0xaa, 0xb6, 0x18, 0x13, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b,
	0x84, 0xe8, 0x83, 0xbd, 0xe5, 0x8a, 0x9b, 0x5f, 0xe8, 0xa1, 0xa5, 0xe5, 0x88, 0x80, 0x12, 0x32,
	0x0a, 0x15, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x41, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x08, 0x1a, 0x17, 0xaa, 0xb6, 0x18, 0x13, 0xe8,
	0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe8, 0x83, 0xbd, 0xe5, 0x8a, 0x9b, 0x5f, 0xe5, 0x87, 0xbb, 0xe6,
	0x9d, 0x80, 0x12, 0x33, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x41,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x41, 0x54, 0x48, 0x10, 0x09, 0x1a, 0x17,
	0xaa, 0xb6, 0x18, 0x13, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe8, 0x83, 0xbd, 0xe5, 0x8a, 0x9b,
	0x5f, 0xe6, 0xad, 0xbb, 0xe4, 0xba, 0xa1, 0x12, 0x34, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x5f, 0x48,
	0x45, 0x52, 0x4f, 0x5f, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x53, 0x53, 0x49,
	0x53, 0x54, 0x10, 0x0a, 0x1a, 0x17, 0xaa, 0xb6, 0x18, 0x13, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84,
	0xe8, 0x83, 0xbd, 0xe5, 0x8a, 0x9b, 0x5f, 0xe5, 0x8a, 0xa9, 0xe6, 0x94, 0xbb, 0x12, 0x37, 0x0a,
	0x17, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x0b, 0x1a, 0x1a, 0xaa, 0xb6, 0x18, 0x16,
	0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe8, 0x83, 0xbd, 0xe5, 0x8a, 0x9b, 0x5f, 0xe5, 0x8f, 0x82,
	0xe5, 0x9b, 0xa2, 0xe7, 0x8e, 0x87, 0x12, 0x3b, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x45,
	0x52, 0x4f, 0x5f, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x4f, 0x4c, 0x10, 0x0c, 0x1a, 0x1d, 0xaa, 0xb6, 0x18, 0x19, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84,
	0xe8, 0x83, 0xbd, 0xe5, 0x8a, 0x9b, 0x5f, 0xe6, 0x8e, 0xa7, 0xe5, 0x88, 0xb6, 0xe6, 0x97, 0xb6,
	0xe9, 0x95, 0xbf, 0x12, 0x35, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x10, 0x0d, 0x1a, 0x1a,
	0xaa, 0xb6, 0x18, 0x16, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe8, 0x83, 0xbd, 0xe5, 0x8a, 0x9b,
	0x5f, 0xe6, 0xb2, 0xbb, 0xe7, 0x96, 0x97, 0xe9, 0x87, 0x8f, 0x12, 0x47, 0x0a, 0x1e, 0x52, 0x45,
	0x53, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x48,
	0x55, 0x52, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x10, 0x0e, 0x1a, 0x23,
	0xaa, 0xb6, 0x18, 0x1f, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe8, 0x83, 0xbd, 0xe5, 0x8a, 0x9b,
	0x5f, 0xe5, 0xaf, 0xb9, 0xe9, 0x98, 0xb2, 0xe5, 0xbe, 0xa1, 0xe5, 0xa1, 0x94, 0xe4, 0xbc, 0xa4,
	0xe5, 0xae, 0xb3, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0x9d, 0x01,
	0x0a, 0x19, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x45, 0x52, 0x46, 0x45, 0x46, 0x54, 0x5f, 0x53, 0x50,
	0x45, 0x43, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x1d, 0x0a, 0x19, 0x52,
	0x45, 0x53, 0x5f, 0x50, 0x45, 0x52, 0x46, 0x45, 0x46, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x38, 0x0a, 0x1c, 0x52, 0x45,
	0x53, 0x5f, 0x50, 0x45, 0x52, 0x46, 0x45, 0x46, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x54, 0x49,
	0x4d, 0x45, 0x5f, 0x43, 0x55, 0x52, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x01, 0x1a, 0x16, 0xaa, 0xb6,
	0x18, 0x12, 0xe7, 0xbb, 0x91, 0xe5, 0xae, 0x9a, 0xe5, 0xbd, 0x93, 0xe5, 0x91, 0xa8, 0xe7, 0x94,
	0x9f, 0xe6, 0x95, 0x88, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x45, 0x52, 0x46,
	0x45, 0x46, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4c, 0x41, 0x53,
	0x54, 0x10, 0x02, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xc8, 0x01,
	0x0a, 0x0c, 0x52, 0x45, 0x53, 0x5f, 0x45, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x12, 0x2a,
	0x0a, 0x14, 0x52, 0x45, 0x53, 0x5f, 0x45, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44,
	0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe9, 0xbb,
	0x98, 0xe8, 0xae, 0xa4, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x12, 0x29, 0x0a, 0x16, 0x52, 0x45,
	0x53, 0x5f, 0x45, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x5f, 0x4d, 0x41, 0x58, 0x10, 0x01, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe8, 0xbe, 0xbe, 0xe5,
	0x88, 0xb0, 0x4d, 0x41, 0x58, 0x12, 0x2b, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x5f, 0x45, 0x50, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x5a, 0x45, 0x52, 0x4f,
	0x10, 0x02, 0x1a, 0x0e, 0xaa, 0xb6, 0x18, 0x0a, 0xe8, 0xbe, 0xbe, 0xe5, 0x88, 0xb0, 0x5a, 0x45,
	0x52, 0x4f, 0x12, 0x2a, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x5f, 0x45, 0x50, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x03, 0x1a,
	0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe7, 0xa6, 0xbb, 0xe5, 0xbc, 0x80, 0x4d, 0x41, 0x58, 0x1a, 0x08,
	0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xd4, 0x01, 0x0a, 0x18, 0x52, 0x45, 0x53,
	0x5f, 0x48, 0x4f, 0x4e, 0x4f, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x4f, 0x4e,
	0x4f, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x4e, 0x55, 0x4c,
	0x4c, 0x10, 0x00, 0x12, 0x37, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x4f, 0x4e, 0x4f, 0x52,
	0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x10,
	0x01, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe6, 0x8e, 0x92, 0xe4, 0xbd, 0x8d, 0xe8, 0xb5, 0x9b,
	0xe8, 0x8d, 0xa3, 0xe8, 0xaa, 0x89, 0xe6, 0x8c, 0x91, 0xe6, 0x88, 0x98, 0x12, 0x39, 0x0a, 0x1a,
	0x52, 0x45, 0x53, 0x5f, 0x48, 0x4f, 0x4e, 0x4f, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45,
	0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x02, 0x1a, 0x19, 0xaa, 0xb6,
	0x18, 0x15, 0xe5, 0xb7, 0x85, 0xe5, 0xb3, 0xb0, 0xe8, 0xb5, 0x9b, 0xe8, 0x8d, 0xa3, 0xe8, 0xaa,
	0x89, 0xe6, 0x8c, 0x91, 0xe6, 0x88, 0x98, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x5f, 0x48,
	0x4f, 0x4e, 0x4f, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x4c,
	0x41, 0x53, 0x54, 0x10, 0x03, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a,
	0xe3, 0x01, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x5f, 0x49, 0x4e,
	0x54, 0x52, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x23, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x5f,
	0x47, 0x55, 0x49, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x52, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x1a, 0x04, 0xaa, 0xb6, 0x18, 0x00, 0x12, 0x33, 0x0a,
	0x1a, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x52, 0x4f,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x01, 0x1a, 0x13, 0xaa,
	0xb6, 0x18, 0x0f, 0xe5, 0x9b, 0xbe, 0xe7, 0x89, 0x87, 0xe4, 0xbb, 0x8b, 0xe7, 0xbb, 0x8d, 0xe6,
	0xa1, 0x86, 0x12, 0x33, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x5f,
	0x49, 0x4e, 0x54, 0x52, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f,
	0x10, 0x02, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe8, 0xa7, 0x86, 0xe9, 0xa2, 0x91, 0xe4, 0xbb,
	0x8b, 0xe7, 0xbb, 0x8d, 0xe6, 0xa1, 0x86, 0x12, 0x32, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x5f, 0x47,
	0x55, 0x49, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x52, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x54, 0x45, 0x58, 0x54, 0x10, 0x03, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe6, 0x96, 0x87, 0xe6,
	0x9c, 0xac, 0xe4, 0xbb, 0x8b, 0xe7, 0xbb, 0x8d, 0xe6, 0xa1, 0x86, 0x1a, 0x08, 0x88, 0xf9, 0x2b,
	0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0x8c, 0x02, 0x0a, 0x0d, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x5f, 0x54, 0x41, 0x47, 0x12, 0x1c, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x5f, 0x53,
	0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x1a,
	0x04, 0xaa, 0xb6, 0x18, 0x00, 0x12, 0x42, 0x0a, 0x26, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49,
	0x4c, 0x4c, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x4c, 0x49, 0x42, 0x41, 0x49, 0x5f, 0x55, 0x4c, 0x54,
	0x49, 0x4d, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x48, 0x49, 0x54, 0x10,
	0x01, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0x9d, 0x8e, 0xe7, 0x99, 0xbd, 0xe5, 0xa4, 0xa7,
	0xe6, 0x8b, 0x9b, 0xe5, 0x91, 0xbd, 0xe4, 0xb8, 0xad, 0x12, 0x46, 0x0a, 0x2a, 0x52, 0x45, 0x53,
	0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x59, 0x49, 0x4e, 0x47, 0x5a,
	0x48, 0x45, 0x4e, 0x47, 0x5f, 0x55, 0x4c, 0x54, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x5f, 0x48, 0x49, 0x54, 0x10, 0x02, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5,
	0xac, 0xb4, 0xe6, 0x94, 0xbf, 0xe5, 0xa4, 0xa7, 0xe6, 0x8b, 0x9b, 0xe5, 0x91, 0xbd, 0xe4, 0xb8,
	0xad, 0x12, 0x47, 0x0a, 0x28, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x54,
	0x41, 0x47, 0x5f, 0x59, 0x49, 0x4e, 0x47, 0x5a, 0x48, 0x45, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53,
	0x41, 0x52, 0x4d, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x48, 0x49, 0x54, 0x10, 0x03, 0x1a,
	0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe5, 0xac, 0xb4, 0xe6, 0x94, 0xbf, 0xe4, 0xba, 0x8c, 0xe6, 0x8a,
	0x80, 0xe8, 0x83, 0xbd, 0xe5, 0x91, 0xbd, 0xe4, 0xb8, 0xad, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01,
	0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xa6, 0x03, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x45, 0x41,
	0x4d, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x12, 0x31, 0x0a, 0x18,
	0x52, 0x45, 0x53, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x52,
	0x55, 0x4c, 0x45, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f,
	0xe6, 0x97, 0xa0, 0xe7, 0xbb, 0x84, 0xe9, 0x98, 0x9f, 0xe8, 0xa7, 0x84, 0xe5, 0x88, 0x99, 0x12,
	0x4b, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x52, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x53, 0x4d, 0x41, 0x4c,
	0x4c, 0x47, 0x52, 0x41, 0x44, 0x45, 0x10, 0x01, 0x1a, 0x22, 0xaa, 0xb6, 0x18, 0x1e, 0xe7, 0xbb,
	0x84, 0xe9, 0x98, 0x9f, 0xe8, 0xa7, 0x84, 0xe5, 0x88, 0x99, 0xe6, 0x8e, 0x92, 0xe4, 0xbd, 0x8d,
	0xe8, 0xb5, 0x9b, 0xe5, 0xb0, 0x8f, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0x12, 0x5b, 0x0a, 0x2d,
	0x52, 0x45, 0x53, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x52,
	0x55, 0x4c, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x49,
	0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x42, 0x49, 0x47, 0x47, 0x52, 0x41, 0x44, 0x45, 0x10, 0x02, 0x1a,
	0x28, 0xaa, 0xb6, 0x18, 0x24, 0xe7, 0xbb, 0x84, 0xe9, 0x98, 0x9f, 0xe8, 0xa7, 0x84, 0xe5, 0x88,
	0x99, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe5, 0x8d, 0x95, 0xe4, 0xba, 0xba,
	0xe5, 0xa4, 0xa7, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0x12, 0x48, 0x0a, 0x20, 0x52, 0x45, 0x53,
	0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45,
	0x5f, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x47, 0x52, 0x41, 0x44, 0x45, 0x10, 0x03, 0x1a,
	0x22, 0xaa, 0xb6, 0x18, 0x1e, 0xe7, 0xbb, 0x84, 0xe9, 0x98, 0x9f, 0xe8, 0xa7, 0x84, 0xe5, 0x88,
	0x99, 0xe7, 0xae, 0x80, 0xe5, 0x8d, 0x95, 0xe6, 0xae, 0xb5, 0xe4, 0xbd, 0x8d, 0xe9, 0x97, 0xa8,
	0xe6, 0xa7, 0x9b, 0x12, 0x40, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f,
	0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x49,
	0x43, 0x55, 0x4c, 0x54, 0x59, 0x10, 0x04, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe7, 0xbb, 0x84,
	0xe9, 0x98, 0x9f, 0xe8, 0xa7, 0x84, 0xe5, 0x88, 0x99, 0xe9, 0x80, 0x9a, 0xe5, 0x85, 0xb3, 0xe9,
	0x9a, 0xbe, 0xe5, 0xba, 0xa6, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x5f, 0x54, 0x45, 0x41,
	0x4d, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x4c, 0x41, 0x53,
	0x54, 0x10, 0x05, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0x98, 0x02,
	0x0a, 0x1b, 0x52, 0x45, 0x53, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x42, 0x4f, 0x55, 0x4e,
	0x54, 0x59, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x12, 0x27, 0x0a,
	0x23, 0x52, 0x45, 0x53, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x54,
	0x59, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x5f, 0x43, 0x48,
	0x45, 0x53, 0x53, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x54, 0x59, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x31, 0x10, 0x01, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe5,
	0x88, 0x9d, 0xe7, 0xba, 0xa7, 0xe5, 0x9c, 0xba, 0x12, 0x30, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x5f,
	0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x54, 0x59, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x32, 0x10, 0x02, 0x1a, 0x0d, 0xaa, 0xb6, 0x18,
	0x09, 0xe4, 0xb8, 0xad, 0xe7, 0xba, 0xa7, 0xe5, 0x9c, 0xba, 0x12, 0x30, 0x0a, 0x1d, 0x52, 0x45,
	0x53, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x54, 0x59, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x33, 0x10, 0x03, 0x1a, 0x0d, 0xaa,
	0xb6, 0x18, 0x09, 0xe9, 0xab, 0x98, 0xe7, 0xba, 0xa7, 0xe5, 0x9c, 0xba, 0x12, 0x30, 0x0a, 0x1d,
	0x52, 0x45, 0x53, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x54, 0x59,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x34, 0x10, 0x04, 0x1a,
	0x0d, 0xaa, 0xb6, 0x18, 0x09, 0xe7, 0x8e, 0x8b, 0xe8, 0x80, 0x85, 0xe5, 0x9c, 0xba, 0x1a, 0x08,
	0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0x92, 0x03, 0x0a, 0x1b, 0x52, 0x45, 0x53,
	0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x2a, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x5f,
	0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x1a, 0x04,
	0xaa, 0xb6, 0x18, 0x00, 0x12, 0x3d, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a,
	0x45, 0x43, 0x54, 0x38, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x10, 0x01, 0x1a, 0x17, 0xaa, 0xb6, 0x18, 0x13,
	0xe8, 0xbd, 0xae, 0xe6, 0x8a, 0xbd, 0xe7, 0x89, 0xa9, 0xe5, 0x93, 0x81, 0x2d, 0xe8, 0x8b, 0xb1,
	0xe9, 0x9b, 0x84, 0x12, 0x3e, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45,
	0x43, 0x54, 0x38, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x10, 0x02, 0x1a, 0x17, 0xaa, 0xb6, 0x18, 0x13,
	0xe8, 0xbd, 0xae, 0xe6, 0x8a, 0xbd, 0xe7, 0x89, 0xa9, 0xe5, 0x93, 0x81, 0x2d, 0xe8, 0xa3, 0x85,
	0xe5, 0xa4, 0x87, 0x12, 0x3f, 0x0a, 0x22, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45,
	0x43, 0x54, 0x38, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x1a, 0x17, 0xaa, 0xb6, 0x18,
	0x13, 0xe8, 0xbd, 0xae, 0xe6, 0x8a, 0xbd, 0xe7, 0x89, 0xa9, 0xe5, 0x93, 0x81, 0x2d, 0xe5, 0xa4,
	0xa9, 0xe8, 0xb5, 0x8b, 0x12, 0x3d, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a,
	0x45, 0x43, 0x54, 0x38, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x04, 0x1a, 0x17, 0xaa, 0xb6, 0x18, 0x13,
	0xe8, 0xbd, 0xae, 0xe6, 0x8a, 0xbd, 0xe7, 0x89, 0xa9, 0xe5, 0x93, 0x81, 0x2d, 0xe9, 0x87, 0x91,
	0xe5, 0xb8, 0x81, 0x12, 0x3e, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45,
	0x43, 0x54, 0x38, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x54, 0x10, 0x05, 0x1a, 0x17, 0xaa, 0xb6, 0x18, 0x13,
	0xe8, 0xbd, 0xae, 0xe6, 0x8a, 0xbd, 0xe7, 0x89, 0xa9, 0xe5, 0x93, 0x81, 0x2d, 0xe5, 0xae, 0x9d,
	0xe7, 0xae, 0xb1, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0x69, 0x0a,
	0x15, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x53, 0x48, 0x4f,
	0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x45,
	0x4e, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x53, 0x48, 0x4f, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x45, 0x53,
	0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x53, 0x48, 0x4f, 0x50, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x10, 0x01, 0x1a, 0x08,
	0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xef, 0x01, 0x0a, 0x22, 0x52, 0x45, 0x53,
	0x5f, 0x49, 0x4e, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f,
	0x46, 0x55, 0x4e, 0x43, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12,
	0x4a, 0x0a, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45,
	0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x10, 0x00, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0xe6,
	0xa6, 0x82, 0xe7, 0x8e, 0x87, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0x12, 0x46, 0x0a, 0x27, 0x52,
	0x45, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4f, 0x50, 0x45,
	0x4e, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x01, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe6, 0xa0,
	0xb9, 0xe6, 0x8d, 0xae, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0xae, 0xb5, 0xe5, 0xbc, 0x80,
	0xe5, 0x90, 0xaf, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x42, 0x41,
	0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x02,
	0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0x87, 0x06, 0x0a, 0x1b, 0x52,
	0x45, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4f, 0x50, 0x45,
	0x4e, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x42, 0x49, 0x54, 0x12, 0x49, 0x0a, 0x27, 0x52, 0x45,
	0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e,
	0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x45,
	0x46, 0x46, 0x45, 0x43, 0x54, 0x10, 0x00, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe5, 0xbc, 0x80,
	0xe5, 0x90, 0xaf, 0xe5, 0xb1, 0x80, 0xe5, 0x86, 0x85, 0xe7, 0xbb, 0x84, 0xe9, 0x98, 0x9f, 0xe7,
	0x89, 0xb9, 0xe6, 0x95, 0x88, 0x12, 0x42, 0x0a, 0x26, 0x52, 0x45, 0x53, 0x5f, 0x49, 0x4e, 0x5f,
	0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x46, 0x55, 0x4e, 0x43,
	0x5f, 0x42, 0x49, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x10,
	0x01, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0xe5, 0xb1, 0x80,
	0xe5, 0x86, 0x85, 0xe6, 0x8f, 0x92, 0xe6, 0x97, 0x97, 0x12, 0x48, 0x0a, 0x2c, 0x52, 0x45, 0x53,
	0x5f, 0x49, 0x4e, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f,
	0x46, 0x55, 0x4e, 0x43, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x59, 0x45, 0x41, 0x52, 0x5f, 0x4d, 0x4f,
	0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x55, 0x4e, 0x10, 0x02, 0x1a, 0x16, 0xaa, 0xb6, 0x18,
	0x12, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0xe8, 0xb7, 0x91, 0xe8, 0xb7, 0x91, 0xe5, 0xb9, 0xb4,
	0xe5, 0x85, 0xbd, 0x12, 0x44, 0x0a, 0x28, 0x52, 0x45, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x42, 0x41,
	0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x42,
	0x49, 0x54, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x43, 0x52, 0x41, 0x43, 0x4b, 0x45, 0x52, 0x10,
	0x03, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0xe5, 0xb1, 0x80,
	0xe5, 0x86, 0x85, 0xe9, 0x9e, 0xad, 0xe7, 0x82, 0xae, 0x12, 0x3e, 0x0a, 0x22, 0x52, 0x45, 0x53,
	0x5f, 0x49, 0x4e, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f,
	0x46, 0x55, 0x4e, 0x43, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x4f, 0x4e, 0x10,
	0x04, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0xe5, 0xb1, 0x80,
	0xe5, 0x86, 0x85, 0xe6, 0x8a, 0xbc, 0xe6, 0xb3, 0xa8, 0x12, 0x3f, 0x0a, 0x23, 0x52, 0x45, 0x53,
	0x5f, 0x49, 0x4e, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f,
	0x46, 0x55, 0x4e, 0x43, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47,
	0x10, 0x05, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0xe5, 0xb1,
	0x80, 0xe5, 0x86, 0x85, 0xe5, 0x8a, 0xa0, 0xe6, 0xb3, 0xa8, 0x12, 0x48, 0x0a, 0x2c, 0x52, 0x45,
	0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e,
	0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x59, 0x45, 0x41, 0x52, 0x5f, 0x4d,
	0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4b, 0x55, 0x4e, 0x10, 0x06, 0x1a, 0x16, 0xaa, 0xb6,
	0x18, 0x12, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0xe6, 0x8a, 0xa2, 0xe9, 0xb2, 0xb2, 0xe5, 0xb9,
	0xb4, 0xe5, 0x85, 0xbd, 0x12, 0x43, 0x0a, 0x28, 0x52, 0x45, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x42,
	0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f,
	0x42, 0x49, 0x54, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44,
	0x10, 0x07, 0x1a, 0x15, 0xaa, 0xb6, 0x18, 0x11, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0x46, 0x52,
	0x41, 0x4d, 0x45, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x12, 0x4a, 0x0a, 0x25, 0x52, 0x45, 0x53,
	0x5f, 0x49, 0x4e, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f,
	0x46, 0x55, 0x4e, 0x43, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x35, 0x35, 0x5f, 0x45, 0x46, 0x46, 0x45,
	0x43, 0x54, 0x10, 0x08, 0x1a, 0x1f, 0xaa, 0xb6, 0x18, 0x1b, 0xe4, 0xba, 0x94, 0xe4, 0xba, 0x94,
	0xe5, 0xbc, 0x80, 0xe9, 0xbb, 0x91, 0xe8, 0x8a, 0x82, 0xe5, 0xb1, 0x80, 0xe5, 0x86, 0x85, 0xe6,
	0xb0, 0x9b, 0xe5, 0x9b, 0xb4, 0x12, 0x3d, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x5f, 0x49, 0x4e, 0x5f,
	0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x46, 0x55, 0x4e, 0x43,
	0x5f, 0x42, 0x49, 0x54, 0x5f, 0x50, 0x41, 0x49, 0x4e, 0x54, 0x10, 0x09, 0x1a, 0x16, 0xaa, 0xb6,
	0x18, 0x12, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0xe5, 0xb1, 0x80, 0xe5, 0x86, 0x85, 0xe6, 0xb6,
	0x82, 0xe9, 0xb8, 0xa6, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x42,
	0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f,
	0x42, 0x49, 0x54, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x0a, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01,
	0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xd6, 0x04, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x5f, 0x49, 0x4e, 0x5f,
	0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x4e, 0x54, 0x5f, 0x46, 0x55, 0x4e, 0x43,
	0x5f, 0x42, 0x49, 0x54, 0x12, 0x63, 0x0a, 0x2c, 0x52, 0x45, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x42,
	0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x4e, 0x54, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f,
	0x42, 0x49, 0x54, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x53,
	0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x00, 0x1a, 0x31, 0xaa, 0xb6, 0x18, 0x2d, 0xe5, 0xbc, 0x80, 0xe5,
	0x90, 0xaf, 0xe5, 0xb1, 0x80, 0xe5, 0x86, 0x85, 0xe6, 0xbf, 0x80, 0xe6, 0xb4, 0xbb, 0xe6, 0x9c,
	0x8b, 0xe5, 0x8f, 0x8b, 0xe5, 0x8d, 0xa1, 0xe7, 0x8e, 0xa9, 0xe5, 0xae, 0xb6, 0xe7, 0x89, 0xb9,
	0xe6, 0x9c, 0x89, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0x12, 0x4f, 0x0a, 0x2d, 0x52, 0x45, 0x53,
	0x5f, 0x49, 0x4e, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x4e, 0x54, 0x5f,
	0x46, 0x55, 0x4e, 0x43, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x46, 0x52,
	0x41, 0x4d, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x10, 0x01, 0x1a, 0x1c, 0xaa, 0xb6,
	0x18, 0x18, 0xe7, 0x8e, 0xa9, 0xe5, 0xae, 0xb6, 0xe5, 0xbc, 0x80, 0xe6, 0x94, 0xbe, 0xe6, 0x8e,
	0xa2, 0xe7, 0xb4, 0xa2, 0xe9, 0x98, 0xb6, 0xe6, 0xae, 0xb5, 0x12, 0x63, 0x0a, 0x2f, 0x52, 0x45,
	0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x4e, 0x54,
	0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x42, 0x45, 0x46, 0x4f, 0x52, 0x5f,
	0x51, 0x55, 0x49, 0x54, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x51, 0x55, 0x49, 0x54, 0x10, 0x02, 0x1a,
	0x2e, 0xaa, 0xb6, 0x18, 0x2a, 0xe7, 0x8e, 0xa9, 0xe5, 0xae, 0xb6, 0xe5, 0x8f, 0xaf, 0xe4, 0xbb,
	0xa5, 0xe5, 0x9c, 0xa8, 0xe8, 0xa7, 0x84, 0xe5, 0xae, 0x9a, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0xe5, 0x89, 0x8d, 0xe6, 0x8f, 0x90, 0xe5, 0x89, 0x8d, 0xe9, 0x80, 0x80, 0xe5, 0x87, 0xba, 0x12,
	0x4f, 0x0a, 0x33, 0x52, 0x45, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45,
	0x5f, 0x41, 0x43, 0x4e, 0x54, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x48,
	0x45, 0x52, 0x4f, 0x50, 0x52, 0x41, 0x43, 0x54, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x4b, 0x49, 0x4c,
	0x4c, 0x4a, 0x55, 0x44, 0x47, 0x45, 0x10, 0x03, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0xb1,
	0x80, 0xe5, 0x86, 0x85, 0xe6, 0x8a, 0x80, 0xe5, 0xb7, 0xa7, 0xe5, 0x88, 0xa4, 0xe5, 0xae, 0x9a,
	0x12, 0x49, 0x0a, 0x2d, 0x52, 0x45, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c,
	0x45, 0x5f, 0x41, 0x43, 0x4e, 0x54, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x42, 0x49, 0x54, 0x5f,
	0x48, 0x45, 0x52, 0x4f, 0x50, 0x52, 0x41, 0x43, 0x54, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x48, 0x4f,
	0x57, 0x10, 0x04, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0xb1, 0x80, 0xe5, 0x86, 0x85, 0xe8,
	0xa7, 0x89, 0xe6, 0x82, 0x9f, 0xe6, 0xbc, 0x94, 0xe7, 0xa4, 0xba, 0x12, 0x50, 0x0a, 0x31, 0x52,
	0x45, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x4e,
	0x54, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x50,
	0x52, 0x41, 0x43, 0x54, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x47,
	0x10, 0x05, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe5, 0xb1, 0x80, 0xe5, 0x86, 0x85, 0xe5, 0xa4,
	0xa7, 0xe5, 0xb1, 0x80, 0xe8, 0xa7, 0x82, 0xe6, 0x95, 0x99, 0xe5, 0xad, 0xa6, 0x12, 0x24, 0x0a,
	0x20, 0x52, 0x45, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x41,
	0x43, 0x4e, 0x54, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x4c, 0x41, 0x53,
	0x54, 0x10, 0x06, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xf7, 0x01,
	0x0a, 0x11, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x52, 0x41, 0x59, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f,
	0x42, 0x49, 0x54, 0x12, 0x3f, 0x0a, 0x29, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x52, 0x41, 0x59, 0x5f,
	0x46, 0x55, 0x4e, 0x43, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x50, 0x52, 0x41,
	0x43, 0x54, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x4a, 0x55, 0x44, 0x47, 0x45,
	0x10, 0x00, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x8a, 0x80, 0xe5, 0xb7, 0xa7, 0xe5, 0x88,
	0xa4, 0xe5, 0xae, 0x9a, 0x12, 0x39, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x52, 0x41, 0x59,
	0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x50, 0x52,
	0x41, 0x43, 0x54, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x10, 0x01, 0x1a, 0x10, 0xaa,
	0xb6, 0x18, 0x0c, 0xe8, 0xa7, 0x89, 0xe6, 0x82, 0x9f, 0xe6, 0xbc, 0x94, 0xe7, 0xa4, 0xba, 0x12,
	0x40, 0x0a, 0x27, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x52, 0x41, 0x59, 0x5f, 0x46, 0x55, 0x4e, 0x43,
	0x5f, 0x42, 0x49, 0x54, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x50, 0x52, 0x41, 0x43, 0x54, 0x49, 0x43,
	0x45, 0x5f, 0x54, 0x45, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x1a, 0x13, 0xaa, 0xb6,
	0x18, 0x0f, 0xe5, 0xa4, 0xa7, 0xe5, 0xb1, 0x80, 0xe8, 0xa7, 0x82, 0xe6, 0x95, 0x99, 0xe5, 0xad,
	0xa6, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x52, 0x41, 0x59, 0x5f, 0x46, 0x55,
	0x4e, 0x43, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x03, 0x1a, 0x08, 0x88,
	0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xa9, 0x01, 0x0a, 0x22, 0x52, 0x45, 0x53, 0x5f,
	0x49, 0x4e, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x4e, 0x54, 0x5f, 0x46,
	0x55, 0x4e, 0x43, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x4c,
	0x0a, 0x27, 0x52, 0x45, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f,
	0x41, 0x43, 0x4e, 0x54, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x00, 0x1a, 0x1f, 0xaa, 0xb6, 0x18,
	0x1b, 0xe7, 0x8e, 0xa9, 0xe5, 0xae, 0xb6, 0xe5, 0x8a, 0x9f, 0xe8, 0x83, 0xbd, 0xe6, 0x97, 0xb6,
	0xe9, 0x97, 0xb4, 0xe6, 0xae, 0xb5, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0x12, 0x2b, 0x0a, 0x27,
	0x52, 0x45, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x41, 0x43,
	0x4e, 0x54, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x01, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90,
	0xf9, 0x2b, 0x01, 0x2a, 0xb4, 0x01, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x5f, 0x57, 0x45, 0x41, 0x4c,
	0x4d, 0x55, 0x4c, 0x54, 0x49, 0x4f, 0x50, 0x54, 0x5f, 0x4f, 0x50, 0x54, 0x54, 0x59, 0x50, 0x45,
	0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x5f, 0x57, 0x45, 0x41, 0x4c, 0x4d, 0x55, 0x4c, 0x54,
	0x49, 0x4f, 0x50, 0x54, 0x5f, 0x4f, 0x50, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x49, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x5f, 0x57, 0x45,
	0x41, 0x4c, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x4f, 0x50, 0x54, 0x5f, 0x4f, 0x50, 0x54, 0x5f, 0x43,
	0x4f, 0x55, 0x50, 0x4f, 0x4e, 0x53, 0x46, 0x49, 0x4c, 0x4c, 0x10, 0x01, 0x1a, 0x23, 0xaa, 0xb6,
	0x18, 0x1f, 0xe5, 0xa4, 0x9a, 0xe6, 0x97, 0xb6, 0xe7, 0xb4, 0xaf, 0xe8, 0xae, 0xa1, 0xe6, 0xb4,
	0xbb, 0xe5, 0x8a, 0xa8, 0x5f, 0xe7, 0x82, 0xb9, 0xe5, 0x88, 0xb8, 0xe5, 0x85, 0x85, 0xe5, 0x80,
	0xbc, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x5f, 0x57, 0x45, 0x41, 0x4c, 0x4d, 0x55, 0x4c,
	0x54, 0x49, 0x4f, 0x50, 0x54, 0x5f, 0x4f, 0x50, 0x54, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x02,
	0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xa0, 0x02, 0x0a, 0x19, 0x52,
	0x45, 0x53, 0x5f, 0x57, 0x45, 0x41, 0x4c, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x4f, 0x50, 0x54, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x54, 0x59, 0x50, 0x45, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x5f,
	0x57, 0x45, 0x41, 0x4c, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x4f, 0x50, 0x54, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12,
	0x39, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x5f, 0x57, 0x45, 0x41, 0x4c, 0x4d, 0x55, 0x4c, 0x54, 0x49,
	0x4f, 0x50, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x01, 0x1a, 0x1a,
	0xaa, 0xb6, 0x18, 0x16, 0xe5, 0xa4, 0x9a, 0xe6, 0x97, 0xb6, 0xe7, 0xb4, 0xaf, 0xe8, 0xae, 0xa1,
	0xe6, 0xb4, 0xbb, 0xe5, 0x8a, 0xa8, 0x5f, 0xe5, 0xa4, 0xa9, 0x12, 0x3a, 0x0a, 0x1a, 0x52, 0x45,
	0x53, 0x5f, 0x57, 0x45, 0x41, 0x4c, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x4f, 0x50, 0x54, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x02, 0x1a, 0x1a, 0xaa, 0xb6, 0x18, 0x16,
	0xe5, 0xa4, 0x9a, 0xe6, 0x97, 0xb6, 0xe7, 0xb4, 0xaf, 0xe8, 0xae, 0xa1, 0xe6, 0xb4, 0xbb, 0xe5,
	0x8a, 0xa8, 0x5f, 0xe5, 0x91, 0xa8, 0x12, 0x3b, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x5f, 0x57, 0x45,
	0x41, 0x4c, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x4f, 0x50, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f,
	0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x03, 0x1a, 0x1a, 0xaa, 0xb6, 0x18, 0x16, 0xe5, 0xa4, 0x9a,
	0xe6, 0x97, 0xb6, 0xe7, 0xb4, 0xaf, 0xe8, 0xae, 0xa1, 0xe6, 0xb4, 0xbb, 0xe5, 0x8a, 0xa8, 0x5f,
	0xe6, 0x9c, 0x88, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x5f, 0x57, 0x45, 0x41, 0x4c, 0x4d,
	0x55, 0x4c, 0x54, 0x49, 0x4f, 0x50, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4c, 0x41, 0x53,
	0x54, 0x10, 0x04, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xf8, 0x03,
	0x0a, 0x1d, 0x52, 0x45, 0x53, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x48,
	0x41, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12,
	0x43, 0x0a, 0x2c, 0x52, 0x45, 0x53, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43,
	0x48, 0x41, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x10,
	0x00, 0x1a, 0x11, 0xaa, 0xb6, 0x18, 0x0d, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0xe9, 0x9a,
	0x8f, 0xe6, 0x9c, 0xba, 0x12, 0x4c, 0x0a, 0x2f, 0x52, 0x45, 0x53, 0x5f, 0x4c, 0x4f, 0x41, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f,
	0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x1a, 0x17, 0xaa, 0xb6, 0x18, 0x13, 0x6c,
	0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe8, 0xa7, 0xa6, 0xe5,
	0x8f, 0x91, 0x12, 0x49, 0x0a, 0x2d, 0x52, 0x45, 0x53, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x54, 0x48, 0x55, 0x4d, 0x42, 0x53, 0x55, 0x50, 0x5f, 0x52, 0x41, 0x4e,
	0x44, 0x4f, 0x4d, 0x10, 0x02, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0xb1, 0x80, 0xe5, 0x86,
	0x85, 0xe7, 0x82, 0xb9, 0xe8, 0xb5, 0x9e, 0xe9, 0x9a, 0x8f, 0xe6, 0x9c, 0xba, 0x12, 0x52, 0x0a,
	0x30, 0x52, 0x45, 0x53, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x48, 0x41,
	0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x48, 0x55, 0x4d, 0x42, 0x53, 0x55, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x03, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe5, 0xb1, 0x80, 0xe5, 0x86, 0x85, 0xe7,
	0x82, 0xb9, 0xe8, 0xb5, 0x9e, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f,
	0x91, 0x12, 0x48, 0x0a, 0x2c, 0x52, 0x45, 0x53, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x4f, 0x46, 0x46, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f,
	0x4d, 0x10, 0x04, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0xb1, 0x80, 0xe5, 0x86, 0x85, 0xe7,
	0x82, 0xab, 0xe8, 0x80, 0x80, 0xe9, 0x9a, 0x8f, 0xe6, 0x9c, 0xba, 0x12, 0x51, 0x0a, 0x2f, 0x52,
	0x45, 0x53, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f,
	0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x4f,
	0x57, 0x4f, 0x46, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05,
	0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe5, 0xb1, 0x80, 0xe5, 0x86, 0x85, 0xe7, 0x82, 0xab, 0xe8,
	0x80, 0x80, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0x1a, 0x08,
	0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xa5, 0x01, 0x0a, 0x0e, 0x52, 0x45, 0x53,
	0x5f, 0x41, 0x4c, 0x42, 0x55, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x1a, 0x0a, 0x16, 0x52,
	0x45, 0x53, 0x5f, 0x41, 0x4c, 0x42, 0x55, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x5f, 0x41,
	0x4c, 0x42, 0x55, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x10, 0x01,
	0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe5, 0x9b, 0xbe, 0xe9,
	0x89, 0xb4, 0x12, 0x29, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x5f, 0x41, 0x4c, 0x42, 0x55, 0x4d, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x4d, 0x50, 0x10, 0x02, 0x1a, 0x10, 0xaa, 0xb6, 0x18,
	0x0c, 0xe5, 0x8a, 0xbf, 0xe5, 0x8a, 0x9b, 0xe5, 0x9b, 0xbe, 0xe9, 0x89, 0xb4, 0x12, 0x17, 0x0a,
	0x13, 0x52, 0x45, 0x53, 0x5f, 0x41, 0x4c, 0x42, 0x55, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4c, 0x41, 0x53, 0x54, 0x10, 0x03, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01,
	0x2a, 0xd4, 0x01, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x46, 0x41,
	0x56, 0x4f, 0x52, 0x5f, 0x47, 0x49, 0x46, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x1f, 0x0a,
	0x1b, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x5f,
	0x47, 0x49, 0x46, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x36,
	0x0a, 0x1a, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x46, 0x41, 0x56, 0x4f, 0x52,
	0x5f, 0x47, 0x49, 0x46, 0x54, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x1a, 0x16,
	0xaa, 0xb6, 0x18, 0x12, 0xe6, 0x99, 0xae, 0xe9, 0x80, 0x9a, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84,
	0xe7, 0xa4, 0xbc, 0xe7, 0x89, 0xa9, 0x12, 0x37, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x45,
	0x52, 0x4f, 0x5f, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x47, 0x49, 0x46, 0x54, 0x5f, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe7, 0x89, 0xb9,
	0xe6, 0xae, 0x8a, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe7, 0xa4, 0xbc, 0xe7, 0x89, 0xa9, 0x12,
	0x1c, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x46, 0x41, 0x56, 0x4f,
	0x52, 0x5f, 0x47, 0x49, 0x46, 0x54, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x03, 0x1a, 0x08, 0x88,
	0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xd6, 0x02, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x5f,
	0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52,
	0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x3b, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x5f, 0x44, 0x52,
	0x4f, 0x50, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x10, 0x01, 0x1a, 0x16, 0xaa, 0xb6, 0x18,
	0x12, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe8, 0x8b, 0xb1,
	0xe9, 0x9b, 0x84, 0x12, 0x39, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f,
	0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x41,
	0x4d, 0x45, 0x5f, 0x43, 0x41, 0x4d, 0x50, 0x10, 0x02, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe5,
	0x90, 0x8c, 0xe9, 0x98, 0xb5, 0xe8, 0x90, 0xa5, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0x12, 0x3d,
	0x0a, 0x21, 0x52, 0x45, 0x53, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x45, 0x4d, 0x59, 0x5f, 0x43,
	0x41, 0x4d, 0x50, 0x10, 0x03, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0x95, 0x8c, 0xe5, 0xaf,
	0xb9, 0xe9, 0x98, 0xb5, 0xe8, 0x90, 0xa5, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0x12, 0x36, 0x0a,
	0x1d, 0x52, 0x45, 0x53, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x45, 0x41, 0x52, 0x10, 0x04,
	0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe5, 0xaf, 0xb9, 0xe5, 0xb1, 0x80, 0xe4, 0xb8, 0xad, 0xe8,
	0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x5f, 0x44, 0x52, 0x4f,
	0x50, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4c, 0x41, 0x53, 0x54, 0x10, 0x05, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01,
	0x2a, 0xc4, 0x01, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x52, 0x45,
	0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x33, 0x0a, 0x1d, 0x52,
	0x45, 0x53, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x1a, 0x10,
	0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x99, 0xae, 0xe9, 0x80, 0x9a, 0xe5, 0x85, 0xb3, 0xe7, 0xb3, 0xbb,
	0x12, 0x35, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x52, 0x45, 0x4c,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x49, 0x4d,
	0x41, 0x43, 0x59, 0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe4, 0xba, 0xb2, 0xe5, 0xaf,
	0x86, 0xe5, 0x85, 0xb3, 0xe7, 0xb3, 0xbb, 0x12, 0x34, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x5f, 0x48,
	0x45, 0x52, 0x4f, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4c, 0x45, 0x10, 0x02, 0x1a, 0x10, 0xaa, 0xb6, 0x18,
	0x0c, 0xe6, 0x95, 0x8c, 0xe5, 0xaf, 0xb9, 0xe5, 0x85, 0xb3, 0xe7, 0xb3, 0xbb, 0x1a, 0x08, 0x88,
	0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0x69, 0x0a, 0x0f, 0x52, 0x45, 0x53, 0x5f, 0x48,
	0x45, 0x52, 0x4f, 0x5f, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x12, 0x24, 0x0a, 0x14, 0x52, 0x45,
	0x53, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x41,
	0x4c, 0x45, 0x10, 0x00, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe7, 0x94, 0xb7, 0xe6, 0x80, 0xa7,
	0x12, 0x26, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x47, 0x45, 0x4e,
	0x44, 0x45, 0x52, 0x5f, 0x46, 0x45, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x0a, 0xaa, 0xb6,
	0x18, 0x06, 0xe5, 0xa5, 0xb3, 0xe6, 0x80, 0xa7, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9,
	0x2b, 0x01, 0x2a, 0x92, 0x01, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x46,
	0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x46, 0x41, 0x56,
	0x4f, 0x52, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x45, 0x0a, 0x29, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x45,
	0x52, 0x4f, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x55, 0x42, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x10, 0x01, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0x8c, 0x87, 0xe5, 0xae,
	0x9a, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe4, 0xbf, 0xa1, 0xe7, 0x89, 0xa9, 0x1a, 0x08, 0x88,
	0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xaa, 0x01, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x5f,
	0x48, 0x45, 0x52, 0x4f, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12,
	0x22, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x53, 0x54, 0x4f, 0x52,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x1a, 0x04, 0xaa,
	0xb6, 0x18, 0x00, 0x12, 0x34, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f,
	0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e,
	0x44, 0x53, 0x48, 0x49, 0x50, 0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x83, 0x85,
	0xe8, 0xb0, 0x8a, 0xe6, 0x95, 0x85, 0xe4, 0xba, 0x8b, 0x12, 0x2f, 0x0a, 0x19, 0x52, 0x45, 0x53,
	0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x02, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0x89,
	0xa7, 0xe6, 0x83, 0x85, 0xe6, 0x95, 0x85, 0xe4, 0xba, 0x8b, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01,
	0x90, 0xf9, 0x2b, 0x01, 0x2a, 0x9c, 0x01, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x45, 0x52,
	0x4f, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x12, 0x22, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x53, 0x54,
	0x4f, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x1a,
	0x04, 0xaa, 0xb6, 0x18, 0x00, 0x12, 0x27, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x45, 0x52,
	0x4f, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x42, 0x49, 0x47,
	0x10, 0x01, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0xa4, 0xa7, 0xe5, 0x8d, 0xa1, 0x12, 0x29,
	0x0a, 0x19, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x59,
	0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x1a, 0x0a, 0xaa,
	0xb6, 0x18, 0x06, 0xe5, 0xb0, 0x8f, 0xe5, 0x8d, 0xa1, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90,
	0xf9, 0x2b, 0x01, 0x2a, 0x8d, 0x06, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a,
	0x45, 0x43, 0x54, 0x38, 0x5f, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x12, 0x3a, 0x0a, 0x24, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54,
	0x38, 0x5f, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46,
	0x49, 0x58, 0x45, 0x44, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x10, 0x00, 0x1a, 0x10, 0xaa, 0xb6, 0x18,
	0x0c, 0xe5, 0x9b, 0xba, 0xe5, 0xae, 0x9a, 0xe7, 0xab, 0x99, 0xe4, 0xbd, 0x8d, 0x12, 0x3f, 0x0a,
	0x29, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x41, 0x42,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49,
	0x4e, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6,
	0x18, 0x0c, 0xe7, 0xbb, 0x88, 0xe7, 0xbb, 0x93, 0xe9, 0x94, 0x81, 0xe5, 0xae, 0x9a, 0x12, 0x44,
	0x0a, 0x28, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x41,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x45, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x02, 0x1a, 0x16, 0xaa, 0xb6,
	0x18, 0x12, 0xe5, 0x85, 0x8d, 0xe8, 0xb4, 0xb9, 0xe9, 0x87, 0x8a, 0xe6, 0x94, 0xbe, 0xe6, 0x8a,
	0x80, 0xe8, 0x83, 0xbd, 0x12, 0x49, 0x0a, 0x30, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a,
	0x45, 0x43, 0x54, 0x38, 0x5f, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4a, 0x55, 0x4d, 0x50, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x41, 0x46, 0x54, 0x45,
	0x52, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x03, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f,
	0xe5, 0xbc, 0x80, 0xe6, 0x88, 0x98, 0xe8, 0xb7, 0xb3, 0xe5, 0x90, 0x8e, 0xe6, 0x8e, 0x92, 0x12,
	0x40, 0x0a, 0x24, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c, 0x4f,
	0x4e, 0x45, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x10, 0x04, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5,
	0x85, 0x8b, 0xe9, 0x9a, 0x86, 0xe8, 0x8b, 0xb1, 0xe9, 0x9b, 0x84, 0xe6, 0xa0, 0x87, 0xe8, 0xae,
	0xb0, 0x12, 0x63, 0x0a, 0x38, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54,
	0x38, 0x5f, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x47, 0x4e, 0x4f, 0x52, 0x5f, 0x48, 0x55, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45,
	0x52, 0x5f, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x10, 0x05, 0x1a,
	0x25, 0xaa, 0xb6, 0x18, 0x21, 0xe5, 0xbf, 0xbd, 0xe7, 0x95, 0xa5, 0xe7, 0xa6, 0x81, 0xe6, 0xad,
	0xa2, 0xe5, 0x8f, 0x97, 0xe5, 0x87, 0xbb, 0xe5, 0x9b, 0x9e, 0xe8, 0x93, 0x9d, 0xe7, 0x9a, 0x84,
	0xe6, 0xa0, 0x87, 0xe5, 0xbf, 0x97, 0x12, 0x52, 0x0a, 0x33, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52,
	0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x49, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x48, 0x45, 0x4e, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x06, 0x1a,
	0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe7, 0xa7, 0xbb, 0xe5, 0x8a, 0xa8, 0xe6, 0x97, 0xb6, 0xe5, 0xbf,
	0xbd, 0xe7, 0x95, 0xa5, 0xe7, 0xa2, 0xb0, 0xe6, 0x92, 0x9e, 0x12, 0x65, 0x0a, 0x3a, 0x52, 0x45,
	0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x41, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x5f, 0x41, 0x54,
	0x54, 0x41, 0x43, 0x6b, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x46, 0x4f, 0x52,
	0x42, 0x49, 0x44, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x10, 0x07, 0x1a, 0x25, 0xaa, 0xb6, 0x18, 0x21,
	0xe5, 0xbf, 0xbd, 0xe7, 0x95, 0xa5, 0xe7, 0xa6, 0x81, 0xe6, 0xad, 0xa2, 0xe6, 0x94, 0xbb, 0xe5,
	0x87, 0xbb, 0xe5, 0x9b, 0x9e, 0xe8, 0x93, 0x9d, 0xe7, 0x9a, 0x84, 0xe6, 0xa0, 0x87, 0xe5, 0xbf,
	0x97, 0x12, 0x43, 0x0a, 0x2a, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54,
	0x38, 0x5f, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46,
	0x4f, 0x52, 0x42, 0x49, 0x44, 0x5f, 0x57, 0x45, 0x41, 0x52, 0x45, 0x51, 0x55, 0x49, 0x50, 0x10,
	0x08, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe7, 0xa6, 0x81, 0xe6, 0xad, 0xa2, 0xe7, 0xa9, 0xbf,
	0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0x12, 0x31, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52,
	0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x09, 0x1a, 0x0d, 0xaa, 0xb6, 0x18, 0x09,
	0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe5, 0x80, 0xbc, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90,
	0xf9, 0x2b, 0x01, 0x2a, 0xe7, 0x01, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a,
	0x45, 0x43, 0x54, 0x38, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4c,
	0x4f, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x45, 0x53, 0x5f,
	0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x46, 0x0a, 0x2d, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52,
	0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x01, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe6,
	0x8b, 0x8d, 0xe5, 0x8d, 0x96, 0xe5, 0x93, 0x81, 0xe8, 0xa7, 0xa3, 0xe9, 0x94, 0x81, 0x12, 0x43,
	0x0a, 0x27, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x41,
	0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0x02, 0x1a, 0x16, 0xaa, 0xb6, 0x18,
	0x12, 0xe6, 0x8b, 0x8d, 0xe5, 0x8d, 0x96, 0xe7, 0x8e, 0xa9, 0xe5, 0xae, 0xb6, 0xe8, 0xa7, 0xa3,
	0xe9, 0x94, 0x81, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xb7, 0x01,
	0x0a, 0x20, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x44,
	0x52, 0x4f, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x12, 0x43, 0x0a, 0x2d, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43,
	0x54, 0x38, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x5f, 0x4c, 0x4f,
	0x43, 0x41, 0x4c, 0x10, 0x00, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe9, 0x9a, 0x8f, 0xe6, 0x9c,
	0xba, 0xe6, 0xa6, 0x82, 0xe7, 0x8e, 0x87, 0x12, 0x44, 0x0a, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x50,
	0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x50, 0x52, 0x4f,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x44,
	0x4f, 0x4d, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18,
	0x0c, 0xe6, 0x95, 0xb4, 0xe4, 0xbd, 0x93, 0xe6, 0xa6, 0x82, 0xe7, 0x8e, 0x87, 0x1a, 0x08, 0x88,
	0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0x90, 0x08, 0x0a, 0x22, 0x52, 0x45, 0x53, 0x5f,
	0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f,
	0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x12, 0x3c,
	0x0a, 0x2b, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x43,
	0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x49,
	0x4e, 0x44, 0x45, 0x58, 0x5f, 0x42, 0x41, 0x4e, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x10, 0x00, 0x1a,
	0x0b, 0xaa, 0xb6, 0x18, 0x07, 0x42, 0x61, 0x6e, 0x50, 0x69, 0x63, 0x6b, 0x12, 0x50, 0x0a, 0x38,
	0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x43, 0x55, 0x53,
	0x54, 0x4f, 0x4d, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x4e, 0x44,
	0x45, 0x58, 0x5f, 0x47, 0x4d, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x23, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e,
	0x47, 0x4d, 0xe5, 0xbf, 0xab, 0xe9, 0x80, 0x9f, 0xe6, 0x8d, 0xa2, 0xe7, 0x89, 0x8c, 0x12, 0x59,
	0x0a, 0x35, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x43,
	0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x49,
	0x4e, 0x44, 0x45, 0x58, 0x5f, 0x47, 0x4d, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x54, 0x45,
	0x53, 0x54, 0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x10, 0x24, 0x1a, 0x1e, 0xaa, 0xb6, 0x18, 0x1a, 0x47,
	0x4d, 0xe5, 0x85, 0x81, 0xe8, 0xae, 0xb8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe6, 0xb5, 0x8b,
	0xe8, 0xaf, 0x95, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0x12, 0x56, 0x0a, 0x3b, 0x52, 0x45, 0x53,
	0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f,
	0x47, 0x4d, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x46, 0x49,
	0x47, 0x48, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x25, 0x1a, 0x15, 0xaa, 0xb6, 0x18, 0x11,
	0x47, 0x4d, 0xe8, 0xb7, 0xb3, 0xe8, 0xbf, 0x87, 0xe5, 0x8a, 0xa0, 0xe6, 0x97, 0xb6, 0xe8, 0xb5,
	0x9b, 0x12, 0x50, 0x0a, 0x38, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54,
	0x38, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x53, 0x45,
	0x54, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x47, 0x4d, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x5f,
	0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x26, 0x1a,
	0x12, 0xaa, 0xb6, 0x18, 0x0e, 0x47, 0x4d, 0xe8, 0xb7, 0xb3, 0xe8, 0xbf, 0x87, 0xe6, 0x8d, 0xa2,
	0xe7, 0x89, 0x8c, 0x12, 0x4a, 0x0a, 0x32, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45,
	0x43, 0x54, 0x38, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f,
	0x53, 0x45, 0x54, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x47, 0x4d, 0x5f, 0x53, 0x4b, 0x49,
	0x50, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x27, 0x1a, 0x12, 0xaa, 0xb6, 0x18,
	0x0e, 0x47, 0x4d, 0xe8, 0xb7, 0xb3, 0xe8, 0xbf, 0x87, 0xe6, 0x8b, 0x8d, 0xe5, 0x8d, 0x96, 0x12,
	0x4a, 0x0a, 0x32, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f,
	0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x53, 0x45, 0x54, 0x5f,
	0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x47, 0x4d, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x41, 0x55,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x28, 0x1a, 0x12, 0xaa, 0xb6, 0x18, 0x0e, 0x47, 0x4d, 0xe5,
	0xbf, 0xab, 0xe9, 0x80, 0x9f, 0xe6, 0x8b, 0x8d, 0xe5, 0x8d, 0x96, 0x12, 0x3a, 0x0a, 0x36, 0x52,
	0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x43, 0x55, 0x53, 0x54,
	0x4f, 0x4d, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x4e, 0x44, 0x45,
	0x58, 0x5f, 0x47, 0x4d, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52,
	0x45, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x29, 0x12, 0x51, 0x0a, 0x34, 0x52, 0x45, 0x53, 0x5f, 0x50,
	0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x52,
	0x4f, 0x4f, 0x4d, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x31, 0x10,
	0x2a, 0x1a, 0x17, 0xaa, 0xb6, 0x18, 0x13, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe5, 0x9b, 0x9e,
	0xe5, 0x90, 0x88, 0xe7, 0xac, 0xac, 0x31, 0xe4, 0xbd, 0x8d, 0x12, 0x51, 0x0a, 0x34, 0x52, 0x45,
	0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x42, 0x49, 0x54,
	0x5f, 0x32, 0x10, 0x2b, 0x1a, 0x17, 0xaa, 0xb6, 0x18, 0x13, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b,
	0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe7, 0xac, 0xac, 0x32, 0xe4, 0xbd, 0x8d, 0x12, 0x51, 0x0a,
	0x34, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x43, 0x55,
	0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x4e,
	0x44, 0x45, 0x58, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f,
	0x42, 0x49, 0x54, 0x5f, 0x33, 0x10, 0x2c, 0x1a, 0x17, 0xaa, 0xb6, 0x18, 0x13, 0xe5, 0xbc, 0x80,
	0xe5, 0xa7, 0x8b, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe7, 0xac, 0xac, 0x33, 0xe4, 0xbd, 0x8d,
	0x12, 0x51, 0x0a, 0x34, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38,
	0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x53, 0x45, 0x54,
	0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x52, 0x4f, 0x55,
	0x4e, 0x44, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x34, 0x10, 0x2d, 0x1a, 0x17, 0xaa, 0xb6, 0x18, 0x13,
	0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe7, 0xac, 0xac, 0x34,
	0xe4, 0xbd, 0x8d, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45,
	0x43, 0x54, 0x38, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f,
	0x53, 0x45, 0x54, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x40,
	0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0x83, 0x07, 0x0a, 0x1d, 0x52,
	0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x52, 0x4f, 0x55, 0x4e,
	0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x3e, 0x0a, 0x22,
	0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x52, 0x4f, 0x55,
	0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x55,
	0x4c, 0x4c, 0x10, 0x00, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0x97, 0xa0, 0xe6, 0x95, 0x88,
	0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x12, 0x3f, 0x0a, 0x23,
	0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x52, 0x4f, 0x55,
	0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x45,
	0x47, 0x49, 0x4e, 0x10, 0x01, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0xbc, 0x80, 0xe5, 0xb1,
	0x80, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x12, 0x40, 0x0a,
	0x24, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x52, 0x4f,
	0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42,
	0x41, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x02, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0x88, 0x98,
	0xe6, 0x96, 0x97, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x12,
	0x47, 0x0a, 0x2b, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f,
	0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x03,
	0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0x8d, 0xa2, 0xe7, 0x89, 0x8c, 0xe5, 0x9b, 0x9e, 0xe5,
	0x90, 0x88, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x12, 0x41, 0x0a, 0x25, 0x52, 0x45, 0x53, 0x5f,
	0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x04, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0x8b, 0x8d, 0xe5, 0x8d, 0x96, 0xe5,
	0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x12, 0x4b, 0x0a, 0x29, 0x52,
	0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x52, 0x4f, 0x55, 0x4e,
	0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x52,
	0x44, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x05, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18,
	0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe5, 0x9b, 0x9e, 0xe5,
	0x90, 0x88, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x12, 0x4b, 0x0a, 0x29, 0x52, 0x45, 0x53, 0x5f,
	0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x4f, 0x4f, 0x53, 0x45,
	0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x10, 0x06, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe9, 0x80, 0x89,
	0xe6, 0x8b, 0xa9, 0xe9, 0xa2, 0x86, 0xe4, 0xb8, 0xbb, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe7,
	0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x12, 0x49, 0x0a, 0x29, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f,
	0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x53, 0x53, 0x5f, 0x42, 0x41, 0x54, 0x54,
	0x4c, 0x45, 0x10, 0x07, 0x1a, 0x1a, 0xaa, 0xb6, 0x18, 0x16, 0x42, 0x4f, 0x53, 0x53, 0xe6, 0x88,
	0x98, 0xe6, 0x96, 0x97, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0x12, 0x47, 0x0a, 0x28, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38,
	0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x47, 0x52, 0x41, 0x42, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x44, 0x10, 0x08, 0x1a, 0x19,
	0xaa, 0xb6, 0x18, 0x15, 0xe4, 0xba, 0x89, 0xe5, 0xa4, 0xba, 0xe8, 0xb5, 0x9b, 0xe5, 0x9b, 0x9e,
	0xe5, 0x90, 0x88, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x12, 0x43, 0x0a, 0x27, 0x52, 0x45, 0x53,
	0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x5f, 0x42,
	0x45, 0x47, 0x49, 0x4e, 0x10, 0x09, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0xbc, 0x80, 0xe5,
	0xa7, 0x8b, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x12, 0x47,
	0x0a, 0x2b, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x52,
	0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x48, 0x4f, 0x4f, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x0a, 0x1a,
	0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0xaf, 0xbb, 0xe5, 0xae, 0x9d, 0xe5, 0x9b, 0x9e, 0xe5, 0x90,
	0x88, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x12, 0x4d, 0x0a, 0x2b, 0x52, 0x45, 0x53, 0x5f, 0x50,
	0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x49, 0x52, 0x44, 0x52, 0x4f, 0x50,
	0x5f, 0x41, 0x57, 0x41, 0x52, 0x44, 0x10, 0x0b, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe5, 0x85,
	0xa8, 0xe5, 0xb1, 0x80, 0xe6, 0x8a, 0x95, 0xe6, 0x94, 0xbe, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88,
	0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01,
	0x2a, 0xdd, 0x0d, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x41,
	0x5f, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x29, 0x0a, 0x25, 0x52, 0x45, 0x53, 0x5f, 0x46, 0x4f, 0x52,
	0x4d, 0x55, 0x4c, 0x41, 0x5f, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x45,
	0x58, 0x54, 0x52, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00,
	0x12, 0x50, 0x0a, 0x2e, 0x52, 0x45, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x41, 0x5f,
	0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x48, 0x50, 0x10, 0x01, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe6, 0x94, 0xbb, 0xe5, 0x87, 0xbb,
	0xe6, 0x96, 0xb9, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe7, 0x94, 0x9f, 0xe5, 0x91, 0xbd, 0xe5,
	0x80, 0xbc, 0x12, 0x54, 0x0a, 0x2f, 0x52, 0x45, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c,
	0x41, 0x5f, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x52,
	0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4c, 0x4f,
	0x53, 0x45, 0x5f, 0x48, 0x50, 0x10, 0x02, 0x1a, 0x1f, 0xaa, 0xb6, 0x18, 0x1b, 0xe6, 0x94, 0xbb,
	0xe5, 0x87, 0xbb, 0xe6, 0x96, 0xb9, 0xe5, 0xb7, 0xb2, 0xe6, 0x8d, 0x9f, 0xe5, 0xa4, 0xb1, 0xe7,
	0x94, 0x9f, 0xe5, 0x91, 0xbd, 0xe5, 0x80, 0xbc, 0x12, 0x54, 0x0a, 0x32, 0x52, 0x45, 0x53, 0x5f,
	0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x41, 0x5f, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54,
	0x45, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x48, 0x50, 0x10, 0x03,
	0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe6, 0x94, 0xbb, 0xe5, 0x87, 0xbb, 0xe6, 0x96, 0xb9, 0xe5,
	0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe7, 0x94, 0x9f, 0xe5, 0x91, 0xbd, 0xe5, 0x80, 0xbc, 0x12, 0x51,
	0x0a, 0x32, 0x52, 0x45, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x41, 0x5f, 0x43, 0x41,
	0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x45, 0x4e,
	0x45, 0x52, 0x47, 0x59, 0x10, 0x04, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe6, 0x94, 0xbb, 0xe5,
	0x87, 0xbb, 0xe6, 0x96, 0xb9, 0xe8, 0x83, 0xbd, 0xe9, 0x87, 0x8f, 0xe4, 0xb8, 0x8a, 0xe9, 0x99,
	0x90, 0x12, 0x4c, 0x0a, 0x2d, 0x52, 0x45, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x41,
	0x5f, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x52, 0x4d,
	0x4f, 0x52, 0x10, 0x05, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe6, 0x94, 0xbb, 0xe5, 0x87, 0xbb,
	0xe6, 0x96, 0xb9, 0xe7, 0x89, 0xa9, 0xe7, 0x90, 0x86, 0xe9, 0x98, 0xb2, 0xe5, 0xbe, 0xa1, 0x12,
	0x53, 0x0a, 0x34, 0x52, 0x45, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x41, 0x5f, 0x43,
	0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x41, 0x47, 0x49, 0x43,
	0x5f, 0x52, 0x45, 0x53, 0x49, 0x53, 0x54, 0x10, 0x06, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe6,
	0x94, 0xbb, 0xe5, 0x87, 0xbb, 0xe6, 0x96, 0xb9, 0xe6, 0xb3, 0x95, 0xe6, 0x9c, 0xaf, 0xe9, 0x98,
	0xb2, 0xe5, 0xbe, 0xa1, 0x12, 0x54, 0x0a, 0x35, 0x52, 0x45, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x4d,
	0x55, 0x4c, 0x41, 0x5f, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x58,
	0x54, 0x52, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x07, 0x1a,
	0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe6, 0x94, 0xbb, 0xe5, 0x87, 0xbb, 0xe6, 0x96, 0xb9, 0xe6, 0xb3,
	0x95, 0xe6, 0x9c, 0xaf, 0xe5, 0xbc, 0xba, 0xe5, 0xba, 0xa6, 0x12, 0x58, 0x0a, 0x36, 0x52, 0x45,
	0x53, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x41, 0x5f, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c,
	0x41, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x48,
	0x49, 0x45, 0x4c, 0x44, 0x10, 0x08, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe6, 0x94, 0xbb, 0xe5,
	0x87, 0xbb, 0xe6, 0x96, 0xb9, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe6, 0x8a, 0xa4, 0xe7, 0x9b,
	0xbe, 0xe5, 0x80, 0xbc, 0x12, 0x57, 0x0a, 0x35, 0x52, 0x45, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x4d,
	0x55, 0x4c, 0x41, 0x5f, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x58,
	0x54, 0x52, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x09, 0x1a,
	0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe6, 0x94, 0xbb, 0xe5, 0x87, 0xbb, 0xe6, 0x96, 0xb9, 0xe7, 0x89,
	0xa9, 0xe7, 0x90, 0x86, 0xe6, 0x94, 0xbb, 0xe5, 0x87, 0xbb, 0xe5, 0x8a, 0x9b, 0x12, 0x50, 0x0a,
	0x2e, 0x52, 0x45, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x41, 0x5f, 0x43, 0x41, 0x4c,
	0x43, 0x55, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x48, 0x50, 0x10,
	0x0b, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe5, 0x8f, 0x97, 0xe5, 0x87, 0xbb, 0xe6, 0x96, 0xb9,
	0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe7, 0x94, 0x9f, 0xe5, 0x91, 0xbd, 0xe5, 0x80, 0xbc, 0x12,
	0x54, 0x0a, 0x2f, 0x52, 0x45, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x41, 0x5f, 0x43,
	0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x4c, 0x4f, 0x53, 0x45, 0x5f,
	0x48, 0x50, 0x10, 0x0c, 0x1a, 0x1f, 0xaa, 0xb6, 0x18, 0x1b, 0xe5, 0x8f, 0x97, 0xe5, 0x87, 0xbb,
	0xe6, 0x96, 0xb9, 0xe5, 0xb7, 0xb2, 0xe6, 0x8d, 0x9f, 0xe5, 0xa4, 0xb1, 0xe7, 0x94, 0x9f, 0xe5,
	0x91, 0xbd, 0xe5, 0x80, 0xbc, 0x12, 0x54, 0x0a, 0x32, 0x52, 0x45, 0x53, 0x5f, 0x46, 0x4f, 0x52,
	0x4d, 0x55, 0x4c, 0x41, 0x5f, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x45,
	0x58, 0x54, 0x52, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54,
	0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x48, 0x50, 0x10, 0x0d, 0x1a, 0x1c, 0xaa,
	0xb6, 0x18, 0x18, 0xe5, 0x8f, 0x97, 0xe5, 0x87, 0xbb, 0xe6, 0x96, 0xb9, 0xe5, 0xbd, 0x93, 0xe5,
	0x89, 0x8d, 0xe7, 0x94, 0x9f, 0xe5, 0x91, 0xbd, 0xe5, 0x80, 0xbc, 0x12, 0x51, 0x0a, 0x32, 0x52,
	0x45, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x41, 0x5f, 0x43, 0x41, 0x4c, 0x43, 0x55,
	0x4c, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x45, 0x4e, 0x45, 0x52, 0x47,
	0x59, 0x10, 0x0e, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe5, 0x8f, 0x97, 0xe5, 0x87, 0xbb, 0xe6,
	0x96, 0xb9, 0xe8, 0x83, 0xbd, 0xe9, 0x87, 0x8f, 0xe4, 0xb8, 0x8a, 0xe9, 0x99, 0x90, 0x12, 0x4c,
	0x0a, 0x2d, 0x52, 0x45, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x41, 0x5f, 0x43, 0x41,
	0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x41, 0x52, 0x4d, 0x4f, 0x52, 0x10,
	0x0f, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe5, 0x8f, 0x97, 0xe5, 0x87, 0xbb, 0xe6, 0x96, 0xb9,
	0xe7, 0x89, 0xa9, 0xe7, 0x90, 0x86, 0xe9, 0x98, 0xb2, 0xe5, 0xbe, 0xa1, 0x12, 0x53, 0x0a, 0x34,
	0x52, 0x45, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x41, 0x5f, 0x43, 0x41, 0x4c, 0x43,
	0x55, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x4d, 0x41, 0x47, 0x49, 0x43, 0x5f, 0x52, 0x45,
	0x53, 0x49, 0x53, 0x54, 0x10, 0x10, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe6, 0xb3, 0x95, 0xe5,
	0x8f, 0x97, 0xe5, 0x87, 0xbb, 0xe6, 0x96, 0xb9, 0xe6, 0x9c, 0xaf, 0xe9, 0x98, 0xb2, 0xe5, 0xbe,
	0xa1, 0x12, 0x54, 0x0a, 0x35, 0x52, 0x45, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x41,
	0x5f, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x41, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x11, 0x1a, 0x19, 0xaa, 0xb6,
	0x18, 0x15, 0xe5, 0x8f, 0x97, 0xe5, 0x87, 0xbb, 0xe6, 0x96, 0xb9, 0xe6, 0xb3, 0x95, 0xe6, 0x9c,
	0xaf, 0xe5, 0xbc, 0xba, 0xe5, 0xba, 0xa6, 0x12, 0x58, 0x0a, 0x36, 0x52, 0x45, 0x53, 0x5f, 0x46,
	0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x41, 0x5f, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x45,
	0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x52, 0x47,
	0x45, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x48, 0x49, 0x45, 0x4c,
	0x44, 0x10, 0x12, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe5, 0x8f, 0x97, 0xe5, 0x87, 0xbb, 0xe6,
	0x96, 0xb9, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe6, 0x8a, 0xa4, 0xe7, 0x9b, 0xbe, 0xe5, 0x80,
	0xbc, 0x12, 0x57, 0x0a, 0x35, 0x52, 0x45, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x41,
	0x5f, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x41, 0x54, 0x54,
	0x41, 0x43, 0x4b, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x13, 0x1a, 0x1c, 0xaa, 0xb6,
	0x18, 0x18, 0xe5, 0x8f, 0x97, 0xe5, 0x87, 0xbb, 0xe6, 0x96, 0xb9, 0xe7, 0x89, 0xa9, 0xe7, 0x90,
	0x86, 0xe6, 0x94, 0xbb, 0xe5, 0x87, 0xbb, 0xe5, 0x8a, 0x9b, 0x12, 0x5f, 0x0a, 0x37, 0x52, 0x45,
	0x53, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x41, 0x5f, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c,
	0x41, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x48, 0x50, 0x5f, 0x50, 0x45,
	0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x14, 0x1a, 0x22, 0xaa, 0xb6, 0x18, 0x1e, 0xe5, 0x8f, 0x97,
	0xe5, 0x87, 0xbb, 0xe6, 0x96, 0xb9, 0xe6, 0x8d, 0x9f, 0xe5, 0xa4, 0xb1, 0xe7, 0x94, 0x9f, 0xe5,
	0x91, 0xbd, 0xe5, 0x80, 0xbc, 0xe6, 0xaf, 0x94, 0xe4, 0xbe, 0x8b, 0x12, 0x29, 0x0a, 0x25, 0x52,
	0x45, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x41, 0x5f, 0x43, 0x41, 0x4c, 0x43, 0x55,
	0x4c, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4c, 0x41, 0x53, 0x54, 0x10, 0x15, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01,
	0x2a, 0xce, 0x02, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x52, 0x41, 0x42, 0x5f, 0x41, 0x57,
	0x41, 0x52, 0x44, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12,
	0x23, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x52, 0x41, 0x42, 0x5f, 0x41, 0x57, 0x41, 0x52,
	0x44, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x55,
	0x4c, 0x4c, 0x10, 0x00, 0x12, 0x3c, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x52, 0x41, 0x42,
	0x5f, 0x41, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x01, 0x1a, 0x13, 0xaa,
	0xb6, 0x18, 0x0f, 0xe4, 0xba, 0x89, 0xe5, 0xa4, 0xba, 0xe8, 0xb5, 0x9b, 0xe5, 0x9c, 0xb0, 0xe5,
	0x9b, 0xbe, 0x12, 0x44, 0x0a, 0x28, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x52, 0x41, 0x42, 0x5f, 0x41,
	0x57, 0x41, 0x52, 0x44, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x02,
	0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0x8a, 0x95, 0xe6, 0x8e, 0xb7, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0xe9, 0x97, 0xb4, 0xe9, 0x9a, 0x94, 0x12, 0x40, 0x0a, 0x24, 0x52, 0x45, 0x53, 0x5f,
	0x47, 0x52, 0x41, 0x42, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41,
	0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x10, 0x03, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe6, 0x8e,
	0x89, 0xe8, 0x90, 0xbd, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x12, 0x3b, 0x0a, 0x25, 0x52, 0x45,
	0x53, 0x5f, 0x47, 0x52, 0x41, 0x42, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x47, 0x4c, 0x4f,
	0x42, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x10, 0x04, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe4, 0xb8, 0x8b, 0xe8, 0x90,
	0xbd, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b,
	0x01, 0x2a, 0xb8, 0x04, 0x0a, 0x10, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x2e, 0x0a, 0x18, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x45,
	0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x55, 0x54, 0x52,
	0x41, 0x4c, 0x10, 0x00, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe4, 0xb8, 0xad, 0xe6, 0x80, 0xa7,
	0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0x12, 0x2f, 0x0a, 0x19, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x45,
	0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0xad, 0xa3, 0xe9, 0x9d,
	0xa2, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0x12, 0x2f, 0x0a, 0x19, 0x42, 0x55, 0x46, 0x46, 0x5f,
	0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x47, 0x41,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe8, 0xb4, 0x9f, 0xe9,
	0x9d, 0xa2, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0x12, 0x2d, 0x0a, 0x17, 0x42, 0x55, 0x46, 0x46,
	0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x4d,
	0x41, 0x47, 0x45, 0x10, 0x03, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe4, 0xbc, 0xa4, 0xe5, 0xae,
	0xb3, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0x12, 0x36, 0x0a, 0x1a, 0x42, 0x55, 0x46, 0x46, 0x5f,
	0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x4f, 0x4c, 0x5f, 0x31, 0x10, 0x04, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe4, 0xb8, 0x80,
	0xe7, 0xba, 0xa7, 0xe6, 0x8e, 0xa7, 0xe5, 0x88, 0xb6, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0x12,
	0x36, 0x0a, 0x1a, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x32, 0x10, 0x05, 0x1a,
	0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe4, 0xba, 0x8c, 0xe7, 0xba, 0xa7, 0xe6, 0x8e, 0xa7, 0xe5, 0x88,
	0xb6, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0x12, 0x36, 0x0a, 0x1a, 0x42, 0x55, 0x46, 0x46, 0x5f,
	0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x4f, 0x4c, 0x5f, 0x33, 0x10, 0x06, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe4, 0xb8, 0x89,
	0xe7, 0xba, 0xa7, 0xe6, 0x8e, 0xa7, 0xe5, 0x88, 0xb6, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0x12,
	0x36, 0x0a, 0x1a, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x34, 0x10, 0x07, 0x1a,
	0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe5, 0x9b, 0x9b, 0xe7, 0xba, 0xa7, 0xe6, 0x8e, 0xa7, 0xe5, 0x88,
	0xb6, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x55, 0x46, 0x46, 0x5f,
	0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x53, 0x54,
	0x10, 0x08, 0x12, 0x2e, 0x0a, 0x18, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x31, 0x10, 0x09,
	0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x8e, 0xa7, 0xe5, 0x88, 0xb6, 0xe6, 0x95, 0x88, 0xe6,
	0x9e, 0x9c, 0x12, 0x2e, 0x0a, 0x18, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x32, 0x10, 0x0a,
	0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0xb0, 0xb8, 0xe4, 0xb9, 0x85, 0xe6, 0x95, 0x88, 0xe6,
	0x9e, 0x9c, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xa3, 0x01, 0x0a,
	0x0e, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12,
	0x17, 0x0a, 0x13, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x34, 0x0a, 0x18, 0x42, 0x55, 0x46, 0x46,
	0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c,
	0x5f, 0x42, 0x41, 0x52, 0x10, 0x01, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0x8a, 0x80, 0xe8,
	0x83, 0xbd, 0xe6, 0x9d, 0xa1, 0xe8, 0xae, 0xa1, 0xe6, 0x95, 0xb0, 0xe5, 0x99, 0xa8, 0x12, 0x38,
	0x0a, 0x19, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x10, 0x02, 0x1a, 0x19, 0xaa,
	0xb6, 0x18, 0x15, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0xe8,
	0xae, 0xa1, 0xe6, 0x95, 0xb0, 0xe5, 0x99, 0xa8, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9,
	0x2b, 0x01, 0x2a, 0x54, 0x0a, 0x10, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x43, 0x4f, 0x49,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x2e, 0x0a, 0x18, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x41, 0x4e, 0x10, 0x00, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe9, 0x95, 0xbf, 0xe5, 0xae, 0x89,
	0xe4, 0xbb, 0xa3, 0xe5, 0xb8, 0x81, 0x1a, 0x10, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01,
	0xa0, 0xf9, 0x2b, 0x01, 0xa8, 0xf9, 0x2b, 0x01, 0x2a, 0xa5, 0x04, 0x0a, 0x11, 0x52, 0x45, 0x4c,
	0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x23,
	0x0a, 0x16, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x1a, 0x07, 0xaa, 0xb6, 0x18, 0x03,
	0xe6, 0x97, 0xa0, 0x12, 0x3d, 0x0a, 0x1e, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x4d, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x41, 0x4e,
	0x5f, 0x4d, 0x4f, 0x44, 0x31, 0x10, 0x01, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe9, 0x95, 0xbf,
	0xe5, 0xae, 0x89, 0xe6, 0x94, 0xb9, 0xe8, 0x8e, 0xb7, 0xe5, 0xbe, 0x97, 0xe4, 0xbb, 0xa3, 0xe5,
	0xb8, 0x81, 0x12, 0x43, 0x0a, 0x1b, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4d,
	0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x4d, 0x4f, 0x44,
	0x31, 0x10, 0x02, 0x1a, 0x22, 0xaa, 0xb6, 0x18, 0x1e, 0xe7, 0xbb, 0x9f, 0xe6, 0xb2, 0xbb, 0xe8,
	0x80, 0x85, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0xe5, 0x85, 0xb1, 0xe4, 0xba, 0xab, 0xe5, 0x90,
	0x8c, 0xe9, 0x98, 0xb5, 0xe8, 0x90, 0xa5, 0x12, 0x43, 0x0a, 0x1d, 0x52, 0x45, 0x4c, 0x41, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x41, 0x4e,
	0x46, 0x45, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x31, 0x10, 0x03, 0x1a, 0x20, 0xaa, 0xb6, 0x18, 0x1c,
	0xe4, 0xb8, 0x89, 0xe5, 0x88, 0x86, 0xe4, 0xb9, 0x8b, 0xe5, 0x9c, 0xb0, 0xe8, 0x8b, 0xb1, 0xe9,
	0x9b, 0x84, 0x62, 0x75, 0x66, 0x66, 0xe5, 0x8a, 0xa0, 0xe5, 0x80, 0x8d, 0x12, 0x46, 0x0a, 0x1d,
	0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x41, 0x4e, 0x46, 0x45, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x32, 0x10, 0x04, 0x1a,
	0x23, 0xaa, 0xb6, 0x18, 0x1f, 0xe4, 0xb8, 0x89, 0xe5, 0x88, 0x86, 0xe4, 0xb9, 0x8b, 0xe5, 0x9c,
	0xb0, 0x62, 0x75, 0x66, 0x66, 0xe5, 0x85, 0xb1, 0xe4, 0xba, 0xab, 0xe5, 0x90, 0x8c, 0xe9, 0x98,
	0xb5, 0xe8, 0x90, 0xa5, 0x12, 0x46, 0x0a, 0x1b, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x4d, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x4d,
	0x4f, 0x44, 0x32, 0x10, 0x05, 0x1a, 0x25, 0xaa, 0xb6, 0x18, 0x21, 0xe7, 0xbb, 0x9f, 0xe6, 0xb2,
	0xbb, 0xe8, 0x80, 0x85, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0x87, 0xe5, 0x8c, 0x85, 0xe5, 0x90, 0xab,
	0xe4, 0xb8, 0x80, 0xe4, 0xbb, 0xb6, 0xe7, 0xa5, 0x9e, 0xe8, 0xa3, 0x85, 0x12, 0x46, 0x0a, 0x27,
	0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x4c, 0x45, 0x41,
	0x44, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x10, 0x06, 0x1a, 0x19, 0xaa, 0xb6, 0x18, 0x15, 0xe6,
	0x98, 0x9f, 0xe4, 0xb9, 0x8b, 0xe9, 0x98, 0x9f, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe9, 0x98,
	0x9f, 0xe9, 0x95, 0xbf, 0x12, 0x40, 0x0a, 0x1e, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x4d, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x41,
	0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x32, 0x10, 0x07, 0x1a, 0x1c, 0xaa, 0xb6, 0x18, 0x18, 0xe9, 0x95,
	0xbf, 0xe5, 0xae, 0x89, 0xe5, 0xb8, 0x81, 0xe5, 0x8f, 0xaf, 0xe5, 0x88, 0xb7, 0xe6, 0x96, 0xb0,
	0xe5, 0x95, 0x86, 0xe5, 0xba, 0x97, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01,
	0x2a, 0x97, 0x01, 0x0a, 0x14, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x41, 0x4d,
	0x45, 0x5f, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x56, 0x0a, 0x27, 0x47, 0x41, 0x4d, 0x45,
	0x5f, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x51, 0x55, 0x49, 0x54, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x01, 0x1a, 0x29, 0xaa, 0xb6, 0x18, 0x25, 0xe6, 0x9c, 0x89, 0xe6, 0x95,
	0x88, 0xe7, 0x8e, 0xa9, 0xe5, 0xae, 0xb6, 0xe5, 0xb0, 0x8f, 0xe4, 0xba, 0x8e, 0x32, 0xe4, 0xba,
	0xba, 0xef, 0xbc, 0x8c, 0xe7, 0xa6, 0x81, 0xe6, 0xad, 0xa2, 0xe6, 0x8a, 0x95, 0xe9, 0x99, 0x8d,
	0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0x96, 0x06, 0x0a, 0x19, 0x42,
	0x55, 0x46, 0x46, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x55, 0x46, 0x46,
	0x5f, 0x53, 0x55, 0x42, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x37, 0x0a, 0x1b,
	0x42, 0x55, 0x46, 0x46, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x5f, 0x31, 0x10, 0x10, 0x1a, 0x16, 0xaa,
	0xb6, 0x18, 0x12, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe9, 0xa9, 0xb1, 0xe6, 0x95, 0xa3, 0xe5,
	0x87, 0x80, 0xe5, 0x8c, 0x96, 0x12, 0x2b, 0x0a, 0x1b, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x53, 0x55,
	0x42, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41,
	0x53, 0x4b, 0x5f, 0x32, 0x10, 0x01, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe7, 0xa6, 0x81, 0xe9,
	0x94, 0xa2, 0x12, 0x2b, 0x0a, 0x1b, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x45,
	0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x5f,
	0x33, 0x10, 0x02, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe6, 0xb2, 0x89, 0xe9, 0xbb, 0x98, 0x12,
	0x2b, 0x0a, 0x1b, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x45, 0x46, 0x46, 0x45,
	0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x5f, 0x34, 0x10, 0x08,
	0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe7, 0xbc, 0xb4, 0xe6, 0xa2, 0xb0, 0x12, 0x2b, 0x0a, 0x1b,
	0x42, 0x55, 0x46, 0x46, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x5f, 0x35, 0x10, 0x0a, 0x1a, 0x0a, 0xaa,
	0xb6, 0x18, 0x06, 0xe6, 0xb7, 0xb7, 0xe4, 0xb9, 0xb1, 0x12, 0x2b, 0x0a, 0x1b, 0x42, 0x55, 0x46,
	0x46, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x5f, 0x36, 0x10, 0x0f, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06,
	0xe6, 0x99, 0x95, 0xe7, 0x9c, 0xa9, 0x12, 0x2b, 0x0a, 0x1b, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x53,
	0x55, 0x42, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x41, 0x53, 0x4b, 0x5f, 0x37, 0x10, 0x1f, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0x8e, 0x8b,
	0xe5, 0x88, 0xb6, 0x12, 0x2c, 0x0a, 0x1b, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x53, 0x55, 0x42, 0x5f,
	0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x4b,
	0x5f, 0x38, 0x10, 0x9f, 0x10, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0x87, 0xbb, 0xe9, 0xa3,
	0x9e, 0x12, 0x2c, 0x0a, 0x1b, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x45, 0x46,
	0x46, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x5f, 0x39,
	0x10, 0xa0, 0x0f, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0x85, 0x8d, 0xe7, 0x96, 0xab, 0x12,
	0x33, 0x0a, 0x1c, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x45, 0x46, 0x46, 0x45,
	0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x5f, 0x31, 0x30, 0x10,
	0xb0, 0x0f, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0xbc, 0xba, 0xe6, 0x95, 0x88, 0xe5, 0x85,
	0x8d, 0xe7, 0x96, 0xab, 0x12, 0x2c, 0x0a, 0x1c, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x53, 0x55, 0x42,
	0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x53,
	0x4b, 0x5f, 0x31, 0x31, 0x10, 0x40, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0x85, 0x8d, 0xe4,
	0xbc, 0xa4, 0x12, 0x32, 0x0a, 0x1c, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x45,
	0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x5f,
	0x31, 0x32, 0x10, 0x50, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0xbc, 0xba, 0xe6, 0x95, 0x88,
	0xe5, 0x85, 0x8d, 0xe4, 0xbc, 0xa4, 0x12, 0x2d, 0x0a, 0x1c, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x53,
	0x55, 0x42, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x41, 0x53, 0x4b, 0x5f, 0x31, 0x33, 0x10, 0xe0, 0x0f, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe6,
	0x97, 0xa0, 0xe6, 0x95, 0x8c, 0x12, 0x33, 0x0a, 0x1c, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x53, 0x55,
	0x42, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41,
	0x53, 0x4b, 0x5f, 0x31, 0x34, 0x10, 0xf0, 0x4f, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0xbc,
	0xba, 0xe6, 0x95, 0x88, 0xe6, 0x97, 0xa0, 0xe6, 0x95, 0x8c, 0x12, 0x2d, 0x0a, 0x1c, 0x42, 0x55,
	0x46, 0x46, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x5f, 0x31, 0x35, 0x10, 0x90, 0x20, 0x1a, 0x0a, 0xaa,
	0xb6, 0x18, 0x06, 0xe6, 0x9c, 0xa8, 0xe6, 0xa1, 0xa9, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90,
	0xf9, 0x2b, 0x01, 0x2a, 0x9d, 0x01, 0x0a, 0x22, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a,
	0x45, 0x43, 0x54, 0x38, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x41, 0x42,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x31, 0x0a, 0x27, 0x52, 0x45,
	0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f,
	0x50, 0x52, 0x4f, 0x42, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x1a, 0x04, 0xaa, 0xb6, 0x18, 0x00, 0x12, 0x3a, 0x0a,
	0x24, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x44, 0x52,
	0x4f, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4d,
	0x49, 0x4e, 0x43, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x8e, 0x89,
	0xe8, 0x90, 0xbd, 0xe4, 0xb8, 0x8b, 0xe9, 0x99, 0x90, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90,
	0xf9, 0x2b, 0x01, 0x2a, 0xf0, 0x03, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a,
	0x45, 0x43, 0x54, 0x38, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x2f, 0x0a, 0x25, 0x52, 0x45, 0x53, 0x5f,
	0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x43, 0x4f,
	0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x55, 0x4c,
	0x4c, 0x10, 0x00, 0x1a, 0x04, 0xaa, 0xb6, 0x18, 0x00, 0x12, 0x4e, 0x0a, 0x2b, 0x52, 0x45, 0x53,
	0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x43,
	0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48,
	0x4f, 0x50, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x01, 0x1a, 0x1d, 0xaa, 0xb6, 0x18, 0x19,
	0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x2d, 0xe5, 0x95, 0x86,
	0xe5, 0xba, 0x97, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0x12, 0x4e, 0x0a, 0x2b, 0x52, 0x45, 0x53,
	0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x43,
	0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48,
	0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x10, 0x02, 0x1a, 0x1d, 0xaa, 0xb6, 0x18, 0x19,
	0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x2d, 0xe6, 0xa3, 0x8b,
	0xe5, 0xad, 0x90, 0xe6, 0x98, 0x9f, 0xe7, 0xba, 0xa7, 0x12, 0x51, 0x0a, 0x2e, 0x52, 0x45, 0x53,
	0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x43,
	0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x03, 0x1a, 0x1d, 0xaa,
	0xb6, 0x18, 0x19, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x2d,
	0xe4, 0xb8, 0x8d, 0xe5, 0x8f, 0xaf, 0xe9, 0x87, 0x8d, 0xe5, 0xa4, 0x8d, 0x12, 0x50, 0x0a, 0x27,
	0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x44, 0x52, 0x4f,
	0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x41, 0x58, 0x43, 0x4e, 0x54, 0x10, 0x04, 0x1a, 0x23, 0xaa, 0xb6, 0x18, 0x1f, 0xe6,
	0x8e, 0x89, 0xe8, 0x90, 0xbd, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x2d, 0xe5, 0x8d, 0x95, 0xe5,
	0xb1, 0x80, 0xe4, 0xb8, 0x8a, 0xe9, 0x99, 0x90, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x12, 0x4c,
	0x0a, 0x29, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x44,
	0x52, 0x4f, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x05, 0x1a, 0x1d, 0xaa,
	0xb6, 0x18, 0x19, 0xe6, 0x8e, 0x89, 0xe8, 0x90, 0xbd, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x2d,
	0xe7, 0xbe, 0x81, 0xe7, 0xbb, 0x8a, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0x1a, 0x08, 0x88, 0xf9,
	0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xb3, 0x01, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x5f, 0x42,
	0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x5f, 0x54, 0x45, 0x58, 0x54,
	0x5f, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c,
	0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x49, 0x44, 0x5f,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x38, 0x0a, 0x28, 0x52, 0x45, 0x53,
	0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x5f, 0x54, 0x45,
	0x58, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x10, 0x01, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe5, 0x85, 0x8d,
	0xe6, 0x8e, 0xa7, 0x12, 0x2d, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c,
	0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x49, 0x44, 0x5f,
	0x4d, 0x49, 0x53, 0x53, 0x10, 0x02, 0x1a, 0x0a, 0xaa, 0xb6, 0x18, 0x06, 0xe9, 0x97, 0xaa, 0xe9,
	0x81, 0xbf, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xbc, 0x01, 0x0a,
	0x17, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x5f,
	0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x38, 0x0a,
	0x22, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x5f, 0x43,
	0x45, 0x4c, 0x4c, 0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0x89, 0x93, 0xe7, 0xa0,
	0xb4, 0xe7, 0xab, 0x99, 0xe4, 0xbd, 0x8d, 0x12, 0x38, 0x0a, 0x22, 0x52, 0x45, 0x53, 0x5f, 0x50,
	0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x02, 0x1a,
	0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe7, 0xbb, 0x88, 0xe7, 0xbb, 0x93, 0xe7, 0x9b, 0xae, 0xe6, 0xa0,
	0x87, 0x1a, 0x08, 0x88, 0xf9, 0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x2a, 0xa8, 0x05, 0x0a, 0x21,
	0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x38, 0x5f, 0x4c, 0x4f, 0x52,
	0x44, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54,
	0x38, 0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x48, 0x41, 0x53,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00,
	0x12, 0x24, 0x0a, 0x0e, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41,
	0x52, 0x45, 0x10, 0x01, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe5, 0xa4, 0x87, 0xe6, 0x88, 0x98,
	0xe9, 0x98, 0xb6, 0xe6, 0xae, 0xb5, 0x12, 0x21, 0x0a, 0x0b, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45,
	0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x02, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe9, 0x94, 0x81,
	0xe5, 0xae, 0x9a, 0xe9, 0x98, 0xb6, 0xe6, 0xae, 0xb5, 0x12, 0x2a, 0x0a, 0x14, 0x42, 0x41, 0x54,
	0x54, 0x4c, 0x45, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x04, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe4, 0xbc, 0xa0, 0xe9, 0x80, 0x81, 0xe9,
	0x98, 0xb6, 0xe6, 0xae, 0xb5, 0x12, 0x21, 0x0a, 0x0b, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f,
	0x52, 0x41, 0x43, 0x45, 0x10, 0x08, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe6, 0xad, 0xa3, 0xe8,
	0xb5, 0x9b, 0xe9, 0x98, 0xb6, 0xe6, 0xae, 0xb5, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x41, 0x54, 0x54,
	0x4c, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x10, 0x1a, 0x13, 0xaa,
	0xb6, 0x18, 0x0f, 0xe5, 0x8a, 0xa0, 0xe6, 0x97, 0xb6, 0xe8, 0xb5, 0x9b, 0xe9, 0x98, 0xb6, 0xe6,
	0xae, 0xb5, 0x12, 0x23, 0x0a, 0x0d, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x54,
	0x54, 0x4c, 0x45, 0x10, 0x20, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe7, 0xbb, 0x93, 0xe7, 0xae,
	0x97, 0xe9, 0x98, 0xb6, 0xe6, 0xae, 0xb5, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x41, 0x54, 0x54, 0x4c,
	0x45, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x40, 0x1a, 0x10, 0xaa, 0xb6, 0x18, 0x0c, 0xe9,
	0x87, 0x8d, 0xe7, 0xbd, 0xae, 0xe9, 0x98, 0xb6, 0xe6, 0xae, 0xb5, 0x12, 0x2f, 0x0a, 0x12, 0x42,
	0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52,
	0x45, 0x10, 0x80, 0x01, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0x88, 0x98, 0xe5, 0x90, 0x8e,
	0xe6, 0x95, 0xb4, 0xe7, 0x90, 0x86, 0xe9, 0x98, 0xb6, 0xe6, 0xae, 0xb5, 0x12, 0x27, 0x0a, 0x0a,
	0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x80, 0x02, 0x1a, 0x16, 0xaa,
	0xb6, 0x18, 0x12, 0xe5, 0x9b, 0x9e, 0xe5, 0x90, 0x88, 0xe5, 0xae, 0x8c, 0xe6, 0x88, 0x90, 0xe9,
	0x98, 0xb6, 0xe6, 0xae, 0xb5, 0x12, 0x2b, 0x0a, 0x10, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f,
	0x42, 0x4f, 0x53, 0x53, 0x41, 0x57, 0x41, 0x52, 0x44, 0x10, 0x80, 0x04, 0x1a, 0x14, 0xaa, 0xb6,
	0x18, 0x10, 0x42, 0x4f, 0x53, 0x53, 0xe5, 0xa5, 0x96, 0xe5, 0x8a, 0xb1, 0xe9, 0x98, 0xb6, 0xe6,
	0xae, 0xb5, 0x12, 0x24, 0x0a, 0x0b, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4f, 0x4e, 0x4c,
	0x59, 0x10, 0x18, 0x1a, 0x13, 0xaa, 0xb6, 0x18, 0x0f, 0xe4, 0xbb, 0x85, 0xe6, 0x88, 0x98, 0xe6,
	0x96, 0x97, 0xe9, 0x98, 0xb6, 0xe6, 0xae, 0xb5, 0x12, 0x2f, 0x0a, 0x12, 0x42, 0x41, 0x54, 0x54,
	0x4c, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x10, 0x81,
	0x01, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12, 0xe6, 0x88, 0x98, 0xe5, 0x89, 0x8d, 0xe6, 0x88, 0x98,
	0xe5, 0x90, 0x8e, 0xe9, 0x98, 0xb6, 0xe6, 0xae, 0xb5, 0x12, 0x27, 0x0a, 0x0a, 0x42, 0x41, 0x54,
	0x54, 0x4c, 0x45, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0xff, 0x01, 0x1a, 0x16, 0xaa, 0xb6, 0x18, 0x12,
	0xe5, 0xb8, 0xb8, 0xe8, 0xa7, 0x84, 0xe4, 0xbb, 0xbb, 0xe6, 0x84, 0x8f, 0xe9, 0x98, 0xb6, 0xe6,
	0xae, 0xb5, 0x12, 0x38, 0x0a, 0x03, 0x4d, 0x41, 0x58, 0x10, 0x81, 0x04, 0x1a, 0x2e, 0xaa, 0xb6,
	0x18, 0x2a, 0xe8, 0x87, 0xaa, 0xe8, 0xb5, 0xb0, 0xe6, 0xa3, 0x8b, 0xe9, 0xa2, 0x86, 0xe4, 0xb8,
	0xbb, 0xe6, 0x8a, 0x80, 0xe8, 0x83, 0xbd, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe6, 0x97, 0xb6,
	0xe6, 0x9c, 0xba, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe5, 0x80, 0xbc, 0x1a, 0x08, 0x88, 0xf9,
	0x2b, 0x01, 0x90, 0xf9, 0x2b, 0x01, 0x42, 0x18, 0x5a, 0x16, 0x6f, 0x73, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x65, 0x73, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_os_res_enum_legacy_proto_rawDescOnce sync.Once
	file_os_res_enum_legacy_proto_rawDescData = file_os_res_enum_legacy_proto_rawDesc
)

func file_os_res_enum_legacy_proto_rawDescGZIP() []byte {
	file_os_res_enum_legacy_proto_rawDescOnce.Do(func() {
		file_os_res_enum_legacy_proto_rawDescData = protoimpl.X.CompressGZIP(file_os_res_enum_legacy_proto_rawDescData)
	})
	return file_os_res_enum_legacy_proto_rawDescData
}

var file_os_res_enum_legacy_proto_enumTypes = make([]protoimpl.EnumInfo, 110)
var file_os_res_enum_legacy_proto_goTypes = []interface{}{
	(RES_ANONYMOUS)(0),                          // 0: ResData.RES_ANONYMOUS
	(RES_SETTING_LEVEL)(0),                      // 1: ResData.RES_SETTING_LEVEL
	(RES_SETTING_LEVEL_NEW)(0),                  // 2: ResData.RES_SETTING_LEVEL_NEW
	(RES_DEVICE_LEVEL)(0),                       // 3: ResData.RES_DEVICE_LEVEL
	(RES_SKIN_QUALITY)(0),                       // 4: ResData.RES_SKIN_QUALITY
	(RES_SPECIAL_TIP_POS)(0),                    // 5: ResData.RES_SPECIAL_TIP_POS
	(RES_OPERATOR_TYPE)(0),                      // 6: ResData.RES_OPERATOR_TYPE
	(PROJ8_EFFECT_DEGREE_TYPE)(0),               // 7: ResData.PROJ8_EFFECT_DEGREE_TYPE
	(SkillTargetRule)(0),                        // 8: ResData.SkillTargetRule
	(SkillEffectType)(0),                        // 9: ResData.SkillEffectType
	(RES_VALUE_TYPE)(0),                         // 10: ResData.RES_VALUE_TYPE
	(CaptainSwitchValueReplaceType)(0),          // 11: ResData.CaptainSwitchValueReplaceType
	(PassiveEventType)(0),                       // 12: ResData.PassiveEventType
	(PassiveConditionType)(0),                   // 13: ResData.PassiveConditionType
	(ResSkillFuncTypeAddHPCombineEffectType)(0), // 14: ResData.ResSkillFuncTypeAddHPCombineEffectType
	(ResSkillCombineControlEffectType)(0),       // 15: ResData.ResSkillCombineControlEffectType
	(RES_SKILLFUNC_OVERLAY_TYPE)(0),             // 16: ResData.RES_SKILLFUNC_OVERLAY_TYPE
	(RES_SKILLFUNC_OVERLAY_RULE)(0),             // 17: ResData.RES_SKILLFUNC_OVERLAY_RULE
	(RES_SKILLFUNC_CLEAR_RULE)(0),               // 18: ResData.RES_SKILLFUNC_CLEAR_RULE
	(RES_SKILLFUNC_PROTECT_TYPE)(0),             // 19: ResData.RES_SKILLFUNC_PROTECT_TYPE
	(RES_SKILLFUNC_TYPE)(0),                     // 20: ResData.RES_SKILLFUNC_TYPE
	(RES_SCENE_TYPE)(0),                         // 21: ResData.RES_SCENE_TYPE
	(RES_FUNCEFT_TYPE)(0),                       // 22: ResData.RES_FUNCEFT_TYPE
	(RES_FUNCEFT_EXTEND_TYPE)(0),                // 23: ResData.RES_FUNCEFT_EXTEND_TYPE
	(RES_FUNCEFT_VALUE_TYPE)(0),                 // 24: ResData.RES_FUNCEFT_VALUE_TYPE
	(RES_GLOBAL_CONF_TYPE)(0),                   // 25: ResData.RES_GLOBAL_CONF_TYPE
	(RES_COMPARE_OPERATOR_TYPE)(0),              // 26: ResData.RES_COMPARE_OPERATOR_TYPE
	(RES_HERO_TYPE)(0),                          // 27: ResData.RES_HERO_TYPE
	(RES_HERO_JOB)(0),                           // 28: ResData.RES_HERO_JOB
	(RES_ATTACKDISTANCE_TYPE)(0),                // 29: ResData.RES_ATTACKDISTANCE_TYPE
	(RES_MONSTER_GRADE)(0),                      // 30: ResData.RES_MONSTER_GRADE
	(RES_RANDOM_TYPE)(0),                        // 31: ResData.RES_RANDOM_TYPE
	(RES_ATKSPEED_TYPE)(0),                      // 32: ResData.RES_ATKSPEED_TYPE
	(RES_DROP_PROBABILITY_TYPE)(0),              // 33: ResData.RES_DROP_PROBABILITY_TYPE
	(RES_LOGIC_OPERATION_TYPE)(0),               // 34: ResData.RES_LOGIC_OPERATION_TYPE
	(RES_GAME_TASK_ACHIEVE_TYPE)(0),             // 35: ResData.RES_GAME_TASK_ACHIEVE_TYPE
	(RES_HERO_RECOMMEND_POSITION)(0),            // 36: ResData.RES_HERO_RECOMMEND_POSITION
	(RESTRICT_TYPE)(0),                          // 37: ResData.RESTRICT_TYPE
	(HORIZON_METHOD)(0),                         // 38: ResData.HORIZON_METHOD
	(HERO_DAMAGE_TYPE)(0),                       // 39: ResData.HERO_DAMAGE_TYPE
	(RES_CALL_MONSTER_ADD_TYPE)(0),              // 40: ResData.RES_CALL_MONSTER_ADD_TYPE
	(RES_ENTERTAINMENT_MAP_SUB_TYPE)(0),         // 41: ResData.RES_ENTERTAINMENT_MAP_SUB_TYPE
	(RES_MULTI_GAME_PICK_RULE)(0),               // 42: ResData.RES_MULTI_GAME_PICK_RULE
	(RES_SPEEDADJUST_TYPE)(0),                   // 43: ResData.RES_SPEEDADJUST_TYPE
	(RES_DEV_FUNC_TYPE)(0),                      // 44: ResData.RES_DEV_FUNC_TYPE
	(RES_QUESTION_CHOOSE_RULE)(0),               // 45: ResData.RES_QUESTION_CHOOSE_RULE
	(RES_PERFEFT_USE_TYPE)(0),                   // 46: ResData.RES_PERFEFT_USE_TYPE
	(RES_HUD3D_COLOR_TYPE)(0),                   // 47: ResData.RES_HUD3D_COLOR_TYPE
	(RES_ENTERAINMENT_SUBTYPE)(0),               // 48: ResData.RES_ENTERAINMENT_SUBTYPE
	(RES_USABLE_HERO_CREATE_METHOD)(0),          // 49: ResData.RES_USABLE_HERO_CREATE_METHOD
	(RES_PROJ8_RECOMMEND_DIFFICULTY_TYPE)(0),    // 50: ResData.RES_PROJ8_RECOMMEND_DIFFICULTY_TYPE
	(RES_PROJ8_RECOMMEND_ARRANGE_TYPE)(0),       // 51: ResData.RES_PROJ8_RECOMMEND_ARRANGE_TYPE
	(RES_BATTLE_ENERGY_TYPE)(0),                 // 52: ResData.RES_BATTLE_ENERGY_TYPE
	(RES_ALTERNATIVE_SKIN_RES_TYPE)(0),          // 53: ResData.RES_ALTERNATIVE_SKIN_RES_TYPE
	(RES_PROJECT8_EQUIP_ONLY_TYPE)(0),           // 54: ResData.RES_PROJECT8_EQUIP_ONLY_TYPE
	(RES_PROJECT8_N_SELECT_ONE_OP_TYPE)(0),      // 55: ResData.RES_PROJECT8_N_SELECT_ONE_OP_TYPE
	(RES_PROJECT8_JIXIABOX_STATE_TYPE)(0),       // 56: ResData.RES_PROJECT8_JIXIABOX_STATE_TYPE
	(RES_PROJECT8_EQUIP_TYPE)(0),                // 57: ResData.RES_PROJECT8_EQUIP_TYPE
	(RES_PROJECT8_TALENT_CONDITION)(0),          // 58: ResData.RES_PROJECT8_TALENT_CONDITION
	(RES_PROJECT8_TALENT_PROMOTE_TYPE)(0),       // 59: ResData.RES_PROJECT8_TALENT_PROMOTE_TYPE
	(RES_PROJECT8_BUFF_SELECT_TYPE)(0),          // 60: ResData.RES_PROJECT8_BUFF_SELECT_TYPE
	(RES_GAMESVR_PLAT_TYPE)(0),                  // 61: ResData.RES_GAMESVR_PLAT_TYPE
	(RES_TRIAL_TYPE)(0),                         // 62: ResData.RES_TRIAL_TYPE
	(RES_PROJECT8_TALENT_BUFF_SELECT_TYPE)(0),   // 63: ResData.RES_PROJECT8_TALENT_BUFF_SELECT_TYPE
	(RES_PROJECT8_MATCH_GRADE_TYPE)(0),          // 64: ResData.RES_PROJECT8_MATCH_GRADE_TYPE
	(RES_GAMEOVER_COND_TYPE)(0),                 // 65: ResData.RES_GAMEOVER_COND_TYPE
	(RES_HERO_ABILITY_TYPE)(0),                  // 66: ResData.RES_HERO_ABILITY_TYPE
	(RES_PERFEFT_SPECTIME_TYPE)(0),              // 67: ResData.RES_PERFEFT_SPECTIME_TYPE
	(RES_EP_STATE)(0),                           // 68: ResData.RES_EP_STATE
	(RES_HONOR_CHALLENGE_TYPE)(0),               // 69: ResData.RES_HONOR_CHALLENGE_TYPE
	(RES_GUIDE_INTRO_TYPE)(0),                   // 70: ResData.RES_GUIDE_INTRO_TYPE
	(RES_SKILL_TAG)(0),                          // 71: ResData.RES_SKILL_TAG
	(RES_TEAM_RANGE_RULE)(0),                    // 72: ResData.RES_TEAM_RANGE_RULE
	(RES_CHESS_BOUNTYMATCH_LEVEL)(0),            // 73: ResData.RES_CHESS_BOUNTYMATCH_LEVEL
	(RES_PROJECT8_DRAW_ITEM_TYPE)(0),            // 74: ResData.RES_PROJECT8_DRAW_ITEM_TYPE
	(RES_GENERAL_SHOP_TYPE)(0),                  // 75: ResData.RES_GENERAL_SHOP_TYPE
	(RES_IN_BATTLE_OPEN_FUNC_PARAM_TYPE)(0),     // 76: ResData.RES_IN_BATTLE_OPEN_FUNC_PARAM_TYPE
	(RES_IN_BATTLE_OPEN_FUNC_BIT)(0),            // 77: ResData.RES_IN_BATTLE_OPEN_FUNC_BIT
	(RES_IN_BATTLE_ACNT_FUNC_BIT)(0),            // 78: ResData.RES_IN_BATTLE_ACNT_FUNC_BIT
	(RES_GRAY_FUNC_BIT)(0),                      // 79: ResData.RES_GRAY_FUNC_BIT
	(RES_IN_BATTLE_ACNT_FUNC_PARAM_TYPE)(0),     // 80: ResData.RES_IN_BATTLE_ACNT_FUNC_PARAM_TYPE
	(RES_WEALMULTIOPT_OPTTYPE)(0),               // 81: ResData.RES_WEALMULTIOPT_OPTTYPE
	(RES_WEALMULTIOPT_TIMETYPE)(0),              // 82: ResData.RES_WEALMULTIOPT_TIMETYPE
	(RES_LOADING_CHAT_CONTENT_TYPE)(0),          // 83: ResData.RES_LOADING_CHAT_CONTENT_TYPE
	(RES_ALBUM_TYPE)(0),                         // 84: ResData.RES_ALBUM_TYPE
	(RES_HERO_FAVOR_GIFT_TYPE)(0),               // 85: ResData.RES_HERO_FAVOR_GIFT_TYPE
	(RES_DROP_RELATION_TYPE)(0),                 // 86: ResData.RES_DROP_RELATION_TYPE
	(RES_HERO_RELATION_TYPE)(0),                 // 87: ResData.RES_HERO_RELATION_TYPE
	(RES_HERO_GENDER)(0),                        // 88: ResData.RES_HERO_GENDER
	(RES_HEROFAVORITEM_SUB_TYPE)(0),             // 89: ResData.RES_HEROFAVORITEM_SUB_TYPE
	(RES_HERO_STORY_TYPE)(0),                    // 90: ResData.RES_HERO_STORY_TYPE
	(RES_HERO_STORY_CARD_TYPE)(0),               // 91: ResData.RES_HERO_STORY_CARD_TYPE
	(RES_PROJECT8_ABILITY_TYPE)(0),              // 92: ResData.RES_PROJECT8_ABILITY_TYPE
	(RES_PROJECT8_AUCTION_UNLOCK_TYPE)(0),       // 93: ResData.RES_PROJECT8_AUCTION_UNLOCK_TYPE
	(RES_PROJECT8_DROP_PROBILITY_TYPE)(0),       // 94: ResData.RES_PROJECT8_DROP_PROBILITY_TYPE
	(RES_PROJECT8_CUSTOM_ROOM_SET_INDEX)(0),     // 95: ResData.RES_PROJECT8_CUSTOM_ROOM_SET_INDEX
	(RES_PROJECT8_ROUND_STATE_TYPE)(0),          // 96: ResData.RES_PROJECT8_ROUND_STATE_TYPE
	(RES_FORMULA_CALCULATE_EXTRA_TYPE)(0),       // 97: ResData.RES_FORMULA_CALCULATE_EXTRA_TYPE
	(RES_GRAB_AWARD_GLOBAL_TYPE)(0),             // 98: ResData.RES_GRAB_AWARD_GLOBAL_TYPE
	(BUFF_EFFECT_TYPE)(0),                       // 99: ResData.BUFF_EFFECT_TYPE
	(BUFF_SHOW_TYPE)(0),                         // 100: ResData.BUFF_SHOW_TYPE
	(CUSTOM_COIN_TYPE)(0),                       // 101: ResData.CUSTOM_COIN_TYPE
	(RELATIVE_MOD_TYPE)(0),                      // 102: ResData.RELATIVE_MOD_TYPE
	(GAME_CORE_ERROR_CODE)(0),                   // 103: ResData.GAME_CORE_ERROR_CODE
	(BUFF_SUB_EFFECT_TYPE_MASK)(0),              // 104: ResData.BUFF_SUB_EFFECT_TYPE_MASK
	(RES_PROJECT8_DROP_PROBABILITY_TYPE)(0),     // 105: ResData.RES_PROJECT8_DROP_PROBABILITY_TYPE
	(RES_PROJECT8_DROP_CONDITION_TYPE)(0),       // 106: ResData.RES_PROJECT8_DROP_CONDITION_TYPE
	(RES_BATTLE_FLOAT_TEXT_ID)(0),               // 107: ResData.RES_BATTLE_FLOAT_TEXT_ID
	(RES_PROJECT8_SKILL_TYPE)(0),                // 108: ResData.RES_PROJECT8_SKILL_TYPE
	(RES_PROJECT8_LORDSKILL_PHASE_TYPE)(0),      // 109: ResData.RES_PROJECT8_LORDSKILL_PHASE_TYPE
}
var file_os_res_enum_legacy_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_os_res_enum_legacy_proto_init() }
func file_os_res_enum_legacy_proto_init() {
	if File_os_res_enum_legacy_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_os_res_enum_legacy_proto_rawDesc,
			NumEnums:      110,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_os_res_enum_legacy_proto_goTypes,
		DependencyIndexes: file_os_res_enum_legacy_proto_depIdxs,
		EnumInfos:         file_os_res_enum_legacy_proto_enumTypes,
	}.Build()
	File_os_res_enum_legacy_proto = out.File
	file_os_res_enum_legacy_proto_rawDesc = nil
	file_os_res_enum_legacy_proto_goTypes = nil
	file_os_res_enum_legacy_proto_depIdxs = nil
}
