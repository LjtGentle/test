syntax = "proto3";
package ResData;
import "bingogen.option.proto";
import "resdata.option.proto";
import "cltgen.option.proto";
import "os_res_data_legacy.proto";
option go_package = "osserver/proto/resdata";

//####UE战斗key--开始####

enum EPlayerCamp {
    option allow_alias        = true;
    PlayerCamp1               = 0 [ (resdata.keyword_alias) = "阵营1" ];
    PlayerCamp2               = 1 [ (resdata.keyword_alias) = "阵营2" ];
    PlayerCampPlayerOnlyCount = 2 [ (resdata.keyword_alias) = "阵营总数(不计中立)" ];
    PlayerCamp3               = 2 [ (resdata.keyword_alias) = "中立" ];
    PlayerCampCount           = 3 [ (resdata.keyword_alias) = "阵营总数" ];
    PlayerCampNull            = 3;
}

/**用UE的枚举风格，这个是旧的不要参照这个风格**/
enum COM_ROOM_MEMBEM_TYPE {
    option allow_alias               = true;
    COM_ROOM_MEMBEM_TYPE__reserved__ = 0;
    COM_ROOM_MEMBER_TNULL            = 0;
    COM_ROOM_MEMBER_TACNT            = 1;
    COM_ROOM_MEMBER_TNPC             = 2;
}
/**用UE的枚举风格，这个是旧的不要参照这个风格**/

enum RES_BATTLE_CAMP_TYPE {
    RES_BATTLE_CAMP_TYPE__reserved__ = 0;
    RES_BATTLE_CAMP_BLUE             = 1 [ (resdata.keyword_alias) = "蓝方" ];
    RES_BATTLE_CAMP_RED              = 2 [ (resdata.keyword_alias) = "红方" ];
    RES_BATTLE_CAMP_ALL              = 3 [ (resdata.keyword_alias) = "双方" ];
}

enum EGetWay {
    Null                     = 0;
    GETWAY_SHOP              = 1 [ (resdata.keyword_alias) = "商城购买" ];
    GETWAY_BATTLEPASS        = 2 [ (resdata.keyword_alias) = "训练册奖励" ];
    GETWAY_SIGNIN            = 3 [ (resdata.keyword_alias) = "签到活动赠送" ];
    GETWAY_OPERATIONACTIVITY = 4 [ (resdata.keyword_alias) = "运营活动获取" ];
    BADGETASKS               = 5 [ (resdata.keyword_alias) = "徽章任务获取" ];
    HEROPAGE               = 6 [ (resdata.keyword_alias) = "英雄礼包获取" ];
}

// enum RES_SEX_TYPE
// {
//     RES_SEX_MALE = 0 [(resdata.keyword_alias) = "男性"];
//     RES_SEX_FEMALE = 1 [(resdata.keyword_alias) = "女性"];
// }

// COM_GAME_BIG_TYPE_THEME 历史战绩大主题 leegoxia
enum COM_GAME_BIG_TYPE_THEME {
    COM_GAME_BIG_TYPE_THEME_NULL         = 0 [ (resdata.keyword_alias) = "未定义玩法" ];
    COM_GAME_BIG_TYPE_THEME_KINGS_WARSIM = 1 [ (resdata.keyword_alias) = "匹配赛" ];
    COM_GAME_BIG_TYPE_THEME_CHESS        = 2 [ (resdata.keyword_alias) = "排位赛" ];
    COM_GAME_BIG_TYPE_THEME_TUTORIAL     = 5 [ (resdata.keyword_alias) = "训练营" ];
    COM_GAME_BIG_TYPE_THEME_CUSTOM       = 6 [ (resdata.keyword_alias) = "自定义" ];
    COM_GAME_BIG_TYPE_THEME_RECRUIT      = 7 [ (resdata.keyword_alias) = "新手战" ];
}

enum COM_GAME_TYPE {
    option (cltgen.gamecore_enum) = true;
    COM_GAME_TYPE_NULL            = 0 [ (resdata.keyword_alias) = "未定义玩法" ];

    // 1-99是排位模式
    COM_GAME_TYPE_RANK_BEGIN        = 1;
    COM_GAME_TYPE_RANK_CHESS        = 2 [ (resdata.keyword_alias) = "排位自走棋" ];
    COM_GAME_TYPE_RANK_KINGS_WARSIM = 3 [ (resdata.keyword_alias) = "排位王者模拟战" ];
    COM_GAME_TYPE_RANK_LAST         = 4;
    COM_GAME_TYPE_RANK_END          = 98; // 排位模式结束

    // 100-200是娱乐模式
    COM_GAME_TYPE_CASUAL_BEGIN            = 99; // 休闲模式开始（casual=休闲）
    COM_GAME_TYPE_MATCH_CHESS             = 100 [ (resdata.keyword_alias) = "新赛季匹配自走棋" ];
    COM_GAME_TYPE_MATCH_KINGS_WARSIM      = 101 [ (resdata.keyword_alias) = "匹配王者模拟战" ];
    COM_GAME_TYPE_TUTORIAL                = 102 [ (resdata.keyword_alias) = "新手引导" ];
    COM_GAME_TYPE_LAST_SEASON_MATCH_CHESS = 103 [ (resdata.keyword_alias) = "上赛季匹配自走棋" ];
    COM_GAME_TYPE_AREA_ROOM_CHESS         = 104 [ (resdata.keyword_alias) = "密码房自走棋" ];
    COM_GAME_TYPE_AREA_ROOM_KINGS_WARSIM  = 105 [ (resdata.keyword_alias) = "密码房王者模拟战" ];
    COM_GAME_TYPE_MATCH_CAMP              = 106 [ (resdata.keyword_alias) = "训练营" ];
    COM_GAME_TYPE_MATCH_HUNDREDWAR        = 107 [ (resdata.keyword_alias) = "匹配百人大战" ];
    COM_GAME_TYPE_RECRUIT                 = 108 [ (resdata.keyword_alias) = "新手战" ];
    COM_GAME_TYPE_CASUAL_LAST             = 109;
    COM_GAME_TYPE_CASUAL_END              = 198; // 休闲模式结束（casual=休闲）
}

enum COM_GAMETYPE_GROUP {
    GAMETYPE_GROUP_NULL     = 0;
    GAMETYPE_GROUP_CLASSIC  = 1 [ (resdata.keyword_alias) = "经典模式" ];
    GAMETYPE_GROUP_STANDARD = 2 [ (resdata.keyword_alias) = "标准模式" ];
    GAMETYPE_GROUP_MAX      = 3;
}

enum EPvpRankType {
    PVP_RANK_TYPE_NONE     = 0 [ (resdata.keyword_alias) = "无效值" ];
    PVP_RANK_TYPE_BRONZE   = 1 [ (resdata.keyword_alias) = "倔强青铜" ];
    PVP_RANK_TYPE_SILVER   = 2 [ (resdata.keyword_alias) = "秩序白银" ];
    PVP_RANK_TYPE_GOLD     = 3 [ (resdata.keyword_alias) = "荣耀黄金" ];
    PVP_RANK_TYPE_PLATINUM = 4 [ (resdata.keyword_alias) = "尊贵铂金" ];
    PVP_RANK_TYPE_DIAMOND  = 5 [ (resdata.keyword_alias) = "永恒钻石" ];
    PVP_RANK_TYPE_STARYAO  = 6 [ (resdata.keyword_alias) = "至尊星耀" ];
    PVP_RANK_TYPE_KING     = 7 [ (resdata.keyword_alias) = "最强王者" ];
    PVP_RANK_TYPE_MAX      = 8 [ (resdata.keyword_alias) = "最大值" ];
}

enum RES_SYSTEM_UI_TYPE {
    RES_SYSTEM_UI_TYPE_NONE           = 0 [ (resdata.keyword_alias) = "未定义系统" ];
    RES_SYSTEM_UI_TYPE_QISHOU         = 1 [ (resdata.keyword_alias) = "棋手" ];
    RES_SYSTEM_UI_TYPE_GERENXINXI     = 2 [ (resdata.keyword_alias) = "个人信息" ];
    RES_SYSTEM_UI_TYPE_SHOP           = 3 [ (resdata.keyword_alias) = "商城" ];
    RES_SYSTEM_UI_TYPE_DATING         = 4 [ (resdata.keyword_alias) = "大厅" ];
    RES_SYSTEM_UI_TYPE_MatchWaiting   = 5 [ (resdata.keyword_alias) = "匹配等待" ];
    RES_SYSTEM_UI_TYPE_Loading        = 6 [ (resdata.keyword_alias) = "加载等待" ];
    RES_SYSTEM_UI_TYPE_ChooseLord     = 7 [ (resdata.keyword_alias) = "选领主" ];
    RES_SYSTEM_UI_TYPE_Data           = 8 [ (resdata.keyword_alias) = "结算" ];
    RES_SYSTEM_UI_TYPE_LORDGET        = 9 [ (resdata.keyword_alias) = "棋手获取展示" ];
    RES_SYSTEM_UI_TYPE_HERO_COLLECT   = 10 [ (resdata.keyword_alias) = "英雄收集" ];
    RES_SYSTEM_UI_TYPE_SetName        = 11 [ (resdata.keyword_alias) = "首次登陆修改名字" ];
    RES_SYSTEM_UI_TYPE_NoviceGuidance = 12 [ (resdata.keyword_alias) = "新手教程" ];
    RES_SYSTEM_UI_TYPE_Personal       = 13 [ (resdata.keyword_alias) = "个性化装扮" ];
    RES_SYSTEM_UI_TYPE_CareerLord     = 14 [ (resdata.keyword_alias) = "个人信息棋手详情" ];
    RES_SYSTEM_UI_TYPE_GameplayCenter = 15 [ (resdata.keyword_alias) = "玩法中心" ];
    RES_SYSTEM_UI_TYPE_BattlePass     = 16 [ (resdata.keyword_alias) = "战令" ];
}

enum EPvpRankSettlementType {
    PVP_RANK_SETTLEMENT_TYPE_NONE = 0 [ (resdata.keyword_alias) = "无效值" ];
    PVP_RANK_TYPE_BRONZE1         = 1 [ (resdata.keyword_alias) = "倔强青铜I" ];
    PVP_RANK_TYPE_BRONZE2         = 2 [ (resdata.keyword_alias) = "倔强青铜II" ];
    PVP_RANK_TYPE_BRONZE3         = 3 [ (resdata.keyword_alias) = "倔强青铜III" ];
    PVP_RANK_TYPE_BRONZE4         = 4 [ (resdata.keyword_alias) = "倔强青铜IV" ];
    PVP_RANK_TYPE_BRONZE5         = 5 [ (resdata.keyword_alias) = "倔强青铜V" ];
    PVP_RANK_TYPE_SILVER1         = 6 [ (resdata.keyword_alias) = "秩序白银I" ];
    PVP_RANK_TYPE_SILVER2         = 7 [ (resdata.keyword_alias) = "秩序白银II" ];
    PVP_RANK_TYPE_SILVER3         = 8 [ (resdata.keyword_alias) = "秩序白银III" ];
    PVP_RANK_TYPE_SILVER4         = 9 [ (resdata.keyword_alias) = "秩序白银IV" ];
    PVP_RANK_TYPE_SILVER5         = 10 [ (resdata.keyword_alias) = "秩序白银V" ];
    PVP_RANK_TYPE_GOLD1           = 11 [ (resdata.keyword_alias) = "荣耀黄金I" ];
    PVP_RANK_TYPE_GOLD2           = 12 [ (resdata.keyword_alias) = "荣耀黄金II" ];
    PVP_RANK_TYPE_GOLD3           = 13 [ (resdata.keyword_alias) = "荣耀黄金III" ];
    PVP_RANK_TYPE_GOLD4           = 14 [ (resdata.keyword_alias) = "荣耀黄金IV" ];
    PVP_RANK_TYPE_GOLD5           = 15 [ (resdata.keyword_alias) = "荣耀黄金V" ];
    PVP_RANK_TYPE_PLATINUM1       = 16 [ (resdata.keyword_alias) = "尊贵铂金I" ];
    PVP_RANK_TYPE_PLATINUM2       = 17 [ (resdata.keyword_alias) = "尊贵铂金II" ];
    PVP_RANK_TYPE_PLATINUM3       = 18 [ (resdata.keyword_alias) = "尊贵铂金III" ];
    PVP_RANK_TYPE_PLATINUM4       = 19 [ (resdata.keyword_alias) = "尊贵铂金IV" ];
    PVP_RANK_TYPE_PLATINUM5       = 20 [ (resdata.keyword_alias) = "尊贵铂金V" ];
    PVP_RANK_TYPE_DIAMOND1        = 21 [ (resdata.keyword_alias) = "永恒钻石I" ];
    PVP_RANK_TYPE_DIAMOND2        = 22 [ (resdata.keyword_alias) = "永恒钻石II" ];
    PVP_RANK_TYPE_DIAMOND3        = 23 [ (resdata.keyword_alias) = "永恒钻石III" ];
    PVP_RANK_TYPE_DIAMOND4        = 24 [ (resdata.keyword_alias) = "永恒钻石IV" ];
    PVP_RANK_TYPE_DIAMOND5        = 25 [ (resdata.keyword_alias) = "永恒钻石V" ];
    PVP_RANK_TYPE_STARYAO1        = 26 [ (resdata.keyword_alias) = "至尊星耀I" ];
    PVP_RANK_TYPE_STARYAO2        = 27 [ (resdata.keyword_alias) = "至尊星耀II" ];
    PVP_RANK_TYPE_STARYAO3        = 28 [ (resdata.keyword_alias) = "至尊星耀III" ];
    PVP_RANK_TYPE_STARYAO4        = 29 [ (resdata.keyword_alias) = "至尊星耀IV" ];
    PVP_RANK_TYPE_STARYAO5        = 30 [ (resdata.keyword_alias) = "至尊星耀V" ];
    PVP_RANK_TYPE_MostKing        = 31 [ (resdata.keyword_alias) = "最强王者" ];
    PVP_RANK_TYPE_HonorMostKing   = 32 [ (resdata.keyword_alias) = "荣耀王者" ];
}

enum ESeasonRankAwardType {
    RES_SEASON_RANK_AWARD_TYPE_NONE = 0 [ (resdata.keyword_alias) = "无效值" ];
    RES_SEASON_RANK_AWARD_WEEK      = 1 [ (resdata.keyword_alias) = "赛季段位周奖励" ];
    RES_SEASON_RANK_AWARD_WEEK_PLUS = 2 [ (resdata.keyword_alias) = "赛季段位周补充奖励" ];
    RES_SEASON_RANK_AWARD_SETTLE    = 3 [ (resdata.keyword_alias) = "赛季段位结算奖励" ];
}

enum EEloSegmentProtectType {
    RES_ELO_SEGMENT_PROTECT_NONE         = 0 [ (resdata.keyword_alias) = "不保护ELO扣分" ];
    RES_ELO_SEGMENT_PROTECT_SEGMENT      = 1 [ (resdata.keyword_alias) = "保护不会跌落当前段位" ];
    RES_ELO_SEGMENT_PROTECT_NO_DEDUCTION = 2 [ (resdata.keyword_alias) = "完全不扣分" ];
}

enum ConstSeasonType {
    ConstSeasonType_NONE = 0 [ (resdata.keyword_alias) = "无效值" ];
    ConstSeasonType_INIT = 1 [ (resdata.keyword_alias) = "初始段位" ];
}

enum COM_GAMEITEM_TYPE {
    COM_GAMEITEM_TYPE__reserved__ = 0;
    COM_GAMEITEM_DROP             = 1 [ (resdata.keyword_alias) = "掉落物" ];
    COM_GAMEITEM_MONEY            = 2 [ (resdata.keyword_alias) = "货币" ];
    COM_GAMEITEM_PROP             = 3 [ (resdata.keyword_alias) = "道具" ];
    COM_GAMEITEM_HEADIMG          = 4 [ (resdata.keyword_alias) = "头像框" ];
    COM_GAMEITEM_HEAD             = 5 [ (resdata.keyword_alias) = "头像" ];
    COM_GAMEITEM_TOKENEXP         = 6 [ (resdata.keyword_alias) = "战令经验" ];
    COM_GAMEITEM_LORDSKIN         = 7 [ (resdata.keyword_alias) = "领主皮肤" ];
    COM_GAMEITEM_ACHIEVEEXP       = 9 [ (resdata.keyword_alias) = "成就经验" ];
    COM_GAMEITEM_LORD             = 10 [ (resdata.keyword_alias) = "领主" ];
    COM_GAMEITEM_ACNTEXP          = 11 [ (resdata.keyword_alias) = "账号经验" ];
    COM_GAMEITEM_CHESSBOARD       = 12 [ (resdata.keyword_alias) = "棋盘" ];
    COM_GAMEITEM_COUPONS          = 14 [ (resdata.keyword_alias) = "点券" ];
    COM_GAMEITEM_EMOJI            = 15 [ (resdata.keyword_alias) = "表情" ];
    COM_GAMEITEM_SPECIALEFT       = 16 [ (resdata.keyword_alias) = "特效" ];
    COM_GAMEITEM_CHESSBOARDPART   = 17 [ (resdata.keyword_alias) = "棋盘部件" ];
    COM_GAMEITEM_CHESSDECORATE    = 18 [ (resdata.keyword_alias) = "英雄配饰" ];
    COM_GAMEITEM_LORDPROFICIENCY  = 19 [ (resdata.keyword_alias) = "棋手熟练度" ];
    COM_GAMEITEM_RECRUITSCORE     = 20 [ (resdata.keyword_alias) = "新手战积分" ];
}

enum COM_GAMEMONEY_SUBTYPE {
    COM_GAMEMONEY_TYPE_INVALID      = 0;
    COM_GAMEMONEY_TYPE_DIAMOND      = 1 [ (resdata.keyword_alias) = "钻石" ];
    COM_GAMEMONEY_TYPE_COUNTERFEIT  = 2 [ (resdata.keyword_alias) = "假点券" ];
    COM_GAMEMONEY_TYPE_SEASONCOIN   = 3 [ (resdata.keyword_alias) = "赛季币" ];
    COM_GAMEMONEY_TYPE_LORDFRAG     = 4 [ (resdata.keyword_alias) = "棋手碎片" ];
    COM_GAMEMONEY_TYPE_SKINCOIN     = 5 [ (resdata.keyword_alias) = "皮肤碎片" ];
    COM_GAMEMONEY_TYPE_TOKENEXP     = 7 [ (resdata.keyword_alias) = "战令经验" ];
    COM_GAMEMONEY_TYPE_EXCHANGECOIN = 8 [ (resdata.keyword_alias) = "万象币" ]; // 兑换币
    COM_GAMEMONEY_TYPE_CHESSDECORATEFRAG = 9 [ (resdata.keyword_alias) = "配饰碎片" ]; // 棋子配饰碎片 
    COM_GAMEMONEY_TYPE_MAX          = 10;
}

enum COM_CHESSDECORATE_SUBTYPE {
    COM_CHESSDECORATE_TYPE_INVALID          = 0;
    COM_CHESSDECORATE_TYPE_FRAME            = 1 [ (resdata.keyword_alias) = "卡框" ];
    COM_CHESSDECORATE_TYPE_VOICE            = 2 [ (resdata.keyword_alias) = "语音" ];
    COM_CHESSDECORATE_TYPE_CARDEFFECT       = 3 [ (resdata.keyword_alias) = "卡面特效" ];
    COM_CHESSDECORATE_TYPE_CARDANIMATION    = 4 [ (resdata.keyword_alias) = "卡面动画" ];
    COM_CHESSDECORATE_TYPE_KILLEFFECT       = 5 [ (resdata.keyword_alias) = "战场击杀播报" ];
    COM_CHESSDECORATE_TYPE_LENGENDARYEFFECT = 6 [ (resdata.keyword_alias) = "战场超神播报" ];
}

enum Project8InBattleHeroAdditionNumType {
    option (cltgen.gamecore_enum) = true;
    option (cltgen.csharp_enum)   = true;

    // 定义这个枚举应该保持连续
    Project8InBattleHeroAdditionNumType_Default     = 0 [ (resdata.keyword_alias) = "常规" ];
    Project8InBattleHeroAdditionNumType_LordSkill   = 1 [ (resdata.keyword_alias) = "棋手技能" ];
    Project8InBattleHeroAdditionNumType_Equip       = 2 [ (resdata.keyword_alias) = "获得装备" ];
    Project8InBattleHeroAdditionNumType_Practice    = 3 [ (resdata.keyword_alias) = "训练营" ];
    Project8InBattleHeroAdditionNumType_BalanceTest = 4 [ (resdata.keyword_alias) = "平衡性测试" ];
}

enum EMailID {
    EMailID__reserved__          = 0;
    ETestMailID                  = 1 [ (resdata.keyword_alias) = "测试邮件ID" ];
    ERemainingAwardMailID        = 2 [ (resdata.keyword_alias) = "补偿奖励邮件ID" ];
    EPropExpireAutoSaleMailID    = 3 [ (resdata.keyword_alias) = "道具过期自动出售邮件ID" ];
    EPropExpireSeasonAwardMailID = 4 [ (resdata.keyword_alias) = "赛季奖励补发邮件ID" ];
    EExpireTokenAwardMailID      = 6 [ (resdata.keyword_alias) = "战令奖励补发邮件ID" ];
    EExpireChessTaskAwardMailID  = 7 [ (resdata.keyword_alias) = "英雄任务奖励补发邮件ID" ];
    EInSeasonRankPrizeBronze     = 8 [ (resdata.keyword_alias) = "赛季中段位奖励倔强青铜ID" ];
    EInSeasonRankPrizeSilver     = 9 [ (resdata.keyword_alias) = "赛季中段位奖励秩序白银ID" ];
    EInSeasonRankPrizeGold       = 10 [ (resdata.keyword_alias) = "赛季中段位奖励荣耀黄金ID" ];
    EInSeasonRankPrizePlatinum   = 11 [ (resdata.keyword_alias) = "赛季中段位奖励尊贵铂金ID" ];
    EInSeasonRankPrizeDiamond    = 12 [ (resdata.keyword_alias) = "赛季中段位奖励永恒钻石ID" ];
    EInSeasonRankPrizeStaryao    = 13 [ (resdata.keyword_alias) = "赛季中段位奖励至尊星耀ID" ];
    EInSeasonRankPrizeKing       = 14 [ (resdata.keyword_alias) = "赛季中段位奖励最强王者ID" ];
    EWXGameCenterLogin           = 15 [ (resdata.keyword_alias) = "微信游戏中心登录奖励ID" ];
    EQQGameCenterLogin           = 16 [ (resdata.keyword_alias) = "QQ游戏中心登录奖励ID" ];
}

enum ERhythmRating {
    RHYTHM_MISS     = 0 [ (resdata.keyword_alias) = "MISS" ];
    RHYTHM_COOL     = 1 [ (resdata.keyword_alias) = "COOL" ];
    RHYTHM_GOOD     = 2 [ (resdata.keyword_alias) = "GOOD" ];
    RHYTHM_NICE     = 3 [ (resdata.keyword_alias) = "NICE" ];
    RHYTHM_PERFECT  = 4 [ (resdata.keyword_alias) = "PERFECT" ];
    RHYTHM_SPERFECT = 5 [ (resdata.keyword_alias) = "SPERFECT" ];
    RHYTHM_OPCOUNT  = 6; // ERhythmRating类型总数
}

enum ERhythmPVPMode {
    RHYTHM_PVPMODE_RANK = 0 [ (resdata.keyword_alias) = "排位赛" ];
    RHYTHM_PVPMODE_FUN  = 1 [ (resdata.keyword_alias) = "娱乐赛" ];
}

enum EGender {
    EGender__reserved__ = 0;
    // EGender_Male = 1[(resdata.keyword_alias) = "男性"];
    // EGender_Female = 2[(resdata.keyword_alias) = "女性"];
    EGender_Male   = 1; // 这里的keyword_alias局外没有在用，先注释掉，否则和局内冲突
    EGender_Female = 2;
}

enum EGameRankType {
    RANKTYPE_TOP  = 0 [ (resdata.keyword_alias) = "前N名" ];
    RANKTYPE_END  = 1 [ (resdata.keyword_alias) = "后N名" ];
    RANKTYPE_IN   = 2 [ (resdata.keyword_alias) = "第N名" ];
    RANKTYPE_LAST = 3;
}

enum ECondType {
    COND_TYPE_STATEFUL_BEGIN                    = 0;
    COND_TYPE_STATEFUL_COSTMONEY                = 2 [ (resdata.keyword_alias) = "有状态条件_消耗货币" ];
    COND_TYPE_STATEFUL_FINISHRANKCHESS          = 3 [ (resdata.keyword_alias) = "有状态条件_完成自走棋比赛" ];
    COND_TYPE_STATEFUL_RANKCHESSTOPN            = 4 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛前N名" ];
    COND_TYPE_STATEFUL_SEASONGAMETYPETOPN       = 5 [ (resdata.keyword_alias) = "有状态条件_完成赛季自走棋比赛前N名" ];
    COND_TYPE_STATEFUL_RANKCHESSRANK            = 6 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛名次" ];
    COND_TYPE_STATEFUL_ACNTLOGIN                = 8 [ (resdata.keyword_alias) = "有状态条件_玩家登录累积" ];
    COND_TYPE_STATEFUL_ADDAWARD                 = 9 [ (resdata.keyword_alias) = "有状态条件_获取奖励" ];
    COND_TYPE_STATEFUL_ADDFRIEND                = 10 [ (resdata.keyword_alias) = "有状态条件_发送好友请求" ];
    COND_TYPE_STATEFUL_RANKWINROUND             = 11 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛胜利回合数" ];
    COND_TYPE_STATEFUL_RANKUPGRADECNT           = 13 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛升级次数" ];
    COND_TYPE_STATEFUL_RANKSETTLELEVEL          = 14 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛结算等级" ];
    COND_TYPE_STATEFUL_REFRESHSHOP              = 15 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛商店刷新数" ];
    COND_TYPE_STATEFUL_LORDDAMAGE               = 16 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛对方领主伤害总值" ];
    COND_TYPE_STATEFUL_RANKSKILLOUTCOIN         = 17 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛技能消耗金币数" ];
    COND_TYPE_STATEFUL_RANKSKILLINCOIN          = 18 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛技能获得金币数" ];
    COND_TYPE_STATEFUL_TOKENEQUIPGAIN           = 19 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛获得转职令牌数量" ];
    COND_TYPE_STATEFUL_TOKENEQUIPGAINSUM        = 20 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛获得转职令牌数量累计" ];
    COND_TYPE_STATEFUL_FINALEQUIPGAIN           = 21 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛获得成品装备数量" ];
    COND_TYPE_STATEFUL_ROUNDREFRESHSHOPMAX      = 23 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛单回合最大商店刷新数" ];
    COND_TYPE_STATEFUL_RANKTOTALCONSUMECOIN     = 24 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛总消耗金币数" ];
    COND_TYPE_STATEFUL_RANKUPGRADELVLCOIN       = 25 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛升级消耗金币数" ];
    COND_TYPE_STATEFUL_RANKREFRESHCOIN          = 26 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛刷新消耗金币数" ];
    COND_TYPE_STATEFUL_RANKHIGHESTCOIN          = 27 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛最高持有金币数" ];
    COND_TYPE_STATEFUL_RANKKILLENEMYCOIN        = 28 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛终结连胜获得金币数" ];
    COND_TYPE_STATEFUL_RANKINTERESTCOIN         = 29 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛利息获得金币数" ];
    COND_TYPE_STATEFUL_RANKSTREAKWINCOIN        = 30 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛连胜获得金币数" ];
    COND_TYPE_STATEFUL_RANKSTREAKLOSECOIN       = 31 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛连败获得金币数" ];
    COND_TYPE_STATEFUL_RANKLORDAWARDCOIN        = 32 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛领主奖励金币数" ];
    COND_TYPE_STATEFUL_RANKSETTLEFETTERCNT      = 33 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛结算羁绊数量达成" ];
    COND_TYPE_STATEFUL_RANKSETTLEFETTERLVL      = 34 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛结算羁绊最高阶数" ];
    COND_TYPE_STATEFUL_RANKSETTLEFETTERQUALITY  = 35 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛结算羁绊品质达成" ];
    COND_TYPE_STATEFUL_RANKROUNDFETTERCNT       = 36 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛首回合羁绊数量达成" ];
    COND_TYPE_STATEFUL_RANKROUNDFETTERLVL       = 37 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛首回合羁绊最高阶数" ];
    COND_TYPE_STATEFUL_RANKROUNDFETTERQUALITY   = 38 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛首回合羁绊品质达成" ];
    COND_TYPE_STATEFUL_RANKBATTLEFETTERCNT      = 39 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛过程羁绊数量达成" ];
    COND_TYPE_STATEFUL_RANKBATTLEFETTERLVL      = 40 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛过程羁绊最高阶数" ];
    COND_TYPE_STATEFUL_RANKBATTLEFETTERQUALITY  = 41 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛过程羁绊品质达成" ];
    COND_TYPE_STATEFUL_REFRESHSHOPSUM           = 42 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛商店刷新数累计" ];
    COND_TYPE_STATEFUL_LORDDAMAGESUM            = 43 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛对方领主伤害总值累计" ];
    COND_TYPE_STATEFUL_RANKTOTALCONSUMECOINSUM  = 45 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛总消耗金币数累计" ];
    COND_TYPE_STATEFUL_RANKREFRESHCOINSUM       = 46 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛刷新消耗金币数累计" ];
    COND_TYPE_STATEFUL_RANKWINROUNDSUM          = 47 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛胜利回合数累计" ];
    COND_TYPE_STATEFUL_RANKTOTALROUNDSUM        = 48 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛参与回合数累计" ];
    COND_TYPE_STATEFUL_RANKUPGRADECNTSUM        = 49 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛升级次数累计" ];
    COND_TYPE_STATEFUL_FINALEQUIPGAINSUM        = 50 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛获得成品装备数量累计" ];
    COND_TYPE_STATEFUL_RANKUPGRADELVLCOINSUM    = 51 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛升级消耗金币数累计" ];
    COND_TYPE_STATEFUL_RANKSTREAKWINCOINSUM     = 52 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛连胜获得金币数累计" ];
    COND_TYPE_STATEFUL_RANKSTREAKLOSECOINSUM    = 53 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛连败获得金币数累计" ];
    COND_TYPE_STATEFUL_RANKLORDAWARDCOINSUM     = 54 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛领主奖励金币数累计" ];
    COND_TYPE_STATEFUL_RANKLORDSKILLCNT         = 55 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛领主技能次数" ];
    COND_TYPE_STATEFUL_RANKPLAYERLASTDAMAGE     = 56 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛结算回合对敌方领主的伤害" ];
    COND_TYPE_STATEFUL_RANKAUCTIONCOIN          = 57 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛拍卖消耗金币数量" ];
    COND_TYPE_STATEFUL_RANKSINGLEAUCTIONCOIN    = 58 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛一次拍卖中消耗的金币数量" ];
    COND_TYPE_STATEFUL_RANKCONTINUOUSWINROUND   = 59 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛最大连胜次数" ];
    COND_TYPE_STATEFUL_RANKCONTINUOUSLOSEROUND  = 60 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛最大连败次数" ];
    COND_TYPE_STATEFUL_RANKAUCTIONCOUNT         = 61 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛参与拍卖次数" ];
    COND_TYPE_STATEFUL_RANKAUCTIONRANDOMCOUNT   = 62 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛流拍获得道具次数" ];
    COND_TYPE_STATEFUL_RANKAUCTIONJOINCOUNT     = 63 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛出了价的拍卖次数" ];
    COND_TYPE_STATEFUL_RANKAUCTIONSUCCCOUNT     = 64 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛成功竞拍次数" ];
    COND_TYPE_STATEFUL_RANKCHGCARDS             = 65 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛换牌次数" ];
    COND_TYPE_STATEFUL_RANKCHGCARDSBETTERHERO   = 66 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛棋子升值的换牌次数" ];
    COND_TYPE_STATEFUL_RANKALIVEROUNDCOUNT      = 67 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛参与回合数" ];
    COND_TYPE_STATEFUL_CHESS_TOTALHURT          = 68 [ (resdata.keyword_alias) = "有状态条件_棋子累计伤害量" ];
    COND_TYPE_STATEFUL_CHESS_TOTALHURTED        = 69 [ (resdata.keyword_alias) = "有状态条件_棋子累计承伤" ];
    COND_TYPE_STATEFUL_CHESS_TOTALRECOVER       = 70 [ (resdata.keyword_alias) = "有状态条件_棋子累计恢复" ];
    COND_TYPE_STATEFUL_SEAONRANKTOPN            = 71 [ (resdata.keyword_alias) = "有状态条件_赛季排位赛前N名" ];
    COND_TYPE_STATEFUL_CHESS_3STARCOUNT         = 72 [ (resdata.keyword_alias) = "有状态条件_棋子合成3星次数" ];
    COND_TYPE_STATEFUL_CHESS_DEFEATCOUNT        = 73 [ (resdata.keyword_alias) = "有状态条件_棋子击败次数" ];
    COND_TYPE_STATEFUL_CHESS_MAXHURT            = 74 [ (resdata.keyword_alias) = "有状态条件_棋子最高伤害量" ];
    COND_TYPE_STATEFUL_CHESS_MAXHURTED          = 75 [ (resdata.keyword_alias) = "有状态条件_棋子最高承伤" ];
    COND_TYPE_STATEFUL_CHESS_MAXRECOVER         = 76 [ (resdata.keyword_alias) = "有状态条件_棋子最高恢复" ];
    COND_TYPE_STATEFUL_CHESS_BATTLECOUNT        = 77 [ (resdata.keyword_alias) = "有状态条件_棋子出场次数" ];
    COND_TYPE_STATEFUL_BATTLE_FETTERRANK        = 78 [ (resdata.keyword_alias) = "有状态条件_战斗结算棋子羁绊获得排名" ];
    COND_TYPE_STATEFUL_BATTLE_QUALITYRANK       = 79 [ (resdata.keyword_alias) = "有状态条件_战斗结算棋子品质获得排名" ];
    COND_TYPE_STATEFUL_BATTLE_STARRANK          = 80 [ (resdata.keyword_alias) = "有状态条件_战斗结算棋子星级获得排名" ];
    COND_TYPE_STATEFUL_BATTLE_FETTERCNT         = 81 [ (resdata.keyword_alias) = "有状态条件_战斗结算棋子羁绊数量" ];
    COND_TYPE_STATEFUL_BATTLE_MULTICHESS_WARCNT = 82 [ (resdata.keyword_alias) = "有状态条件_战斗回合多棋子上场回合数" ];
    COND_TYPE_STATEFUL_BATTLE_MULTICHESS_RANK   = 83 [ (resdata.keyword_alias) = "有状态条件_战斗结算多棋子获得排名" ];

    COND_TYPE_STATEFUL_BEATPLAYERCOUNT       = 85 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛淘汰对手数量" ];
    COND_TYPE_STATEFUL_RANKHEROEOSSAMESTAR   = 86 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛同星棋子获得排名" ];
    COND_TYPE_STATEFUL_LORDPROFICIENCYGET    = 87 [ (resdata.keyword_alias) = "有状态条件_棋手熟练度获得" ];
    COND_TYPE_STATEFUL_QUALITYSTARHEROGET    = 88 [ (resdata.keyword_alias) = "有状态条件_合成x费x星棋子次数" ];
    COND_TYPE_STATEFUL_CHESS_ROUNDDAMAGE     = 89 [ (resdata.keyword_alias) = "有状态条件_棋子单回合伤害达成" ];
    COND_TYPE_STATEFUL_CHESS_SETTLEQUALITY   = 90 [ (resdata.keyword_alias) = "有状态条件_结算棋子价值达成" ];
    COND_TYPE_STATEFUL_CHESSGROUPONSTAGE     = 91 [ (resdata.keyword_alias) = "有状态条件_棋子组出场次数" ];
    COND_TYPE_STATEFUL_ROUNDBUYEXP           = 92 [ (resdata.keyword_alias) = "有状态条件_单次购买经验" ];
    COND_TYPE_STATEFUL_ROUNDCOINGET          = 93 [ (resdata.keyword_alias) = "有状态条件_单回合金币收入" ];
    COND_TYPE_STATEFUL_CHESSGROUPDAMAGE      = 94 [ (resdata.keyword_alias) = "有状态条件_棋子组伤害累计" ];
    COND_TYPE_STATEFUL_CHESSGROUPHURTED      = 95 [ (resdata.keyword_alias) = "有状态条件_棋子组承伤累计" ];
    COND_TYPE_STATEFUL_SPECIFIEDLORDSEXIST   = 96 [ (resdata.keyword_alias) = "有状态条件_指定棋手同时在场" ];
    COND_TYPE_STATEFUL_CHESSHURTED_PERROUND  = 97 [ (resdata.keyword_alias) = "有状态条件_单回合棋子承受伤害值" ];
    COND_TYPE_STATEFUL_CHESSCONTROL_PERROUND = 98 [ (resdata.keyword_alias) = "有状态条件_单回合棋子控制敌人时间" ];
    COND_TYPE_STATEFUL_CHESSHEAL_PERROUND    = 99 [ (resdata.keyword_alias) = "有状态条件_单回合棋子治疗点值" ];
    COND_TYPE_STATEFUL_RANKTOTALGETCOIN      = 100 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛获得金币数" ];
    COND_TYPE_STATEFUL_TOPNINROUNDCNT        = 103 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛指定回合内获得前N名" ];
    COND_TYPE_STATEFUL_RANKDIFFERENTLORD     = 104 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛使用唯一棋手获得前N名" ];
    COND_TYPE_STATEFUL_RANKTOPNUSELORD       = 105 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛指定棋手获得前N名" ];
    COND_TYPE_STATEFUL_STARXHEROSETTLETOPN   = 106 [ (resdata.keyword_alias) = "有状态条件_全X星以上棋子前N名结算" ];
    COND_TYPE_STATEFUL_QUALITYHEROSETTLETOPN = 107 [ (resdata.keyword_alias) = "有状态条件_XY费棋子前N名结算" ];
    COND_TYPE_STATEFUL_QUALITYSTARHEROSETTLE = 108 [ (resdata.keyword_alias) = "有状态条件_指定X星Y费棋子数结算" ];

    COND_TYPE_STATEFUL_CHESSMAXHP              = 109 [ (resdata.keyword_alias) = "有状态条件_棋子生命值达成" ];
    COND_TYPE_STATEFUL_CHESSMAXAD              = 110 [ (resdata.keyword_alias) = "有状态条件_棋子攻击力达成" ];
    COND_TYPE_STATEFUL_CHESSMAXAP              = 111 [ (resdata.keyword_alias) = "有状态条件_棋子法术强度达成" ];
    COND_TYPE_STATEFUL_CHESSMAXCRITHIT         = 112 [ (resdata.keyword_alias) = "有状态条件_棋子暴击率达成" ];
    COND_TYPE_STATEFUL_CHESSGROUPHEALING       = 113 [ (resdata.keyword_alias) = "有状态条件_棋子组治疗量累计" ];
    COND_TYPE_STATEFUL_CHESSGROUPBEATCOUNT     = 114 [ (resdata.keyword_alias) = "有状态条件_棋子组击杀数累计" ];
    COND_TYPE_STATEFUL_ROUNDPLAYERDAMAGE       = 115 [ (resdata.keyword_alias) = "有状态条件_棋手回合伤害" ];
    COND_TYPE_STATEFUL_PLAYERDAMAGECOUNT       = 116 [ (resdata.keyword_alias) = "有状态条件_棋手伤害次数" ];
    COND_TYPE_STATEFUL_SPECIFIEDLORDDAMAGE     = 117 [ (resdata.keyword_alias) = "有状态条件_特定棋手造成伤害" ];
    COND_TYPE_STATEFUL_CHESSCONTROLENEMYTIME   = 118 [ (resdata.keyword_alias) = "有状态条件_棋子控制敌人时长" ];
    COND_TYPE_STATEFUL_USEPROPTOSPECIFIEDLORD  = 119 [ (resdata.keyword_alias) = "有状态条件_对特定棋手使用道具" ];
    COND_TYPE_STATEFUL_RANKUSEPROPCOUNT        = 121 [ (resdata.keyword_alias) = "有状态条件_比赛中使用道具数量" ];
    COND_TYPE_STATEFUL_RANKUSEQUICKMSGCOUNTSUM = 122 [ (resdata.keyword_alias) = "有状态条件_比赛中使用短语数量累计" ];
    COND_TYPE_STATEFUL_CHESSBEATCOUNT          = 123 [ (resdata.keyword_alias) = "有状态条件_棋子击杀数量达成" ];
    COND_TYPE_STATEFUL_CHESSROUNDBEATCOUNT     = 124 [ (resdata.keyword_alias) = "有状态条件_棋子单回合击杀数量达成" ];
    COND_TYPE_STATEFUL_SPECIFIEDLORDBATTLE     = 125 [ (resdata.keyword_alias) = "有状态条件_指定棋手获得战斗回合指定结果" ];
    COND_TYPE_STATEFUL_QUICKMSGCOUNT           = 126 [ (resdata.keyword_alias) = "有状态条件_发送短语数量" ];
    COND_TYPE_STATEFUL_RANKTALENTQUALITY       = 127 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛天赋品质激活" ];
    COND_TYPE_STATEFUL_RANKTALENTID            = 128 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛天赋ID激活" ];
    COND_TYPE_STATEFUL_LORDTALENTSETTLETOPN    = 129 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛指定棋手激活天赋前N名" ];
    COND_TYPE_STATEFUL_LORDTALENTSUM           = 130 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛激活棋手天赋累计" ];
    COND_TYPE_STATEFUL_TALENTQUALITYSUM        = 131 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛激活天赋品质累计" ];
    COND_TYPE_STATEFUL_BATTLEWITHGUILDMEM      = 132 [ (resdata.keyword_alias) = "有状态条件_与战队成员游戏累计" ];
    COND_TYPE_STATEFUL_MAXGUILDACTIVEVALUE     = 133 [ (resdata.keyword_alias) = "有状态条件_战队最大结算贡献值" ];
    COND_TYPE_STATEFUL_HEROEQUIPWEAR_INROUND   = 134 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛单回合棋子装备穿戴" ];
    COND_TYPE_STATEFUL_EXCHANGEHERO_INROUND    = 135 [ (resdata.keyword_alias) = "有状态条件_自走棋比赛单回合棋子兑换数量" ];
    COND_TYPE_STATEFUL_END                     = 136;

    COND_TYPE_STATELESS_BEGIN                         = 2000;
    COND_TYPE_STATELESS_TOTALBATTLECNT                = 2001 [ (resdata.keyword_alias) = "无状态条件_对局总数" ];
    COND_TYPE_STATELESS_DAILYLOGIN                    = 2002 [ (resdata.keyword_alias) = "无状态条件_每日登录" ];
    COND_TYPE_STATELESS_FIRSTWINERCNT                 = 2003 [ (resdata.keyword_alias) = "无状态条件_自走棋比赛首名对局总数" ];
    COND_TYPE_STATELESS_ACNTLEVEL                     = 2004 [ (resdata.keyword_alias) = "无状态条件_玩家等级达成" ];
    COND_TYPE_STATELESS_ACNTLOGIN                     = 2006 [ (resdata.keyword_alias) = "无状态条件_玩家登录达成" ];
    COND_TYPE_STATELESS_FRIENDHAVE                    = 2007 [ (resdata.keyword_alias) = "无状态条件_最大好友数量达成" ];
    COND_TYPE_STATELESS_LORDHAVE                      = 2008 [ (resdata.keyword_alias) = "无状态条件_领主数量达成" ];
    COND_TYPE_STATELESS_LORDSKINHAVE                  = 2009 [ (resdata.keyword_alias) = "无状态条件_领主皮肤数量达成" ];
    COND_TYPE_STATELESS_SEASONCOMPOSE3STAR            = 2010 [ (resdata.keyword_alias) = "无状态条件_赛季合成三星次数" ];
    COND_TYPE_STATELESS_SEASONAVGRANK                 = 2011 [ (resdata.keyword_alias) = "无状态条件_赛季对局平均排名" ];
    COND_TYPE_STATELESS_SEASONWINROUND                = 2012 [ (resdata.keyword_alias) = "无状态条件_赛季对局取胜回合数" ];
    COND_TYPE_STATELESS_SEASONCHESSBUY                = 2013 [ (resdata.keyword_alias) = "无状态条件_赛季对局棋子购买数量" ];
    COND_TYPE_STATELESS_SEASONLORDBATTLECNT           = 2014 [ (resdata.keyword_alias) = "无状态条件_赛季对局领主参战次数" ];
    COND_TYPE_STATELESS_SEASONLORDBATTLETOP4          = 2015 [ (resdata.keyword_alias) = "无状态条件_赛季对局领主前四参战次数" ];
    COND_TYPE_STATELESS_SEASONLORDBATTLETOP1          = 2016 [ (resdata.keyword_alias) = "无状态条件_赛季对局领主登顶参战次数" ];
    COND_TYPE_STATELESS_PROPHAVE                      = 2017 [ (resdata.keyword_alias) = "无状态条件_道具数量" ];
    COND_TYPE_STATELESS_COSTMONEY                     = 2018 [ (resdata.keyword_alias) = "无状态条件_货币消耗数量" ];
    COND_TYPE_STATELESS_FINISHRANKCHESS               = 2019 [ (resdata.keyword_alias) = "无状态条件_完成自走棋比赛" ];
    COND_TYPE_STATELESS_RANKCHESSTOPN                 = 2020 [ (resdata.keyword_alias) = "无状态条件_自走棋比赛前N名" ];
    COND_TYPE_STATELESS_SEASONGAMETYPETOPN            = 2021 [ (resdata.keyword_alias) = "无状态条件_完成赛季自走棋比赛前N名" ];
    COND_TYPE_STATELESS_RANKCHESSRANK                 = 2022 [ (resdata.keyword_alias) = "无状态条件_自走棋比赛名次" ];
    COND_TYPE_STATELESS_ADDAWARD                      = 2023 [ (resdata.keyword_alias) = "无状态条件_获取奖励" ];
    COND_TYPE_STATELESS_REGISTERDAY                   = 2024 [ (resdata.keyword_alias) = "无状态条件_玩家注册天数" ];
    COND_TYPE_STATELESS_TOKENAWARDLEVEL               = 2025 [ (resdata.keyword_alias) = "无状态条件_战令领奖等级达成" ];
    COND_TYPE_STATELESS_TOKENLEVEL                    = 2026 [ (resdata.keyword_alias) = "无状态条件_战令等级达成" ];
    COND_TYPE_STATELESS_CHESS_BATTLECOUNT             = 2027 [ (resdata.keyword_alias) = "无状态条件_棋子出场次数" ];
    COND_TYPE_STATELESS_CHESS_3STARCOUNT              = 2028 [ (resdata.keyword_alias) = "无状态条件_棋子合成3星次数" ];
    COND_TYPE_STATELESS_CHESS_DEFEATCOUNT             = 2029 [ (resdata.keyword_alias) = "无状态条件_棋子击败次数" ];
    COND_TYPE_STATELESS_CHESS_MAXHURT                 = 2030 [ (resdata.keyword_alias) = "无状态条件_棋子最高伤害量" ];
    COND_TYPE_STATELESS_CHESS_MAXHURTED               = 2031 [ (resdata.keyword_alias) = "无状态条件_棋子最高承伤" ];
    COND_TYPE_STATELESS_CHESS_MAXRECOVER              = 2032 [ (resdata.keyword_alias) = "无状态条件_棋子最高恢复" ];
    COND_TYPE_STATELESS_BEATPLAYERCOUNT               = 2035 [ (resdata.keyword_alias) = "无状态条件_累计淘汰棋手" ];
    COND_TYPE_STATELESS_SPECIFIEDLORDSGET             = 2036 [ (resdata.keyword_alias) = "无状态条件_获得特定棋手" ];
    COND_TYPE_STATELESS_NEWBIE_ABILITY                = 2037 [ (resdata.keyword_alias) = "无状态条件_新手状态选择" ];
    COND_TYPE_STATELESS_NEWBIE_FINISHGUIDE            = 2038 [ (resdata.keyword_alias) = "无状态条件_新手引导完成" ];
    COND_TYPE_STATELESS_NEWBIE_STEPTIME               = 2039 [ (resdata.keyword_alias) = "无状态条件_新手引导步骤计时" ];
    COND_TYPE_STATELESS_HISTORY_PVPRANKNO             = 2040 [ (resdata.keyword_alias) = "无状态条件_最近N局平均对局名次" ];
    COND_TYPE_STATELESS_HISTORY_WINRATE               = 2041 [ (resdata.keyword_alias) = "无状态条件_最近N局平均回合胜率万分比" ];
    COND_TYPE_STATELESS_HISTORY_INTEREST              = 2042 [ (resdata.keyword_alias) = "无状态条件_最近N局平均利息收入" ];
    COND_TYPE_STATELESS_HISTORY_STARHEROCNT           = 2043 [ (resdata.keyword_alias) = "无状态条件_最近N局结算平均星级棋子数" ];
    COND_TYPE_STATELESS_HISTORY_BATTLEPOSCHG          = 2044 [ (resdata.keyword_alias) = "无状态条件_最近N局战斗位置平均变更次数" ];
    COND_TYPE_STATELESS_HISTORY_LEVELUP               = 2045 [ (resdata.keyword_alias) = "无状态条件_最近N局点击升级平均次数" ];
    COND_TYPE_STATELESS_HISTORY_COINBIGGERAFTERLVLUP  = 2046 [ (resdata.keyword_alias) = "无状态条件_最近N局卡利息升级平均次数" ];
    COND_TYPE_STATELESS_HISTORY_COINSMALLERAFTERLVLUP = 2047 [ (resdata.keyword_alias) = "无状态条件_最近N局不卡利息升级平均次数" ];
    COND_TYPE_STATELESS_HISTORY_REFRESHCNT            = 2048 [ (resdata.keyword_alias) = "无状态条件_最近N局刷新平均次数" ];
    COND_TYPE_STATELESS_HISTORY_TRIGEXTRABUY          = 2049 [ (resdata.keyword_alias) = "无状态条件_最近N局临时购买平均次数" ];
    COND_TYPE_STATELESS_HISTORY_CARDBUY               = 2050 [ (resdata.keyword_alias) = "无状态条件_最近N局购买卡牌平均次数" ];
    COND_TYPE_STATELESS_HISTORY_CARDLOCK              = 2051 [ (resdata.keyword_alias) = "无状态条件_最近N局锁定卡牌平均次数" ];
    COND_TYPE_STATELESS_HISTORY_INTRODUCECLICK        = 2052 [ (resdata.keyword_alias) = "无状态条件_最近N局阵容推荐平均点击次数" ];
    COND_TYPE_STATELESS_HISTORY_TAKEOFFEQUIP          = 2053 [ (resdata.keyword_alias) = "无状态条件_最近N局拆卸装备平均次数" ];
    COND_TYPE_STATELESS_HISTORY_WATCHPLAYER           = 2054 [ (resdata.keyword_alias) = "无状态条件_最近N局平均观战次数" ];
    COND_TYPE_STATELESS_HISTORY_WATCHFORMATION        = 2055 [ (resdata.keyword_alias) = "无状态条件_最近N局显示阵容平均次数" ];
    COND_TYPE_STATELESS_HISTORY_AWARDCHOOSE           = 2056 [ (resdata.keyword_alias) = "无状态条件_最近N局奖励选择平均次数" ];
    COND_TYPE_STATELESS_HISTORY_WEAREQUIP             = 2057 [ (resdata.keyword_alias) = "无状态条件_最近N局装备穿戴平均次数" ];
    COND_TYPE_STATELESS_HISTORY_WEARSYNTEQUIP         = 2058 [ (resdata.keyword_alias) = "无状态条件_最近N局成装穿戴平均次数" ];
    COND_TYPE_STATELESS_TOTAL_BATTLECOINGET           = 2059 [ (resdata.keyword_alias) = "无状态条件_获得局内金币总数" ];
    COND_TYPE_STATELESS_TOTAL_BATTLEEXPGET            = 2060 [ (resdata.keyword_alias) = "无状态条件_获得局内经验总数" ];
    COND_TYPE_STATELESS_TOTAL_BATTLETOKENGET          = 2061 [ (resdata.keyword_alias) = "无状态条件_获得转职令牌总数" ];
    COND_TYPE_STATELESS_GOODSBUY                      = 2062 [ (resdata.keyword_alias) = "无状态条件_商城购买次数" ];
    COND_TYPE_STATELESS_QUALITYITEMHAVE               = 2063 [ (resdata.keyword_alias) = "无状态条件_品质物品拥有数量" ];
    COND_TYPE_STATELESS_TOTAL_HERODAMAGE              = 2064 [ (resdata.keyword_alias) = "无状态条件_造成棋子伤害总数" ];
    COND_TYPE_STATELESS_TOTAL_INTERESTCOIN            = 2065 [ (resdata.keyword_alias) = "无状态条件_获得利息金币总数" ];
    COND_TYPE_STATELESS_TOTAL_FINEQUIPCNT             = 2067 [ (resdata.keyword_alias) = "无状态条件_获得成品装备总数" ];
    COND_TYPE_STATELESS_RESGISTERCHANNEL              = 2068 [ (resdata.keyword_alias) = "无状态条件_玩家注册渠道" ];
    COND_TYPE_STATELESS_WORLDCHATCNT                  = 2069 [ (resdata.keyword_alias) = "无状态条件_世界频道聊天次数" ];
    COND_TYPE_STATELESS_SEASONMAXRANK                 = 2070 [ (resdata.keyword_alias) = "无状态条件_赛季最高段位达成" ];
    COND_TYPE_STATELESS_ACHIEVEEXP                    = 2071 [ (resdata.keyword_alias) = "无状态条件_成就点值达成" ];
    COND_TYPE_STATELESS_TOKENTASKFIN                  = 2072 [ (resdata.keyword_alias) = "无状态条件_完成战令任务" ];
    COND_TYPE_STATELESS_SCARCEITEMHAVE                = 2073 [ (resdata.keyword_alias) = "无状态条件_稀有物品拥有数量" ];
    COND_TYPE_STATELESS_CHESSBOARDHAVE                = 2074 [ (resdata.keyword_alias) = "无状态条件_棋盘拥有数量" ];
    COND_TYPE_STATELESS_PROFICIENCYLORDHAVE           = 2075 [ (resdata.keyword_alias) = "无状态条件_拥有热力值X级以上棋手" ];
    COND_TYPE_STATELESS_BATTLEWITHFRIEND              = 2076 [ (resdata.keyword_alias) = "无状态条件_与好友游戏" ];
    COND_TYPE_STATELESS_USELORDBATTLECNT              = 2077 [ (resdata.keyword_alias) = "无状态条件_指定棋手参与对局数量" ];
    COND_TYPE_STATELESS_RANKDIFFPRETWOSETS            = 2078 [ (resdata.keyword_alias) = "无状态条件_前两局对局排名差异" ];
    COND_TYPE_STATELESS_HERODRAWCOUNTSUM              = 2079 [ (resdata.keyword_alias) = "无状态条件_使用棋子奖券次数累计" ];
    COND_TYPE_STATELESS_USEACTIVESKILLCOUNT           = 2080 [ (resdata.keyword_alias) = "无状态条件_棋手主动技能次数" ];
    COND_TYPE_STATELESS_CHESSKILLCOUNTSUM             = 2081 [ (resdata.keyword_alias) = "无状态条件_击败棋子数量累计" ];
    COND_TYPE_STATELESS_PLAYERDAMAGESUM               = 2082 [ (resdata.keyword_alias) = "无状态条件_造成棋手伤害累计" ];
    COND_TYPE_STATELESS_RANKUSEPROPSUM                = 2083 [ (resdata.keyword_alias) = "无状态条件_比赛中使用道具数量累计" ];
    COND_TYPE_STATELESS_RANKUSEQUICKMSGSUM            = 2084 [ (resdata.keyword_alias) = "无状态条件_比赛中使用短语数量累计" ];
    COND_TYPE_STATELESS_POPULATIONATTAINSUM           = 2085 [ (resdata.keyword_alias) = "无状态条件_人口数量达成累计" ];
    COND_TYPE_STATELESS_GUILDACTIVEVALUESUM           = 2086 [ (resdata.keyword_alias) = "无状态条件_获得战队贡献度累计" ];
    COND_TYPE_STATELESS_JOINGUILD                     = 2087 [ (resdata.keyword_alias) = "无状态条件_加入战队" ];
    COND_TYPE_STATELESS_HISTORY_BATTLETIME            = 2088 [ (resdata.keyword_alias) = "无状态条件_最近N局对局发生时间范围" ];
    COND_TYPE_STATELESS_JOINGUILD_DAY                 = 2089 [ (resdata.keyword_alias) = "无状态条件_加入战队天数" ];
    COND_TYPE_STATELESS_CHESSDECORATENUM              = 2090 [ (resdata.keyword_alias) = "无状态条件_获得配饰数量" ];
    COND_TYPE_STATELESS_CHESSDECORATEFULL             = 2091 [ (resdata.keyword_alias) = "无状态条件_集满N阶配饰" ];
    COND_TYPE_STATELESS_LORD_PROFICIENCYLV            = 2092 [ (resdata.keyword_alias) = "无状态条件_棋手熟练度等级达成" ];
    COND_TYPE_STATELESS_ADD_SPECIALEFT                = 2093 [ (resdata.keyword_alias) = "无状态条件_获得特效" ];
    COND_TYPE_STATELESS_RECRUITSCORE                  = 2094 [ (resdata.keyword_alias) = "无状态条件_新手积分达成" ];
    COND_TYPE_STATELESS_RECRUITCLOSE                  = 2095 [ (resdata.keyword_alias) = "无状态条件_新手战关闭" ];
    COND_TYPE_STATELESS_NEWBIETASKFIN                 = 2096 [ (resdata.keyword_alias) = "无状态条件_新手活动通用任务完成数量" ];
    COND_TYPE_STATELESS_END                           = 2097;
}

enum RES_SYSTEM_TYPE {
    UNLOCK_BASE                 = 0 [(resdata.keyword_alias) = "基础系统"];
    UNLOCK_TOKEN                = 1 [(resdata.keyword_alias) = "战令系统"];
    UNLOCK_LORD                 = 2 [(resdata.keyword_alias) = "棋手系统"];
    UNLOCK_HERO                 = 3 [(resdata.keyword_alias) = "英雄系统"];
    UNLOCK_LINEUP               = 4 [(resdata.keyword_alias) = "阵容系统"];
    UNLOCK_WEAL                 = 5 [(resdata.keyword_alias) = "活动系统"];
    UNLOCK_RANK                 = 6 [(resdata.keyword_alias) = "排行榜系统"];
    UNLOCK_FRIEND               = 7 [(resdata.keyword_alias) = "好友系统"];
    UNLOCK_PACKAGE              = 8 [(resdata.keyword_alias) = "背包系统"];
    UNLOCK_CHAT                 = 9 [(resdata.keyword_alias) = "聊天系统"];
    UNLOCK_ACHIEVE              = 10 [(resdata.keyword_alias) = "成就系统"];
    UNLOCK_PERSONALISE          = 11 [(resdata.keyword_alias) = "个性化系统"];
    UNLOCK_COUPONS              = 12 [(resdata.keyword_alias) = "点券系统"];
    UNLOCK_MAIL                 = 13 [(resdata.keyword_alias) = "邮件系统"];
    UNLOCK_NEWBIE               = 14 [(resdata.keyword_alias) = "新手系统"];
    UNLOCK_PVP                  = 15 [(resdata.keyword_alias) = "对局系统"];
    UNLOCK_GM                   = 16 [(resdata.keyword_alias) = "GM系统"];
    UNLOCK_NAME                 = 17 [(resdata.keyword_alias) = "更名系统"];
    UNLOCK_SHOP                 = 18 [(resdata.keyword_alias) = "商城系统"];
    UNLOCK_HOMEPAGE             = 19 [(resdata.keyword_alias) = "个人主页"];
    UNLOCK_GUILD                = 20 [(resdata.keyword_alias) = "战队系统"];
    UNLOCK_SEASON_TRAVEL        = 21 [(resdata.keyword_alias) = "赛季之旅"];
    UNLOCK_SEASON_RANK_AWARD    = 22 [(resdata.keyword_alias) = "赛季奖励"];
    UNLOCK_GROWTH_PATH          = 23 [(resdata.keyword_alias) = "成长之路"];
    UNLOCK_IN_SEASON_RANK_AWARD = 24 [(resdata.keyword_alias) = "赛季中段位奖励"];
    UNLOCK_SHARE                = 25 [(resdata.keyword_alias) = "分享系统"];
    UNLOCK_RECRUIT              = 26 [ (resdata.keyword_alias) = "新手战" ];
    UNLOCK_LAST                 = 27;
}

enum COM_LIFE_TYPE {
    LIFETYPE_FOREVER = 0 [ (resdata.keyword_alias) = "永久" ];
    LIFETYPE_FIXTIME = 1 [ (resdata.keyword_alias) = "定时" ];
    LIFETYPE_ADDTIME = 2 [ (resdata.keyword_alias) = "可叠加" ];
    LIFETYPE_SEASON  = 3 [ (resdata.keyword_alias) = "赛季" ];
}

enum ETokenType {
    TOKEN_TYPE_NORMAL = 0 [ (resdata.keyword_alias) = "普通战令" ];
    TOKEN_TYPE_HIGH   = 1 [ (resdata.keyword_alias) = "高级战令" ];
    TOKEN_TYPE_DELUXE = 2 [ (resdata.keyword_alias) = "豪华战令" ];
}

enum HeroModeType {
    option (cltgen.gamecore_enum) = true;
    HeroModeType_None             = 0;
    HeroModeType_MulanQing        = 1 [ (resdata.keyword_alias) = "花木兰轻剑" ];
    HeroModeType_MulanZhong       = 2 [ (resdata.keyword_alias) = "花木兰重剑" ];
    HeroModeType_LightLixin       = 3 [ (resdata.keyword_alias) = "光信" ];
    HeroModeType_DarkLixin        = 4 [ (resdata.keyword_alias) = "暗信" ];
    HeroModeType_ZhuBaJieDefault  = 5 [ (resdata.keyword_alias) = "猪八戒初始" ];
    HeroModeType_ZhuBaJieTarget   = 6 [ (resdata.keyword_alias) = "猪八戒目标层" ];
    HeroModeType_SunWuKongDefault = 7 [ (resdata.keyword_alias) = "孙悟空初始" ];
    HeroModeType_SunWuKongTarget  = 8 [ (resdata.keyword_alias) = "孙悟空目标层" ];
}

enum RelativeModeType {
    option (cltgen.gamecore_enum)   = true;
    RelativeModeType_None           = 0;
    RelativeModeType_YuanSuShi_Huo  = 1 [ (resdata.keyword_alias) = "元素使火" ];
    RelativeModeType_YuanSuShi_Lei  = 2 [ (resdata.keyword_alias) = "元素使雷" ];
    RelativeModeType_YuanSuShi_Shui = 3 [ (resdata.keyword_alias) = "元素使水" ];
    RelativeModeType_YuanSuShi_Mu   = 4 [ (resdata.keyword_alias) = "元素使木" ];
}

enum RES_RELATIVE_ID {
    option (cltgen.gamecore_enum) = true;
    option (cltgen.csharp_enum)   = true;
    RES_RELATIVE_ID_NULL          = 0;

    //标准S1
    RES_RELATIVE_ID_STANDARD_S1_QUEEN       = 1 [ (resdata.keyword_alias) = "标准S1女帝" ];
    RES_RELATIVE_ID_STANDARD_S1_KING        = 2 [ (resdata.keyword_alias) = "标准S1君主" ];
    RES_RELATIVE_ID_STANDARD_S1_ELEMENT     = 3 [ (resdata.keyword_alias) = "标准S1元素使" ];
    RES_RELATIVE_ID_STANDARD_S1_MASTER      = 4 [ (resdata.keyword_alias) = "标准S1法师" ];
    RES_RELATIVE_ID_STANDARD_S1_HERCULES    = 5 [ (resdata.keyword_alias) = "标准S1力士" ];
    RES_RELATIVE_ID_STANDARD_S1_SOLDIER     = 6 [ (resdata.keyword_alias) = "标准S1战士" ];
    RES_RELATIVE_ID_STANDARD_S1_ASSASSIN    = 7 [ (resdata.keyword_alias) = "标准S1刺客" ];
    RES_RELATIVE_ID_STANDARD_S1_ARMORER     = 8 [ (resdata.keyword_alias) = "标准S1枪械师" ];
    RES_RELATIVE_ID_STANDARD_S1_ARCHER      = 9 [ (resdata.keyword_alias) = "标准S1射手" ];
    RES_RELATIVE_ID_STANDARD_S1_CUREAID     = 10 [ (resdata.keyword_alias) = "标准S1医师" ];
    RES_RELATIVE_ID_STANDARD_S1_SHIELD      = 11 [ (resdata.keyword_alias) = "标准S1盾卫" ];
    RES_RELATIVE_ID_STANDARD_S1_MECHANISM   = 12 [ (resdata.keyword_alias) = "标准S1机关" ];
    RES_RELATIVE_ID_STANDARD_S1_SWORDMAN    = 13 [ (resdata.keyword_alias) = "标准S1剑舞者" ];
    RES_RELATIVE_ID_STANDARD_S1_DANCINGGIRL = 14 [ (resdata.keyword_alias) = "标准S1舞姬" ];
    RES_RELATIVE_ID_STANDARD_S1_BOMBER      = 15 [ (resdata.keyword_alias) = "标准S1火药大师" ];
    RES_RELATIVE_ID_STANDARD_S1_YUANSU2     = 16 [ (resdata.keyword_alias) = "标准S1元素2" ];
    RES_RELATIVE_ID_STANDARD_S1_GUN         = 17 [ (resdata.keyword_alias) = "标准S1枪械师2" ];
    RES_RELATIVE_ID_STANDARD_S1_MARKSMAN    = 18 [ (resdata.keyword_alias) = "标准S1射手2" ];
    RES_RELATIVE_ID_STANDARD_S1_HEALER      = 19 [ (resdata.keyword_alias) = "标准S1医师2" ];
    RES_RELATIVE_ID_STANDARD_S1_SWORDER     = 20 [ (resdata.keyword_alias) = "标准S1剑舞者2" ];
    RES_RELATIVE_ID_STANDARD_S1_MAGIC       = 21 [ (resdata.keyword_alias) = "标准S1魔引者" ];
    RES_RELATIVE_ID_STANDARD_S1_RULER       = 22 [ (resdata.keyword_alias) = "标准S1统治者" ];
    RES_RELATIVE_ID_STANDARD_S1_DANCER      = 23 [ (resdata.keyword_alias) = "标准S1霓裳乐师" ];
    RES_RELATIVE_ID_STANDARD_S1_YINYANGJIA  = 24 [ (resdata.keyword_alias) = "标准S1阴阳家" ];
    RES_RELATIVE_ID_STANDARD_S1_CHANGCHENG  = 25 [ (resdata.keyword_alias) = "标准S1长城" ];
    RES_RELATIVE_ID_STANDARD_S1_CHANGAN     = 26 [ (resdata.keyword_alias) = "标准S1长安" ];
    RES_RELATIVE_ID_STANDARD_S1_XUANYONG    = 27 [ (resdata.keyword_alias) = "标准S1玄雍" ];
    RES_RELATIVE_ID_STANDARD_S1_HAIDU       = 28 [ (resdata.keyword_alias) = "标准S1海都" ];
    RES_RELATIVE_ID_STANDARD_S1_YAOTIAN     = 29 [ (resdata.keyword_alias) = "标准S1尧天" ];
    RES_RELATIVE_ID_STANDARD_S1_JIXIA       = 30 [ (resdata.keyword_alias) = "标准S1稷下" ];
    RES_RELATIVE_ID_STANDARD_S1_FUSANG      = 31 [ (resdata.keyword_alias) = "标准S1扶桑" ];
    RES_RELATIVE_ID_STANDARD_S1_MOZHONG     = 32 [ (resdata.keyword_alias) = "标准S1魔种" ];
    RES_RELATIVE_ID_STANDARD_S1_SANXIANZHE  = 33 [ (resdata.keyword_alias) = "标准S1三贤者" ];
    RES_RELATIVE_ID_STANDARD_S1_SIMEI       = 34 [ (resdata.keyword_alias) = "标准S1四美" ];
    RES_RELATIVE_ID_STANDARD_S1_XUANYONG2   = 35 [ (resdata.keyword_alias) = "标准S1玄雍2" ];
    RES_RELATIVE_ID_STANDARD_S1_YAOTIAN2    = 36 [ (resdata.keyword_alias) = "标准S1尧天2" ];
    RES_RELATIVE_ID_STANDARD_S1_CHANGAN2    = 37 [ (resdata.keyword_alias) = "标准S1长安2" ];
    RES_RELATIVE_ID_STANDARD_S1_TEAMOFSTAR  = 38 [ (resdata.keyword_alias) = "标准S1星之队" ];
    RES_RELATIVE_ID_STANDARD_S1_RILUO       = 39 [ (resdata.keyword_alias) = "标准S1日落圣殿" ];
    RES_RELATIVE_ID_STANDARD_S1_YUNMENGZE   = 40 [ (resdata.keyword_alias) = "标准S1云梦泽" ];
    RES_RELATIVE_ID_STANDARD_S1_SANFEN      = 41 [ (resdata.keyword_alias) = "标准S1三分之地" ];
    RES_RELATIVE_ID_STANDARD_S1_WUSHUANG    = 42 [ (resdata.keyword_alias) = "标准S1无双" ];

    //经典S1
    RES_RELATIVE_ID_CLASSIC_S1_1  = 101 [ (resdata.keyword_alias) = "经典S1坦克" ];
    RES_RELATIVE_ID_CLASSIC_S1_2  = 102 [ (resdata.keyword_alias) = "经典S1战士" ];
    RES_RELATIVE_ID_CLASSIC_S1_3  = 103 [ (resdata.keyword_alias) = "经典S1刺客" ];
    RES_RELATIVE_ID_CLASSIC_S1_4  = 104 [ (resdata.keyword_alias) = "经典S1法师" ];
    RES_RELATIVE_ID_CLASSIC_S1_5  = 105 [ (resdata.keyword_alias) = "经典S1射手" ];
    RES_RELATIVE_ID_CLASSIC_S1_6  = 106 [ (resdata.keyword_alias) = "经典S1法术辅助" ];
    RES_RELATIVE_ID_CLASSIC_S1_7  = 107 [ (resdata.keyword_alias) = "经典S1战斗辅助" ];
    RES_RELATIVE_ID_CLASSIC_S1_8  = 108 [ (resdata.keyword_alias) = "经典S1魏国" ];
    RES_RELATIVE_ID_CLASSIC_S1_9  = 109 [ (resdata.keyword_alias) = "经典S1蜀国" ];
    RES_RELATIVE_ID_CLASSIC_S1_10 = 110 [ (resdata.keyword_alias) = "经典S1吴国" ];
    RES_RELATIVE_ID_CLASSIC_S1_11 = 111 [ (resdata.keyword_alias) = "经典S1长安" ];
    RES_RELATIVE_ID_CLASSIC_S1_12 = 112 [ (resdata.keyword_alias) = "经典S1稷下" ];
    RES_RELATIVE_ID_CLASSIC_S1_13 = 113 [ (resdata.keyword_alias) = "经典S1长城" ];
    RES_RELATIVE_ID_CLASSIC_S1_14 = 114 [ (resdata.keyword_alias) = "经典S1玄雍" ];
    RES_RELATIVE_ID_CLASSIC_S1_15 = 115 [ (resdata.keyword_alias) = "经典S1尧天" ];
    RES_RELATIVE_ID_CLASSIC_S1_16 = 116 [ (resdata.keyword_alias) = "经典S1群雄" ];
    RES_RELATIVE_ID_CLASSIC_S1_17 = 117 [ (resdata.keyword_alias) = "经典S1传说" ];
    RES_RELATIVE_ID_CLASSIC_S1_18 = 118 [ (resdata.keyword_alias) = "经典S1扶桑" ];
    RES_RELATIVE_ID_CLASSIC_S1_19 = 119 [ (resdata.keyword_alias) = "经典S1封神" ];
}

enum RES_RELATIVE_TYPE {
    option (cltgen.gamecore_enum) = true;
    option (cltgen.csharp_enum)   = true;

    RES_RELATIVE_TYPE_NULL   = 0;
    RES_RELATIVE_TYPE_CAREER = 1 [ (resdata.keyword_alias) = "职业羁绊" ];
    RES_RELATIVE_TYPE_CAMP   = 2 [ (resdata.keyword_alias) = "阵营羁绊" ];
}

enum RES_EQUIP_QUALITY_TYPE {
    QUALITY_NULL   = 0 [ (resdata.keyword_alias) = "0" ];
    QUALITY_WHITE  = 1 [ (resdata.keyword_alias) = "1" ];
    QUALITY_GREEN  = 2 [ (resdata.keyword_alias) = "2" ];
    QUALITY_BLUE   = 3 [ (resdata.keyword_alias) = "3" ];
    QUALITY_PURPLE = 4 [ (resdata.keyword_alias) = "4" ];
}

enum EWealType {
    EWealType__reserved__ = 0;
    WEAL_TASK             = 1 [ (resdata.keyword_alias) = "任务活动" ];
    WEAL_EXCHANGE         = 2 [ (resdata.keyword_alias) = "兑换活动" ];
    WEAL_MAX              = 3;
}

enum Legacy {
    option (cltgen.csharp_enum) = true;
    option allow_alias          = true;

    cs_res_data__reserved__ = 0;

    MAX_PATH_LEN          = 128;
    MAX_ACTOR_NAME        = 32;
    MAX_DISTRICT_NAME_LEN = 64;
    RES_MAX_ICON_LEN      = 128;  // 最大图标路径长度
    RES_MAX_HERO_DESC_LEN = 1024; // 英雄描述长度

    //####服务器--开始####
    MAX_DISTRICT_SHORTNAME_LEN       = 32;
    RES_MAX_MAINLINE_LEVEL_PARAM_NUM = 3;
    RES_COMMON_TIME_LEN              = 32;  // 通用时间长度
    RES_MAX_DEFINITE_REWARD_NUM      = 4;   // 固定奖励最大个数
    RES_MAX_GLOBAL_TXT_VAL_LEN       = 512; // 全局文本配置项的文本项长度
    RES_PLAT_OPENID_LEN              = 64;
    RES_COMMON_NAME_LEN              = 64;
    RES_COMMON_DESC_LEN              = 256;
    RES_MAX_MATCH_AI_ID_NUM          = 5;   // 最大匹配AI分布数
    RES_MAX_ITEM_DESC_LEN            = 256; // 最大物品描述长度
    RES_MAX_ITEM_SIMPDESC_LEN        = 128; // 最大物品简要描述长度
    RES_MAX_JUMP_LINK_NUM            = 5;   // 最大跳转道具获取地
    RES_MAX_ITEMEFT_PARAM_NUM        = 8;   // 最大物品效果参数
    RES_MAX_DROPITEM_NUM             = 6;   // 最大掉落集合数
    RES_MAX_OBTAIN_PROP_WAY_NUM      = 6;   //最大获取道具方式参数
    RES_MAX_MAIL_AWARD_NUM           = 5;   // 最大邮件奖励个数
    RES_MAIL_TITLE_LEN               = 256;
    RES_MAIL_BODY_LEN                = 1024;
    RES_MAX_UNLOCKCOND_NUM           = 3; // 最大解锁条件数
    RES_MAX_AICHKCOND_NUM            = 3; // AI策略最大条件数
    RES_MAX_AICHKSCORE_NUM           = 5; // AI策略最大评分数

    RES_MAX_EXP_BUF_GAMETYPE = 8; // 一条经验加成记录最多对多少种玩法生效

    RES_MAX_DAILY_OPENTIME_NUM = 3; // 每日开放时段最大个数
    RES_WEEKLY_OPENTIME_NUM    = 7; // 每日开放时段最大个数
                                    //####服务器-开始####

    //####赛季-开始####
    RES_SEASON_MAX_THEME_COUNT = 5; // 单赛季最大的主题数
    //####赛季-结束####

    RES_MAX_PVP_PLAYER_NUM = 8; // 最大PVP人数

    //####条件--开始####
    RES_MAX_CONDITION_PARAMCNT = 5; // 条件参数最大数量
    //####条件--结束####

    //####战令--开始####
    RES_MAX_TOKEN_LEVEL_AWARD_NUM      = 2;  // 战令等级奖励的最大数量
    RES_MAX_TOKEN_DAILY_TASK_POOL_NUM  = 4;  // 战令任务刷新中每日任务池的数量上限
    RES_MAX_TOKEN_WEEKLY_TASK_POOL_NUM = 4;  // 战令任务刷新中每周任务池的数量上限
    RES_MAX_TOKEN_HANGUP_VALUE_NUM     = 50; // 最大
    //####战令--结束####

    RES_MAX_CHESS_TASKSTAGE_CNT = 5; // 棋子最大任务阶段数量

    RES_MAX_CHESS_HERO_MAX_RELATIVE = 3; //旗子最大羁绊数
    RES_MAX_CHESS_HERO_SKILL_COUNT  = 5; // 棋子技能最大个数
    RES_MAX_PRE_EQUIP_COUNT         = 2; // 装备合成所需的装备数
    RES_MAX_GETWAY_COUNT            = 3; //获取路径最大值

    //####布阵--开始####
    RES_MAX_LORD_NUM               = 5;  // 赛季预设阵容中一个阵容最多多少个领主
    RES_MAX_LINEUP_HERO_NUM        = 10; // 赛季预设阵容中一个阵容最多多少个英雄
    RES_MAX_LINEUP_HERO_EQUIP_NUM  = 3;  // 赛季预设阵容中一个英雄最多多少件装备
    RES_MAX_LINEUP_PREFERRED_EQUIP = 5;  // 预设阵容优先装备最大数量
    //####布阵--结束####

    RES_MAX_FETTER_LAYER_COUNT = 5; // 最大的羁绊层数
    RES_MAX_FUNC_PER_SKILL     = 4; // 技能效果最大数量

    RES_MAX_CHARTS_FUNC = 5; // 排行榜最大功能数量

    RES_LORD_DETAILS_ITEMS_COUNT            = 6; // 领主资料项长度
    RES_LORD_FILE_ITEMS_COUNT               = 4; // 领主档案项长度
    RES_LORD_LEVEL_EXP_COUNT                = 5; // 领主可配置等级经验配置长度
    RES_LORD_LEVEL_EXP_GATHERER_COUNT       = 3; // 领主经验获取条件最大配置数量
    RES_LORD_LEVEL_EXP_GATHERER_PARAM_COUNT = 3; // 领主经验获取条件参数最大数量
    RES_LORD_Q_A_COUNT                      = 40; // 领主问题数量

    STR_32                                         = 32;
    STR_64                                         = 64;
    STR_128                                        = 128;
    STR_256                                        = 256;
    MAX_HERO_STORY_URL_LEN                         = 256;
    MAX_URL_LEN                                    = 256;
    MAX_DIALOG_CONTENT_LEN                         = 1024;
    MAX_EnergyType_NAME                            = 32;
    MAX_HERO_SKILLNUM                              = 6;
    MAX_MONSTER_SKILLNUM                           = 10;
    MAX_ORGAN_SKILLNUM                             = 3;
    RES_MAX_CHESS_DROP_EQUIP_RANDOM_COUNT          = 3;
    RES_MAX_CHESS_NEW_DROP_EQUIP_COUNT             = 5;
    MAX_SKILL_EFFECT_NUM                           = 2;
    RES_MAX_RANDOMSKILLPASSIVE_LEN                 = 20;
    RES_MAX_TAILSMAN_BUFFLIB_LEN                   = 70;
    RES_MAX_SHENFUPICK_FILTERCONDITION_NUM         = 2;
    RES_MAX_CONDITION_PER_PASSIVESKILL             = 2;
    RES_MAX_PARAM_PER_SKILLFUNC                    = 18;
    RES_MAX_EXTRAPARAM_PER_SKILLFUNC               = 1;
    RES_SKILL_DYNAMIC_INDICATOR_COMMON_PARAM_COUNT = 10;
    RES_SKILL_DYNAMIC_INDICATOR_STATE_PARAM_COUNT  = 5;
    RES_SKILL_DYNAMIC_INDICATOR_STATE_COUNT        = 2;
    RES_MAX_PARAM_PER_ENERGYTYPE                   = 10;
    RES_MAX_PARAM_PER_WHEELTYPE                    = 5;
    RES_MAX_PARAM_PER_SKILLFUNC_MUTEXTI_ID         = 4;
    RES_MAX_PARAM_PER_SKILLFUNC_OVERRIDE_ID        = 4;
    RES_MAX_PARAM_PER_SKILLFUNC_PASSIVE            = 9;
    RES_MAX_PARAM_RANGEAPPOINTTYPE                 = 2;
    RES_MAX_SOLDIER_TYPE_NUM_PER_WAVE              = 5; // 单波兵线中，士兵种类最大数量
    RES_MAX_BRANCH_NUM_PER_WAVE                    = 5; // 分支路线
    MAX_CODE_NAME                                  = 16;
    RES_MAX_ITEM_NAME_LEN                          = 64;   // 最大物品名称长度
    RES_MAX_SYMBOL_FUNCEFT_NUM                     = 3;    // 最大符文属性数
    RES_MAX_SYMBOL_PVEEFT_NUM                      = 8;    // 最大符文属性数
    RES_MAX_HERO_TIPS_LEN                          = 4096; // 局内小技巧长度
    RES_MAX_HERO_RELATION_NUM                      = 3;    // 英雄最大羁绊关系数
    RES_MAX_ITEMSRC_CNT                            = 10;   // 物品来源最大数量
    RES_MAX_SKILL_DESC_LEN                         = 1024; // 技能描述长度
    RES_MAX_SKILL_DESC_LEN_EX                      = 2048; // 技能描述扩展长度
    RES_MAX_SKILLBUFF_DESC_LEN                     = 256;  // 技能描述长度
    RES_MAX_SKILL_UP_TIP_LEN                       = 256;  // 技能升级提示长度
    RES_MAX_RONGYU_DESC_LEN                        = 512;  // 最大荣誉描述长度

    RES_MAX_RANDOM_REWARD_PER_PVE_LEVEL                    = 5;    // PVE关卡最多可配置多少随机奖励
    RES_MAX_LEVEL_BUFF_COUNT                               = 4;    // PVE关卡最大数量
    RES_MAX_LEVEL_COMPENSATE_CNT                           = 5;    // 关卡收益补偿最大组数
    RES_MAX_MONSTER_DEAD_DROP_SHENFU_CNT                   = 5;    // 怪物死亡最大掉落神符数
    MAX_HERO_ATTEND_BATTLE_NUM                             = 5;    // 一个关卡最多几个英雄参战
    RES_MAX_STAR_NUM_PER_LEVEL                             = 3;    // 一个关卡最多可以获得几星
    RES_MAX_STAR_CONDITION_COUNT                           = 3;    // 一个星级评价最多有几个条件
    RES_MAX_DESC_LEN                                       = 256;  // 游戏中中文字符串长度
    RES_TEXT_CONFIG_MAX_LEN                                = 1024; // 99号表文本配置切页字符长度
    RES_MAX_TEXT_LEN                                       = 2048; // 游戏中文本区域最大长度
    RES_MAX_STAR_CONDITION_KEY_CNT                         = 4;    // 单个星级条件最大有几个Key
    RES_MAX_STAR_CONDITION_VALUE_CNT                       = 2;    // 单个星级条件最大有几个Value
    RES_TEXT_KEY_LEN                                       = 64;
    RES_MAX_INCOME_ALLOC_COUNT                             = 5;   // 收益分配组数
    RES_MAX_INCOME_RULE_COUNT                              = 4;   // 收益规则个数
    RES_MAX_ADVENTURE_DIFFICULTY_NUM                       = 4;   // 闯关难度个数
    RES_MAX_CHAPTER_DESC_LEN                               = 256; // 章节描述最大长度
    RES_MAX_PVE_REVIVE_NUM                                 = 3;   // PVE最大复活次数
    RES_MAX_UNLOCKSKILL_PASSNUM                            = 3;   // 召唤师技能被动技能数
    RES_MAX_HEROSKIN_NAME_LEN                              = 64;  // 英雄皮肤名称
    RES_MAX_HEROSKIN_PARTSHARE_DESC_LEN                    = 128; // 部件分享描述
    RES_MAX_HEROSKIN_DESC_LEN                              = 256; // 英雄皮肤描述
    RES_MAX_SKIN_ATTR                                      = 2;   // 英雄皮肤属性
    RES_MAX_SKIN_FEATURE                                   = 16;  // 英雄皮肤特性最大个数
    RES_MAX_NAME_LEN                                       = 64;  // 最大名字长度
    RES_MAX_SKIN_SHAREPIC_LEN                              = 64;  // 最大皮肤分享名字长度
    RES_MAX_SKIN_FEATURE_ICON_PATH_LEN                     = 32;  // 皮肤特性图片最大长度
    RES_MAX_SKIN_FEATURE_DESC_LEN                          = 128; // 皮肤特性描述最大长度
    RES_MAX_SKIN_VIDEO_URL_LEN                             = 128; // 皮肤跳转URL
    RES_MAX_BATTLE_EFFECT_PREVIEW_URL_LEN                  = 128; // 局内效果预览URL
    RES_SHOP_ITEM_TIME_LEN                                 = 16;  // 商店上下架时间长度
    RES_HEROSKIN_SHOP_TIME_LEN                             = 16;  // 英雄皮肤相关时间长度
    RES_INCOME_CHANGERATE_LEN                              = 5;   // 收益改变比例组数
    RES_MAX_HERO_JOBFEATURE_LEN                            = 2;   // 英雄最大职业描述个数
    RES_MAX_SKIN_PROMOTION_NUM                             = 5;   // 最大的皮肤促销数量
    RES_MAX_HERO_WAKE_DESC                                 = 512; // 英雄觉醒描述
    RES_MAX_HERO_ATTACK_RANGE_LEN                          = 16;  // 攻击范围描述长度
    RES_EQUIP_IN_BATTLE_NAME_LEN_MAX                       = 64;  // 局内装备名称长度
    RES_EQUIP_IN_BATTLE_DESC_LEN_MAX                       = 256; // 局内装备描述长度
    RES_EQUIP_IN_BATTLE_BUFF_DESC_LEN_MAX                  = 512; // 局内装备BUFF描述长度
    RES_EQUIP_IN_BATTLE_MUTEX_EQUIP_COUNT                  = 10;  // 互斥装备组装备最大个数
    RES_HERO_EQUIP_PRICE_TYPE_COUNT                        = 16;  // 装备价值计算分类最大个数
    RES_EQUIP_IN_BATTLE_REQUIRED_ID_LEN_MAX                = 64;  // 局内装备必要装备ID字符串最大长度
    RES_EQUIP_ID_BELONG_LEVEL_LEN_MAX                      = 256; // 专属关卡的装备ID字符串最大长度
    RES_EQUIP_ID_FORBID_LEVEL_LEN_MAX                      = 256; // 屏蔽关卡的装备ID字符串最大长度
    RES_EQUIP_ID_PREEQUIP_LEN_MAX                          = 256; // 前置装备ID字符串最大长度
    RES_EQUIP_ID_FORBID_LEVEL_SHOP_LEN_MAX                 = 256; // 屏蔽关卡的商店装备ID字符串最大长度
    RES_EQUIP_PRICE_RAISE_LEN_MAX                          = 256; // 装备价格递增字符串最大长度
    RES_EQUIP_IN_BATTLE_PASSIVE_SKILL_COUNT_MAX            = 4;   // 局内装备被动技能最大数量
    RES_EQUIP_IN_BATTLE_ACTIVE_SKILL_COUNT_MAX             = 2;   // 局内装备主动技能最大数量
    RES_EQUIP_ADDITION_RELATIVE_MAX_NUM                    = 2;   // 装备附加羁绊上限
    RES_EQUIP_IN_BATTLE_EFFECT_COMBINE_COUNT_MAX           = 3;   // 局内装备效果组合最大数量
    RES_EQUIP_IN_BATTLE_RECOMMEND_COUNT_MAX                = 12;  // 局内装备推荐最大数量
    RES_EQUIP_IN_BATTLE_PASSIVE_RMV_SKILLFUNC_CNT          = 3;   // 局内装备被动拔除技能效果个数
    RES_MAX_UNUSE_SKILLCNT                                 = 5;
    RES_MAX_PICK_RULE_PARAM_NUM                            = 4;    // PICK规则补充参数个数
    RES_MAX_FLOAT_TEXT_LEN                                 = 64;   // 局内飘字长度
    RES_MAX_GAME_MATCH_LEN                                 = 256;  // 比赛名称长度
    RES_MAX_VOICE_INTERACTION_CONDITION_NUM                = 10;   // 交互语音最大条件数
    RES_MAX_SKILL_PROPERTY_DESCRIPTION_NAME                = 32;   // 技能描述属性类型名的长度
    RES_MAX_SKILL_PROPERTY_DESCRIPTION_LEN                 = 5;    // 技能描述属性类型的个数
    RES_MAX_SKILL_PROPERTY_DESCRIPTION_VALUE               = 32;   // 技能描述属性数值的长度
    RES_MAX_PLAYERS_ONECAMP_LIMIT                          = 10;   // 单局单阵营最大玩家数量
    RES_MAX_SPEED_ADJUST_STEP_CNT                          = 8;    // 速度调校最大分段数量
    RES_MAX_DEVICE_NAME_LEN                                = 64;   // 设备名长度
    RES_MAX_DEVICE_FUNC_LEN                                = 12;   // 设备功能开关总数
    RES_MAX_DEVICE_FUNC_DEFAULT_VALUE                      = 10;   // 设备功能开关默认值
    RES_DEVICE_CONF_DEFAULT_VALUE                          = 100;  // 设备默认档位默认值
    RES_MAX_DEVICE_UI_CONFIG_CHAR_LEN                      = 30;   // 战斗UI适配配置字符最大长度
    RES_MAX_HERO_JOB_BUFF_ATTR_CNT                         = 3;    // 英雄职业属性
    RES_MAX_HERO_JOB_BUFF_CNT                              = 2;    // 英雄职业Buff个数
    RES_COMMON_KEY_VALUE_ARG_NUM                           = 3;    // 通用的KeyValue定义中参数最大个数
    RES_MAX_SKILLMARK_LAYEREFFECT_CNT                      = 12;   // 技能印记特效最大个数
    RES_MAX_ENERGY_STATE                                   = 2;    // 能量状态最大个数
    RES_MAX_BANK_SOURCE_LEN                                = 128;  // Bank资源最大长度
    RES_MAX_HERO_EXTRA_BRANCHROAD_CNT                      = 2;    // 英雄额外推荐分路种类
    RES_MAX_POOL_CHAIN_LEN                                 = 4;    // 内存池最大长度
    RES_MAX_BATTLE_ROYALE_EVALUATE_POINT_LIMIT_NUM         = 5;    // 6种评价SSS SS S A B C的5个分界线数值
    RES_BATTLE_ROYALE_GRADE_NAME_LEN                       = 64;   // 逃杀段位名称长度
    RES_BATTLE_PROJ8_NAME_LEN                              = 64;   // proj8局内成就名称
    RES_BATTLE_PROJ8_DESC_LEN                              = 128;  // proj8局内成就描述
    RES_BATTLE_PROJ8_COND_NUM                              = 2;    // proj8局内成就条件个数
    RES_MAX_ACTION_NAME_LEN                                = 64;   // 动作包名称长度
    RES_MAX_ACTION_DESC_LEN                                = 512;  // 动作包描述长度
    RES_MAX_DIGIT_FLOAT_INTERVAL                           = 10;   // 局内数字飘字区间
    RES_MAX_PVE_AI_LEVEL_NUM                               = 4;    // PVE难度个数
    RES_MAX_PVE_REVIVE_COUPONS_NUM                         = 5;    // PVE复活点券
    RES_MAX_PVE_LVEVL_MEMORY_PIECE_LEN                     = 128;  // PVE地图记忆碎片掉落
    RES_MAX_PRELOAD_ACTOR_LIST_STRING_LEN                  = 1024; // 预加载单位数据串最大长度
    RES_MAX_DYING_HP_REDUCE_RATE_NUM                       = 6;    // 濒死掉血速度个数
    RES_MAX_SERIES_SKIN_SYSTEM_BROADCAST_TEXT_LEN          = 512;  // 系列皮肤播报文本最大长度
    RES_MAX_SERIES_SKIN_SYSTEM_BROADCAST_KILL_TEXT_ARR_LEN = 5;    // 系列皮肤播击杀播报数组长度
    RES_MAX_BATTLE_INTERACTION_PARAMETER_NUM               = 5;    // 局内战斗互动事件最大参数
    RES_MAX_KILL_ACTION_PARAMETER_NUM                      = 3;    // 技能效果击杀表现最大参数
    RES_MAX_PRESET_CHESS_PER_COMBINE                       = 10;   // 单条预设棋子最多包含多少实体
    RES_MAX_CHESS_MOVE_TEST_PER_COMBINE                    = 20;   // 单条棋子移动测试最多包含多少实体
    RES_MAX_CHESS_CHESS_CAMP_MAXNUM                        = 5;    // 自走棋阵营列数
    RES_MAX_CHESS_CARD_QUALITY_NUM                         = 5;    // 自走棋最大品质
    RES_MAX_CHESS_CARD_PICK_NUM                            = 5;    // 自走棋抽卡最大个数
    RES_MAX_CHESS_CARD_NUM_PER_QUALITY                     = 20;   // 自走棋每个品质最大卡片数
    RES_MAX_CHESS_EFFECT_INFO_EFFECT_NUM                   = 3;    // 自走棋组合效果每组效果数量
    RES_MAX_CHESS_EFFECT_INFO_PREEFFECT_NUM                = 1;    // 自走棋前置组合效果每组效果数量
    RES_MAX_CHESS_HERO_COMBO_NUM                           = 6;    // 自走棋连招技能最大数量
    RES_MAX_CHESS_FORMATION_COUNT                          = 10;   // 自走棋快速阵型同位置最大数量
    RES_MAX_CHESS_RESET_PASSIVE_SKILL_NUM                  = 2;    // 自走棋重置被动技能最大数量
    RES_MAX_CHESS_PRE_CLEAR_SKILL_COMBINE_NUM              = 2;    // 自走棋前置清除技能效果组合最大数量
    RES_MAX_CHESS_POST_CLEAR_SKILL_COMBINE_NUM             = 3;    // 自走棋后置清除技能效果组合最大数量
    RES_MAX_CHESS_RECOMEND_EQUIP_COUNT                     = 20;   // 自走棋棋子推荐装备个数
    RES_SCENESKIN_PROPS_MAX_NUM                            = 5;    // 自走棋地图属性最大数量
    RES_MAX_CHESS_POSITION_ROW_COUNT                       = 4;
    RES_MAX_CHESS_TALENT_PARAM_NUM                         = 2;   // 模拟战天赋自定义参数个数
    RES_MAX_CHESS_TALENT_REBUILD_NUM                       = 6;   // 模拟战天赋重铸个数
    RES_MAX_CHESS_TALENT_POSCFG_NUM                        = 5;   // 模拟战天赋位置最大随机个数
    RES_MAX_CHESS_TALENT_QUALITY_NUM                       = 7;   // 模拟战天赋品质最大等级
    RES_MAX_CHESS_TALENT_CP_HERO_NUM                       = 6;   // 模拟战天赋CP最大英雄个数
    RES_MAX_CHESS_TALENT_POSITION_NUM                      = 5;   // 模拟战天赋最大位置个数
    RES_MAX_NUMEN_INTERACT_LEN                             = 6;   // 模拟战宠物交互表演个数
    RES_MAX_CHESS_TALENT_FIX_LEVEL_DROP_NUM                = 2;   // 模拟战天赋固定等级掉落个数
    RES_MAX_CHESS_TALENT_CONDITION_PARAM_NUM               = 6;   // 模拟战天赋达成条件参数个数
    RES_MAX_CHESS_TALENT_PROMOTE_PARAM_NUM                 = 6;   // 模拟战天赋加成参数个数
    RES_MAX_CHESS_PREPARE_PHASE_MMR_DURATION_NUM           = 7;   // 模拟战摆放阶段段位时长数组长度
    RES_MAX_CHESS_SUB_PROC_PARAMS_NUM                      = 5;   // 模拟战子环节参数数量
    RES_MAX_CHESS_MMR_AI_BATTLE_SCORE_NUM                  = 7;   // 模拟战AI段位战斗力数组长度
    RES_MAX_CHESS_SOLO_AI_BATTLE_SCORE_NUM                 = 3;   // 模拟战AI单机战斗力数组长度
    RES_MAX_CHESS_EXCEED_BATTLE_SCORE_NUM                  = 5;   // 模拟战AI超战力数组长度
    RES_MAX_CHESS_RANK_GOLD_NUM                            = 8;   // 模拟战排名金币数量
    RES_MAX_PERFEFT_HEROBIND_CNT                           = 20;  // 局内特效绑定英雄最大数
    RES_MAX_HIGHLIGHT_LABEL_LEN                            = 32;  // 高光标签的最大长度
    RES_MAX_HIGHLIGHT_DESC_LEN                             = 128; // 高光说明的最大长度
    RES_MAX_HIGHLIGHT_HERO_NUM                             = 5;   // 高光作用英雄最大数量
    RES_MAX_HIGHLIGHT_FILTER_HERO_NUM                      = 5;   // 高光过滤英雄最大数量
    PROJECT8_MAX_ROUND_STATE_COUNT                         = 5;   // 同一回合最大状态数量
    PROJECT8_MAX_OVER_TIME_BUFF_COUNT                      = 2;   // 加时赛BUFF最大数量

    RES_EQUIP_IN_BATTLE_LEVEL_MAX      = 3;   // 局内装备等级最大值
    RES_CHESS_RECOMMEND_MAX_HERO_COUNT = 9;   // 推荐阵容最大英雄数
    RES_UGC_FINAL_DIFFICULTY           = 255; // 终章难度

    RES_MAX_NEWBIE_GUIDE_TRIGGER_TIME_PARAM_NUM      = 4;
    RES_MAX_NEWBIE_GUIDE_TRIGGER_CONDITION_PARAM_NUM = 3;
    RES_MAX_NEWBIE_TRIGGER_TIME_NUM                  = 2;
    RES_MAX_NEWBIE_TRIGGER_CONDITION_NUM             = 2;
    RES_MAX_NEWBIE_TRIGGER_SKIP_CONDITION_NUM        = 2;
    RES_MAX_NEWBIE_ACTION_PARAM_NUM                  = 10;
    RES_MAX_NEWBIE_UI_DEPTH_NUM                      = 5;

    CHESS_COMBINE_MAX_CNT = 99; // 单次合成棋子最大数量，废弃
    CHESS_RESOLVE_MAX_CNT = 99; // 单次分解的棋子最大数量，废弃

    FREE_GROUP_MAX_CNT                      = 5;  // 限免组别最大数量
    GIFT_STRATEGY_MAX_CNT                   = 10; // 礼包保底策略最大数量
    LORDRECENTRESULTS_HISTORYSEASON_MAX_CNT = 3;  // 棋手战绩结算历史赛季的最大数量

    RES_MAX_LANGUAGE_CNT                    = 10; // 最大语言种类
}

//####通用结构-开始####
message ResWhiteListCfg {
    option (resdata.output) = Server;

    string GOpenID    = 1 [ (resdata.cname) = "GOpenID", (bingogen.primary_key) = 1 ];
    string DeviceUUID = 2 [ (resdata.cname) = "DeviceUUID" ];
}

message ResBlackListCfg {
    option (resdata.output) = Server;

    string GOpenID = 1 [ (resdata.cname) = "GOpenID", (bingogen.primary_key) = 1 ];
    uint32 WorldID = 2 [ (resdata.cname) = "逻辑区ID" ];
}

message WhiteListConf {
    ResWhiteListCfg WhiteList = 1 [ (bingogen.databin_path) = "" ];
    ResBlackListCfg BlackList = 2 [ (bingogen.databin_path) = "" ];
}

message ResZoneRegisterCfg {
    option (cltgen.pk)          = "LogicWorldId";
    uint32 LogicWorldId         = 1 [ (resdata.cname) = "逻辑区ID", (bingogen.primary_key) = 1 ];
    uint32 TotalRegisterNum     = 2 [ (resdata.cname) = "逻辑区注册上限" ];
    uint32 MaxRegisterNumPerDay = 3 [ (resdata.cname) = "每日注册上限" ];
    uint32 FakeRegisterNum      = 4 [ (resdata.cname) = "伪造注册人数" ];
    uint32 MaxOnlineNum         = 5 [ (resdata.cname) = "最大在线人数" ];
    uint32 WhiteListLimit       = 6 [ (resdata.cname) = "是否白名单限制" ];
    uint32 BelongZoneID         = 7 [ (resdata.cname) = "所属战区ID" ];
}

message ResGlobalTxtInfoCfg // 全局文本配置表
{
    uint32 TxtConfType = 1 [ (resdata.cname) = "文本配置项名称", (bingogen.primary_key) = 1 ];
    string TextVal     = 2 [ (resdata.cname) = "文本配置项内容" ];
}

message ResMatchPoolCfg {
    option (resdata.output) = Server;

    uint32 GameType           = 1 [ (resdata.cname) = "玩法类型", (bingogen.primary_key) = 1, (resdata.bind) = "COM_GAME_TYPE" ];
    uint32 GameTypeSubID      = 11 [ (resdata.cname) = "玩法子ID", (bingogen.primary_key) = 2 ];
    uint32 MatchMemberNum     = 2 [ (resdata.cname) = "匹配人数" ];
    uint32 MatchScoreMin      = 3 [ (resdata.cname) = "最小匹配分" ];
    uint32 MatchScoreMax      = 4 [ (resdata.cname) = "最大匹配分" ];
    uint32 MatchTimeoutMs     = 10 [ (resdata.cname) = "超时时间（毫秒）" ];
    uint32 MatchResultConfirm = 12 [ (resdata.cname) = "匹配结果确认" ];
    uint32 MatchPageSize      = 13 [ (resdata.cname) = "匹配分每段大小" ];
    uint32 AIConfirmSec       = 14 [ (resdata.cname) = "AI确认时间" ];
}

// 不同段位对应的匹配段位范围
message ResMatchRankRangeCfg {
    option (cltgen.index)          = "Rank";
    option (cltgen.index)          = "Rank, Level";
    option (cltgen.index)          = "GameType, Rank, Level";
    option (cltgen.index)          = "GameType, GameTypeSubID, Rank, Level";
    option (cltgen.system_databin) = true;

    uint32 GameType      = 1 [ (resdata.cname) = "玩法类型", (bingogen.primary_key) = 1, (resdata.bind) = "COM_GAME_TYPE" ];
    uint32 GameTypeSubID = 2 [ (resdata.cname) = "玩法子ID", (bingogen.primary_key) = 2 ];
    uint32 Rank          = 3 [ (resdata.cname) = "段位", (bingogen.primary_key) = 3, (resdata.bind) = "EPvpRankType" ];
    uint32 Level         = 4 [ (resdata.cname) = "阶数", (bingogen.primary_key) = 4 ];
    uint32 MinRank       = 6 [ (resdata.cname) = "最小匹配段位", (resdata.bind) = "EPvpRankType" ];
    uint32 MinLevel      = 7 [ (resdata.cname) = "最小匹配阶数" ];
    uint32 MaxRank       = 9 [ (resdata.cname) = "最大匹配段位", (resdata.bind) = "EPvpRankType" ];
    uint32 MaxLevel      = 10 [ (resdata.cname) = "最大匹配阶数" ];
}

message ResMatchAIDistribution // 匹配AI补位分布信息
{

    uint32 ID     = 1 [ (resdata.cname) = "ID" ];
    uint32 Weight = 2 [ (resdata.cname) = "权重" ];
}

message ResMatchStrategyRadiusInfo // 匹配扩半径信息
{
    uint32 MatchRadiusBase     = 7 [ (resdata.cname) = "初始半径" ];
    uint32 MatchRadiusIncrBase = 8 [ (resdata.cname) = "初始匹配半径放宽值" ];
    uint32 MatchRadiusIncr     = 9 [ (resdata.cname) = "匹配半径放宽加速值" ];
    uint32 MatchRadiusIncrMax  = 10 [ (resdata.cname) = "匹配半径最大放宽值" ];
}

message ResMatchStrategyCfg {
    option (resdata.output) = Server;

    uint32 GameType           = 1 [ (resdata.cname) = "玩法类型", (bingogen.primary_key) = 1, (resdata.bind) = "COM_GAME_TYPE" ];
    uint32 GameTypeSubID      = 2 [ (resdata.cname) = "玩法子ID", (bingogen.primary_key) = 2 ];
    uint32 MatchScoreRangeMin = 3 [ (resdata.cname) = "匹配分段下限", (bingogen.primary_key) = 3 ];
    uint32 MatchScoreRangeMax = 4 [ (resdata.cname) = "匹配分段上限" ];
    uint32 MinMemberNum       = 5 [ (resdata.cname) = "最小真人人数" ];
    uint32 MaxMemberNum       = 6 [ (resdata.cname) = "最大真人人数" ];

    ResMatchStrategyRadiusInfo EloRadius  = 7 [ (resdata.cname) = "elo分" ];
    ResMatchStrategyRadiusInfo RankRadius = 8 [ (resdata.cname) = "段位分" ];

    uint32 MatchRadiusUpdateFreq = 11 [ (resdata.cname) = "匹配半径放宽频率（秒）" ];

    uint32 AITimeoutMs                             = 12 [ (resdata.cname) = "补位时间阈值（毫秒）" ];
    repeated ResMatchAIDistribution AIDistribution = 13 [ (resdata.cname) = "AI分布", (resdata.count) = "Legacy.RES_MAX_MATCH_AI_ID_NUM" ];
}

message MatchConf {
    ResMatchStrategyCfg MatchStrategyCfg = 1 [ (bingogen.databin_path) = "" ];
    ResMatchPoolCfg MatchPoolCfg         = 2 [ (bingogen.databin_path) = "" ];
}

message ResAIShowCfg {
    option (cltgen.pk)             = "ID";
    option (cltgen.system_databin) = true;

    uint32 ID                  = 1 [ (resdata.cname) = "ID", (bingogen.primary_key) = 1 ];
    uint32 Group               = 2 [ (resdata.cname) = "AI组" ];
    uint32 HeadID              = 3 [ (resdata.cname) = "头像" ];
    uint32 HeadFrameID         = 4 [ (resdata.cname) = "头像框" ];
    bool IsUseProficieny       = 5 [ (resdata.cname) = "是否使用热力值" ];
    uint32 MinLordProficienyLv = 6 [ (resdata.cname) = "最小热力值等级" ];
    uint32 MaxLordProficienyLv = 7 [ (resdata.cname) = "最大热力值等级" ];
    uint32 MinLordPowerScore   = 8 [ (resdata.cname) = "最小炽热积分" ];
    uint32 MaxLordPowerScore   = 9 [ (resdata.cname) = "最大炽热积分" ];
    uint32 MinTop1Count        = 10 [ (resdata.cname) = "登顶次数最小值" ];
    uint32 MaxTop1Count        = 11 [ (resdata.cname) = "登顶次数最大值" ];
    uint32 MinTop4Count        = 12 [ (resdata.cname) = "前四次数最小值" ];
    uint32 MaxTop4Count        = 13 [ (resdata.cname) = "前四次数最大值" ];
    uint32 MinGameCount        = 14 [ (resdata.cname) = "上场次数最小值" ];
    uint32 MaxGameCount        = 15 [ (resdata.cname) = "上场次数最大值" ];
    uint32 MinCommonUseCount   = 16 [ (resdata.cname) = "常用上场次数最小值" ];
    uint32 MaxCommonUsecount   = 17 [ (resdata.cname) = "常用上场次数最大值" ];
}

message ResGameItem {
    uint32 ItemType = 1 [ (resdata.cname) = "类型", (resdata.bind) = "COM_GAMEITEM_TYPE" ];
    uint32 ItemID   = 2 [ (resdata.cname) = "ID", (resdata.bind) = "COM_GAMEMONEY_SUBTYPE" ];
    uint32 ItemCnt  = 3 [ (resdata.cname) = "数量" ];
}

message ResEnableInfo {
    bool Enabled            = 1 [ (resdata.cname) = "是否可用" ];
    string EnableTimeStr    = 2 [ (resdata.cname) = "可用起始时间"];
    uint32 EnableTimeGen    = 3;
    bool DefaultShow        = 4 [ (resdata.cname) = "是否默认展示" ];
}

enum RES_COMMON_CONST {
    option (cltgen.gamecore_enum)  = true;
    RES_COMMON_CONST__reserved__   = 0;
    BLOOD_BIG_HURT_RATIO           = 1 [ (resdata.keyword_alias) = "血条高伤比例" ];
    MAIL_DEFAULT_BGURL             = 2 [ (resdata.keyword_alias) = "邮件默认背景图url" ];
    PLAYER_CHGNAME_CHAR_MIX        = 3 [ (resdata.keyword_alias) = "名字最大字符限制" ];
    PLAYER_CHGNAME_TIME_LIMIT      = 4 [ (resdata.keyword_alias) = "改名时间间隔" ];
    PLAYER_CHGNAME_COST            = 5 [ (resdata.keyword_alias) = "改名所需道具" ];
    CROSS_DAY_REFRESH_HOURMIN      = 6 [ (resdata.keyword_alias) = "跨天刷新时间(时分)" ];
    CROSS_WEEK_REFRESH_WEEKHOURMIN = 7 [ (resdata.keyword_alias) = "跨周刷新时间(周时分)" ];
    LOCKSTEP_HEART_BEAT_FREQ       = 8 [ (resdata.keyword_alias) = "LockStepServer心跳频率" ];
    PROP_NEW_GET_TIME              = 9 [ (resdata.keyword_alias) = "新获得道具时限" ];
    TOKEN_EXP_GET_TIME             = 10 [ (resdata.keyword_alias) = "战令挂机经验领取间隔" ];
    LINEUP_MAX_NUM_PER_SEASON      = 11 [ (resdata.keyword_alias) = "每个赛季可以保存的阵容数量" ];
    ACNT_BORN_INITHEAD_ID          = 12 [ (resdata.keyword_alias) = "玩家出生头像ID" ];
    ACNT_BORN_INITHEADIMG_ID       = 13 [ (resdata.keyword_alias) = "玩家出生头像框ID" ];
    ROOM_INVITE_CD                 = 15 [ (resdata.keyword_alias) = "邀请组队冷却时间" ];
    ACNT_BORN_INIT_LORD            = 16 [ (resdata.keyword_alias) = "玩家出生获取的领主" ];
    ACNT_BORN_INIT_LORDSKIN        = 17 [ (resdata.keyword_alias) = "玩家出生获取的领主皮肤" ];
    ACNT_BORN_INIT_DROP            = 18 [ (resdata.keyword_alias) = "玩家出生掉落" ];
    ACNT_NEWBIE_AWARD_DROP         = 19 [ (resdata.keyword_alias) = "新手引导奖励掉落" ];
    PKG_ITEM_MAX_NUM               = 20 [ (resdata.keyword_alias) = "背包物品最大格子数" ];
    PVP_GOLD_LIMIT_ID              = 21 [ (resdata.keyword_alias) = "PVP结算时的限制掉落ID" ];
    PVP_RANK_KING_SINGLE_SCORE     = 22 [ (resdata.keyword_alias) = "最强王者单个星级积分" ];
    ROOM_INVITE_TIMEOUT_SECOND     = 23 [ (resdata.keyword_alias) = "房间邀请消息超时" ];
    PVP_AWARD_MIN_BATTLE_ROUND     = 24 [ (resdata.keyword_alias) = "pvp奖励最小战斗回合数" ];
    CHESS_UPGRADE_KILL_PRICE_ADD   = 25 [ (resdata.keyword_alias) = "棋子升星消除价格额外量" ];
    AREAROOM_AI_SHOW_GROUP         = 26 [ (resdata.keyword_alias) = "开房间随机AI展示组" ];
    COUPONS_GMALL_ACTIONID         = 27 [ (resdata.keyword_alias) = "道聚城ActionID" ];
    AI_C_HERO_ADDITIVE_PARAM       = 28 [ (resdata.keyword_alias) = "内置AIC位英雄放大权重千分比" ];
    AI_SUB_C_HERO_ADDITIVE_PARAM   = 29 [ (resdata.keyword_alias) = "内置AI副C英雄放大权重千分比" ];
    PRIVACY_GUIDE                  = 30 [ (resdata.keyword_alias) = "隐私保护指引" ];
    PRIVACY_GUIDE_CHILDREN         = 31 [ (resdata.keyword_alias) = "儿童隐私保护指引" ];
    CONTRACT_SOFTWARE              = 32 [ (resdata.keyword_alias) = "腾讯游戏用户协议" ];
    CROSS_MONTH_REFRESH_HOURMIN    = 33 [ (resdata.keyword_alias) = "跨月刷新时间(日时分)" ];
    BUY_CARD_AGE                   = 34 [ (resdata.keyword_alias) = "购买棋子AGE" ];
    BUY_EXP_AGE                    = 35 [ (resdata.keyword_alias) = "购买经验AGE" ];
    REFRESH_STORE_AGE              = 36 [ (resdata.keyword_alias) = "刷新商店AGE" ];
    START_DRAG_HERO_AGE            = 37 [ (resdata.keyword_alias) = "阵位选择开始AGE" ];
    END_DRAG_HERO_AGE              = 38 [ (resdata.keyword_alias) = "阵位选择结束AGE" ];
    LORD_TELEPORT                  = 39 [ (resdata.keyword_alias) = "领主传送AGE" ];
    HERO_LEVEL_UP_3                = 40 [ (resdata.keyword_alias) = "英雄合成3星AGE" ];
    LORD_LEVEL_UP                  = 41 [ (resdata.keyword_alias) = "棋手升级AGE" ];
    LORD_SKILL_LEVEL_UP            = 42 [ (resdata.keyword_alias) = "棋手技能升级AGE" ];
    STORE_SAME_HERO                = 43 [ (resdata.keyword_alias) = "商店天胡AGE" ];
    HERO_SOUL_LEVEL_CHANGE         = 44 [ (resdata.keyword_alias) = "升至满级AGE" ];
    WARM_AI_TRANSITION_PHASE_PARAM = 45 [ (resdata.keyword_alias) = "新手过渡阶段温暖局参数" ];
    THIRD_PARTY_INFO_SHARELIST     = 46 [ (resdata.keyword_alias) = "第三方信息共享清单" ];
    PRIVACY_HELPER                 = 47 [ (resdata.keyword_alias) = "隐私助手" ];
    UNREGISTERMAILSENDER           = 48 [ (resdata.keyword_alias) = "注销取消邮件发送人" ];
    SHOWSTATE_SETLIMIT_CNT         = 49 [ (resdata.keyword_alias) = "在线状态每周设置上限" ];
    OB_LOCKSTEP_HEART_BEAT_FREQ    = 50 [ (resdata.keyword_alias) = "OBLockStepServer心跳频率" ];
    OB_CONTROLLER_SHOW_TIME        = 51 [ (resdata.keyword_alias) = "OB控制器显示时间" ];
    RAND_NAME_FILL_BLACK_NUM       = 52 [ (resdata.keyword_alias) = "随机名字填充空白数量" ];
    NEWBIE_FREE_PARAM              = 53 [ (resdata.keyword_alias) = "新手限免" ];
    SCENE_HIDE_AGE                 = 54 [ (resdata.keyword_alias) = "场景隐藏AGE" ];
    HUNDRED_INITIAL_SCALE          = 55 [ (resdata.keyword_alias) = "百强榜初始镜头大小" ];
    SHOP_PROP_SROLL_TIME           = 56 [ (resdata.keyword_alias) = "商城道具滚动时间" ];
    LORD_SELECT_ORDER_PARAM        = 57 [ (resdata.keyword_alias) = "棋手选择顺位参数" ];
    ROOM_CHAT_MSG_MAXCOUNT         = 58 [ (resdata.keyword_alias) = "房间聊天消息存在最大个数" ];
    ROOM_CHAT_MSG_LIFE_TIME        = 59 [ (resdata.keyword_alias) = "房间聊天消息存在最长时间" ];
    WALL_HIT_TIME_BY_SKILL         = 60 [ (resdata.keyword_alias) = "技能导致的撞墙时间" ];
    MATCH_REROLL_LIMIT_COUNT       = 61 [ (resdata.keyword_alias) = "触发特殊提前备战标准人数值" ];
    GUARANTEED_SUPPLEMENTARY_LORD  = 62 [ (resdata.keyword_alias) = "保底补充棋手" ];
    LORD_CHOOSE_RANDOM_REWARD      = 63 [ (resdata.keyword_alias) = "棋手选择随机奖励" ];
    LOADING_LEAST_TIME             = 64 [ (resdata.keyword_alias) = "对局Loading至少停留时长" ];
    WX_GameCenter_REWARD       = 65 [ (resdata.keyword_alias) = "微信平台登录邮件奖励" ];
    QQ_GameCenter_REWARD          = 66 [ (resdata.keyword_alias) = "QQ平台登录邮件奖励" ];
    AUCTION_PHASE_TIME           = 67 [ (resdata.keyword_alias) = "拍卖阶段时间" ];
    AUCTION_PERFORM_TIME           = 68 [ (resdata.keyword_alias) = "拍卖表演时间" ];
}

//一定要连续
enum RES_AUDIO_MISC_CONST {
    option (cltgen.gamecore_enum)  = true;
    RES_AUDIO_MISC_CONST__reserved__   = 0;
    INGAME_HERO_DRAG_DOWN_STONE           = 1 [ (resdata.keyword_alias) = "占位1" ];
    INGAME_HERO_PICK             		  = 2 [ (resdata.keyword_alias) = "占位2" ];
    UPGRADE_POPULATION        			  = 3 [ (resdata.keyword_alias) = "占位3" ];
    INGAME_ROUND_PREPARE      			  = 4 [ (resdata.keyword_alias) = "占位4" ];
    CHESS_BATTLE_V_DEFAULT                = 5 [ (resdata.keyword_alias) = "占位5" ];
    CHESS_BATTLE_D_DEFAULT      		  = 6 [ (resdata.keyword_alias) = "占位6" ];
    CHESS_BATTLE_DEFAULT 				  = 7 [ (resdata.keyword_alias) = "占位7" ];
    CHESS_RELATIVE_ACTIVE       		  = 8 [ (resdata.keyword_alias) = "占位8" ];
    STONE_CHANGE              			  = 9 [ (resdata.keyword_alias) = "占位9" ];
    STONE_CHANGE_DOWN             		  = 10 [ (resdata.keyword_alias) = "占位10" ];
    CHESS_HERO_SELL      				  = 11 [ (resdata.keyword_alias) = "占位11" ];
    INGAME_SWITCH_OTHERPLAYER          	  = 12 [ (resdata.keyword_alias) = "占位12" ];
    CHESS_ROUND_V_DEFAULT       		  = 13 [ (resdata.keyword_alias) = "占位13" ];
    CHESS_ROUND_SHUTDOWN                  = 15 [ (resdata.keyword_alias) = "占位14" ];
    CHESS_ROUND_D_DEFAULT            	  = 16 [ (resdata.keyword_alias) = "占位15" ];
    CHESS_DEFEAT        				  = 17 [ (resdata.keyword_alias) = "占位16" ];
    INGAME_KILL_MINE            		  = 18 [ (resdata.keyword_alias) = "占位17" ];
    INGAME_KILL_ENERMY         			  = 19 [ (resdata.keyword_alias) = "占位18" ];
    INGAME_HERO_DRAG_DOWN_GROUND          = 20 [ (resdata.keyword_alias) = "占位19" ];
    RES_AUDIO_MISC_CONST__max    = 21;
}

message ResCommonConstCfg {
    option (cltgen.pk)               = "ID";
    option (cltgen.system_databin)   = true;
    option (cltgen.gamecore_databin) = true;

    uint32 ID           = 1 [ (resdata.cname) = "ID", (resdata.bind) = "RES_COMMON_CONST", (bingogen.primary_key) = 1 ];
    uint32 IntParam1    = 2 [ (resdata.cname) = "整数参数1", (resdata.bind) = "COM_GAMEITEM_TYPE" ];
    uint32 IntParam2    = 3 [ (resdata.cname) = "整数参数2", (resdata.bind) = "COM_GAMEMONEY_SUBTYPE" ];
    uint32 IntParam3    = 4 [ (resdata.cname) = "整数参数3" ];
    string StringParam1 = 5 [ (resdata.cname) = "字符串参数1" ];
    string StringParam2 = 6 [ (resdata.cname) = "字符串参数2" ];
    string StringParam3 = 7 [ (resdata.cname) = "字符串参数3" ];
}

message ResAudioMiscConstCfg {
    option (cltgen.pk)               = "ID";
    option (cltgen.system_databin)   = true;
    option (cltgen.gamecore_databin) = true;

    uint32 ID           = 1 [ (resdata.cname) = "ID", (resdata.bind) = "RES_AUDIO_MISC_CONST", (bingogen.primary_key) = 1 ];
    string EventName = 2 [ (resdata.cname) = "事件名" ];
    string BankName = 3 [ (resdata.cname) = "Bank名" ];
}


enum PLAYMOD_TYPE {
    PLAYMOD_None                      = 0;
    PLAYMOD_STANDARD_S1               = 1 [ (resdata.keyword_alias) = "S1标准模式" ];
    PLAYMOD_STANDARD_S1_TUTORIAL      = 2 [ (resdata.keyword_alias) = "S1新手引导" ];
    PLAYMOD_CLASSICAL_S1              = 3 [ (resdata.keyword_alias) = "S1模拟战" ];
    PLAYMOD_STANDARD_S2               = 4 [ (resdata.keyword_alias) = "S2标准模式" ];
    PLAYMOD_STANDARD_S1_BALANCE_TEST  = 5 [ (resdata.keyword_alias) = "S1标准模式平衡性测试" ];
    PLAYMOD_CLASSICAL_S1_BALANCE_TEST = 6 [ (resdata.keyword_alias) = "S1模拟战平衡性测试" ];
    PLAYMOD_STANDARD_S1_PRACTICE      = 7 [ (resdata.keyword_alias) = "S1标准模式训练营" ];
    PLAYMOD_CLASSICAL_S1_PRACTICE     = 8 [ (resdata.keyword_alias) = "S1模拟战训练营" ];
    PLAYMOD_STANDARD_S1_RECRUIT       = 9 [ (resdata.keyword_alias) = "S1标准模式新手战" ];
}

message ResPlayMod {
    option (cltgen.pk)               = "UniqID";
    option (cltgen.system_databin)   = true;
    option (cltgen.gamecore_databin) = true;
    option (cltgen.random_access)    = Editor;

    PLAYMOD_TYPE UniqID      = 1 [ (resdata.cname) = "唯一ID", (bingogen.primary_key) = 1 ];
    string MainName          = 3 [ (resdata.cname) = "主玩法名" ];
    string SubName           = 5 [ (resdata.cname) = "子玩法名" ];
    string MatFoldPath       = 6 [ (resdata.cname) = "材质文件夹名" ];
    string MatPostfix        = 7 [ (resdata.cname) = "材质名后缀" ];
    string ExportPreloadName = 8 [ (resdata.cname) = "导出的预载资源名" ];
    string UsePreloadName    = 9 [ (resdata.cname) = "使用的预载资源名" ];
}
enum GAMELANGUAGE_TYPE {
    GAMELANGUAGE_TYPE_None  = 0;
    GAMELANGUAGE_TYPE_zh_cn = 1 [ (resdata.keyword_alias) = "简体中文" ];
    GAMELANGUAGE_TYPE_zh_hk = 2 [ (resdata.keyword_alias) = "繁体中文" ];
    GAMELANGUAGE_TYPE_en_us = 3 [ (resdata.keyword_alias) = "美式英语" ];
    GAMELANGUAGE_TYPE_de_at = 4 [ (resdata.keyword_alias) = "德语" ];
    GAMELANGUAGE_TYPE_ja_jp = 5 [ (resdata.keyword_alias) = "日语" ];
    GAMELANGUAGE_TYPE_th    = 6 [ (resdata.keyword_alias) = "泰语" ];
}

enum AgeAuthentication_Method {
    AgeAuthentication_Method_None               = 0 [ (resdata.keyword_alias) = "无需确认" ];
    AgeAuthentication_Method_Inpute             = 1 [ (resdata.keyword_alias) = "输入生日" ];
    AgeAuthentication_Method_Optional           = 2 [ (resdata.keyword_alias) = "可选项框" ];
}

enum ParentsAuthentication_Method {
    ParentsAgeAuthentication_Method_None             = 0 [ (resdata.keyword_alias) = "无需确认" ];
    ParentsAgeAuthentication_Method_Self             = 1 [ (resdata.keyword_alias) = "自我认证" ];
    ParentsAgeAuthentication_Method_Card             = 2 [ (resdata.keyword_alias) = "信用卡认证" ];
    ParentsAgeAuthentication_Method_eMail            = 3 [ (resdata.keyword_alias) = "邮箱认证" ];
}

message ResRandNameComb {
    option (cltgen.index)          = "Language";
    option (cltgen.system_databin)   = true;
    option (cltgen.random_access)    = Runtime;

    string Prefix               = 1 [ (resdata.cname) = "名字前缀" ];
    string Connect              = 2 [ (resdata.cname) = "名字中部" ];
    string Suffix               = 3 [ (resdata.cname) = "名字后缀" ];
    GAMELANGUAGE_TYPE Language  = 4 [ (resdata.cname) = "语言规则"];
}

message GlobalMiscConf {
    ResCommonConstCfg CommParam  = 1 [ (bingogen.databin_path) = "" ];
    ResRandNameComb RandNameComb = 3 [ (bingogen.databin_path) = "" ];
    ResAIShowCfg AIShowCfg       = 4 [ (bingogen.databin_path) = "" ];
    ResDistrictLanguageCfg LanguageCfg = 6 [ (bingogen.databin_path) = "" ];
}

// 游戏模式分组情况
message ResGameTypeGroupCfg {
    COM_GAME_TYPE       GameType = 1 [ (resdata.cname) = "游戏类型", (bingogen.primary_key) = 1 ]; 
    COM_GAMETYPE_GROUP  GameGroup = 2 [ (resdata.cname) = "游戏模式组" ]; 
}

// 游戏类型组所属表
message ResGameTypeGrpBelongCfg {
    uint32 GroupID          = 1 [ (resdata.cname) = "组ID" ];
    COM_GAME_TYPE GameType  = 2 [ (resdata.cname) = "游戏类型" ];
}

message GameTypeConf {
    ResGameTypeGroupCfg GameTypeGroup           = 1 [ (bingogen.databin_path) = "" ];
    ResGameTypeGrpBelongCfg GameTypeGrpBelong   = 2 [ (bingogen.databin_path) = "" ];
}

enum RES_PROP_TYPE {
    RES_PROP_NORMAL                  = 0 [ (resdata.keyword_alias) = "" ];
    RES_PROP_EXPCARD                 = 1 [ (resdata.keyword_alias) = "经验卡" ];
    RES_PROP_CURRENCYCARD            = 2 [ (resdata.keyword_alias) = "货币卡" ];
    RES_PROP_LIMITEDTIME_LORD        = 3 [ (resdata.keyword_alias) = "限时领主" ];
    RES_PROP_LIMITEDTIME_LORDSKIN    = 4 [ (resdata.keyword_alias) = "限时领主皮肤" ];
    RES_PROP_NORMAL_GIFT_BAG         = 5 [ (resdata.keyword_alias) = "常规礼包" ];
    RES_PROP_OPTIONAL_GIFT_BAG       = 6 [ (resdata.keyword_alias) = "自选礼包" ];
    RES_PROP_ITEM_ADDITIVE_NUM_CARD  = 7 [ (resdata.keyword_alias) = "物品加成次卡" ];
    RES_PROP_ITEM_ADDITIVE_TIME_CARD = 8 [ (resdata.keyword_alias) = "物品加成时间卡" ];
    RES_PROP_INTERACTIVE             = 9 [ (resdata.keyword_alias) = "互动道具" ];
    RES_PROP_GUARANTEEDGIFT          = 10 [ (resdata.keyword_alias) = "保底礼包" ];
    RES_PROP_TOKEN_COMPENSATE        = 11 [ (resdata.keyword_alias) = "战令补偿礼包" ];
    RES_PROP_CHESSTASK_COMPENSATE    = 12 [ (resdata.keyword_alias) = "英雄任务补偿礼包" ];
    RES_PROP_NAME_CHANGE_CARD        = 13 [ (resdata.keyword_alias) = "改名卡" ];
}

enum RES_PROP_TIMEOUT_PROCESSTYPE {
    PROCESSTYPE_INVALID  = 0 [ (resdata.keyword_alias) = "" ];
    PROCESSTYPE_DESTROY  = 1 [ (resdata.keyword_alias) = "销毁" ];
    PROCESSTYPE_HANDSALE = 2 [ (resdata.keyword_alias) = "手动售卖" ];
    PROCESSTYPE_AUTOSALE = 3 [ (resdata.keyword_alias) = "自动售卖" ];
    PROCESSTYPE_LAST     = 4;
}

enum RES_PROP_OVERLIMIT_TYPE {
    OVERLIMIT_INVALID   = 0;
    OVERLIMIT_UNABLEGET = 1 [ (resdata.keyword_alias) = "无法获取" ];
    OVERLIMIT_NEWGRID   = 2 [ (resdata.keyword_alias) = "新开格子" ];
    OVERLIMIT_LAST      = 3;
}

enum RES_PROP_VALIDTIME_TYPE {
    VALIDTIME_INVALID      = 0 [ (resdata.keyword_alias) = "" ];
    VALIDTIME_ALWAYS       = 1 [ (resdata.keyword_alias) = "永久有效" ];
    VALIDTIME_FIXEDTIME    = 2 [ (resdata.keyword_alias) = "固定时间范围" ];
    VALIDTIME_NONFIXEDTIME = 3 [ (resdata.keyword_alias) = "非固定时间范围" ];
    VALIDTIME_LAST         = 4;
}
enum RES_SCARCE_LEVEL_TYPE {
    SCARCE_LEVEL_Normal = 0 [ (resdata.keyword_alias) = "低" ];
    SCARCE_LEVEL_MEDIUM = 1 [ (resdata.keyword_alias) = "中" ];
    SCARCE_LEVEL_HIEGHT = 2 [ (resdata.keyword_alias) = "高" ];
    SCARCE_LEVEL_MAX    = 3;
}
enum RES_PROP_QUALITY_TYPE {
    PROP_INVALID = 0 [ (resdata.keyword_alias) = "白" ];
    PROP_GREEN   = 1 [ (resdata.keyword_alias) = "绿" ];
    PROP_BLUE    = 2 [ (resdata.keyword_alias) = "蓝" ];
    PROP_PURPLE  = 3 [ (resdata.keyword_alias) = "紫" ];
    PROP_ORANGE  = 4 [ (resdata.keyword_alias) = "橙" ];
    PROP_LAST    = 5;
}

enum RES_CHESS_HERO_QUALITY_TYPE {
    HERO_QUALITY_INVALID = 0;
    HERO_QUALITY_WHITE   = 1 [ (resdata.keyword_alias) = "1" ];
    HERO_QUALITY_GREEN   = 2 [ (resdata.keyword_alias) = "2" ];
    HERO_QUALITY_BLUE    = 3 [ (resdata.keyword_alias) = "3" ];
    HERO_QUALITY_PURPLE  = 4 [ (resdata.keyword_alias) = "4" ];
    HERO_QUALITY_ORANGE  = 5 [ (resdata.keyword_alias) = "5" ];
}

enum RES_PROP_USE_TYPE {
    USETYPE_UNUSABLE = 0 [ (resdata.keyword_alias) = "不可使用" ];
    USETYPE_PACKUSE  = 1 [ (resdata.keyword_alias) = "背包使用" ];
    USETYPE_AUTOUSE  = 2 [ (resdata.keyword_alias) = "自动使用" ];
    USETYPE_LAST     = 3;
}

enum EAITYPE {
    option (cltgen.gamecore_enum) = true;

    AITYPE_INVALID   = 0; // 无效类型 这个值一定要保留为0，不能修改.
    AITYPE_CLIENT_AI = 1 [ (resdata.keyword_alias) = "行为树" ];
    AITYPE_SERVER_AI = 2 [ (resdata.keyword_alias) = "AILab" ];
}

// 道具配置
message ResItemPropCfgDataBin {
    option (cltgen.pk) = "ID";

    option (cltgen.system_databin)   = true;
    option (cltgen.gamecore_databin) = true;
    option (cltgen.random_access)    = Runtime;

    uint32 ID                = 1 [ (resdata.cname) = "道具ID", (bingogen.primary_key) = 1 ];
    string Name              = 2 [ (resdata.cname) = "道具名", (resdata.translate) = true ];
    string BigIcon           = 3 [ (resdata.cname) = "道具大图标" ];
    string Icon              = 4 [ (resdata.cname) = "道具图标" ];
    uint32 Quality           = 5 [ (resdata.cname) = "品质", (resdata.bind) = "RES_PROP_QUALITY_TYPE" ];
    uint32 Type              = 6 [ (resdata.cname) = "类型", (resdata.bind) = "RES_PROP_TYPE" ];
    string Desc              = 7 [ (resdata.cname) = "道具描述", (resdata.translate) = true ];
    uint32 ShowTab           = 8 [ (resdata.cname) = "显示页签" ];
    uint32 ShowSort          = 9 [ (resdata.cname) = "显示排序" ];
    uint32 UseType           = 10 [ (resdata.cname) = "使用方式", (resdata.bind) = "RES_PROP_USE_TYPE" ];
    uint32 OverLimit         = 11 [ (resdata.cname) = "堆叠上限" ];
    uint32 OverLimitGetType  = 12 [ (resdata.cname) = "达到上限后获取类型", (resdata.bind) = "RES_PROP_OVERLIMIT_TYPE" ];
    uint32 ValidTimeType     = 13 [ (resdata.cname) = "时限类型", (resdata.bind) = "RES_PROP_VALIDTIME_TYPE" ];
    string UseStartTimeStr   = 14 [ (resdata.cname) = "有效开始时间" ];
    string UseEndTimeStr     = 15 [ (resdata.cname) = "有效结束时间" ];
    uint32 UseStartTimeGen   = 16;
    uint32 UseEndTimeGen     = 17;
    uint32 ValidTime         = 18 [ (resdata.cname) = "有效时长" ];
    uint32 ExpireDealType    = 19 [ (resdata.cname) = "超时处理方式", (resdata.bind) = "RES_PROP_TIMEOUT_PROCESSTYPE" ];
    uint32 SaleCoinType      = 20 [ (resdata.cname) = "出售货币类型", (resdata.bind) = "COM_GAMEMONEY_SUBTYPE" ];
    uint32 SaleCoinCnt       = 21 [ (resdata.cname) = "出售货币价格" ];
    repeated uint32 EftParam = 22 [ (resdata.cname) = "效果参数", (resdata.count) = "Legacy.RES_MAX_ITEMEFT_PARAM_NUM", (resdata.bind) = "COM_GAMEMONEY_SUBTYPE" ];
    uint32 EftParamCount     = 23 [ (resdata.cname) = "效果参数数量" ];
    uint32 ClientAutoOpen    = 24 [ (resdata.cname) = "客户端自动使用" ];
    string ItemVideoPath     = 25 [ (resdata.cname) = "特效视频地址" ];
    bool NotBulkUse          = 26 [ (resdata.cname) = "不可批量使用" ];
    string JumpParam         = 27 [ (resdata.cname) = "跳转" ];
    uint32 ScarceLevel       = 28 [ (resdata.cname) = "稀有度", (resdata.bind) = "RES_SCARCE_LEVEL_TYPE" ];
    bool IsUseNow            = 29 [ (resdata.cname) = "立即使用" ];
    string FlatIcon          = 30 [ (resdata.cname) = "平面图标" ];
}

message ResMoneyInfoCfg {
    option (cltgen.pk) = "Type";

    option (cltgen.system_databin) = true;
    option (cltgen.random_access)  = Runtime;

    uint32 Type         = 1 [ (resdata.cname) = "货币类型", (resdata.bind) = "COM_GAMEMONEY_SUBTYPE", (bingogen.primary_key) = 1 ];
    string Name         = 2 [ (resdata.cname) = "货币名称", (resdata.translate) = true ];
    string Icon         = 3 [ (resdata.cname) = "平面图标" ];
    string ItemIcon     = 4 [ (resdata.cname) = "物品货币图标" ];
    string BigItemIcon  = 5 [ (resdata.cname) = "大物品货币图标" ];
    string Desc         = 6 [ (resdata.cname) = "货币描述" ,(resdata.translate) = true];
    string TypeDescDesc = 7 [ (resdata.cname) = "类型描述" ];
    uint32 MaxLimit     = 8 [ (resdata.cname) = "上限数值" ];
    uint32 TipLimit     = 9 [ (resdata.cname) = "提醒数值" ];
}
message ResItemShowCfg {
    option (cltgen.pk)             = "ItemType";
    option (cltgen.system_databin) = true;

    uint32 ItemType    = 1 [ (resdata.cname) = "物品类型", (resdata.bind) = "COM_GAMEITEM_TYPE", (bingogen.primary_key) = 1 ];
    string Name        = 2 [ (resdata.cname) = "物品名称" , (resdata.translate) = true];
    string ItemIcon    = 3 [ (resdata.cname) = "物品图标" ];
    string BigItemIcon = 4 [ (resdata.cname) = "大物品图标" ];
    string ItemDes     = 5 [ (resdata.cname) = "物品描述" , (resdata.translate) = true ];
    string ItemTypeDes = 6 [ (resdata.cname) = "类型描述" , (resdata.translate) = true ];
    string FlatIcon    = 7 [ (resdata.cname) = "平面图标" ];
}

enum RES_HEADIMG_TYPE {
    IMGTYPE__reserved__ = 0;
    IMGTYPE_RANK        = 1 [ (resdata.keyword_alias) = "排位头像框" ];
    IMGTYPE_ACTIVITY    = 2 [ (resdata.keyword_alias) = "活动头像框" ];
}

message ResHeadImgInfoCfg {
    option (cltgen.pk)             = "ID";
    option (cltgen.system_databin) = true;
    option (cltgen.random_access)  = Runtime;

    uint32 ID          = 1 [ (resdata.cname) = "ID", (bingogen.primary_key) = 1 ];
    string Name        = 2 [ (resdata.cname) = "名称", (resdata.translate) = true ];
    string Desc        = 3 [ (resdata.cname) = "描述", (resdata.translate) = true ];
    string UrlPath     = 4 [ (resdata.cname) = "资源路径" ];
    uint32 Type        = 5 [ (resdata.cname) = "类型", (resdata.bind) = "RES_HEADIMG_TYPE" ];
    uint32 LifeType    = 6 [ (resdata.cname) = "生命时长类型", (resdata.bind) = "COM_LIFE_TYPE" ];
    uint64 LifeTime    = 7 [ (resdata.cname) = "生命时长参数" ];
    uint32 Quality     = 8 [ (resdata.cname) = "品质", (resdata.bind) = "RES_PROP_QUALITY_TYPE" ];
    uint32 ScarceLevel = 9 [ (resdata.cname) = "稀有度", (resdata.bind) = "RES_SCARCE_LEVEL_TYPE" ];
    ResEnableInfo EnableInfo = 10 [ (resdata.cname) = "" ];
    float Scale        = 11 [ (resdata.cname) = "缩放比例" ];
}

enum RES_HEAD_TYPE {
    HEADTYPE__reserved__ = 0;
    HEADTYPE_LORD        = 1 [ (resdata.keyword_alias) = "领主头像" ];
    HEADTYPE_PLATFORM    = 2 [ (resdata.keyword_alias) = "平台头像" ];
}

message ResSystemUICfgDataBin {
    option (cltgen.pk)             = "ID";
    option (cltgen.system_databin) = true;
    option (cltgen.random_access)  = Editor;

    uint32 ID                 = 1 [ (resdata.cname) = "系统ID", (resdata.bind) = "RES_SYSTEM_UI_TYPE", (bingogen.primary_key) = 1 ];
    string Name               = 2 [ (resdata.cname) = "系统名称" ];
    string Desc               = 3 [ (resdata.cname) = "系统描述" ];
    string ScenePath          = 4 [ (resdata.cname) = "通用3D场景" ];
    string SceneLightPath     = 5 [ (resdata.cname) = "通用3D场景灯光" ];
    string InitCameraAge      = 7 [ (resdata.cname) = "初始镜头" ];
    string ImmersionCameraAge = 8 [ (resdata.cname) = "沉浸式镜头" ];
    string NormalCameraAge    = 9 [ (resdata.cname) = "非沉浸式镜头" ];

    string SceneExtra = 10 [ (resdata.cname) = "场景备注列" ];
}

message ResDT_BGMInfo {
    string Bank      = 1 [ (resdata.cname) = "Bank" ];
    string PlayEvent = 2 [ (resdata.cname) = "播放事件" ];
    string StopEName = 3 [ (resdata.cname) = "停止事件" ];
}

enum EBGMSwitchTimeType {
    EBGMSwitchTimeType_None         = 0;
    EBGMSwitchTimeType_UISateChange = 1 [ (resdata.keyword_alias) = "UI状态切换" ];
    EBGMSwitchTimeType_BGMEvent     = 2 [ (resdata.keyword_alias) = "BGM事件" ];
}

enum EBGMSwitchEventType {
    EBGMSwitchEventType_None          = 0;
    EBGMSwitchEventType_InGameLoading = 1 [ (resdata.keyword_alias) = "BGM事件_单局Loading" ];
    EBGMSwitchEventType_Settle        = 2 [ (resdata.keyword_alias) = "BGM事件_结算" ];
    EBGMSwitchEventType_LordChoose    = 3 [ (resdata.keyword_alias) = "BGM事件_选领主" ];
}

message ResDT_BGMSwitchTime {
    uint32 Type            = 1 [ (resdata.cname) = "类型", (resdata.bind) = "EBGMSwitchTimeType" ];
    string StrParam        = 2 [ (resdata.cname) = "字符串参数" ];
    repeated uint32 Params = 3 [ (resdata.cname) = "参数", (resdata.count) = "5" ];
}

message ResBGMCfg {
    option (cltgen.system_databin) = true;
    option (cltgen.random_access)  = Runtime;

    ResDT_BGMInfo BGMInfo          = 1 [ (resdata.cname) = "背景音" ];
    ResDT_BGMSwitchTime SwitchTime = 2 [ (resdata.cname) = "切换时机" ];
    float DelayTime                = 3 [ (resdata.cname) = "延迟时间" ];
}

message ResHeadInfoCfg {
    option (cltgen.pk) = "ID";

    option (cltgen.system_databin) = true;
    option (cltgen.random_access)  = Runtime;

    uint32 ID       = 1 [ (resdata.cname) = "ID", (bingogen.primary_key) = 1 ];
    string Name     = 2 [ (resdata.cname) = "名称", (resdata.translate) = true ];
    string Desc     = 3 [ (resdata.cname) = "描述", (resdata.translate) = true ];
    string UrlPath  = 4 [ (resdata.cname) = "资源路径" ];
    uint32 Type     = 5 [ (resdata.cname) = "类型", (resdata.bind) = "RES_HEAD_TYPE" ];
    uint32 LifeType = 6 [ (resdata.cname) = "生命时长类型", (resdata.bind) = "COM_LIFE_TYPE" ];
    uint64 LifeTime = 7 [ (resdata.cname) = "生命时长参数" ];
    ResEnableInfo EnableInfo = 8 [ (resdata.cname) = "" ];
}

message ResGiftStrategyCfg {
    uint32 OpenCnt = 1 [ (resdata.cname) = "次数" ];
    uint32 DropID  = 2 [ (resdata.cname) = "掉落ID" ];
}

// 礼包保底策略数据档.
message ResGiftGuaranteeStrategyDataBin {
    option (resdata.output) = Server;

    uint32 ID                                = 1 [ (resdata.cname) = "保底礼包ID", (bingogen.primary_key) = 1 ];
    repeated ResGiftStrategyCfg StrategyCfgs = 2 [ (resdata.cname) = "保底触发", (resdata.count) = "Legacy.GIFT_STRATEGY_MAX_CNT" ];
    uint32 CheckDropID                       = 3 [ (resdata.cname) = "检查ID" ];
}

message ItemConf {
    ResItemPropCfgDataBin PropInfo                        = 1 [ (bingogen.databin_path) = "" ];
    ResMoneyInfoCfg MoneyInfo                             = 2 [ (bingogen.databin_path) = "" ];
    ResHeadImgInfoCfg HeadImgInfo                         = 3 [ (bingogen.databin_path) = "" ];
    ResHeadInfoCfg HeadInfo                               = 4 [ (bingogen.databin_path) = "" ];
    ResGiftGuaranteeStrategyDataBin GiftGuaranteeStrategy = 5 [ (bingogen.databin_path) = "" ];
}

// enum RES_DROPRATE_TYPE
// {
//     RES_DROPRATE_TYPE__reserved__ = 0;
//     RES_DROPRATE_RANDOMRATE = 1 [(resdata.keyword_alias) = "随机概率"];
//     RES_DROPRATE_WHOLERATE = 2 [(resdata.keyword_alias) = "整体概率"];
// }

message ResDropItemCfg {
    option (cltgen.index) = "ID";
    option (cltgen.system_databin) = true;

    uint32 ID         = 1 [ (resdata.cname) = "ID" ];
    ResGameItem Award = 2 [ (resdata.cname) = "掉落物" ];
    uint32 RateType   = 3 [ (resdata.cname) = "概率类型", (resdata.bind) = "RES_PROJECT8_DROP_PROBILITY_TYPE" ];
    uint32 RateValue  = 4 [ (resdata.cname) = "概率数值" ];
    uint32 LimitID    = 5 [ (resdata.cname) = "限制ID" ];
}

message ResDropDataCfg {
    option (cltgen.pk)             = "DropID";
    option (cltgen.system_databin) = true;

    uint32 DropID            = 1 [ (resdata.cname) = "掉落ID", (bingogen.primary_key) = 1 ];
    repeated uint32 DropItem = 2 [ (resdata.cname) = "掉落集合ID", (resdata.count) = "Legacy.RES_MAX_DROPITEM_NUM" ];
    uint32 MixDropCnt        = 3 [ (resdata.cname) = "最小掉落数量" ];
    uint32 MaxDropCnt        = 4 [ (resdata.cname) = "最大掉落数量" ];
}

enum RES_LIMITCYCLE_TYPE {
    RES_LIMITCYCLE_TYPE__reserved__ = 0;
    RES_LIMITCYCLE_DAY              = 1 [ (resdata.keyword_alias) = "日限制" ];
    RES_LIMITCYCLE_WEEK             = 2 [ (resdata.keyword_alias) = "周限制" ];
}

message ResLimitInfoCfg {
    option (cltgen.pk)             = "LimitID";
    option (cltgen.system_databin) = true;

    uint32 LimitID    = 1 [ (resdata.cname) = "限制ID", (bingogen.primary_key) = 1 ];
    uint32 ItemType   = 2 [ (resdata.cname) = "物品类型", (resdata.bind) = "COM_GAMEITEM_TYPE" ];
    uint32 ItemID     = 3 [ (resdata.cname) = "物品ID", (resdata.bind) = "COM_GAMEMONEY_SUBTYPE" ];
    uint32 LimitCnt   = 4 [ (resdata.cname) = "数量上限" ];
    uint32 LimitCycle = 5 [ (resdata.cname) = "限制周期", (resdata.bind) = "RES_LIMITCYCLE_TYPE" ];
}

message ResDropsExcludeRepeatDataBin {
    option (cltgen.pk)             = "ItemType";
    option (cltgen.system_databin) = true;

    uint32 ItemType = 1 [ (resdata.cname) = "类型", (resdata.bind) = "COM_GAMEITEM_TYPE", (bingogen.primary_key) = 1 ];
}

message DropConf {
    ResDropDataCfg DropData                        = 1 [ (bingogen.databin_path) = "" ];
    ResDropItemCfg DropItem                        = 2 [ (bingogen.databin_path) = "" ];
    ResLimitInfoCfg ItemLimit                      = 3 [ (bingogen.databin_path) = "" ];
    ResDropsExcludeRepeatDataBin DropExcludeRepeat = 4 [ (bingogen.databin_path) = "" ];
}

//####通用结构-结束####

//####赛季结构-开始####
// 赛季主表
message ResSeasonDataBin {
    option (cltgen.pk) = "SeasonID";

    option (cltgen.system_databin) = true;
    option (cltgen.random_access)  = Runtime;

    uint32 SeasonID          = 1 [ (resdata.cname) = "赛季ID", (bingogen.primary_key) = 1 ];
    string StartTime         = 2 [ (resdata.cname) = "开始时间" ];
    string EndTime           = 3 [ (resdata.cname) = "结束时间" ];
    string Name              = 4 [ (resdata.cname) = "赛季名称", (resdata.translate) = true ];
    string Desc              = 5 [ (resdata.cname) = "赛季描述", (resdata.translate) = true ];
    string SettleOverdueTime = 6 [ (resdata.cname) = "结算失效时间" ];
    bool Enabled             = 7 [ (resdata.cname) = "是否启用" ];
}

message ResSeasonRankAwardsDataBin // S.赛季结算段位奖励表 (赛季结算的时候根据达到过的最大段位发奖励)
{
    option (cltgen.pk)             = "SeasonID, Rank";
    option (cltgen.system_databin) = true;

    uint32 SeasonID    = 1 [ (resdata.cname) = "赛季ID", (bingogen.primary_key) = 1 ];
    uint32 Rank        = 2 [ (resdata.cname) = "段位", (bingogen.primary_key) = 2, (resdata.bind) = "EPvpRankType" ];
    uint32 AwardDropID = 3 [ (resdata.cname) = "奖励掉落ID" ];
}

message ResInSeasonRankAwardsDataBin // S.赛季中段位奖励表 (赛季中达到段位之后玩家主动领取奖励)
{
    option (cltgen.pk)             = "SeasonID, Rank";
    option (cltgen.system_databin) = true;

    uint32 SeasonID    = 1 [ (resdata.cname) = "赛季ID", (bingogen.primary_key) = 1 ];
    uint32 Rank        = 2 [ (resdata.cname) = "段位", (bingogen.primary_key) = 2, (resdata.bind) = "EPvpRankType" ];
    uint32 AwardDropID = 3 [ (resdata.cname) = "奖励掉落ID" ];
    EMailID MailID     = 4 [ (resdata.cname) = "邮件ID"];
}

message ResSeasonRankTaskDataBin // 赛季任务表
{
    option (cltgen.pk)             = "TaskID";
    option (cltgen.index)          = "SeasonID";
    option (cltgen.system_databin) = true;

    uint32 TaskID          = 1 [ (resdata.cname) = "任务ID", (bingogen.primary_key) = 1 ];
    uint32 SeasonID        = 2 [ (resdata.cname) = "赛季ID" ];
    uint32 Rank            = 3 [ (resdata.cname) = "段位", (resdata.bind) = "EPvpRankType" ];
    string Title           = 4 [ (resdata.cname) = "任务标题", (resdata.translate) = true ];
    string Desc            = 5 [ (resdata.cname) = "任务描述", (resdata.translate) = true ];
    ResCondInfo FinishCond = 6 [ (resdata.cname) = "完成条件" ];
    uint32 AwardDropID     = 7 [ (resdata.cname) = "奖励掉落ID" ];
}

enum SeasonGameRecordStatisticType {
    SeasonGameRecordStatisticType_GameType = 0 [ (resdata.keyword_alias) = "模式" ];
    SeasonGameRecordStatisticType_Lord     = 1 [ (resdata.keyword_alias) = "棋手" ];
}

//####邮件--开始####
enum COM_GAMETYPE_OPEN_METHOD {
    GTOM_Invalid   = 0;
    GTOM_MatchRoom = 1 [ (resdata.keyword_alias) = "匹配房间" ];
    GTOM_AreaRoom  = 2 [ (resdata.keyword_alias) = "密码房间" ];
    GTOM_LocalRoom = 3 [ (resdata.keyword_alias) = "单机房间" ];
    GTOM_Max       = 4;
}

message ResSeasonGameTypesBin // S.赛季模式表
{
    option (cltgen.pk)             = "SeasonID, GameType";
    option (cltgen.index)          = "SeasonID";
    option (cltgen.index)          = "SeasonID, GameTypeTheme";
    option (cltgen.random_access)  = Runtime;
    option (cltgen.system_databin) = true;

    uint32 SeasonID                = 1 [ (resdata.cname) = "赛季ID", (bingogen.primary_key) = 1 ];
    uint32 GameType                = 2 [ (resdata.cname) = "模式", (bingogen.primary_key) = 2, (resdata.bind) = "COM_GAME_TYPE" ];
    uint32 GameTypeTheme           = 3 [ (resdata.cname) = "主题", (resdata.bind) = "COM_GAME_BIG_TYPE_THEME" ];
    PLAYMOD_TYPE PlayModID         = 4 [ (resdata.cname) = "PlayModID" ];
    uint32 IsLimitRoomRank         = 5 [ (resdata.cname) = "是否限制房间段位" ];
    int32 RoomPlayerMaxNum         = 6 [ (resdata.cname) = "房间最大人数限制" ];
    ResGameItem ScoreProtectItemID = 7 [ (resdata.cname) = "积分保护道具" ];
    string StartTime               = 8 [ (resdata.cname) = "模式开始时间" ];
    string EndTime                 = 9 [ (resdata.cname) = "模式结束时间" ];
    bool OtherUIIsShow             = 10 [ (resdata.cname) = "其他界面是否启用" ];
    uint32 LordSelectRepeat        = 11 [ (resdata.cname) = "是否允许重复选择棋手" ];
    bool IsSettleLordProficiency   = 12 [ (resdata.cname) = "是否结算棋手熟练度" ];
    uint32 CanExitGameTime         = 13 [ (resdata.cname) = "可退出游戏时间秒数" ];
    uint32 ShowRankGameType        = 14 [ (resdata.cname) = "房间段位显示关联", (resdata.bind) = "COM_GAME_TYPE" ];
    uint32 SettleMinSec            = 15 [ (resdata.cname) = "结算最少游戏时长秒" ];
    bool IsShowSkillDesc           = 16 [ (resdata.cname) = "是否显示技能描述" ];
    bool IsEnableSendRecord        = 17 [ (resdata.cname) = "是否允许发送战绩" ];
    uint32 RecordStatisticType     = 18 [ (resdata.cname) = "战绩统计方式", (resdata.bind) = "SeasonGameRecordStatisticType" ];
}

message ResLanguageText
{
    GAMELANGUAGE_TYPE LanguageType = 1 [ (resdata.cname) = "语言"];
    string Text = 2                    [ (resdata.cname) = "文本"];
}


message ResSeasonPlayCenterBin // S.赛季玩法中心配置表
{
    option (cltgen.pk)             = "SeasonID, GameTypeTheme, GameType";
    option (cltgen.random_access)  = Runtime;
    option (cltgen.system_databin) = true;

    uint32 SeasonID                             = 1 [ (resdata.cname) = "赛季ID", (bingogen.primary_key) = 1 ];
    COM_GAME_BIG_TYPE_THEME GameTypeTheme       = 2 [ (resdata.cname) = "主题", (bingogen.primary_key) = 2, (resdata.bind) = "COM_GAME_BIG_TYPE_THEME" ];
    string ThemeName                            = 3 [ (resdata.cname) = "主题名称", (resdata.translate) = true ];
    uint32 GameType                             = 4 [ (resdata.cname) = "模式", (bingogen.primary_key) = 3, (resdata.bind) = "COM_GAME_TYPE" ];
    string GameTypeName                         = 5 [ (resdata.cname) = "模式名称1", (resdata.translate) = true ];
    string GameTypeName2                        = 6 [ (resdata.cname) = "模式名称2", (resdata.translate) = true ];
    COM_GAMETYPE_OPEN_METHOD GameTypeOpenMethod = 7 [ (resdata.cname) = "开启方式", (resdata.bind) = "COM_GAMETYPE_OPEN_METHOD" ];
    uint32 ThemeOrder                           = 8 [ (resdata.cname) = "主题显示排序" ];
    uint32 TabOrder                             = 9 [ (resdata.cname) = "模式显示排序" ];
    string StartTime                            = 10 [ (resdata.cname) = "开始时间" ];
    string EndTime                              = 11 [ (resdata.cname) = "结束时间" ];
    repeated string WeeklyOpenTimes             = 12 [ (resdata.cname) = "星期", (resdata.count) = "Legacy.RES_WEEKLY_OPENTIME_NUM" ];
    string NotOpenTips                          = 13 [ (resdata.cname) = "未开放提示", (resdata.translate) = true ];
    string SelectedIcon                         = 14 [ (resdata.cname) = "模式图片Icon" ];
    string GameTypeIcon                         = 15 [ (resdata.cname) = "模式图标" ];
    string BgIconPath                           = 16 [ (resdata.cname) = "模式图标背景" ];
    string GameTypeMaskPath                     = 17 [ (resdata.cname) = "模式遮罩图" ];
    string GameTypeNameArtPath                  = 18 [ (resdata.cname) = "模式名称图" ];
    string GameTypeBgColor                      = 19 [ (resdata.cname) = "背景颜色" ];
    bool IsEnable                               = 20 [ (resdata.cname) = "是否开启" ];
    string NotOpenTipsSvr                       = 21 [ (resdata.cname) = "Svr下发未开放提示" ];
    string NotOpenTipsSvrNotFound               = 22 [ (resdata.cname) = "Svr下发未开放提示保底" ];
    bool IsShowHundred                          = 23 [ (resdata.cname) = "百强榜是否显示" ];
    bool IsShowSeasonTrip                       = 24 [ (resdata.cname) = "赛季之旅是否显示" ];
    repeated ResLanguageText Tips               = 25 [ (resdata.cname) = "提示",(resdata.count) = "Legacy.RES_MAX_LANGUAGE_CNT" ];
}

message ResSeasonRankInherit // S.赛季段位继承表
{
    uint32 OldSeasonID  = 1 [ (resdata.cname) = "老赛季ID", (bingogen.primary_key) = 1 ];
    uint32 NewSeasonID  = 2 [ (resdata.cname) = "新赛季ID" ];
    uint32 OldRankRank  = 3 [ (resdata.cname) = "赛季末段位", (bingogen.primary_key) = 2, (resdata.bind) = "EPvpRankType" ];
    uint32 OldRankLevel = 4 [ (resdata.cname) = "赛季末阶数", (bingogen.primary_key) = 3 ];
    uint32 NewRankRank  = 5 [ (resdata.cname) = "新赛季段位", (resdata.bind) = "EPvpRankType" ];
    uint32 NewRankLevel = 6 [ (resdata.cname) = "新赛季阶数" ];
}


// COM_SEASON_PLAYER_TYPE 赛季玩家类型.
enum COM_SEASON_PLAYER_TYPE {
    CSPT_MIN           = 0 ;
    CSPT_COMPETITION   = 1 [(resdata.keyword_alias) = "赛季竞技玩家"];
    CSPT_SOCIAL        = 2 [(resdata.keyword_alias) = "赛季社交玩家"];
    CSPT_COLLECT       = 3 [(resdata.keyword_alias) = "赛季收集消费玩家"];
    //CSPT_ENTERTAINMENT = 4 [(resdata.keyword_alias) = "赛季娱乐类型玩家"];
    CSPT_MAX           = 4 ;
}

// COM_SEASON_PLAYER_CONDITION 赛季玩家条件.
enum COM_SEASON_PLAYER_CONDITION {
    CSPC_INVALID                = 0;
    CSPC_USE_COLOR_FETTER       = 1 [(resdata.keyword_alias) = "赛季使用彩色组合次数"];// 未实现
    CSPC_USE_FETTER             = 2 [(resdata.keyword_alias) = "赛季使用组合次数"];
    CSPC_LORD_TOP1              = 3 [(resdata.keyword_alias) = "赛季领主吃鸡次数"];
    CSPC_LORD_TOP4              = 4 [(resdata.keyword_alias) = "赛季领主前四次数"];
    CSPC_LORD_FIRST_TOP1_TIME   = 5 [(resdata.keyword_alias) = "赛季领主首次吃鸡"];
    CSPC_FIRST_KING_RANK_TIME   = 6 [(resdata.keyword_alias) = "赛季首次王者段位"];
    CSPC_RANK_CONTINUOUSLY_TOP4 = 7 [(resdata.keyword_alias) = "赛季排位赛连续前四"];
    CSPC_THUMBUP_CNT            = 8 [(resdata.keyword_alias) = "赛季点赞次数"]; // 未实现
    CSPC_ADD_FRIEND_CNT         = 9 [(resdata.keyword_alias) = "赛季添加好友次数"];
    CSPC_OWN_LORD_SKIN_CNT      = 10 [(resdata.keyword_alias) = "赛季获得皮肤数量"];
    CSPC_OWN_CHESSBORD_CNT      = 11 [(resdata.keyword_alias) = "赛季收集棋盘数"];
    CSPC_TEAM_PLAYER_CNT        = 12 [(resdata.keyword_alias) = "赛季组队玩家数"];
    CSPC_BE_DISCOVERED_CNT      = 13 [(resdata.keyword_alias) = "赛季被其他玩家点击发现强敌的场次"];
    CSPC_REACH_MAX_TOKEN        = 14 [(resdata.keyword_alias) = "赛季满级战令的时间"];
    CSPC_BADGES_CNT             = 15 [(resdata.keyword_alias) = "赛季徽章数量"]; // 未实现
}

message ResSeasonPlayerConditions // S.赛季结算玩家分类条件表.xlsx
{
    COM_SEASON_PLAYER_TYPE PlayerType         = 1 [(resdata.cname) = "玩家类型", (bingogen.primary_key) = 1];
    COM_SEASON_PLAYER_CONDITION ConditionType = 2 [(resdata.cname) = "条件类型", (bingogen.primary_key) = 2];
    string Message                            = 3 [(resdata.cname) = "文本" ];
    int64 Para1                               = 4 [(resdata.cname) = "参数1"];
    int64 Para2                               = 5 [(resdata.cname) = "参数2"];
    int64 Para3                               = 6 [(resdata.cname) = "参数3"];
    int64 Para4                               = 7 [(resdata.cname) = "参数4"];
    int32 DisplayWeight                       = 8 [(resdata.cname) = "显示权重"];
    int32 TypeWeight                          = 9 [(resdata.cname) = "类型权重"];
}

message ResSeasonPlayerConcludingMsg // S.赛季结算玩家总结语.xlsx
{
    COM_SEASON_PLAYER_TYPE PlayerType  = 1 [ (resdata.cname) = "玩家类型", (bingogen.primary_key) = 1 ];
    string ConcludingMessage           = 2 [ (resdata.cname) = "总结语" ];
    uint32 DisplayCondsCnt             = 3 [ (resdata.cname) = "最大显示条目数量"];
}

message SeasonConf {
    ResSeasonDataBin Season                = 1 [ (bingogen.databin_path) = "" ];
    ResSeasonRankAwardsDataBin RankAwards  = 2 [ (bingogen.databin_path) = "" ];
    ResSeasonRankTaskDataBin RankTaskData  = 3 [ (bingogen.databin_path) = "" ];
    ResSeasonGameTypesBin GameTypeData     = 4 [ (bingogen.databin_path) = "" ];
    ResSeasonRankInherit SeasonRankInherit = 5 [ (bingogen.databin_path) = "" ];
    ResPlayMod PlayModeCfg                 = 6 [ (bingogen.databin_path) = "" ];
    ResSeasonPlayCenterBin PlayCenter      = 7 [ (bingogen.databin_path) = "" ];
    ResSeasonPlayerConditions PlayerConds  = 8 [ (bingogen.databin_path) = "" ];
    ResSeasonPlayerConcludingMsg PlayerConcluding = 9  [ (bingogen.databin_path) = "" ];
    ResInSeasonRankAwardsDataBin InSeasonRankAwards = 10 [ (bingogen.databin_path) = "" ];
}

//####赛季结构-结束####

//####邮件--开始####
enum ResMailType {
    ResMailType__reserved__ = 0;
    ResMailTypeSystem       = 1 [ (resdata.keyword_alias) = "系统邮件" ];
    ResMailTypeFriend       = 2 [ (resdata.keyword_alias) = "好友邮件" ];
    ResMailTypeMax          = 3;
}

message ResTemplateMailDataBin {
    option (cltgen.pk)             = "ID";
    option (cltgen.system_databin) = true;

    uint32 ID            = 1 [ (bingogen.primary_key) = 1, (resdata.cname) = "ID", (resdata.bind) = "EMailID" ];
    string SenderName    = 2 [ (resdata.cname) = "发送人" ];
    uint32 Type          = 3 [ (resdata.cname) = "类型", (resdata.bind) = "ResMailType" ];
    string Title         = 4 [ (resdata.cname) = "标题", (resdata.translate) = true ];
    string Body          = 5 [ (resdata.cname) = "正文", (resdata.translate) = true ];
    uint32 SaveInterval  = 6 [ (resdata.cname) = "存储时间" ];
    uint32 ParamNum      = 7 [ (resdata.cname) = "参数数量" ];
    string BackgroundURL = 8 [ (resdata.cname) = "背景图URL" ];
    uint32 ShowWeight    = 9 [ (resdata.cname) = "展示权重" ];
}


message MultiLangMailContent {
    GAMELANGUAGE_TYPE LanguageRule = 1 [(resdata.cname) = "语言"];
    string SenderName              = 2 [(resdata.cname) = "发送人"];
    string Title                   = 3 [(resdata.cname) = "标题"];
    string Body                    = 4 [(resdata.cname) = "正文"];
}

message ResGlobalMailDataBin {
    option (resdata.output) = Server;

    uint32 ID                              = 1 [(bingogen.primary_key) = 1, (resdata.cname) = "ID"];
    string StartTime                       = 2 [(resdata.cname) = "开始时间"];
    string EndTime                         = 3 [(resdata.cname) = "结束时间"];
    uint32 StartTimeGen                    = 4;
    uint32 EndTimeGen                      = 5;
    ResCondInfo UnlockCond                 = 6 [(resdata.cname) = "解锁条件"];
    repeated MultiLangMailContent Contents = 7 [(resdata.cname) = "内容", (resdata.count) = "Legacy.RES_MAX_LANGUAGE_CNT"];
    uint32 SaveInterval                    = 8 [(resdata.cname) = "存储时间"];
    repeated ResGameItem Award             = 9 [(resdata.cname) = "奖励", (resdata.count) = "Legacy.RES_MAX_MAIL_AWARD_NUM"];
    string BackgroundURL                   = 10 [(resdata.cname) = "背景图URL"];
    uint32 ShowWeight                      = 11 [(resdata.cname) = "展示权重"];
}

message ResMailSysOpt {
    option (resdata.output) = Server;

    uint32 ID                        = 1 [ (bingogen.primary_key) = 1, (resdata.cname) = "ID" ];
    uint32 UnreadMailDefaultSaveTime = 2 [ (resdata.cname) = "未读邮件默认保存时间" ];
    uint32 ReadedMailSaveTime        = 3 [ (resdata.cname) = "已读邮件保存时间" ];
}

message MailConf {
    ResTemplateMailDataBin TemplateMail = 1 [ (bingogen.databin_path) = "" ];
    ResGlobalMailDataBin GlobalMail     = 2 [ (bingogen.databin_path) = "" ];
    ResMailSysOpt MailSysOpt            = 3 [ (bingogen.databin_path) = "" ];
}

//####邮件--结束####

// #### 聊天系统 -- 开始

message ResTalkEmojiCfgDataBin {
    option (cltgen.pk)    = "ID";
    option (cltgen.index) = "Type";
    option (cltgen.index) = "Text";

    option (cltgen.system_databin) = true;
    option (cltgen.random_access)  = Runtime;

    string Type = 1 [ (resdata.cname) = "类型" ];
    uint32 ID   = 2 [ (resdata.cname) = "ID", (bingogen.primary_key) = 1 ];
    string Text = 3 [ (resdata.cname) = "文本" ];
}

message ResTalkQuickMsgCfgDataBin {
    option (cltgen.pk)             = "ID";
    option (cltgen.system_databin) = true;
    option (cltgen.random_access)  = Runtime;

    uint32 ID   = 1 [ (resdata.cname) = "ID", (bingogen.primary_key) = 1 ];
    string Text = 2 [ (resdata.cname) = "文本", (resdata.translate) = true ];
}

message ResTalkInsideQuickMsgCfgDataBin {
    option (cltgen.pk)               = "ID";
    option (cltgen.index)            = "LordID";
    option (cltgen.index)            = "UseType";
    option (cltgen.index)            = "LordID,aiCommunicationType";
    option (cltgen.system_databin)   = true;
    option (cltgen.gamecore_databin) = true;
    option (cltgen.random_access)    = Runtime;

    uint32 ID                               = 1 [ (resdata.cname) = "短语ID" ];
    uint32 Order                            = 2 [ (resdata.cname) = "短语顺序" ];
    uint32 LordID                           = 3 [ (resdata.cname) = "对应棋手ID", (bingogen.primary_key) = 1 ];
    uint32 SkinID                           = 4 [ (resdata.cname) = "对应皮肤ID" ];
    string Text                             = 5 [ (resdata.cname) = "短语内容", (resdata.translate) = true ];
    string Voice                            = 6 [ (resdata.cname) = "对应语音" ];
    bool IsInitUnlock                       = 7 [ (resdata.cname) = "是否初始解锁" ];
    uint32 UseType                          = 8 [ (resdata.cname) = "应用场景" ];
    AICommunicationType aiCommunicationType = 9 [ (resdata.cname) = "AI交流类型" ];
    string Title                            = 10 [ (resdata.cname) = "短语标题", (resdata.translate) = true ];
    bool IsIncludedInFiles                  = 11 [ (resdata.cname) = "是否收录进档案"];
}

enum TALK_MSG_USE_TYPE {
    option (cltgen.gamecore_enum)    = true;
    USE_TYPE_NULL                    = 0;
    USE_TYPE_IN_GAME                 = 1 [ (resdata.keyword_alias) = "局内" ];
    USE_TYPE_LORD_CHOOSE_CONFIRM     = 2 [ (resdata.keyword_alias) = "棋手选择确认" ];
    USE_TYPE_LORD_CHOOSE_NOT_CONFIRM = 3 [ (resdata.keyword_alias) = "棋手选择未确认" ];
    USE_TYPE_AUCTION                 = 4 [ (resdata.keyword_alias) = "局内拍卖" ];
}

enum TALK_TYPE {
    TALK_TYPE_None          = 0;
    TALK_TYPE_World         = 1 [ (resdata.keyword_alias) = "世界" ];
    TALK_TYPE_City          = 2 [ (resdata.keyword_alias) = "城市" ];
    TALK_TYPE_Private       = 3 [ (resdata.keyword_alias) = "私聊" ];
    TALK_TYPE_Recruit       = 4 [ (resdata.keyword_alias) = "招募" ];
    TALK_TYPE_Room          = 5 [ (resdata.keyword_alias) = "房间" ];
    TALK_TYPE_RoomInside    = 6 [ (resdata.keyword_alias) = "局内房间" ];
    TALK_TYPE_PrivateInside = 7 [ (resdata.keyword_alias) = "局内私聊" ];
}

message ResTalkTypeInfoCfgDataBin {
    option (cltgen.pk)             = "ID";
    option (cltgen.system_databin) = true;
    option (cltgen.random_access)  = Runtime;

    uint32 ID          = 1 [ (resdata.cname) = "聊天类型ID", (resdata.bind) = "TALK_TYPE" ];
    uint32 CacheNumber = 2 [ (resdata.cname) = "缓存条数" ];
}

// #### 聊天系统 -- 结束

//####账号等级--开始####

// 等级经验表
message ResExpToLevelUpDataBin {
    option (cltgen.pk)             = "Level";
    option (cltgen.system_databin) = true;

    uint32 Level       = 1 [ (resdata.cname) = "等级", (bingogen.primary_key) = 1 ];
    uint32 ExpNeed     = 2 [ (resdata.cname) = "升级经验" ];
    uint32 AwardDropID = 3 [ (resdata.cname) = "奖励掉落ID" ];
    string TipStr      = 4 [ (resdata.cname) = "提示语" ];
}

// 经验加成表
message ResExpBufDatabin {
    option (resdata.output) = Server;

    uint32 ID                 = 1 [ (resdata.cname) = "ID", (bingogen.primary_key) = 1 ];
    uint32 ExpBuf             = 2 [ (resdata.cname) = "经验加成效果" ];
    string StartTimeStr       = 3 [ (resdata.cname) = "Buf开始时间" ];
    string EndTimeStr         = 4 [ (resdata.cname) = "Buf结束时间" ];
    repeated uint32 GameTypes = 5 [ (resdata.cname) = "Buf生效模式", (resdata.bind) = "COM_GAME_TYPE", (resdata.count) = "Legacy.RES_MAX_EXP_BUF_GAMETYPE" ];
}

message ExpConf {
    ResExpToLevelUpDataBin ExpToLvlUp = 1 [ (bingogen.databin_path) = "" ];
    ResExpBufDatabin ExpBuf           = 2 [ (bingogen.databin_path) = "" ];
}

//####账号等级--结束##

//####条件--开始##
message ResCondInfo {
    uint32 Type           = 1 [ (resdata.cname) = "类型", (resdata.bind) = "ECondType" ];
    int64 GoalCnt         = 2 [ (resdata.cname) = "目标值" ];
    repeated uint32 Param = 3 [ (resdata.cname) = "参数", (resdata.count) = "Legacy.RES_MAX_CONDITION_PARAMCNT", (resdata.bind) = "COM_GAMEMONEY_SUBTYPE,RES_RELATIVE_ID" ];
}

//####条件--结束##

//####解锁条件--开始##
enum RES_SYSLOCK_TYPE {
    LOCKTYPE_HIDE = 0 [ (resdata.keyword_alias) = "直接隐藏" ];
    LOCKTYPE_GREY = 1 [ (resdata.keyword_alias) = "加锁置灰" ];
}

message ResGameUnlockDataBin {
    option (cltgen.pk)             = "SystemType";
    option (cltgen.index)          = "SystemType, IsSystemTips";
    option (cltgen.system_databin) = true;

    uint32 SystemType               = 1 [ (resdata.cname) = "系统类型", (resdata.bind) = "RES_SYSTEM_TYPE", (bingogen.primary_key) = 1 ];
    bool IsSystemOpen               = 2 [ (resdata.cname) = "是否系统开放" ];
    bool IsSystemTips               = 3 [ (resdata.cname) = "是否解锁提示" ];
    string SystemTips               = 4 [ (resdata.cname) = "解锁提示描述", (resdata.translate) = true ];
    string UnLockTips               = 5 [ (resdata.cname) = "解锁后提示描述", (resdata.translate) = true ];
    uint32 LockType                 = 6 [ (resdata.cname) = "未解锁表现类型", (resdata.bind) = "RES_SYSLOCK_TYPE" ];
    string SystemIconPath           = 7 [ (resdata.cname) = "系统图标路径" ];
    uint32 SystemTipLevel           = 8 [ (resdata.cname) = "系统最低提示等级" ];
    repeated ResCondInfo UnlockCond = 9 [ (resdata.cname) = "解锁条件", (resdata.count) = "Legacy.RES_MAX_UNLOCKCOND_NUM" ];
    string SystemCloseTips          = 10 [ (resdata.cname) = "系统关闭提示描述", (resdata.translate) = true ];
}

message GameUnlockConf { ResGameUnlockDataBin GameUnlock = 1 [ (bingogen.databin_path) = "" ]; }

//####解锁条件--结束##

//####战令--开始##

enum COM_TOKEN_REFRESH_TYPE {
    COM_TOKEN_REFRESH_NULL   = 0 [ (resdata.keyword_alias) = "非法刷新类型" ];
    COM_TOKEN_REFRESH_DAILY  = 1 [ (resdata.keyword_alias) = "每日" ];
    COM_TOKEN_REFRESH_WEEKLY = 2 [ (resdata.keyword_alias) = "每周" ];
}

enum COM_SYSTEM_TYPE {
    COM_SYSTEM_TYPE_NULL = 0 [ (resdata.keyword_alias) = "非法系统类型" ];
    COM_SYSTEM_TYPE_RANK = 1 [ (resdata.keyword_alias) = "排位赛" ];
}

message ResTokenTaskCfgDataBin {
    option (cltgen.pk)             = "TaskID";
    option (cltgen.index)          = "TaskGroupID";
    option (cltgen.system_databin) = true;

    uint32 TaskID          = 1 [ (resdata.cname) = "任务ID", (bingogen.primary_key) = 1 ];
    uint32 TaskGroupID     = 2 [ (resdata.cname) = "任务组ID" ];
    string Icon            = 3 [ (resdata.cname) = "任务图标" ];
    string Title           = 4 [ (resdata.cname) = "任务标题", (resdata.translate) = true ];
    string Desc            = 5 [ (resdata.cname) = "任务描述", (resdata.translate) = true ];
    ResCondInfo FinishCond = 6 [ (resdata.cname) = "完成条件" ];
    uint32 AwardDropID     = 7 [ (resdata.cname) = "奖励掉落" ];
    uint32 SystemType      = 8 [ (resdata.cname) = "任务系统类型", (resdata.bind) = "COM_SYSTEM_TYPE" ];
    string PureIcon        = 9 [ (resdata.cname) = "纯图标" ];
}

message ResTokenTaskRefreshDataBin {
    option (cltgen.pk) = "RefreshID";

    option (cltgen.system_databin) = true;
    option (cltgen.random_access)  = Runtime;

    uint32 RefreshID                   = 1 [ (resdata.cname) = "刷新ID", (bingogen.primary_key) = 1 ];
    uint32 SeasonID                    = 2 [ (resdata.cname) = "赛季ID" ];
    repeated uint32 DailyTaskGroupIDs  = 4 [ (resdata.cname) = "日任务池", (resdata.count) = "Legacy.RES_MAX_TOKEN_DAILY_TASK_POOL_NUM" ];
    repeated uint32 WeeklyTaskGroupIDs = 6 [ (resdata.cname) = "周任务池", (resdata.count) = "Legacy.RES_MAX_TOKEN_WEEKLY_TASK_POOL_NUM" ];
    uint32 IsNewbie                    = 7 [ (resdata.cname) = "是否新手" ]; // 每个赛季有且仅有一个新手任务刷新ID
}

message STTokenEffectInfo {
    uint32 MaxDailyTaskNum         = 1 [ (resdata.cname) = "每日任务数" ];
    uint32 MaxWeeklyTaskNum        = 2 [ (resdata.cname) = "每周任务数" ];
    uint32 MaxDailyTaskRefreshNum  = 3 [ (resdata.cname) = "每日任务刷新数" ];
    uint32 MaxWeeklyTaskRefreshNum = 4 [ (resdata.cname) = "每周任务刷新数" ];
    uint32 HangupMaxSecond         = 5 [ (resdata.cname) = "挂机最大秒数" ];
}

message ResTokenSeasonCfgDataBin {
    option (cltgen.pk)             = "SeasonID";
    option (cltgen.system_databin) = true;

    uint32 SeasonID                  = 1 [ (resdata.cname) = "赛季ID", (bingogen.primary_key) = 1 ];
    uint32 AutoAward                 = 3 [ (resdata.cname) = "自动领奖" ];
    string AwardsIcon                = 4 [ (resdata.cname) = "大奖美宣" ];
    ResGameItem HighTokenCost        = 5 [ (resdata.cname) = "高级战令消耗" ];
    ResGameItem DeluxeTokenCost      = 6 [ (resdata.cname) = "豪华战令消耗" ];
    ResGameItem High2DeluxeTokenCost = 7 [ (resdata.cname) = "高级升豪华战令消耗" ];
    uint32 HighTokenBuyDrop          = 8 [ (resdata.cname) = "高级战令购买掉落" ];
    uint32 DeluxeTokenBuyDrop        = 9 [ (resdata.cname) = "豪华战令购买掉落" ];
    ResGameItem LevelCost            = 10 [ (resdata.cname) = "等级购买消耗" ];
    uint32 BuyMaxLevel               = 11 [ (resdata.cname) = "等级购买最大等级" ];
    uint32 HangupSecond              = 14 [ (resdata.cname) = "挂机秒数" ];
    uint32 HangupExp                 = 15 [ (resdata.cname) = "挂机战令经验" ];
    uint32 TipsMax                   = 20 [ (resdata.cname) = "挂机奖励-全屏展示系数" ];
    uint32 HangupMinExp              = 22 [ (resdata.cname) = "挂机单次最小经验" ];
    uint32 CompensatePropID          = 25 [ (resdata.cname) = "赛季补偿道具ID" ];

    STTokenEffectInfo NormalTokenEffect = 26 [ (resdata.cname) = "普通战令效果" ];
    STTokenEffectInfo HighTokenEffect   = 27 [ (resdata.cname) = "高级战令效果" ];
    STTokenEffectInfo DeluxeTokenEffect = 28 [ (resdata.cname) = "豪华战令效果" ];
    uint32 ExpOfLevelCost               = 29 [ (resdata.cname) = "等级购买消耗获得的经验" ]; // 花费levelcost获得的经验
}

message ResTokenHangupCfgDataBin {
    option (cltgen.pk) = "Hour";

    option (cltgen.system_databin) = true;
    option (cltgen.random_access)  = Runtime;

    uint32 Hour            = 1 [ (resdata.cname) = "小时区间", (bingogen.primary_key) = 1 ];
    uint32 TickSecond      = 2 [ (resdata.cname) = "tick频率" ];
    repeated uint32 Values = 3 [ (resdata.cname) = "增长值", (resdata.count) = "Legacy.RES_MAX_TOKEN_HANGUP_VALUE_NUM" ];
}

message ResTokenLevelDropInfo {
    uint32 DropID          = 1 [ (resdata.cname) = "掉落" ];
    uint32 SpecialShow     = 2 [ (resdata.cname) = "特殊展示" ];
    float Scale            = 3 [ (resdata.cname) = "缩放比例" ];
    string Jump            = 4 [ (resdata.cname) = "跳转路径" ];
    string BGPath          = 5 [ (resdata.cname) = "背景资源路径" ];
    uint32 ShowWeights     = 6 [ (resdata.cname) = "展示权重" ];
    string SpecialIconPath = 7 [ (resdata.cname) = "特殊资源路径" ];
}

message ResTokenLevelAwardDataBin {
    option (cltgen.pk)    = "Level, SeasonID";
    option (cltgen.index) = "SeasonID";

    option (cltgen.system_databin) = true;
    option (cltgen.random_access)  = Runtime;

    uint32 Level                                   = 1 [ (resdata.cname) = "战令等级", (bingogen.primary_key) = 1 ];
    uint32 SeasonID                                = 2 [ (resdata.cname) = "赛季ID", (bingogen.primary_key) = 2 ];
    uint32 NeedExp                                 = 3 [ (resdata.cname) = "升级需要的经验" ];
    repeated ResTokenLevelDropInfo NormalDropInfos = 4 [ (resdata.cname) = "普通奖励", (resdata.count) = "Legacy.RES_MAX_TOKEN_LEVEL_AWARD_NUM" ];
    repeated ResTokenLevelDropInfo HighDropInfos   = 5 [ (resdata.cname) = "高级奖励", (resdata.count) = "1" ];
}

message TokenConf {
    ResTokenTaskCfgDataBin TokenTaskCfg         = 1 [ (bingogen.databin_path) = "" ];
    ResTokenTaskRefreshDataBin TokenTaskRefresh = 2 [ (bingogen.databin_path) = "" ];
    ResTokenSeasonCfgDataBin TokenSeasonCfg     = 3 [ (bingogen.databin_path) = "" ];
    ResTokenLevelAwardDataBin TokenLevelAward   = 4 [ (bingogen.databin_path) = "" ];
    ResTokenHangupCfgDataBin TokenHangupCfg     = 5 [ (bingogen.databin_path) = "" ];
}

//####战令--结束##

//####段位结算
message ResRankDataBin {
    option (cltgen.pk)    = "ID";
    option (cltgen.index) = "Rank";
    option (cltgen.index) = "Rank, Level";

    option (cltgen.system_databin) = true;
    option (cltgen.random_access)  = Runtime;

    uint32 ID                        = 1 [ (resdata.cname) = "ID", (bingogen.primary_key) = 1 ];
    uint32 ShowElo                   = 2 [ (resdata.cname) = "表现分" ];
    uint32 Rank                      = 3 [ (resdata.cname) = "段位", (resdata.bind) = "EPvpRankType", (bingogen.primary_key) = 2 ];
    uint32 Level                     = 4 [ (resdata.cname) = "阶数", (bingogen.primary_key) = 3 ];
    uint32 EndElo                    = 6 [ (resdata.cname) = "结束分" ];
    string RankIcon                  = 7 [ (resdata.cname) = "段位图标" ];
    string LevelIcon                 = 8 [ (resdata.cname) = "阶数图标" ];
    string BigRankIcon               = 9 [ (resdata.cname) = "段位大图标" ];
    bool RankIsShowPlayerHead        = 10 [ (resdata.cname) = "排位是否展示玩家头像" ];
    string BgRankIcon                = 11 [ (resdata.cname) = "大图标背景板" ];
    string CareerRankIcon            = 12 [ (resdata.cname) = "主页展示图标" ];
    string CicleRankIcon             = 13 [ (resdata.cname) = "圆形展示图标" ];
    uint32 RankLimitRoomMaxPlayerNum = 14 [ (resdata.cname) = "段位房间人数控制" ];
    bool IsShowRoomPlayerNumLimit    = 15 [ (resdata.cname) = "房间段位人数限制显示开关" ];
    string RankIconInHundred         = 16 [ (resdata.cname) = "百强榜段位图标" ];
    uint32 MinHideElo                = 17 [ (resdata.cname) = "隐藏分下限" ];
}

message ResRankProtectedDatabin {
    option (resdata.output) = Server;

    uint32 ID      = 1 [ (resdata.cname) = "ID", (bingogen.primary_key) = 1 ];
    uint32 Rank    = 2 [ (resdata.cname) = "段位", (resdata.bind) = "EPvpRankType" ];
    uint32 Level   = 3 [ (resdata.cname) = "阶数" ];
    uint32 Protect = 4 [ (resdata.cname) = "阶位保护" ];
}

message ResRankKDatabin {
    option (resdata.output) = Server;

    uint32 Rank        = 1 [ (resdata.cname) = "段位", (bingogen.primary_key) = 1, (resdata.bind) = "EPvpRankType" ];
    uint32 EloK        = 2 [ (resdata.cname) = "隐藏分K值" ];
    uint32 EloFactor   = 3 [ (resdata.cname) = "隐藏分严苛度" ];
    uint32 ShowK       = 4 [ (resdata.cname) = "表现分K值" ];
    uint32 ShowFactor  = 5 [ (resdata.cname) = "表现分严苛度" ];
    uint32 ShowWinVal  = 6 [ (resdata.cname) = "胜利异动值" ];
    uint32 ShowLoseVal = 7 [ (resdata.cname) = "战败异动值" ];
}

message ResEloConstDatabin {
    option (resdata.output) = Server;

    uint32 HideDefault     = 1 [ (resdata.cname) = "隐藏分初始值" ];
    uint32 HideMin         = 2 [ (resdata.cname) = "隐藏分最小值" ];
    uint32 HideMax         = 3 [ (resdata.cname) = "隐藏分最大值" ];
    uint32 ShowDefault     = 4 [ (resdata.cname) = "表现分初始值" ];
    uint32 ShowMin         = 5 [ (resdata.cname) = "表现分最小值" ];
    uint32 ShowMax         = 6 [ (resdata.cname) = "表现分最大值" ];
    uint32 KingScoreToStar = 7 [ (resdata.cname) = "王者段位积分星星转换刻度" ];
}

message ResBattleAwardDatabin {
    option (resdata.output) = Server;

    uint32 SeasonID    = 1 [ (resdata.cname) = "赛季", (bingogen.primary_key) = 1 ];
    uint32 GameType    = 2 [ (resdata.cname) = "模式", (resdata.bind) = "COM_GAME_TYPE", (bingogen.primary_key) = 2 ];
    uint32 Rank        = 3 [ (resdata.cname) = "段位", (resdata.bind) = "EPvpRankType", (bingogen.primary_key) = 3 ];
    uint32 Place       = 4 [ (resdata.cname) = "名次", (bingogen.primary_key) = 4 ];
    uint32 DropAwardID = 5 [ (resdata.cname) = "掉落ID" ];
}

enum SCORE_CORRECTION_TYPE {
    SCORE_CORRECTION_NULL       = 0 [ (resdata.keyword_alias) = "未定义" ];
    SCORE_CORRECTION_RANKPLACE  = 1 [ (resdata.keyword_alias) = "段位名次" ];
    SCORE_CORRECTION_DAILYFIRST = 2 [ (resdata.keyword_alias) = "每日首场" ];
}

message ResScoreCorrectionDatabin {
    option (resdata.output) = Server;

    uint32 ID            = 1 [ (resdata.cname) = "ID", (bingogen.primary_key) = 1 ];
    uint32 Type          = 2 [ (resdata.cname) = "修正类型", (resdata.bind) = "SCORE_CORRECTION_TYPE" ];
    uint32 GameType      = 3 [ (resdata.cname) = "玩法模式", (resdata.bind) = "COM_GAME_TYPE" ];
    repeated int32 Param = 4 [ (resdata.cname) = "参数", (resdata.count) = "10", (resdata.bind) = "EPvpRankType" ];
}

message RankConf {
    ResRankDataBin Rank                       = 1 [ (bingogen.databin_path) = "" ];
    ResRankProtectedDatabin Protect           = 2 [ (bingogen.databin_path) = "" ];
    ResRankKDatabin KValue                    = 3 [ (bingogen.databin_path) = "" ];
    ResEloConstDatabin EloConst               = 4 [ (bingogen.databin_path) = "" ];
    ResBattleAwardDatabin BattleAward         = 6 [ (bingogen.databin_path) = "" ];
    ResScoreCorrectionDatabin ScoreCorrection = 7 [ (bingogen.databin_path) = "" ];
}

enum RES_RANK_CONST_TYPE {
    INVITE_FRIEND_CHANGE_TIME               = 0 [ (resdata.keyword_alias) = "房间邀请好友气泡轮替时间秒数" ];
    BUBBLE_CHANGE_TIME                      = 1 [ (resdata.keyword_alias) = "气泡消失后再次出现时间秒数" ];
    BUBBLE_SHOW_TIME                        = 2 [ (resdata.keyword_alias) = "气泡每次出现的总秒数" ];
    LORD_CHOOSE_RECODE_CHAT_COOL_TIME       = 3 [ (resdata.keyword_alias) = "棋手选择聊天发送战绩冷却" ];
    LORD_CHOOSE_WORD_CHAT_COOL_TIME         = 4 [ (resdata.keyword_alias) = "棋手选择聊天发送语句表情冷却" ];
    LORD_CHOOSE_CHAT_BUBBLE_SHOW_TIME       = 5 [ (resdata.keyword_alias) = "棋手选择聊天气泡显示时长" ];
    LORD_CHOOSE_CHAT_STRONG_ENEMY_COOL_TIME = 6 [ (resdata.keyword_alias) = "棋手选择发现强敌冷却" ];
}

message ResRankConstDatabin {
    option (cltgen.pk)             = "ID";
    option (cltgen.system_databin) = true;
    uint32 ID                      = 1 [ (resdata.cname) = "ID", (resdata.bind) = "RES_RANK_CONST_TYPE" ];
    uint64 NumberValue             = 2 [ (resdata.cname) = "值" ];
    string StringValue             = 3 [ (resdata.cname) = "字符串" ];
}
//####段位结算--结束##

//####房间规则--开始##
message ResRoomRefusePunishDataBin {
    option (cltgen.pk)             = "Cnt";
    option (cltgen.system_databin) = true;

    uint32 Cnt         = 1 [ (resdata.cname) = "连续拒绝次数", (bingogen.primary_key) = 1 ];
    uint32 BlockSecond = 2 [ (resdata.cname) = "禁赛时间" ];
}

message RoomConf {
    ResRoomRefusePunishDataBin RefusePunish = 1 [ (bingogen.databin_path) = "" ];
    ResMatchRankRangeCfg RankRange          = 2 [ (bingogen.databin_path) = "" ];
}
//####房间规则--结束##

// --------------------------------- 通用 ---------------------------------
message Res_Chess_Slot_Struct // 英雄技能
{
    uint32 SkillID = 1 [ (resdata.cname) = "技能ID" ];
}

message ResDT_ChessModelInfo {
    int32 Scale = 1 [ (resdata.cname) = "尺寸" ];
    int32 X     = 2 [ (resdata.cname) = "偏移X" ];
    int32 Y     = 3 [ (resdata.cname) = "偏移Y" ];
    int32 Z     = 4 [ (resdata.cname) = "偏移Z" ];
}

message ResDT_ChessComboInfo {
    uint32 SkillSlot = 1 [ (resdata.cname) = "槽位" ];
    // int32 WaitTime   = 2 [ (resdata.cname) = "等待时间" ];
    // int32 FailMpBack = 3 [ (resdata.cname) = "失败返还蓝量" ];
}

enum ActorType {
    option (cltgen.csharp_enum)    = true;
    option (cltgen.gamecore_enum)  = true;
    option (cltgen.uninode_enum)   = true;
    ActorTypeInvalid               = 0;
    ActorTypeHero                  = 1 [ (resdata.keyword_alias)   = "英雄" ];
    ActorTypeLord                  = 2 [ (resdata.keyword_alias)   = "领主" ];
    ActorTypeBullet                = 3 [ (resdata.keyword_alias)   = "子弹" ];
    ActorTypeInteractItem          = 4 [ (resdata.keyword_alias)   = "交互物件" ];
    ActorTypeSummon                = 5 [ (resdata.keyword_alias)   = "召唤物" ];
    ActorTypeMonster               = 6 [ (resdata.keyword_alias)   = "野怪" ];
    ActorTypeMixTreasure           = 7 [ (resdata.keyword_alias)   = "混合宝箱" ];
    ActorTypeCoinTreasure          = 8 [ (resdata.keyword_alias)   = "金币宝箱" ];
    ActorTypeExclusiveEquip        = 9 [ (resdata.keyword_alias)   = "专属武器" ];
    ActorTypeExclusiveRelative     = 10 [ (resdata.keyword_alias)  = "羁绊专属" ];
    ActorTypeMagicCircle           = 11 [ (resdata.keyword_alias)  = "法阵" ];
    ActorTypeAttachmentHero        = 12  [ (resdata.keyword_alias) = "附属英雄" ];
    ActorTypeBuilding1             = 13	[ (resdata.keyword_alias)  = "建筑物1"];
	ActorTypeBuilding2             = 14	[ (resdata.keyword_alias)  = "建筑物2"];
    ActorTypeLordSpecialBattleHero = 15	[ (resdata.keyword_alias)  = "棋手专属英雄"];
    ActorTypeLordSpecialTreasure   = 16	[ (resdata.keyword_alias)  = "棋手专属宝箱"];
    ActorTypeHeroTreasure          = 17 [ (resdata.keyword_alias)   = "英雄宝箱" ];
    ActorTypeRelativeTreasure      = 18 [ (resdata.keyword_alias)   = "令牌宝箱" ];
    ActorTypeEquipTreasure         = 19 [ (resdata.keyword_alias)   = "装备宝箱" ];
    ActorTypeMassiveTreasure       = 20 [ (resdata.keyword_alias)   = "百人宝箱" ];
    ActorTypeMax                   = 21;
}

message ResDT_ChessFuncInfo {
    int32 Type            = 1 [ (resdata.cname) = "类型", (resdata.bind) = "ActorType" ];
    repeated int32 Params = 2 [ (resdata.cname) = "类型参数", (resdata.count) = "2" ];
}

// 英雄信息表.xlsx
message ResChessHeroConfDataBin {
    option (cltgen.pk)               = "HeroID";
    option (cltgen.index)            = "HeroLevel";
    option (cltgen.index)            = "HeroLevel, HeroQuality";
    option (cltgen.index)            = "HeroLevel, IsNotShowInAtlas";
    option (cltgen.index)            = "HeroLevel, HeroQuality, IsNotShowInAtlas";
    option (cltgen.system_databin)   = true;
    option (cltgen.gamecore_databin) = true;
    option (cltgen.random_access)    = Runtime;

    uint32 HeroID           = 1 [ (resdata.cname) = "ID", (bingogen.primary_key) = 1 ];
    uint32 SvrPlayModUniqID = 50 [ (bingogen.primary_key) = 2 ];

    int32 HeroLevel                         = 2 [ (resdata.cname) = "等级" ];
    string HeroName                         = 3 [ (resdata.cname) = "武将名", (resdata.translate) = true ];
    string HeroDes                          = 4 [ (resdata.cname) = "英雄描述", (resdata.translate) = true ];
    string HeroIcon                         = 5 [ (resdata.cname) = "英雄图片" ];
    repeated RES_RELATIVE_ID ChessRelative  = 7 [ (resdata.cname) = "棋子羁绊", (resdata.count) = "Legacy.RES_MAX_CHESS_HERO_MAX_RELATIVE", (resdata.bind) = "RES_RELATIVE_ID" ];
    int32 HeroQuality                       = 8 [ (resdata.cname) = "棋子品质" ];
    uint32 AttackId                         = 9 [ (resdata.cname) = "普攻ID" ];
    repeated Res_Chess_Slot_Struct Slot     = 10 [ (resdata.cname) = "槽位", (resdata.count) = "Legacy.RES_MAX_CHESS_HERO_SKILL_COUNT" ];
    uint32 HP                               = 11 [ (resdata.cname) = "基础生命" ];
    uint32 PhyAttack                        = 12 [ (resdata.cname) = "基础攻击力" ];
    uint32 MagAttack                        = 13 [ (resdata.cname) = "基础法术强度" ];
    uint32 PhyDefense                       = 14 [ (resdata.cname) = "基础护甲" ];
    uint32 MagDefense                       = 15 [ (resdata.cname) = "基础抗性" ];
    uint32 MoveSpeed                        = 16 [ (resdata.cname) = "基础移动速度" ];
    uint32 AttackSpeed                      = 17 [ (resdata.cname) = "基础攻击速度" ];
    uint32 CriticalRate                     = 18 [ (resdata.cname) = "基础暴击率" ];
    uint32 CriticalEffect                   = 19 [ (resdata.cname) = "基础暴击效果" ];
    bool IsNotShowInAtlas                   = 20 [ (resdata.cname) = "图鉴不展示" ];
    string CharacterInfo                    = 21 [ (resdata.cname) = "角色信息路径" ];
    uint32 SkinID                           = 22 [ (resdata.cname) = "皮肤ID" ];
    ResDT_ChessFuncInfo FuncInfo            = 23 [ (resdata.cname) = "棋子功能" ];
    string HeroPaint                        = 24 [ (resdata.cname) = "英雄半身像" ];
    string HeroEikon                        = 25 [ (resdata.cname) = "英雄插画" ];
    string HeroPortrait                     = 26 [ (resdata.cname) = "英雄卡面" ];
    string HeroAtlasIcon                    = 27 [ (resdata.cname) = "图鉴头像" ];
    string NamePinYin                       = 100 [ (resdata.cname) = "武将名拼音" ];
    ResDT_ChessModelInfo CardHighModelInfo  = 102 [ (resdata.cname) = "棋子抽卡高模" ];
    ResDT_ChessModelInfo CardLowModelInfo   = 103 [ (resdata.cname) = "棋子抽卡低模" ];
    int32 MeshScale                         = 104 [ (resdata.cname) = "模型缩放系数" ];
    uint32 AttackDistanceType               = 105 [ (resdata.cname) = "普攻攻击距离类型" ];
    uint32 Gender                           = 106 [ (resdata.cname) = "性别" ];
    uint32 EnhanceType                      = 107 [ (resdata.cname) = "加成类型" ];
    repeated int32 PassiveID                        	= 110 [ (resdata.cname) = "被动技能", (resdata.count) = "Legacy.RES_MAX_CHESS_HERO_SKILL_COUNT" ];
    uint32 MainJob                          = 119 [ (resdata.cname) = "主要职业" ];
    string AI_Chess                         = 121 [ (resdata.cname) = "自走棋AI" ];
    string AttackRangeDesc                  = 122 [ (resdata.cname) = "攻击范围描述" ];
    uint32 EnergyType                       = 123 [ (resdata.cname) = "能量类型", (resdata.bind) = "RES_BATTLE_ENERGY_TYPE" ];
    int32 InitEnergy                        = 124 [ (resdata.cname) = "初始能量" ];
    int32 Energy                            = 125 [ (resdata.cname) = "最大能量" ];
    int32 DamageMpRecover                   = 129 [ (resdata.cname) = "攻击回蓝" ];
    int32 HurtMpRecoverRate                 = 130 [ (resdata.cname) = "受伤回蓝万分比" ];
    int32 HurtMpRecoverLimit                = 131 [ (resdata.cname) = "受伤回蓝上限" ];
    string Born_Age                         = 132 [ (resdata.cname) = "出生动画" ];
    string Revive_Age                       = 133 [ (resdata.cname) = "复活动画" ];
    uint32 ChessPos                         = 134 [ (resdata.cname) = "棋子位置" ];
    int32 FrontScore                        = 135 [ (resdata.cname) = "前排评分" ];
    int32 BackScore                         = 136 [ (resdata.cname) = "后排评分" ];
    int32 AbilityScore                      = 137 [ (resdata.cname) = "战斗力评分" ];
    uint32 UltimateSlot                     = 145 [ (resdata.cname) = "大招槽位" ];
    repeated ResDT_ChessComboInfo Combos    = 146 [ (resdata.cname) = "连招", (resdata.count) = "6" ];
    repeated uint32 RecommendEquipID        = 147 [ (resdata.cname) = "推荐装备", (resdata.count) = "20" ];
    int32 ForbiddenLeaveBattleField         = 161 [ (resdata.cname) = "禁止下阵" ];
    int32 BloodBarHeight                    = 162 [ (resdata.cname) = "血条高度" ];
    int32 waitForFight                      = 163 [ (resdata.cname) = "战斗等待时间" ];
    bool bManaLock                          = 164 [ (resdata.cname) = "法力锁" ];
    repeated EQUIP_TYPE lowPriorityWearType = 165 [ (resdata.cname) = "极低可能穿戴装备类型", (resdata.count) = "2" ];
    int32 AIAttr_AD                         = 166 [ (resdata.cname) = "AI用攻击力加成浮动百分比" ];
    int32 AIAttr_AP                         = 167 [ (resdata.cname) = "AI用法术强度加成浮动百分比" ];
    int32 AIAttr_ADCrit                     = 168 [ (resdata.cname) = "AI用暴击加成浮动百分比" ];
    int32 AIAttr_ADDefense                  = 169 [ (resdata.cname) = "AI用护甲加成浮动百分比" ];
    int32 AIAttr_APDefense                  = 170 [ (resdata.cname) = "AI用魔抗加成浮动百分比" ];
    int32 AIAttr_Power                      = 171 [ (resdata.cname) = "AI用法力值加成浮动百分比" ];
    int32 AIAttr_ADHp                       = 172 [ (resdata.cname) = "AI用物理吸血加成浮动百分比" ];
    int32 AIAttr_APHp                       = 173 [ (resdata.cname) = "AI用法术吸血加成浮动百分比" ];
    int32 AIAttr_ADSpeed                    = 174 [ (resdata.cname) = "AI用攻击速度加成浮动百分比" ];
    int32 AIAttr_HP                         = 175 [ (resdata.cname) = "AI用生命值加成浮动百分比" ];
    bool canShowTips                        = 176 [ (resdata.cname) = "是否显示弹窗" ];
    int32 CounterType                       = 177 [ (resdata.cname) = "技能计数器" ];
    int32 InitCounterEnergy                 = 178 [ (resdata.cname) = "计数器初始能量" ];
    int32 MaxCounter                        = 179 [ (resdata.cname) = "计数器最大能量" ];
    string WorldViewShort                   = 180 [ (resdata.cname) = "世界观短句", (resdata.translate) = true ];
    repeated HeroModeType heroModes         = 181 [ (resdata.cname) = "英雄模式", (resdata.count) = "2" ];
    int32 DamageMpRecoverLimit              = 182 [ (resdata.cname) = "攻击回蓝上限" ];
    bool ForbiddenPick                      = 183 [ (resdata.cname) = "禁止选取" ];
    string HeroPortraitEff                  = 184 [ (resdata.cname) = "英雄卡面特效" ];
	string HeroPortraitSpine                = 185 [ (resdata.cname) = "英雄卡面Spine" ];
	string HeroPortraitSpineEff             = 186 [ (resdata.cname) = "英雄卡面Spine特效" ];
	bool IsNotSettleChess					= 187 [ (resdata.cname) = "不参与结算"];
	int32 SettleDamage						= 188 [ (resdata.cname) = "结算伤害"];
	int32 PopulationCost					= 189 [ (resdata.cname) = "占用的人口数"];
	string HeroPortraitFrame             = 190 [ (resdata.cname) = "英雄卡框" ];
	ResLayerType Layer						= 191 [ (resdata.cname) = "层级"];
    int32 InBattleMaxCountLimit             = 192 [ (resdata.cname) = "可上场的最大数量"];
}

enum SortRule {
    option (cltgen.csharp_enum)    = true;
    option (cltgen.gamecore_enum)  = true;
    option (cltgen.uninode_enum)   = true;

    AIAttrTypeNone                 = 0;
    SortRuleFromLeftToRight        = 1 [ (resdata.keyword_alias)   = "从左往右" ];
    SortRuleFromRightToLeft        = 2 [ (resdata.keyword_alias)   = "从右往左" ];
}

// 备战区排序优先级.xlsx
message ResAlternativeSortDataBin {
    option (cltgen.pk)            = "Type";
    option (cltgen.random_access) = Editor;

    option (cltgen.gamecore_databin) = true;

    int32 Type            = 1[ (resdata.cname) = "棋子功能类型", (resdata.bind) = "ActorType" , (bingogen.primary_key) = 1 ];
    int32 SortRule        = 2[ (resdata.cname) = "排序规则", (resdata.bind) = "SortRule" ];
    int32 Priority        = 3[ (resdata.cname) = "优先级"];
}

message Res_PreEquip_Struct // 前置装备
{
    uint32 PreEquipID = 1 [ (resdata.cname) = "ID" ];
}

message ResEffectCombine {
    uint32 ID                 = 1 [ (resdata.cname) = "ID" ];
    string Desc               = 2 [ (resdata.cname) = "被动效果描述" ];
    uint32 UniquePassiveGroup = 3 [ (resdata.cname) = "唯一被动组" ];
}

message ResActiveSkill {
    uint32 ID        = 1 [ (resdata.cname) = "ID" ];
    uint32 Slot      = 2 [ (resdata.cname) = "槽位" ];
    uint32 GroupID   = 3 [ (resdata.cname) = "组ID" ];
    string Des       = 4 [ (resdata.cname) = "描述" ];
    string ExtraDesc = 5 [ (resdata.cname) = "额外描述" ];
}

message ResPassiveSkill {
    uint32 ID                             = 1 [ (resdata.cname) = "ID" ];
    string Desc                           = 2 [ (resdata.cname) = "描述" ];
    uint32 UniquePassiveGroup             = 3 [ (resdata.cname) = "唯一被动组" ];
    repeated uint32 PassiveRmvSkillFuncID = 4 [ (resdata.cname) = "拔除技能效果ID", (resdata.count) = "3" ];
}

message LordAIConf {
    option (cltgen.pk)               = "LordID";
    option (cltgen.gamecore_databin) = true;

    int32 LordID      = 1 [ (resdata.cname) = "领主ID" ];
    string LordAIPath = 2 [ (resdata.cname) = "蓝图AIPath" ];
}

enum AIAttrType {
    AIAttrType_None      = 0;
    AIAttrType_AD        = 1 [ (resdata.keyword_alias) = "AI等效攻击力" ];
    AIAttrType_AP        = 2 [ (resdata.keyword_alias) = "AI等效法术强度" ];
    AIAttrType_ADCrit    = 3 [ (resdata.keyword_alias) = "AI等效暴击" ];
    AIAttrType_ADDefense = 4 [ (resdata.keyword_alias) = "AI等效护甲" ];
    AIAttrType_APDefense = 5 [ (resdata.keyword_alias) = "AI等效魔抗" ];
    AIAttrType_Power     = 6 [ (resdata.keyword_alias) = "AI等效法力值" ];
    AIAttrType_ADHp      = 7 [ (resdata.keyword_alias) = "AI等效物理吸血" ];
    AIAttrType_APHp      = 8 [ (resdata.keyword_alias) = "AI等效法术吸血" ];
    AIAttrType_ADSpeed   = 9 [ (resdata.keyword_alias) = "AI等效攻击速度" ];
    AIAttrType_HP        = 10 [ (resdata.keyword_alias) = "AI等效生命值" ];
}

enum AICommunicationType {
    option (cltgen.gamecore_enum) = true;
    AICommunicationType_None      = 0;
    AICommunicationType_Positive  = 1 [ (resdata.keyword_alias) = "AI正面交流" ];
    AICommunicationType_Normal    = 2 [ (resdata.keyword_alias) = "AI中性交流" ];
    AICommunicationType_Negative  = 3 [ (resdata.keyword_alias) = "AI负面交流" ];
    AICommunicationType_All       = 4 [ (resdata.keyword_alias) = "AI所有交流" ];
}

enum AIRestartBuffShopType {
    option (cltgen.gamecore_enum) = true;
    option (cltgen.csharp_enum)   = true;

    AIRestartBuffShopType_None              = 0;
    AIRestartBuffShopType_TargetHP          = 1;
    AIRestartBuffShopType_ContinusLoseCount = 2;
    AIRestartBuffShopType_TargetRound       = 3;
}

enum AICommunicationTrigger {
    option (cltgen.gamecore_enum)       = true;
    AICommunicationTrigger_None         = 0;
    AICommunicationTrigger_Auction      = 1 [ (resdata.keyword_alias) = "AI拍卖出价后" ];
    AICommunicationTrigger_BattleWin    = 2 [ (resdata.keyword_alias) = "AI战斗胜利后" ];
    AICommunicationTrigger_BattleFail   = 3 [ (resdata.keyword_alias) = "AI战斗失败后" ];
    AICommunicationTrigger_PreparePhase = 4 [ (resdata.keyword_alias) = "AI准备阶段" ];
    AICommunicationTrigger_BattlePhase  = 5 [ (resdata.keyword_alias) = "AI战斗阶段" ];
}

message AICommunicationItem {
    AICommunicationTrigger triggerType    = 1 [ (resdata.cname) = "类型" ];
    AICommunicationType communicationType = 2 [ (resdata.cname) = "交流类型" ];
    int32 wordRate                        = 3 [ (resdata.cname) = "短语概率百分比" ];
    int32 triggerRate                     = 4 [ (resdata.cname) = "触发概率百分比" ];
    int32 param1                          = 5 [ (resdata.cname) = "参数1" ];
    int32 param2                          = 6 [ (resdata.cname) = "参数2" ];
}

message AIWatchPlayerRate {
    int32 AlivePlayerCount = 1 [ (resdata.cname) = "存活玩家数量" ];
    int32 watchRate        = 2 [ (resdata.cname) = "概率百分比" ];
}

message ResAICommunicationCfg {
    option (cltgen.pk)               = "ID";
    option (cltgen.gamecore_databin) = true;
    option (cltgen.random_access)    = Runtime;

    int32 ID                                            = 1 [ (resdata.cname) = "ID" ];
    repeated AIWatchPlayerRate PlayerCountWatchRateList = 2 [ (resdata.cname) = "观战", (resdata.count) = "2" ];
    int32 personalityRate                               = 3 [ (resdata.cname) = "人格权重" ];
    repeated AICommunicationItem items                  = 4 [ (resdata.cname) = "类型", (resdata.count) = "5" ];
}

message AIAttrScale {
    AIAttrType Type = 1 [ (resdata.cname) = "类型", (resdata.bind) = "AIAttrType" ];
    int32 Scale     = 2 [ (resdata.cname) = "加成百分比" ];
}

enum RES_PROJECT8_EQUIP_CONTAINER_TYPE {
    option (cltgen.gamecore_enum) = true;
    option (cltgen.csharp_enum)   = true;

    RES_PROJECT8_EQUIP_CONTAINER_COMMON    = 0 [ (resdata.keyword_alias) = "普通容器" ];
    RES_PROJECT8_EQUIP_CONTAINER_INVISIBLE = 1 [ (resdata.keyword_alias) = "透明容器" ];
    RES_PROJECT8_EQUIP_CONTAINER_COUNT     = 2 [ (resdata.keyword_alias) = "数量" ];
}

enum RES_PROJECT8_EQUIP_FUNC_TYPE {
    option (cltgen.gamecore_enum) = true;
    option (cltgen.csharp_enum)   = true;

    RES_PROJECT8_EQUIP_FUNC_TYPE_DEFAULT        = 0;
    RES_PROJECT8_EQUIP_FUNC_TYPE_REMOVER        = 1 [ (resdata.keyword_alias) = "拆卸器" ];
    RES_PROJECT8_EQUIP_FUNC_TYPE_INVISIBLE      = 2 [ (resdata.keyword_alias) = "透明装备" ];
    RES_PROJECT8_EQUIP_FUNC_TYPE_HUANHUALINGPAI = 3 [ (resdata.keyword_alias) = "幻化令牌" ];
    RES_PROJECT8_EQUIP_FUNC_TYPE_POPULATION     = 4 [ (resdata.keyword_alias) = "加人口" ];
    RES_PROJECT8_EQUIP_FUNC_TYPE_HAIDU          = 5 [ (resdata.keyword_alias) = "海都" ];
    RES_PROJECT8_EQUIP_FUNC_TYPE_TOKEN          = 6 [ (resdata.keyword_alias) = "令牌" ];
    RES_PROJECT8_EQUIP_FUNC_TYPE_TEAM_OF_STAR   = 7 [ (resdata.keyword_alias) = "星之队" ];
}

enum RES_PROJECT8_EQUIP_UPGRADE_TYPE {
    option (cltgen.gamecore_enum) = true;
    option (cltgen.csharp_enum)   = true;

    RES_PROJECT8_EQUIP_UPGRADE_TYPE_DEFAULT = 0 [ (resdata.keyword_alias) = "不升级" ];
    RES_PROJECT8_EQUIP_UPGRADE_TYPE_FREE    = 1 [ (resdata.keyword_alias) = "免费" ];
    RES_PROJECT8_EQUIP_UPGRADE_TYPE_EQUIP   = 2 [ (resdata.keyword_alias) = "装备" ];
    RES_PROJECT8_EQUIP_UPGRADE_TYPE_COIN    = 3 [ (resdata.keyword_alias) = "金币" ];
}


message ResEquipProp {
    uint32 Type        = 1 [ (resdata.cname) = "类型", (resdata.bind) = "RES_FUNCEFT_TYPE"  ];
    int32 value        = 2 [ (resdata.cname) = "数值" ];
}

message ResPropDisplayDataBin {
    option (cltgen.pk)               = "PropType";
    option (cltgen.index)            = "Hide";

    option (cltgen.system_databin)   = true;
    
    uint32 PropType             = 1 [ (resdata.cname) = "属性类型", (bingogen.primary_key) = 1, (resdata.bind) = "RES_FUNCEFT_TYPE, RES_FUNCEFT_EXTEND_TYPE" ];
    string Name                 = 2 [ (resdata.cname) = "名称", (resdata.translate) = true];
    string Color                = 3 [ (resdata.cname) = "颜色"];
    string Icon                 = 4 [ (resdata.cname) = "图标" ];
    uint32 ValueType            = 5 [ (resdata.cname) = "数值类型", (resdata.bind) = "RES_FUNCEFT_VALUE_TYPE"];
    int32 SimpleSort            = 6 [ (resdata.cname) = "简单属性排序" ];
    int32 DetailSort            = 7 [ (resdata.cname) = "详细属性排序" ];
    bool Hide                   = 8 [ (resdata.cname) = "隐藏" ];
    int32 MaxDisplayValue       = 9 [ (resdata.cname) = "显示最大值" ];
}

message ResEquipDataBin {
    option (cltgen.pk)               = "EquipID";
    option (cltgen.index)            = "AtlasType";
    option (cltgen.index)            = "IsNotShowInAtlas";
    option (cltgen.index)            = "AtlasType, IsNotShowInAtlas";
    option (cltgen.index)            = "EquipID, IsNotShowInAtlas";
    option (cltgen.index)            = "EquipQuality, IsNotShowInAtlas";
    option (cltgen.index)            = "PreId1, UpgradeType";
    option (cltgen.index)            = "UpgradeType, UpgradeParam";
    option (cltgen.system_databin)   = true;
    option (cltgen.gamecore_databin) = true;
    option (cltgen.random_access)    = Runtime;

    uint32 SvrPlayModUniqID = 50 [ (bingogen.primary_key) = 2 ];

    int32 EquipID              = 1 [ (resdata.cname) = "装备ID", (bingogen.primary_key) = 1 ];
    string EquipName           = 2 [ (resdata.cname) = "装备名称", (resdata.translate) = true ];
    string EquipDes            = 3 [ (resdata.cname) = "装备简述" ];
    string EquipDetail         = 4 [ (resdata.cname) = "详细描述", (resdata.translate) = true ];
    string EquipIcon           = 5 [ (resdata.cname) = "装备图标" ];
    int32 EquipQuality         = 6 [ (resdata.cname) = "装备品阶" ];
    int32 AtlasType            = 15 [ (resdata.cname) = "图鉴分类" ];
    bool IsNotShowInAtlas      = 27 [ (resdata.cname) = "图鉴不展示" ];
    uint32 EquipListSortWeight = 28 [ (resdata.cname) = "装备背包排列顺序" ];
    string EquipBigIcon        = 29 [ (resdata.cname) = "装备大图标" ];
    repeated ResEquipProp PropChange = 31 [ (resdata.cname) = "属性加成", (resdata.count) = "3"];
    repeated string LabelDesc  = 32 [ (resdata.cname) = "标签描述", (resdata.count) = "2", (resdata.translate) = true ];

    string Recommend                        = 102 [ (resdata.cname) = "推荐" ];
    EQUIP_TYPE Type                         = 103 [ (resdata.cname) = "装备分类" ];
    repeated ResPassiveSkill PassiveSkill   = 107 [ (resdata.cname) = "被动技能", (resdata.count) = "4" ];
    repeated ResEffectCombine EffectCombine = 108 [ (resdata.cname) = "效果组合", (resdata.count) = "3" ];
    repeated ResActiveSkill ActiveSkill     = 109 [ (resdata.cname) = "主动技能", (resdata.count) = "2" ];

    repeated RES_RELATIVE_ID AdditionRelative = 117 [ (resdata.cname) = "附加羁绊", (resdata.count) = "2" ];

    uint32 IsOnly                               = 126 [ (resdata.cname) = "装备唯一性" ];
    uint32 PreId1                               = 127 [ (resdata.cname) = "前置装备1ID" ];
    RES_PROJECT8_EQUIP_UPGRADE_TYPE UpgradeType = 128 [ (resdata.cname) = "升级类型" ];
    uint32 UpgradeParam                         = 129 [ (resdata.cname) = "升级参数" ];
    RES_PROJECT8_EQUIP_FUNC_TYPE EquipFuncType  = 131 [ (resdata.cname) = "装备功能类型" ];

    int32 ShowBufferLayerID                      = 135 [ (resdata.cname) = "显示buff层数ID" ];
    uint32 CanTakenOff                           = 136 [ (resdata.cname) = "是否可拆卸" ];
    uint32 TakenOffCostCoin                      = 137 [ (resdata.cname) = "拆卸消耗金币" ];
    EQUIP_USE_TYPE UseType                       = 138 [ (resdata.cname) = "使用类别" ];
    repeated AIAttrScale AIAttrs                 = 139 [ (resdata.cname) = "AI用特性", (resdata.count) = "5" ];
    bool AICantWearDuplicate                     = 140 [ (resdata.cname) = "AI不可重复穿戴" ];

    int32 ShowBufferOnceID                       = 142 [ (resdata.cname) = "单次使用BuffID" ];
    string WorldViewShort                        = 143 [ (resdata.cname) = "世界观短句", (resdata.translate) = true ];
    bool Invisible                               = 144 [ (resdata.cname) = "是否隐形" ];
    bool CannotEquip                             = 145 [ (resdata.cname) = "不能穿戴" ];
    int32 SortOrderInTips                        = 146 [ (resdata.cname) = "tips排序" ];
    int32 FrameRarity                            = 147 [ (resdata.cname) = "边框稀有度" ];
    int32 EquipGridMask                          = 148 [ (resdata.cname) = "槽位掩码", (resdata.bind) = "RES_PROJECT8_EQUIP_GRID_MASK_TYPE" ];
    repeated string BriefTag                     = 149 [ (resdata.cname) = "简述标签", (resdata.count) = "2", (resdata.translate) = true ];
    int32 PhantomTemplateEquipID                 = 150 [ (resdata.cname) = "幻化模板装备ID" ];
}


enum RES_PROJECT8_EQUIP_GRID_FUNC_TYPE
{
    option (cltgen.gamecore_enum) = true;
    option (cltgen.csharp_enum) = true;

    RES_PROJECT8_EQUIP_GRID_FUNC_TYPE_DEFAULT = 0 [ (resdata.keyword_alias) = "普通槽位" ];
    RES_PROJECT8_EQUIP_GRID_FUNC_TYPE_HAIDU = 1 [ (resdata.keyword_alias) = "海都槽位" ];
    RES_PROJECT8_EQUIP_GRID_FUNC_TYPE_CORE = 2 [ (resdata.keyword_alias) = "核心槽位" ];
    RES_PROJECT8_EQUIP_GRID_FUNC_TYPE_MAXTYPE = 3 [ (resdata.keyword_alias) = "最大" ];
}

enum RES_PROJECT8_EQUIP_GRID_MASK_TYPE
{
    option (cltgen.gamecore_enum) = true;
    option (cltgen.csharp_enum) = true;

    RES_PROJECT8_EQUIP_GRID_MASK_TYPE_NONE = 0 [ (resdata.keyword_alias) = "无槽位" ];
    RES_PROJECT8_EQUIP_GRID_MASK_TYPE_DEFAULT = 1 [ (resdata.keyword_alias) = "普通槽位" ];
    RES_PROJECT8_EQUIP_GRID_MASK_TYPE_HAIDU = 2 [ (resdata.keyword_alias) = "海都槽位" ];
    RES_PROJECT8_EQUIP_GRID_MASK_TYPE_CORE = 4 [ (resdata.keyword_alias) = "核心槽位" ];
}

message Res_Fetter_Num_Struct { uint32 PeopleNum = 1 [ (resdata.cname) = "人数" ]; }

message ResDT_ChessGlobalEffectItem {
    uint32 EffectType = 1 [ (resdata.cname) = "作用范围" ];
    uint32 EffectID   = 2 [ (resdata.cname) = "效果ID" ];
}

message ResDT_ChessSpecialParam { uint32 paramID = 1 [ (resdata.cname) = "数值" ]; }

message Res_Fetter_Struct {
    string EffectDes                              = 1 [ (resdata.cname) = "效果描述", (resdata.translate) = true ];
    int32 AbilityScale                            = 2 [ (resdata.cname) = "战力放大万分比" ];
    repeated ResDT_ChessGlobalEffectItem Effect   = 3 [ (resdata.cname) = "效果", (resdata.count) = "3" ];
    repeated ResDT_ChessSpecialParam SpecialParam = 5 [ (resdata.cname) = "特殊参数", (resdata.count) = "3" ];
}

message Res_Fetter_Layer_Quality { uint32 Quality = 1 [ (resdata.cname) = "品质" ]; }

message Res_Fetter_Layer_Icon { string IconPath = 1 [ (resdata.cname) = "路径" ]; }

enum RES_PROJECT8_BUFF_CREATE_PHASE {
    option (cltgen.gamecore_enum) = true;

    RES_PROJECT8_BUFF_CREATE_PHASE_RELATIVE = 0 [ (resdata.keyword_alias) = "羁绊行为阶段" ];
    RES_PROJECT8_BUFF_CREATE_PHASE_BATTLE   = 1 [ (resdata.keyword_alias) = "战斗阶段" ];
    RES_PROJECT8_BUFF_CREATE_PHASE_ANY      = 2 [ (resdata.keyword_alias) = "任意阶段" ];
}

message FetterConf { ResFetterConfDataBin FetterData = 1 [ (bingogen.databin_path) = "" ]; }

message ResDT_FetterAudioInfo {
    string BattlePrepareSound           = 1 [ (resdata.cname) = "战斗准备音效" ];
    string NormalBattleStartSound       = 2 [ (resdata.cname) = "常规战斗开始音效" ];
    string ContinueWinBattleStartSound  = 3 [ (resdata.cname) = "连胜战斗开始音效" ];
    string ContinueFailBattleStartSound = 4 [ (resdata.cname) = "连败战斗开始音效" ];
    string RoundWinSound                = 5 [ (resdata.cname) = "回合胜利音效" ];
    string RoundFailSound               = 6 [ (resdata.cname) = "回合失败音效" ];
    string Star2ComposeSound            = 7 [ (resdata.cname) = "二星合成音效" ];
    string Star3ComposeSound            = 8 [ (resdata.cname) = "三星合成音效" ];
    string WinMsg                       = 9 [ (resdata.cname) = "胜利语" ];

    string EffectAudio    = 10 [ (resdata.cname) = "羁绊激活" ];
    string TopEffectAudio = 11 [ (resdata.cname) = "顶层羁绊激活" ];
}

message ResFetterConfDataBin {
    option (cltgen.pk)               = "FetterID";
    option (cltgen.index)            = "FetterType";
    option (cltgen.index)            = "FetterType, IsHidden";
    option (cltgen.system_databin)   = true;
    option (cltgen.gamecore_databin) = true;
    option (cltgen.random_access)    = Runtime;

    uint32 SvrPlayModUniqID = 29 [ (bingogen.primary_key) = 2 ]; // 必须将SvrPlayModUniqID作为主键，且变量名为SvrPlayModUniqID不能改变

    RES_RELATIVE_ID FetterID                             = 1 [ (resdata.cname) = "职业阵营", (bingogen.primary_key) = 1, (resdata.bind) = "RES_RELATIVE_ID" ];
    int32 FetterType                                     = 2 [ (resdata.cname) = "羁绊类型", (resdata.bind) = "RES_RELATIVE_TYPE" ];
    string FetterIcon                                    = 3 [ (resdata.cname) = "默认羁绊图标" ];
    string FetterName                                    = 4 [ (resdata.cname) = "显示名称", (resdata.translate) = true ];
    string FetterDes                                     = 5 [ (resdata.cname) = "效果描述", (resdata.translate) = true ];
    repeated Res_Fetter_Num_Struct FetterPeopleNum       = 6 [ (resdata.cname) = "羁绊层", (resdata.count) = "Legacy.RES_MAX_FETTER_LAYER_COUNT" ];
    repeated Res_Fetter_Struct FetterEffect              = 7 [ (resdata.cname) = "层数", (resdata.count) = "Legacy.RES_MAX_FETTER_LAYER_COUNT" ];
    repeated Res_Fetter_Layer_Quality FetterLayerQuality = 8 [ (resdata.cname) = "羁绊层数", (resdata.count) = "Legacy.RES_MAX_FETTER_LAYER_COUNT" ];
    repeated Res_Fetter_Layer_Icon FetterLayerIcon       = 9 [ (resdata.cname) = "羁绊图标", (resdata.count) = "Legacy.RES_MAX_FETTER_LAYER_COUNT" ];
    bool IsHidden                                        = 10 [ (resdata.cname) = "图鉴不展示" ];

    string SkillImagePath = 11 [ (resdata.cname) = "图标路径" ];
    string IconPath       = 12 [ (resdata.cname) = "卡牌图标" ];

    ResDT_FetterAudioInfo AudioInfo = 13 [ (resdata.cname) = "音效" ];

    uint32 NoPlusPromote                    = 22 [ (resdata.cname) = "多名同层羁绊无加成" ];
    uint32 MainRelative                     = 23 [ (resdata.cname) = "可做为主羁绊" ];
    uint32 FightStageRelativeActiveBuff     = 25 [ (resdata.cname) = "开战阶段羁绊激活效果ID" ];
    uint32 AuxRelative                      = 26 [ (resdata.cname) = "辅助羁绊" ];
    int32 BuffCreatePhase                   = 27 [ (resdata.cname) = "效果生效阶段" ];
    bool IsBuffUpgrade                      = 28 [ (resdata.cname) = "是否允许战斗中新增层数" ];
    uint32 inherentAbilityID                = 30 [ (resdata.cname) = "固有能力效果ID" ];
    string WorldViewShort                   = 31 [ (resdata.cname) = "世界观短句", (resdata.translate) = true ];
    repeated RelativeModeType relativeModes = 32 [ (resdata.cname) = "羁绊模式", (resdata.count) = "4" ];
    bool bTriggerTopJibanVoice               = 33 [ (resdata.cname) = "是否触发最高羁绊语音"];
}

// --------------------------------- 通用 ---------------------------------

// --------------------------------- 布阵 ---------------------------------
message ResEmbattleSeasonDataBin {
    option (cltgen.pk)  = "SeasonID";
    int32 SeasonID      = 1 [ (resdata.cname) = "赛季ID", (bingogen.primary_key) = 1 ];
    string SeasonName   = 2 [ (resdata.cname) = "赛季名" ];
    int32 ShowPos       = 3 [ (resdata.cname) = "展示顺序" ];
    int32 IsShow        = 4 [ (resdata.cname) = "是否展示" ];
    string SelectIcon   = 5 [ (resdata.cname) = "赛季icon选中" ];
    string UnSelectIcon = 6 [ (resdata.cname) = "赛季icon未选中" ];
}

// 赛季基础阵容中的英雄结构
message ResLineupHeroInfo {
    uint32 ID              = 1 [ (resdata.cname) = "ID" ];
    uint32 Level           = 2 [ (resdata.cname) = "等级" ];
    repeated uint32 Equips = 3 [ (resdata.cname) = "装备", (resdata.count) = "Legacy.RES_MAX_LINEUP_HERO_EQUIP_NUM" ];
    uint32 Position        = 4 [ (resdata.cname) = "阵容位" ];
    uint32 IsCenter        = 5 [ (resdata.cname) = "c位" ];
}

enum COM_LINEUP_GAMETYPE {
    COM_LINEUP_GAMETYPE_Standard = 0 [ (resdata.keyword_alias) = "自走棋" ];
    COM_LINEUP_GAMETYPE_Classic  = 1 [ (resdata.keyword_alias) = "模拟战" ];
}

enum LINE_UP_TYPE {
    LINE_UP_TYPE_EDITABLE_PRESENT = 0 [ (resdata.keyword_alias) = "可编辑预设" ];
    LINE_UP_TYPE_PRACTICE_ONLY    = 1 [ (resdata.keyword_alias) = "训练营专属" ];
    LINE_UP_TYPE_RECRUIT_ONLY     = 2 [ (resdata.keyword_alias) = "新手战专属" ];
    LINE_UP_TYPE_H5               = 3 [ (resdata.keyword_alias) = "H5" ];
}

enum LINE_UP_RECOMMEND_STATE_BIT {
    option (cltgen.flags)         = true;
    option (cltgen.csharp_enum)   = true;

    LINE_UP_RECOMMEND_STATE_BIT_NONE                 = 0 ;
    LINE_UP_RECOMMEND_STATE_BIT_POP_RECOMMEND_DESC   = 1 [ (resdata.keyword_alias) = "弹新手推荐阵容说明弹窗" ];
    LINE_UP_RECOMMEND_STATE_BIT_POP_RECOMMEND_PANEL  = 2 [ (resdata.keyword_alias) = "弹新手阵容推荐弹窗" ];
    LINE_UP_RECOMMEND_STATE_BIT_LOCK_OTHER           = 4 [ (resdata.keyword_alias) = "锁住其它推荐页签" ];
    LINE_UP_RECOMMEND_STATE_BIT_SINK_TO_TAIL         = 8 [ (resdata.keyword_alias) = "下沉新手推荐页签至末尾" ];
}

// 赛季基础阵容表，SeasonID不能作为key，因为一个Season可以有多套基础阵容
message ResSeasonLineupDataBin {
    option (cltgen.system_databin) = true;
    option (cltgen.pk)             = "ID";
    option (cltgen.index)          = "LineUpType";

    uint32 ID                              = 1 [ (resdata.cname) = "ID", (bingogen.primary_key) = 1 ];
    uint32 SeasonID                        = 2 [ (resdata.cname) = "赛季id" ];
    uint32 LineupGameType                  = 3 [ (resdata.cname) = "玩法", (resdata.bind) = "COM_LINEUP_GAMETYPE" ];
    string Name                            = 4 [ (resdata.cname) = "阵容名字", (resdata.translate) = true ];
    repeated uint32 LordID                 = 5 [ (resdata.cname) = "领主id", (resdata.count) = "Legacy.RES_MAX_LORD_NUM" ];
    uint32 NewComer                        = 6 [ (resdata.cname) = "新手" ];
    uint32 Advance                         = 7 [ (resdata.cname) = "进阶" ];
    repeated uint32 PreferredEquips        = 8 [ (resdata.cname) = "优先装备", (resdata.count) = "Legacy.RES_MAX_LINEUP_PREFERRED_EQUIP" ];
    repeated ResLineupHeroInfo FinalHeroes = 9 [ (resdata.cname) = "最终英雄", (resdata.count) = "Legacy.RES_MAX_LINEUP_HERO_NUM" ];
    repeated ResLineupHeroInfo EarlyHeroes = 10 [ (resdata.cname) = "过渡英雄", (resdata.count) = "Legacy.RES_MAX_LINEUP_HERO_NUM" ];
    LINE_UP_TYPE LineUpType                = 13 [ (resdata.cname) = "阵容类型", (resdata.bind) = "LINE_UP_TYPE" ];
    uint32 ThumbnailID                     = 14 [ (resdata.cname) = "缩略图ID" ];
}

message ResSeasonLineupThumbnailCfg {
    option (cltgen.system_databin) = true;
    option (cltgen.pk)             = "ID";

    uint32 ID                             = 1 [ (resdata.cname) = "ID", (bingogen.primary_key) = 1 ];
    RES_RELATIVE_ID MajorRelative         = 2 [ (resdata.cname) = "主羁绊", (resdata.bind) = "RES_RELATIVE_ID" ];
    string Desc                           = 3 [ (resdata.cname) = "描述", (resdata.translate) = true ];
    string CHeroIconPath                  = 4 [ (resdata.cname) = "C位英雄Icon路径"];
    string BgColor                        = 5 [ (resdata.cname) = "背景颜色" ];
}

message LineupConf { ResSeasonLineupDataBin SeasonLineup = 6 [ (bingogen.databin_path) = "" ]; }

message ResDefaultLordInfoConfDataBin {
    option (cltgen.pk) = "LordID";

    option (cltgen.system_databin)   = true;
    option (cltgen.gamecore_databin) = true;
    option (cltgen.random_access)    = Runtime;

    uint32 LordID     = 1 [ (resdata.cname) = "领主ID", (bingogen.primary_key) = 1 ];
    string LordName   = 2 [ (resdata.cname) = "领主名称" ];
    string LordIcon   = 3 [ (resdata.cname) = "头像ICON" ];
    uint32 DecompDrop = 4 [ (resdata.cname) = "重复获取掉落" ];
    string AvatarPath = 5 [ (resdata.cname) = "Avatar路径" ];
}
// --------------------------------- 布阵 ---------------------------------

// --------------------------------- 系统介绍 ---------------------------------

// --------------------------------- 领主 ---------------------------------
message ResLordInfoConfDataBin {
    option (cltgen.pk)               = "LordID";
    option (cltgen.index)            = "EnableInfo.Enabled";
    option (cltgen.index)            = "EnableInfo.DefaultShow";
    option (cltgen.index)            = "EnableInfo.Enabled, EnableInfo.DefaultShow";
    option (cltgen.system_databin)   = true;
    option (cltgen.gamecore_databin) = true;
    option (cltgen.random_access)    = Editor;

    uint32 LordID                       = 1 [ (resdata.cname) = "领主ID", (bingogen.primary_key) = 1 ];
    uint32 ActorID                      = 2 [ (resdata.cname) = "局内英雄ID" ];
    string LordName                     = 3 [ (resdata.cname) = "领主名称", (resdata.translate) = true ];
    uint32 DecompDrop                   = 6 [ (resdata.cname) = "重复获取掉落" ];
    string ActorInfoPath                = 7 [ (resdata.cname) = "ActorInfo路径" ];
    uint32 UnlockHeadID                 = 8 [ (resdata.cname) = "领主头像ID" ];
    uint32 AwardGroupId                 = 9 [ (resdata.cname) = "领主奖励组ID" ];
    string AGEPath                      = 11 [ (resdata.cname) = "AGE文件夹路径" ];
    uint32 SortValue                    = 12 [ (resdata.cname) = "棋手选择排序ID" ];
    bool IsNewPlayerLord                = 13 [ (resdata.cname) = "新手向棋手标签" ];
    int32 MeshScale                     = 14 [ (resdata.cname) = "模型缩放系数" ];
    bool OpenLordPower                  = 15 [ (resdata.cname) = "是否开启熟练度" ];
    COM_GAMETYPE_GROUP GameTypeGroup    = 16 [ (resdata.cname) = "游戏模式组" ];
    bool EnableClientAI                 = 17 [ (resdata.cname) = "行为树AI可用" ];
    bool OpenLordFiles                  = 19 [ (resdata.cname) = "是否开启棋手档案" ];
    ResEnableInfo EnableInfo            = 20 [ (resdata.cname) = "" ];
}

// 自走棋回合状态bit
enum RoundStateBit {
    option (cltgen.flags)         = true;
    option (cltgen.gamecore_enum) = true;

    ROUND_STATE_BIT_NULL          = 0 [ (resdata.keyword_alias) = "棋手无效回合" ];
    ROUND_STATE_BIT_BEGIN         = 1 [ (resdata.keyword_alias) = "棋手开局回合" ];
    ROUND_STATE_BIT_BATTLE        = 2 [ (resdata.keyword_alias) = "棋手战斗回合" ];
    ROUND_STATE_BIT_EXCHANGE_CARD = 4 [ (resdata.keyword_alias) = "棋手换牌回合" ];
    ROUND_STATE_BIT_AUCTION       = 8 [ (resdata.keyword_alias) = "棋手拍卖回合" ];
    ROUND_STATE_BIT_LORD_REWARD   = 16 [ (resdata.keyword_alias) = "棋手领主奖励回合" ];
    ROUND_STATE_BIT_CHOOSE_LORD   = 32 [ (resdata.keyword_alias) = "棋手选择领主回合" ];
    ROUND_STATE_BIT_BOSS_BATTLE   = 64 [ (resdata.keyword_alias) = "棋手BOSS战斗回合" ];
    ROUND_STATE_BIT_GRAB_AWARD    = 128 [ (resdata.keyword_alias) = "棋手争夺赛回合" ];

    ROUND_STATE_BIT_NORMAL_BATTLE = 66 [ (resdata.keyword_alias) = "棋手所有战斗回合" ];
    ROUND_STATE_BIT_MAX           = 9;
}

// 自走棋交互方式
enum LordSkillInteraction {
    option (cltgen.bp_export) = true;

    option (cltgen.flags)         = true;
    option (cltgen.gamecore_enum) = true;

    LordSkillInteraction_Passive         = 0 [ (resdata.keyword_alias) = "自走棋被动" ];
    LordSkillInteraction_Immediate       = 1 [ (resdata.keyword_alias) = "自走棋瞬发" ];
    LordSkillInteraction_SelectObject    = 2 [ (resdata.keyword_alias) = "自走棋选择对象" ];
    LordSkillInteraction_SelectPosition  = 4 [ (resdata.keyword_alias) = "自走棋选择位置" ];
    LordSkillInteraction_SelectCardStack = 8 [ (resdata.keyword_alias) = "自走棋选择手牌" ];
    LordSkillInteraction_SelectAny       = 14 [ (resdata.keyword_alias) = "自走棋选择任意" ];
    LordSkillInteraction_Choice          = 15 [ (resdata.keyword_alias) = "自走棋抉择" ];
}

// 自走棋领主技能消耗类型
enum LordSkillCostType {
    option (cltgen.csharp_enum)   = true;
    option (cltgen.gamecore_enum) = true;

    LordSkillCostType_Gold   = 0 [ (resdata.keyword_alias) = "自走棋金币" ];
    LordSkillCostType_Health = 1 [ (resdata.keyword_alias) = "自走棋生命" ];
}

// 自走棋交互参数
enum LordSkillInteractionParam {
    option (cltgen.flags)         = true;
    option (cltgen.gamecore_enum) = true;

    LordSkillInteractionParam_None = 0;

    LordSkillInteractionParam_HostPrepareObject      = 1 [ (resdata.keyword_alias) = "自走棋己方备战对象" ];
    LordSkillInteractionParam_HostInbattleObject     = 2 [ (resdata.keyword_alias) = "自走棋己方战斗对象" ];
    LordSkillInteractionParam_GuestObject            = 4 [ (resdata.keyword_alias) = "自走棋对方对象" ];
    LordSkillInteractionParam_Star1Object            = 8 [ (resdata.keyword_alias) = "自走棋1星对象" ];
    LordSkillInteractionParam_Star2Object            = 16 [ (resdata.keyword_alias) = "自走棋2星对象" ];
    LordSkillInteractionParam_Star3Object            = 32 [ (resdata.keyword_alias) = "自走棋3星对象" ];
    LordSkillInteractionParam_HostInbattleHero       = 64 [ (resdata.keyword_alias) = "自走棋己方战斗英雄" ];
    LordSkillInteractionParam_AnyHostObject          = 3 [ (resdata.keyword_alias) = "自走棋任意己方对象" ];
    LordSkillInteractionParam_AnyObject              = 7 [ (resdata.keyword_alias) = "自走棋全体对象" ];
    LordSkillInteractionParam_HostPrepareStar1Object = 9 [ (resdata.keyword_alias) = "己方备战1星对象" ];
    LordSkillInteractionParam_HostPrepareStar2Object = 17 [ (resdata.keyword_alias) = "己方备战2星对象" ];
    LordSkillInteractionParam_HostPrepareStar3Object = 33 [ (resdata.keyword_alias) = "己方备战3星对象" ];

    LordSkillInteractionParam_HostGrid     = 1 [ (resdata.keyword_alias) = "自走棋己方单格" ];
    LordSkillInteractionParam_HostRow      = 2 [ (resdata.keyword_alias) = "自走棋己方单行" ];
    LordSkillInteractionParam_OppositeGrid = 4 [ (resdata.keyword_alias) = "自走棋对方单格" ];
    LordSkillInteractionParam_OppositeRow  = 8 [ (resdata.keyword_alias) = "自走棋对方单行" ];

    option allow_alias = true;
}

enum ELordSkillInstType {
    option (cltgen.gamecore_enum) = true;

    LORD_SKILL_INST_TYPE_NOT_DEFINE   = 0;
    LORD_SKILL_INST_TYPE_DEFAULT      = 1 [ (resdata.keyword_alias) = "默认" ];
    LORD_SKILL_INST_TYPE_LvBu         = 2 [ (resdata.keyword_alias) = "吕布" ];
    LORD_SKILL_INST_TYPE_DaQiao       = 3 [ (resdata.keyword_alias) = "大乔" ];
    LORD_SKILL_INST_TYPE_DaJi         = 4 [ (resdata.keyword_alias) = "妲己" ];
    LORD_SKILL_INST_TYPE_ChangE       = 5 [ (resdata.keyword_alias) = "嫦娥" ];
    LORD_SKILL_INST_TYPE_ZhuangZhou   = 6 [ (resdata.keyword_alias) = "庄周" ];
    LORD_SKILL_INST_TYPE_NewbieYao    = 7 [ (resdata.keyword_alias) = "新手引导瑶" ];
    LORD_SKILL_INST_TYPE_WangZhaoJun  = 8 [ (resdata.keyword_alias) = "王昭君" ];
    LORD_SKILL_INST_TYPE_LiBai        = 9 [ (resdata.keyword_alias) = "李白" ];
    LORD_SKILL_INST_TYPE_Yao          = 10 [ (resdata.keyword_alias) = "瑶" ];
    LORD_SKILL_INST_TYPE_DiaoChan     = 11 [ (resdata.keyword_alias) = "貂蝉" ];
    LORD_SKILL_INST_TYPE_DongFangJing = 12 [ (resdata.keyword_alias) = "东方镜" ];
    LORD_SKILL_INST_TYPE_GongSunLi    = 13 [ (resdata.keyword_alias) = "公孙离" ];
    LORD_SKILL_INST_TYPE_MaKeBoLuo    = 14 [ (resdata.keyword_alias) = "马可波罗" ];
    LORD_SKILL_INST_TYPE_YangYuHuan   = 15 [ (resdata.keyword_alias) = "杨玉环" ];
    LORD_SKILL_INST_TYPE_AI1          = 16 [ (resdata.keyword_alias) = "AI用" ];
    LORD_SKILL_INST_TYPE_SunBin       = 17 [ (resdata.keyword_alias) = "孙膑" ];
	LORD_SKILL_INST_TYPE_SunShangXiang = 18 [ (resdata.keyword_alias) = "孙尚香" ]; // 孙尚香
}

enum ELordSkillPhaseParam  {
    option (cltgen.gamecore_enum) = true;
    option (cltgen.csharp_enum)   = true;
    
    LORD_SKILL_PHASE_PARAM_NULL   = 0;
    LORD_SKILL_PHASE_PARAM_POST_PREPARE_MATCH      = 1 [ (resdata.keyword_alias) = "提前匹配限制" ];
}

message ResLordSkillDataBin {
    option (cltgen.pk)            = "LordID, SkillLevel, EnhancedID";
    option (cltgen.index)         = "LordID";
    option (cltgen.index)         = "LordID, EnhancedID";
    option (cltgen.index)         = "LordID, SkillLevel";
    option (cltgen.index)         = "SkillID";
    option (cltgen.random_access) = Editor;

    option (cltgen.system_databin)   = true;
    option (cltgen.gamecore_databin) = true;

    uint32 SkillID                             = 3 [ (resdata.cname) = "技能ID", (bingogen.primary_key) = 1 ];
    uint32 LordID                              = 1 [ (resdata.cname) = "棋手ID" ]; // 关联ResLordSkillLevelDataBin.LordID, pk1
    uint32 SkillLevel                          = 2 [ (resdata.cname) = "技能等级" ];
    string Icon                                = 4 [ (resdata.cname) = "技能图标" ];
    string Name                                = 5 [ (resdata.cname) = "技能名称", (resdata.translate) = true ];
    string Desc                                = 6 [ (resdata.cname) = "技能描述", (resdata.translate) = true ];
    uint32 CostType                            = 7 [ (resdata.cname) = "技能消耗类型", (resdata.bind) = "LordSkillCostType" ];
    uint32 CostCount                           = 8 [ (resdata.cname) = "技能消耗参数" ];
    LordSkillInteraction Interaction           = 9 [ (resdata.cname) = "交互方式", (resdata.bind) = "LordSkillInteraction" ];
    LordSkillInteractionParam InteractionParam = 10 [ (resdata.cname) = "交互参数", (resdata.bind) = "LordSkillInteractionParam" ];
    uint32 Cooldown                            = 11 [ (resdata.cname) = "冷却" ];
    uint32 LimitsPerRound                      = 12 [ (resdata.cname) = "单回合使用次数限制" ];
    uint32 TotalLimits                         = 13 [ (resdata.cname) = "整场使用次数限制" ];
    uint32 Phase                               = 14 [ (resdata.cname) = "生效阶段" ];
    string BpPath                              = 15 [ (resdata.cname) = "蓝图路径" ];
    ELordSkillInstType SkillInstType           = 16 [ (resdata.cname) = "技能实例类型", (resdata.bind) = "ELordSkillInstType" ];
    uint32 EnhancedID                          = 17 [ (resdata.cname) = "强化ID" ]; // 关联ResLordSkillLevelDataBin.EnhancedID, pk2
    string SkillCostTypeIcon                   = 18 [ (resdata.cname) = "技能消耗类型Icon" ];
    RoundStateBit RoundState                   = 19 [ (resdata.cname) = "生效回合", (resdata.bind) = "RoundStateBit" ];
    string WorldViewShort                      = 20 [ (resdata.cname) = "世界观短句", (resdata.translate) = true ];
    ELordSkillPhaseParam PhaseParam            = 21 [ (resdata.cname) = "生效阶段参数", (resdata.bind) = "ELordSkillPhaseParam" ];
}

enum ELordSkillLevelExpGatherConditionCondType {
    option (cltgen.gamecore_enum) = true;
    option (cltgen.csharp_enum)   = true;

    LORD_SKILL_EXP_GATHER_COND_TYPE_NONE         = 0;
    LORD_SKILL_EXP_GATHER_COND_TYPE_KILL_ENEMY   = 1 [ (resdata.keyword_alias) = "击杀棋子" ];
    LORD_SKILL_EXP_GATHER_COND_TYPE_LORD_LEVELUP = 2 [ (resdata.keyword_alias) = "棋手等级提升" ];
    LORD_SKILL_EXP_GATHER_COND_TYPE_ROUND_START  = 3 [ (resdata.keyword_alias) = "回合开始" ];
    LORD_SKILL_EXP_GATHER_COND_TYPE_NEWBIE       = 4 [ (resdata.keyword_alias) = "新手教学" ];
    LORD_SKILL_EXP_GATHER_COND_TYPE_EMPTY        = 5 [ (resdata.keyword_alias) = "空条件" ];
}

message ResLordSkillLevelExpGatherConditionInfo {
    uint32 ConditionType            = 1 [ (resdata.cname) = "条件类型", (resdata.bind) = "ELordSkillLevelExpGatherConditionCondType" ];
    repeated uint32 ConditionParams = 2 [ (resdata.cname) = "条件参数", (resdata.count) = "Legacy.RES_LORD_LEVEL_EXP_GATHERER_PARAM_COUNT" ];
    uint32 GetExp                   = 3 [ (resdata.cname) = "值" ];
}

message ResLordSkillLevelDataBin {
    option (cltgen.pk)               = "LordID, EnhancedID";
    option (cltgen.index)            = "LordID";
    option (cltgen.gamecore_databin) = true;
    option (cltgen.system_databin)   = true;

    uint32 LordID                                                            = 1 [ (resdata.cname) = "棋手ID", (bingogen.primary_key) = 1 ]; // 关联ResLordSkillDataBin.LordID, pk2
    uint32 EnhancedID                                                        = 2 [ (resdata.cname) = "强化ID", (bingogen.primary_key) = 2 ]; // 关联ResLordSkillDataBin.EnhancedID, pk2
    uint32 MaxLevel                                                          = 3 [ (resdata.cname) = "最大等级" ];
    repeated uint32 LevelUpExp                                               = 4 [ (resdata.cname) = "等级所需经验", (resdata.count) = "Legacy.RES_LORD_LEVEL_EXP_COUNT" ];
    repeated ResLordSkillLevelExpGatherConditionInfo ExpGatherConditionInfos = 5 [ (resdata.cname) = "经验获取", (resdata.count) = "Legacy.RES_LORD_LEVEL_EXP_GATHERER_COUNT" ];
    repeated string LevelDesc                                                = 6 [ (resdata.cname) = "技能等级描述", (resdata.count) = "Legacy.RES_LORD_LEVEL_EXP_COUNT" ];
}

message ResLordSkinDataBin {
    option (cltgen.pk)            = "SkinID";
    option (cltgen.index)         = "EnableInfo.DefaultShow";
    option (cltgen.index)         = "LordID, SkinIndex";
    option (cltgen.index)         = "LordID, EnableInfo.DefaultShow";
    option (cltgen.index)         = "SkinIndex, EnableInfo.DefaultShow";
    option (cltgen.random_access) = Editor;

    option (cltgen.gamecore_databin) = true;
    option (cltgen.system_databin)   = true;

    uint32 SkinID                    = 1 [ (resdata.cname) = "皮肤ID", (bingogen.primary_key) = 1 ];
    uint32 LordID                    = 2 [ (resdata.cname) = "领主ID" ];
    uint32 DecompDrop                = 3 [ (resdata.cname) = "重复获取掉落" ];
    uint32 SkinIndex                 = 4 [ (resdata.cname) = "皮肤索引" ];
    string Icon                      = 6 [ (resdata.cname) = "物品头像" ];
    string Portrait                  = 7 [ (resdata.cname) = "半身像" ];
    int32 ItemQuality                = 8 [ (resdata.cname) = "物品品质色", (resdata.bind) = "RES_PROP_QUALITY_TYPE" ];
    string ZLSkin                    = 9 [ (resdata.cname) = "战令零时原画" ];
    string SmallSkin                 = 10 [ (resdata.cname) = "小原画" ];
    string BigSkin                   = 11 [ (resdata.cname) = "大原画" ];
    string Name                      = 12 [ (resdata.cname) = "名称", (resdata.translate) = true ];
    string NickName                  = 13 [ (resdata.cname) = "物品名称", (resdata.translate) = true ];
    string Desc                      = 14 [ (resdata.cname) = "描述", (resdata.translate) = true ];
    string SkinType                  = 15 [ (resdata.cname) = "类型描述" ];
    int32 Order                      = 16 [ (resdata.cname) = "显示顺序" ];
    string ShowBGPath                = 17 [ (resdata.cname) = "展示背景" ];
    string ShowBGLightPath           = 18 [ (resdata.cname) = "展示背景灯光" ];
    float LordInforShowX             = 19 [ (resdata.cname) = "领主信息界面领主位置偏移X" ];
    float LordInforShowY             = 20 [ (resdata.cname) = "领主信息界面领主位置偏移Y" ];
    float LordInforShowZ             = 21 [ (resdata.cname) = "领主信息界面领主位置偏移Z" ];
    string LordInforShowHightTimeAge = 22 [ (resdata.cname) = "领主信息界面特写Age" ];
    string LordInforShowBornAge      = 23 [ (resdata.cname) = "领主信息界面出生Age" ];
    string WatchingHeadIconPath      = 24 [ (resdata.cname) = "观战小头像" ];
    string SkinQuality               = 32 [ (resdata.cname) = "皮肤品质" ];
    repeated int32 GetWay            = 33 [ (resdata.cname) = "获取渠道", (resdata.count) = "Legacy.RES_MAX_GETWAY_COUNT", (resdata.bind) = "EGetWay" ];
    string LordChooseIcon            = 35 [ (resdata.cname) = "棋手选择皮肤Icon" ];
    string LordCutsceneAge           = 39 [ (resdata.cname) = "领主过场Age" ];
    string LoadLordIcon              = 40 [ (resdata.cname) = "loading棋手立绘" ];
    string JumpSystemParam           = 41 [ (resdata.cname) = "前往系统参数" ];
    uint32 Speed                     = 42 [ (resdata.cname) = "移动速度" ];
    uint32 PlayRunStop               = 43 [ (resdata.cname) = "PlayRunStop" ];
    string StartDragAge              = 44 [ (resdata.cname) = "开始拖拽Age" ];
    string EndDragAge                = 45 [ (resdata.cname) = "结束拖拽Age" ];
    uint32 ScarceLevel               = 46 [ (resdata.cname) = "稀有度", (resdata.bind) = "RES_SCARCE_LEVEL_TYPE" ];
    string LordIdleShowAge           = 47 [ (resdata.cname) = "领主IdleShowAge" ];
    string PosterMiniIcon            = 48 [ (resdata.cname) = "棋手海报立绘" ];
    string MoveChessAge              = 51 [ (resdata.cname) = "移动棋子Age" ];
    ResEnableInfo EnableInfo         = 52 [ (resdata.cname) = "" ];
    bool ChangeProfilePanel          = 53 [ (resdata.cname) = "更改档案面板" ];
}
message ResLordDetailsItem {
    string Title = 1 [ (resdata.cname) = "名称", (resdata.translate) = true ];
    string Desc  = 2 [ (resdata.cname) = "内容", (resdata.translate) = true ];
}
message ResLordFilesItem {
    string File            = 1 [ (resdata.cname) = "内容", (resdata.translate) = true ];
    string UnlockCondition = 2 [ (resdata.cname) = "解锁条件描述", (resdata.translate) = true ];
    string Name            = 3 [ (resdata.cname) = "名称", (resdata.translate) = true ];
    ResCondInfo UnlockCond = 4 [ (resdata.cname) = "解锁条件" ];
    uint32 AwardDropID     = 5 [ (resdata.cname) = "奖励掉落ID" ];
}

message ResLordFileDataBin {
    option (cltgen.pk)             = "LordID,SkinID";
    option (cltgen.system_databin) = true;

    uint32 LordID                                   = 1 [ (resdata.cname) = "棋手ID", (bingogen.primary_key) = 1 ];
    uint32 SkinID                                   = 2 [ (resdata.cname) = "棋手皮肤ID", (bingogen.primary_key) = 2 ];
    string Name                                     = 3 [ (resdata.cname) = "姓名", (resdata.translate) = true ];
    repeated ResLordDetailsItem ResLordDetailsItems = 4 [ (resdata.cname) = "资料", (resdata.count) = "Legacy.RES_LORD_DETAILS_ITEMS_COUNT" ];
    repeated ResLordFilesItem ResLordFilesItems     = 5 [ (resdata.cname) = "档案", (resdata.count) = "Legacy.RES_LORD_FILE_ITEMS_COUNT" ];
}

message STLordQuestionAndAnswerInfo{
    string Question = 1 [ (resdata.cname) = "问题", (resdata.translate) = true ];
    string Answer   = 2 [ (resdata.cname) = "答案", (resdata.translate) = true ];
}

message ResLordQuestionAndAnswerDataBin {
    option (cltgen.pk)             = "LordID,SkinID";
    option (cltgen.system_databin) = true;

    uint32 LordID                                   = 1 [ (resdata.cname) = "棋手ID", (bingogen.primary_key) = 1 ];
    uint32 SkinID                                   = 2 [ (resdata.cname) = "棋手皮肤ID", (bingogen.primary_key) = 2 ];
    string Name                                     = 3 [ (resdata.cname) = "姓名", (resdata.translate) = true ];
    string OpeningRemarks                           = 4 [ (resdata.cname) = "开场白", (resdata.translate) = true ];
    ResGameItem AskQuestionsCost                    = 5 [ (resdata.cname) = "提问消耗" ];
    uint32 AskQuestionsAwardDropID                  = 6 [ (resdata.cname) = "提问奖励掉落ID" ];
    ResGameItem RefreshQuestionsCost                = 7 [ (resdata.cname) = "刷新问题消耗" ];
    uint32 ShowQuestionNum                          = 8 [ (resdata.cname) = "可显示问题数量" ];
    uint32 QuestionsProvidedNum                     = 9 [ (resdata.cname) = "每次提供的问题数" ];
    uint32 AllQuestionNum                           = 10[ (resdata.cname) = "总问题数量" ];
    repeated STLordQuestionAndAnswerInfo QAInfo     = 11[ (resdata.cname) = "问题", (resdata.count) = "Legacy.RES_LORD_Q_A_COUNT" ];
    string InitialConclusion                        = 12[ (resdata.cname) = "初始结语" ];
    string FinishedConclusion                       = 13[ (resdata.cname) = "完结结语" ];
    uint32 ConclusionAwardDropID                    = 14[ (resdata.cname) = "结语奖励掉落ID" ];
}

message ResDT_LordOutgameAudio {
    string Show  = 1 [ (resdata.cname) = "棋手展示" ];
    string Touch = 2 [ (resdata.cname) = "触摸棋手" ];
    string Story = 3 [ (resdata.cname) = "棋手故事" ];
}

message ResDT_LordIngameAudio {
    string BankName   = 1 [ (resdata.cname) = "Bank" ];
    string LordChoose = 2 [ (resdata.cname) = "选择语音" ];
    string GameStart  = 3 [ (resdata.cname) = "开场语音" ];
    string Attack     = 4 [ (resdata.cname) = "攻击音效" ];
    string AttackVO1p = 5 [ (resdata.cname) = "1P攻击语音" ];
    string Hit        = 6 [ (resdata.cname) = "受击音效" ];
    string HitVO1p    = 7 [ (resdata.cname) = "1P受击语音" ];
    string AttackVO3p = 8 [ (resdata.cname) = "3P攻击语音" ];
    string HitVO3p    = 9 [ (resdata.cname) = "3P受击语音" ];
    string Switch     = 10 [ (resdata.cname) = "棋手切换" ];
    string ContinousWin             = 11 [ (resdata.cname) = "取得连胜" ];
    string ContinouseLose           = 12 [ (resdata.cname) = "连败" ];
    string WinAfterContinouseLose   = 13 [ (resdata.cname) = "连败后取得胜利" ];
    string LoseAfterContinouseWin   = 14 [ (resdata.cname) = "连胜后战败" ];
    string TerminateOpponentContinousWin    = 15 [ (resdata.cname) = "终结对手连胜" ];
    string KillOpponent             = 16 [ (resdata.cname) = "击杀敌人" ];
    string GetSpecialTalent         = 17 [ (resdata.cname) = "获取棋手专属天赋" ];
    string GetTopJiBan              = 18 [ (resdata.cname) = "获取最高羁绊" ];

}

message ResLordAudioCfgDataBin {
    option (cltgen.pk)             = "LordID, SkinIndex";
    option (cltgen.system_databin) = true;

    uint32 LordID                       = 1 [ (resdata.cname) = "领主ID", (bingogen.primary_key) = 1 ];
    ResDT_LordOutgameAudio OutgameAudio = 2 [ (resdata.cname) = "局外" ];
    ResDT_LordIngameAudio IngameAudio   = 3 [ (resdata.cname) = "局内" ];
    uint32 SkinIndex                    = 4 [ (resdata.cname) = "皮肤索引" ];
    string MatchResultFirstFullHp       = 5 [ (resdata.cname) = "对局结束语音：满血碾压吃鸡" ];
    string MatchResultFirstLowHP        = 6 [ (resdata.cname) = "对局结束语音：绝地翻盘吃鸡" ];
    string MatchResultFirstNormal       = 7 [ (resdata.cname) = "对局结束语音：其他吃鸡" ];
    string MatchResultSecondToFourth    = 8 [ (resdata.cname) = "对局结束语音：第二名和第四名" ];
    string MatchResultFourthToEight     = 9 [ (resdata.cname) = "对局结束语音：第四名到第八名" ];
}

// Lord的羁绊相关音效配置
enum ELordJiBanType {
    option (cltgen.csharp_enum)   = true;

    LordJiBanType_Meet   = 0 [ (resdata.keyword_alias) = "相遇(主控/非主控都触发)" ];
    LordJiBanType_RuXue  = 1 [ (resdata.keyword_alias) = "入血(攻击者触发)" ];
    LordJiBanType_Kill   = 2 [ (resdata.keyword_alias) = "击杀(击杀者触发)" ];
}

message ResLordJiBanAudioCfgDataBin {
    option (cltgen.pk)              = "LordAID, SkinAIndex, LordBID, SkinBIndex, JiBanType";
    option (cltgen.index)           = "LordAID, SkinAIndex";
    option (cltgen.system_databin) = true;

    uint32 LordAID                       = 1 [ (resdata.cname) = "领主A_ID", (bingogen.primary_key) = 1 ];
    uint32 SkinAIndex                    = 2 [ (resdata.cname) = "领主A_皮肤索引" ];
    uint32 LordBID                       = 3 [ (resdata.cname) = "领主B_ID"];
    uint32 SkinBIndex                    = 4 [ (resdata.cname) = "领主B_皮肤索引" ];
    uint32 JiBanType                     = 5 [ (resdata.cname) = "羁绊类型", (resdata.bind) = "ELordJiBanType" ];
    string VoiceA                        = 6 [ (resdata.cname) = "语音A" ];
    string VoiceB                        = 7 [ (resdata.cname) = "语音B" ];
}

message ResLordDefaultVoiceCfgDataBin {
    option (cltgen.pk)               = "ID";
    option (cltgen.index)            = "LordID,SkinID";
    option (cltgen.system_databin)   = true;

    uint32 ID                               = 1 [ (resdata.cname) = "语音ID" ];
    uint32 Order                            = 2 [ (resdata.cname) = "语音顺序" ];
    uint32 LordID                           = 3 [ (resdata.cname) = "对应棋手ID", (bingogen.primary_key) = 1 ];
    uint32 SkinID                           = 4 [ (resdata.cname) = "对应皮肤ID" ];
    string Title                            = 5 [ (resdata.cname) = "语音标题", (resdata.translate) = true ];
    string Text                             = 6 [ (resdata.cname) = "语音内容", (resdata.translate) = true ];
    string Voice                            = 7 [ (resdata.cname) = "对应语音" ];

}

// 棋手熟练度结算表
message ResLordProficiencySettleDatabin {
    option (cltgen.index)          = "GameType";
    option (cltgen.system_databin) = true;
    COM_GAME_TYPE GameType         = 1 [ (resdata.cname) = "对局模式", (bingogen.primary_key) = 1 ];
    uint32 Rank                    = 2 [ (resdata.cname) = "对局排名", (bingogen.primary_key) = 2 ];
    uint32 Score                   = 3 [ (resdata.cname) = "熟练度" ];
}

//
message ResLordRankShowInfoDatabin {
    option (cltgen.system_databin) = true;
    option (cltgen.index)          = "LordRankType";
    uint32 LordRankType            = 1 [ (resdata.cname) = "战力榜单", (resdata.bind) = "ERanklistSubTypeLordPower" ];
    uint32 LowRankCount            = 2 [ (resdata.cname) = "最低排名" ];
    uint32 TopRankIndex            = 3 [ (resdata.cname) = "最高排名" ];
    string IconPath                = 4 [ (resdata.cname) = "图标资源路径" ];
    string MinIconPath             = 5 [ (resdata.cname) = "缩略图标路径" ];
    string BigIconPath             = 6 [ (resdata.cname) = "大图标资源路径" ];
}
// 棋手熟练度等级配置表
message ResLordProficiencyLevelDatabin {
    option (cltgen.system_databin)            = true;
    option (cltgen.pk)                        = "Level";
    option (cltgen.random_access)             = Runtime;
    uint32 Level                              = 1 [ (resdata.cname) = "熟练度等级", (bingogen.primary_key) = 1 ];
    uint32 LvUpScore                          = 2 [ (resdata.cname) = "升级积分" ];
    string BigIconPath                        = 3 [ (resdata.cname) = "图标资源路径" ];
    string IconPath                           = 4 [ (resdata.cname) = "缩略图标路径" ];
    repeated LordProficiencyParam UnLockValue = 5 [ (resdata.cname) = "奖励", (resdata.count) = "3" ];
    string MaxBigIconPath                     = 6 [ (resdata.cname) = "超大图标资源路径" ];
}

enum ELordProficiencyUnLockType {
    LORD_PROFICIENCY_UNLOCK_TYPE_NULL     = 0 [ (resdata.keyword_alias) = "无效值" ];
    LORD_PROFICIENCY_UNLOCK_TYPE_LORDFILE = 1 [ (resdata.keyword_alias) = "棋手档案" ];
}

message LordProficiencyParam {
    uint32 Type                = 1 [ (resdata.cname) = "类型", (resdata.bind) = "ELordProficiencyUnLockType" ];
    repeated uint32 ParamValue = 2 [ (resdata.cname) = "参数", (resdata.count) = "3" ];
}

// 棋手战力常量表
message ResLordPowerCommonDatabin {
    option (cltgen.system_databin) = true;
    option (cltgen.random_access)  = Runtime;

    uint32 InitActivity          = 1 [ (resdata.cname) = "棋手初始活跃度" ];
    uint32 MaxActivity           = 2 [ (resdata.cname) = "棋手最大活跃度" ];
    uint32 ActivityChgBase       = 3 [ (resdata.cname) = "活跃度变化基数" ];
    uint32 ActivityReduceTime    = 4 [ (resdata.cname) = "活跃度衰减时间" ];
    uint32 BattlePointsReduceNum = 5 [ (resdata.cname) = "战绩积分衰减场次" ];

    uint32 LowRankJoinCount   = 6 [ (resdata.cname) = "棋手初级排行榜上榜名次" ];
    uint32 LowRankShowCount   = 7 [ (resdata.cname) = "棋手初级排行榜展示名次" ];
    uint32 MidRankJoinCount   = 8 [ (resdata.cname) = "棋手中级排行榜上榜名次" ];
    uint32 MidRankShowCount   = 9 [ (resdata.cname) = "棋手中级排行榜展示名次" ];
    uint32 HightRankJoinCount = 10 [ (resdata.cname) = "棋手高级排行榜上榜名次" ];
    uint32 HightRankShowCount = 11 [ (resdata.cname) = "棋手高级排行榜展示名次" ];
    uint32 TopRankJoinCount   = 12 [ (resdata.cname) = "棋手国服排行榜上榜名次" ];
    uint32 TopRankShowCount   = 13 [ (resdata.cname) = "棋手国服排行榜展示名次" ];
}

// 棋手战绩积分配置表
message ResLordBattlePointsDatabin {
    uint32 Rank            = 1 [ (resdata.cname) = "段位", (bingogen.primary_key) = 1, (resdata.bind) = "EPvpRankType" ];
    uint32 Weight          = 2 [ (resdata.cname) = "权重系数" ];
    uint32 ScoreUpperLimit = 3 [ (resdata.cname) = "积分上限" ];
}

// 棋手表现积分表
message ResLordShowScoreDatabin {
    uint32 SeasonID = 1 [ (resdata.cname) = "赛季", (bingogen.primary_key) = 1 ];
    uint32 GameType = 2 [ (resdata.cname) = "模式", (resdata.bind) = "COM_GAME_TYPE", (bingogen.primary_key) = 2 ];
    uint32 Rank     = 3 [ (resdata.cname) = "段位", (resdata.bind) = "EPvpRankType", (bingogen.primary_key) = 3 ];
    uint32 Place    = 4 [ (resdata.cname) = "名次", (bingogen.primary_key) = 4 ];
    uint32 Score    = 5 [ (resdata.cname) = "表现积分" ];
}

// 棋手表现积分控制表.
message ResLordShowScoreCtrlDatabin {
    uint32 MinGameNum        = 1 [ (resdata.cname) = "最小对局场次" ];
    uint32 MaxGameNum        = 2 [ (resdata.cname) = "最大对局场次" ];
    uint32 CorrectionFactors = 3 [ (resdata.cname) = "修正系数" ];
}

// 棋手战绩结算.
message ResLordRecentResultsDatabin {
    uint32 SeasonID                 = 1 [ (resdata.cname) = "赛季ID", (bingogen.primary_key) = 1 ];
    repeated uint32 HistorySeasonID = 2 [ (resdata.cname) = "历史赛季", (resdata.count) = "Legacy.LORDRECENTRESULTS_HISTORYSEASON_MAX_CNT" ];
    uint32 BattleRankingBase        = 3 [ (resdata.cname) = "标准战斗排名" ];
    uint32 BattleSettleMaxNum       = 4 [ (resdata.cname) = "战斗结算最大人数" ];
}

// 棋手战力排行榜称号表.
message ResLordPowerRankTitleDatabin {
    option (cltgen.pk)             = "ID";
    option (cltgen.system_databin) = true;

    uint32 ID      = 1 [ (resdata.cname) = "称号ID", (bingogen.primary_key) = 1 ];
    string Name    = 2 [ (resdata.cname) = "称号名称" ];
    string Content = 3 [ (resdata.cname) = "称号内容" ];
}

// 棋手战力榜单映射表.
message ResLordPowerRankMapDataBin {
    option (resdata.output) = Server;

    uint32 ID                = 1 [ (resdata.cname) = "榜单ID", (bingogen.primary_key) = 1 ];
    uint32 ApolloRankType    = 2 [ (resdata.cname) = "apollo榜单类型" ];
    uint32 ApolloRankInsID   = 3 [ (resdata.cname) = "apollo榜单实例" ];
    uint32 ApolloSubRankType = 4 [ (resdata.cname) = "apollo子榜单类型" ];
}

message ResLordGroupDataBin {
    option (resdata.output) = Server;

    uint32 GroupID = 1 [ (resdata.cname) = "棋手组ID" ];
    uint32 LordID = 2 [ (resdata.cname) = "棋手ID" ];
}

message LordConf {
    ResLordInfoConfDataBin LordData          = 1 [ (bingogen.databin_path) = "" ];
    ResLordSkinDataBin SkinData              = 2 [ (bingogen.databin_path) = "" ];

    ResLordProficiencySettleDatabin LordProficiencySettleCfg = 5 [ (bingogen.databin_path) = "" ];
    ResLordProficiencyLevelDatabin LordProficiencyLevelCfg   = 6 [ (bingogen.databin_path) = "" ];
    ResLordPowerCommonDatabin LordPowerCommonCfg             = 7 [ (bingogen.databin_path) = "" ];
    ResLordBattlePointsDatabin LordBattlePointsCfg           = 8 [ (bingogen.databin_path) = "" ];
    ResLordShowScoreDatabin LordShowScoreCfg                 = 9 [ (bingogen.databin_path) = "" ];
    ResLordShowScoreCtrlDatabin LordShowScoreCtrlCfg         = 10 [ (bingogen.databin_path) = "" ];
    ResLordRecentResultsDatabin LordRecentResultsCfg         = 11 [ (bingogen.databin_path) = "" ];
    ResLordPowerRankTitleDatabin LordPowerRankTitleCfg       = 12 [ (bingogen.databin_path) = "" ];
    ResLordPowerRankMapDataBin LordPowerRankMapCfg           = 13 [ (bingogen.databin_path) = "" ];
    ResLordFileDataBin LordFileCfg                           = 14 [ (bingogen.databin_path) = "" ];
    ResLordQuestionAndAnswerDataBin LordQuestionAndAnswerCfg = 15 [ (bingogen.databin_path) = "" ];
    ResLordGroupDataBin LordGroupDataBin                     = 17 [ (bingogen.databin_path) = "" ];
}

// --------------------------------- 领主 ---------------------------------

// --------------------------------- 棋手选择阶段 ---------------------------------
message ResDTLordSelectRound {
    uint32 Round = 1 [(resdata.cname) = "轮次"];
}

message ResDTLordSelectAIOpRange {
    uint32 Begin = 1 [(resdata.cname) = "开始"];
    uint32 End   = 2 [(resdata.cname) = "结束"];
}

message ResPVPLordSelectModeCfg {
    uint32 ModeID                 = 1 [(resdata.cname) = "模式ID", (bingogen.primary_key) = 1];
    uint32 SeasonID               = 2 [ (resdata.cname) = "赛季ID"];
    uint32 GameType               = 3 [ (resdata.cname) = "玩法模式", (resdata.bind) = "COM_GAME_TYPE"];
    uint32 Rank                   = 4 [ (resdata.cname) = "最低段位", (resdata.bind) = "EPvpRankType"];
    uint32 RepeatSelectLordInvalid = 5 [ (resdata.cname) = "禁止重复选择棋手" ];
    uint32 SelectedCancelInvalid   = 11 [ (resdata.cname) = "禁止取消选择" ];
    uint32 AllConfirmFinish        = 12 [ (resdata.cname) = "确认后提前结束阶段" ];
    repeated ResDTLordSelectRound RoundList = 6 [(resdata.cname) = "序号",  (resdata.count) = "Legacy.RES_MAX_PVP_PLAYER_NUM"] ;
    uint32 BanRound               = 7 [ (resdata.cname) = "禁用轮次" ];
    uint32 StageConfirmTimeoutSec = 8 [ (resdata.cname) = "每轮抢选阶段时长" ];
    ResDTLordSelectAIOpRange StageConfirmAIOp = 13 [(resdata.cname) = "抢选阶段AI操作"];
    uint32 StageBanTimeoutSec     = 9 [ (resdata.cname) = "禁用阶段时长" ];
    ResDTLordSelectAIOpRange StageBanAIOp = 14 [(resdata.cname) = "禁用阶段AI操作"];
    uint32 StageFinalTimeoutSec   = 10 [ (resdata.cname) = "最终调整阶段时长" ];
}

message PvpLordSelectConf {
    ResPVPLordSelectModeCfg PVPLordSelectModeCfg = 1 [(bingogen.databin_path) = ""];
}

// --------------------------------- 棋手选择阶段 ---------------------------------

// --------------------------------- 社交 start ---------------------------------
message ResSocialFriendTextCfg {
    option (cltgen.pk)             = "ID";
    option (cltgen.system_databin) = true;
    option (cltgen.random_access)  = Runtime;

    uint32 ID      = 1 [ (resdata.cname) = "ID", (bingogen.primary_key) = 1 ];
    string Content = 2 [ (resdata.cname) = "文本内容", (resdata.translate) = true ];
}

message ResSocialCfg {
    option (cltgen.pk)             = "ID";
    option (cltgen.system_databin) = true;

    uint32 ID             = 1 [ (resdata.cname) = "ID", (bingogen.primary_key) = 1 ];
    string Extra          = 2 [ (resdata.cname) = "备注" ];
    uint32 InviteCD       = 3 [ (resdata.cname) = "对局邀请cd" ];
    uint32 WatchNum       = 4 [ (resdata.cname) = "观战人数上限" ];
    uint32 FriendNum      = 5 [ (resdata.cname) = "好友数量上限" ];
    uint32 verifyTextNum  = 6 [ (resdata.cname) = "验证信息字数上限" ];
    uint32 RequestTextNum = 7 [ (resdata.cname) = "申请列表留存上限" ];
    uint32 BlackListNum   = 8 [ (resdata.cname) = "黑名单人数上限" ];
    uint32 RequestPeriod  = 9 [ (resdata.cname) = "申请有效期" ];
    uint32 RecentGameNum  = 10 [ (resdata.cname) = "最近游戏展示对局数" ];
    uint32 RecommendNum   = 11 [ (resdata.cname) = "推荐好友30天内场次数" ];
    uint32 NearbyNum      = 12 [ (resdata.cname) = "附近玩家展示人数" ];
    string InviteText     = 13 [ (resdata.cname) = "对局预约邀请文本", (resdata.translate) = true ];
}

message SocialConf { ResSocialCfg SocialData = 1 [ (bingogen.databin_path) = "" ]; }

// --------------------------------- 社交 end ---------------------------------

// --------------------------------- 个性化 --------------------------------

// 棋盘摆件类型
enum EChessBoardPartType {
    BOARDPART_INVALID    = 0;
    BOARDPART_BIGTHING   = 1 [ (resdata.keyword_alias) = "大摆件" ];
    BOARDPART_SMALLTHING = 2 [ (resdata.keyword_alias) = "小摆件" ];
    BOARDPART_STICKERS   = 3 [ (resdata.keyword_alias) = "贴纸" ];
    BOARDPART_BACKGROUND = 4 [ (resdata.keyword_alias) = "背景" ];
    BOARDPART_MAX        = 5;
}

// 棋盘区域分类
enum EChessBoardAreaType {
    BOARDAREA_INVALID          = 0;
    BOARDAREA_COMMANDDESK      = 1 [ (resdata.keyword_alias) = "指挥台" ];
    BOARDAREA_LEFT_DECORATING  = 2 [ (resdata.keyword_alias) = "左侧装饰区" ];
    BOARDAREA_RIGHT_DECORATING = 3 [ (resdata.keyword_alias) = "右侧装饰区" ];
    BOARDAREA_BATTLEAREA       = 4 [ (resdata.keyword_alias) = "战斗区" ];
    BOARDAREA_BACKGROUNDAREA   = 5 [ (resdata.keyword_alias) = "背景区" ];
    BOARDAREA_MAX              = 6;
}


// 特效类型
enum ESpecialEftType {
    EFTTYPE_INVALID = 0;
    EFTTYPE_COMMON  = 1 [ (resdata.keyword_alias) = "通用特效" ];
    EFTTYPE_LORD    = 2 [ (resdata.keyword_alias) = "棋手专用特效" ];
    EFTTYPE_SKIN    = 3 [ (resdata.keyword_alias) = "皮肤专用特效" ];
    EFTTYPE_LAST    = 4;
}

// 特效分类
enum ESpecialEftClass {
    option (cltgen.gamecore_enum) = true;
    option (cltgen.csharp_enum)   = true;
    EFTCLASS_INVALID              = 0;
    EFTCLASS_WIN                  = 1 [ (resdata.keyword_alias) = "胜利特效" ];
    EFTCLASS_ATTACK               = 2 [ (resdata.keyword_alias) = "攻击特效" ];
    EFTCLASS_TRANSFORM            = 3 [ (resdata.keyword_alias) = "传送特效" ];
    EFTCLASS_LAST                 = 4;
}

// 表情自动使用的类型
enum EEmojiAutoUseType {
    option (cltgen.gamecore_enum) = true;
    option (cltgen.csharp_enum)   = true;
    EMOJIUSE_INVALID              = 0;
    EMOJIUSE_STARTGAME            = 1 [ (resdata.keyword_alias) = "开局时" ];
    EMOJIUSE_BUMBERONE            = 2 [ (resdata.keyword_alias) = "第一名" ];
    EMOJIUSE_SYNTHESIS3STARS      = 3 [ (resdata.keyword_alias) = "合成3星" ];
    EMOJIUSE_ENDWINSTREAK         = 4 [ (resdata.keyword_alias) = "终结连胜" ];
    EMOJIUSE_WINSTREAK            = 5 [ (resdata.keyword_alias) = "对局连胜" ];
    EMOJIUSE_WIN                  = 6 [ (resdata.keyword_alias) = "胜利" ];
    EMOJIUSE_LAST                 = 7;
}

message ResPersonaliseChessboardDataBin {
    option (cltgen.pk)    = "ID";
    option (cltgen.index) = "SceneID";

    option (cltgen.system_databin) = true;
    option (cltgen.random_access)  = Runtime;

    uint32 ID                           = 1 [ (resdata.cname) = "棋盘id", (bingogen.primary_key) = 1 ];
    string Name                         = 2 [ (resdata.cname) = "棋盘名称" ];
    string MiniIcon                     = 3 [ (resdata.cname) = "棋盘道具图" ];
    string Icon                         = 4 [ (resdata.cname) = "棋盘小图" ];
    int32  Quality                      = 5 [ (resdata.cname) = "棋盘品质", (resdata.bind) = "RES_PROP_QUALITY_TYPE" ];
    uint32 DecompDrop                   = 6 [ (resdata.cname) = "重复获取掉落" ];
    string Desc                         = 7 [ (resdata.cname) = "棋盘描述" ];
    string Jump                         = 8 [ (resdata.cname) = "前往参数" ];
    string JumpDesc                     = 9 [ (resdata.cname) = "前往描述" ];
    uint32 SceneID                      = 10 [ (resdata.cname) = "场景表ID" ];
    COM_GAMETYPE_GROUP GameTypeGroup    = 11 [ (resdata.cname) = "游戏模式组" ];
    uint32 ScarceLevel                  = 12 [ (resdata.cname) = "稀有度",(resdata.bind) = "RES_SCARCE_LEVEL_TYPE" ];
    ResEnableInfo EnableInfo            = 13 [ (resdata.cname) = "" ];
}

message ResPersonaliseConstDatabin {
    option (cltgen.pk)    = "GameTypeGroup";
    option (cltgen.system_databin)   = true;
    option (cltgen.gamecore_databin) = true;
    option (cltgen.random_access)    = Runtime;

    COM_GAMETYPE_GROUP  GameTypeGroup         = 1 [ (resdata.cname) = "游戏模式组", (bingogen.primary_key) = 1 ];
    uint32              DefaultChessBoard     = 2 [ (resdata.cname) = "默认棋盘" ];
    uint32              ActiveUseEmojiNum     = 3 [ (resdata.cname) = "手动使用表情个数" ];
    uint32              DefaultAttackEffectID = 4 [ (resdata.cname) = "默认攻击特效" ];
    uint32              DefaultLordID         = 6 [ (resdata.cname) = "默认棋手" ];
    string              DefaultTips           = 7 [ (resdata.cname) = "默认提示语" ];
    uint32              EftPlayInterval       = 8 [ (resdata.cname) = "特效播放时间间隔" ];
    float              MainUIEftPlayInterval  = 9 [ (resdata.cname) = "主页特效播放时间间隔" ];
    uint32              DefaultTransEftID     = 10 [ (resdata.cname) = "默认传送特效" ];
}

message ResChessboardPartDataBin {
    option (cltgen.pk)             = "ID";
    option (cltgen.system_databin) = true;
    option (cltgen.random_access)  = Runtime;

    uint32 ID         = 1 [ (resdata.cname) = "部件ID", (bingogen.primary_key) = 1 ];
    string Name       = 2 [ (resdata.cname) = "部件名称" ];
    string Desc       = 3 [ (resdata.cname) = "部件描述" ];
    uint32 Type       = 4 [ (resdata.cname) = "部件类型", (resdata.bind) = "EChessBoardPartType" ];
    string Icon       = 5 [ (resdata.cname) = "部件ICON" ];
    string Bg         = 6 [ (resdata.cname) = "部件大图" ];
    string UrlPath    = 7 [ (resdata.cname) = "部件模型资源路径" ];
    uint32 Quality    = 8 [ (resdata.cname) = "部件品质", (resdata.bind) = "RES_PROP_QUALITY_TYPE" ];
    uint32 DecompDrop = 9 [ (resdata.cname) = "重复获取掉落" ];
    string Jump       = 10 [ (resdata.cname) = "前往参数" ];
    string JumpDesc   = 11 [ (resdata.cname) = "前往描述" ];
    ResEnableInfo EnableInfo = 12 [ (resdata.cname) = "" ];
}

message ResChessboardPartSetDataBin {
    option (cltgen.index)          = "ID";
    option (cltgen.system_databin) = true;

    uint32 ID       = 1 [ (resdata.cname) = "棋盘ID" ];
    uint32 AreaType = 2 [ (resdata.cname) = "开放配置区域", (resdata.bind) = "EChessBoardAreaType" ];
    uint32 PartID   = 3 [ (resdata.cname) = "可放置部件ID" ];
}
message ResCommonIconCfg {
    option (cltgen.index)            = "ID";
    option (cltgen.system_databin)      = true;

    string ID       = 1 [ (resdata.cname) = "ID" ];
    string Icon = 2 [ (resdata.cname) = "图标"];
    string IconEx1   = 3 [ (resdata.cname) = "扩展图标1" ];
    string IconEx2   = 4 [ (resdata.cname) = "扩展图标2" ];
    string IconEx3   = 5 [ (resdata.cname) = "扩展图标3" ];
}
message ResPersonaliseEmojiDataBin {
    option (cltgen.pk)               = "ID";
    option (cltgen.index)            = "aiCommunicationType";
    option (cltgen.system_databin)   = true;
    option (cltgen.gamecore_databin) = true;
    option (cltgen.random_access)    = Runtime;

    uint32 ID                               = 1 [ (resdata.cname) = "表情ID", (bingogen.primary_key) = 1 ];
    string Name                             = 2 [ (resdata.cname) = "表情名称" ];
    string Desc                             = 3 [ (resdata.cname) = "表情描述" ];
    string Icon                             = 4 [ (resdata.cname) = "表情ICON" ];
    string Bg                               = 5 [ (resdata.cname) = "表情大图" ];
    string UrlPath                          = 6 [ (resdata.cname) = "表情资源路径" ];
    uint32 Quality                          = 7 [ (resdata.cname) = "表情品质", (resdata.bind) = "RES_PROP_QUALITY_TYPE" ];
    uint32 DecompDrop                       = 8 [ (resdata.cname) = "重复获取掉落" ];
    string Jump                             = 9 [ (resdata.cname) = "前往参数" ];
    string JumpDesc                         = 10 [ (resdata.cname) = "前往描述" ];
    string OutGameAssetPath                 = 11 [ (resdata.cname) = "局外资源" ];
    string OutGameAnimationName             = 12 [ (resdata.cname) = "局外资源动画" ];
    AICommunicationType aiCommunicationType = 13 [ (resdata.cname) = "AI交流类型" ];
    ResEnableInfo EnableInfo                = 14 [ (resdata.cname) = "" ];
}

message ResPersonaliseSpecialEftDataBin {
    option (cltgen.pk)               = "ID";
    option (cltgen.index)            = "Class";
    option (cltgen.index)            = "Class, Type";
    option (cltgen.system_databin)   = true;
    option (cltgen.gamecore_databin) = true;
    option (cltgen.random_access)    = Runtime;

    uint32 ID           = 1 [ (resdata.cname) = "特效ID", (bingogen.primary_key) = 1 ];
    string Name         = 2 [ (resdata.cname) = "特效名称" ];
    string Desc         = 3 [ (resdata.cname) = "特效描述" ];
    ESpecialEftClass Class  = 4 [ (resdata.cname) = "特效分类" ];
    ESpecialEftType Type    = 5 [ (resdata.cname) = "特效类型" ];
    uint32 TypeParam    = 6 [ (resdata.cname) = "特效类型参数" ];
    string Icon         = 7 [ (resdata.cname) = "特效ICON" ];
    string Bg           = 8 [ (resdata.cname) = "特效大图" ];
    string UrlPath      = 9 [ (resdata.cname) = "特效资源路径" ];
    uint32 Quality      = 10 [ (resdata.cname) = "特效品质", (resdata.bind) = "RES_PROP_QUALITY_TYPE" ];
    uint32 DecompDrop   = 11 [ (resdata.cname) = "重复获取掉落" ];
    string Jump         = 12 [ (resdata.cname) = "前往参数" ];
    string JumpDesc     = 13 [ (resdata.cname) = "前往描述" ];
    string bulletPath   = 14 [ (resdata.cname) = "子弹特效" ];
    string hitPath      = 15 [ (resdata.cname) = "受击特效" ];
    string winPath      = 16 [ (resdata.cname) = "胜利特效" ];
    string attackAge    = 17 [ (resdata.cname) = "攻击Age" ];
    string winAge       = 18 [ (resdata.cname) = "胜利Age" ];
    uint32 ScarceLevel  = 19 [ (resdata.cname) = "稀有度", (resdata.bind) = "RES_SCARCE_LEVEL_TYPE" ];
    string UseJumpParam = 20 [ (resdata.cname) = "使用跳转" ];
    ResEnableInfo EnableInfo = 21 [ (resdata.cname) = "" ];
    uint32 BornHaveLordID = 22 [ (resdata.cname) = "出生拥有棋手ID" ];
    string TeleportationAge          = 23 [ (resdata.cname) = "传送Age" ];
    string HostTeleportationAge      = 24 [ (resdata.cname) = "主场准备传送Age" ];
    string AwayTeleportationAge      = 25 [ (resdata.cname) = "客场准备传送Age" ];
    string TeleportBeforeResetAge    = 26 [ (resdata.cname) = "战斗结束离开战场Age" ];
    string TeleportAfterResetAge     = 27 [ (resdata.cname) = "战斗结束返回主场Age" ];
}

message ResPersonaliseTypeDatabin {
    option (cltgen.pk)               = "Type";
    option (cltgen.system_databin)   = true;

    enum PersonaliseType {
        PersonaliseType_NONE             = 0;
        PersonaliseType_Chessboard       = 1 [ (resdata.keyword_alias) = "棋盘" ];
        PersonaliseType_AttackEft        = 2 [ (resdata.keyword_alias) = "攻击特效" ];
        PersonaliseType_VictoryEft       = 3 [ (resdata.keyword_alias) = "胜利特效" ];
        PersonaliseType_TransformEft     = 4 [ (resdata.keyword_alias) = "传送特效" ];
        PersonaliseType_Emoji            = 5 [ (resdata.keyword_alias) = "表情" ];
    }

    PersonaliseType Type                 = 1 [ (resdata.cname) = "个性化展示类型", (bingogen.primary_key) = 1];
    string ShowText                        = 2 [ (resdata.cname) = "文本显示", (resdata.translate) = true ];
    string IconPath                        = 3 [ (resdata.cname) = "图标路径"];
}

message PersonaliseConf {
    ResPersonaliseChessboardDataBin ChessBoardCfg        = 1 [ (bingogen.databin_path) = "" ];
    ResPersonaliseConstDatabin PersonaliseConstCfg       = 2 [ (bingogen.databin_path) = "" ];
    ResChessboardPartDataBin ChessBoardPartDataBin       = 3 [ (bingogen.databin_path) = "" ];
    ResChessboardPartSetDataBin ChessBoardPartSetDataBin = 4 [ (bingogen.databin_path) = "" ];
    ResPersonaliseEmojiDataBin EmojiDataBin              = 5 [ (bingogen.databin_path) = "" ];
    ResPersonaliseSpecialEftDataBin SpecialEftDataBin    = 6 [ (bingogen.databin_path) = "" ];
}

// --------------------------------- 个性化 --------------------------------

// message ResChessTaskStage { uint32 TaskID = 1 [ (resdata.cname) = "任务ID" ]; } 

message ResChessDataBin {
    option (cltgen.pk)             = "ChessID";
    option (cltgen.index)          = "SeasonID";
    option (cltgen.index)          = "SeasonID,HeroID";
    option (cltgen.system_databin) = true;

    uint32 ChessID               = 1 [ (resdata.cname) = "棋子ID", (bingogen.primary_key) = 1 ];
    uint32 HeroID                = 5 [ (resdata.cname) = "对应英雄ID" ];
    uint32 SeasonID              = 11 [ (resdata.cname) = "赛季ID" ];
    uint32 PlayModUniqID         = 12 [ (resdata.cname) = "局内玩法唯一ID", (resdata.bind) = "PLAYMOD_TYPE" ];
    uint32 SkinID                = 13 [ (resdata.cname) = "皮肤ID" ];
    string ChessName             = 14 [ (resdata.cname) = "棋子名字",(resdata.translate) = true ];
    string BroadcastOffset       = 15 [ (resdata.cname)= "局外播报位置偏移" ];
}

// message ResBadgeLevelUpInfo {
//     option (cltgen.pk)             = "ChessID, BadgeLevel";
//     option (cltgen.index)          = "ChessID";
//     option (cltgen.system_databin) = true;
//     uint32 ChessID                 = 1 [ (resdata.cname) = "棋子ID", (bingogen.primary_key) = 1 ];
//     uint32 BadgeLevel              = 2 [ (resdata.cname) = "徽章等级", (bingogen.primary_key) = 2 ];
//     uint32 LevelUpCost             = 3 [ (resdata.cname) = "消耗棋子数" ];
//     uint32 AwardID                 = 4 [ (resdata.cname) = "奖励掉落ID" ];
// }

enum EChessSeasonRefreshType {
    CHESS_REFRESH_SEASON  = 0 [ (resdata.keyword_alias) = "赛季刷新" ];   // 随赛季刷新
    CHESS_REFRESH_FOREVER = 1 [ (resdata.keyword_alias) = "永久不刷新" ]; // 永久不刷新
}

message ResChessSeasonInfo {
    option (cltgen.pk)                       = "SeasonID";
    option (cltgen.random_access)            = Runtime;
    option (cltgen.system_databin)           = true;
    uint32 SeasonID                          = 1 [ (bingogen.primary_key) = 1, (resdata.cname) = "赛季ID" ];
    string CustomScenePath                   = 3 [ (resdata.cname) = "赛季自定义场景模型" ];
    string CustomBadgePath                   = 4 [ (resdata.cname) = "赛季自定义徽章模型" ];
    string SeasonImage                       = 5 [(resdata.cname) = "赛季图标" ];
    uint32 RefreshType                       = 6 [(resdata.cname) = "刷新类型", (resdata.bind) = "EChessSeasonRefreshType"];
    string SpecialName                       = 8 [(resdata.cname) = "特殊赛季名字" ];
    uint32 CompShowNum                       = 9 [(resdata.cname) = "批量合成显示数量" ];
    uint32 JumpAchieveType                   = 10 [(resdata.cname) = "跳转成就类型" ];
}

// message ResChessTaskInfo {
//     option (cltgen.pk)             = "TaskID";
//     option (cltgen.system_databin) = true;
//     uint32 TaskID                  = 1 [ (resdata.cname) = "任务ID", (bingogen.primary_key) = 1 ];
//     uint32 BelongChessID           = 2 [ (resdata.cname) = "所属棋子ID" ];
//     uint32 NxtTaskID               = 3 [ (resdata.cname) = "后续任务ID" ];
//     string Icon                    = 4 [ (resdata.cname) = "任务图标" ];
//     string Title                   = 5 [ (resdata.cname) = "任务标题" ];
//     string Desc                    = 6 [ (resdata.cname) = "任务描述" ];
//     ResCondInfo FinishCond         = 7 [ (resdata.cname) = "完成条件" ];
//     uint32 AwardID                 = 8 [ (resdata.cname) = "完成奖励ID" ];
//     uint32 AutoAward               = 9 [ (resdata.cname) = "是否自动领取奖励" ];
// }

// message ResBadgeCollectTaskInfo {
//     option (cltgen.pk)             = "TaskID";
//     option (cltgen.index)          = "SeasonID";
//     option (cltgen.system_databin) = true;
//     uint32 TaskID                  = 1 [ (resdata.cname) = "任务ID", (bingogen.primary_key) = 1 ];
//     uint32 SeasonID                = 2 [ (resdata.cname) = "赛季ID" ];
//     uint32 NxtTaskID               = 3 [ (resdata.cname) = "后续任务ID" ];
//     string Icon                    = 4 [ (resdata.cname) = "任务图标" ];
//     string Title                   = 5 [ (resdata.cname) = "任务标题" ];
//     string Desc                    = 6 [ (resdata.cname) = "任务描述" ];
//     ResCondInfo FinishCond         = 7 [ (resdata.cname) = "完成条件" ];
//     uint32 AwardID                 = 8 [ (resdata.cname) = "完成奖励ID" ];
//     uint32 AutoAward               = 9 [ (resdata.cname) = "是否自动领取奖励" ];
// }

message ResChessStatisticInfo {
    option (cltgen.pk)              = "ID";
    option (cltgen.index)           = "IsShow";
    option (cltgen.system_databin)  = true;
    option (cltgen.random_access)   = Runtime;
    uint32 ID                       = 1 [ (resdata.cname) = "ID", (bingogen.primary_key) = 1 ];
    string STAcntChessStatisticName = 2 [ (resdata.cname) = "STAcntChessStatistic名" ];
    string Desc                     = 3 [ (resdata.cname) = "显示名",(resdata.translate) = true];
    bool IsShow                     = 4 [ (resdata.cname) = "是否显示" ];
}

// 棋子组合表
message ResChessCombInfo {
    uint32 ID                = 1 [ (resdata.cname) = "ID", (bingogen.primary_key) = 1 ];
    repeated uint32 ChessIDs = 2 [ (resdata.cname) = "棋子", (resdata.count) = "12" ];
}

// message ResChessCombineResolveInfo {
//     option (cltgen.pk)             = "Quality";
//     option (cltgen.system_databin) = true;
//     uint32 Quality                = 1 [ (resdata.cname) = "品质", (bingogen.primary_key) = 1 ];
//     uint32 ResolveGainFrag       = 2 [ (resdata.cname) = "分解获得碎片数" ];
//     uint32 CombineNeedFrag       = 3 [ (resdata.cname) = "合成需要碎片数" ];
// }

message ResChessDecorateDataBin {
    option (cltgen.pk)              = "DecorateID";
    option (cltgen.index)           = "SeasonID,ChessID";
    option (cltgen.index)           = "SeasonID";
    option (cltgen.index)           = "DecorateType";
    option (cltgen.system_databin)  = true;
    option (cltgen.random_access)  = Runtime;

    uint32 DecorateID               = 1 [ (resdata.cname) = "配饰ID", (bingogen.primary_key) = 1 ];
    uint32 SeasonID                 = 2 [ (resdata.cname) = "赛季ID" ];
    uint32 ChessID                  = 3 [ (resdata.cname) = "局外英雄ID"];
    COM_CHESSDECORATE_SUBTYPE DecorateType = 4 [ (resdata.cname) = "配饰类型" ];
    bool CanCombine                 = 5 [ (resdata.cname) = "能否合成" ];
    RES_PROP_QUALITY_TYPE Quality   = 6 [ (resdata.cname) = "品质", (resdata.bind) = "RES_PROP_QUALITY_TYPE" ];
    string DecorateIcon             = 7 [ (resdata.cname) = "配饰图标路径" ];
    string DecorateName             = 8 [ (resdata.cname) = "配饰名称",(resdata.translate) = true ];
    string GetWayInfo               = 9 [ (resdata.cname) = "获取渠道描述",(resdata.translate) = true];
    string SimpleName               = 10 [ (resdata.cname)= "简短名称",(resdata.translate) = true ];
    string DecorateBigIcon          = 11 [ (resdata.cname)= "配饰道具图标路径" ];
    string TipsContent              = 12 [ (resdata.cname)= "Tips提示内容",(resdata.translate) = true ];
    string AudioInfoName            = 13 [ (resdata.cname)= "语音名称" ];
    string AudioInfoContent         = 14 [ (resdata.cname)= "语音内容",(resdata.translate) = true ];
    string BattleBroadcastAsset     = 15 [ (resdata.cname)= "超神播报资源" ];
    string KillBroadcastAsset       = 16 [ (resdata.cname)= "击杀播报资源" ];
    string JumpParam                = 17 [ (resdata.cname)= "跳转参数" ];

}


message ResDecorateCombineResolveData {
    option (cltgen.index)             = "HeroQuality,DecorateType";
    option (cltgen.system_databin) = true;
    uint32 HeroQuality                = 1 [ (resdata.cname) = "英雄品质" ,(bingogen.primary_key) = 1];
    COM_CHESSDECORATE_SUBTYPE DecorateType = 2 [ (resdata.cname) = "配饰类型",(bingogen.primary_key) = 2];
    uint32 ResolveGainFrag       = 3 [ (resdata.cname) = "分解获得碎片数" ];
    uint32 CombineNeedFrag       = 4 [ (resdata.cname) = "合成需要碎片数" ];
}

message ResCollectionTaskDataBin{
    option (cltgen.index)        = "SeasonID";
    option (cltgen.index)        = "SeasonID,HeroQuality";
    option (cltgen.system_databin)  = true;
    uint32 SeasonID              = 1 [ (resdata.cname) = "赛季ID" ];
    uint32 AchieveTaskID         = 2 [ (resdata.cname) = "成就ID" ];
    uint32 HeroQuality           = 3 [ (resdata.cname) = "英雄品质" ];
    string JumpParam             = 4 [ (resdata.cname) = "跳转参数" ];
}
message ChessConf {
    ResChessDataBin ChessData                    = 1 [ (bingogen.databin_path) = "" ];
    ResChessHeroConfDataBin PlayModChessHeroConf = 4 [ (bingogen.databin_path) = "" ];
    ResChessSeasonInfo ChessSeasonInfo           = 6 [ (bingogen.databin_path) = "" ];
    ResChessStatisticInfo ChessStatisticInfo     = 7 [ (bingogen.databin_path) = "" ];
    ResChessCombInfo ChessCombInfo               = 8 [ (bingogen.databin_path) = "" ];
    ResChessDecorateDataBin ChessDecorateData    = 10 [ (bingogen.databin_path) = "" ];
    ResDecorateCombineResolveData DecorateCombineResolve = 11 [ (bingogen.databin_path) = "" ];
}

//--------------------------装备----------------------------

message EquipConf { ResEquipDataBin EquipData = 1 [ (bingogen.databin_path) = "" ]; }

// -------------------------活动----------------------------

enum EWealCycleType {
    CYCLE_NONE = 0;
    CYCLE_DAY  = 1 [ (resdata.keyword_alias) = "日循环" ];
    CYCLE_WEEK = 2 [ (resdata.keyword_alias) = "周循环" ];
}

// 通用活动表
message ResCommonWealDataBin {
    option (cltgen.pk)             = "WealID";
    option (cltgen.system_databin) = true;
    
    uint32 WealID            = 1 [ (resdata.cname) = "活动ID", (bingogen.primary_key) = 1 ];
    uint32 WealType          = 2 [ (resdata.cname) = "活动类型", (resdata.bind) = "EWealType" ];
    string WealSecondaryName = 3 [ (resdata.cname) = "活动描述副标题",(resdata.translate) = true  ];
    string WealName          = 4 [ (resdata.cname) = "活动标题" ,(resdata.translate) = true ];
    string WealDesc          = 5 [ (resdata.cname) = "活动描述" ,(resdata.translate) = true ];
    string WealTabDesc       = 6 [ (resdata.cname) = "活动所属页签描述",(resdata.translate) = true ];
    uint32 WealTabType       = 7 [ (resdata.cname) = "活动所属页签类型" ];
    uint32 IsShow            = 8 [ (resdata.cname) = "是否显示" ];
    uint32 SortID            = 9 [ (resdata.cname) = "显示排序" ];
    uint32 IsCommend         = 10 [ (resdata.cname) = "是否推荐" ];
    string TimeDes           = 11 [ (resdata.cname) = "时间描述", (resdata.translate) = true];
    string StartTime         = 12 [ (resdata.cname) = "活动开始时间" ];
    string EndTime           = 13 [ (resdata.cname) = "活动结束时间" ];
    uint32 StartTimeGen      = 14;
    uint32 EndTimeGen        = 15;
    string ShowTime          = 16 [ (resdata.cname) = "活动刷出时间" ];
    string Entrance          = 17 [ (resdata.cname) = "活动入口" ];
    uint32 CycleType         = 19 [ (resdata.cname) = "循环周期类型", (resdata.bind) = "EWealCycleType" ];
    uint32 CycleParam        = 20 [ (resdata.cname) = "循环周期参数" ];
    uint32 LevelLimit        = 21 [ (resdata.cname) = "加载等级限制" ];
    uint32 WealChildType     = 22 [ (resdata.cname) = "活动所属子类型" ];
}

// 活动任务表
message ResWealTaskDataBin {
    option (cltgen.pk)             = "TaskID";
    option (cltgen.system_databin) = true;

    uint32 TaskID          = 1 [ (resdata.cname) = "任务ID", (bingogen.primary_key) = 1 ];
    uint32 BelongWealID    = 2 [ (resdata.cname) = "所属活动ID" ];
    string StartTime       = 3 [ (resdata.cname) = "任务开始时间" ];
    string EndTime         = 4 [ (resdata.cname) = "任务结束时间" ];
    uint32 StartTimeGen    = 5;
    uint32 EndTimeGen      = 6;
    string ShowTime        = 7 [ (resdata.cname) = "任务刷出时间" ];
    ResCondInfo FinishCond = 8 [ (resdata.cname) = "完成条件" ];
    uint32 AwardDropID     = 9 [ (resdata.cname) = "完成奖励ID" ];
    ResCondInfo UnlockCond = 10 [ (resdata.cname) = "解锁条件" ];
    string FinishCondDes   = 11 [ (resdata.cname) = "完成条件描述", (resdata.translate) = true ];
    uint32 BelongTypeID    = 12 [ (resdata.cname) = "所属任务类别ID" ];
}

message ResWealExchangeDataBin {
    option (cltgen.pk)             = "ExchangeID";
    option (cltgen.system_databin) = true;

    uint32 ExchangeID        = 1 [ (resdata.cname) = "兑换ID", (bingogen.primary_key) = 1 ];
    uint32 BelongWealID      = 2 [ (resdata.cname) = "所属活动ID" ];
    uint32 BindShowWealID    = 3 [ (resdata.cname) = "绑定显示活动ID" ];
    string StartTime         = 4 [ (resdata.cname) = "兑换开始时间" ];
    string EndTime           = 5 [ (resdata.cname) = "兑换结束时间" ];
    uint32 StartTimeGen      = 6;
    uint32 EndTimeGen        = 7;
    string ShowTime          = 8 [ (resdata.cname) = "兑换刷出时间" ];
    ResGameItem ExchangeItem = 9 [ (resdata.cname) = "单次兑换物品" ];
    ResGameItem CostItem     = 10 [ (resdata.cname) = "单次消耗物品" ];
    uint32 LimitCnt          = 11 [ (resdata.cname) = "兑换次数上限" ];
}

message WealConf {
    ResCommonWealDataBin CommonWealData     = 1 [ (bingogen.databin_path) = "" ];
    ResWealTaskDataBin WealTaskData         = 2 [ (bingogen.databin_path) = "" ];
    ResWealExchangeDataBin WealExchangeData = 3 [ (bingogen.databin_path) = "" ];
}

// -------------------------活动----------------------------

// -------------------------成就----------------------------
enum EAchieveLevel {
    Ordinary = 0 [ (resdata.keyword_alias) = "一般" ];
    Rare     = 1 [ (resdata.keyword_alias) = "稀有" ];
}
message ResAchieveTaskCfgDataBin {
    option (cltgen.pk) = "TaskID";

    option (cltgen.index)          = "TypeID";
    option (cltgen.index)          = "AchieveLevel";
    option (cltgen.system_databin) = true;
    option (cltgen.random_access)  = Runtime;

    uint32 TaskID          = 1 [ (resdata.cname) = "成就ID", (bingogen.primary_key) = 1 ];
    uint32 NxtTaskID       = 2 [ (resdata.cname) = "后续成就ID" ];
    string AchieveTaskDes  = 7 [ (resdata.cname) = "任务内容描述", (resdata.translate) = true ];
    string Title           = 9 [ (resdata.cname) = "成就名", (resdata.translate) = true ];
    ResCondInfo FinishCond = 11 [ (resdata.cname) = "完成条件" ];
    uint32 AwardDropID     = 12 [ (resdata.cname) = "奖励掉落" ];
    uint32 SeasonID        = 14 [ (resdata.cname) = "所属赛季" ];
    uint32 AchievePoint    = 15 [ (resdata.cname) = "奖励点数" ];
    uint32 TypeID          = 16 [ (resdata.cname) = "类型ID" ];
    uint32 AchieveLevel    = 17 [ (resdata.cname) = "成就等级", (resdata.bind) = "EAchieveLevel" ];
    bool IsHideAchieve     = 18 [ (resdata.cname) = "是否隐藏成就" ];
    bool IsEndVersion      = 19 [ (resdata.cname) = "是否绝版成就" ];
}
message ResAchieveTypeCfg {
    option (cltgen.pk)             = "TypeID";
    option (cltgen.system_databin) = true;
    option (cltgen.random_access)  = Runtime;

    uint32 TypeID        = 1 [ (resdata.cname) = "类型ID" ];
    string TypeIcon      = 2 [ (resdata.cname) = "类型图标" ];
    string SubTypeName   = 3 [ (resdata.cname) = "子分类名称", (resdata.translate) = true ];
    string TypeGroupName = 4 [ (resdata.cname) = "所属分类名称", (resdata.translate) = true ];
    string TypeSmallIcon = 5 [ (resdata.cname) = "类型小图标" ];
}

message ResAchieveLevelDataBin {
    option (cltgen.pk)             = "Level";
    option (cltgen.system_databin) = true;
    uint32 Level                   = 1 [ (resdata.cname) = "等级", (bingogen.primary_key) = 1 ];
    uint32 NeedExp                 = 3 [ (resdata.cname) = "升级需要的经验" ];
}

message AchieveConf {
    ResAchieveTaskCfgDataBin AchieveTaskCfg = 1 [ (bingogen.databin_path) = "" ];
    ResAchieveLevelDataBin AchieveLevelCfg  = 2 [ (bingogen.databin_path) = "" ];
}
// -------------------------成就----------------------------

// -------------------------场景----------------------------

message ResDT_BattleStatePhaseAudio {
    string Normal       = 1 [ (resdata.cname) = "常规" ];
    string ContinueWin  = 2 [ (resdata.cname) = "连胜" ];
    string ContinueLose = 3 [ (resdata.cname) = "连败" ];
    string WhiteHot     = 4 [ (resdata.cname) = "白热化" ];
    string Duel         = 5 [ (resdata.cname) = "决斗" ];
}

message ResDT_BattleStateAudioInfo {
    ResDT_BattleStatePhaseAudio Prepare   = 1 [ (resdata.cname) = "准备阶段_" ];
    ResDT_BattleStatePhaseAudio Teleport  = 2 [ (resdata.cname) = "传送阶段_" ];
    ResDT_BattleStatePhaseAudio Race      = 3 [ (resdata.cname) = "战斗阶段_" ];
    ResDT_BattleStatePhaseAudio RoundWin  = 4 [ (resdata.cname) = "回合胜利_" ];
    ResDT_BattleStatePhaseAudio RoundLose = 5 [ (resdata.cname) = "回合失败_" ];
}

message ResDT_BossStateAudioInfo {
    string Prepare   = 1 [ (resdata.cname) = "准备" ];
    string Teleport  = 2 [ (resdata.cname) = "传送" ];
    string Race      = 3 [ (resdata.cname) = "战斗" ];
    string RoundWin  = 4 [ (resdata.cname) = "回合胜利" ];
    string RoundLose = 5 [ (resdata.cname) = "回合失败" ];
    string BossAward = 6 [ (resdata.cname) = "选奖励" ];
}

message ResSceneAudioCfg {
    option (cltgen.system_databin) = true;
    option (cltgen.pk)             = "ID";

    uint32 ID                           = 7 [ (resdata.cname) = "ID", (bingogen.primary_key) = 1 ];
    string Bank                         = 1 [ (resdata.cname) = "Bank资源" ];
    string ExCard                       = 2 [ (resdata.cname) = "三次换牌" ];
    string Auction                      = 5 [ (resdata.cname) = "拍卖" ];
    string LordGift                     = 6 [ (resdata.cname) = "领奖" ];
    ResDT_BattleStateAudioInfo Battle   = 3 [ (resdata.cname) = "战斗_" ];
    ResDT_BossStateAudioInfo BossBattle = 4 [ (resdata.cname) = "打野_" ];
    string IngameEnvAudioPlay           = 10 [ (resdata.cname) = "[无交互,默认]棋盘环境音" ];
    string InteractionEnvAudioPlay      = 11 [ (resdata.cname) = "[有交互]棋盘环境音" ];
    string IngameEnvAudioStop           = 12 [ (resdata.cname) = "棋盘环境音停止" ];
    string HostEnvAudioPlay             = 13 [ (resdata.cname) = "[主场]棋盘环境音" ];
    string HostEnvAudioStop             = 14 [ (resdata.cname) = "[主场]棋盘环境音停止" ];
    string GuestEnvAudioPlay            = 15 [ (resdata.cname) = "[客场]棋盘环境音" ];
    string GuestEnvAudioStop            = 16 [ (resdata.cname) = "[客场]棋盘环境音停止" ];
    string AuctionEnvAudioPlay          = 17 [ (resdata.cname) = "[打野&拍卖]环境音" ];
    string AuctionEnvAudioStop          = 18 [ (resdata.cname) = "[打野&拍卖]环境音停止" ];
    string Theme                        = 19 [ (resdata.cname) = "主题音乐" ];
}

message ResSceneCfg {
    option (cltgen.pk)               = "SceneID";
    option (cltgen.gamecore_databin) = true;
    option (cltgen.system_databin)   = true;
    option (cltgen.random_access)    = Editor;

    uint32 SceneID           = 1 [ (resdata.cname) = "场景ID", (bingogen.primary_key) = 1 ];
    string Name              = 2 [ (resdata.cname) = "名字" ];
    string ScenePath         = 3 [ (resdata.cname) = "场景资源路径" ];
    uint32 SceneType         = 4 [ (resdata.cname) = "类型" ];
    uint32 AudioID           = 5 [ (resdata.cname) = "音效配置ID" ];
    string IngamePreBeginAGE = 6 [ (resdata.cname) = "战前表演AGE" ];
    string IngameWinAGE      = 7 [ (resdata.cname) = "胜利表演AGE" ];
    string IngameWinAniamtionAGE = 8 [ (resdata.cname) = "胜利表演动画AGE" ];
    string IngameFailAniamtionAGE = 9 [ (resdata.cname) = "失败表演动画AGE" ];
}

message ResDefaultQualityBasedOnDevice {
    option (cltgen.pk)             = "DeviceName";
    option (cltgen.system_databin) = true;

    uint32 ID         = 1 [ (resdata.cname) = "ID", (bingogen.primary_key) = 1 ];
    string DeviceName = 2 [ (resdata.cname) = "机型名称" ];
    uint32 Quality    = 3 [ (resdata.cname) = "默认档位" ];
}

message ResSOCScoreCfg {
    option (cltgen.pk)             = "SOCName";
    option (cltgen.system_databin) = true;

   
    string SOCName = 1 [ (resdata.cname) = "SOC名", (bingogen.primary_key) = 1 ];
	uint32 Score      = 2 [ (resdata.cname) = "分数" ];
    uint32 Quality    = 3 [ (resdata.cname) = "等级" ];
}

// -------------------------场景----------------------------

// -------------------------排行榜----------------------------
enum EChartsFunction {
    FUNC_INVALID    = 0 [ (resdata.keyword_alias) = "无效值" ];
    FUNC_ADD_FRIEND = 1 [ (resdata.keyword_alias) = "加好友" ];
    FUNC_CHAT       = 2 [ (resdata.keyword_alias) = "聊天" ];
    FUNC_LIKE       = 3 [ (resdata.keyword_alias) = "点赞" ];
}

message ResChartsDatabin {
    option (cltgen.pk)             = "ID";
    option (cltgen.index) = "RankType";

    option (cltgen.system_databin) = true;
    option (cltgen.random_access)  = Runtime;

    uint32 ID                      = 1 [ (resdata.cname) = "ID", (bingogen.primary_key) = 1 ];
    uint32 RankType                = 2 [ (resdata.cname) = "类型", (bingogen.primary_key) = 2, (resdata.bind) = "ERankListSubTypeSeason" ];
    uint32 GameplayType            = 3 [ (resdata.cname) = "玩法类型", (bingogen.primary_key) = 3 ];
    string Name                    = 4 [ (resdata.cname) = "排行榜名", (resdata.translate) = true ];
    uint32 ShowNum                 = 5 [ (resdata.cname) = "显示数量" ];
    repeated uint32 Function       = 6 [ (resdata.cname) = "功能", (resdata.count) = "Legacy.RES_MAX_CHARTS_FUNC", (resdata.bind) = "EChartsFunction" ];
    uint32 IsShowFriend            = 7 [ (resdata.cname) = "是否显示好友" ];
    uint32 FriendShowNum           = 8 [ (resdata.cname) = "好友显示数量" ];
    repeated uint32 FriendFunction = 9 [ (resdata.cname) = "好友功能", (resdata.count) = "Legacy.RES_MAX_CHARTS_FUNC", (resdata.bind) = "EChartsFunction" ];
    uint32 IsOpen                  = 10 [ (resdata.cname) = "是否开启" ];
    uint32 IsAbsorbOther           = 11 [ (resdata.cname) = "是否纳入其他榜单" ];
}
message ResHundredRankIdxDatabin {
    option (cltgen.index)          = "XDRankIdx";
    option (cltgen.system_databin) = true;
    option (cltgen.random_access)  = Runtime;

    uint32 XDRankIdx  = 1 [ (resdata.cname) = "XD排名", (bingogen.primary_key) = 1 ];
    uint32 NewRankIdx = 2 [ (resdata.cname) = "显示排名" ];
}
// 排行榜结算类型
enum ERanklistSettleType {
    RANKLISTSETTLETYPE_NO    = 0 [ (resdata.keyword_alias) = "不结算" ];
    RANKLISTSETTLETYPE_DAY   = 1 [ (resdata.keyword_alias) = "跨天" ];
    RANKLISTSETTLETYPE_WEEK  = 2 [ (resdata.keyword_alias) = "跨周" ];
    RANKLISTSETTLETYPE_MONTH = 3 [ (resdata.keyword_alias) = "跨月" ];
    RANKLISTSETTLETYPE_MAX   = 4;
}

// 排行榜类型
enum ERanklistType {
    RANKLISTTYPE_INVALID   = 0;
    RANKLISTTYPE_LORDPOWER = 1 [ (resdata.keyword_alias) = "棋手战力榜" ];
    RANKLISTTYPE_SEASON    = 2 [ (resdata.keyword_alias) = "赛季排行榜" ];
    RANKLISTTYPE_MAX       = 3;
}

// 排行榜子类型
enum ERanklistSubTypeLordPower {
    LORDPOWER_INVALID  = 0;
    LORDPOWER_LOW      = 1 [ (resdata.keyword_alias) = "棋手初级排行榜" ]; // 区
    LORDPOWER_MID      = 2 [ (resdata.keyword_alias) = "棋手中级排行榜" ]; // 市
    LORDPOWER_HIGH     = 3 [ (resdata.keyword_alias) = "棋手高级排行榜" ]; // 省
    LORDPOWER_NATIONAL = 4 [ (resdata.keyword_alias) = "棋手国服排行榜" ]; // 国
    LORDPOWER_MAX      = 5;
}

// 排行榜类型
enum ERankListSubTypeSeason {
    SEASON_NULL       = 0;
    SEASON_RANK       = 1 [ (resdata.keyword_alias) = "段位榜" ];
    SEASON_WEEKLY     = 2 [ (resdata.keyword_alias) = "进步榜" ];
    SEASON_TOP        = 3 [ (resdata.keyword_alias) = "登顶榜" ];
    SEASON_TOP_WEEKLY = 4 [ (resdata.keyword_alias) = "周登顶榜" ];
    SEASON_LORD       = 5 [ (resdata.keyword_alias) = "棋手榜" ];
    SEASON_MAX        = 6;
}
// 排行榜配置
message ResRanklistDatabin {
    uint32 RankType    = 1 [ (resdata.cname) = "榜单类型", (bingogen.primary_key) = 1, (resdata.bind) = "ERanklistType" ];
    uint32 RankSubType = 2 [ (resdata.cname) = "榜单子类型", (bingogen.primary_key) = 2, (resdata.bind) = "ERanklistSubTypeLordPower" ];
    string Name        = 3 [ (resdata.cname) = "榜单名称" ];
    uint32 SettleType  = 4 [ (resdata.cname) = "结算类型", (resdata.bind) = "ERanklistSettleType" ];
    uint32 SettleNum   = 5 [ (resdata.cname) = "结算数量" ];
}

// 排行榜结算奖励配置
message ResRanklistSettleDatabin {
    uint32 RankType    = 1 [ (resdata.cname) = "榜单类型", (bingogen.primary_key) = 1, (resdata.bind) = "ERanklistType" ];
    uint32 RankSubType = 2 [ (resdata.cname) = "榜单子类型", (bingogen.primary_key) = 2, (resdata.bind) = "ERanklistSubTypeLordPower" ];
    uint32 MinPlace    = 3 [ (resdata.cname) = "最小排名", (bingogen.primary_key) = 3 ];
    uint32 MaxPlace    = 4 [ (resdata.cname) = "最大排名", (bingogen.primary_key) = 4 ];
    uint32 TitleID     = 5 [ (resdata.cname) = "排行榜称号" ]; // 暂时是棋手榜单使用
    ResGameItem Award  = 6 [ (resdata.cname) = "排行榜奖励" ];
}

// 排行榜配置
message RanklistConf {
    ResRanklistDatabin RanklistCfg             = 1 [ (bingogen.databin_path) = "" ];
    ResRanklistSettleDatabin RanklistSettleCfg = 2 [ (bingogen.databin_path) = "" ];
}

// -------------------------排行榜----------------------------

// -------------------------充值----------------------------
message ResChargeDatabin {
    option (cltgen.pk)             = "Num";
    option (cltgen.index)          = "IsOpen";
    option (cltgen.system_databin) = true;

    uint32 Num       = 1 [ (resdata.cname) = "数量", (bingogen.primary_key) = 1 ];
    uint32 Price     = 2 [ (resdata.cname) = "价格" ];
    string Icon      = 3 [ (resdata.cname) = "图标" ];
    bool IsOpen      = 4 [ (resdata.cname) = "是否开启" ];
    string ProductID = 5 [ (resdata.cname) = "IAP物品ID" ];
}
// -------------------------充值----------------------------

enum COM_CLT_LOG_LEVEL {
    COM_CLT_LOG_LEVEL_NONE    = 0 [ (resdata.keyword_alias) = "不改变" ];
    COM_CLT_LOG_LEVEL_DEBUG   = 1 [ (resdata.keyword_alias) = "调试日志" ];
    COM_CLT_LOG_LEVEL_INFO    = 2 [ (resdata.keyword_alias) = "信息日志" ];
    COM_CLT_LOG_LEVEL_WARNING = 3 [ (resdata.keyword_alias) = "警告" ];
    COM_CLT_LOG_LEVEL_ERROR   = 4 [ (resdata.keyword_alias) = "错误信息" ];
    COM_CLT_LOG_LEVEL_FATAL   = 5 [ (resdata.keyword_alias) = "严重错误" ];
}

message ResCltUploadLogListCfg {
    option (resdata.output) = Server;

    string GOpenID  = 1 [ (resdata.cname) = "GOpenID", (bingogen.primary_key) = 1 ];
    uint32 LogLevel = 2 [ (resdata.cname) = "LogLevel", (resdata.bind) = "COM_CLT_LOG_LEVEL" ];
}

message CltLogConf { ResCltUploadLogListCfg CltUploadLogCfg = 1 [ (bingogen.databin_path) = "" ]; }

message ResHeroPropertyIconCfgDataBin {
    option (cltgen.pk)             = "ID";
    option (cltgen.system_databin) = true;
    option (cltgen.random_access)  = Runtime;

    uint32 ID        = 1 [ (resdata.cname) = "ID", (bingogen.primary_key) = 1 ];
    string IconName  = 2 [ (resdata.cname) = "IconName" ];
    string IconColor = 3 [ (resdata.cname) = "IconColor" ];
}

message ResChessHeroUpgradeAwardDatabin {
    option (cltgen.pk)               = "ChessQuality, StarLevel";
    option (cltgen.gamecore_databin) = true;

    uint32 ChessQuality = 1 [ (resdata.cname) = "品质", (bingogen.primary_key) = 1 ];
    uint32 StarLevel    = 2 [ (resdata.cname) = "星级", (bingogen.primary_key) = 2 ];
    uint32 AwardChessID = 3 [ (resdata.cname) = "奖励棋子ID" ];
}

// -------------------------新手关卡----------------------------

message ResDT_NBAIInfo {
    uint32 ID   = 1 [ (resdata.cname) = "ID" ];
    string Name = 2 [ (resdata.cname) = "名字" ];
}

message ResDT_NBPlayerInfo {
    uint32 LordID   = 1 [ (resdata.cname) = "棋手ID" ];
    uint32 InitCoin = 2 [ (resdata.cname) = "初始金币" ];
}

message ResNBCfg {
    option (cltgen.pk)               = "LevelID";
    option (cltgen.system_databin)   = true;
    option (cltgen.gamecore_databin) = true;
    option (cltgen.random_access)    = Runtime;

    uint32 LevelID                     = 1 [ (resdata.cname) = "关卡ID", (bingogen.primary_key) = 1 ];
    uint32 StartRoundNum               = 2 [ (resdata.cname) = "起始回合数" ];
    ResDT_NBAIInfo AI                  = 3 [ (resdata.cname) = "AI" ];
    repeated ResDT_NBPlayerInfo Player = 4 [ (resdata.cname) = "玩家", (resdata.count) = "2" ];
    int32 TotalRoundNum                = 5 [ (resdata.cname) = "总回合数" ];
    int32 AuctionDropBeginRound        = 6 [ (resdata.cname) = "拍卖掉落开始轮次" ];
}

message ResNBLevelCfg {
    option (cltgen.pk)             = "RoundNum";
    option (cltgen.index)          = "LevelID";
    option (cltgen.system_databin) = true;

    uint32 RoundNum            = 1 [ (resdata.cname) = "回合数", (bingogen.primary_key) = 1 ];
    uint32 LevelID             = 2 [ (resdata.cname) = "关卡ID", (bingogen.primary_key) = 2 ];
    string StageIconName       = 3 [ (resdata.cname) = "阶段图标名" ];
    string StageIconEffectName = 4 [ (resdata.cname) = "阶段图标特效名" ];
    int32 StageMerge           = 5 [ (resdata.cname) = "回合进度合并" ];
}

message ResNBShopCfg {
    option (cltgen.pk)               = "ID, RefreshCount";
    option (cltgen.gamecore_databin) = true;

    uint32 ID               = 1 [ (resdata.cname) = "ID", (bingogen.primary_key) = 1 ];
    uint32 RefreshCount     = 2 [ (resdata.cname) = "刷新次数", (bingogen.primary_key) = 2 ];
    repeated uint32 ChessID = 3 [ (resdata.cname) = "棋子ID", (resdata.count) = "6" ];
}

message ResDT_NBChessBattlePos {
    uint32 ID    = 1 [ (resdata.cname) = "ID" ];
    int32 CoordX = 2 [ (resdata.cname) = "X坐标" ];
    int32 CoordZ = 3 [ (resdata.cname) = "Z坐标" ];
}

message ResNBChessBattlePosCfg {
    option (cltgen.pk)               = "PresetID";
    option (cltgen.gamecore_databin) = true;

    uint32 PresetID                           = 1 [ (resdata.cname) = "摆放ID", (bingogen.primary_key) = 1 ];
    repeated ResDT_NBChessBattlePos BattlePos = 2 [ (resdata.cname) = "棋子", (resdata.count) = "10" ];
}

message ResNBRoundPlayerCfg {
    option (cltgen.pk)               = "RoundNum, PlayerID";
    option (cltgen.gamecore_databin) = true;

    uint32 RoundNum                  = 1 [ (resdata.cname) = "回合数", (bingogen.primary_key) = 1 ];
    uint32 PlayerID                  = 2 [ (resdata.cname) = "玩家ID", (bingogen.primary_key) = 2 ];
    uint32 ShopCfgID                 = 3 [ (resdata.cname) = "商店配置ID" ];
    uint32 ChessPresetID             = 4 [ (resdata.cname) = "棋子摆放ID" ];
    uint32 ChessPosID                = 5 [ (resdata.cname) = "棋子位置ID" ];
    bool IsHost                      = 6 [ (resdata.cname) = "是否主场" ];
    repeated uint32 AddEquipCfgIDArr = 7 [ (resdata.cname) = "添加装备", (resdata.count) = "3" ];
    uint32 ExtraAddExp               = 8 [ (resdata.cname) = "额外增加经验" ];
}

message ResNBChessHeroUpgradeAwardCfg {
    option (cltgen.pk)               = "LevelID, ChessID, UpgradeCount";
    option (cltgen.gamecore_databin) = true;

    uint32 LevelID      = 1 [ (resdata.cname) = "关卡ID", (bingogen.primary_key) = 1 ];
    uint32 ChessID      = 2 [ (resdata.cname) = "棋子ID", (bingogen.primary_key) = 2 ];
    uint32 UpgradeCount = 3 [ (resdata.cname) = "升级次数", (bingogen.primary_key) = 3 ];
    uint32 AwardChessID = 4 [ (resdata.cname) = "奖励棋子ID" ];
}

enum EDynamicGuidePlayerTagType {
    EDynamicGuidePlayerTagType_None                   = 0;
    EDynamicGuidePlayerTagType_Ability                = 1 [ (resdata.keyword_alias) = "能力" ];
    EDynamicGuidePlayerTagType_RankScore              = 2 [ (resdata.keyword_alias) = "段位分" ];
    EDynamicGuidePlayerTagType_NotUseLordSkill        = 3 [ (resdata.keyword_alias) = "未使用领主技能" ];
    EDynamicGuidePlayerTagType_NotUpgradeLordSkill    = 4 [ (resdata.keyword_alias) = "未升级领主技能" ];
    EDynamicGuidePlayerTagType_NotFinishGuideStepTLog = 5 [ (resdata.keyword_alias) = "未完成引导TLog" ];
    EDynamicGuidePlayerTagType_MinFinishedGameCnt     = 6 [ (resdata.keyword_alias) = "最少战斗场次" ];
    EDynamicGuidePlayerTagType_RecruitStepScore       = 7 [ (resdata.keyword_alias) = "新手分值" ];
    EDynamicGuidePlayerTagType_Max                    = 8;
}

enum EDynamicGuideThresholdType {
    option (cltgen.bp_export) = true;

    EDynamicGuideThresholdType_None                 = 0;
    EDynamicGuideThresholdType_Hp                   = 1 [ (resdata.keyword_alias) = "血量" ];
    EDynamicGuideThresholdType_Level                = 2 [ (resdata.keyword_alias) = "等级" ];
    EDynamicGuideThresholdType_CardPoolLevel        = 3 [ (resdata.keyword_alias) = "卡池等级" ];
    EDynamicGuideThresholdType_Coin                 = 4 [ (resdata.keyword_alias) = "金币" ];
    EDynamicGuideThresholdType_ContinueLose         = 5 [ (resdata.keyword_alias) = "连败" ];
    EDynamicGuideThresholdType_SlotAndBattleHeroNum = 6 [ (resdata.keyword_alias) = "备战区和战场棋子总数" ];
    EDynamicGuideThresholdType_TotalRelativeLevel   = 7 [ (resdata.keyword_alias) = "激活的总羁绊层数" ];
    EDynamicGuideThresholdType_BackpackEquipNum     = 8 [ (resdata.keyword_alias) = "背包装备数" ];
    EDynamicGuideThresholdType_TotoalCoin           = 9 [ (resdata.keyword_alias) = "总金币" ];
    EDynamicGuideThresholdType_SlotHeroNum          = 10 [ (resdata.keyword_alias) = "备战区棋子总数" ];
    EDynamicGuideThresholdType_BattleHeroNum        = 11 [ (resdata.keyword_alias) = "战场棋子总数" ];
    EDynamicGuideThresholdType_UseSkillCnt          = 12 [ (resdata.keyword_alias) = "使用技能次数" ];
    EDynamicGuideThresholdType_SkillLevel           = 13 [ (resdata.keyword_alias) = "技能等级" ];
    EDynamicGuideThresholdType_Exp4NextLevel        = 14 [ (resdata.keyword_alias) = "升级所需经验" ];
    EDynamicGuideThresholdType_MaxPopulation        = 15 [ (resdata.keyword_alias) = "最大人口" ];
}

message ResDT_DynamicGuidePlayerStatusInfo {
    uint32 Type            = 1 [ (resdata.cname) = "类型", (resdata.bind) = "EDynamicGuidePlayerTagType" ];
    repeated uint32 Params = 2 [ (resdata.cname) = "参数", (resdata.count) = "2" ];
}

message ResDynamicGuidePlanCfg {
    option (cltgen.system_databin) = true;
    option (cltgen.random_access)  = Runtime;
    option (cltgen.pk)             = "ID";

    repeated ResDT_DynamicGuidePlayerStatusInfo PlayerStatus = 1 [ (resdata.cname) = "玩家状态", (resdata.count) = "5" ];
    uint32 ID                                                = 4 [ (resdata.cname) = "ID", (bingogen.primary_key) = 1 ];
    bool EnableBySetting                                     = 5 [ (resdata.cname) = "通过设置启用" ];
    bool ActiveHelpEntry                                     = 6 [ (resdata.cname) = "规则标签是否外显" ];
}

message ResDT_DynamicGuideThreshold {
    int32 Value      = 1 [ (resdata.cname) = "正常值" ];
    int32 LowerLimit = 2 [ (resdata.cname) = "下限" ];
    int32 UpperLimit = 3 [ (resdata.cname) = "上限" ];
}

message ResDynamicGuideThresholdCfg {
    option (cltgen.index)          = "ID";
    option (cltgen.index)          = "ID, ThresholdType";
    option (cltgen.system_databin) = true;

    uint32 ID                             = 1 [ (resdata.cname) = "ID", (bingogen.primary_key) = 1 ];
    string RoundNumStr                    = 2 [ (resdata.cname) = "回合数" ];
    uint32 ThresholdType                  = 3 [ (resdata.cname) = "阈值类型", (resdata.bind) = "EDynamicGuideThresholdType", (bingogen.primary_key) = 2 ];
    ResDT_DynamicGuideThreshold Threshold = 4 [ (resdata.cname) = "阈值" ];
}

enum EDynamicGuideTipCloseConditionType {
    option (cltgen.bp_export) = true;

    EDynamicGuideTipCloseConditionType_None             = 0;
    EDynamicGuideTipCloseConditionType_Timer            = 1 [ (resdata.keyword_alias) = "定时器" ];
    EDynamicGuideTipCloseConditionType_Event            = 2 [ (resdata.keyword_alias) = "事件触发" ];
    EDynamicGuideTipCloseConditionType_PlayerDataChange = 3 [ (resdata.keyword_alias) = "玩家数据变更" ];
}

enum EDynamicGuideTipUIEventRspResult {
    option (cltgen.bp_export) = true;

    EDynamicGuideTipUIEventRspResult_None       = 0;
    EDynamicGuideTipUIEventRspResult_CloseGuide = 1 [ (resdata.keyword_alias) = "关闭引导" ];
}

message ResDT_DynamicGuideTipCloseConditionItem {
    uint32 conditionType     = 1 [ (resdata.cname) = "类型", (resdata.bind) = "EDynamicGuideTipCloseConditionType" ];
    repeated string StrParam = 2 [ (resdata.cname) = "参数", (resdata.count) = "5" ];
    uint32 TLogID            = 3 [ (resdata.cname) = "TLogID" ];
}

enum EDynamicGuideTipPreOperateType {
    option (cltgen.bp_export) = true;

    EDynamicGuideTipPreOperateType_None       = 0;
    EDynamicGuideTipPreOperateType_SetSideBar = 1 [ (resdata.keyword_alias) = "设置侧边栏" ];
}

message ResDT_DynamicGuideTipPreOperateItem {
    uint32 type              = 1 [ (resdata.cname) = "类型", (resdata.bind) = "EDynamicGuideTipPreOperateType" ];
    repeated string StrParam = 2 [ (resdata.cname) = "参数", (resdata.count) = "2" ];
}

message ResDT_DynamicGuideTipItem {
    string WidgetPathType                          = 1 [ (resdata.cname) = "路径类型" ];
    string AlignType                               = 2 [ (resdata.cname) = "对齐方式" ];
    uint32 CfgID                                   = 3 [ (resdata.cname) = "配置ID" ];
    string UIEventType                             = 4 [ (resdata.cname) = "事件类型" ];
    uint32 UIEventRspResult                        = 5 [ (resdata.cname) = "事件响应结果", (resdata.bind) = "EDynamicGuideTipUIEventRspResult" ];
    uint32 TLogID                                  = 6 [ (resdata.cname) = "TLogID" ];
    ResDT_DynamicGuideTipPreOperateItem PreOperate = 7 [ (resdata.cname) = "前置操作" ];
}

message ResDynamicGuideSingleBpCfg {
    option (cltgen.pk)             = "ID";
    option (cltgen.system_databin) = true;
    option (cltgen.random_access)  = Editor;

    uint32 ID                           = 1 [ (resdata.cname) = "ID", (bingogen.primary_key) = 1 ];
    uint32 IsLayer2UI                   = 2 [ (resdata.cname) = "是否弹窗" ];
    string Layer2UIName                 = 3 [ (resdata.cname) = "弹窗名字" ];
    ResDT_DynamicGuideTipItem ClosedTip = 4 [ (resdata.cname) = "关闭期间提示" ];
    ResDT_DynamicGuideTipItem OpenedTip = 5 [ (resdata.cname) = "打开期间提示" ];

    repeated ResDT_DynamicGuideTipCloseConditionItem CloseConditions = 6 [ (resdata.cname) = "关闭条件", (resdata.count) = "2" ];
    uint32 StateTipID                                                = 7 [ (resdata.cname) = "状态提示ID" ];
    uint32 TimeoutSecs                                               = 8 [ (resdata.cname) = "超时时长" ];
}

enum ENBHelpUnlockTriggerTimeType {
    ENBHelpUnlockTriggerTimeType_None            = 0;
    ENBHelpUnlockTriggerTimeType_Lord            = 1 [ (resdata.keyword_alias) = "棋手" ];
    ENBHelpUnlockTriggerTimeType_EnterRound      = 2 [ (resdata.keyword_alias) = "进入回合" ];
    ENBHelpUnlockTriggerTimeType_EnterRoundState = 3 [ (resdata.keyword_alias) = "进入回合状态" ];
    ENBHelpUnlockTriggerTimeType_PvpBattle       = 4 [ (resdata.keyword_alias) = "第n次pvp战斗" ];
    ENBHelpUnlockTriggerTimeType_GetEquip        = 5 [ (resdata.keyword_alias) = "获得装备" ];
    ENBHelpUnlockTriggerTimeType_DropTalent      = 6 [ (resdata.keyword_alias) = "掉落天赋" ];
}

message ResDT_NBHelpUnlockTriggerTimeItem {
    uint32 Type            = 1 [ (resdata.cname) = "类型", (resdata.bind) = "ENBHelpUnlockTriggerTimeType" ];
    repeated uint32 Params = 2 [ (resdata.cname) = "参数", (resdata.count) = "3" ];
}

message ResNBHelpConfig {
    option (cltgen.pk)             = "ID";
    option (cltgen.system_databin) = true;
    option (cltgen.random_access)  = Runtime;

    uint32 ID                                                 = 1 [ (resdata.cname) = "ID" ];
    repeated ResDT_NBHelpUnlockTriggerTimeItem UnlockTriggers = 2 [ (resdata.cname) = "解锁触发时机", (resdata.count) = "2" ];
    repeated uint32 DefaultReadPlayerIDs                      = 3 [ (resdata.cname) = "默认已读玩家标签ID", (resdata.count) = "3" ];
    uint32 TLogID                                             = 4 [ (resdata.cname) = "TLogID" ];
    uint32 TipCfgID                                           = 5 [ (resdata.cname) = "提示配置ID" ];
    bool EnableBySetting                                      = 6 [ (resdata.cname) = "通过设置启用" ];
    repeated uint32 TagIDs4Unlock                             = 7 [ (resdata.cname) = "解锁所需标签ID", (resdata.count) = "5" ];
    uint32 GroupId                                            = 8 [ (resdata.cname) = "分组ID" ];
    string GroupName                                          = 9 [ (resdata.cname) = "分组名称" ];
}

enum ENBUINameHintUnlockType {
    ENBUINameHintUnlockType_None            = 0;
    ENBUINameHintUnlockType_Default         = 1 [ (resdata.keyword_alias) = "默认解锁" ];
    ENBUINameHintUnlockType_FinishCount     = 2 [ (resdata.keyword_alias) = "完成计数" ];
    ENBUINameHintUnlockType_FinishSpecify   = 3 [ (resdata.keyword_alias) = "完成指定" ];
}

enum ENBUINameHintFinishType {
    ENBUINameHintFinishType_None          = 0;
    ENBUINameHintFinishType_Click         = 1 [ (resdata.keyword_alias) = "点击" ];
    ENBUINameHintFinishType_OpenUILayer   = 2 [ (resdata.keyword_alias) = "打开UI弹窗" ];
    ENBUINameHintFinishType_SendQuickMsg  = 3 [ (resdata.keyword_alias) = "发送便捷信息" ];
}

message ResDT_NBUINameHintUnlockItem {
    uint32 Type            = 1 [ (resdata.cname) = "类型", (resdata.bind) = "ENBUINameHintUnlockType" ];
    repeated uint32 Params = 2 [ (resdata.cname) = "参数", (resdata.count) = "2" ];
}

message ResDT_NBUINameHintFinishItem {
    uint32 Type            = 1 [ (resdata.cname) = "类型", (resdata.bind) = "ENBUINameHintFinishType" ];
    repeated uint32 Params = 2 [ (resdata.cname) = "参数", (resdata.count) = "2" ];
    repeated string StrParams = 3 [ (resdata.cname) = "字符串参数", (resdata.count) = "2" ];
}

enum ENBUINameHintDirType {
    ENBUINameHintDirType_None         = 0;
    ENBUINameHintDirType_Right        = 1 [ (resdata.keyword_alias) = "右" ];
    ENBUINameHintDirType_Left         = 2 [ (resdata.keyword_alias) = "左" ];
    ENBUINameHintDirType_Top          = 3 [ (resdata.keyword_alias) = "上" ];
    ENBUINameHintDirType_Down         = 4 [ (resdata.keyword_alias) = "下" ];
}

message ResNBUINameHintCfg {
    option (cltgen.pk)             = "ID";
    option (cltgen.system_databin) = true;
    option (cltgen.random_access)  = Runtime;

    uint32 ID                                      = 1 [ (resdata.cname) = "ID" ];
    ResDT_NBUINameHintUnlockItem Unlock = 2 [ (resdata.cname) = "解锁条件"];
    ResDT_NBUINameHintFinishItem Finish = 3 [ (resdata.cname) = "完成条件"];
    string UIPathEnumStr                      = 4 [ (resdata.cname) = "UI路径枚举"];
    string OwnerUILayerName                   = 5 [ (resdata.cname) = "所属UI弹窗"];
    string HintTxt                             = 7 [ (resdata.cname) = "提示内容", (resdata.translate) = true];
    uint32 HintDir           = 8 [ (resdata.cname) = "提示方向", (resdata.bind) = "ENBUINameHintDirType"  ];
    Vector2D Offset          = 9 [ (resdata.cname) = "偏移" ];
    uint32 LineLength        = 10 [ (resdata.cname) = "提示线长度" ];
}


// -------------------------新手关卡----------------------------

// -------------------------温暖局----------------------------

message ResDTAIParam {
    uint32 Type = 1 [ (resdata.cname) = "类型", (resdata.bind) = "EAITYPE" ];
    int32 Param = 2 [ (resdata.cname) = "参数" ];
}

message STAIDifficultyChg {
    float MinRankNoChg  = 1 [ (resdata.cname) = "最小排名值" ];
    float MaxRankNoChg  = 2 [ (resdata.cname) = "最大排名值" ];
    int32 DifficultyChg = 3 [ (resdata.cname) = "难度等级变更值" ];
}

message ResAIDifficultyCfg {
    uint32 AIDifficulty           = 1 [ (resdata.cname) = "难度等级", (bingogen.primary_key) = 1 ];
    ResDTAIParam AIParam          = 4 [ (resdata.cname) = "AI" ];
    ResDTAIParam GuaranteeAIParam = 5 [ (resdata.cname) = "保底AI" ];
}

message ResAIDifficultyChgCfg {
    uint32 Rank                              = 1 [ (resdata.cname) = "段位", (resdata.bind) = "EPvpRankType", (bingogen.primary_key) = 1 ];
    uint32 Level                             = 2 [ (resdata.cname) = "阶数", (bingogen.primary_key) = 2 ];
    uint32 BaseDifficulty                    = 3 [ (resdata.cname) = "基准难度等级" ];
    bool IsChangeClose                       = 4 [ (resdata.cname) = "是否变更关闭" ];
    uint32 BattleCntLimit                    = 5 [ (resdata.cname) = "变更最少对战人次" ];
    repeated STAIDifficultyChg DifficultyChg = 6 [ (resdata.cname) = "变更", (resdata.count) = "3" ];
}

message ResDTWarmScript { // 温暖局剧本
    uint32 ID     = 1 [ (resdata.cname) = "方案ID" ];
    uint32 Weight = 2 [ (resdata.cname) = "权重" ];
}

enum EWarmAIAllocMode {
    WarmAINormal = 0 [(resdata.keyword_alias) = "普通投放" ];
    WarmAIAllClientAI = 1 [(resdata.keyword_alias) = "全量行为树AI" ];
    WarmAIAllServerAI = 2 [ (resdata.keyword_alias) = "全量ServerAI" ];
}

message ResWarmAIStrategyCfg {
    option (resdata.output)             = Server;
    uint32 ID                           = 1 [ (resdata.cname) = "温暖策略ID", (bingogen.primary_key) = 1 ];
    uint32 AINum                        = 2 [ (resdata.cname) = "AI数量" ];
    int32 AIDifficultyOffset            = 4 [ (resdata.cname) = "AI难度偏移" ];
    repeated ResDTWarmScript WarmScript = 5 [ (resdata.cname) = "剧本", (resdata.count) = "5" ];
    uint32 AIAllocMode                  = 6 [ (resdata.cname) = "AI投放模式", (resdata.bind) = "EWarmAIAllocMode" ];
    uint32 AIScript                     = 7 [ (resdata.cname) = "AI剧本ID" ];
}

enum EPVPLordUseType {
    USE_TOP = 0 [ (resdata.keyword_alias) = "前N次" ];
    USE_IN  = 1 [ (resdata.keyword_alias) = "第N次" ];
}

message ResLordUseWarmScripChgCfg {
    option (resdata.output)             = Server;
    uint32 StrategyID                   = 1 [ (resdata.cname) = "温暖策略ID" ];
    uint32 LordID                       = 2 [ (resdata.cname) = "领主ID" ];
    uint32 Weight                       = 3 [ (resdata.cname) = "权重" ];
    EPVPLordUseType UseType             = 4 [ (resdata.cname) = "使用类型" ];
    uint32 UseParam                     = 5 [ (resdata.cname) = "使用参数" ];
    repeated ResDTWarmScript WarmScript = 6 [ (resdata.cname) = "剧本", (resdata.count) = "5" ];
}

message ResWarmEMAParamCfg {
    option (resdata.output)  = Server;
    uint32 Rank              = 1 [ (resdata.cname) = "段位", (bingogen.primary_key) = 1, (resdata.bind) = "EPvpRankType" ];
    repeated int32 WarmScore = 2 [ (resdata.cname) = "胜负分名次", (resdata.count) = "8" ];
}

// 温暖局回流触发
message ResDTWarmBack {
    uint32 Interval     = 1 [ (resdata.cname) = "间隔" ];
    uint32 WarmStrategy = 2 [ (resdata.cname) = "策略" ];
}
// 温暖局均线策略
message ResDTWarmEMAStrategy {
    uint32 EMAN         = 1 [ (resdata.cname) = "N" ];
    uint32 WarmStrategy = 2 [ (resdata.cname) = "策略" ];
}

message ResWarmAIRuleCfg {
    option (resdata.output)           = Server;
    uint32 Rank                       = 1 [ (resdata.cname) = "段位", (bingogen.primary_key) = 1, (resdata.bind) = "EPvpRankType" ];
    repeated ResDTWarmEMAStrategy EMA = 2 [ (resdata.cname) = "均线", (resdata.count) = "4" ];
    repeated ResDTWarmBack WarmBack   = 3 [ (resdata.cname) = "赛季内回流", (resdata.count) = "2" ];
    uint32 FailThresholdScore         = 4 [ (resdata.cname) = "连续失败分数" ];
    uint32 FailThresholdStrategy      = 5 [ (resdata.cname) = "连续失败策略" ];
    uint32 SParam                     = 6 [ (resdata.cname) = "S因子" ];
    uint32 TriggerInterval            = 7 [ (resdata.cname) = "触发间隔" ];
    uint32 MinRankCount               = 8 [ (resdata.cname) = "排位赛最小场次数" ];
}

enum EAIStrategyChkType {
    CHECK_TOP = 0 [ (resdata.keyword_alias) = "前N局" ];
    CHECK_IN  = 1 [ (resdata.keyword_alias) = "第N局" ];
}

message ResDTStrategyScore {
    uint32 MinScoreValue = 1 [ (resdata.cname) = "最小总分值" ];
    uint32 MaxScoreValue = 2 [ (resdata.cname) = "最大总分值" ];
    uint32 StrategyID    = 3 [ (resdata.cname) = "ID" ];
}

message ResWarmAICondStrategy {
    option (resdata.output)                       = Server;
    uint32 ID                                     = 1 [ (resdata.cname) = "ID", (bingogen.primary_key) = 1 ];
    uint32 Weight                                 = 2 [ (resdata.cname) = "权重" ];
    uint32 CheckType                              = 3 [ (resdata.cname) = "判定类型", (resdata.bind) = "EAIStrategyChkType" ];
    uint32 CheckParam                             = 4 [ (resdata.cname) = "判定参数" ];
    repeated ResCondInfo CheckCond                = 5 [ (resdata.cname) = "判定条件", (resdata.count) = "Legacy.RES_MAX_AICHKCOND_NUM" ];
    uint32 StrategyScoreID                        = 6 [ (resdata.cname) = "温暖策略评分ID" ];
    repeated ResDTStrategyScore StrategyScoreInfo = 7 [ (resdata.cname) = "温暖策略", (resdata.count) = "Legacy.RES_MAX_AICHKSCORE_NUM" ];
}

message ResWarmAIStrategyScore {
    option (resdata.output) = Server;
    uint32 ScoreID          = 1 [ (resdata.cname) = "评分ID" ];
    ResCondInfo ScoreCond   = 2 [ (resdata.cname) = "评分条件" ];
    uint32 ScoreValue       = 3 [ (resdata.cname) = "分值" ];
}

// 行为树AI额外标记的枚举
enum EClientAIExtraFlag {
    option (cltgen.gamecore_enum) = true;
    
    AIFlagAuctionNoBidding  = 0 [ (resdata.keyword_alias) = "行为树AI标记_拍卖不竞价" ];
    AIFlagLineupBigRelative = 1 [ (resdata.keyword_alias) = "行为树AI标记_阵容优先大羁绊" ];
    AIFlagMax               = 32; // 不能大于等于32
}

message ResClientAIExtraFlag {
    EClientAIExtraFlag ID   = 1 [ (resdata.cname) = "FlagID" ];
    uint32 MaxRankScore     = 2 [ (resdata.cname) = "段位分数（不大于）" ];
    uint32 MaxRankGameCount = 3 [ (resdata.cname) = "排位赛对局数（不大于）" ];
}

message WarmAIConf {
    ResWarmAIStrategyCfg WarmAIStrategyCfg = 1 [ (bingogen.databin_path) = "" ];
    ResWarmAIRuleCfg WarmAIRuleCfg         = 2 [ (bingogen.databin_path) = "" ];
    ResWarmEMAParamCfg WarmEMAParamCfg     = 3 [ (bingogen.databin_path) = "" ];
    ResIeDropScenario WarmAIScript         = 4 [ (bingogen.databin_path) = "" ]; // 温暖局剧本表，仅做校验

    ResAIDifficultyCfg AIDifficultyCfg                = 5 [ (bingogen.databin_path) = "" ];
    ResAIDifficultyChgCfg AIDifficultyChgCfg          = 6 [ (bingogen.databin_path) = "" ];
    ResWarmAICondStrategy WarmAICondStrategy          = 7 [ (bingogen.databin_path) = "" ];
    ResWarmAIStrategyScore WarmAIStrategyScore        = 8 [ (bingogen.databin_path) = "" ];
    ResLordUseWarmScripChgCfg LordUseWarmScriptChgCfg = 9 [ (bingogen.databin_path) = "" ];
    ResClientAIExtraFlag ClientAIExtraFlag            = 10 [ (bingogen.databin_path) = "" ];
}
// -------------------------温暖局----------------------------

// -------------------------新手----------------------------
message ResNewbieGrpDataBin {
    option (cltgen.pk)             = "GroupID";
    option (cltgen.system_databin) = true;
    option (cltgen.random_access)  = Runtime;

    uint32 GroupID         = 1 [ (resdata.cname) = "任务组ID", (bingogen.primary_key) = 1 ];
    string GroupName       = 2 [ (resdata.cname) = "任务组名称", (resdata.translate) = true ];
    string GroupDesc       = 3 [ (resdata.cname) = "任务组描述", (resdata.translate) = true ];
    uint32 AwardDropID     = 5 [ (resdata.cname) = "奖励掉落ID" ];
    ResCondInfo UnlockCond = 6 [ (resdata.cname) = "解锁条件" ];
    string GrpBgPath       = 7 [ (resdata.cname) = "背景原画" ];
    string GrpItemPath     = 8 [ (resdata.cname) = "分组图标" ];
}

enum ENewbieTaskType {
    TASK_COMMON = 0 [ (resdata.keyword_alias) = "通用新手任务" ];
    TASK_PROGRESS = 1 [ (resdata.keyword_alias) = "进度新手任务" ];
}

message ResNewbieTaskDataBin {
    option (cltgen.pk)             = "TaskID";
    option (cltgen.system_databin) = true;
    option (cltgen.index)          = "BelongGrpID";
    uint32 TaskID                  = 1 [ (resdata.cname) = "任务ID", (bingogen.primary_key) = 1 ];
    uint32 BelongGrpID             = 2 [ (resdata.cname) = "所属组ID" ];
    string Name                    = 3 [ (resdata.cname) = "任务名称", (resdata.translate) = true ];
    string Desc                    = 4 [ (resdata.cname) = "任务描述", (resdata.translate) = true ];
    ResCondInfo FinishCond         = 5 [ (resdata.cname) = "完成条件" ];
    string IconPath                = 6 [ (resdata.cname) = "任务图标" ];
    string JumpParam               = 7 [ (resdata.cname) = "跳转参数" ];
    uint32 AwardDropID             = 8 [ (resdata.cname) = "奖励掉落ID" ];
    ENewbieTaskType TaskType       = 9 [ (resdata.cname) = "任务类型" ];
}

message NewbieConf {
    ResNewbieGrpDataBin NewbieGrpDataBin   = 1 [ (bingogen.databin_path) = "" ];
    ResNewbieTaskDataBin NewbieTaskDataBin = 2 [ (bingogen.databin_path) = "" ];
}
// -------------------------新手----------------------------

// 局内表在局外使用的例子， 测试局内表增加SvrPlayModUniqID
message ResTestServerPlayModKeyCfg {
    uint32 Test1            = 1 [ (resdata.cname) = "测试1", (bingogen.primary_key) = 1 ];
    uint32 SvrPlayModUniqID = 2 [ (bingogen.primary_key) = 2 ]; // 必须将SvrPlayModUniqID作为主键，且变量名为SvrPlayModUniqID不能改变
    uint32 Test2            = 3 [ (resdata.cname) = "测试2" ];
}

message TestConf { ResTestServerPlayModKeyCfg TestCfg = 1 [ (bingogen.databin_path) = "" ]; }
// -------------------------抽卡----------------------------

enum ECardPackType{
    CARD_TYPE_DIAMOND = 0 [ (resdata.keyword_alias) = "钻石卡包" ];
    CARD_TYPE_COUPONS  = 1 [ (resdata.keyword_alias) = "点券卡包" ];
}

message ResCardPackCfgDataBin {
    option (cltgen.pk)             = "ID";
    option (cltgen.index)          = "SeasonID";
    option (cltgen.index)          = "CardType";
    option (cltgen.index)          = "SeasonID,CardType";
    option (cltgen.system_databin) = true;

    uint32 ID                  = 1 [ (resdata.cname) = "卡包ID", (bingogen.primary_key) = 1 ];
    uint32 SeasonID            = 2 [ (resdata.cname) = "赛季ID" ];
    uint32 CardPoolID          = 3 [ (resdata.cname) = "卡池ID" ];
    bool OpenGuarantee         = 5 [ (resdata.cname) = "开启幸运功能" ];
    uint32 GuaranteeCnt        = 6 [ (resdata.cname) = "幸运触发次数" ];
    uint32 GuaranteeCardPoolID = 7 [ (resdata.cname) = "去重幸运卡池ID" ];
    string Name                = 8 [ (resdata.cname) = "卡包名字", (resdata.translate) = true ];
    ECardPackType CardType     = 9 [ (resdata.cname) = "卡包类型" ];
    string Desc                = 10 [ (resdata.cname) = "描述", (resdata.translate) = true ];
    uint32 KeyPropID           = 11 [ (resdata.cname) = "消耗的钥匙ID" ];
    ResGameItem CostItem       = 12 [ (resdata.cname) = "消耗" ]; // 废弃
    uint32 OnceDrawDecorateNum = 13 [ (resdata.cname) = "抽中的配饰数" ];
    repeated ResGameItem ExchangeKeyCostItems       = 14 [ (resdata.cname) = "钥匙兑换消耗", (resdata.count) = "2"];
    uint32 CanExchangeKeyInGame = 15 [ (resdata.cname) = "能否系统内兑换钥匙" ]; // 系统内兑换而不是道聚城兑换
    uint32 PropCityType = 16 [ (resdata.cname) = "道具城购买类型" ]; // 道具城购买类型
    uint32 PropCityID = 17 [ (resdata.cname) = "道具城购买物品ID" ]; // 道具城购买物品ID
}

message DrawCardConf { ResCardPackCfgDataBin CardPackCfg = 1 [ (bingogen.databin_path) = "" ]; }

// -------------------------抽卡----------------------------
// -------------------------帮助----------------------------
enum EnumHelpSystemIDName {
    INVALID              = 0 [ (resdata.keyword_alias) = "无效值" ];
    BATTLEPASS           = 1 [ (resdata.keyword_alias) = "战令主界面" ];
    HEROCOLLECT          = 2 [ (resdata.keyword_alias) = "英雄收集" ];
    NEWBIRACTITY         = 3 [ (resdata.keyword_alias) = "新手活动" ];
    EXCHANGEWEAL         = 4 [ (resdata.keyword_alias) = "兑换活动" ];
    GLORYTITLE           = 5 [ (resdata.keyword_alias) = "棋手头衔" ];
    GAME_CENTER          = 6 [ (resdata.keyword_alias) = "玩法中心" ];
    SETTING_INSIDE       = 7 [ (resdata.keyword_alias) = "局内设置" ];
    GUILD                = 8 [ (resdata.keyword_alias) = "战队" ];
    ACHIEVEMian          = 9 [ (resdata.keyword_alias) = "成就主页面" ];
    GAMESEASONTRIP       = 10 [ (resdata.keyword_alias) = "赛季之旅" ];
    GAMESEASONAWARD      = 11 [ (resdata.keyword_alias) = "赛季之旅奖励" ];
    GUILDOUT             = 12 [ (resdata.keyword_alias) = "战队社团" ];
    ROUNDHELP_INSIDE     = 13 [ (resdata.keyword_alias) = "局内阶段展示" ];
    GAME_ATLAS           = 14 [ (resdata.keyword_alias) = "图鉴" ];
    GAMEHISTORICALSEASON = 15 [ (resdata.keyword_alias) = "赛季数据" ];
    GAMEMARKKING         = 16 [ (resdata.keyword_alias) = "王者印记" ];
    DEPOSIT_CARDS_RULE   = 17 [ (resdata.keyword_alias) = "弃牌库规则" ];
    PERSONALIZATION      = 18 [ (resdata.keyword_alias) = "个性化" ];
    LINE_UP_RECOMMEND    = 19 [ (resdata.keyword_alias) = "阵容推荐" ];
}

message HelpSystemTab {
    repeated HelpSystemPassage Passage = 1 [ (resdata.cname) = "段落", (resdata.count) = "10" ];
    string TabName                     = 2 [ (resdata.cname) = "名称" ];
}
message HelpSystemPassage {
    string PassageTitle       = 1 [ (resdata.cname) = "标题", (resdata.translate) = true ];
    uint32 ImageType          = 2 [ (resdata.cname) = "配图规则" ];
    string Content            = 3 [ (resdata.cname) = "正文", (resdata.translate) = true ];
    repeated string ImagePath = 4 [ (resdata.cname) = "配图", (resdata.count) = "3" ];
}
message ResHelpSystemCfgDataBin {
    option (cltgen.pk)             = "ID";
    option (cltgen.system_databin) = true;
    uint32 ID                      = 1 [ (resdata.cname) = "帮助面板入口ID", (resdata.bind) = "EnumHelpSystemIDName" ];
    string Title                   = 2 [ (resdata.cname) = "标题", (resdata.translate) = true ];
    uint32 TabCount                = 3 [ (resdata.cname) = "页签数量" ];
    repeated HelpSystemTab TabData = 4 [ (resdata.cname) = "页签", (resdata.count) = "1" ];
}

// -------------------------新手引导----------------------------
enum NB_TRIGGER_TYPE {
    Invalid              = 0;
    EnterHall            = 1 [ (resdata.keyword_alias) = "进入大厅" ];
    NewbieGuideComplete  = 2 [ (resdata.keyword_alias) = "引导完成" ];
    NewbieBattleComplete = 3 [ (resdata.keyword_alias) = "新手关卡完成" ];
    SystemUnlockAnimEnd  = 4 [ (resdata.keyword_alias) = "系统解锁完成" ];
    InPVPChooseLord      = 5 [ (resdata.keyword_alias) = "进入棋手选择" ];
    LuaEventTrigger      = 6 [ (resdata.keyword_alias) = "Lua事件触发" ];
}

enum NB_CONDITION_TYPE {
    NB_CONDITION_INVALID  = 0;
    NewbieGuideStat       = 1 [ (resdata.keyword_alias) = "引导状态" ];
    BattleTimes           = 2 [ (resdata.keyword_alias) = "完成战斗场次" ];
    FirstArrivedRank      = 3 [ (resdata.keyword_alias) = "首次达到段位" ];
    TrainingBookletFinish = 4 [ (resdata.keyword_alias) = "训练册任务完成" ];
    AchieveFinish         = 5 [ (resdata.keyword_alias) = "成就任务完成" ];
    CharacterLevelAttain  = 6 [ (resdata.keyword_alias) = "角色等级达到" ];
}

enum NB_SAVE_TYPE {
    Server    = 0 [ (resdata.keyword_alias) = "永久保存" ];
    GameLife  = 1 [ (resdata.keyword_alias) = "重启游戏重置" ];
    LevelLife = 2 [ (resdata.keyword_alias) = "切换关卡重置" ];
    DontSave  = 3 [ (resdata.keyword_alias) = "不保存" ];
}

enum NB_INTRODUCER_DIR {
    Left  = 0 [ (resdata.keyword_alias) = "左" ];
    Right = 1 [ (resdata.keyword_alias) = "右" ];
}

message ResNBGuideTriggerTimeItem {
    uint32 Type           = 1 [ (resdata.cname) = "类型", (resdata.bind) = "NB_TRIGGER_TYPE" ];
    repeated uint32 Param = 2 [ (resdata.cname) = "参数", (resdata.count) = "Legacy.RES_MAX_NEWBIE_GUIDE_TRIGGER_TIME_PARAM_NUM" ];
}

message ResNBGuideTriggerConditionItem {
    uint32 Type           = 1 [ (resdata.cname) = "类型", (resdata.bind) = "NB_CONDITION_TYPE" ];
    repeated uint32 Param = 2 [ (resdata.cname) = "参数", (resdata.count) = "Legacy.RES_MAX_NEWBIE_GUIDE_TRIGGER_CONDITION_PARAM_NUM" ];
}

message ResNBGuideMainLineCfgDataBin {
    option (cltgen.system_databin) = true;
    option (cltgen.pk)             = "ID";
    option (cltgen.random_access)  = Runtime;

    uint32 ID                                              = 1 [ (bingogen.primary_key) = 1, (resdata.cname) = "ID" ];
    uint32 MinLevel                                        = 2 [ (resdata.cname) = "触发等级下限" ];
    uint32 MaxLevel                                        = 3 [ (resdata.cname) = "触发等级上限" ];
    uint32 CanNotSkip                                      = 4 [ (resdata.cname) = "不可跳过" ];
    uint32 SaveType                                        = 5 [ (resdata.cname) = "保存类型", (resdata.bind) = "NB_SAVE_TYPE" ];
    string BpPath                                          = 6 [ (resdata.cname) = "蓝图路径" ];
    repeated ResNBGuideTriggerTimeItem Triggers            = 7 [ (resdata.cname) = "触发时机", (resdata.count) = "Legacy.RES_MAX_NEWBIE_TRIGGER_TIME_NUM" ];
    repeated ResNBGuideTriggerConditionItem Conditions     = 8 [ (resdata.cname) = "触发条件", (resdata.count) = "Legacy.RES_MAX_NEWBIE_TRIGGER_CONDITION_NUM" ];
    repeated ResNBGuideTriggerConditionItem SkipConditions = 9 [ (resdata.cname) = "跳过条件", (resdata.count) = "Legacy.RES_MAX_NEWBIE_TRIGGER_SKIP_CONDITION_NUM" ];
    uint32 Priority                                        = 10 [ (resdata.cname) = "优先级" ];
    bool IsOffline                                         = 11 [ (resdata.cname) = "下架" ];
    bool IsInGame                                          = 12 [ (resdata.cname) = "是否局内引导" ];
    bool IsOutGameWeakBoot                                 = 13 [ (resdata.cname) = "是否局外弱引导" ];
}

message ResDT_NBGuideIntroducer {
    string Name            = 1 [ (resdata.cname) = "名字", (resdata.translate) = true ];
    string NameHexColorStr = 2 [ (resdata.cname) = "名字颜色" ];
    uint32 NameBGStyle     = 3 [ (resdata.cname) = "名字背景样式" ];
    uint32 Dir             = 4 [ (resdata.cname) = "方向", (resdata.bind) = "NB_INTRODUCER_DIR" ];
    uint32 ID              = 5 [ (resdata.cname) = "ID" ];
}

message ResNBGuideIntroduceCfg {
    option (cltgen.pk)             = "ID";
    option (cltgen.system_databin) = true;

    uint32 ID                          = 1 [ (bingogen.primary_key) = 1, (resdata.cname) = "ID" ];
    ResDT_NBGuideIntroducer Introducer = 2 [ (resdata.cname) = "引导员" ];
    string Text                        = 3 [ (resdata.cname) = "介绍内容", (resdata.translate) = true ];
    string AudioEventName              = 4 [ (resdata.cname) = "语音事件" ];
    uint32 PosX                        = 5 [ (resdata.cname) = "对话框位置X" ];
    uint32 Posy                        = 6 [ (resdata.cname) = "对话框位置Y" ];
    string AnchorName                  = 7 [ (resdata.cname) = "锚点名" ];
    string OpTipAudioEventName         = 8 [ (resdata.cname) = "操作提示语音事件" ];
}

message ResNBGuideFingureCfg {
    option (cltgen.pk)             = "ID";
    option (cltgen.system_databin) = true;

    uint32 ID          = 1 [ (bingogen.primary_key) = 1, (resdata.cname) = "ID" ];
    uint32 ShowFingure = 2 [ (resdata.cname) = "是否显示手指" ];
    uint32 FingureDir  = 3 [ (resdata.cname) = "手指方向" ];
    uint32 PosX        = 4 [ (resdata.cname) = "手指偏移X" ];
    uint32 Posy        = 5 [ (resdata.cname) = "手指偏移Y" ];
}

// 提示对齐方式
enum TutorialTipAlignType {
    option (cltgen.bp_export) = true;

    TutorialTipAlignType_Right        = 0 [ (resdata.keyword_alias) = "右" ];
    TutorialTipAlignType_Left         = 1 [ (resdata.keyword_alias) = "左" ];
    TutorialTipAlignType_Top          = 2 [ (resdata.keyword_alias) = "上" ];
    TutorialTipAlignType_Down         = 3 [ (resdata.keyword_alias) = "下" ];
    TutorialTipAlignType_CombineEquip = 4 [ (resdata.keyword_alias) = "合成装备" ];
    TutorialTipAlignType_Fetter       = 5 [ (resdata.keyword_alias) = "羁绊" ];
}

// 教学手指类型
enum TutorialFingureType {
    option (cltgen.bp_export) = true;

    TutorialFingureType_None            = 0;
    TutorialFingureType_Rect            = 1 [ (resdata.keyword_alias) = "矩形" ];
    TutorialFingureType_DragEquip       = 2 [ (resdata.keyword_alias) = "拖动装备" ];
    TutorialFingureType_Cycle           = 3 [ (resdata.keyword_alias) = "圆形" ];
    TutorialFingureType_CycleBig        = 4 [ (resdata.keyword_alias) = "圆形(大)" ];
    TutorialFingureType_CommonClick     = 5 [ (resdata.keyword_alias) = "通用点击" ];
    TutorialFingureType_CommonDrag      = 6 [ (resdata.keyword_alias) = "通用拖拽" ];
    TutorialFingureType_CommonLongPress = 7 [ (resdata.keyword_alias) = "通用长按" ];
}

// 教学手指方向类型
enum TutorialFingureDirType {
    option (cltgen.bp_export) = true;

    TutorialFingureDirType_None     = 0;
    TutorialFingureDirType_Down     = 1 [ (resdata.keyword_alias) = "下" ];
    TutorialFingureDirType_LeftUp   = 2 [ (resdata.keyword_alias) = "左上" ];
    TutorialFingureDirType_RightUp  = 3 [ (resdata.keyword_alias) = "右上" ];
    TutorialFingureDirType_LeftDown = 4 [ (resdata.keyword_alias) = "左下" ];
    TutorialFingureDirType_Up       = 5 [ (resdata.keyword_alias) = "上" ];
}

message Vector2D {
    float X = 1 [ (resdata.cname) = "X" ];
    float Y = 2 [ (resdata.cname) = "Y" ];
}

message ResDT_NBTip {
    uint32 Type     = 1 [ (resdata.cname) = "对齐方式", (resdata.bind) = "TutorialTipAlignType" ];
    Vector2D Offset = 2 [ (resdata.cname) = "偏移" ];
}

message ResDT_NBFingure {
    uint32 Type          = 1 [ (resdata.cname) = "类型", (resdata.bind) = "TutorialFingureType" ];
    uint32 DirType       = 2 [ (resdata.cname) = "方向类型", (resdata.bind) = "TutorialFingureDirType" ];
    Vector2D Offset      = 3 [ (resdata.cname) = "偏移" ];
    Vector2D FrameSize   = 4 [ (resdata.cname) = "边框大小" ];
    Vector2D FrameOffset = 5 [ (resdata.cname) = "边框偏移" ];
}

message ResNBGuideUICfg {
    option (cltgen.pk)             = "ID";
    option (cltgen.system_databin) = true;
    uint32 ID                      = 1 [ (bingogen.primary_key) = 1, (resdata.cname) = "ID" ];
    ResDT_NBTip Tip                = 2 [ (resdata.cname) = "提示" ];
    ResDT_NBFingure Fingure        = 3 [ (resdata.cname) = "手指" ];
}

message ResNBGuideTipCfg {
    option (cltgen.pk)             = "ID";
    option (cltgen.system_databin) = true;

    uint32 ID                  = 1 [ (bingogen.primary_key) = 1, (resdata.cname) = "ID" ];
    string Title               = 2 [ (resdata.cname) = "标题", (resdata.translate) = true ];
    string Text                = 3 [ (resdata.cname) = "内容", (resdata.translate) = true ];
    string ImagePath           = 4 [ (resdata.cname) = "图片路径" ];
    string AudioEventName      = 5 [ (resdata.cname) = "语音事件" ];
    string OpTipAudioEventName = 6 [ (resdata.cname) = "操作提示语音事件" ];
}

enum ENBGuideTlogType {
    option (cltgen.bp_export) = true;

    ENBGuideTlogType_None                   = 0;
    ENBGuideTlogType_Custom                 = 1 [ (resdata.keyword_alias) = "策划自定义" ];
    ENBGuideTlogType_GameStart              = 2 [ (resdata.keyword_alias) = "教学_关卡开始" ];
    ENBGuideTlogType_GameEnd                = 3 [ (resdata.keyword_alias) = "教学_关卡结束" ];
    ENBGuideTlogType_RoundPreparePhaseStart = 4 [ (resdata.keyword_alias) = "教学_准备阶段开始" ];
    ENBGuideTlogType_RoundPreparePhaseEnd   = 5 [ (resdata.keyword_alias) = "教学_准备阶段结束" ];
    ENBGuideTlogType_CountTime              = 6 [ (resdata.keyword_alias) = "教学_计时" ];
    ENBGuideTlogType_CountFingureInput      = 7 [ (resdata.keyword_alias) = "教学_手指输入计数" ];
    ENBGuideTlogType_ChessCoordDiff         = 8 [ (resdata.keyword_alias) = "教学_棋子坐标偏移" ];
    ENBGuideTlogType_LevelRoundTime         = 9 [ (resdata.keyword_alias) = "教学_关卡回合时长" ]; // 关卡ID 回合ID 回合时长
    ENBGuideTlogType_LevelSkip              = 10 [ (resdata.keyword_alias) = "教学_关卡跳过" ];    // 关卡ID 回合ID 距离关卡开始时间
    ENBGuideTlogType_LevelRecover           = 11 [ (resdata.keyword_alias) = "教学_关卡恢复" ];    // 关卡ID 回合ID
}

enum ENBGuideFinType {
    ENBGuideFinType_None    = 0;
    ENBGuideTlogType_NORMAL = 1 [ (resdata.keyword_alias) = "正常结束关卡" ];
    ENBGuideTlogType_SKIP   = 2 [ (resdata.keyword_alias) = "跳过结束关卡" ];
}

message ResNBGuideTlogCfg {
    option (cltgen.pk)             = "StepID";
    option (cltgen.system_databin) = true;
    option (cltgen.random_access)  = Runtime;

    uint32 StepID         = 1 [ (bingogen.primary_key) = 1, (resdata.cname) = "ID" ];
    repeated int32 Params = 2 [ (resdata.cname) = "参数", (resdata.count) = "5" ];
    uint32 FinishStepType = 3 [ (resdata.cname) = "结束关类型", (resdata.bind) = "ENBGuideFinType" ];
    bool IsDynamicGuide   = 4 [ (resdata.cname) = "是否为动态引导" ];
    uint32 TlogType       = 5 [ (resdata.cname) = "日志类型", (resdata.bind) = "ENBGuideTlogType" ];
    bool IsDupReportStep  = 6 [ (resdata.cname) = "是否为重复上报引导" ];
}

message NewbieGuideConf {
    ResNBGuideMainLineCfgDataBin NewbieGuideCfg = 1 [ (bingogen.databin_path) = "" ];
    ResNBGuideTlogCfg NewbieGuideTlog           = 2 [ (bingogen.databin_path) = "" ];
}

enum NB_ADDTIONAL_TYPE {
    NB_ADDTIONAL_NULL                 = 0;
    NB_ADDTIONAL_SETNAME_BEFORE       = 1 [ (resdata.keyword_alias) = "取名前" ];
    NB_ADDTIONAL_SETNAME_ING          = 2 [ (resdata.keyword_alias) = "取名时" ];
    NB_ADDTIONAL_SETNAME_AFTER        = 3 [ (resdata.keyword_alias) = "取名后" ];
    NB_ADDTIONAL_SELECT               = 4 [ (resdata.keyword_alias) = "选关时" ];
    NB_ADDTIONAL_SELECT_PIC           = 5 [ (resdata.keyword_alias) = "选关时图片" ];
    NB_ADDTIONAL_ENTERBATTLE          = 6 [ (resdata.keyword_alias) = "进入关卡" ];
    NB_ADDTIONAL_EXITBATTLE           = 7 [ (resdata.keyword_alias) = "离开关卡" ];
    NB_ADDTIONAL_CHOOSELORD_1         = 8 [ (resdata.keyword_alias) = "棋手选择规则1" ];
    NB_ADDTIONAL_CHOOSELORD_2         = 9 [ (resdata.keyword_alias) = "棋手选择规则2" ];
    NB_ADDTIONAL_CHOOSELORD_3         = 10 [ (resdata.keyword_alias) = "棋手选择规则3" ];
    NB_ADDTIONAL_REPEATED_SELECT      = 11 [ (resdata.keyword_alias) = "重复进入选关" ];
    NB_ADDTIONAL_REPEATED_ENTERBATTLE = 12 [ (resdata.keyword_alias) = "重复进入关卡" ];
    NB_ADDTIONAL_BANPICK_1            = 13 [ (resdata.keyword_alias) = "轮选规则1" ];
    NB_ADDTIONAL_BANPICK_2            = 14 [ (resdata.keyword_alias) = "轮选规则2" ];
    NB_ADDTIONAL_BANPICK_3            = 15 [ (resdata.keyword_alias) = "轮选规则3" ];
}

message NBAdditionalInfo {
    string AdditionalInfo = 1 [ (resdata.cname) = "详细描述", (resdata.translate) = true ];
    string AudioEventName = 2 [ (resdata.cname) = "对应语音事件" ];
}

message ResNBAdditionalDataBin {
    option (cltgen.pk)             = "AdditionalType";
    option (cltgen.system_databin) = true;

    uint32 AdditionalType                    = 1 [ (resdata.cname) = "时机", (resdata.bind) = "NB_ADDTIONAL_TYPE" ];
    uint32 SpineID                           = 2 [ (resdata.cname) = "皮肤ID" ];
    repeated NBAdditionalInfo AdditionalInfo = 3 [ (resdata.cname) = "参数", (resdata.count) = "6" ];
}

enum RES_NEWBIE_CONST_TYPE {
    RES_NEWBIE_CONST_TYPE_OPEN_NEWBIE_BATTLE        = 0 [ (resdata.keyword_alias) = "开启新手战斗" ];
    RES_NEWBIE_CONST_TYPE_OPEN_DYNAMIC_GUIDE        = 1 [ (resdata.keyword_alias) = "开启动态引导" ];
    RES_NEWBIE_CONST_TYPE_PLAYER_TAG_DATA_SEASONID  = 2 [ (resdata.keyword_alias) = "玩家标签数据生效赛季ID" ];
    RES_NEWBIE_CONST_TYPE_PLAYER_TAG_DATA_GAME_TYPE = 3 [ (resdata.keyword_alias) = "玩家标签数据生效玩法类型" ];
    RES_NEWBIE_CONST_TYPE_OPEN_RULE_TIPS            = 4 [ (resdata.keyword_alias) = "开启规则提示" ];
    RES_NEWBIE_CONST_TYPE_OPEN_RECRUIT_TASK         = 5 [ (resdata.keyword_alias) = "开启新手任务" ];
    RES_NEWBIE_CONST_TYPE_OPEN_UINAME_HINT          = 6 [ (resdata.keyword_alias) = "开始UI功能名提示" ];
}

message ResNewbieConstDatabin {
    option (cltgen.pk)             = "ID";
    option (cltgen.system_databin) = true;
    uint32 ID                      = 1 [ (resdata.cname) = "ID", (resdata.bind) = "RES_NEWBIE_CONST_TYPE" ];
    uint32 Value                   = 2 [ (resdata.cname) = "值" ];
}

// -------------------------新手引导----------------------------

// -------------------------天赋----------------------------

enum RES_TALENT_TYPE {
    RES_TALENT_TYPE_INVALID  = 0;
    RES_TALENT_TYPE_GENERAL  = 1 [ (resdata.keyword_alias) = "通用天赋" ];
    RES_TALENT_TYPE_RELATIVE = 2 [ (resdata.keyword_alias) = "羁绊天赋" ];
    RES_TALENT_TYPE_SKILL    = 3 [ (resdata.keyword_alias) = "主动技能" ];
}

enum RES_TALENT_SKILL_INS_TYPE {
    RES_TALENT_SKILL_INS_INVALID          = 0;
    RES_TALENT_SKILL_INS_Bloodlust        = 101 [ (resdata.keyword_alias) = "饮血" ];
    RES_TALENT_SKILL_INS_FailureExp       = 102 [ (resdata.keyword_alias) = "失败的经验" ];
    RES_TALENT_SKILL_INS_MysteriousEnergy = 103 [ (resdata.keyword_alias) = "神秘能源" ];
    RES_TALENT_SKILL_INS_ExcellentTalents = 104 [ (resdata.keyword_alias) = "天赋异禀" ];
    RES_TALENT_SKILL_INS_Resell           = 105 [ (resdata.keyword_alias) = "倒卖" ];
    RES_TALENT_SKILL_INS_Thundercracker   = 106 [ (resdata.keyword_alias) = "雷霆激荡" ];
    RES_TALENT_SKILL_INS_BloodyShadow     = 107 [ (resdata.keyword_alias) = "嗜血之影" ];
    RES_TALENT_SKILL_INS_WerewolfBlood    = 108 [ (resdata.keyword_alias) = "魔种血统" ];
    RES_TALENT_SKILL_INS_WinterArrived    = 109 [ (resdata.keyword_alias) = "(主)凛冬已至" ];
    RES_TALENT_SKILL_INS_ManIsNature      = 110 [ (resdata.keyword_alias) = "(主)天人合一" ];
}

enum RES_TALENT_WEIGHT_CHECK_TYPE {
    RES_TALENT_WEIGHT_CHECK_INVALID  = 0;
    RES_TALENT_WEIGHT_CHECK_HERO     = 1 [ (resdata.keyword_alias) = "拥有英雄检查" ];
    RES_TALENT_WEIGHT_CHECK_UNLOCK   = 2 [ (resdata.keyword_alias) = "满足解锁条件" ];
    RES_TALENT_WEIGHT_CHECK_RELATIVE = 3 [ (resdata.keyword_alias) = "激活羁绊检查" ];
}

enum RES_TALENT_UNLOCK_TYPE {
    RES_TALENT_UNLOCK_INVALID       = 0;
    RES_TALENT_UNLOCK_HERO_TYPE     = 1 [ (resdata.keyword_alias) = "本局拥有英雄" ];
    RES_TALENT_UNLOCK_RELATIVE_TYPE = 2 [ (resdata.keyword_alias) = "本局拥有羁绊" ];
}

enum RES_TALENT_ADDBUFF_TYPE {
    RES_TALENT_ADDBUFF_INVALID                 = 0;
    RES_TALENT_ADDBUFF_MY_ALLHEROS_TYPE        = 1 [ (resdata.keyword_alias) = "天赋加成己方全体英雄" ];
    RES_TALENT_ADDBUFF_ENEMY_ALLHEROS_TYPE     = 2 [ (resdata.keyword_alias) = "天赋加成敌方全体英雄" ];
    RES_TALENT_ADDBUFF_MY_PARTHERO_TYPE        = 3 [ (resdata.keyword_alias) = "天赋加成己方指定英雄" ];
    RES_TALENT_ADDBUFF_ENEMY_PARTHERO_TYPE     = 4 [ (resdata.keyword_alias) = "天赋加成敌方指定英雄" ];
    RES_TALENT_ADDBUFF_MY_PARTRELATIVE_TYPE    = 5 [ (resdata.keyword_alias) = "天赋加成己方指定羁绊" ];
    RES_TALENT_ADDBUFF_ENEMY_PARTRELATIVE_TYPE = 6 [ (resdata.keyword_alias) = "天赋加成敌方指定羁绊" ];
    RES_TALENT_ADDBUFF_ALL_ALLHEROS_TYPE       = 7 [ (resdata.keyword_alias) = "天赋加成全部英雄" ];
}

message ResDT_TalentWeight {
    RES_TALENT_WEIGHT_CHECK_TYPE CheckType = 1 [ (resdata.cname) = "条件" ];
    uint32 WeightAddition                  = 2 [ (resdata.cname) = "数值" ];
}

message ResTalentCfg {
    option (cltgen.pk)               = "ID";
    option (cltgen.index)            = "Quality";
    option (cltgen.system_databin)   = true;
    option (cltgen.gamecore_databin) = true;

    uint32 ID                                   = 1 [ (resdata.cname) = "天赋ID", (bingogen.primary_key) = 1 ];
    string Icon                                 = 2 [ (resdata.cname) = "图标" ];
    string Name                                 = 3 [ (resdata.cname) = "天赋名" ];
    uint32 SkillInsType                         = 4 [ (resdata.cname) = "天赋技能实例类型", (resdata.bind) = "RES_TALENT_SKILL_INS_TYPE" ];
    RES_TALENT_TYPE Type                        = 5 [ (resdata.cname) = "类型" ];
    uint32 SameTypeMaxCount                     = 6 [ (resdata.cname) = "同类型数量限制" ];
    uint32 ShowQuality                          = 7 [ (resdata.cname) = "外显品质" ];
    uint32 Quality                              = 8 [ (resdata.cname) = "品质" ];
    uint32 MaxCount                             = 9 [ (resdata.cname) = "最大数量" ];
    uint32 OrgWeightAddition                    = 10 [ (resdata.cname) = "初始权重加成" ];
    repeated ResDT_TalentWeight WeightAdditions = 11 [ (resdata.cname) = "随机权重加成", (resdata.count) = "2" ];
    string DetailDes                            = 12 [ (resdata.cname) = "详细描述" ];
    string SimpleDes                            = 13 [ (resdata.cname) = "简要描述" ];
    repeated uint32 EffParams                   = 14 [ (resdata.cname) = "效果参数", (resdata.count) = "2" ];
    uint32 RemoveBuff                           = 15 [ (resdata.cname) = "移除Buff" ];
    RES_TALENT_UNLOCK_TYPE UnLockType           = 16 [ (resdata.cname) = "解锁条件" ];
    repeated uint32 UnLockParams                = 17 [ (resdata.cname) = "达成参数", (resdata.count) = "6", (resdata.bind) = "RES_RELATIVE_ID" ];
    uint32 PrepareStageTalentActiveBuff         = 18 [ (resdata.cname) = "备战阶段天赋激活效果ID" ];
    uint32 FightStageTalentActiveBuff           = 19 [ (resdata.cname) = "开战阶段天赋激活效果ID" ];
    uint32 InBattleAddBuffType                  = 20 [ (resdata.cname) = "开战效果加成类别", (resdata.bind) = "RES_TALENT_ADDBUFF_TYPE" ];
    repeated uint32 BuffParams                  = 21 [ (resdata.cname) = "加成参数", (resdata.count) = "6", (resdata.bind) = "RES_RELATIVE_ID" ];
}

message ResDT_TalentRebuildParam {
    uint32 liftLevel      = 1 [ (resdata.cname) = "提升等级" ];
    uint32 WeightAddition = 2 [ (resdata.cname) = "权重" ];
}

message ResTalentRebuild {
    option (cltgen.pk)               = "ID";
    option (cltgen.gamecore_databin) = true;

    uint32 ID                                       = 1 [ (resdata.cname) = "ID", (bingogen.primary_key) = 1 ];
    uint32 Level                                    = 2 [ (resdata.cname) = "天赋等级" ];
    repeated ResDT_TalentRebuildParam RebuildParams = 3 [ (resdata.cname) = "重铸参数", (resdata.count) = "3" ];
}

message ResTalentQuality {
    option (cltgen.pk)               = "ID";
    option (cltgen.gamecore_databin) = true;
    option (cltgen.system_databin)   = true;
    option (cltgen.random_access)    = Runtime;

    uint32 ID             = 1 [ (resdata.cname) = "ID", (bingogen.primary_key) = 1 ];
    uint32 Level          = 2 [ (resdata.cname) = "等级" ];
    uint32 Quality1Weight = 3 [ (resdata.cname) = "1级品质权重" ];
    uint32 Quality2Weight = 4 [ (resdata.cname) = "2级品质权重" ];
    uint32 Quality3Weight = 5 [ (resdata.cname) = "3级品质权重" ];
    uint32 Quality4Weight = 6 [ (resdata.cname) = "4级品质权重" ];
    uint32 Quality5Weight = 7 [ (resdata.cname) = "5级品质权重" ];
}

message ResPlayerTalentSlot {
    option (cltgen.system_databin)   = true;
    option (cltgen.gamecore_databin) = true;

    uint32 Quality                       = 1 [ (resdata.cname) = "品质" ];
    uint32 Count                         = 2 [ (resdata.cname) = "数量" ];
    repeated uint32 MandatoryGroups      = 3 [ (resdata.cname) = "强制组", (resdata.count) = "3" ];
    bool IgnoreTalentPredication         = 4 [ (resdata.cname) = "忽略天赋条件判断" ];
    bool ImplicitExcludeWhenElectionFail = 5 [ (resdata.cname) = "落选天赋排除互斥" ];
    string EngageGL                      = 6 [ (resdata.cname) = "激活蓝图" ];
    string SlotDescription               = 7 [ (resdata.cname) = "描述", (resdata.translate) = true ];
    string UnlockSlotTip                 = 8 [ (resdata.cname) = "开槽的tip提示", (resdata.translate) = true ];
}

message ResPlayerTalentSlotGroup {
    option (cltgen.pk)               = "GroupID";
    option (cltgen.index)            = "Type";
    option (cltgen.system_databin)   = true;
    option (cltgen.gamecore_databin) = true;

    uint32 GroupID                     = 1 [ (resdata.cname) = "槽位组ID" ];
    uint32 Type                        = 2 [ (resdata.cname) = "槽位组类型" ];
    uint32 Weight                      = 3 [ (resdata.cname) = "权重" ];
    uint32 Count                       = 4 [ (resdata.cname) = "数量" ];
    repeated ResPlayerTalentSlot Slots = 5 [ (resdata.cname) = "槽位", (resdata.count) = "8" ];
}

enum PlayerTalentAIType {
    PlayerTalentAIType_Common               = 0;                                                  // 通用天赋，不用处理
    PlayerTalentAIType_DropHeros            = 1 [ (resdata.keyword_alias) = "掉落指定羁绊英雄" ]; // 参数1 羁绊ID
    PlayerTalentAIType_DropToken            = 2 [ (resdata.keyword_alias) = "掉落指定令牌" ];     // 参数1 令牌ID
    PlayerTalentAIType_DropQualityHeros     = 3 [ (resdata.keyword_alias) = "掉落指定费用英雄" ]; // 参数1 费用
    PlayerTalentAIType_ImmediateRecoverHP   = 4 [ (resdata.keyword_alias) = "立即回血" ];         // 参数1 回血量
    PlayerTalentAIType_PhysicsDamage        = 5 [ (resdata.keyword_alias) = "物理伤害系" ];
    PlayerTalentAIType_MagicDamage          = 6 [ (resdata.keyword_alias) = "法术伤害系" ];
    PlayerTalentAIType_BuffQualityHeros     = 7 [ (resdata.keyword_alias) = "英雄费用Buff" ];        // 参数1，起始费用；参数2，终止费用
    PlayerTalentAIType_EnSureCHeroInQuality = 8 [ (resdata.keyword_alias) = "保证C位品质在范围内" ]; // 参数1，起始费用；参数2，终止费用
}

message ResPlayerTalent {
    option (cltgen.pk)               = "ID";
    option (cltgen.index)            = "LordID";
    option (cltgen.index)            = "Quality";
    option (cltgen.index)            = "LordID, Quality";
    option (cltgen.index)            = "MajorGroup";
    option (cltgen.index)            = "MinorGroup";
    option (cltgen.index)            = "GameCoreAITalentEnabled";
    option (cltgen.system_databin)   = true;
    option (cltgen.gamecore_databin) = true;
    option (cltgen.random_access)    = Runtime;

    uint32 ID                          = 1 [ (resdata.cname) = "天赋ID", (bingogen.primary_key) = 1 ];
    uint32 SvrPlayModUniqID            = 25 [ (bingogen.primary_key) = 2 ];

    string Name                        = 2 [ (resdata.cname) = "名称", (resdata.translate) = true ];
    string Icon                        = 3 [ (resdata.cname) = "图标" ];
    string Description                 = 4 [ (resdata.cname) = "描述", (resdata.translate) = true ];
    string Summary                     = 5 [ (resdata.cname) = "摘要", (resdata.translate) = true ];
    uint32 LordID                      = 6 [ (resdata.cname) = "专属棋手" ];
    uint32 Quality                     = 7 [ (resdata.cname) = "品质" ];
    uint32 Weight                      = 8 [ (resdata.cname) = "权重" ];
    string MajorGroup                  = 9 [ (resdata.cname) = "同类组" ];
    string MinorGroup                  = 10 [ (resdata.cname) = "同名组" ];
    repeated uint32 ImplictMutexGroups = 11 [ (resdata.cname) = "互斥组", (resdata.count) = "2" ];
    repeated uint32 ExplictMutexGroups = 12 [ (resdata.cname) = "额外互斥组", (resdata.count) = "2" ];
    uint32 MandatoryGroup              = 13 [ (resdata.cname) = "强制组" ];
    string PredicateGL                 = 14 [ (resdata.cname) = "条件蓝图" ];
    string LogicGL                     = 15 [ (resdata.cname) = "逻辑蓝图" ];
    string WorldViewShort              = 16 [ (resdata.cname) = "世界观短句" , (resdata.translate) = true];
    bool GameCoreAITalentEnabled       = 17 [ (resdata.cname) = "行为树AI启用" ];
    PlayerTalentAIType AITalentType    = 18 [ (resdata.cname) = "AI用类型" ];
    repeated int32 AIParams            = 19 [ (resdata.cname) = "AI用参数", (resdata.count) = "2" ];
    uint32 TalentSkillID               = 20 [ (resdata.cname) = "天赋技能ID" ];
    repeated uint32 AdditionParams     = 21 [ (resdata.cname) = "附加参数", (resdata.count) = "5" ];
    RES_TALENT_FUNC_TYPE FuncType      = 22 [ (resdata.cname) = "功能类型"];
    uint32 RecruitMinStepID            = 23 [ (resdata.cname) = "新手战生效最低阶段ID" ];
}

enum RES_TALENT_FUNC_TYPE {
    RES_TALENT_FUNC_TYPE_NULL               = 0;
    RES_TALENT_FUNC_TYPE_DAMAGE             = 1 [ (resdata.keyword_alias) = "输出" ];
    RES_TALENT_FUNC_TYPE_DEFENCE            = 2 [ (resdata.keyword_alias) = "防御" ];
    RES_TALENT_FUNC_TYPE_ENERGY             = 3 [ (resdata.keyword_alias) = "能量" ];
    RES_TALENT_FUNC_TYPE_FIGHT              = 4 [ (resdata.keyword_alias) = "战斗机制" ];
    RES_TALENT_FUNC_TYPE_RESOURCE           = 5 [ (resdata.keyword_alias) = "资源获取" ];
    RES_TALENT_FUNC_TYPE_MANAGE             = 6 [ (resdata.keyword_alias) = "运营机制" ];
}
//技能指示器类型
enum TalentSkilIndicateType { TalentSkilIndicateType_Rectangle = 0 [ (resdata.keyword_alias) = "矩形" ]; }

enum PlayerTalentTriggerSkillDirection {
    PlayerTalentTriggerSkillDirection_None               = 0 ;
    PlayerTalentTriggerSkillDirection_Forward            = 1 [ (resdata.keyword_alias) = "技能XZ正方向" ];
    PlayerTalentTriggerSkillDirection_Opposite           = 2 [ (resdata.keyword_alias) = "技能XZ反方向" ];
}

message ResPlayerTalentSkill {
    option (cltgen.pk)               = "ID";
    option (cltgen.system_databin)   = true;
    option (cltgen.gamecore_databin) = true;
    option (cltgen.random_access)    = Runtime;

    uint32 ID                                        = 1 [ (resdata.cname) = "天赋技能ID" ];
    uint32 CD                                        = 2 [ (resdata.cname) = "CD时长" ];
    TalentSkilIndicateType skillIndicateType         = 3 [ (resdata.cname) = "技能指示器类型" ];
    repeated int32 skillIndicateParams               = 4 [ (resdata.cname) = "技能指示器参数", (resdata.count) = "2" ];    
    uint32 triggerMethod                             = 5 [ (resdata.cname) = "技能释放方式掩码" ];
    PlayerTalentTriggerSkillDirection triggerDir     = 6 [ (resdata.cname) = "技能释放方向" ];
}

message ResPlayerTalentGroup {
    option (cltgen.pk)               = "GroupID";
    option (cltgen.system_databin)   = true;
    option (cltgen.gamecore_databin) = true;
    option (cltgen.random_access)    = Runtime;

    string GroupID                  = 1 [ (resdata.cname) = "天赋组ID" ];
    uint32 MaxCount                 = 2 [ (resdata.cname) = "最大数量" ];
    RES_TALENT_TYPE TalentGroupType = 3 [ (resdata.cname) = "天赋类型" ];
    uint32 MinPropose               = 4 [ (resdata.cname) = "最少选举多少个" ];
    uint32 MaxPropose               = 5 [ (resdata.cname) = "最多选举多少个" ];
}

message ResPlayerTalentMutexGroup {
    option (cltgen.pk)               = "MutexGroupID, TalentID";
    option (cltgen.index)            = "MutexGroupID";
    option (cltgen.gamecore_databin) = true;

    uint32 MutexGroupID = 1 [ (resdata.cname) = "天赋互斥组ID" ];
    uint32 TalentID     = 2 [ (resdata.cname) = "天赋ID" ];
}

message TalentConf {
    ResPlayerTalent PlayerTalentCfg = 1 [ (bingogen.databin_path) = "" ];
}

// -------------------------天赋----------------------------

message ResFormationAttackRange {
    option (cltgen.pk)               = "HeroID";
    option (cltgen.gamecore_databin) = true;

    uint32 HeroID        = 1 [ (resdata.cname) = "英雄ID", (bingogen.primary_key) = 1 ];
    uint32 Type          = 2 [ (resdata.cname) = "类型", (resdata.bind) = "RES_FORMATION_ATTACK_RANGE_TYPE" ];
    repeated int32 Param = 3 [ (resdata.cname) = "参数", (resdata.count) = "2" ];
}

enum RES_FORMATION_ATTACK_RANGE_TYPE {
    option (cltgen.gamecore_enum)                  = true;
    RES_FORMATION_ATTACK_RANGE_TYPE_NULL           = 0;
    RES_FORMATION_ATTACK_RANGE_TYPE_FRONT_BACK_ROW = 1 [ (resdata.keyword_alias) = "前后排" ];
}

// -------------------------蓝图AI Begin----------------------------

message MaxFightInterest { uint32 scale = 1 [ (resdata.cname) = "战力放大万分比" ]; }

message ResMaxFightValueByCard {
    option (cltgen.pk)               = "ID";
    option (cltgen.gamecore_databin) = true;

    uint32 ID                               = 1 [ (resdata.cname) = "ID", (bingogen.primary_key) = 1 ];
    uint32 FightValueTopN                   = 2 [ (resdata.cname) = "战力前N方案" ];
    repeated MaxFightInterest InterestScale = 3 [ (resdata.cname) = "利息等级", (resdata.count) = "5" ];
}

message ResAIFormationHeroInfo {
    int32 ID               = 1 [ (resdata.cname) = "ID" ];
    int32 CoordX           = 2 [ (resdata.cname) = "占位列" ];
    int32 CoordZ           = 3 [ (resdata.cname) = "占位排" ];
    repeated uint32 Equips = 4 [ (resdata.cname) = "装备ID", (resdata.count) = "4" ];
}

enum AIFormationType
{
    option (cltgen.gamecore_enum) = true;

    AIFormationType_None = 0;
    AIFormationType_Newbie = 1 [(resdata.keyword_alias) = "新手阵容"];
}

message ResAIFormations {
    option (cltgen.pk)               = "ID";
    option (cltgen.gamecore_databin) = true;
    option (cltgen.system_databin)   = true;
    option (cltgen.random_access)    = Runtime;
    option (cltgen.index)            = "MainRelative1,MainRelativeHeroNum1";
    option (cltgen.index)            = "MainRelative2,MainRelativeHeroNum2";
    option (cltgen.index)            = "LaunchType";

    uint32 ID                             = 1 [ (resdata.cname) = "阵容ID", (bingogen.primary_key) = 1 ];
    int32 HeroNum                         = 2 [ (resdata.cname) = "人口数" ];
    int32 Difficulty                      = 3 [ (resdata.cname) = "难度系数千分比" ];
    int32 CHero                           = 4 [ (resdata.cname) = "C位英雄" ];
    int32 SubCHero                        = 5 [ (resdata.cname) = "副C英雄" ];
    AIFormationType LaunchType            = 6 [ (resdata.cname) = "投放类型" ];
    repeated ResAIFormationHeroInfo Heros = 7 [ (resdata.cname) = "英雄", (resdata.count) = "9" ];
    int32 TotalValue                      = 8 [ (resdata.cname) = "队伍价值" ];
    RES_RELATIVE_ID MainRelative1         = 9 [ (resdata.cname) = "主羁绊1" ];
    int32 MainRelativeHeroNum1            = 10 [ (resdata.cname) = "主羁绊人数1" ];
    RES_RELATIVE_ID MainRelative2         = 11 [ (resdata.cname) = "主羁绊2" ];
    int32 MainRelativeHeroNum2            = 12 [ (resdata.cname) = "主羁绊人数2" ];
}

message ResAIFormationFactors {
    option (cltgen.pk)               = "ID";
    option (cltgen.gamecore_databin) = true;
    option (cltgen.index)            = "OwnNum, CardQuality";

    uint32 ID         = 1 [ (resdata.cname) = "ID", (bingogen.primary_key) = 1 ];
    int32 OwnNum      = 2 [ (resdata.cname) = "拥有数量" ];
    int32 CardQuality = 3 [ (resdata.cname) = "费用" ];
    int32 Factor      = 4 [ (resdata.cname) = "放大系数千分比" ];
}

message ResWarmBTreeStrategy
{
    option (cltgen.pk)               = "ID";
    option (cltgen.gamecore_databin) = true;

    uint32 ID = 1 [(resdata.cname) = "行为树温暖策略ID", (bingogen.primary_key) = 1 ];
    uint32 NormalAICount = 2 [(resdata.cname) = "正常AI个数"];
}

message ResTriggerCalculateFormation {
    option (cltgen.pk)               = "ID";
    option (cltgen.gamecore_databin) = true;

    uint32 ID                    = 1 [ (resdata.cname) = "ID", (bingogen.primary_key) = 1 ];
    int32 LowerRound             = 2 [ (resdata.cname) = "触发目标阵容判定下限回合" ];
    int32 UpperRound             = 3 [ (resdata.cname) = "触发目标阵容判定上限回合" ];
    int32 FourOrFiveCardCount    = 4 [ (resdata.cname) = "或获得四五费卡数" ];
    int32 ThreeStar3QualityCount = 5 [ (resdata.cname) = "或拥有3费以上3星卡数" ];
    int32 RankTopN               = 6 [ (resdata.cname) = "或当前排名前N" ];
    int32 OwnCoin                = 7 [ (resdata.cname) = "或组合条件1金币" ];
    int32 Hp                     = 8 [ (resdata.cname) = "或组合条件1血量" ];
    int32 Star2Quality3Count     = 9 [ (resdata.cname) = "或拥有2费以上3星卡数" ];
}

message ChessAIThrowCoin {
    int32 StartRound     = 1 [ (resdata.cname) = "开始回合" ];
    int32 ThrowCoinCount = 2 [ (resdata.cname) = "每回合金币数" ];
}

message ChessAIBuffShopItem {
    int32 BuffCounter = 1 [ (resdata.cname) = "计次" ];
    int32 BuffRate    = 2 [ (resdata.cname) = "千分比" ];
}
message ChessAIBuffShop { repeated ChessAIBuffShopItem Quality = 1 [ (resdata.cname) = "费用", (resdata.count) = "5" ]; }

message ResChessAIDifficulty {
    option (cltgen.pk)               = "ID";
    option (cltgen.gamecore_databin) = true;

    int32 ID                            = 1 [ (resdata.cname) = "难度ID", (bingogen.primary_key) = 1 ];
    int32 StageOneBuffPercent           = 2 [ (resdata.cname) = "目标阵容Buff价值上限百分比" ];
    int32 RestartBuffTargetRound        = 3 [ (resdata.cname) = "或重启目标BUFF下限回合" ];
    int32 RestartBuffTargetHP           = 4 [ (resdata.cname) = "或重启目标BUFF血量上限" ];
    int32 RestartBuffTargetLoseCount    = 5 [ (resdata.cname) = "或重启目标BUFF连败回合" ];
    repeated ChessAIThrowCoin ThrowCoin = 6 [ (resdata.cname) = "丢钱", (resdata.count) = "2" ];
    int32 ReachOfflineContinueBuffPercent = 7 [ (resdata.cname) = "达成离线目标阵容后Buff生效概率百分比" ];
}

message ResChessAIShopBuff {
    option (cltgen.pk)               = "ID";
    option (cltgen.gamecore_databin) = true;
    option (cltgen.index)            = "AIDifficultyID,ShopLevel";

    int32 ID                      = 1 [ (resdata.cname) = "ID", (bingogen.primary_key) = 1 ];
    int32 AIDifficultyID          = 2 [ (resdata.cname) = "难度ID" ];
    int32 ShopLevel               = 3 [ (resdata.cname) = "商店等级" ];
    ChessAIBuffShop FormationBuff = 4 [ (resdata.cname) = "目标阵容Buff" ];
    ChessAIBuffShop WorkerBuff    = 5 [ (resdata.cname) = "打工阵容Buff" ];
}

message ResChessAIDCardLevel {
    option (cltgen.pk)               = "ID";
    option (cltgen.gamecore_databin) = true;
    option (cltgen.index)            = "CHeroQuality, SubCHeroQuality";

    int32 ID              = 1 [ (resdata.cname) = "ID", (bingogen.primary_key) = 1 ];
    int32 CHeroQuality    = 2 [ (resdata.cname) = "主C品质" ];
    int32 SubCHeroQuality = 3 [ (resdata.cname) = "副C品质" ];
    int32 Level           = 4 [ (resdata.cname) = "D牌等级" ];
}

enum EQUIP_TYPE {
    EQUIP_TYPE_NONE         = 0;
    EQUIP_TYPE_PHY          = 1 [ (resdata.keyword_alias) = "物理装备" ];
    EQUIP_TYPE_MGC          = 2 [ (resdata.keyword_alias) = "法术装备" ];
    EQUIP_TYPE_COM          = 3 [ (resdata.keyword_alias) = "通用装备" ];
    EQUIP_TYPE_UNLOAD_EQUIP = 4 [ (resdata.keyword_alias) = "卸载装备" ];
    EQUIP_TYPE_TOKEN        = 5 [ (resdata.keyword_alias) = "转职令牌" ];
    EQUIP_TYPE_UPGRADE_CORE = 6 [ (resdata.keyword_alias) = "合成核心" ];
    EQUIP_TYPE_DEFENSE      = 7 [ (resdata.keyword_alias) = "防御装备" ];
}

enum EQUIP_USE_TYPE {
    EQUIP_USE_TYPE_NONE      = 0;
    EQUIP_USE_TYPE_PRE_EQUIP = 1 [ (resdata.keyword_alias) = "散件装备" ];
    EQUIP_USE_TYPE_FINAL     = 2 [ (resdata.keyword_alias) = "成品装备" ];
    EQUIP_USE_TYPE_SPECIAL   = 3 [ (resdata.keyword_alias) = "特殊装备" ];
}

message AIConstLevelConfig {
    int32 UpLevelCoinLower = 1 [ (resdata.cname) = "升级金币下限" ];
    int32 DCardCoinLower   = 2 [ (resdata.cname) = "D牌金币下限" ];
}

message ResChessAIConst {
    option (cltgen.pk)               = "ID";
    option (cltgen.gamecore_databin) = true;

    int32 ID                               = 1 [ (resdata.cname) = "ID", (bingogen.primary_key) = 1 ];
    int32 LoseCount2ChangePos              = 2 [ (resdata.cname) = "连败X回合换站位" ];
    int32 CoinDepositUpper                 = 3 [ (resdata.cname) = "次级利息血量" ];
    int32 CoinDepositLower                 = 4 [ (resdata.cname) = "不吃利息血量" ];
    repeated AIConstLevelConfig LevelConfs = 5 [ (resdata.cname) = "等级", (resdata.count) = "9" ];
}

enum AINormalConstKey {
    option (cltgen.gamecore_enum) = true;

    AINormalConstKey_None                            = 0;
    AINormalConstKey_BossAwardTimeStart              = 1 [ (resdata.keyword_alias) = "AI常量抢宝箱随机时间下限" ];
    AINormalConstKey_BossAwardTimeEnd                = 2 [ (resdata.keyword_alias) = "AI常量抢宝箱随机时间上限" ];
    AINormalConstKey_ChooseHpTalentValue             = 3 [ (resdata.keyword_alias) = "AI常量回血天赋差值" ];
    AINormalConstKey_JudgePhyOrMagicLowestPopulation = 4 [ (resdata.keyword_alias) = "AI常量物理法系最低人口" ];
    AINormalConstKey_LeftAndRightEquipID1            = 5 [ (resdata.keyword_alias) = "AI常量影响左右站位装备1" ];
    AINormalConstKey_LeftAndRightEquipID2            = 6 [ (resdata.keyword_alias) = "AI常量影响左右站位装备2" ];
    AINormalConstKey_NaoNaoCamp1                     = 7 [ (resdata.keyword_alias) = "AI常量闹闹阵营1" ];
    AINormalConstKey_NaoNaoCamp2                     = 8 [ (resdata.keyword_alias) = "AI常量闹闹阵营2" ];
    AINormalConstKey_NaoNaoCamp3                     = 9 [ (resdata.keyword_alias) = "AI常量闹闹阵营3" ];
    AINormalConstKey_QiaoJieJieTeleportTwoEnhanceID  = 10 [ (resdata.keyword_alias) = "AI常量乔姐姐传人2人EnhanceID" ];
    AINormalConstKey_BaiGeUseTwoEnhanceID            = 11 [ (resdata.keyword_alias) = "AI常量李白使用两次技能EnhanceID" ];
    AINormalConstKey_BaiGePermanentRemoveEnhanceID   = 12 [ (resdata.keyword_alias) = "AI常量李白永久移除技能EnhanceID" ];
    AINormalConstKey_BaiGeRemoveSameQualityEnhanceID = 13 [ (resdata.keyword_alias) = "AI常量李白移除相同品质技能EnhanceID" ];
    AINormalConstKey_MinShiYinWinSkillID             = 14 [ (resdata.keyword_alias) = "AI常量明世隐胜利技能ID" ];
    AINormalConstKey_MinShiYinLoseSkillID            = 15 [ (resdata.keyword_alias) = "AI常量明世隐失败技能ID" ];
    AINormalConstKey_WuFengGuangZhen1                = 16 [ (resdata.keyword_alias) = "AI常量武凤光阵1Key" ];
    AINormalConstKey_WuFengGuangZhen2                = 17 [ (resdata.keyword_alias) = "AI常量武凤光阵2Key" ];
    AINormalConstKey_TwoPosSkillEnhanceID            = 18 [ (resdata.keyword_alias) = "AI常量武凤两个法阵的技能EnhanceID" ];
}

message ResChessAINormalConst {
    option (cltgen.pk)               = "ID";
    option (cltgen.gamecore_databin) = true;

    AINormalConstKey ID = 1 [ (resdata.cname) = "ID", (bingogen.primary_key) = 1 ];
    int32 IntParam1     = 2 [ (resdata.cname) = "数字参数1" ];
    int32 IntParam2     = 3 [ (resdata.cname) = "数字参数2" ];
    string StrParam     = 4 [ (resdata.cname) = "字符串参数" ];
}

// -------------------------蓝图AI End----------------------------

// -------------------------Settings Begin--------------------------

enum RES_SETTINGS_GROUP_TYPE {
    RES_SETTINGS_GROUP_TYPE_NULL     = 0; //预留字段
    RES_SETTINGS_GROUP_TYPE_BASIC    = 1 [ (resdata.keyword_alias) = "基础" ];
    RES_SETTINGS_GROUP_TYPE_SOUND    = 2 [ (resdata.keyword_alias) = "声音" ];
    RES_SETTINGS_GROUP_TYPE_PRIVACY  = 3 [ (resdata.keyword_alias) = "隐私" ];
    RES_SETTINGS_GROUP_TYPE_GAMEPLAY = 4 [ (resdata.keyword_alias) = "玩法" ];
    RES_SETTINGS_GROUP_TYPE_HELP     = 5 [ (resdata.keyword_alias) = "帮助" ];
    RES_SETTINGS_GROUP_TYPE_DOWNLOAD = 6 [ (resdata.keyword_alias) = "下载" ];
}

enum RES_SETTINGS_HELP_TYPE {
    RES_SETTINGS_HELP_TYPE_NULL      = 0; //预留字段
    RES_SETTINGS_HELP_TYPE_LEFT_TIPS = 1 [ (resdata.keyword_alias) = "左提示" ];
    RES_SETTINGS_HELP_TYPE_DOWN_TIPS = 2 [ (resdata.keyword_alias) = "下提示" ];
    RES_SETTINGS_HELP_TYPE_PICTURE   = 3 [ (resdata.keyword_alias) = "图片" ];
}

enum RES_SETTINGS_STYLE_TYPE {
    RES_SETTINGS_STYLE_TYPE_NULL          = 0;
    RES_SETTINGS_STYLE_TYPE_SINGLE_SELECT = 1 [ (resdata.keyword_alias) = "单选" ];
    RES_SETTINGS_STYLE_TYPE_SWITCH        = 2 [ (resdata.keyword_alias) = "开关" ];
    RES_SETTINGS_STYLE_TYPE_SWITCH_SLIDE  = 3 [ (resdata.keyword_alias) = "开关+滑块" ];
    RES_SETTINGS_STYLE_TYPE_MULTI_SELECT  = 4 [ (resdata.keyword_alias) = "多选" ];
    RES_SETTINGS_STYLE_TYPE_TEXT          = 5 [ (resdata.keyword_alias) = "文本" ];
    RES_SETTINGS_STYLE_TYPE_CHILD_SWITCH  = 6 [ (resdata.keyword_alias) = "子选项开关" ];
    RES_SETTINGS_STYLE_TYPE_CHILD_SLIDE   = 7 [ (resdata.keyword_alias) = "子选项滑块" ];
    RES_SETTINGS_STYLE_TYPE_DOUBLE_SWITCH = 8 [ (resdata.keyword_alias) = "双开关" ];
    RES_SETTINGS_STYLE_TYPE_DROPDOWNLIST  = 9 [ (resdata.keyword_alias) = "下拉列表选择框" ];
}

enum RES_SETTINGS_CS_FEATURE_TYPE {
    RES_SETTINGS_CS_FEATURE_TYPE_NULL      = 0;
    RES_SETTINGS_CS_FEATURE_TYPE_FRIEND_OB = 1 [ (resdata.keyword_alias) = "允许OB" ];
    RES_SETTINGS_CS_FEATURE_TYPE_HUANHUATIP_OPEN  = 2 [ (resdata.keyword_alias) = "幻化令牌Tip弹出" ];
    RES_SETTINGS_CS_FEATURE_TYPE_RESERVE   = 100; // server防止攻击
}

enum RES_SETTINGS_FEATURE_TYPE {
    option (cltgen.gamecore_enum) = true;
    option (cltgen.csharp_enum)   = true;
    option (cltgen.bp_export) = true;

    RES_SETTINGS_FEATURE_TYPE_NULL                    = 0;
    RES_SETTINGS_FEATURE_TYPE_DEVICE_STATUS           = 1 [ (resdata.keyword_alias) = "设备状态" ];
    RES_SETTINGS_FEATURE_TYPE_GRAPHICS_QUALITY        = 2 [ (resdata.keyword_alias) = "画面质量" ];
    RES_SETTINGS_FEATURE_TYPE_SCREEN_RESOLUTION       = 3 [ (resdata.keyword_alias) = "分辨率" ];
    RES_SETTINGS_FEATURE_TYPE_FRAME_RATE              = 4 [ (resdata.keyword_alias) = "帧率" ];
    RES_SETTINGS_FEATURE_TYPE_SOUND                   = 5 [ (resdata.keyword_alias) = "声音" ];
    RES_SETTINGS_FEATURE_TYPE_TEMP_BATTLE_ZONE        = 6 [ (resdata.keyword_alias) = "临时备战区" ];
    RES_SETTINGS_FEATURE_TYPE_DROP_DOWN               = 7 [ (resdata.keyword_alias) = "下拖动出售" ];
    RES_SETTINGS_FEATURE_TYPE_MUSIC                   = 8 [ (resdata.keyword_alias) = "音乐" ];
    RES_SETTINGS_FEATURE_TYPE_SFX                     = 9 [ (resdata.keyword_alias) = "音效" ];
    RES_SETTINGS_FEATURE_TYPE_VOICE                   = 10 [ (resdata.keyword_alias) = "语音" ];
    RES_SETTINGS_FEATURE_TYPE_LORFPOWERSHOWTYPE       = 11 [ (resdata.keyword_alias) = "棋手熟练度战力显示设置" ];
    RES_SETTINGS_FEATURE_TYPE_VIBRATION               = 12 [ (resdata.keyword_alias) = "震动" ];
    RES_SETTINGS_FEATURE_TYPE_MATCHCONFIRM            = 13 [ (resdata.keyword_alias) = "匹配确认" ];
    RES_SETTINGS_FEATURE_TYPE_BLOOM                   = 14 [ (resdata.keyword_alias) = "Bloom" ];
    RES_SETTINGS_FEATURE_TYPE_EQUIPWEARING            = 15 [ (resdata.keyword_alias) = "装备穿戴提示" ];
    RES_SETTINGS_FEATURE_TYPE_RELATIONTIPS            = 16 [ (resdata.keyword_alias) = "羁绊图标提示" ];
    RES_SETTINGS_FEATURE_TYPE_DYNAMIC_GUIDE           = 17 [ (resdata.keyword_alias) = "动态引导" ];
    RES_SETTINGS_FEATURE_TYPE_ROCKER                  = 18 [ (resdata.keyword_alias) = "摇杆" ];
    RES_SETTINGS_FEATURE_TYPE_ACTOR_STROKE            = 19 [ (resdata.keyword_alias) = "角色描边" ];
    RES_SETTINGS_FEATURE_TYPE_ONLINE_STATE            = 20 [ (resdata.keyword_alias) = "在线状态" ];
    RES_SETTINGS_FEATURE_TYPE_HISTORY_RECORD          = 21 [ (resdata.keyword_alias) = "历史战绩" ];
    RES_SETTINGS_FEATURE_TYPE_GLORY_TITLE             = 22 [ (resdata.keyword_alias) = "荣耀称号显示" ];
    RES_SETTINGS_FEATURE_TYPE_SPECTATOR_ALLOWED       = 23 [ (resdata.keyword_alias) = "允许观战" ];
    RES_SETTINGS_FEATURE_TYPE_DAMAGESTATS_POPUP       = 24 [ (resdata.keyword_alias) = "伤害统计弹出" ];
    RES_SETTINGS_FEATURE_TYPE_PREPARE_ARRANGE         = 25 [ (resdata.keyword_alias) = "备战区整理" ];
    RES_SETTINGS_FEATURE_TYPE_SELLCONFIRM             = 26 [ (resdata.keyword_alias) = "出售确认" ];
    RES_SETTINGS_FEATURE_TYPE_VIGNETTE                = 27 [ (resdata.keyword_alias) = "Vignette" ];
    RES_SETTINGS_FEATURE_TYPE_ELIMINATE_ENEMY         = 28 [ (resdata.keyword_alias) = "淘汰敌方反馈" ];
    RES_SETTINGS_FEATURE_TYPE_PERMISSION              = 29 [ (resdata.keyword_alias) = "权限管理" ];
    RES_SETTINGS_FEATURE_TYPE_PERMISSION_MICRO        = 30 [ (resdata.keyword_alias) = "麦克风权限" ];
    RES_SETTINGS_FEATURE_TYPE_PERMISSION_SFX          = 31 [ (resdata.keyword_alias) = "音效权限" ];
    RES_SETTINGS_FEATURE_TYPE_PERMISSION_LOCATION     = 32 [ (resdata.keyword_alias) = "定位权限" ];
    RES_SETTINGS_FEATURE_TYPE_PERMISSION_WIFI         = 33 [ (resdata.keyword_alias) = "WIFI权限" ];
    RES_SETTINGS_FEATURE_TYPE_PERMISSION_MOBILE_NET   = 34 [ (resdata.keyword_alias) = "移动互联网权限" ];
    RES_SETTINGS_FEATURE_TYPE_PERMISSION_PHOTO        = 35 [ (resdata.keyword_alias) = "相册权限" ];
    RES_SETTINGS_FEATURE_TYPE_CHARACTER_RENDER        = 36 [ (resdata.keyword_alias) = "角色渲染" ];
    RES_SETTINGS_FEATURE_TYPE_EFFECT                  = 37 [ (resdata.keyword_alias) = "特效" ];
    RES_SETTINGS_FEATURE_TYPE_MIRROR_REFLECTION       = 38 [ (resdata.keyword_alias) = "镜面反射" ];
    RES_SETTINGS_FEATURE_TYPE_REALTIME_SHADOWS        = 39 [ (resdata.keyword_alias) = "实时阴影" ];
    RES_SETTINGS_FEATURE_TYPE_ANTIALIASING            = 40 [ (resdata.keyword_alias) = "抗锯齿" ];
    RES_SETTINGS_FEATURE_TYPE_DEPTH_OF_FIELD          = 41 [ (resdata.keyword_alias) = "景深" ];
    RES_SETTINGS_FEATURE_TYPE_Battle_Rule_Tips        = 42 [ (resdata.keyword_alias) = "对局规则提示" ];
    RES_SETTINGS_FEATURE_TYPE_NotJoin_Lobby_Rank_Show = 43 [ (resdata.keyword_alias) = "不参与大厅玩家信息展示" ];
    RES_SETTINGS_FEATURE_TYPE_Close_Lobby_Rank_Show   = 44 [ (resdata.keyword_alias) = "屏蔽大厅玩家信息展示" ];
    RES_SETTINGS_FEATURE_TYPE_SHOW_ACHIEVE            = 45 [ (resdata.keyword_alias) = "展示成就" ];
    RES_SETTINGS_FEATURE_TYPE_SCENE                   = 46 [ (resdata.keyword_alias) = "场景" ];
    RES_SETTINGS_FEATURE_TYPE_HERO_EQUIP              = 47 [ (resdata.keyword_alias) = "显示装备穿戴面板" ];
    RES_SETTINGS_FEATURE_TYPE_MNZ_AUTO_EQUIP          = 48 [ (resdata.keyword_alias) = "模拟战自动穿戴掉落装备" ];
    RES_SETTINGS_FEATURE_TYPE_LANGUAGE                = 49 [ (resdata.keyword_alias) = "语言"];
    RES_SETTINGS_FEATURE_TYPE_Show_SelfInfo_InRank    = 50 [ (resdata.keyword_alias) = "不参与排行榜玩家信息展示"];
    RES_SETTINGS_FEATURE_TYPE_AUCTION_DIVIDEND_TIPS   = 51 [ (resdata.keyword_alias) = "拍卖分红提示"];
    RES_SETTINGS_FEATURE_TYPE_AUTO_DOWNLOAD_VIA_WIFI  = 52 [ (resdata.keyword_alias) = "仅WIFI自动下载" ];
    RES_SETTINGS_FEATURE_TYPE_EQUIP_TO_RECOMMEND_HERO = 53 [ (resdata.keyword_alias) = "装备自动穿给推荐英雄" ];
    RES_SETTINGS_FEATURE_TYPE_EQUIP_ALL_TO_WEAR       = 54 [ (resdata.keyword_alias) = "装备一键穿戴" ];
    RES_SETTINGS_FEATURE_TYPE_SKIP_AMIMATION          = 55 [ (resdata.keyword_alias) = "跳过动画" ];
    RES_SETTINGS_FEATURE_TYPE_AUTO_EQUIP              = 56 [ (resdata.keyword_alias) = "自动装配" ];
    RES_SETTINGS_FEATURE_TYPE_COUNT                   = 57   [ (resdata.keyword_alias) = "总数量" ]; // 定义一定要放在这个前面！！！
    RES_SETTINGS_FEATURE_TYPE_RESERVE_LEN             = 100;  // server防止攻击                                     // server防止攻击
}

message StSubSettings { uint32 FeatureID = 1 [ (resdata.cname) = "功能ID", (resdata.bind) = "RES_SETTINGS_FEATURE_TYPE,RES_SETTINGS_CS_FEATURE_TYPE" ]; }

message ResSettings {
    option (cltgen.pk)             = "ID";
    option (cltgen.index)          = "IsServerUse, FeatureID";
    option (cltgen.system_databin) = true;

    uint32 ID                       = 1 [ (resdata.cname) = "ID" ];
    bool IsServerUse                = 2 [ (resdata.cname) = "服务器是否使用" ];
    uint32 Major                    = 3 [ (resdata.cname) = "页签", (resdata.bind) = "RES_SETTINGS_GROUP_TYPE" ];
    uint32 FeatureGroup             = 4 [ (resdata.cname) = "功能分组" ];
    uint32 FeatureID                = 5 [ (resdata.cname) = "功能ID", (resdata.bind) = "RES_SETTINGS_FEATURE_TYPE,RES_SETTINGS_CS_FEATURE_TYPE" ];
    string FeatureName              = 6 [ (resdata.cname) = "功能名称", (resdata.translate) = true ];
    bool DefaultStatus              = 7 [ (resdata.cname) = "默认状态" ];
    uint32 ElementStyle             = 8 [ (resdata.cname) = "元件样式", (resdata.bind) = "RES_SETTINGS_STYLE_TYPE" ];
    string ElementTitle             = 9 [ (resdata.cname) = "元件标题", (resdata.translate) = true ];
    uint32 DefaultValue             = 10 [ (resdata.cname) = "默认值" ];
    bool HaveSubItem                = 11 [ (resdata.cname) = "是否有子选项" ];
    repeated StSubSettings SubItems = 12 [ (resdata.cname) = "子选项", (resdata.count) = "6" ];
    bool HaveHelp                   = 13 [ (resdata.cname) = "是否有帮助功能" ];
    uint32 HelpType                 = 14 [ (resdata.cname) = "帮助类型", (resdata.bind) = "RES_SETTINGS_HELP_TYPE" ];
    string HelpTitle                = 15 [ (resdata.cname) = "帮助标题", (resdata.translate) = true ];
    string HelpText                 = 16 [ (resdata.cname) = "帮助文字", (resdata.translate) = true ];
    repeated string HelpIcon        = 17 [ (resdata.cname) = "帮助图片", (resdata.count) = "3" ];
    repeated string HelpDesc        = 18 [ (resdata.cname) = "帮助描述", (resdata.count) = "3", (resdata.translate) = true ];
    bool bConfirm                   = 19 [ (resdata.cname) = "是否有二次确认" ];
    string ConfirmText              = 20 [ (resdata.cname) = "二次确认文本", (resdata.translate) = true ];
    bool IsSubItem                  = 21 [ (resdata.cname) = "是否子选项" ];
    bool OpenFilterItem             = 22 [ (resdata.cname) = "开启选项过滤" ];
    repeated string FilterItems     = 23 [ (resdata.cname) = "选项过滤", (resdata.count) = "6" ];
    bool IsHide                     = 24 [ (resdata.cname) = "是否隐藏" ];
}

enum RES_THANKDISPLAY_DIR_TYPE {
    RES_THANKDISPLAY_DIR_TYPE_NULL  = 0;
    RES_THANKDISPLAY_DIR_TYPE_LEFT  = 1 [ (resdata.keyword_alias) = "左" ];
    RES_THANKDISPLAY_DIR_TYPE_RIGHT = 2 [ (resdata.keyword_alias) = "右" ];
}

message PersonalDisplayInfo {
    string Name     = 1 [ (resdata.cname) = "名称" ];
    string Describe = 2 [ (resdata.cname) = "描述" ];
}

message ResAcknowledgmentsDataBin {
    option (cltgen.pk)             = "GroupTitle";
    option (cltgen.system_databin) = true;
    option (cltgen.random_access)  = Runtime;

    string GroupTitle                         = 1 [ (resdata.cname) = "分组标题" ];
    string EngTitle                           = 2 [ (resdata.cname) = "英文标题" ];
    uint32 SpineID                            = 3 [ (resdata.cname) = "领主皮肤ID" ];
    uint32 Direction                          = 4 [ (resdata.cname) = "展示方向", (resdata.bind) = "RES_THANKDISPLAY_DIR_TYPE" ];
    uint32 Option                             = 5 [ (resdata.cname) = "展示方案" ];
    string NameList                           = 6 [ (resdata.cname) = "名单" ];
    repeated PersonalDisplayInfo PersonalInfo = 7 [ (resdata.cname) = "个人展示", (resdata.count) = "5" ];
}
// -------------------------Settings End----------------------------

//  ------------------------- 限免 Begin----------------------------

enum RES_FREE_TYPE {
    FREE_NULL     = 0;
    FREE_LORD     = 1 [ (resdata.keyword_alias) = "限免棋手" ];
    FREE_LORDSKIN = 2 [ (resdata.keyword_alias) = "限免棋手皮肤" ];
    FREE_MAX      = 3;
}

message ResFreeGroupCfgDataBin {
    option (resdata.output) = Server;

    uint32 GroupID = 1 [ (resdata.cname) = "组别ID" ];
    uint32 Type    = 2 [ (resdata.cname) = "限免类别", (resdata.bind) = "RES_FREE_TYPE" ];
    uint32 FreeID  = 3 [ (resdata.cname) = "限免ID" ];
}

message ResFreeCfgDataBin {
    option (resdata.output) = Server;

    string FreeStartTimeStr  = 1 [ (resdata.cname) = "开始时间" ];
    string FreeEndTimeStr    = 2 [ (resdata.cname) = "结束时间" ];
    uint32 FreeStartTimeGen  = 3;
    uint32 FreeEndTimeGen    = 4;
    repeated uint32 GroupIDs = 5 [ (resdata.cname) = "组别ID", (resdata.count) = "Legacy.FREE_GROUP_MAX_CNT" ];
}

// 限免配置.
message FreeConf {
    ResFreeGroupCfgDataBin FreeGroupCfg = 1 [ (bingogen.databin_path) = "" ];
    ResFreeCfgDataBin FreeCfg           = 2 [ (bingogen.databin_path) = "" ];
}

//  ------------------------- 限免 End----------------------------
message ResChessManExpInfo {
    option (cltgen.pk)             = "ID";
    option (cltgen.system_databin) = true;
    option (cltgen.index)          = "ID, IsNotShow";

    uint32 ID             = 1 [ (resdata.cname) = "棋子id" ];
    bool IsNotShow        = 2 [ (resdata.cname) = "是否不显示" ];
    string historyTitle   = 3 [ (resdata.cname) = "历史上的标题" ];
    string historyContent = 4 [ (resdata.cname) = "历史上的文本" ];
}

//  ------------------------- 战队 Begin----------------------------
enum RES_GUILD_CONST {
    RES_GUILD_CONST_RESERVED                      = 0;
    GUILD_ACTIVE_LEAVE_CD_MIN                     = 1 [ (resdata.keyword_alias) = "主动退出战队再次加入CD（分钟）" ];
    GUILD_AUTO_CHANGE_LEADER_OFFLINE_DAYS         = 2 [ (resdata.keyword_alias) = "队长自动转让最小离线天数" ];
    GUILD_AUTO_CHANGE_LEADER_SERVE_DAYS           = 3 [ (resdata.keyword_alias) = "队长自动转让最小任职天数" ];
    GUILD_AUTO_CHANGE_LEADER_MANAGER_OFFLINE_DAYS = 4 [ (resdata.keyword_alias) = "队长自动转让管理员最近活跃天数" ];
    GUILD_AUTO_CHANGE_LEADER_MEMBER_OFFLINE_DAYS  = 5 [ (resdata.keyword_alias) = "队长自动转让普通成员最近活跃天数" ];
    GUILD_AUTO_CHANGE_LEADER_MEMBER_JOIN_DAYS     = 6 [ (resdata.keyword_alias) = "队长自动转让普通成员最小加入天数" ];
    GUILD_CREATE_MONEY_COST                       = 7 [ (resdata.keyword_alias) = "战队创建消耗" ];
    GUILD_CYCLE_TOTAL_ACTIVE_VALUE_LIMIT          = 8 [ (resdata.keyword_alias) = "个人周总贡献上限" ];
    GUILD_CYCLE_BATTLE_ACTIVE_VALUE_LIMIT         = 9 [ (resdata.keyword_alias) = "个人周战斗贡献上限" ];
    GUILD_BATTLE_TOTAL_PARAM                      = 10 [ (resdata.keyword_alias) = "对战次数贡献参数" ];
    GUILD_BATTLE_TOP4_PARAM                       = 11 [ (resdata.keyword_alias) = "胜场次数贡献参数" ];
    GUILD_BATTLE_TOP1_PARAM                       = 12 [ (resdata.keyword_alias) = "夺冠次数贡献参数" ];
    GUILD_DESC_MAX_NUM                            = 13 [ (resdata.keyword_alias) = "战队描述最大字符数" ];

    RES_GUILD_CONST_MAX_COUNT = 14;
}

// 战队常量表
message ResGuildConstCfg {
    option (cltgen.pk)             = "ID";
    option (cltgen.system_databin) = true;

    uint32 ID        = 1 [ (resdata.cname) = "ID", (resdata.bind) = "RES_GUILD_CONST", (bingogen.primary_key) = 1 ];
    uint32 IntParam1 = 2 [ (resdata.cname) = "参数1", (resdata.bind) = "COM_GAMEITEM_TYPE" ];
    uint32 IntParam2 = 3 [ (resdata.cname) = "参数2", (resdata.bind) = "COM_GAMEMONEY_SUBTYPE" ];
    uint32 IntParam3 = 4 [ (resdata.cname) = "参数3" ];
}

enum RES_GUILD_JOINLIMIT_TYPE {
    RES_GUILD_JOINLIMIT_TYPE_RESERVED = 0;
    RES_GUILD_JOINLIMIT_TYPE_LEVEL    = 1 [ (resdata.keyword_alias) = "战队限制_等级" ];
    RES_GUILD_JOINLIMIT_TYPE_RANK     = 2 [ (resdata.keyword_alias) = "战队限制_段位" ];
}

// 战队加入限制表
message ResGuildJoinLimitCfg {
    option (cltgen.system_databin) = true;
    option (cltgen.random_access)  = Runtime;
    option (cltgen.index)          = "LimitType";

    uint32 LimitType = 1 [ (resdata.cname) = "限制类型", (resdata.bind) = "RES_GUILD_JOINLIMIT_TYPE", (bingogen.primary_key) = 1 ];
    int32 LimitParam = 2 [ (resdata.cname) = "限制参数", (resdata.bind) = "EPvpRankType", (bingogen.primary_key) = 2 ];
    string ShowDesc  = 3 [ (resdata.cname) = "显示内容" ];
}

// 战队等级表
message ResGuildLevelCfg {
    option (cltgen.pk)             = "Level";
    option (cltgen.system_databin) = true;
    option (cltgen.random_access)  = Runtime;

    uint32 Level        = 1 [ (resdata.cname) = "对应等级" ];
    uint32 ActiveValue  = 2 [ (resdata.cname) = "战队累计活跃值" ];
    uint32 MemberLimit  = 3 [ (resdata.cname) = "成员限制个数" ];
    uint32 ManagerLimit = 4 [ (resdata.cname) = "管理员限制个数" ];
}

// 战队ID刷新消耗表
message ResGuildShowIDRefreshCfg {
    option (cltgen.system_databin) = true;
    option (cltgen.random_access)  = Runtime;

    uint32 RefreshCount  = 1 [ (resdata.cname) = "刷新次数（大于）" ];
    ResGameItem CostItem = 2 [ (resdata.cname) = "消耗" ];
}

// 战队标签表
message ResGuildLabelCfg {
    option (cltgen.pk)             = "ID";
    option (cltgen.system_databin) = true;
    option (cltgen.random_access)  = Runtime;
    option (cltgen.index)          = "ID";

    uint32 ID    = 1 [ (resdata.cname) = "标签ID", (bingogen.primary_key) = 1 ];
    string Label = 2 [ (resdata.cname) = "标签描述", (resdata.translate) = true ];
}

enum RES_GUILD_ICON_TYPE {
    GUILD_ICON_RESERVED   = 0;
    GUILD_ICON_ICON       = 1 [ (resdata.keyword_alias) = "战队图标_图标" ];
    GUILD_ICON_BACKGROUND = 2 [ (resdata.keyword_alias) = "战队图标_底纹" ];
}

enum RES_GUILD_LOGO_COLOR_TYPE {
    GUILD_COLOR_RESERVED = 0;
    COLOR_BLUE           = 1 [ (resdata.keyword_alias) = "蓝色" ];
    COLOR_ORANGE         = 2 [ (resdata.keyword_alias) = "橙色" ];
    COLOR_RED            = 3 [ (resdata.keyword_alias) = "红色" ];
    COLOR_PURPLE         = 4 [ (resdata.keyword_alias) = "紫色" ];
    COLOR_GREEN          = 5 [ (resdata.keyword_alias) = "绿色" ];
    COLOR_YELLOW         = 6 [ (resdata.keyword_alias) = "黄色" ];
    COLOR_BLACK          = 7 [ (resdata.keyword_alias) = "黑色" ];
    COLOR_BROWN          = 8 [ (resdata.keyword_alias) = "棕色" ];
    COLOR_GRAY           = 9 [ (resdata.keyword_alias) = "灰色" ];
    COLOR_WHITE          = 10 [ (resdata.keyword_alias) = "白色" ];
}

// 战队图标表
message ResGuildIconCfg {
    option (cltgen.pk)             = "IconID, IconType";
    option (cltgen.system_databin) = true;
    option (cltgen.index)          = "IconID";
    option (cltgen.index)          = "IconType";
    option (cltgen.random_access)  = Runtime;

    uint32 IconType = 1 [ (resdata.cname) = "Icon类型", (resdata.bind) = "RES_GUILD_ICON_TYPE", (bingogen.primary_key) = 1 ];
    uint32 IconID   = 2 [ (resdata.cname) = "IconID", (bingogen.primary_key) = 2 ];
    string Desc     = 3 [ (resdata.cname) = "描述" ];
    string ResPath  = 4 [ (resdata.cname) = "资源路径" ];
    uint32 ColorID  = 5 [ (resdata.cname) = "颜色值索引", (resdata.bind) = "RES_GUILD_LOGO_COLOR_TYPE" ];
    string Color    = 6 [ (resdata.cname) = "颜色值" ];
    uint32 Group    = 7 [ (resdata.cname) = "组ID" ];
}

// 战队号码前缀黑名单
message ResGuildShowNumberBlackList {
    string InvalidPrefix = 1 [ (resdata.cname) = "非法前缀", (bingogen.primary_key) = 1 ]; // 非法的前缀
}

message GuildConf {
    ResGuildConstCfg GuildConstCfg                       = 1 [ (bingogen.databin_path) = "" ];
    ResGuildJoinLimitCfg GuildJoinLimitCfg               = 2 [ (bingogen.databin_path) = "" ];
    ResGuildLevelCfg GuildLevelCfg                       = 3 [ (bingogen.databin_path) = "" ];
    ResGuildShowIDRefreshCfg GuildShowIDRefreshCfg       = 4 [ (bingogen.databin_path) = "" ];
    ResGuildLabelCfg GuildLabelCfg                       = 5 [ (bingogen.databin_path) = "" ];
    ResGuildIconCfg GuildIconCfg                         = 6 [ (bingogen.databin_path) = "" ];
    ResGuildShowNumberBlackList GuildShowNumberBlackList = 7 [ (bingogen.databin_path) = "" ];
}

//  ------------------------- 战队 End  ----------------------------

//  ------------------------- 全局跳转表 Begin----------------------------
enum RES_JUMP_TYPE {
    JUMP_NULL         = 0;
    JUMP_EMBATTLE     = 1 [ (resdata.keyword_alias) = "布阵" ];
    JUMP_PERSONALISE  = 2 [ (resdata.keyword_alias) = "个性化" ];
    JUMP_LORD         = 3 [ (resdata.keyword_alias) = "棋手" ];
    JUMP_BATTLEPASS   = 4 [ (resdata.keyword_alias) = "战令" ];
    JUMP_SHOP         = 5 [ (resdata.keyword_alias) = "商城" ];
    JUMP_HERO_COLLECT = 6 [ (resdata.keyword_alias) = "英雄收集" ];
    JUMP_PVP_SETTLE   = 7 [ (resdata.keyword_alias) = "结算详情" ];
    JUMP_Activity     = 8 [ (resdata.keyword_alias) = "活动" ];
    JUMP_SEASON_TRIP  = 9 [ (resdata.keyword_alias) = "赛季之旅" ];
    JUMP_PVP          = 10 [ (resdata.keyword_alias) = "PVP" ];
    JUMP_Friend       = 11 [ (resdata.keyword_alias) = "好友" ];
    JUMP_OPEN_PACKAGE = 12 [ (resdata.keyword_alias) = "卡包系统" ];
    JUMP_MAIL         = 13 [ (resdata.keyword_alias) = "邮件" ];
    JUMP_ACHIEVE      = 14 [ (resdata.keyword_alias) = "成就系统" ];
    JUMP_Grow         = 15 [ (resdata.keyword_alias) = "成长之路" ];
    JUMP_MAX          = 16;
}

message JumpInfo { string Direction = 1 [ (resdata.cname) = "说明" ]; }

message ResJumpGlobalInfoDataBin {
    option (cltgen.pk)             = "SystemType";
    option (cltgen.system_databin) = true;

    uint32 SystemType        = 1 [ (resdata.cname) = "对应系统", (resdata.bind) = "RES_JUMP_TYPE" ];
    uint32 SystemID          = 2 [ (resdata.cname) = "跳转ID" ];
    repeated JumpInfo Params = 3 [ (resdata.cname) = "跳转参数", (resdata.count) = "6" ];
    uint32 IsBlockJump       = 4 [ (resdata.cname) = "是否屏蔽跳转" ];
}
//  ------------------------- 全局跳转表 End----------------------------

// -------------------------打野玩法 Begin----------------------------
enum RES_BOSS_AWARD_VALUE_TYPE {
    option (cltgen.gamecore_enum) = true;
    option (cltgen.csharp_enum)   = true;

    VALUE_NULL       = 0;
    DEAD_DROP        = 1 [ (resdata.keyword_alias) = "死亡时掉落" ];
    AUTO_GET         = 2 [ (resdata.keyword_alias) = "关闭自动拾取" ];
    AWARD_AUTO_SELL  = 3 [ (resdata.keyword_alias) = "拾取后自动开启" ];
    AWARD_SHOP_MUTEX = 4 [ (resdata.keyword_alias) = "选卡和商店互斥" ];
    AWARD_GET_TIME   = 5 [ (resdata.keyword_alias) = "拾取时间" ];
    BATTLE_TIME_ADD  = 6 [ (resdata.keyword_alias) = "战斗时间继承" ];
    PRESET_SHOW      = 7 [ (resdata.keyword_alias) = "预设表现" ];
    DROP_DISTANCE    = 8 [ (resdata.keyword_alias) = "掉落距离" ];
    DROP_HPBOX_SHOW  = 9 [ (resdata.keyword_alias) = "随机掉落表现" ];
}

enum EBossAwadChooseType {
    option (cltgen.gamecore_enum) = true;
    option (cltgen.csharp_enum)   = true;

    Together = 0;
    Host     = 1;
    Group    = 2;
}

message ResProject8BossAwardValueCfg {
    option (cltgen.pk)               = "ID";
    option (cltgen.gamecore_databin) = true;
    option (cltgen.system_databin)   = true;

    uint32 ID    = 1 [ (resdata.cname) = "ID", (resdata.bind) = "RES_BOSS_AWARD_VALUE_TYPE" ];
    uint32 Value = 2 [ (resdata.cname) = "变量" ];
}

enum RES_AWARD_PERFORM_TYPE {
    option (cltgen.gamecore_enum) = true;
    option (cltgen.csharp_enum)   = true;

    AWARD_NULL               = 0;
    AGE_PICK_BOX             = 1 [ (resdata.keyword_alias) = "拾取宝箱AGE" ];
    AGE_BOSS_PREPARE         = 2 [ (resdata.keyword_alias) = "BOSS准备表演AGE" ];
    AGE_BOSS_AWARD_PREPARE   = 3 [ (resdata.keyword_alias) = "奖励准备表演AGE" ];
    AGE_BOSS_ENTER           = 4 [ (resdata.keyword_alias) = "BOSS入场AGE" ];
    AGE_BOSS_AWARD_ENTER     = 5 [ (resdata.keyword_alias) = "奖励入场AGE" ];
    AGE_BOSS_LEAVE           = 6 [ (resdata.keyword_alias) = "BOSS离场AGE" ];
    BATTLE_FILED_CENTER_NAME = 7 [ (resdata.keyword_alias) = "主场中心点名字" ];
    BATTLE_MONSTER_POS       = 8 [ (resdata.keyword_alias) = "怪物阵位" ];
    AGE_DROP_BOX             = 9 [ (resdata.keyword_alias) = "掉落宝箱AGE" ];
}

message ResProject8AwardPerformCfg {
    option (cltgen.pk)               = "ID";
    option (cltgen.gamecore_databin) = true;
    option (cltgen.system_databin)   = true;

    uint32 ID    = 1 [ (resdata.cname) = "ID", (resdata.bind) = "RES_AWARD_PERFORM_TYPE" ];
    string Value = 2 [ (resdata.cname) = "变量" ];
}

message ResProject8BossPresetShowCfg {
    option (cltgen.pk)             = "ID";
    option (cltgen.system_databin) = true;

    uint32 ID          = 1 [ (resdata.cname) = "ID" ];
    string EffectPath  = 2 [ (resdata.cname) = "预览模型" ];
    uint32 EffectScale = 3 [ (resdata.cname) = "模型缩放比例" ];
}

message ResProject8RelativeRecordCfg {
    option (cltgen.pk)               = "ID";
    option (cltgen.gamecore_databin) = true;

    uint32 ID          = 1 [ (resdata.cname) = "回合" ];
    uint32 RecordCount = 2 [ (resdata.cname) = "掉落检查回合数" ];
}

message ResProject8AirdropAwardCfg {
    option (cltgen.pk)               = "ID";
    option (cltgen.index)            = "GroupID";
    option (cltgen.gamecore_databin) = true;
    option (cltgen.system_databin)   = true;

    uint32 ID                    = 1 [ (resdata.cname) = "ID", (bingogen.primary_key) = 1 ];
    uint32 GroupID               = 2 [ (resdata.cname) = "随机方案组", (bingogen.primary_key) = 2 ];
    uint32 Power                 = 3 [ (resdata.cname) = "权重" ];
    repeated uint32 DropIDList   = 4 [ (resdata.cname) = "奖励", (resdata.count) = "8" ];
}

message ResProject8AirdropAwardTypeCfg {
    option (cltgen.pk)               = "ID";
    option (cltgen.gamecore_databin) = true;
    option (cltgen.system_databin)   = true;
    option (cltgen.random_access)    = Runtime;

    uint32 ID             = 1 [ (resdata.cname) = "索引ID", (bingogen.primary_key) = 1 ];
    string Name           = 2 [ (resdata.cname) = "显示名称", (resdata.translate) = true ];
    string MiniIconPath   = 3 [ (resdata.cname) = "MiniIcon" ];
    string MiddleIconPath = 4 [ (resdata.cname) = "MiddleIcon" ];
    string BigIconPath    = 5 [ (resdata.cname) = "BigIcon" ];
    string BoxIconPath    = 6 [ (resdata.cname) = "宝箱图标" ];
    bool WithoutDropPresent = 7 [ (resdata.cname) = "无掉落表现" ];
    string DropName       = 8 [ (resdata.cname) = "奖励名字", (resdata.translate) = true];
    string ModelIconPath  = 9 [ (resdata.cname) = "模型图标路径" ];
    string QualityColorStr= 10 [ (resdata.cname) = "品阶颜色" ];
}

message ResAirdropAwardLogicGLCfg {
    option (cltgen.pk)               = "ID";
    option (cltgen.gamecore_databin) = true;

    uint32 ID             = 1 [ (resdata.cname) = "ID", (bingogen.primary_key) = 1 ];
    string LogicGL        = 2 [ (resdata.cname) = "逻辑蓝图" ];
}

// -------------------------打野玩法 End----------------------------

//  ------------------------- 投放剧本配置表 Begin----------------------------

enum RES_IEDROP_CONDITION {
    CONDITION_NULL             = 0;
    ROUND_NUM                  = 1 [ (resdata.keyword_alias) = "回合数" ];
    LOSE_STREAK                = 2 [ (resdata.keyword_alias) = "连败数" ];
    HP                         = 3 [ (resdata.keyword_alias) = "血量" ];
    RANK                       = 4 [ (resdata.keyword_alias) = "名次" ];
    LORD                       = 5 [ (resdata.keyword_alias) = "领主" ];
    RES_IEDROP_COIN            = 6 [ (resdata.keyword_alias) = "金币" ];
    RES_IEDROP_UNLOCK_NEW_CARD = 7 [ (resdata.keyword_alias) = "商店解锁新卡牌" ];
    CONDITION_MAX              = 8;
}

message IeDropConditionGroup {
    uint32 Condition       = 1 [ (resdata.cname) = "", (resdata.bind) = "RES_IEDROP_CONDITION" ];
    uint32 ConditionParam1 = 2 [ (resdata.cname) = "参数1" ];
    uint32 ConditionParam2 = 3 [ (resdata.cname) = "参数2" ];
}

message IeDropSubGroup {
    uint32 StrategyID                            = 1 [ (resdata.cname) = "ID" ];
    repeated IeDropConditionGroup ConditionGroup = 2 [ (resdata.cname) = "条件", (resdata.count) = "2" ];
}

message ResIeDropScenario { // 此表服务器没逻辑，但是策划要求服务器要检查剧本ID的相关配置，所以服务器需要读取
    option (cltgen.pk)               = "ScenarioID";
    option (cltgen.gamecore_databin) = true;

    uint32 ScenarioID                    = 1 [ (resdata.cname) = "剧本ID", (bingogen.primary_key) = 1 ];
    PLAYMOD_TYPE PlayModID               = 2 [ (resdata.cname) = "PlayModID" ];
    int32 FormationsIDBegin              = 3 [ (resdata.cname) = "阵容ID起始" ];
    int32 FormationsIDEnd                = 4 [ (resdata.cname) = "阵容ID结束" ];
    repeated IeDropSubGroup DropSubItems = 5 [ (resdata.cname) = "投放策略", (resdata.count) = "16" ];
}

// 间隔类型
enum RES_IEDROP_CD_TYPE {
    CD_NULL             = 0;
    SHOP_REFRESH     = 1 [ (resdata.keyword_alias) = "刷新商店" ];
    ROUND_CHANGE     = 2 [ (resdata.keyword_alias) = "回合变更" ];
}

// 触发类型
enum RES_IEDROP_TRIGGER_TYPE {
    TRIGGER_NULL             = 0;
    CARD_DROP     = 1 [ (resdata.keyword_alias) = "获得卡牌" ];
    STRATEGY_ACTIVED  = 2 [ (resdata.keyword_alias) = "策略激活" ];
    ROUND_CHANGED = 3  [ (resdata.keyword_alias) = "回合变更" ];
    PLAYER_LEVEL = 4 [ (resdata.keyword_alias) = "玩家升级" ];
    RANK_AND_HP_CHANGED = 5 [ (resdata.keyword_alias) = "排名血量变动" ];
    WARM_OPEN = 6 [ (resdata.keyword_alias) = "推荐阵容开启" ];
    GOLD_CHANGED = 7 [ (resdata.keyword_alias) = "金币变更" ];
    LORD_SKILL_USED = 8  [ (resdata.keyword_alias) = "使用领主技能" ];
    TALENT_ACTIVED = 9  [ (resdata.keyword_alias) = "天赋激活" ];
}

// 移除类型
enum RES_IEDROP_REMOVE_TYPE {
    REMOVE_NULL             = 0;
    CARD_CHANGE     = 1 [ (resdata.keyword_alias) = "卡牌变动" ];
    STRATEGY_REMOVE  = 2 [ (resdata.keyword_alias) = "策略移除" ];
    WARM_CLOSE = 3 [ (resdata.keyword_alias) = "推荐阵容关闭" ];
    WIN_NUM_CHANGE = 4 [ (resdata.keyword_alias) = "玩家连胜" ];        
}

// 效果类型
enum RES_IEDROP_EFFECT_TYPE {
    EFFECT_NULL             = 0; 
    RAISE_WEIGHT_BY_CFG_ID     = 1 [ (resdata.keyword_alias) = "卡牌掉落概率提升" ];
    TALENT_BY_CFG    = 2 [ (resdata.keyword_alias) = "天赋掉落" ];
    RAISE_WEIGHT_FOR_TARGET_FORMATION     = 3 [ (resdata.keyword_alias) = "目标阵容卡牌掉落概率提升" ];
    RAISE_WEIGHT_EQUIP_FOR_TARGET_FORMATION     = 4 [ (resdata.keyword_alias) = "目标阵容装备掉落概率提升" ];
    DROP_MULTI_CARD_CHECK_CHESS     = 5 [ (resdata.keyword_alias) = "掉落多张最多数量卡" ];
    RAISE_WEIGHT_FOR_WARM     = 6 [ (resdata.keyword_alias) = "推荐阵容概率提升" ];
    RAISE_WEIGHT_FOR_SLOT     = 7 [ (resdata.keyword_alias) = "备战区卡牌概率提升" ];
    GENERATE_AIRDROP    = 8 [ (resdata.keyword_alias) = "变更全局投放随机方案组" ];
    RAISE_WEIGHT_FOR_TALENT_CP    = 9 [ (resdata.keyword_alias) = "天赋CP卡牌掉落概率提升" ];
    RAISE_WEIGHT_BY_LORD_WZJ    = 10 [ (resdata.keyword_alias) = "王昭君领主技能提升" ];
    RAISE_WEIGHT_BY_RELATIVE    = 11 [ (resdata.keyword_alias) = "羁绊卡牌掉落概率提升" ];
}

message ResIeDropParamCfg {
    option (cltgen.pk)             = "StrategyID";
    option (cltgen.gamecore_databin) = true;

    uint32 StrategyID          = 1 [ (resdata.cname) = "策略ID", (bingogen.primary_key) = 1 ];
    uint32 UseCount = 2 [ (resdata.cname) = "使用次数" ];
    uint32 UseCDType          = 3 [ (resdata.cname) = "间隔类型", (resdata.bind) = "RES_IEDROP_CD_TYPE" ];
	uint32 UseCDCount          = 4 [ (resdata.cname) = "使用间隔" ];
	uint32 TriggerType = 5 [ (resdata.cname) = "触发条件", (resdata.bind) = "RES_IEDROP_TRIGGER_TYPE" ];
	repeated uint32 TriggerParam = 6 [ (resdata.cname) = "触发条件参数", (resdata.count) = "4" ];
	uint32 RemoveType = 7 [ (resdata.cname) = "终止条件", (resdata.bind) = "RES_IEDROP_REMOVE_TYPE" ];
	repeated uint32 RemoveParam = 8 [ (resdata.cname) = "终止条件参数", (resdata.count) = "4" ];
	uint32 EffectType = 9 [ (resdata.cname) = "效果类型", (resdata.bind) = "RES_IEDROP_EFFECT_TYPE" ];	 
	repeated uint32 EffectParam = 10 [ (resdata.cname) = "效果参数", (resdata.count) = "8" ];  
	uint32 TriggerCount = 11 [ (resdata.cname) = "触发次数" ]; 
}
//  ------------------------- 投放剧本配置表 End----------------------------

// ------------------------- LBS ----------------------------

// 行政区编码表.
message ResAdministrativeCodeDatabin {
    option (cltgen.system_databin) = true;
    option (cltgen.pk)             = "CodeID";
    uint32 CodeID                  = 1 [ (resdata.cname) = "code", (bingogen.primary_key) = 1 ];
    string Name                    = 2 [ (resdata.cname) = "name" ];
}

// 全球编码表
message ResGlobalCodeDatabin {
    option (cltgen.system_databin) = true;
    option (cltgen.pk)             = "NumCode";
    uint32 NumCode                 = 1 [ (resdata.cname) = "数字代码", (bingogen.primary_key) = 1 ];
    string StrCode                 = 2 [ (resdata.cname) = "字母代码" ];
    string EnName                  = 3 [ (resdata.cname) = "英文短名称" ];
    string CnName                  = 4 [ (resdata.cname) = "中文短名称" ];
}

message LbsConf { 
    ResAdministrativeCodeDatabin AdminAreaCodeCfg = 1 [ (bingogen.databin_path) = "" ]; 
    ResGlobalCodeDatabin GlobalCodeCfg = 2 [ (bingogen.databin_path) = "" ]; 
}

// ------------------------- LBS ----------------------------

message ResBattlePlayerLevelDataBin {
    option (cltgen.pk)               = "PlayerLevel";
    option (cltgen.gamecore_databin) = true;
    option (cltgen.system_databin)   = true;
    option (cltgen.random_access)    = Runtime;

    uint32 PlayerLevel   = 1 [ (resdata.cname) = "等级" ];
    uint32 Population    = 2 [ (resdata.cname) = "基础人口" ];
    uint32 CardPoolLevel = 3 [ (resdata.cname) = "基础商店等级" ];
    uint32 UpgradeExp    = 4 [ (resdata.cname) = "下一级经验" ];
}
message ResSystemEntryDataBin {
    option (cltgen.index)          = "SystemID";
    option (cltgen.system_databin) = true;
    uint32 SystemID                = 2 [ (resdata.cname) = "系统ID", (resdata.bind) = "RES_SYSTEM_UI_TYPE" ];
    string JumpParam               = 3 [ (resdata.cname) = "跳转参数" ];
    repeated string Param          = 4 [ (resdata.cname) = "参数", (resdata.count) = "4" ];
}

// ------------------------- Loading ----------------------------

enum RES_LOADING_SHOW_TYPE {
    LEVEL           = 0 [ (resdata.keyword_alias) = "等级类型" ];
}

message ResLoadingBgCfgDataBin {
    option (cltgen.pk)             = "ID";
    option (cltgen.system_databin) = true;
    option (cltgen.random_access)  = Runtime;

    uint32 ID                   = 1 [ (resdata.cname) = "ID"];
    uint32 showType             = 2 [ (resdata.cname) = "显示类型", (resdata.bind) = "RES_LOADING_SHOW_TYPE"  ];
    uint32 showMinLimit         = 3 [ (resdata.cname) = "显示下限" ];
    uint32 ShowMaxLimit         = 4 [ (resdata.cname) = "显示上限" ];
    uint32 TextGroupID          = 5 [ (resdata.cname) = "随机文本组ID" ];
    uint32 BgImageGroupID       = 6 [ (resdata.cname) = "背景图组ID" ];
    string Extra                = 7 [ (resdata.cname) = "备注" ];
}

message ResLoadingTextCfgDataBin {
    option (cltgen.system_databin) = true;
    option (cltgen.index) = "ID, TextGroupID";

    uint32 ID                   = 1 [ (resdata.cname) = "赛季ID"];
    uint32 TextGroupID          = 2 [ (resdata.cname) = "随机文本组id"];
    uint32 TextID               = 3 [ (resdata.cname) = "文本id" ];
    uint32 Weight               = 4 [ (resdata.cname) = "权重" ];
    string TextContent          = 5 [ (resdata.cname) = "文本内容" ];
}

message ResLoadingBgImageCfgDataBin {
    option (cltgen.index) = "ID, BgImageGroupID";
    option (cltgen.system_databin) = true;

    uint32 ID                 = 1 [ (resdata.cname) = "赛季ID"];
    uint32 BgImageGroupID     = 2 [ (resdata.cname) = "背景图组ID"];
    uint32 ImageID            = 3 [ (resdata.cname) = "图片ID" ];
    uint32 Weight             = 4 [ (resdata.cname) = "权重" ];
    string ImagePath          = 5 [ (resdata.cname) = "图片路径" ];
}

// ------------------------- 资源分包 ----------------------------

enum RES_QTS_PACKAGE_TYPE {
    BASIC = 0 [ (resdata.keyword_alias) = "基础包" ];
    PLAY_MOD = 1 [ (resdata.keyword_alias) = "玩法包" ];
}

message ResQtsPackageConfig {
    option (cltgen.pk) = "ID";
    option (cltgen.index) = "Type";
    option (cltgen.system_databin)   = true;

    uint32 ID = 1 [ (resdata.cname) = "ID" ];
    uint32 Type = 2 [ (resdata.cname) = "分类", (resdata.bind) = "RES_QTS_PACKAGE_TYPE" ];
    string Name = 3 [ (resdata.cname) = "名字" ];
    string Desc = 4 [ (resdata.cname) = "描述" ];
    bool AutoDownload = 5 [ (resdata.cname) = "自动下载", (resdata.bind) = "RES_ANONYMOUS" ];
    bool AllowUninstall = 6 [ (resdata.cname) = "允许删除", (resdata.bind) = "RES_ANONYMOUS" ];
}

// ------------------------- 资源分包 ----------------------------

// ----------------------------- 局内 -----------------------

message PvpGameConf { ResAISettleDetailDelayDataBin AISettleDelay = 1 [ (bingogen.databin_path) = "" ]; }

message ResAISettleDetailDelayDataBin {
    option (cltgen.pk)      = "MaxDelaySec";
    option (resdata.output) = Server;
    uint32 MaxDelaySec      = 1 [ (resdata.cname) = "最大延迟时间秒" ];
    uint32 IgnoreDelaySec   = 2 [ (resdata.cname) = "延迟忽略秒" ];
}

message ResLobbyChartsInfoDatabin {
    option (resdata.output) = Server;

    uint32 ID       = 1 [ (resdata.cname) = "ID", (bingogen.primary_key) = 1 ];
    uint32 RankMin  = 2 [ (resdata.cname) = "排名上限" ];
    uint32 RankMax  = 3 [ (resdata.cname) = "排名下限" ];
    uint32 SeasonID = 4 [ (resdata.cname) = "赛季ID" ];
    uint32 GameType = 5 [ (resdata.cname) = "玩法类型", (resdata.bind) = "COM_GAME_TYPE" ];
}

message ResLobbySystemEntryCfg {
    option (cltgen.pk)             = "SystemID";
    option (cltgen.system_databin) = true;
    option (cltgen.random_access)  = Runtime;
    uint32 SystemID                = 1 [ (resdata.cname) = "系统ID", (resdata.bind) = "RES_SYSTEM_TYPE" ];
    uint32 Priority                = 2 [ (resdata.cname) = "优先级" ];
}

message LobbyRankShowIndexCfg {
    option (cltgen.system_databin) = true;
    option (cltgen.random_access)  = Runtime;
    uint32 ShowIndexID             = 1 [ (resdata.cname) = "展示ID" ];
}

message LobbyConf { ResLobbyChartsInfoDatabin LobbyChartsDataBin = 1 [ (bingogen.databin_path) = "" ]; }

message ResPlayTemplateParam {
    option (cltgen.pk)               = "ID";
    option (cltgen.gamecore_databin) = true;
    option (cltgen.system_databin)   = true;

    int32 ID                                   = 1 [ (resdata.cname) = "模板ID" ];
    ResGridType GridType                       = 2 [ (resdata.cname) = "网格类型", (resdata.bind) = "ResGridType" ];
    int32 BattleGridWidth                      = 3 [ (resdata.cname) = "战斗网格宽度" ];
    int32 BattleGridHeight                     = 4 [ (resdata.cname) = "战斗网格高度" ];
    int32 BattleGridCellSize                   = 5 [ (resdata.cname) = "战斗网格单位大小" ];
    int32 AlternativeCellSize                  = 6 [ (resdata.cname) = "备战区单位大小" ];
    int32 ArtistBaseSceneID                    = 8 [ (resdata.cname) = "美术基础场景ID" ];
    int32 ViewClipRadius                       = 9 [ (resdata.cname) = "视野裁剪半径" ];
    int32 HpBarScaleLine                       = 10 [ (resdata.cname) = "血条刻度" ];
    int32 AtorSphereRadius                     = 11 [ (resdata.cname) = "角色碰撞盒半径" ];
    int32 FormulaParamA                        = 12 [ (resdata.cname) = "战斗公式常量A" ];
    int32 FormulaParamB                        = 13 [ (resdata.cname) = "战斗公式常量B" ];
    int32 FormulaParamC                        = 14 [ (resdata.cname) = "战斗公式常量C" ];
    int32 EnergyHurtRecoverShieldRate          = 15 [ (resdata.cname) = "受击回蓝护盾比例" ];
    ResFormulaAPFunc FormulaAPFunc             = 16 [ (resdata.cname) = "法强算法", (resdata.bind) = "ResFormulaAPFunc" ];
    int32 BattleCameraConfigType               = 17 [ (resdata.cname) = "战斗镜头配置" ];
    int32 PrepareCameraConfigType              = 18 [ (resdata.cname) = "布阵镜头配置" ];
    string BattleGridBackgroundPath            = 19 [ (resdata.cname) = "战斗网格背景路径" ];
    string BattleGridBluePath                  = 20 [ (resdata.cname) = "战斗网格蓝色路径" ];
    string BattleGridGreyHighLightPath         = 21 [ (resdata.cname) = "战斗网格灰色高亮路径" ];
    string BattleGridRedGridPath               = 22 [ (resdata.cname) = "战斗网格红色路径" ];
    string BattleGridYellowGridPath            = 23 [ (resdata.cname) = "战斗网格黄色路径" ];
    string AlternativeGridGreyPath             = 25 [ (resdata.cname) = "备战网格灰色路径" ];
    string AlternativeGridGreyHighLightPath    = 26 [ (resdata.cname) = "备战网格灰色高亮路径" ];
    string Upgrade2HideAgePath                 = 27 [ (resdata.cname) = "升2星隐藏age" ];
    string Upgrade2FlyAgePath                  = 28 [ (resdata.cname) = "升2星飞天age" ];
    string Upgrade2BornAgePath                 = 29 [ (resdata.cname) = "升2星出生age" ];
    string Upgrade3HideAgePath                 = 30 [ (resdata.cname) = "升3星隐藏age" ];
    string Upgrade3FlyAgePath                  = 31 [ (resdata.cname) = "升3星飞天age" ];
    string Upgrade3BornAgePath                 = 32 [ (resdata.cname) = "升3星出生age" ];
    bool SceneFlipWhenNotHost                  = 33 [ (resdata.cname) = "场景客场翻转" ];
    ResDamageMpRecoverType DamageMpRecoverType = 34 [ (resdata.cname) = "攻击回蓝算法", (resdata.bind) = "ResDamageMpRecoverType" ];
    uint32 GameTypeGroup                       = 35 [ (resdata.cname) = "游戏模式组", (resdata.bind) = "COM_GAMETYPE_GROUP" ];
    string AttackRangeTipPath                  = 36 [ (resdata.cname) = "攻击范围资源路径" ];
    repeated uint32 ContinuousWinCount         = 37 [ (resdata.cname) = "连胜数量", (resdata.count) = "4" ];
    repeated string ContinuousWinAge           = 38 [ (resdata.cname) = "连胜AGE", (resdata.count) = "4" ];
    string StopContinuousWinAge                = 39 [ (resdata.cname) = "终止连胜AGE" ];
    string NavDebugPath                        = 40 [ (resdata.cname) = "寻路调试资源路径" ];
	string BattleGridBackgroundHighLightPath   = 41 [ (resdata.cname) = "战斗网格背景高亮路径" ];
    string BattleGridDragExtraGridPath         = 42 [ (resdata.cname) = "战斗网格拖动超员路径" ];
}

enum ResGridType {
    option (cltgen.gamecore_enum) = true;
    option (cltgen.csharp_enum)   = true;
    ResGridTypeHexagon            = 0 [ (resdata.keyword_alias) = "六边形" ];
    ResGridTypeSquare             = 1 [ (resdata.keyword_alias) = "正方形" ];
	ResGridTypeRectangle          = 2 [ (resdata.keyword_alias) = "矩形" ];
}

enum ResFormulaAPFunc {
    option (cltgen.gamecore_enum) = true;
    ResFormulaAPFuncAdd           = 0 [ (resdata.keyword_alias) = "加法" ];
    ResFormulaAPFuncMulti         = 1 [ (resdata.keyword_alias) = "乘法" ];
}

enum ResDamageMpRecoverType {
    option (cltgen.gamecore_enum)    = true;
    ResDamageMpRecoverTypeConstValue = 0 [ (resdata.keyword_alias) = "固定值" ];
    ResDamageMpRecoverTypeRate       = 1 [ (resdata.keyword_alias) = "万分比" ];
}

message ResCurrencyRarityCfg {
    option (cltgen.system_databin) = true;
    option (cltgen.index)          = "CurrencyType";

    uint32 CurrencyType = 1 [ (resdata.cname) = "货币类型", (resdata.bind) = "COM_GAMEMONEY_SUBTYPE" ];
    uint32 ScarceLevel  = 2 [ (resdata.cname) = "稀有度", (resdata.bind) = "RES_SCARCE_LEVEL_TYPE" ];
    uint32 MinValue     = 3 [ (resdata.cname) = "下限" ];
    uint32 MaxValue     = 4 [ (resdata.cname) = "上限" ];
}

message ResPracticeConfig {
    option (cltgen.gamecore_databin) = true;
    option (cltgen.system_databin)   = true;
    option (cltgen.pk)               = "ConfigId";

    uint32 ConfigId             = 1 [ (resdata.cname) = "配置ID" ];
    uint32 PlayerLevel          = 2 [ (resdata.cname) = "玩家等级" ];
    uint32 AdditionalPopulation = 3 [ (resdata.cname) = "额外人口" ];
    uint32 Gold                 = 4 [ (resdata.cname) = "金币数量" ];
    uint32 CommonPuppetID       = 5 [ (resdata.cname) = "普通人偶Id" ];
    uint32 InvinciblePuppetID   = 6 [ (resdata.cname) = "无敌人偶Id" ];

    message Equip {
        uint32 ConfigId = 1 [ (resdata.cname) = "装备配置ID" ];
        uint32 Count    = 2 [ (resdata.cname) = "数量" ];
    }

    repeated Equip Equips = 7 [ (resdata.cname) = "装备", (resdata.count) = "3" ];
}

message ResAndroidDeviceUICfg {
    option (cltgen.pk)             = "ConfigId";
    option (cltgen.system_databin) = true;
    option (cltgen.random_access)  = Runtime;
    uint32 ConfigId                = 1 [ (resdata.cname) = "ID" ];
    string DeviceName              = 2 [ (resdata.cname) = "设备名" ];
    float WidthHeightRate          = 3 [ (resdata.cname) = "安全区域高宽比" ];
}

message ResRefTipsConfig {
    option (cltgen.pk)             = "Refer";
    option (cltgen.index)          = "Refer";
    option (cltgen.system_databin) = true;

    string Refer = 1 [ (resdata.cname) = "引用名称", (bingogen.primary_key) = 1 ];
    string Tips  = 2 [ (resdata.cname) = "文本", (resdata.translate) = true ];
}

message RefTipsCfg { ResRefTipsConfig RefTipsConfigs = 1 [ (bingogen.databin_path) = "" ]; }

message ResLanguageCfg {
    option (cltgen.pk)             = "LanguageID";
    option (cltgen.index)          = "LanguageNormal";
    option (cltgen.system_databin) = true;

    uint32 LanguageID                = 1 [ (resdata.cname) = "语言ID" ];
    GAMELANGUAGE_TYPE LanguageRule   = 2 [ (resdata.cname) = "语言规则"];
    string LanguageName              = 3 [ (resdata.cname) = "语言名称" ];
    string LanguageNormal            = 4 [ (resdata.cname) = "通用" ];
    string LanguageCode              = 5 [ (resdata.cname) = "语言简码组" ];
}

message ResDistrictLanguageCfg {
    option (cltgen.pk)             = "LanguageID";
    option (cltgen.index)          = "LanguageUseStatus";
    option (cltgen.system_databin) = true;

    uint32 LanguageID                     = 1 [ (resdata.cname) = "语言ID" ];
    GAMELANGUAGE_TYPE LanguageRule        = 2 [ (resdata.cname) = "语言规则"];
    bool LanguageUseStatus                = 3 [ (resdata.cname) = "是否使用" ];
    bool LanguageDefaultStatus            = 4 [ (resdata.cname) = "是否默认语言" ];
    string MSDKNoticeLanguage             = 5 [ (resdata.cname) = "MSDK公告语言" ];
    string INTLNoticeLanguage             = 6 [ (resdata.cname) = "INTL公告语言" ];
}

message ResCountryAgreementCfg {
    option (cltgen.pk)             = "ID";

    option (cltgen.index)          = "IsDefault";
    option (cltgen.index)          = "Enabled";
    option (cltgen.system_databin) = true;

    uint32 ID                                    = 1 [ (resdata.cname) = "国家ID" ];
    string Name                                  = 2 [ (resdata.cname) = "国家名称",(resdata.translate) = true];
    bool IsDefault                               = 3 [ (resdata.cname) = "是否默认" ];
    bool Enabled                                 = 4 [ (resdata.cname) = "是否可用" ];
    string AgreementIDList                       = 5 [ (resdata.cname) = "需要签署协议id" ];
    AgeAuthentication_Method AgeConfrimeMethod   = 6 [ (resdata.cname) = "年龄确认方式" ];
    uint32 AgeRestriction                        = 7 [ (resdata.cname) = "年龄门槛" ];
}

message ResLordExclusiveSkillConfig {
    option (cltgen.pk)               = "ConfigId";
    option (cltgen.system_databin)   = true;
    option (cltgen.gamecore_databin) = true;
    uint32 ConfigId                  = 1 [ (resdata.cname) = "领主ID" ];
    string HitSkillAgePath           = 2 [ (resdata.cname) = "攻击特效AGE路径" ];
}

message ResMNZDepositCardFetterIconCfg {
    option (cltgen.pk)               = "FetterID";
    option (cltgen.system_databin)   = true;

    RES_RELATIVE_ID FetterID = 1 [ (resdata.cname) = "职业阵营", (bingogen.primary_key) = 1, (resdata.bind) = "RES_RELATIVE_ID" ];
    string IconPath          = 2 [ (resdata.cname) = "图标路径" ];
}

message ResHomePageShowDataBin {
    option (cltgen.pk)             = "ShowID";
    option (cltgen.index)          = "IsDefineShow";
    option (cltgen.index)          = "IsSpecialShow";
    option (cltgen.index)          = "IsDefineShow, IsSpecialShow";
    option (cltgen.random_access)  = Runtime;
    option (cltgen.system_databin) = true;

    // 展示类型
    enum HomePageShowName {
        HomePageShowName_NONE          = 0;
        HomePageShowName_CLASSIC       = 1 [ (resdata.keyword_alias) = "王者印记" ];
        HomePageShowName_ACHIEVE       = 2 [ (resdata.keyword_alias) = "成就点数" ];
        HomePageShowName_PLAYDAYS      = 3 [ (resdata.keyword_alias) = "游戏天数" ];
        HomePageShowName_BATTLETIMES   = 4 [ (resdata.keyword_alias) = "对战场次" ];
        HomePageShowName_FIRSTTIMES    = 5 [ (resdata.keyword_alias) = "登顶次数" ];
        HomePageShowName_GOODLORD      = 6 [ (resdata.keyword_alias) = "精通棋手" ];
        HomePageShowName_GOODQUALITY   = 7 [ (resdata.keyword_alias) = "至臻收藏" ];
        HomePageShowName_HEROCOLLECT = 8 [ (resdata.keyword_alias) = "英雄收集" ];
        HomePageShowName_COLLECTOR     = 9 [ (resdata.keyword_alias) = "收藏家等级" ];
        HomePageShowName_LORDNUM       = 10 [ (resdata.keyword_alias) = "棋手数量" ];
        HomePageShowName_SKINNUM       = 11 [ (resdata.keyword_alias) = "皮肤数量" ];
    }

    uint32 ShowID             = 1 [ (resdata.cname) = "展示项ID", (bingogen.primary_key) = 1 ];
    HomePageShowName ShowName = 2 [ (resdata.cname) = "展示项名称" ];
    uint32 ShowParamCnt       = 3 [ (resdata.cname) = "展示项参数数量" ];
    string Icon               = 4 [ (resdata.cname) = "小图标路径" ];
    uint32 IsDefineShow       = 5 [ (resdata.cname) = "是否默认展示" ];
    uint32 IsSpecialShow      = 6 [ (resdata.cname) = "是否特殊展示" ];
    uint32 ShowSort           = 7 [ (resdata.cname) = "展示排序" ];
    uint32 ChooseWeight       = 8 [ (resdata.cname) = "默认选中权重" ];
    string Jump               = 9 [ (resdata.cname) = "跳转路径" ];
    string SelectedBigIcon    = 10 [ (resdata.cname) = "选中状态大图标路径" ];
    string UnSelectedBigIcon  = 11 [ (resdata.cname) = "未选中状态大图标路径" ];
}

message ResRegionRulesCfg {
    option (cltgen.pk)               = "ID";
    option (cltgen.system_databin)   = true;

    uint32 ID                              = 1 [ (resdata.cname) = "协议ID" ];
    string Name                            = 2 [ (resdata.cname) = "协议名称" ];
    string URL                             = 3 [ (resdata.cname) = "协议链接" ];
    GAMELANGUAGE_TYPE LanguageRule         = 4 [ (resdata.cname) = "协议所属语言"];
}

message HomePageConf { ResHomePageShowDataBin HomePageShowDataBin = 1 [ (bingogen.databin_path) = "" ]; }

enum ResLayerType {
    option (cltgen.gamecore_enum) = true;
    option (cltgen.csharp_enum)   = true;
	ResLayerType_None	 = 0;
	ResLayerType_Default = 1 [ (resdata.keyword_alias) = "默认层级" ];
	ResLayerType_Custom1 = 2 [ (resdata.keyword_alias) = "自定义层级1" ];
	ResLayerType_Custom2 = 3 [ (resdata.keyword_alias) = "自定义层级2" ];
	ResLayerType_Custom3 = 4 [ (resdata.keyword_alias) = "自定义层级3" ];
	ResLayerType_Custom4 = 5 [ (resdata.keyword_alias) = "自定义层级4" ];
}
 

enum ResBattleBroadcastType {
    option (cltgen.csharp_enum)   = true;
    option (cltgen.gamecore_enum) = true;
    ResBattleBroadcastType_None = 0;
    ResBattleBroadcastType_ContinueKill     = 1 [ (resdata.keyword_alias) = "5杀播报" ];
    ResBattleBroadcastType_NumerousHarm     = 2[ (resdata.keyword_alias) = "大量输出播报" ];
    ResBattleBroadcastType_TakeDamage       = 3[ (resdata.keyword_alias) = "承受大量伤害播报" ];
    ResBattleBroadcastType_Reat             = 4[ (resdata.keyword_alias) = "大量治疗播报" ];
    ResBattleBroadcastType_ControlLongTime  = 5[ (resdata.keyword_alias) = "控制时长播报" ];
    ResBattleBroadcastType_Kill             = 6[ (resdata.keyword_alias) = "每次击杀播报" ];
} 
message BattleBroadcastDataBin {
    option (cltgen.pk)             = "Type";
    option (cltgen.random_access)  = Runtime;
    option (cltgen.system_databin) = true;
    option (cltgen.gamecore_databin) = true;
    
    ResBattleBroadcastType Type             = 1 [(resdata.cname) = "类型" ];
    string BroadcastContent                 = 2 [(resdata.cname) = "播报文字",(resdata.translate) = true];
    uint32 AchieveParam                     = 3 [(resdata.cname) = "达成参数" ];
    uint32 IncrementParam                   = 4 [(resdata.cname) = "递增参数" ];
    uint32 UpperLimit                       = 5 [(resdata.cname) = "上限参数" ];
    uint32 Weights                          = 6 [(resdata.cname) = "优先级" ];
}

// 新手战战斗回合表
message ResRecruitBattleRoundExtCfg {
    option (cltgen.pk)               = "StepID, RoundNum";
    option (cltgen.gamecore_databin) = true;

    uint32 StepID            = 1 [ (resdata.cname) = "阶段ID", (bingogen.primary_key) = 1 ];
    uint32 RoundNum          = 2 [ (resdata.cname) = "回合数", (bingogen.primary_key) = 2 ];
    int32 PrepareTime        = 3 [ (resdata.cname) = "准备时间" ];
    uint32 ExtraDamage       = 4 [ (resdata.cname) = "额外伤害" ];
    uint32 DamageUpperLimit  = 5 [ (resdata.cname) = "伤害上限" ];
}

message ResDT_LineupRecommend {    
    uint32 DescPopTLogID             = 1 [ (resdata.cname) = "说明弹窗TLogID" ];
    uint32 PopTLogID                 = 2 [ (resdata.cname) = "弹窗TLogID" ];
    uint32 DontPopMinRankScore       = 3 [ (resdata.cname) = "不再弹窗最少段位分" ];
    uint32 UnlockPresentMinRankScore = 4 [ (resdata.cname) = "解锁预设推荐最少段位分" ];
    uint32 SinkRecruitMinRankScore   = 5 [ (resdata.cname) = "下沉页签最少段位分" ];
    uint32 DefaultID                 = 6 [ (resdata.cname) = "默认ID" ];
    string PreviewImgPath            = 7 [ (resdata.cname) = "预览图路径" ];
    uint32 PopMaxShowTime            = 8 [ (resdata.cname) = "弹窗最大显示时长" ];
}

// 新手战常量表
message ResRecruitConstDataBin {
    option (cltgen.system_databin)   = true;
    option (cltgen.random_access)    = Runtime;
    
    uint32 BattleFinScore = 1 [ (resdata.cname) = "新手战完成分值达成" ];
    uint32 NewPlayerInitScore = 2 [ (resdata.cname) = "新手初始新手战分值" ];
    uint32 OldPlayerInitScore = 3 [ (resdata.cname) = "老手初始新手战分值" ];
    ResDT_LineupRecommend LineupRecommend = 4 [ (resdata.cname) = "新手推荐阵容" ];
}

message RecruitRankAward {
    uint32 ScoreAdd = 1 [ (resdata.cname) = "奖励积分值" ];
}

message ResDT_RecruitStepUpPopTipsItem {
    string TipsStr  = 1 [ (resdata.cname) = "内容" ];
    string IconPath = 2 [ (resdata.cname) = "Icon路径" ];
}

message ResDT_RecruitStepUpPresent {    
    repeated ResDT_RecruitStepUpPopTipsItem PopTipsItem  = 1 [ (resdata.cname) = "弹出提示", (resdata.count) = "5" ];
    repeated uint32 PopRuleID                            = 2 [ (resdata.cname) = "弹出规则说明ID" , (resdata.count) = "5" ];
    repeated uint32 NeedPlayerAbilityType                = 3 [ (resdata.cname) = "弹出所需玩家能力类型" , (resdata.count) = "2" ];
}

// 新手战阶段表
message ResRecruitStepDataBin {
    option (cltgen.pk)             = "StepID";
    option (cltgen.system_databin)   = true;
    option (cltgen.gamecore_databin) = true;
    option (cltgen.random_access)    = Runtime;

    uint32 StepID           = 1 [ (resdata.cname) = "阶段ID", (bingogen.primary_key) = 1 ];
    uint32 MinScore         = 2 [ (resdata.cname) = "最小分值" ];
    uint32 MaxScore         = 3 [ (resdata.cname) = "最大分值" ];
    uint32 InitHP           = 4 [ (resdata.cname) = "初始血量" ];
    uint32 NewLvlUpAwardID  = 5 [ (resdata.cname) = "新手升级奖励ID" ];
    uint32 OldLvlUpAwardID  = 6 [ (resdata.cname) = "老手升级奖励ID" ];
    string TargetTaskDesc   = 7 [ (resdata.cname) = "目标任务描述", (resdata.translate) = true ];
    repeated RecruitRankAward RankAward = 8 [ (resdata.cname) = "排名", (resdata.count) = "8" ];
    uint32 FreeGroupID      = 9 [ (resdata.cname) = "限免棋手组ID" ];
    uint32 LordGroupID      = 10 [ (resdata.cname) = "可用棋手组ID" ];
    uint32 GameMemberCnt    = 11 [ (resdata.cname) = "新手战对局人数" ];
    uint32 AIShowGroup      = 12 [ (resdata.cname) = "新手战AI展示组" ];
    ResDT_RecruitStepUpPresent StepUpPresent = 13 [ (resdata.cname) = "" ];
    uint32 WarmStrategyID   = 14 [ (resdata.cname) = "温暖策略ID" ];
}

message ResRecruitBanHeroCfg {
    option (cltgen.gamecore_databin) = true;
    option (cltgen.index)            = "StepID";

    uint32 StepID               = 1 [ (resdata.cname) = "阶段ID", (bingogen.primary_key) = 1 ];
    repeated uint32 LordIDs     = 2 [ (resdata.cname) = "领主", (resdata.count) = "5" ];
    repeated uint32 HeroCfgIDs  = 3 [ (resdata.cname) = "棋子", (resdata.count) = "40" ];
}

message ResRecruitChessAuctionRound {
    option (cltgen.pk)               = "StepId";
    option (cltgen.gamecore_databin) = true;
    option (cltgen.gen_default)      = true;

    uint32 StepId                   = 1 [(resdata.cname) = "阶段ID", (bingogen.primary_key) = 1 ];
    ResDT_AuctionDropInfo DropInfo  = 2 [(resdata.cname) = ""];
}

// -------------------------新手战任务----------------------------
enum RECRUIT_TASKGUIDE_CONDITION_TYPE {
    RECRUIT_TASKGUIDE_CONDITION_INVALID                                       = 0;
    RECRUIT_TASKGUIDE_CONDITION_Rank                                          = 1 [ (resdata.keyword_alias) = "新手分值" ];
    RECRUIT_TASKGUIDE_CONDITION_Level                                         = 2 [ (resdata.keyword_alias) = "关卡类型" ];
    RECRUIT_TASKGUIDE_CONDITION_RoundCompare                                  = 3 [ (resdata.keyword_alias) = "回合数比较" ];
    RECRUIT_TASKGUIDE_CONDITION_HaveEquip                                     = 4 [ (resdata.keyword_alias) = "拥有装备" ];
    RECRUIT_TASKGUIDE_CONDITION_CompleteTasksCnt                              = 5 [ (resdata.keyword_alias) = "完成任务数" ];
    RECRUIT_TASKGUIDE_CONDITION_SpecifiedPlayerLevel                          = 6 [ (resdata.keyword_alias) = "角色等级达到" ];
    RECRUIT_TASKGUIDE_CONDITION_HaveSpecifiedStarChess                        = 7 [ (resdata.keyword_alias) = "拥有指定星级的棋子" ];
    RECRUIT_TASKGUIDE_CONDITION_UseSkillCount                                 = 8 [ (resdata.keyword_alias) = "使用指定次数主动技能" ];
    RECRUIT_TASKGUIDE_CONDITION_UpgradeEquipCount                             = 9 [ (resdata.keyword_alias) = "升级装备次数" ];
    RECRUIT_TASKGUIDE_CONDITION_WearingEquipment                              = 10 [ (resdata.keyword_alias) = "穿戴装备次数" ];
    RECRUIT_TASKGUIDE_CONDITION_ActiveRelativeNumOfPeople                     = 11 [ (resdata.keyword_alias) = "激活羁绊人数" ];
    RECRUIT_TASKGUIDE_CONDITION_FinalRanking                                  = 12 [ (resdata.keyword_alias) = "最终比赛名次" ];
    RECRUIT_TASKGUIDE_CONDITION_FinishSpecifiedTasks                          = 13 [ (resdata.keyword_alias) = "完成前置指定任务" ];
    RECRUIT_TASKGUIDE_CONDITION_RoundCurrencyCount                            = 14 [ (resdata.keyword_alias) = "回合开始拥有金币数量"];
    RECRUIT_TASKGUIDE_CONDITION_RefreshShopCnt                                = 15 [ (resdata.keyword_alias) = "刷新商店次数" ];
    RECRUIT_TASKGUIDE_CONDITION_UseHeroDrawCnt                                = 16 [ (resdata.keyword_alias) = "使用英雄兑换券数量" ];
    RECRUIT_TASKGUIDE_CONDITION_LordLimit                                     = 17 [ (resdata.keyword_alias) = "棋手限制" ];
    RECRUIT_TASKGUIDE_CONDITION_RoundOverCurrencyCount                        = 18 [ (resdata.keyword_alias) = "回合结束拥有金币数量"];
    RECRUIT_TASKGUIDE_CONDITION_BluePrintSetCond                              = 19 [ (resdata.keyword_alias) = "蓝图判断条件"];
    RECRUIT_TASKGUIDE_CONDITION_HaveSpecifiedStarAndQualityChess              = 20 [ (resdata.keyword_alias) = "拥有指定星级和品质的棋子"];
}
//条件
message RecruitTaskGuideCondInfo {
    uint32 Type           = 1 [ (resdata.cname) = "类型", (resdata.bind) = "RECRUIT_TASKGUIDE_CONDITION_TYPE" ];
    repeated uint32 Param = 2 [ (resdata.cname) = "参数", (resdata.count) = "Legacy.RES_MAX_CONDITION_PARAMCNT"];
    uint32 GoalCnt        = 3 [ (resdata.cname) = "目标值" ];
    bool FailRemoveTask   = 4 [ (resdata.cname) = "失败移除任务至黑名单" ];
}

enum CLIENT_TASKTYPE {
    RECRUIT_TASKTYPE_INVALID    = 0;
    TASK_RECRUITBATTLE          = 1 [ (resdata.keyword_alias) = "新手战任务" ];
    TASK_LORD                   = 2 [ (resdata.keyword_alias) = "棋手任务" ];
    TASK_TUTORIAL               = 3 [ (resdata.keyword_alias) = "新手剧本任务" ];
    TASK_LAST                   = 4;
}

message ResRecruitTaskDataBin {
    option (cltgen.pk)             = "TaskID";
    option (cltgen.index)          = "TaskType";
    option (cltgen.system_databin) = true;
    option (cltgen.random_access)  = Runtime;

    uint32 TaskID                                               = 1 [ (resdata.cname) = "任务ID", (bingogen.primary_key) = 1 ];
    string TaskName                                             = 2 [ (resdata.cname) = "任务名称", (resdata.translate) = true ];
    string TaskDesc                                             = 3 [ (resdata.cname) = "任务描述", (resdata.translate) = true ];
    repeated RecruitTaskGuideCondInfo TaskUnLockCond            = 4 [ (resdata.cname) = "任务开放条件",(resdata.count) = "2" ];
    repeated RecruitTaskGuideCondInfo TaskShowCond              = 5 [ (resdata.cname) = "任务显示条件",(resdata.count) = "3" ];
    repeated RecruitTaskGuideCondInfo TaskFinishCond            = 6 [ (resdata.cname) = "任务完成条件" ,(resdata.count) = "2"];
    RecruitTaskGuideCondInfo TaskCloseCond                      = 7 [ (resdata.cname) = "任务关闭条件" ];
    uint32 RuleDescID                                           = 8 [ (resdata.cname) = "任务关联规则说明ID" ];
    string AssociatedUI                                         = 9 [ (resdata.cname) = "任务关联高亮UI" ];
    string AssociatedPanel                                      = 10 [ (resdata.cname) = "任务关联面板" ];
    string AssociatedBluePrint                                  = 11 [ (resdata.cname) = "任务关联蓝图" ];
    uint32 AwardDropID                                          = 12 [ (resdata.cname) = "任务首次完成奖励ID" ];
    CLIENT_TASKTYPE TaskType                                    = 13 [ (resdata.cname) = "任务类型" ];
    uint32 TaskTypeParam                                        = 14 [ (resdata.cname) = "类型参数" ];    
    uint32 TaskUnlockRuleID                                     = 15 [ (resdata.cname) = "任务解锁规则条目ID" ];
}

message RecruitBattleConf {
    ResRecruitConstDataBin  RecruitConstDataBin = 1 [ (bingogen.databin_path) = "" ];
    ResRecruitStepDataBin   RecruitStepDataBin = 2 [ (bingogen.databin_path) = "" ];
    ResRecruitTaskDataBin   RecruitTaskDataBin = 3 [ (bingogen.databin_path) = "" ];
}
